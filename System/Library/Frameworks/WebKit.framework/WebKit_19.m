void sub_1973F22A0(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, _DWORD *a9, WTF *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,WTF::StringImpl *a28,_DWORD *cf,WTF::StringImpl *a30,_DWORD *a31,WTF *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,WTF *a37)
{
  unsigned __int8 **v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t *v40;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;

  if (a27)
    (*(void (**)(uint64_t))(*(_QWORD *)a27 + 8))(a27);
  if (a37)
  {
    do
    {
      v42 = __ldaxr((unsigned int *)a37);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, (unsigned int *)a37));
    if (!v43)
    {
      atomic_store(1u, (unsigned int *)a37);
      WTF::fastFree(a37, a2);
    }
  }
  if (a32)
  {
    do
    {
      v44 = __ldaxr((unsigned int *)a32);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, (unsigned int *)a32));
    if (!v45)
    {
      atomic_store(1u, (unsigned int *)a32);
      WTF::fastFree(a32, a2);
    }
  }
  if (a31)
  {
    if (a31[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)a31 + 8))(a31);
    else
      --a31[4];
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(v40);
  if (cf)
  {
    if (cf[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)cf + 8))(cf);
    else
      --cf[4];
  }
  if (a15)
  {
    do
    {
      v47 = __ldaxr((unsigned int *)a15);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, (unsigned int *)a15));
    if (!v48)
    {
      atomic_store(1u, (unsigned int *)a15);
      WTF::fastFree(a15, v46);
    }
  }
  if (a10)
  {
    do
    {
      v49 = __ldaxr((unsigned int *)a10);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, (unsigned int *)a10));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)a10);
      WTF::fastFree(a10, v46);
    }
  }
  if (a9)
  {
    if (a9[4] == 1)
      (*(void (**)(void))(*(_QWORD *)a9 + 8))();
    else
      --a9[4];
  }
  if (v39[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
  else
    --v39[4];
  if (v38)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v37, v46);
  _Unwind_Resume(a1);
}

float WebKit::inlineVideoFrame(WebKit *this, WebCore::HTMLVideoElement *a2)
{
  uint64_t v3;
  uint64_t v5;
  WebCore::RenderObject *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::ScrollView *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::ScrollView *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  _OWORD v27[2];
  _OWORD v28[2];
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;

  v3 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  *(_DWORD *)(v3 + 24) += 2;
  v29 = v3;
  if (!*(_QWORD *)(v3 + 1944)
    || *(_BYTE *)(v3 + 3405)
    || *(_BYTE *)(v3 + 468)
    || (WebCore::Document::updateLayout(),
        v5 = *((_QWORD *)this + 8),
        v6 = (WebCore::RenderObject *)(v5 & 0xFFFFFFFFFFFFLL),
        (v5 & 0xFFFFFFFFFFFFLL) == 0))
  {
    v30 = 0;
    v31 = 0;
  }
  else
  {
    if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_27;
    if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3 || (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x35) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1973F2878);
    }
    if (*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x2E) != 48)
    {
LABEL_27:
      __break(0xC471u);
      JUMPOUT(0x1973F2858);
    }
    if ((*(_BYTE *)((v5 & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0
      && *(_QWORD *)(WebCore::RenderObject::enclosingLayer(v6) + 256))
    {
      v8 = WebCore::RenderObject::enclosingLayer(v6);
      WebCore::RenderLayerBacking::contentsBox(*(WebCore::RenderLayerBacking **)(v8 + 256));
      WebCore::RenderObject::localToContainerQuad();
      v28[0] = v27[0];
      v28[1] = v27[1];
      v9 = *(_QWORD *)(v29 + 528);
      if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
        v11 = *(WebCore::ScrollView **)(v10 + 288);
      else
        v11 = 0;
      WebCore::FloatQuad::boundingBox((WebCore::FloatQuad *)v28);
      *(_QWORD *)&v27[0] = __PAIR64__(v20, v19);
      *((_QWORD *)&v27[0] + 1) = __PAIR64__(v22, v21);
      WebCore::ScrollView::contentsToRootView(v11, (const WebCore::FloatRect *)v27);
      v30 = __PAIR64__(v24, v23);
      v31 = __PAIR64__(v26, v25);
    }
    else
    {
      v12 = WebCore::RenderVideo::videoBox(v6);
      *((_QWORD *)&v28[0] + 1) = v13;
      v14 = WebCore::RenderObject::absoluteBoundingBoxRect(v6, 1, 0);
      LODWORD(v28[0]) = v14 + v12;
      DWORD1(v28[0]) = HIDWORD(v14) + HIDWORD(v12);
      v15 = *(_QWORD *)(v29 + 528);
      if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
        v17 = *(WebCore::ScrollView **)(v16 + 288);
      else
        v17 = 0;
      *(_QWORD *)&v27[0] = WebCore::ScrollView::contentsToRootView(v17, (const WebCore::IntRect *)v28);
      *((_QWORD *)&v27[0] + 1) = v18;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v30, (const WebCore::IntRect *)v27);
    }
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v29);
  return *(float *)&v30;
}

void sub_1973F289C(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_0::operator()(unsigned __int8 *result, int a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  int v11;
  WebCore::Quirks *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  _DWORD *v34;
  uint64_t v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  size_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  _BYTE *v52;
  void *v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  WebCore::MediaPlayer *v57;
  uint64_t v58;
  unint64_t v59;
  size_t v60;
  char *v61;
  void *v62;
  unint64_t v63;
  size_t v64;
  char *v65;
  void *v66;
  unint64_t v67;
  size_t v68;
  char *v69;
  void *v70;
  unint64_t v71;
  size_t v72;
  char *v73;
  void *v74;
  unint64_t v75;
  size_t v76;
  char *v77;
  void *v78;
  unint64_t v79;
  size_t v80;
  char *v81;
  void *v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  char v85;
  IPC::Encoder *v86;

  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v5 = result;
  v6 = *((_QWORD *)result + 6);
  if (!v6)
    return result;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    return result;
  v10 = v4 + 16;
  v11 = *(_DWORD *)(*(_QWORD *)(v4 + 32) + 364);
  v83 = result[56];
  v84 = result[57];
  v12 = *(WebCore::Quirks **)(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8) + 688);
  if (!v12)
    v12 = (WebCore::Quirks *)WebCore::Document::ensureQuirks(*(WebCore::Document **)(*(_QWORD *)(v7 + 40) + 8));
  v85 = WebCore::Quirks::blocksReturnToFullscreenFromPictureInPictureQuirk(v12);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 56))(v10);
  v14 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v14 = 1494;
  *(_QWORD *)(v14 + 8) = v13;
  v15 = (void *)(v14 + 16);
  *(_QWORD *)(v14 + 528) = v14 + 16;
  *(_QWORD *)(v14 + 536) = v14 + 16;
  *(_OWORD *)(v14 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v14 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v14);
  v86 = (IPC::Encoder *)v14;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v14, (uint64_t *)v5 + 2);
  v16 = *(_QWORD *)(v14 + 544);
  v17 = (v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v18 = v17 + 4;
  v19 = *(_QWORD *)(v14 + 552);
  if (v19 < v17 + 4)
  {
    v59 = (2 * v19 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v60 = v59;
      v59 *= 2;
    }
    while (v60 < v18);
    v61 = (char *)mmap(0, v60, 3, 4098, -1, 0);
    if (v61 == (char *)-1)
      goto LABEL_67;
    v20 = v61;
    memcpy(v61, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v62 = *(void **)(v14 + 528);
    if (v62 != v15)
      munmap(v62, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v20;
    *(_QWORD *)(v14 + 552) = v60;
    v16 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v20 = *(char **)(v14 + 528);
  }
  bzero(&v20[v16], v17 - v16);
  *(_QWORD *)(v14 + 544) = v18;
  v21 = (_DWORD *)(*(_QWORD *)(v14 + 528) + v17);
  *(_QWORD *)(v14 + 536) = v21 + 1;
  *v21 = a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v14, (int *)v5 + 8);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v14, (int *)v5 + 6);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v14, a3);
  v22 = *(_QWORD *)(v14 + 544);
  v23 = (v22 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v24 = v23 + 4;
  v25 = *(_QWORD *)(v14 + 552);
  if (v25 < v23 + 4)
  {
    v63 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v64 = v63;
      v63 *= 2;
    }
    while (v64 < v24);
    v65 = (char *)mmap(0, v64, 3, 4098, -1, 0);
    if (v65 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1973F2EE8);
    }
    v26 = v65;
    memcpy(v65, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v66 = *(void **)(v14 + 528);
    if (v66 != v15)
      munmap(v66, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v26;
    *(_QWORD *)(v14 + 552) = v64;
    v22 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v26 = *(char **)(v14 + 528);
  }
  bzero(&v26[v22], v23 - v22);
  *(_QWORD *)(v14 + 544) = v24;
  v27 = (_DWORD *)(*(_QWORD *)(v14 + 528) + v23);
  *(_QWORD *)(v14 + 536) = v27 + 1;
  *v27 = v11;
  v28 = *((_DWORD *)v5 + 15);
  v29 = *(_QWORD *)(v14 + 544);
  v30 = (v29 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v31 = v30 + 4;
  v32 = *(_QWORD *)(v14 + 552);
  if (v32 < v30 + 4)
  {
    v67 = (2 * v32 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v68 = v67;
      v67 *= 2;
    }
    while (v68 < v31);
    v69 = (char *)mmap(0, v68, 3, 4098, -1, 0);
    if (v69 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1973F2EF0);
    }
    v33 = v69;
    memcpy(v69, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v70 = *(void **)(v14 + 528);
    if (v70 != v15)
      munmap(v70, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v33;
    *(_QWORD *)(v14 + 552) = v68;
    v29 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v33 = *(char **)(v14 + 528);
  }
  bzero(&v33[v29], v30 - v29);
  *(_QWORD *)(v14 + 544) = v31;
  v34 = (_DWORD *)(*(_QWORD *)(v14 + 528) + v30);
  *(_QWORD *)(v14 + 536) = v34 + 1;
  *v34 = v28;
  v35 = *(_QWORD *)(v14 + 544);
  v36 = v35 + 1;
  v37 = *(_QWORD *)(v14 + 552);
  if (v37 < v35 + 1)
  {
    v71 = (2 * v37 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v72 = v71;
      v71 *= 2;
    }
    while (v72 < v36);
    v73 = (char *)mmap(0, v72, 3, 4098, -1, 0);
    if (v73 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1973F2EF8);
    }
    v38 = v73;
    memcpy(v73, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v74 = *(void **)(v14 + 528);
    if (v74 != v15)
      munmap(v74, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v38;
    *(_QWORD *)(v14 + 552) = v72;
    v39 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v38 = *(char **)(v14 + 528);
    v39 = *(_QWORD *)(v14 + 544);
  }
  bzero(&v38[v39], v35 - v39);
  *(_QWORD *)(v14 + 544) = v36;
  v40 = (unsigned __int8 *)(*(_QWORD *)(v14 + 528) + v35);
  *(_QWORD *)(v14 + 536) = v40 + 1;
  *v40 = v83;
  v41 = *(_QWORD *)(v14 + 544);
  v42 = v41 + 1;
  v43 = *(_QWORD *)(v14 + 552);
  if (v43 < v41 + 1)
  {
    v75 = (2 * v43 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v76 = v75;
      v75 *= 2;
    }
    while (v76 < v42);
    v77 = (char *)mmap(0, v76, 3, 4098, -1, 0);
    if (v77 == (char *)-1)
    {
      __break(0xC471u);
      JUMPOUT(0x1973F2F00);
    }
    v44 = v77;
    memcpy(v77, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
    v78 = *(void **)(v14 + 528);
    if (v78 != v15)
      munmap(v78, *(_QWORD *)(v14 + 552));
    *(_QWORD *)(v14 + 528) = v44;
    *(_QWORD *)(v14 + 552) = v76;
    v45 = *(_QWORD *)(v14 + 544);
  }
  else
  {
    v44 = *(char **)(v14 + 528);
    v45 = *(_QWORD *)(v14 + 544);
  }
  bzero(&v44[v45], v41 - v45);
  *(_QWORD *)(v14 + 544) = v42;
  v46 = (unsigned __int8 *)(*(_QWORD *)(v14 + 528) + v41);
  *(_QWORD *)(v14 + 536) = v46 + 1;
  *v46 = v84;
  v47 = *(_QWORD *)(v14 + 544);
  v48 = v47 + 1;
  v49 = *(_QWORD *)(v14 + 552);
  if (v49 < v47 + 1)
  {
    v79 = (2 * v49 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v80 = v79;
      v79 *= 2;
    }
    while (v80 < v48);
    v81 = (char *)mmap(0, v80, 3, 4098, -1, 0);
    if (v81 != (char *)-1)
    {
      v50 = v81;
      memcpy(v81, *(const void **)(v14 + 528), *(_QWORD *)(v14 + 544));
      v82 = *(void **)(v14 + 528);
      if (v82 != v15)
        munmap(v82, *(_QWORD *)(v14 + 552));
      *(_QWORD *)(v14 + 528) = v50;
      *(_QWORD *)(v14 + 552) = v80;
      v51 = *(_QWORD *)(v14 + 544);
      goto LABEL_19;
    }
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x1973F2EE0);
  }
  v50 = *(char **)(v14 + 528);
  v51 = *(_QWORD *)(v14 + 544);
LABEL_19:
  bzero(&v50[v51], v47 - v51);
  *(_QWORD *)(v14 + 544) = v48;
  v52 = (_BYTE *)(*(_QWORD *)(v14 + 528) + v47);
  *(_QWORD *)(v14 + 536) = v52 + 1;
  *v52 = v85;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v10 + 32))(v10, &v86, 0);
  result = (unsigned __int8 *)v86;
  v86 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v53);
    result = (unsigned __int8 *)WTF::fastFree(v54, v55);
  }
  v56 = *(_QWORD *)(*((_QWORD *)v5 + 6) + 8);
  v57 = *(WebCore::MediaPlayer **)(v56 + 1136);
  if (v57)
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(*(unsigned __int8 ***)(v56 + 1136));
    v58 = WebCore::MediaPlayer::identifier(v57);
    if (v58)
      WebKit::VideoPresentationManager::setPlayerIdentifier(*(IPC::Encoder **)(*(_QWORD *)v5 + 32), *((_QWORD *)v5 + 2), v58, 1);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v57);
  }
  return result;
}

void sub_1973F2F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, IPC::Encoder *a12)
{
  unsigned __int8 **v12;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*v12);
  _Unwind_Resume(a1);
}

IPC::Encoder *WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(uint64_t a1, WebKit *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *result;
  WebCore::HTMLVideoElement *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  WTF *v30;
  void *v31;
  int v32[4];
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  IPC::Encoder *v38;

  v6 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(v6 + 72);
  v7 = *(_QWORD *)(v6 + 80);
  v34 = "VideoPresentationManager";
  v35 = 25;
  v36 = "exitVideoFullscreenForVideoElement";
  v37 = v7;
  if (*(_BYTE *)(v8 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v34);
  }
  if ((WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::contains(a1 + 48, (uint64_t)a2) & 1) != 0)
  {
    ++*(_DWORD *)(a1 + 56);
    v10 = *((_QWORD *)a2 + 37);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 8))
        v10 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(a1 + 48), v10);
      else
        v10 = 0;
    }
    v33 = v10;
    v14 = (_DWORD *)WebKit::VideoPresentationManager::ensureModelAndInterface((_QWORD *)a1, v10, 1)[1];
    ++v14[4];
    if (v14[12])
    {
      v15 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
      result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      if (v14[4] == 1)
        return (IPC::Encoder *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
      else
        --v14[4];
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 32);
      if (v16)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17)
          v18 = v17 - 16;
        else
          v18 = 0;
      }
      else
      {
        v18 = 0;
      }
      v19 = v18 + 32;
      v32[0] = WebKit::inlineVideoFrame(a2, v13);
      v32[1] = v20;
      v32[2] = v21;
      v32[3] = v22;
      ++*(_DWORD *)(a1 + 16);
      v23 = *a3;
      *a3 = 0;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v19);
      v25 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v25 = 1483;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(v25 + 528) = v25 + 16;
      *(_QWORD *)(v25 + 536) = v25 + 16;
      *(_OWORD *)(v25 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v25 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v25);
      v38 = (IPC::Encoder *)v25;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v25, &v33);
      IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v25, v32);
      v26 = (char *)WTF::fastMalloc((WTF *)0x30);
      *(_QWORD *)v26 = &off_1E34D9A38;
      *((_QWORD *)v26 + 1) = a1;
      *((_QWORD *)v26 + 2) = a1;
      *((_QWORD *)v26 + 3) = a2;
      *((_QWORD *)v26 + 4) = v14;
      *((_QWORD *)v26 + 5) = v23;
      v27 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
      v34 = v26;
      v35 = v27;
      (*(void (**)(uint64_t, IPC::Encoder **, const char **, _QWORD))(*(_QWORD *)v19 + 40))(v19, &v38, &v34, 0);
      v29 = v34;
      v34 = 0;
      if (v29)
        (*(void (**)(const char *))(*(_QWORD *)v29 + 8))(v29);
      result = v38;
      v38 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v28);
        return (IPC::Encoder *)WTF::fastFree(v30, v31);
      }
    }
  }
  else
  {
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return result;
}

void sub_1973F31E8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, IPC::Encoder *a16)
{
  WTF *v17;
  void *v18;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a16)
  {
    IPC::Encoder::~Encoder(a16, a2);
    WTF::fastFree(v17, v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  ++*(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a2 + 296);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v4 = *(_QWORD *)(a2 + 296);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

IPC::Encoder *WebKit::VideoPresentationManager::exitVideoFullscreenToModeWithoutAnimation(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3)
{
  uint64_t v6;
  IPC::Encoder *v7;
  uint64_t v8;
  IPC::Encoder *result;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  unint64_t v27;
  IPC::Encoder *v28;
  _DWORD *v29;
  void *v30;
  WTF *v31;
  void *v32;
  unint64_t v33;
  size_t v34;
  void *v35;
  IPC::Encoder *v36;
  IPC::Encoder *v37[4];

  v6 = *((_QWORD *)this + 5);
  v8 = *(_QWORD *)(v6 + 72);
  v7 = *(IPC::Encoder **)(v6 + 80);
  v37[0] = (IPC::Encoder *)"VideoPresentationManager";
  v37[1] = (IPC::Encoder *)25;
  v37[2] = (IPC::Encoder *)"exitVideoFullscreenToModeWithoutAnimation";
  v37[3] = v7;
  if (*(_BYTE *)(v8 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)v37);
  }
  result = (IPC::Encoder *)WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::contains((uint64_t)this + 48, (uint64_t)a2);
  if ((_DWORD)result)
  {
    result = (IPC::Encoder *)*((_QWORD *)this + 11);
    if (result)
    {
      if (*((WebCore::HTMLVideoElement **)result + 1) == a2)
      {
        *((_QWORD *)this + 11) = 0;
        do
        {
          v12 = __ldaxr((unsigned int *)result);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)result));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (IPC::Encoder *)WTF::fastFree(result, v11);
        }
      }
    }
    ++*((_DWORD *)this + 14);
    v14 = *((_QWORD *)a2 + 37);
    if (v14)
    {
      if (*(_QWORD *)(v14 + 8))
      {
        result = (IPC::Encoder *)WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v14);
        v36 = result;
        if ((unint64_t)result - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v15 = WebKit::VideoPresentationManager::ensureModelAndInterface(this, (uint64_t)result, 1)[1];
          v16 = *(_DWORD *)(v15 + 16);
          *(_DWORD *)(v15 + 16) = v16 + 1;
          *(_BYTE *)(v15 + 52) = 0;
          *((_BYTE *)this + 96) = 0;
          if (v16)
            *(_DWORD *)(v15 + 16) = v16;
          else
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          v17 = *((_QWORD *)this + 4);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18)
              v19 = v18 - 16;
            else
              v19 = 0;
          }
          else
          {
            v19 = 0;
          }
          v21 = *(_QWORD *)(v19 + 32);
          v20 = v19 + 32;
          v22 = (*(uint64_t (**)(uint64_t))(v21 + 56))(v20);
          v23 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v23 = 1484;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(v23 + 528) = v23 + 16;
          *(_QWORD *)(v23 + 536) = v23 + 16;
          *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v23 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
          v37[0] = (IPC::Encoder *)v23;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v23, (uint64_t *)&v36);
          v24 = *(_QWORD *)(v23 + 544);
          v25 = (v24 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v26 = v25 + 4;
          v27 = *(_QWORD *)(v23 + 552);
          if (v27 < v25 + 4)
          {
            v33 = (2 * v27 + 4095) & 0xFFFFFFFFFFFFF000;
            do
            {
              v34 = v33;
              v33 *= 2;
            }
            while (v34 < v26);
            result = (IPC::Encoder *)mmap(0, v34, 3, 4098, -1, 0);
            if (result == (IPC::Encoder *)-1)
            {
              __break(0xC471u);
              return result;
            }
            v28 = result;
            memcpy(result, *(const void **)(v23 + 528), *(_QWORD *)(v23 + 544));
            v35 = *(void **)(v23 + 528);
            if (v35 != (void *)(v23 + 16))
              munmap(v35, *(_QWORD *)(v23 + 552));
            *(_QWORD *)(v23 + 528) = v28;
            *(_QWORD *)(v23 + 552) = v34;
            v24 = *(_QWORD *)(v23 + 544);
          }
          else
          {
            v28 = *(IPC::Encoder **)(v23 + 528);
          }
          bzero((char *)v28 + v24, v25 - v24);
          *(_QWORD *)(v23 + 544) = v26;
          v29 = (_DWORD *)(*(_QWORD *)(v23 + 528) + v25);
          *(_QWORD *)(v23 + 536) = v29 + 1;
          *v29 = a3;
          (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v20 + 32))(v20, v37, 0);
          result = v37[0];
          v37[0] = 0;
          if (result)
          {
            IPC::Encoder::~Encoder(result, v30);
            return (IPC::Encoder *)WTF::fastFree(v31, v32);
          }
        }
      }
    }
  }
  return result;
}

void sub_1973F3690(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Encoder *a11)
{
  WTF *v12;
  void *v13;

  if (a11)
  {
    IPC::Encoder::~Encoder(a11, a2);
    WTF::fastFree(v12, v13);
  }
  _Unwind_Resume(exception_object);
}

char *WebKit::VideoPresentationManager::setVideoFullscreenMode(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char **v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;

  v21 = a3;
  v5 = *((_QWORD *)this + 5);
  v7 = *(_QWORD *)(v5 + 72);
  v6 = *(_QWORD *)(v5 + 80);
  v17 = (char **)"VideoPresentationManager";
  v18 = 25;
  v19 = "setVideoFullscreenMode";
  v20 = v6;
  if (*(_BYTE *)(v7 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v17);
  }
  result = (char *)WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::contains((uint64_t)this + 48, (uint64_t)a2);
  if ((_DWORD)result)
  {
    ++*((_DWORD *)this + 14);
    v10 = *((_QWORD *)a2 + 37);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 8))
      {
        result = (char *)WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v10);
        v16 = result;
        if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v11 = *((_QWORD *)this + 4);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
            {
              v17 = &v16;
              v18 = (uint64_t)&v21;
              v14 = *(_QWORD *)(v12 + 16);
              v13 = v12 + 16;
              v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
              return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoFullscreenMode>(v13, (uint64_t)&v17, v15, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

char *WebKit::VideoPresentationManager::clearVideoFullscreenMode(WebKit::VideoPresentationManager *this, WebCore::HTMLVideoElement *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char **v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  int v21;

  v21 = a3;
  v5 = *((_QWORD *)this + 5);
  v7 = *(_QWORD *)(v5 + 72);
  v6 = *(_QWORD *)(v5 + 80);
  v17 = (char **)"VideoPresentationManager";
  v18 = 25;
  v19 = "clearVideoFullscreenMode";
  v20 = v6;
  if (*(_BYTE *)(v7 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogFullscreen, 3, (WTF::Logger::LogSiteIdentifier *)&v17);
  }
  result = (char *)WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::contains((uint64_t)this + 48, (uint64_t)a2);
  if ((_DWORD)result)
  {
    ++*((_DWORD *)this + 14);
    v10 = *((_QWORD *)a2 + 37);
    if (v10)
    {
      if (*(_QWORD *)(v10 + 8))
      {
        result = (char *)WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v10);
        v16 = result;
        if ((unint64_t)(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v11 = *((_QWORD *)this + 4);
          if (v11)
          {
            v12 = *(_QWORD *)(v11 + 8);
            if (v12)
            {
              v17 = &v16;
              v18 = (uint64_t)&v21;
              v14 = *(_QWORD *)(v12 + 16);
              v13 = v12 + 16;
              v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
              return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::ClearVideoFullscreenMode>(v13, (uint64_t)&v17, v15, 0);
            }
          }
        }
      }
    }
  }
  return result;
}

unsigned __int8 *WebKit::VideoPresentationManager::requestFullscreenMode(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *result;
  void *v4;

  v2 = (unsigned __int8 **)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 1);
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::requestFullscreenMode((WebCore::VideoPresentationModelVideoElement *)v2);
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v2[1], v4);
  return result;
}

void sub_1973F3948(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;

  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::fullscreenModeChanged(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  WebCore::VideoPresentationModelVideoElement *v5;
  unsigned __int8 **v6;
  _DWORD *v7;
  unsigned __int8 *result;
  void *v9;

  v4 = WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  v6 = (unsigned __int8 **)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v6);
  v7 = (_DWORD *)v4[1];
  ++v7[4];
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::fullscreenModeChanged(v5);
  v7[14] = a3;
  if (v7[4] != 1)
  {
    --v7[4];
    if (!v5)
      return result;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v6, v9);
  }
  result = (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  if (v5)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v6, v9);
  return result;
}

void sub_1973F39FC(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  _DWORD *v4;

  if (v4[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[4];
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::requestUpdateInlineRect(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::HTMLVideoElement *v6;
  uint64_t v7;
  float v8;
  int v9;
  float v10;
  int v11;
  float v12;
  int v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  BOOL *v28;
  void *v29;
  IPC::Encoder *v30;
  WTF *v31;
  void *v32;
  unsigned __int8 **v33;
  unint64_t v34;
  size_t v35;
  void *v36;
  BOOL v37;
  size_t v38;
  unsigned __int8 **v39;
  _QWORD v40[2];
  float v41[4];
  int v42[4];
  uint64_t v43;
  IPC::Encoder *v44;

  v43 = a2;
  v2 = *((_QWORD *)result + 4);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = result;
    v4 = *WebKit::VideoPresentationManager::ensureModelAndInterface(result, a2, 1);
    v5 = v4 + 8;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v4 + 8));
    v7 = *(_QWORD *)(v4 + 24);
    if (v7)
      *(_DWORD *)(v7 + 24) += 2;
    v39 = (unsigned __int8 **)v5;
    v8 = WebKit::inlineVideoFrame((WebKit *)v7, v6);
    v10 = *(float *)&v9;
    v12 = *(float *)&v11;
    v14 = *(float *)&v13;
    *(float *)v42 = v8;
    v42[1] = v9;
    v42[2] = v11;
    v42[3] = v13;
    v15 = *((_QWORD *)v3 + 4);
    if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v16 - 8));
      v17 = 0;
      v18 = v16 - 16;
    }
    else
    {
      v18 = 0;
      v17 = 1;
    }
    v40[0] = 0;
    v40[1] = 0;
    WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v41, (const WebCore::IntRect *)v40);
    v19 = v18 + 32;
    v37 = v8 != v41[0] || v10 != v41[1] || v14 != v41[3] || v12 != v41[2];
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 56))(v18 + 32);
    v22 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v22 = 1490;
    *(_QWORD *)(v22 + 8) = v21;
    *(_QWORD *)(v22 + 528) = v22 + 16;
    *(_QWORD *)(v22 + 536) = v22 + 16;
    *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v22 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
    v44 = (IPC::Encoder *)v22;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v22, &v43);
    IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v22, v42);
    v23 = *(_QWORD *)(v22 + 544);
    v24 = v23 + 1;
    v25 = *(_QWORD *)(v22 + 552);
    if (v25 < v23 + 1)
    {
      v34 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v35 = v34;
        v34 *= 2;
      }
      while (v35 < v24);
      v38 = v35;
      result = (unsigned __int8 *)mmap(0, v35, 3, 4098, -1, 0);
      if (result == (unsigned __int8 *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v26 = result;
      memcpy(result, *(const void **)(v22 + 528), *(_QWORD *)(v22 + 544));
      v36 = *(void **)(v22 + 528);
      if (v36 != (void *)(v22 + 16))
        munmap(v36, *(_QWORD *)(v22 + 552));
      *(_QWORD *)(v22 + 528) = v26;
      *(_QWORD *)(v22 + 552) = v38;
      v27 = *(_QWORD *)(v22 + 544);
    }
    else
    {
      v26 = *(unsigned __int8 **)(v22 + 528);
      v27 = *(_QWORD *)(v22 + 544);
    }
    bzero(&v26[v27], v23 - v27);
    *(_QWORD *)(v22 + 544) = v24;
    v28 = (BOOL *)(*(_QWORD *)(v22 + 528) + v23);
    *(_QWORD *)(v22 + 536) = v28 + 1;
    *v28 = v37;
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v19 + 32))(v18 + 32, &v44, 0);
    v30 = v44;
    v44 = 0;
    if (v30)
    {
      IPC::Encoder::~Encoder(v30, v29);
      WTF::fastFree(v31, v32);
    }
    if ((v17 & 1) == 0)
      CFRelease(*(CFTypeRef *)(v18 + 8));
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      v33 = v39;
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
      v33 = v39;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v33, v29);
  }
  return result;
}

void sub_1973F3CF8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned __int8 **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, IPC::Encoder *a18)
{
  uint64_t v18;

  if (v18)
  {
    if (*(_DWORD *)(v18 + 24) == 2)
    {
      if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v18);
    }
    else
    {
      *(_DWORD *)(v18 + 24) -= 2;
    }
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*a10, a2);
  _Unwind_Resume(a1);
}

void WebKit::VideoPresentationManager::requestVideoContentLayer(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  WebCore::VideoPresentationModelVideoElement *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[4];

  v4 = WebKit::VideoPresentationManager::ensureModelAndInterface((_QWORD *)a1, a2, 1);
  v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  v6 = (unsigned __int8 **)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v6);
  v7 = v4[1];
  ++*(_DWORD *)(v7 + 16);
  v8 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(v8 + 72);
  v9 = *(_QWORD *)(v8 + 80);
  v15[0] = "VideoPresentationManager";
  v15[1] = 25;
  v15[2] = "requestVideoContentLayer";
  v15[3] = v9;
  WebCore::VideoPresentationModelVideoElement::logIdentifier(v5);
  if (*(_BYTE *)(v10 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v15);
  v11 = *(const void **)(v7 + 64);
  if (v11)
    CFRetain(*(CFTypeRef *)(v7 + 64));
  ++*(_DWORD *)(a1 + 16);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = &off_1E34D9A60;
  v12[1] = a1;
  v12[2] = a2;
  v15[0] = v12;
  WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer();
  v14 = v15[0];
  v15[0] = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (v11)
    CFRelease(v11);
  if (*(_DWORD *)(v7 + 16) == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (!v5)
      return;
  }
  else
  {
    --*(_DWORD *)(v7 + 16);
    if (!v5)
      return;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v6, v13);
}

void sub_1973F3ED0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;
  uint64_t v12;
  _DWORD *v13;

  if (v13[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  else
    --v13[4];
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v11, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::returnVideoContentLayer(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  WebCore::VideoPresentationModelVideoElement *v5;
  unsigned __int8 **v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  unsigned __int8 *result;
  _QWORD v14[4];

  v4 = WebKit::VideoPresentationManager::ensureModelAndInterface((_QWORD *)a1, a2, 1);
  v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  v6 = (unsigned __int8 **)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v6);
  v7 = (_DWORD *)v4[1];
  ++v7[4];
  v8 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(v8 + 72);
  v9 = *(_QWORD *)(v8 + 80);
  v14[0] = "VideoPresentationManager";
  v14[1] = 25;
  v14[2] = "returnVideoContentLayer";
  v14[3] = v9;
  WebCore::VideoPresentationModelVideoElement::logIdentifier(v5);
  if (*(_BYTE *)(v10 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v14);
  ++*(_DWORD *)(a1 + 16);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v6);
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v11 = &off_1E34D9AB0;
  v11[1] = a1;
  v11[2] = a2;
  v11[3] = v5;
  v14[0] = v11;
  WebCore::VideoPresentationModelVideoElement::waitForPreparedForInlineThen();
  result = (unsigned __int8 *)v14[0];
  v14[0] = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  if (v7[4] == 1)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    if (!v5)
      return result;
  }
  else
  {
    --v7[4];
    if (!v5)
      return result;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v6, v12);
}

void sub_1973F40B0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;
  uint64_t v12;
  _DWORD *v13;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (v13[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  else
    --v13[4];
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v11, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::willExitFullscreen(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  WebCore::VideoPresentationModelVideoElement *v5;
  unsigned __int8 **v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::RunLoop *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[4];

  v4 = WebKit::VideoPresentationManager::ensureModelAndInterface((_QWORD *)a1, a2, 1);
  v5 = (WebCore::VideoPresentationModelVideoElement *)*v4;
  v6 = (unsigned __int8 **)(*v4 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v6);
  v7 = (_DWORD *)v4[1];
  ++v7[4];
  v8 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(v8 + 72);
  v9 = *(_QWORD *)(v8 + 80);
  v17[0] = "VideoPresentationManager";
  v17[1] = 25;
  v17[2] = "willExitFullscreen";
  v17[3] = v9;
  v11 = (WTF::RunLoop *)WebCore::VideoPresentationModelVideoElement::logIdentifier(v5);
  if (*(_BYTE *)(v10 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    v11 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v17);
  v13 = *((_QWORD *)v5 + 3);
  if (v13)
  {
    *(_DWORD *)(v13 + 24) += 2;
    WTF::RunLoop::main(v11);
    ++*(_DWORD *)(a1 + 16);
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v14 = &off_1E34D9B50;
    v14[1] = a1;
    v14[2] = v13;
    v14[3] = a2;
    v17[0] = v14;
    WTF::RunLoop::dispatch();
    v15 = v17[0];
    v17[0] = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v7[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
  else
    --v7[4];
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v6, v12);
}

void sub_1973F42A8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;
  _DWORD *v12;
  uint64_t v13;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (v12[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  else
    --v12[4];
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v11, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::didEnterFullscreen(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  _QWORD *v5;
  uint64_t *v6;
  WebCore::VideoPresentationModelVideoElement *v7;
  unsigned __int8 **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  char *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  WTF *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t j;
  WTF::StringImpl *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t i;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  uint64_t v52;
  WTF::RunLoop *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v57;
  unsigned __int8 **v58;
  WebCore::VideoPresentationModelVideoElement *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  int8x8_t v64;
  int v65;
  WTF *v66[2];
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  _BYTE buf[12];
  int v72;
  int v73;
  _QWORD v74[3];

  v4 = a4;
  v5 = a1;
  v74[1] = *MEMORY[0x1E0C80C00];
  v64 = (int8x8_t)a3;
  v65 = a4;
  v6 = WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  v7 = (WebCore::VideoPresentationModelVideoElement *)*v6;
  v8 = (unsigned __int8 **)(*v6 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v8);
  v9 = v6[1];
  ++*(_DWORD *)(v9 + 16);
  v10 = v5[5];
  v11 = *(_QWORD *)(v10 + 72);
  if (!v4)
  {
    v16 = *(_QWORD *)(v10 + 80);
    v60 = "VideoPresentationManager";
    v61 = 25;
    v62 = "didEnterFullscreen";
    v63 = v16;
    WebCore::VideoPresentationModelVideoElement::logIdentifier(v7);
    if (!*(_BYTE *)(v11 + 12) || !WebKit2LogFullscreen || byte_1ECE710E0 < 3u)
      goto LABEL_93;
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v60);
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v67, "(empty)");
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
    v18 = v67;
    v67 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v24 = v68;
    v68 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v17);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = v69;
    v69 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v17);
      else
        *(_DWORD *)v25 -= 2;
    }
    v26 = qword_1ECE710F0;
    v27 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v27)
    {
      WTF::String::utf8();
      v28 = v66[0] ? (char *)v66[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl(&dword_196BCC000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v27 = v66[0];
      v66[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
          v27 = (WTF *)WTF::fastFree(v27, v13);
        else
          --*(_DWORD *)v27;
      }
    }
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v40 = *v29;
        if ((v40 & 1) != 0)
          break;
        v41 = __ldaxr(v29);
        if (v41 == v40)
        {
          if (!__stxr(v40 | 1, v29))
          {
            v59 = v7;
            v57 = v5;
            v58 = v8;
            v42 = WTF::Logger::observers(v27);
            v43 = *(unsigned int *)(v42 + 12);
            if ((_DWORD)v43)
            {
              v44 = *(uint64_t **)v42;
              v45 = *(_QWORD *)v42 + 8 * v43;
              do
              {
                v46 = *v44;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v60);
                v72 = 0;
                WTF::LogArgument<void const*>::toString();
                v73 = 0;
                WTF::String::String((WTF::String *)v74, "(empty)");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v46 + 16))(v46, &WebKit2LogFullscreen, 3, v66);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v47);
                for (i = 40; i != -8; i -= 16)
                {
                  v49 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v49)
                  {
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v49 -= 2;
                  }
                }
                ++v44;
              }
              while (v44 != (uint64_t *)v45);
            }
LABEL_84:
            v50 = __ldxr(v29);
            if (v50 == 1)
            {
              v8 = v58;
              v7 = v59;
              v5 = v57;
              if (!__stlxr(0, v29))
                goto LABEL_89;
            }
            else
            {
              __clrex();
              v8 = v58;
              v7 = v59;
              v5 = v57;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            goto LABEL_89;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    goto LABEL_89;
  }
  v12 = *(_QWORD *)(v10 + 80);
  v60 = "VideoPresentationManager";
  v61 = 25;
  v62 = "didEnterFullscreen";
  v63 = v12;
  WebCore::VideoPresentationModelVideoElement::logIdentifier(v7);
  if (!(_BYTE)v65)
    __break(1u);
  if (*(_BYTE *)(v11 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v60);
    WTF::LogArgument<void const*>::toString();
    WebCore::FloatSize::toJSONString((WebCore::FloatSize *)&v64);
    WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v69, (uint64_t *)&v68, (uint64_t *)&v67, &v70);
    v15 = v67;
    v67 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    v19 = v68;
    v68 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v14);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v69;
    v69 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v14);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = qword_1ECE710F0;
    v22 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v23 = v66[0] ? (char *)v66[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v66[0];
      v66[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v13);
        else
          --*(_DWORD *)v22;
      }
    }
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v59 = v7;
            v57 = v5;
            v58 = v8;
            v32 = WTF::Logger::observers(v22);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v35 = *(_QWORD *)v32 + 8 * v33;
              do
              {
                v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v60);
                v72 = 0;
                WTF::LogArgument<void const*>::toString();
                v73 = 1;
                WebCore::FloatSize::toJSONString((WebCore::FloatSize *)&v64);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v66, (uint64_t)buf, 3uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v36 + 16))(v36, &WebKit2LogFullscreen, 3, v66);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v37);
                for (j = 40; j != -8; j -= 16)
                {
                  v39 = *(WTF::StringImpl **)&buf[j];
                  *(_QWORD *)&buf[j] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                }
                ++v34;
              }
              while (v34 != (uint64_t *)v35);
            }
            goto LABEL_84;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
LABEL_89:
    v51 = v70;
    v70 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
LABEL_93:
  *(_DWORD *)(v9 + 48) = 0;
  *(_BYTE *)(v9 + 61) = 0;
  v52 = *((_QWORD *)v7 + 3);
  if (v52)
  {
    *(_DWORD *)(v52 + 24) += 2;
    *(int8x8_t *)buf = vand_s8(v64, (int8x8_t)vcgez_s32(vshl_n_s32(vdup_n_s32((_BYTE)v65 == 0), 0x1FuLL)));
    v53 = (WTF::RunLoop *)WebCore::HTMLVideoElement::didEnterFullscreenOrPictureInPicture((WebCore::HTMLVideoElement *)v52, (const FloatSize *)buf);
    if (!*(_BYTE *)(v9 + 52) && !*(_BYTE *)(v9 + 60))
    {
      WTF::RunLoop::main(v53);
      ++*((_DWORD *)v5 + 4);
      *(_DWORD *)(v52 + 24) += 2;
      v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v54 = &off_1E34D9B78;
      v54[1] = v5;
      v54[2] = v52;
      *(_QWORD *)buf = v54;
      WTF::RunLoop::dispatch();
      v55 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
    }
    if (*(_DWORD *)(v52 + 24) == 2)
    {
      if ((*(_WORD *)(v52 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v52);
    }
    else
    {
      *(_DWORD *)(v52 + 24) -= 2;
    }
  }
  if (*(_DWORD *)(v9 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  else
    --*(_DWORD *)(v9 + 16);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v8, v13);
}

void sub_1973F4B18(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,WTF::StringImpl *a23,WTF::StringImpl *a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27)
{
  unsigned __int8 *v27;
  _DWORD *v28;
  int v30;

  v30 = __ldxr(v27);
  if (v30 == 1)
  {
    if (!__stlxr(0, v27))
    {
LABEL_6:
      if (a26)
      {
        if (*(_DWORD *)a26 == 2)
          WTF::StringImpl::destroy(a26, a2);
        else
          *(_DWORD *)a26 -= 2;
      }
      if (v28[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
      else
        --v28[4];
      if (a13)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*a12, a2);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

unsigned __int8 *WebKit::VideoPresentationManager::failedToEnterFullscreen(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::RunLoop *v8;
  _QWORD *v10;
  void *v11;
  unsigned __int8 *result;
  _QWORD v13[4];

  v4 = (unsigned __int8 **)*WebKit::VideoPresentationManager::ensureModelAndInterface((_QWORD *)a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 1);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(v5 + 72);
  v6 = *(_QWORD *)(v5 + 80);
  v13[0] = "VideoPresentationManager";
  v13[1] = 25;
  v13[2] = "failedToEnterFullscreen";
  v13[3] = v6;
  v8 = (WTF::RunLoop *)WebCore::VideoPresentationModelVideoElement::logIdentifier((WebCore::VideoPresentationModelVideoElement *)v4);
  if (*(_BYTE *)(v7 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      v8 = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>((WTF::Logger::LogSiteIdentifier *)v13);
  }
  WTF::RunLoop::main(v8);
  ++*(_DWORD *)(a1 + 16);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E34D9BC8;
  v10[1] = a1;
  v10[2] = a2;
  v13[0] = v10;
  WTF::RunLoop::dispatch();
  result = (unsigned __int8 *)v13[0];
  v13[0] = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v4[1], v11);
  return result;
}

void sub_1973F4F40(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;
  uint64_t v12;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (v12)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v11, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::didExitFullscreen(uint64_t a1, WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 **v11;
  _DWORD *v12;
  _QWORD *v13;
  void *v14;
  unsigned __int8 *result;
  WTF::String *v16;
  _QWORD v17[4];

  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(v4 + 72);
  v5 = *(_QWORD *)(v4 + 80);
  v17[0] = "VideoPresentationManager";
  v17[1] = 25;
  v17[2] = "didExitFullscreen";
  v17[3] = v5;
  v16 = a2;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v17, &v16);
  }
  v8 = WebKit::VideoPresentationManager::ensureModelAndInterface((_QWORD *)a1, (uint64_t)a2, 1);
  v9 = *v8;
  v10 = (unsigned __int8 **)(*v8 + 8);
  v11 = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v10);
  v12 = (_DWORD *)v8[1];
  ++v12[4];
  WTF::RunLoop::main((WTF::RunLoop *)v11);
  ++*(_DWORD *)(a1 + 16);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = &off_1E34D9BF0;
  v13[1] = a1;
  v13[2] = a2;
  v17[0] = v13;
  WTF::RunLoop::dispatch();
  result = (unsigned __int8 *)v17[0];
  v17[0] = 0;
  if (result)
    result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  if (v12[4] == 1)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    if (!v9)
      return result;
  }
  else
  {
    --v12[4];
    if (!v9)
      return result;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v10, v14);
}

void sub_1973F50FC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;
  _DWORD *v12;
  uint64_t v13;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (v12[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  else
    --v12[4];
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v11, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::didCleanupFullscreen(uint64_t a1, WTF::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 **v10;
  uint64_t v11;
  const void *v12;
  int v13;
  char v14;
  int v15;
  _QWORD *v16;
  void *v17;
  WTF::RunLoop *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  WTF::String *v24;
  _QWORD v25[4];

  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(v4 + 72);
  v5 = *(_QWORD *)(v4 + 80);
  v25[0] = "VideoPresentationManager";
  v25[1] = 25;
  v25[2] = "didCleanupFullscreen";
  v25[3] = v5;
  v24 = a2;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v25, &v24);
  }
  v8 = WebKit::VideoPresentationManager::ensureModelAndInterface((_QWORD *)a1, (uint64_t)a2, 1);
  v9 = *v8;
  v10 = (unsigned __int8 **)(*v8 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v10);
  v11 = v8[1];
  ++*(_DWORD *)(v11 + 16);
  v12 = *(const void **)(v11 + 64);
  if (v12)
  {
    CFRetain(*(CFTypeRef *)(v11 + 64));
    CFRelease(v12);
    v23 = 0;
    WebKit::VideoPresentationInterfaceContext::setRootLayer(v11, &v23);
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)(v11 + 40), 0);
  }
  *(_DWORD *)(v11 + 48) = 0;
  *(_BYTE *)(v11 + 61) = 0;
  v13 = *(_DWORD *)(v11 + 56);
  v14 = *(_BYTE *)(v11 + 60);
  v15 = *(unsigned __int8 *)(v11 + 52);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = off_1E34D9C18;
  v25[0] = v16;
  WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer();
  v18 = (WTF::RunLoop *)v25[0];
  v25[0] = 0;
  if (v18)
    v18 = (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(v9 + 24);
  if (v19)
  {
    *(_DWORD *)(v19 + 24) += 2;
    v18 = (WTF::RunLoop *)WebCore::HTMLVideoElement::didExitFullscreenOrPictureInPicture((WebCore::HTMLVideoElement *)v19);
  }
  *(_BYTE *)(v11 + 60) = 0;
  if (*(_DWORD *)(v11 + 56) != 4)
  {
    *(_DWORD *)(v11 + 56) = 0;
    v18 = (WTF::RunLoop *)WebKit::VideoPresentationManager::removeClientForContext(a1, (uint64_t)a2);
  }
  if (v19)
  {
    if (v15 && (v13 | 4) != 4)
    {
      WTF::RunLoop::main(v18);
      ++*(_DWORD *)(a1 + 16);
      *(_DWORD *)(v19 + 24) += 2;
      v21 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v21 = &off_1E34D9C40;
      *(_QWORD *)(v21 + 8) = a1;
      *(_QWORD *)(v21 + 16) = v19;
      *(_DWORD *)(v21 + 24) = v13;
      *(_BYTE *)(v21 + 28) = v14;
      v25[0] = v21;
      WTF::RunLoop::dispatch();
      v22 = v25[0];
      v25[0] = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    else
    {
      *(_BYTE *)(v11 + 52) = 0;
      *(_BYTE *)(a1 + 96) = 0;
    }
    if (*(_DWORD *)(v19 + 24) == 2)
    {
      if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v19);
    }
    else
    {
      *(_DWORD *)(v19 + 24) -= 2;
    }
  }
  else
  {
    *(_BYTE *)(v11 + 52) = 0;
    *(_BYTE *)(a1 + 96) = 0;
  }
  if (*(_DWORD *)(v11 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  else
    --*(_DWORD *)(v11 + 16);
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v10, v17);
}

void sub_1973F5408(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unsigned __int8 **v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (*(_DWORD *)(v14 + 24) == 2)
  {
    if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v14);
  }
  else
  {
    *(_DWORD *)(v14 + 24) -= 2;
  }
  if (v12[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  else
    --v12[4];
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v11, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::setVideoLayerGravityEnum(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  unsigned __int8 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *result;
  void *v9;
  uint64_t v10;
  _QWORD v11[4];
  unsigned int v12;

  v12 = a3;
  v4 = (unsigned __int8 **)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 1);
  v5 = a1[5];
  v7 = *(_QWORD *)(v5 + 72);
  v6 = *(_QWORD *)(v5 + 80);
  v11[0] = "VideoPresentationManager";
  v11[1] = 25;
  v11[2] = "setVideoLayerGravityEnum";
  v11[3] = v6;
  v10 = WebCore::VideoPresentationModelVideoElement::logIdentifier((WebCore::VideoPresentationModelVideoElement *)v4);
  if (*(_BYTE *)(v7 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*,unsigned int>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v11, (uint64_t)&v10, &v12);
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::setVideoLayerGravity();
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v4[1], v9);
  return result;
}

void sub_1973F55E8(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;

  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::fullscreenMayReturnToInline(unsigned __int8 *result, uint64_t a2, char a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  WebCore::HTMLVideoElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  unint64_t v29;
  size_t v30;
  void *v31;
  size_t v32;
  int v33[4];
  uint64_t v34;
  IPC::Encoder *v35;

  v34 = a2;
  v3 = *((_QWORD *)result + 4);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v5 = result;
    v6 = *WebKit::VideoPresentationManager::ensureModelAndInterface(result, a2, 1);
    v7 = (unsigned __int8 **)(v6 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v6 + 8));
    if ((a3 & 1) == 0)
      WebCore::Element::scrollIntoViewIfNotVisible(*(WebCore::Element **)(v6 + 24));
    v9 = *(_QWORD *)(v6 + 24);
    if (v9)
      *(_DWORD *)(v9 + 24) += 2;
    v10 = *((_QWORD *)v5 + 4);
    if (v10 && (v11 = *(_QWORD *)(v10 + 8)) != 0)
    {
      CFRetain(*(CFTypeRef *)(v11 - 8));
      v12 = 0;
      v13 = v11 - 16;
    }
    else
    {
      v13 = 0;
      v12 = 1;
    }
    v33[0] = WebKit::inlineVideoFrame((WebKit *)v9, v8);
    v33[1] = v14;
    v33[2] = v15;
    v33[3] = v16;
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 + 32) + 56))(v13 + 32);
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 1486;
    *(_QWORD *)(v18 + 8) = v17;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v35 = (IPC::Encoder *)v18;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v18, &v34);
    v19 = *(_QWORD *)(v18 + 544);
    v20 = v19 + 1;
    v21 = *(_QWORD *)(v18 + 552);
    if (v21 < v19 + 1)
    {
      v29 = (2 * v21 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v30 = v29;
        v29 *= 2;
      }
      while (v30 < v20);
      v32 = v30;
      result = (unsigned __int8 *)mmap(0, v30, 3, 4098, -1, 0);
      if (result == (unsigned __int8 *)-1)
      {
        __break(0xC471u);
        return result;
      }
      v22 = result;
      memcpy(result, *(const void **)(v18 + 528), *(_QWORD *)(v18 + 544));
      v31 = *(void **)(v18 + 528);
      if (v31 != (void *)(v18 + 16))
        munmap(v31, *(_QWORD *)(v18 + 552));
      *(_QWORD *)(v18 + 528) = v22;
      *(_QWORD *)(v18 + 552) = v32;
      v23 = *(_QWORD *)(v18 + 544);
    }
    else
    {
      v22 = *(unsigned __int8 **)(v18 + 528);
      v23 = *(_QWORD *)(v18 + 544);
    }
    bzero(&v22[v23], v19 - v23);
    *(_QWORD *)(v18 + 544) = v20;
    v24 = (_BYTE *)(*(_QWORD *)(v18 + 528) + v19);
    *(_QWORD *)(v18 + 536) = v24 + 1;
    *v24 = 1;
    IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v18, v33);
    (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v13 + 32) + 32))(v13 + 32, &v35, 0);
    v26 = v35;
    v35 = 0;
    if (v26)
    {
      IPC::Encoder::~Encoder(v26, v25);
      WTF::fastFree(v27, v28);
    }
    if ((v12 & 1) == 0)
      CFRelease(*(CFTypeRef *)(v13 + 8));
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v7, v25);
  }
  return result;
}

void sub_1973F5874(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IPC::Encoder *a14)
{
  unsigned __int8 **v14;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v14, a2);
  _Unwind_Resume(a1);
}

unsigned __int8 *WebKit::VideoPresentationManager::requestRouteSharingPolicyAndContextUID(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  void *v4;

  v2 = *WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v2 + 8));
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::requestRouteSharingPolicyAndContextUID();
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 8), v4);
  return result;
}

void sub_1973F5948(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;

  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::VideoPresentationManager::ensureUpdatedVideoDimensions(_QWORD *a1, uint64_t a2, float a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 **v14;
  void *v15;
  float v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  NSObject *v27;
  WTF *v28;
  void *v29;
  char *v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t i;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  float v46[2];
  _DWORD v47[2];
  uint64_t v48;
  WTF *v49[2];
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  __int128 buf;
  int v60;
  _DWORD v61[8];
  _DWORD v62[6];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v48 = a2;
  *(float *)v47 = a3;
  *(float *)&v47[1] = a4;
  v4 = a1[4];
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
    {
      CFRetain(*(CFTypeRef *)(v5 - 8));
      v10 = a1[8];
      v11 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::LayerHostingContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v10, a2);
      if (v10)
        v12 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4));
      else
        v12 = 0;
      if (v12 != v11)
      {
        v13 = v11[1];
        v14 = (unsigned __int8 **)(v13 + 8);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v13 + 8));
        v16 = *(float *)(v13 + 64);
        v46[0] = *(float *)(v13 + 60);
        v46[1] = v16;
        if (v46[0] != a3 || v16 != a4)
        {
          v18 = a1[5];
          v20 = *(_QWORD *)(v18 + 72);
          v19 = *(_QWORD *)(v18 + 80);
          v45[0] = "VideoPresentationManager";
          v45[1] = 25;
          v45[2] = "ensureUpdatedVideoDimensions";
          v45[3] = v19;
          if (*(_BYTE *)(v20 + 12))
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v45);
            WTF::String::String((WTF::String *)&v53, "existingVideoDimensions=");
            WebCore::FloatSize::toJSONString((WebCore::FloatSize *)v47);
            WTF::String::String((WTF::String *)&v51, ", videoDimensions=");
            WebCore::FloatSize::toJSONString((WebCore::FloatSize *)v46);
            *(_QWORD *)&buf = v54;
            v49[0] = v53;
            v57 = v51;
            v58 = v52;
            v56 = v50;
            WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)v49, (uint64_t *)&v58, (uint64_t *)&v57, (uint64_t *)&v56, &v55);
            if (!v55)
            {
              __break(0xC471u);
              return;
            }
            v22 = v50;
            v50 = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v21);
              else
                *(_DWORD *)v22 -= 2;
            }
            v23 = v51;
            v51 = 0;
            if (v23)
            {
              if (*(_DWORD *)v23 == 2)
                WTF::StringImpl::destroy(v23, v21);
              else
                *(_DWORD *)v23 -= 2;
            }
            v24 = v52;
            v52 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 == 2)
                WTF::StringImpl::destroy(v24, v21);
              else
                *(_DWORD *)v24 -= 2;
            }
            v25 = v53;
            v53 = 0;
            if (v25)
            {
              if (*(_DWORD *)v25 == 2)
                WTF::StringImpl::destroy(v25, v21);
              else
                *(_DWORD *)v25 -= 2;
            }
            v26 = v54;
            v54 = 0;
            if (v26)
            {
              if (*(_DWORD *)v26 == 2)
                WTF::StringImpl::destroy(v26, v21);
              else
                *(_DWORD *)v26 -= 2;
            }
            v27 = qword_1ECE710F0;
            v28 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v28)
            {
              WTF::String::utf8();
              v30 = v49[0] ? (char *)v49[0] + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v30;
              _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v28 = v49[0];
              v49[0] = 0;
              if (v28)
              {
                if (*(_DWORD *)v28 == 1)
                  v28 = (WTF *)WTF::fastFree(v28, v29);
                else
                  --*(_DWORD *)v28;
              }
            }
            if (WebKit2LogFullscreen)
            {
              v31 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v32 = *v31;
                if ((v32 & 1) != 0)
                  break;
                v33 = __ldaxr(v31);
                if (v33 == v32)
                {
                  if (!__stxr(v32 | 1, v31))
                  {
                    v34 = WTF::Logger::observers(v28);
                    v35 = *(unsigned int *)(v34 + 12);
                    if ((_DWORD)v35)
                    {
                      v36 = *(uint64_t **)v34;
                      v44 = *(_QWORD *)v34 + 8 * v35;
                      do
                      {
                        v37 = *v36;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v45);
                        v60 = 0;
                        WTF::String::String((WTF::String *)v61, "existingVideoDimensions=");
                        v61[2] = 1;
                        WebCore::FloatSize::toJSONString((WebCore::FloatSize *)v47);
                        v61[6] = 0;
                        WTF::String::String((WTF::String *)v62, ", videoDimensions=");
                        v62[2] = 1;
                        WebCore::FloatSize::toJSONString((WebCore::FloatSize *)v46);
                        WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v49, (uint64_t)&buf, 5uLL);
                        (*(void (**)(uint64_t, char *, _QWORD, WTF **))(*(_QWORD *)v37 + 16))(v37, &WebKit2LogFullscreen, 0, v49);
                        WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v49, v38);
                        for (i = 72; i != -8; i -= 16)
                        {
                          v40 = *(WTF::StringImpl **)((char *)&buf + i);
                          *(_QWORD *)((char *)&buf + i) = 0;
                          if (v40)
                          {
                            if (*(_DWORD *)v40 == 2)
                              WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v29);
                            else
                              *(_DWORD *)v40 -= 2;
                          }
                        }
                        ++v36;
                      }
                      while (v36 != (uint64_t *)v44);
                    }
                    v41 = __ldxr(v31);
                    if (v41 == 1)
                    {
                      if (!__stlxr(0, v31))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v42 = v55;
            v55 = 0;
            if (v42)
            {
              if (*(_DWORD *)v42 == 2)
                WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v29);
              else
                *(_DWORD *)v42 -= 2;
            }
          }
          *(_QWORD *)&buf = &v48;
          *((_QWORD *)&buf + 1) = v46;
          v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 16) + 56))(v5 + 16);
          IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoDimensions>(v5 + 16, (uint64_t)&buf, v43);
        }
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v14, v15);
      }
      CFRelease(*(CFTypeRef *)(v5 - 8));
    }
  }
}

void sub_1973F5E58(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,WTF::StringImpl *a26,WTF::StringImpl *a27,WTF::StringImpl *a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  unsigned __int8 *v31;
  uint64_t v32;
  int v34;

  v34 = __ldxr(v31);
  if (v34 == 1)
  {
    if (!__stlxr(0, v31))
    {
LABEL_6:
      if (a31)
      {
        if (*(_DWORD *)a31 == 2)
          WTF::StringImpl::destroy(a31, a2);
        else
          *(_DWORD *)a31 -= 2;
      }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*a13, a2);
      CFRelease(*(CFTypeRef *)(v32 - 8));
      _Unwind_Resume(a1);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

unsigned __int8 *WebKit::VideoPresentationManager::setVideoLayerFrameFenced(_QWORD *a1, WTF::String *a2, unsigned int *a3, float a4, float a5, float a6, float a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  WebCore::VideoPresentationModelVideoElement *v18;
  unsigned __int8 **v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  const FloatRect *v24;
  IntSize v25;
  unsigned __int8 *result;
  void *v27;
  WTF::String *v28;
  IntRect v29;
  const char *v30;
  uint64_t v31;
  _DWORD v32[4];
  FloatRect v33;

  *(float *)v32 = a4;
  *(float *)&v32[1] = a5;
  *(float *)&v32[2] = a6;
  *(float *)&v32[3] = a7;
  v14 = a1[5];
  v16 = *(_QWORD *)(v14 + 72);
  v15 = *(_QWORD *)(v14 + 80);
  v29.m_location = (IntPoint)"VideoPresentationManager";
  v29.m_size = (IntSize)25;
  v30 = "setVideoLayerFrameFenced";
  v31 = v15;
  v28 = a2;
  if (*(_BYTE *)(v16 + 12) && WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)&v29, &v28);
  v17 = WebKit::VideoPresentationManager::ensureModelAndInterface(a1, (uint64_t)a2, 1);
  v18 = (WebCore::VideoPresentationModelVideoElement *)*v17;
  v19 = (unsigned __int8 **)(*v17 + 8);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v19);
  v20 = v17[1];
  ++*(_DWORD *)(v20 + 16);
  v21 = *(_QWORD *)(v20 + 40);
  if (v21
    && ((v22 = *(void **)(v21 + 16)) == 0
      ? (v23 = objc_msgSend(*(id *)(v21 + 8), "layer"))
      : (v23 = objc_msgSend(v22, "layer")),
        v23))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(v20 + 40) + 8), "setFencePort:", *a3);
    v33.m_location.m_x = a4;
    v33.m_location.m_y = a5;
    v33.m_size.m_width = a6;
    v33.m_size.m_height = a7;
    WebCore::VideoPresentationModelVideoElement::setVideoLayerFrame(v18, v33);
  }
  else
  {
    *(float *)&v29.m_location.m_x = a6;
    *(float *)&v29.m_location.m_y = a7;
    WebCore::VideoPresentationModelVideoElement::setVideoSizeFenced();
  }
  v29.m_location = (IntPoint)WebCore::enclosingIntRect((WebCore *)v32, v24);
  v29.m_size = v25;
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::setTextTrackRepresentationBounds(v18, &v29);
  if (*(_DWORD *)(v20 + 16) == 1)
  {
    result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    if (!v18)
      return result;
  }
  else
  {
    --*(_DWORD *)(v20 + 16);
    if (!v18)
      return result;
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v19, v27);
}

void sub_1973F629C(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  if (v4[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[4];
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::setVideoFullscreenFrame(_QWORD *a1, WTF::String *a2, float a3, float a4, float a5, float a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 **v16;
  unsigned __int8 *result;
  void *v18;
  WTF::String *v19;
  _QWORD v20[4];
  FloatRect v21;

  v12 = a1[5];
  v14 = *(_QWORD *)(v12 + 72);
  v13 = *(_QWORD *)(v12 + 80);
  v20[0] = "VideoPresentationManager";
  v20[1] = 25;
  v20[2] = "setVideoFullscreenFrame";
  v20[3] = v13;
  v19 = a2;
  if (*(_BYTE *)(v14 + 12))
  {
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,unsigned long long>((uint64_t)&WebKit2LogFullscreen, 3u, (WTF::Logger::LogSiteIdentifier *)v20, &v19);
  }
  v16 = (unsigned __int8 **)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, (uint64_t)a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v16 + 1);
  v21.m_location.m_x = a3;
  v21.m_location.m_y = a4;
  v21.m_size.m_width = a5;
  v21.m_size.m_height = a6;
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::setVideoFullscreenFrame((WebCore::VideoPresentationModelVideoElement *)v16, v21);
  if (v16)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v16[1], v18);
  return result;
}

void sub_1973F6408(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;

  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::VideoPresentationManager::updateTextTrackRepresentationForVideoElement(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15;

  v3 = *(_QWORD *)(result + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = result;
      ++*(_DWORD *)(result + 56);
      v7 = *(_QWORD *)(a2 + 296);
      if (v7 && *(_QWORD *)(v7 + 8))
      {
        v8 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)(result + 48), v7);
        v9 = *(_QWORD *)(v6 + 32);
        v15 = v8;
        if (!v9)
        {
          v10 = 0;
LABEL_11:
          v14[0] = &v15;
          v14[1] = a3;
          v12 = *(_QWORD *)(v10 + 32);
          v11 = v10 + 32;
          v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationUpdate>(v11, (uint64_t)v14, v13, 0);
        }
        v4 = *(_QWORD *)(v9 + 8);
      }
      else
      {
        v15 = 0;
      }
      if (v4)
        v10 = v4 - 16;
      else
        v10 = 0;
      goto LABEL_11;
    }
  }
  return result;
}

char *WebKit::VideoPresentationManager::setTextTrackRepresentationContentScaleForVideoElement(char *this, WebCore::HTMLVideoElement *a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  float v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = this;
      ++*((_DWORD *)this + 14);
      v7 = *((_QWORD *)a2 + 37);
      if (v7 && *(_QWORD *)(v7 + 8))
      {
        v8 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v7);
        v9 = *((_QWORD *)v6 + 4);
        v16 = v8;
        if (!v9)
        {
          v10 = 0;
LABEL_11:
          v14 = &v16;
          v15 = a3;
          v12 = *(_QWORD *)(v10 + 32);
          v11 = v10 + 32;
          v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetContentsScale>(v11, (uint64_t)&v14, v13, 0);
        }
        v4 = *(_QWORD *)(v9 + 8);
      }
      else
      {
        v16 = 0;
      }
      if (v4)
        v10 = v4 - 16;
      else
        v10 = 0;
      goto LABEL_11;
    }
  }
  return this;
}

char *WebKit::VideoPresentationManager::setTextTrackRepresentationIsHiddenForVideoElement(char *this, WebCore::HTMLVideoElement *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v6 = this;
      ++*((_DWORD *)this + 14);
      v7 = *((_QWORD *)a2 + 37);
      if (v7 && *(_QWORD *)(v7 + 8))
      {
        v8 = WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>((uint64_t *)this + 6, v7);
        v9 = *((_QWORD *)v6 + 4);
        v16 = v8;
        if (!v9)
        {
          v10 = 0;
LABEL_11:
          v14 = &v16;
          v15 = a3;
          v12 = *(_QWORD *)(v10 + 32);
          v11 = v10 + 32;
          v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
          return IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetHidden>(v11, (uint64_t)&v14, v13, 0);
        }
        v4 = *(_QWORD *)(v9 + 8);
      }
      else
      {
        v16 = 0;
      }
      if (v4)
        v10 = v4 - 16;
      else
        v10 = 0;
      goto LABEL_11;
    }
  }
  return this;
}

unsigned __int8 *WebKit::VideoPresentationManager::setRequiresTextTrackRepresentation(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 **v2;
  unsigned __int8 *result;
  void *v4;

  v2 = (unsigned __int8 **)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v2 + 1);
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::setRequiresTextTrackRepresentation((WebCore::VideoPresentationModelVideoElement *)v2);
  if (v2)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v2[1], v4);
  return result;
}

void sub_1973F66AC(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;

  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *WebKit::VideoPresentationManager::setTextTrackRepresentationBounds(_QWORD *a1, uint64_t a2, const IntRect *a3)
{
  unsigned __int8 **v4;
  unsigned __int8 *result;
  void *v6;

  v4 = (unsigned __int8 **)*WebKit::VideoPresentationManager::ensureModelAndInterface(a1, a2, 1);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(v4 + 1);
  result = (unsigned __int8 *)WebCore::VideoPresentationModelVideoElement::setTextTrackRepresentationBounds((WebCore::VideoPresentationModelVideoElement *)v4, a3);
  if (v4)
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(v4[1], v6);
  return result;
}

void sub_1973F6724(_Unwind_Exception *exception_object, void *a2)
{
  unsigned __int8 **v2;
  uint64_t v3;

  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*v2, a2);
  _Unwind_Resume(exception_object);
}

void WebKit::WebProcess::bindAccessibilityFrameWithData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  const void *v10;
  const void *v11;

  v8 = *(id *)(a1 + 752);
  if (!v8)
  {
    v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v10 = *(const void **)(a1 + 752);
    *(_QWORD *)(a1 + 752) = v8;
    if (v10)
    {
      CFRelease(v10);
      v8 = *(id *)(a1 + 752);
    }
  }
  v11 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", a4, a5);
  objc_msgSend(v8, "setObject:forKey:", v11, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a2));
  if (v11)
    CFRelease(v11);
}

void sub_1973F67F8(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

CFTypeRef WebKit::WebProcess::accessibilityFocusedUIElement(WebKit::WebProcess *this)
{
  _QWORD *v1;
  _QWORD *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  CFTypeRef v5;
  char v7;
  _QWORD *v8;
  CFTypeRef cf;

  cf = 0;
  v1 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v1 = off_1E34D9888;
  v1[1] = &cf;
  v1[2] = &v7;
  v8 = v1;
  WTF::callOnMainThreadAndWait();
  v2 = v8;
  v8 = 0;
  if (v2)
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  v3 = cf;
  cf = 0;
  v4 = (id)CFMakeCollectable(v3);
  v5 = cf;
  cf = 0;
  if (v5)
    CFRelease(v5);
  return v4;
}

void sub_1973F68A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::setMediaMIMETypes(WebCore::AVAssetMIMETypeCache *a1)
{
  WebCore::MIMETypeCache *v1;
  uint64_t result;

  v1 = (WebCore::MIMETypeCache *)WebCore::AVAssetMIMETypeCache::singleton(a1);
  result = WebCore::MIMETypeCache::isEmpty(v1);
  if ((_DWORD)result)
    return WebCore::AVAssetMIMETypeCache::addSupportedTypes();
  return result;
}

void WebKit::WebProcess::additionalStateForDiagnosticReport(WebKit::WebProcess *this@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  void *v6;
  WTF *v7;
  const void *v8;
  WebCore::PerformanceLogging *v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  const void *v17;
  WTF *v18;
  _QWORD **v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  CFTypeRef cf;
  WTF *v30;
  uint64_t v31;

  v4 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  WebCore::PerformanceLogging::memoryUsageStatistics();
  v7 = v30;
  if (HIDWORD(v31))
  {
    do
    {
      v8 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", *(_QWORD *)v7);
      objc_msgSend(v5, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *((_QWORD *)v7 + 2)), v8);
      if (v8)
        CFRelease(v8);
      v7 = (WTF *)((char *)v7 + 24);
    }
    while (v7 != (WTF *)((char *)v30 + 24 * HIDWORD(v31)));
    v7 = v30;
  }
  if (v7)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v7, v6);
  }
  objc_msgSend(v4, "setObject:forKey:", v5, CFSTR("Memory Usage Stats"));
  if (v5)
    CFRelease(v5);
  v9 = (WebCore::PerformanceLogging *)objc_alloc_init(MEMORY[0x1E0C99E08]);
  WebCore::PerformanceLogging::javaScriptObjectCounts(v9);
  v11 = v30;
  if (!v30)
  {
    v14 = 0;
    v12 = 0;
LABEL_56:
    v13 = (WTF *)((char *)v30 + 16 * v12);
    goto LABEL_17;
  }
  v12 = *((unsigned int *)v30 - 1);
  v13 = (WTF *)((char *)v30 + 16 * v12);
  if (!*((_DWORD *)v30 - 3))
  {
    v14 = (WTF *)((char *)v30 + 16 * v12);
    goto LABEL_56;
  }
  v14 = v30;
  if ((_DWORD)v12)
  {
    v15 = 16 * v12;
    v14 = v30;
    while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
    {
      v14 = (WTF *)((char *)v14 + 16);
      v15 -= 16;
      if (!v15)
      {
        v14 = v13;
        break;
      }
    }
  }
LABEL_17:
  if (v30)
    v16 = (WTF *)((char *)v30 + 16 * *((unsigned int *)v30 - 1));
  else
    v16 = 0;
  if (v16 != v14)
  {
    do
    {
      v17 = (const void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithUTF8String:", *(_QWORD *)v14);
      -[WebCore::PerformanceLogging setObject:forKey:](v9, "setObject:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *((unsigned int *)v14 + 2)), v17);
      if (v17)
        CFRelease(v17);
      v18 = (WTF *)((char *)v14 + 16);
      v14 = v13;
      if (v18 != v13)
      {
        v14 = v18;
        while ((unint64_t)(*(_QWORD *)v14 + 1) <= 1)
        {
          v14 = (WTF *)((char *)v14 + 16);
          if (v14 == v13)
          {
            v14 = v13;
            break;
          }
        }
      }
    }
    while (v14 != v16);
    v11 = v30;
  }
  if (v11)
    WTF::fastFree((WTF *)((char *)v11 - 16), v10);
  objc_msgSend(v4, "setObject:forKey:", v9, CFSTR("JavaScript Object Counts"));
  if (v9)
    CFRelease(v9);
  v19 = (_QWORD **)((char *)this + 112);
  v20 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v19);
  v22 = v21;
  if (*v19)
    v23 = (uint64_t)&(*v19)[2 * *((unsigned int *)*v19 - 1)];
  else
    v23 = 0;
  v24 = objc_alloc(MEMORY[0x1E0C99DE8]);
  if (*v19)
    v25 = *((unsigned int *)*v19 - 3);
  else
    v25 = 0;
  v26 = objc_msgSend(v24, "initWithCapacity:", v25);
  v27 = (void *)v26;
  if ((_QWORD *)v23 != v20)
  {
    do
    {
      v26 = WebKit::WebPage::usesEphemeralSession((WebKit::WebPage *)v20[1]);
      if ((v26 & 1) == 0)
      {
        v26 = objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", *(double *)(v20[1] + 2040));
        if (v26)
          v26 = objc_msgSend(v27, "addObject:", v26);
      }
      while (1)
      {
        v20 += 2;
        if (v20 == v22)
          break;
        if ((unint64_t)(*v20 + 1) > 1)
          goto LABEL_43;
      }
      v20 = v22;
LABEL_43:
      ;
    }
    while (v20 != (_QWORD *)v23);
  }
  v30 = (WTF *)WTF::MemoryPressureHandler::processStateDescription((WTF::MemoryPressureHandler *)v26);
  v31 = v28;
  WTF::ASCIILiteral::createNSString((WTF::ASCIILiteral *)&v30);
  objc_msgSend(v4, "setObject:forKey:", cf, CFSTR("Websam State"));
  if (objc_msgSend(v27, "count"))
    objc_msgSend(v4, "setObject:forKey:", v27, CFSTR("Page Load Times"));
  *a2 = v4;
  if (cf)
    CFRelease(cf);
  if (v27)
    CFRelease(v27);
}

void sub_1973F6C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF *a11, int a12)
{
  const void *v12;

  if (v12)
    CFRelease(v12);
  _Unwind_Resume(exception_object);
}

void sub_1973F6D48()
{
  const void *v0;

  if (v0)
    CFRelease(v0);
  JUMPOUT(0x1973F6D14);
}

_QWORD *WebKit::WebProcess::platformTerminate(WebKit::WebProcess *this)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v1 = WebCore::AVAssetMIMETypeCache::singleton(this);
  v5 = 0;
  std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((_QWORD *)(v1 + 40), (uint64_t)v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

CFDataRef WebKit::WebProcess::sourceApplicationAuditData@<X0>(CFDataRef this@<X0>, CFDataRef *a2@<X8>)
{
  uint64_t v3;
  UInt8 bytes[36];

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    this = *(CFDataRef *)(v3 + 352);
    if (this)
    {
      xpc_connection_get_audit_token();
      bytes[32] = 1;
      this = CFDataCreate(0, bytes, 32);
    }
    *a2 = this;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::WebProcess::getActivePagesOriginsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 16))(v2, v5);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void sub_1973F6EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&a9, v11);
  _Unwind_Resume(a1);
}

void WebKit::WebProcess::dispatchSimulatedNotificationsForPreferenceChange(WebKit::WebProcess *this, WTF **a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v3;
  WebCore *LocalCenter;
  const __CFString *MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification;

  if (_MergedGlobals_96 == 1)
  {
    v3 = (const WTF::StringImpl *)qword_1ECE72E28;
  }
  else
  {
    v3 = (const WTF::StringImpl *)&WebKit::captionProfilePreferenceKey(void)::$_0::operator() const(void)::impl;
    WebKit::captionProfilePreferenceKey(void)::$_0::operator() const(void)::impl += 2;
    qword_1ECE72E28 = (uint64_t)&WebKit::captionProfilePreferenceKey(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_96 = 1;
  }
  if (WTF::equal(*a2, v3, a3))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification = (const __CFString *)WebCore::get_MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification(LocalCenter);
    CFNotificationCenterPostNotification(LocalCenter, MediaAccessibility_kMAXCaptionAppearanceSettingsChangedNotification, 0, 0, 1u);
  }
}

uint64_t WebKit::WebProcess::handlePreferenceChange(WebKit::WebProcess *this, WTF **a2, const WTF::String *a3, objc_object *a4)
{
  WebKit::AuxiliaryProcess *v8;
  const WTF::String *v9;
  objc_object *v10;
  void *v11;
  uint64_t v12;
  void *v13;

  v8 = (WebKit::AuxiliaryProcess *)MEMORY[0x19AEABBCC](*(_QWORD *)a3, "AppleLanguages", 14);
  if ((_DWORD)v8)
  {
    v11 = (void *)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
    v12 = *MEMORY[0x1E0CB2878];
    v13 = (void *)objc_msgSend((id)objc_msgSend(v11, "volatileDomainForName:", *MEMORY[0x1E0CB2878]), "mutableCopy");
    objc_msgSend(v13, "setValue:forKey:", a4, CFSTR("AppleLanguages"));
    v8 = (WebKit::AuxiliaryProcess *)WTF::languageDidChange((WTF *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "setVolatileDomain:forName:", v13, v12));
    if (v13)
      CFRelease(v13);
  }
  WebKit::AuxiliaryProcess::handleAXPreferenceChange(v8, a2, v9, v10);
  return (*(uint64_t (**)(WebKit::WebProcess *, const WTF::String *))(*(_QWORD *)this + 144))(this, a3);
}

void sub_1973F702C(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    CFRelease(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *WebKit::WebProcess::accessibilitySettingsDidChange(WebKit::WebProcess *this)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)this + 14);
  v3 = result;
  v5 = v4;
  v6 = *((_QWORD *)this + 14);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      result = (_QWORD *)WebCore::Page::accessibilitySettingsDidChange(*(WebCore::Page **)(v3[1] + 48));
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

const char ***WebKit::WebProcess::grantAccessToAssetServices(const char ***result, uint64_t a2)
{
  uint64_t v2;
  const char ***v3;
  uint64_t *v4;
  WebKit::SandboxExtensionImpl **v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::SandboxExtensionImpl *v8;
  uint64_t v9;
  uint64_t v10;
  const char ***v11;
  const char ***v12;

  if (!*((_DWORD *)result + 175))
  {
    v2 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v2)
    {
      v3 = result;
      v4 = (uint64_t *)(result + 86);
      v5 = *(WebKit::SandboxExtensionImpl ***)a2;
      v6 = 8 * v2;
      do
      {
        if (*v5)
        {
          v7 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v7 = 1;
          v8 = *v5;
          *v5 = 0;
          v12 = (const char ***)v7;
          *(_QWORD *)(v7 + 8) = v8;
          *(_QWORD *)(v7 + 16) = 1;
          WebKit::SandboxExtensionImpl::consume(v8);
          v9 = *((unsigned int *)v3 + 175);
          if ((_DWORD)v9 == *((_DWORD *)v3 + 174))
          {
            WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>&>((uint64_t)v4, (unint64_t)&v12);
          }
          else
          {
            v10 = *v4;
            v11 = v12;
            if (v12)
              ++*(_DWORD *)v12;
            *(_QWORD *)(v10 + 8 * v9) = v11;
            *((_DWORD *)v3 + 175) = v9 + 1;
          }
          result = v12;
          v12 = 0;
          if (result)
            result = WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
        }
        ++v5;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void sub_1973F71B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const char ***a10)
{
  if (a10)
    WTF::RefCounted<WebKit::SandboxExtension>::deref(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::revokeAccessToAssetServices(WebKit::WebProcess *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((unsigned int *)this + 175);
  if ((_DWORD)v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 86);
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
        ++*(_DWORD *)v5;
      v6 = *(_QWORD *)(v5 + 16) - 1;
      *(_QWORD *)(v5 + 16) = v6;
      if (!v6)
      {
        *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) = 0;
        sandbox_extension_release();
      }
      WTF::RefCounted<WebKit::SandboxExtension>::deref((const char ***)v5);
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)this + 688, 0);
}

void sub_1973F7250(_Unwind_Exception *a1)
{
  const char ***v1;

  WTF::RefCounted<WebKit::SandboxExtension>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebProcess::setScreenProperties(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  WebCore::setScreenProperties();
  result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((_QWORD **)(a1 + 112));
  v3 = (_QWORD *)result;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 112);
  if (v6)
    v7 = (_QWORD *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != (_QWORD *)result)
  {
    do
    {
      result = WebCore::Page::screenPropertiesDidChange(*(WebCore::Page **)(v3[1] + 48));
      while (1)
      {
        v3 += 2;
        if (v3 == v5)
          break;
        if ((unint64_t)(*v3 + 1) > 1)
          goto LABEL_10;
      }
      v3 = v5;
LABEL_10:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void WebKit::WebProcess::unblockServicesRequiredByAccessibility(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  WebKit::SandboxExtensionImpl **v9;
  uint64_t v10;
  uint64_t v11;
  WebKit::SandboxExtensionImpl *v12;
  WebKit::SandboxExtension **v13;
  uint64_t v14;
  WebKit::SandboxExtension **v15;
  uint64_t v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
      return;
    }
    v7 = WTF::fastMalloc((WTF *)(8 * v2));
    LODWORD(v16) = v2;
    v15 = (WebKit::SandboxExtension **)v7;
    v8 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v8)
    {
      LODWORD(v2) = 0;
      v9 = *(WebKit::SandboxExtensionImpl ***)a2;
      v10 = 8 * v8;
      do
      {
        if (*v9)
        {
          v11 = WTF::fastMalloc((WTF *)0x18);
          *(_DWORD *)v11 = 1;
          v12 = *v9;
          *v9 = 0;
          *(_QWORD *)(v11 + 8) = v12;
          *(_QWORD *)(v11 + 16) = 1;
          WebKit::SandboxExtensionImpl::consume(v12);
          *(_QWORD *)(v7 + 8 * v2) = v11;
          LODWORD(v2) = v2 + 1;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
      HIDWORD(v16) = v2;
    }
    else
    {
      LODWORD(v2) = 0;
    }
  }
  WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v15, v2);
  v3 = objc_msgSend((id)GSSystemRootDirectory(), "stringByAppendingPathComponent:", CFSTR("System/Library/AccessibilityBundles/WebProcessLoader.axbundle"));
  v17 = 0;
  objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", v3), "loadAndReturnError:", &v17);
  v4 = (void *)objc_msgSend(MEMORY[0x1E0CB34D0], "bundleWithPath:", objc_msgSend((id)GSSystemRootDirectory(), "stringByAppendingPathComponent:", CFSTR("System/Library/AccessibilityBundles/WebProcess.axbundle")));
  v17 = 0;
  if (objc_msgSend(v4, "loadAndReturnError:", &v17))
    objc_msgSend((id)objc_msgSend(v4, "principalClass"), "safeValueForKey:", CFSTR("accessibilityInitializeBundle"));
  if (HIDWORD(v16))
  {
    v13 = v15;
    v14 = 8 * HIDWORD(v16);
    do
    {
      WebKit::SandboxExtension::revoke(*v13++);
      v14 -= 8;
    }
    while (v14);
  }
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v5);
}

void sub_1973F746C(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

WTF::StringImpl *WebKit::WebProcess::didWriteToPasteboardAsynchronously(WebKit::WebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v4 = (uint64_t *)((char *)this + 704);
  result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 88, a2, a3);
  v6 = *((_QWORD *)this + 88);
  if (v6)
    v7 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
  else
    v7 = 0;
  if (v7 != result)
  {
    if (*((_DWORD *)result + 2) != 1)
    {
      --*((_DWORD *)result + 2);
      return result;
    }
    if (v6)
    {
      v8 = (WTF::StringImpl *)(v6 + 16 * *(unsigned int *)(v6 - 4));
      if (v8 == result)
        return result;
    }
    else
    {
      if (!result)
        return result;
      v8 = 0;
    }
    if (v8 != result)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v4, (WTF::StringImpl **)result);
  }
  return result;
}

WTF::StringImpl *WebKit::WebProcess::waitForPendingPasteboardWritesToFinish(WebKit::WebProcess *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  WTF::StringImpl *result;
  uint64_t v7;
  double v8;
  uint64_t v9;

  v5 = (uint64_t *)((char *)this + 704);
  while (1)
  {
    result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, a2, a3);
    if (!(_DWORD)result)
      break;
    v7 = *((_QWORD *)this + 4);
    WTF::ApproximateTime::now(result);
    if (IPC::Connection::waitForAndDispatchImmediately<Messages::WebProcess::DidWriteToPasteboardAsynchronously>(v7, 0, 1, v8 + 1.0))
    {
      result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, a2, a3);
      if (*v5)
      {
        v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
        if ((WTF::StringImpl *)v9 == result)
          return result;
      }
      else
      {
        if (!result)
          return result;
        v9 = 0;
      }
      if ((WTF::StringImpl *)v9 != result)
        return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v5, (WTF::StringImpl **)result);
      return result;
    }
  }
  return result;
}

uint64_t IPC::Connection::waitForAndDispatchImmediately<Messages::WebProcess::DidWriteToPasteboardAsynchronously>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  char v11;

  IPC::Connection::waitForMessage((unsigned __int8 ***)a1, 0xA17u, a2, a3, (uint64_t)&v9, a4);
  v5 = v10;
  if (!v10)
  {
    v7 = atomic_load((unsigned __int8 *)(a1 + 33));
    v5 = v10;
    if ((v7 & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1, v9);
      v6 = 0;
      v5 = v10;
    }
    else
    {
      v6 = 1;
    }
    if (v5 == -1)
      return v6;
    goto LABEL_8;
  }
  if (v10 == 1)
  {
    v6 = v9;
LABEL_8:
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[v5])(&v11, &v9);
    return v6;
  }
  result = std::__throw_bad_variant_access[abi:sn180100]();
  __break(1u);
  return result;
}

void sub_1973F76B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, int a12)
{
  uint64_t v12;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSE_EEEDcOSF_DpOT0____fmatrix[a12])(v12 - 17, &a10);
  _Unwind_Resume(exception_object);
}

WTF *WebKit::WebProcess::postNotification(int a1, WTF::String *this, uint64_t a3, char a4)
{
  const char *v6;
  void *v7;
  uint32_t v8;
  WTF *v9;
  const char *v10;
  void *v11;
  WTF *result;
  WTF *v13;
  int out_token;

  if (!a4)
    goto LABEL_9;
  out_token = 0;
  WTF::String::ascii(this);
  if (v13)
    v6 = (char *)v13 + 16;
  else
    v6 = 0;
  v8 = notify_register_check(v6, &out_token);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      WTF::fastFree(v9, v7);
      if (v8)
        goto LABEL_9;
      goto LABEL_18;
    }
    --*(_DWORD *)v9;
  }
  if (v8)
    goto LABEL_9;
LABEL_18:
  notify_set_state(out_token, a3);
  notify_cancel(out_token);
LABEL_9:
  WTF::String::ascii(this);
  if (v13)
    v10 = (char *)v13 + 16;
  else
    v10 = 0;
  notify_post(v10);
  result = v13;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
      return (WTF *)WTF::fastFree(v13, v11);
    else
      --*(_DWORD *)v13;
  }
  return result;
}

void sub_1973F77CC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1)
      WTF::fastFree(a9, a2);
    else
      --*(_DWORD *)a9;
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebProcess::postObserverNotification(WebKit::WebProcess *this, const WTF::String *a2)
{
  void *v3;
  const __CFString *v4;

  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  if (*(_QWORD *)a2)
    v4 = (const __CFString *)WTF::StringImpl::operator NSString *();
  else
    v4 = &stru_1E351F1B8;
  return objc_msgSend(v3, "postNotificationName:object:", v4, 0);
}

uint64_t WebKit::VideoPresentationInterfaceContext::ptrCount(WebKit::VideoPresentationInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::VideoPresentationInterfaceContext::ptrCountWithoutThreadCheck(WebKit::VideoPresentationInterfaceContext *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t WebKit::VideoPresentationInterfaceContext::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 20);
  return this;
}

uint64_t WebKit::VideoPresentationInterfaceContext::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 20);
  if (v1)
  {
    *(_DWORD *)(this + 20) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  _DWORD **v4;
  _DWORD *v5;
  uint64_t v6;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (_DWORD **)(a1 + 16);
    do
    {
      if (*(v4 - 2) != (_DWORD *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
        {
          if (v5[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
          else
            --v5[4];
        }
        v6 = (uint64_t)*(v4 - 1);
        *(v4 - 1) = 0;
        if (v6)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v6 + 8), a2);
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = (unsigned int **)(a1 + 16 * i);
      v6 = *v5;
      if (*v5 != (unsigned int *)-1)
      {
        *v5 = 0;
        if (v6)
        {
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            atomic_store(1u, v6);
            WTF::fastFree((WTF *)v6, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WTF::Detail::CallableWrapper<objc_object * WebCore::Accessibility::retrieveAutoreleasedValueFromMainThread<objc_object *,WebKit::WebProcess::accessibilityFocusedUIElement(void)::$_0::operator() const(void)::{lambda(void)#1}>(WebKit::WebProcess::accessibilityFocusedUIElement(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  WebKit::WebProcess *v2;
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  const void *v6;
  WebKit::WebProcess *v7;

  {
    v2 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v2 = WebKit::WebProcess::WebProcess(v7);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v2;
  }
  v3 = WebKit::WebProcess::focusedWebPage(v2);
  if (v3)
  {
    v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  v5 = *(const void ***)(a1 + 8);
  v6 = *v5;
  *v5 = 0;
  if (v6)
    CFRelease(v6);
}

uint64_t _ZZZN6WebKitL15registerLogHookEvEUb_EN4__18D1Ev(uint64_t a1, void *a2)
{
  WTF *v3;
  WTF *v4;
  WTF *v5;
  WTF *v6;
  WTF *v7;

  v3 = *(WTF **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = 0;
    *(_DWORD *)(a1 + 56) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = *(WTF **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree(v5, a2);
    else
      --*(_DWORD *)v5;
  }
  v6 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, a2);
    else
      --*(_DWORD *)v6;
  }
  v7 = *(WTF **)a1;
  *(_QWORD *)a1 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  return a1;
}

uint64_t ___ZN6WebKitL8logQueueEv_block_invoke()
{
  uint64_t result;
  uint64_t v1;

  result = WTF::WorkQueue::create();
  qword_1ECE72E18 = v1;
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKitL15registerLogHookEvEUb_E4__18vJEED1Ev(_QWORD *a1, void *a2)
{
  *a1 = off_1E34D99C0;
  _ZZZN6WebKitL15registerLogHookEvEUb_EN4__18D1Ev((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKitL15registerLogHookEvEUb_E4__18vJEED0Ev(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E34D99C0;
  _ZZZN6WebKitL15registerLogHookEvEUb_EN4__18D1Ev((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKitL15registerLogHookEvEUb_E4__18vJEE4callEv(uint64_t a1)
{
  const char *v2;
  char *v3;
  size_t v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  char v14;
  pid_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WebKit::WebProcess *v34;
  size_t v35;
  unsigned __int8 **v36;
  IPC::Encoder *v37;

  v2 = (const char *)os_log_copy_message_string();
  if (v2)
  {
    v3 = (char *)v2;
    v4 = strlen(v2);
    {
      v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v5 = WebKit::WebProcess::WebProcess(v34);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    }
    v6 = WebKit::WebProcess::networkProcessConnectionID(v5);
    if (!v6)
      goto LABEL_29;
    v7 = v6;
    v35 = v4;
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
    {
      v9 = (const void *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 8) + 1;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
    v11 = *(_QWORD *)(a1 + 24);
    if (v11)
    {
      v12 = (const void *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 8) + 1;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v14 = *(_BYTE *)(a1 + 32);
    v15 = getpid();
    v16 = *(unsigned int *)(a1 + 72);
    IPC::Connection::connection(v7, &v36);
    v17 = (uint64_t)v36;
    if (!v36)
      goto LABEL_29;
    v18 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v18 = 237;
    *(_QWORD *)(v18 + 8) = 0;
    *(_QWORD *)(v18 + 528) = v18 + 16;
    *(_QWORD *)(v18 + 536) = v18 + 16;
    *(_OWORD *)(v18 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v18 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v18);
    v37 = (IPC::Encoder *)v18;
    IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, v9, v10);
    IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, v12, v13);
    IPC::ArgumentCoder<std::span<char const,18446744073709551615ul>,void>::encode<IPC::Encoder>((IPC::Encoder *)v18, v3, v35 + 1);
    *IPC::Encoder::grow((IPC::Encoder *)v18, 1uLL, 1) = v14;
    *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v18, 4uLL, 4) = v15;
    IPC::Connection::sendMessageImpl(v17, (uint64_t *)&v37, 0, v16 | 0x100000000);
    v20 = v37;
    v37 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v19);
      WTF::fastFree(v21, v22);
    }
    v23 = v36;
    v36 = 0;
    if (!v23)
      goto LABEL_29;
    v24 = *v23;
    if (__ldaxr(*v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, v24))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEABB3C](v24);
LABEL_19:
    v26 = *((_QWORD *)v24 + 1);
    v27 = v26 - 1;
    *((_QWORD *)v24 + 1) = v26 - 1;
    if (v26 == 1)
    {
      v33 = *((_QWORD *)v24 + 2);
      v28 = *((_QWORD *)v24 + 3);
      *((_QWORD *)v24 + 3) = 0;
      v29 = v33 == 0;
    }
    else
    {
      v28 = 0;
      v29 = 0;
    }
    v30 = __ldxr(v24);
    if (v30 == 1)
    {
      if (!__stlxr(0, v24))
      {
        if (!v27)
        {
LABEL_27:
          v31 = WTF::fastMalloc((WTF *)0x20);
          *(_QWORD *)v31 = off_1E34ACA48;
          *(_QWORD *)(v31 + 8) = v24;
          *(_QWORD *)(v31 + 16) = v28;
          *(_BYTE *)(v31 + 24) = v29;
          v37 = (IPC::Encoder *)v31;
          WTF::ensureOnMainRunLoop();
          v32 = (uint64_t)v37;
          v37 = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
LABEL_29:
        free(v3);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
    if (!v27)
      goto LABEL_27;
    goto LABEL_29;
  }
}

void sub_1973F7E94(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 96);
  *(_QWORD *)(v1 - 96) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::tuple<WTF::Ref<WebCore::VideoPresentationModelVideoElement,WTF::RawPtrTraits<WebCore::VideoPresentationModelVideoElement>,WTF::DefaultRefDerefTraits<WebCore::VideoPresentationModelVideoElement>>,WTF::Ref<WebKit::VideoPresentationInterfaceContext,WTF::RawPtrTraits<WebKit::VideoPresentationInterfaceContext>,WTF::DefaultRefDerefTraits<WebKit::VideoPresentationInterfaceContext>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  _DWORD *v26;
  _QWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    do
    {
      v12 = (uint64_t *)(v4 + 24 * v9);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          v21 = v17 & ((v20 >> 31) ^ v20);
          v22 = 1;
          do
          {
            v23 = v21;
            v24 = (uint64_t *)(v16 + 24 * v21);
            v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          v25 = v16 + 24 * v23;
          v28 = *(_DWORD **)(v25 + 16);
          v27 = (_QWORD *)(v25 + 16);
          v26 = v28;
          *v27 = 0;
          if (v28)
          {
            if (v26[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            else
              --v26[4];
          }
          v30 = *(v27 - 1);
          *(v27 - 1) = 0;
          if (v30)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v30 + 8), v8);
          *v24 = *v12;
          v31 = v4 + 24 * v9;
          v33 = *(_QWORD *)(v31 + 8);
          v32 = (uint64_t *)(v31 + 8);
          *v32 = 0;
          *(v27 - 1) = v33;
          v34 = v32[1];
          v32[1] = 0;
          *v27 = v34;
          v35 = (_DWORD *)v32[1];
          v32[1] = 0;
          if (v35)
          {
            if (v35[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
            else
              --v35[4];
          }
          v36 = *v32;
          *v32 = 0;
          if (v36)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v36 + 8), v8);
          if (v12 == a3)
            v10 = v24;
        }
        else
        {
          v14 = v4 + 24 * v9;
          v15 = *(_DWORD **)(v14 + 16);
          *(_QWORD *)(v14 + 16) = 0;
          if (v15)
          {
            if (v15[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
            else
              --v15[4];
          }
          v29 = *(_QWORD *)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v29)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v29 + 8), v8);
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    v10 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t WTF::WeakHashMap<WebCore::HTMLVideoElement,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultWeakPtrImpl>::removeNullReferences(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;

  v2 = result;
  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v4 = *(_DWORD *)(v3 - 4);
    if (!v4)
      goto LABEL_23;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(v3 + 16 * --v4);
      result = *v6;
      if ((unint64_t)(*v6 + 1) >= 2 && !*(_QWORD *)(result + 8))
      {
        *v6 = 0;
        do
        {
          v7 = __ldaxr((unsigned int *)result);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, (unsigned int *)result));
        if (!v8)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
        }
        *v6 = -1;
        ++v5;
      }
    }
    while (v4);
    v3 = *(_QWORD *)v2;
    if (v5)
    {
      *(_DWORD *)(v3 - 16) += v5;
      v9 = *(_QWORD *)v2;
      if (*(_QWORD *)v2)
        v10 = *(_DWORD *)(v9 - 12);
      else
        v10 = 0;
      *(_DWORD *)(v9 - 12) = v10 - v5;
      v3 = *(_QWORD *)v2;
    }
    if (v3)
    {
      v11 = *(_DWORD *)(v3 - 4);
      v12 = *(unsigned int *)(v3 - 12);
      if (v11 >= 9 && 6 * (int)v12 < v11)
      {
        v16 = (v12 - 1) | ((v12 - 1) >> 1) | ((((_DWORD)v12 - 1) | ((v12 - 1) >> 1)) >> 2);
        v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
        v18 = (v17 | HIWORD(v17)) + 1;
        if (v18 > 0x400)
        {
          if (v18 > 2 * v12)
            goto LABEL_34;
        }
        else if (3 * v18 > 4 * v12)
        {
LABEL_32:
          v19 = (double)v12;
          v20 = (double)v18;
          v21 = 0.604166667;
          goto LABEL_35;
        }
        LODWORD(v18) = 2 * v18;
        if (v18 <= 0x400)
          goto LABEL_32;
LABEL_34:
        v19 = (double)v12;
        v20 = (double)v18;
        v21 = 0.416666667;
LABEL_35:
        if (v20 * v21 <= v19)
          LODWORD(v18) = 2 * v18;
        if (v18 <= 8)
          v22 = 8;
        else
          v22 = v18;
        result = (uint64_t)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v22, 0);
        v3 = *(_QWORD *)v2;
        *(_DWORD *)(v2 + 8) = 0;
        if (!v3)
        {
          v14 = 0;
          goto LABEL_27;
        }
LABEL_24:
        v14 = *(_DWORD *)(v3 - 12);
        v15 = 0x7FFFFFFF;
        if (v14 >= 0x7FFFFFFF)
          goto LABEL_28;
        goto LABEL_27;
      }
LABEL_23:
      *(_DWORD *)(v2 + 8) = 0;
      goto LABEL_24;
    }
  }
  v14 = 0;
  *(_DWORD *)(v2 + 8) = 0;
LABEL_27:
  v15 = v14;
LABEL_28:
  *(_DWORD *)(v2 + 12) = 2 * v15;
  return result;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int **v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int **result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (unsigned int **)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != (unsigned int *)-1)
      {
        if (v14)
        {
          v15 = *a1;
          if (*a1)
            v16 = *(_DWORD *)(v15 - 8);
          else
            v16 = 0;
          v17 = ((unint64_t)v14 + ~((_QWORD)v14 << 32)) ^ (((unint64_t)v14 + ~((_QWORD)v14 << 32)) >> 22);
          v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          v20 = v16 & ((v19 >> 31) ^ v19);
          v21 = 1;
          do
          {
            v22 = v20;
            v23 = *(_QWORD *)(v15 + 16 * v20);
            v20 = (v20 + v21++) & v16;
          }
          while (v23);
          v24 = (unsigned int **)(v15 + 16 * v22);
          *v24 = 0;
          v25 = *v13;
          *v13 = 0;
          *v24 = v25;
          v24[1] = *(unsigned int **)(v6 + 16 * v11 + 8);
          v26 = *v13;
          *v13 = 0;
          if (v26)
          {
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
            {
              atomic_store(1u, v26);
              WTF::fastFree((WTF *)v26, v10);
            }
          }
          if (v13 == a3)
            v12 = v24;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

unsigned int **WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::setupRemoteLayerHosting(WebCore::HTMLVideoElement &)::$_0,std::unique_ptr<WebCore::TextTrackRepresentation>,WebCore::TextTrackRepresentationClient &,WebCore::HTMLMediaElement &>::call@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x48);
  result = WebKit::WebTextTrackRepresentationCocoa::WebTextTrackRepresentationCocoa(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1973F8638(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_1,void,unsigned int>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *v10;

  *a1 = off_1E34D9A10;
  v3 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[4];
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  v10 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v10)
  {
    if (v10[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_1,void,unsigned int>::~CallableWrapper(uint64_t *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v9;
  void *v10;
  _DWORD *v11;

  *a1 = (uint64_t)off_1E34D9A10;
  v3 = (unsigned int *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[4];
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(a1 + 2);
  v11 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v11)
  {
    if (v11[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[4];
  }
  return WTF::fastFree((WTF *)a1, v10);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_1,void,unsigned int>::call(unsigned __int8 *result, int a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  float v5;
  unsigned int v6;
  int v7[2];

  if (a2)
  {
    v3 = result;
    v4 = result + 24;
    v5 = (float)WebCore::HTMLVideoElement::videoWidth(*((WebCore::HTMLVideoElement **)result + 2));
    v6 = WebCore::HTMLVideoElement::videoHeight(*((WebCore::HTMLVideoElement **)v3 + 2));
    *(float *)v7 = v5;
    *(float *)&v7[1] = (float)v6;
    return WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,unsigned int,BOOL)::$_0::operator()(v4, a2, v7);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = 9 * (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) ^ (((v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    v9 = *(_QWORD *)(v2 + 16 * v7);
    if (v9 != -1)
    {
      if (!v9)
        return 0;
      if (v9 == *a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  return 1;
}

uint64_t WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  int i;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  v7 = v3 & ((v6 >> 31) ^ v6);
  for (i = 1; ; ++i)
  {
    result = *(_QWORD *)(v2 + 16 * v7);
    if (result != -1)
    {
      if (!result)
        return result;
      if (result == a2)
        break;
    }
    v7 = (v7 + i) & v3;
  }
  return *(_QWORD *)(v2 + 16 * v7 + 8);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;
  _DWORD *v4;

  *a1 = &off_1E34D9A38;
  v2 = a1[5];
  a1[5] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;

  *(_QWORD *)this = &off_1E34D9A38;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int16 v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = (uint64_t)(a1 + 1);
  if (!a2)
    return IPC::Connection::cancelReply<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  if (!*a2)
    return IPC::Connection::cancelReply<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  v4 = IPC::Decoder::decode<std::tuple<BOOL>>(a2);
  if (v4 < 0x100u)
    return IPC::Connection::cancelReply<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(v2);
  if ((_BYTE)v4)
  {
    v7 = a1[2];
    v8 = a1[3];
    v9 = *(_QWORD *)(v7 + 88);
    if (v9)
    {
      if (*(_QWORD *)(v9 + 8) == v8)
      {
        *(_QWORD *)(v7 + 88) = 0;
        do
        {
          v10 = __ldaxr((unsigned int *)v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, (unsigned int *)v9));
        if (!v11)
        {
          atomic_store(1u, (unsigned int *)v9);
          WTF::fastFree((WTF *)v9, v5);
        }
      }
    }
    else if (!v8)
    {
      *(_QWORD *)(v7 + 88) = 0;
    }
    v13 = a1[1];
    v14 = a1[4];
    v15 = a1[5];
    *(_BYTE *)(v14 + 52) = 0;
    *(_BYTE *)(v13 + 96) = 0;
    *(_DWORD *)(v14 + 48) = 2;
    a1[5] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  else
  {
    v12 = a1[5];
    a1[5] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void sub_1973F8BD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::cancelReply<Messages::VideoPresentationManagerProxy::ExitFullscreen,WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(WebCore::HTMLVideoElement &,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_1973F8C38(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoFullscreenMode>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  char *result;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1493;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v25 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  v9 = **(_DWORD **)(a2 + 8);
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 + 4;
  v13 = *(_QWORD *)(v8 + 552);
  if (v13 < v11 + 4)
  {
    v22 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v12);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v14 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v24 = *(void **)(v8 + 528);
    if (v24 != (void *)(v8 + 16))
      munmap(v24, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v23;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_DWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  v17 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v25, a4);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  return (char *)v17;
}

void sub_1973F8DEC(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::ClearVideoFullscreenMode>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  char *result;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1482;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v25 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  v9 = **(_DWORD **)(a2 + 8);
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 + 4;
  v13 = *(_QWORD *)(v8 + 552);
  if (v13 < v11 + 4)
  {
    v22 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v12);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v14 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v24 = *(void **)(v8 + 528);
    if (v24 != (void *)(v8 + 16))
      munmap(v24, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v23;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_DWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  v17 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v25, a4);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  return (char *)v17;
}

void sub_1973F8FA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetVideoDimensions>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1492;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v6, *(int **)(a2 + 8));
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v11, 0);
  result = v11;
  v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_1973F9078(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>(WTF::Logger::LogSiteIdentifier *a1)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  NSObject *v6;
  WTF *v7;
  void *v8;
  char *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t i;
  WTF::StringImpl *v20;
  int v21;
  WTF *v22[2];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint8_t buf[16];
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::LogArgument<void const*>::toString();
  *(_QWORD *)buf = v24;
  v22[0] = v23;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v22, &v25);
  if (v25)
  {
    v4 = v23;
    v23 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = v24;
    v24 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = qword_1ECE710F0;
    v7 = (WTF *)os_log_type_enabled((os_log_t)qword_1ECE710F0, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v7)
    {
      WTF::String::utf8();
      v9 = v22[0] ? (char *)v22[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v9;
      _os_log_impl(&dword_196BCC000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v7 = v22[0];
      v22[0] = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
          v7 = (WTF *)WTF::fastFree(v7, v8);
        else
          --*(_DWORD *)v7;
      }
    }
    if (WebKit2LogFullscreen && byte_1ECE710E0 >= 3u)
    {
      v10 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v11 = *v10;
        if ((v11 & 1) != 0)
          break;
        v12 = __ldaxr(v10);
        if (v12 == v11)
        {
          if (!__stxr(v11 | 1, v10))
          {
            v13 = WTF::Logger::observers(v7);
            v14 = *(unsigned int *)(v13 + 12);
            if ((_DWORD)v14)
            {
              v15 = *(uint64_t **)v13;
              v16 = *(_QWORD *)v13 + 8 * v14;
              do
              {
                v17 = *v15;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(a1);
                v27 = 0;
                WTF::LogArgument<void const*>::toString();
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v22, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, char *, uint64_t, WTF **))(*(_QWORD *)v17 + 16))(v17, &WebKit2LogFullscreen, 3, v22);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v18);
                for (i = 24; i != -8; i -= 16)
                {
                  v20 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v20)
                  {
                    if (*(_DWORD *)v20 == 2)
                      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v8);
                    else
                      *(_DWORD *)v20 -= 2;
                  }
                }
                ++v15;
              }
              while (v15 != (uint64_t *)v16);
            }
            v21 = __ldxr(v10);
            if (v21 == 1)
            {
              if (!__stlxr(0, v10))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v8);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

void sub_1973F9384(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, WTF::StringImpl *a12, uint64_t a13, WTF::StringImpl *a14, char a15, WTF::StringImpl *a16)
{
  unsigned __int8 *v16;
  int v18;

  v18 = __ldxr(v16);
  if (v18 == 1)
  {
    if (!__stlxr(0, v16))
    {
LABEL_6:
      if (a14)
      {
        if (*(_DWORD *)a14 == 2)
          WTF::StringImpl::destroy(a14, a2);
        else
          *(_DWORD *)a14 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34D9A60;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9A60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(WTF::RunLoop *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  WTF::RunLoop::main(a1);
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34D9A88;
  v4[1] = v2;
  v4[2] = v3;
  v6 = v4;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_1973F95D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34D9A88;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9A88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::requestVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v5 = a1 + 16;
      v6 = 1;
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16);
      IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetHasVideoContentLayer>(v2 + 16, (uint64_t)&v5, v4);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_1973F9748(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

char *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetHasVideoContentLayer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char *result;
  WTF *v16;
  void *v17;
  unint64_t v18;
  size_t v19;
  void *v20;
  IPC::Encoder *v21;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1489;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v21 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, *(uint64_t **)a2);
  v7 = *(_BYTE *)(a2 + 8);
  v8 = *(_QWORD *)(v6 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 1)
  {
    v18 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v19 = v18;
      v18 *= 2;
    }
    while (v19 < v9);
    result = (char *)mmap(0, v19, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v11 = result;
    memcpy(result, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v20 = *(void **)(v6 + 528);
    if (v20 != (void *)(v6 + 16))
      munmap(v20, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v19;
    v12 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
    v12 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v6 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v13 + 1;
  *v13 = v7;
  (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v21, 0);
  result = (char *)v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v14);
    return (char *)WTF::fastFree(v16, v17);
  }
  return result;
}

void sub_1973F98D8(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = &off_1E34D9AB0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34D9AB0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(WTF::RunLoop *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  WTF::RunLoop::main(a1);
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  v4 = *((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 3) = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = &off_1E34D9AD8;
  v5[1] = v2;
  v5[2] = v3;
  v5[3] = v4;
  v7 = v5;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void sub_1973F9A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *a1 = &off_1E34D9AD8;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  v4 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34D9AD8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _QWORD *v5;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v3 = &off_1E34D9B00;
  v3[1] = v2;
  v3[2] = v1;
  v5 = v3;
  WebCore::VideoPresentationModelVideoElement::setVideoFullscreenLayer();
  result = (uint64_t)v5;
  if (v5)
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void sub_1973F9C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34D9B00;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9B00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::returnVideoContentLayer(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0::operator()(void)::{lambda(void)#1}::operator()(void)::{lambda(void)#1},void>::call(WTF::RunLoop *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  WTF::RunLoop::main(a1);
  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = &off_1E34D9B28;
  v4[1] = v2;
  v4[2] = v3;
  v6 = v4;
  WTF::RunLoop::dispatch();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void sub_1973F9D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit24VideoPresentationManager23returnVideoContentLayerENS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEN3__0clEvENUlvE_clEvENUlvE_clEvEUlvE_vJEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34D9B28;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit24VideoPresentationManager23returnVideoContentLayerENS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEN3__0clEvENUlvE_clEvENUlvE_clEvEUlvE_vJEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9B28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

void _ZN3WTF6Detail15CallableWrapperIZZZZN6WebKit24VideoPresentationManager23returnVideoContentLayerENS_23ObjectIdentifierGenericIN7WebCore31MediaPlayerClientIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEEN3__0clEvENUlvE_clEvENUlvE_clEvEUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v5 = a1 + 16;
      v6 = 0;
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16);
      IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::SetHasVideoContentLayer>(v2 + 16, (uint64_t)&v5, v4);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_1973F9EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFRelease(*(CFTypeRef *)(v1 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::willExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34D9B50;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::willExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34D9B50;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::willExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  WebCore::HTMLMediaElement::willExitFullscreen(*(WebCore::HTMLMediaElement **)(a1 + 16));
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 + 16) + 56))(v3 + 16);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 1485;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v10 = (IPC::Encoder *)v5;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, (uint64_t *)(a1 + 24));
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v3 + 16) + 32))(v3 + 16, &v10, 0);
      v7 = v10;
      v10 = 0;
      if (v7)
      {
        IPC::Encoder::~Encoder(v7, v6);
        WTF::fastFree(v8, v9);
      }
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void sub_1973FA0F4(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  uint64_t v10;
  WTF *v12;
  void *v13;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v12, v13);
  }
  CFRelease(*(CFTypeRef *)(v10 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::FloatSize>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34D9B78;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::FloatSize>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34D9B78;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::FloatSize>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WebKit *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 32);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = *(WebKit **)(result + 16);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E34D9BA0;
    v5 = v4;
    WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement(v1, v3, (uint64_t *)&v5);
    result = (uint64_t)v5;
    if (v5)
      return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  return result;
}

void sub_1973FA2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::failedToEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34D9BC8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::failedToEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9BC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::failedToEnterFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 1481;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v10 = (IPC::Encoder *)v5;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, (uint64_t *)(a1 + 16));
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 16) + 32))(v2 + 16, &v10, 0);
      v7 = v10;
      v10 = 0;
      if (v7)
      {
        IPC::Encoder::~Encoder(v7, v6);
        WTF::fastFree(v8, v9);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_1973FA45C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  uint64_t v10;
  WTF *v12;
  void *v13;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v12, v13);
  }
  CFRelease(*(CFTypeRef *)(v10 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E34D9BF0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9BF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didExitFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v10;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 16) + 56))(v2 + 16);
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 1481;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v10 = (IPC::Encoder *)v5;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v5, (uint64_t *)(a1 + 16));
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)(v2 + 16) + 32))(v2 + 16, &v10, 0);
      v7 = v10;
      v10 = 0;
      if (v7)
      {
        IPC::Encoder::~Encoder(v7, v6);
        WTF::fastFree(v8, v9);
      }
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void sub_1973FA61C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  uint64_t v10;
  WTF *v12;
  void *v13;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v12, v13);
  }
  CFRelease(*(CFTypeRef *)(v10 - 8));
  _Unwind_Resume(a1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didCleanupFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  _DWORD *v3;

  *a1 = &off_1E34D9C40;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  v3 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didCleanupFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  _DWORD *v4;

  *(_QWORD *)this = &off_1E34D9C40;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (v4[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[4];
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::VideoPresentationManager::didCleanupFullscreen(WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void>::call(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v3;

  result = *(unsigned __int8 **)(a1 + 8);
  v3 = *((_QWORD *)result + 4);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
      return WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement((WebKit::VideoPresentationManager *)result, *(WebCore::HTMLVideoElement **)(a1 + 16), *(_DWORD *)(a1 + 24), *(_BYTE *)(a1 + 28));
  }
  return result;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*,unsigned int>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, uint64_t a4, unsigned int *a5)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  NSObject *v10;
  WTF *v11;
  void *v12;
  char *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::String *v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *result;
  uint64_t v28;
  WTF *v32[2];
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint8_t buf[4];
  char *v38;
  int v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WTF::LogArgument<void const*>::toString();
  WTF::String::number((WTF::String *)*a5);
  WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v35, (uint64_t *)&v34, (uint64_t *)&v33, &v36);
  v7 = v33;
  v33 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = v34;
  v34 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v35;
  v35 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(NSObject **)(a1 + 32);
  v11 = (WTF *)os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v11)
  {
    WTF::String::utf8();
    v13 = v32[0] ? (char *)v32[0] + 16 : 0;
    *(_DWORD *)buf = 136446210;
    v38 = v13;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v11 = v32[0];
    v32[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        v11 = (WTF *)WTF::fastFree(v11, v12);
      else
        --*(_DWORD *)v11;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v14 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v15 = *v14;
      if ((v15 & 1) != 0)
        break;
      v16 = __ldaxr(v14);
      if (v16 == v15)
      {
        if (!__stxr(v15 | 1, v14))
        {
          v28 = a1;
          v17 = WTF::Logger::observers(v11);
          v18 = *(unsigned int *)(v17 + 12);
          if ((_DWORD)v18)
          {
            v19 = *(uint64_t **)v17;
            v20 = *(_QWORD *)v17 + 8 * v18;
            do
            {
              v21 = *v19;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v39 = 0;
              WTF::LogArgument<void const*>::toString();
              v22 = (WTF::String *)*a5;
              v40 = 0;
              WTF::String::number(v22);
              WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v32, (uint64_t)buf, 3uLL);
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v21 + 16))(v21, v28, a2, v32);
              WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v23);
              for (i = 40; i != -8; i -= 16)
              {
                v25 = *(WTF::StringImpl **)&buf[i];
                *(_QWORD *)&buf[i] = 0;
                if (v25)
                {
                  if (*(_DWORD *)v25 == 2)
                    WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v12);
                  else
                    *(_DWORD *)v25 -= 2;
                }
              }
              ++v19;
            }
            while (v19 != (uint64_t *)v20);
          }
          v26 = __ldxr(v14);
          if (v26 == 1)
          {
            if (!__stlxr(0, v14))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v36;
  v36 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_1973FAAB8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  unsigned __int8 *v21;
  int v23;

  v23 = __ldxr(v21);
  if (v23 == 1)
  {
    if (!__stlxr(0, v21))
    {
LABEL_6:
      if (a20)
      {
        if (*(_DWORD *)a20 == 2)
          WTF::StringImpl::destroy(a20, a2);
        else
          *(_DWORD *)a20 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationUpdate>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v15;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1497;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v15 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode((IPC::Encoder *)v8, *(_QWORD *)(a2 + 8));
  v10 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v15, a4);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  return v10;
}

void sub_1973FACF0(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetContentsScale>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  char *result;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1495;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v25 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)(v8 + 544);
  v11 = (v10 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 + 4;
  v13 = *(_QWORD *)(v8 + 552);
  if (v13 < v11 + 4)
  {
    v22 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v12);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v14 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v24 = *(void **)(v8 + 528);
    if (v24 != (void *)(v8 + 16))
      munmap(v24, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v14;
    *(_QWORD *)(v8 + 552) = v23;
    v10 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v14 = *(char **)(v8 + 528);
  }
  bzero(&v14[v10], v11 - v10);
  *(_QWORD *)(v8 + 544) = v12;
  v15 = (_DWORD *)(*(_QWORD *)(v8 + 528) + v11);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  v17 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v25, a4);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  return (char *)v17;
}

void sub_1973FAEA4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

char *IPC::MessageSender::send<Messages::VideoPresentationManagerProxy::TextTrackRepresentationSetHidden>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  char *result;
  unint64_t v22;
  size_t v23;
  void *v24;
  IPC::Encoder *v25;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1496;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v25 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *(uint64_t **)a2);
  v9 = *(_BYTE *)(a2 + 8);
  v10 = *(_QWORD *)(v8 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v8 + 552);
  if (v12 < v10 + 1)
  {
    v22 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v23 = v22;
      v22 *= 2;
    }
    while (v23 < v11);
    result = (char *)mmap(0, v23, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v24 = *(void **)(v8 + 528);
    if (v24 != (void *)(v8 + 16))
      munmap(v24, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v13;
    *(_QWORD *)(v8 + 552) = v23;
    v14 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v13 = *(char **)(v8 + 528);
    v14 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v8 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  v17 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v25, a4);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v16);
    WTF::fastFree(v19, v20);
  }
  return (char *)v17;
}

void sub_1973FB054(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  WTF *v11;
  void *v12;

  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::~__func()
{
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E34D9C68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E34D9C68;
  a2[1] = v2;
  return result;
}

IPC::Encoder *std::__function::__func<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0,std::allocator<WebKit::WebProcess::platformInitializeWebProcess(WebKit::WebProcessCreationParameters &)::$_0>,void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  IPC::Encoder *result;
  WTF *v7;
  void *v8;
  IPC::Encoder *v9;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 2544;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v9 = (IPC::Encoder *)v4;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v4, a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v9, 0, 0);
  result = v9;
  v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void sub_1973FB180(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder *v2;
  WTF *v4;
  void *v5;

  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

IMP std::__call_once_proxy[abi:sn180100]<std::tuple<WebKit::WebProcess::backlightLevelDidChange(float)::$_0 &&>>()
{
  objc_class *v0;
  objc_method *InstanceMethod;

  v0 = (objc_class *)objc_opt_class();
  InstanceMethod = class_getInstanceMethod(v0, sel__backlightLevel);
  return method_setImplementation(InstanceMethod, (IMP)WebKit::currentBacklightLevel);
}

float WebKit::currentBacklightLevel(WebKit *this)
{
  WebKit::WebProcess *v1;
  WebKit::WebProcess *v3;

  {
    v1 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v1 = WebKit::WebProcess::WebProcess(v3);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v1;
  }
  return *((float *)v1 + 160);
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>&>(uint64_t a1, unint64_t a2)
{
  _DWORD **v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  v3 = (_DWORD **)WTF::Vector<WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  if (*v3)
    ++*v6;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    if (*(unsigned int *)(result + 12) > a2)
      result = (uint64_t)WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((const char ***)result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (*(_DWORD *)(v3 + 8))
      {
        *(_DWORD *)(v3 + 8) = a2;
        result = WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = *(unsigned int *)(v3 + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WTF *)result != v4)
        result = (uint64_t)memcpy((void *)result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

const char ***WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(const char ***result, uint64_t a2)
{
  int v2;
  const char ***v3;
  uint64_t v4;
  const char ****v5;
  uint64_t v6;

  v2 = a2;
  v3 = result;
  v4 = *((unsigned int *)result + 3);
  if (v4 != a2)
  {
    v5 = (const char ****)&(*result)[a2];
    v6 = 8 * v4 - 8 * a2;
    do
    {
      result = *v5;
      *v5 = 0;
      if (result)
        result = WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  *((_DWORD *)v3 + 3) = v2;
  return result;
}

uint64_t WTF::Vector<WTF::Ref<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;

  if (*(unsigned int *)(result + 8) > a2)
  {
    v3 = result;
    if (*(unsigned int *)(result + 12) > a2)
      result = (uint64_t)WTF::Vector<WTF::RefPtr<WebKit::SandboxExtension,WTF::RawPtrTraits<WebKit::SandboxExtension>,WTF::DefaultRefDerefTraits<WebKit::SandboxExtension>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((const char ***)result, a2);
    v4 = *(WTF **)v3;
    if (a2)
    {
      if (*(_DWORD *)(v3 + 8))
      {
        *(_DWORD *)(v3 + 8) = a2;
        result = WTF::fastRealloc(v4, (void *)(8 * a2));
        *(_QWORD *)v3 = result;
        return result;
      }
      if (a2 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v5 = *(unsigned int *)(v3 + 12);
      result = WTF::fastMalloc((WTF *)(8 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(_QWORD *)v3 = result;
      if ((WTF *)result != v4)
        result = (uint64_t)memcpy((void *)result, v4, 8 * v5);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

uint64_t WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  WTF *v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * (v11 & v9);
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    result = (uint64_t)WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)a3;
    v18 = *a1;
    if (*a1)
      v19 = *(_DWORD *)(v18 - 12) + 1;
    else
      v19 = 1;
    *(_DWORD *)(v18 - 12) = v19;
    v22 = *a1;
    if (*a1)
      v23 = *(_DWORD *)(v22 - 12);
    else
      v23 = 0;
    v24 = (*(_DWORD *)(v22 - 16) + v23);
    v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 <= 2 * v24)
      {
LABEL_26:
        result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = result;
        v22 = *a1;
        if (*a1)
          v25 = *(unsigned int *)(v22 - 4);
        else
          v25 = 0;
      }
    }
    else if (3 * v25 <= 4 * v24)
    {
      goto LABEL_26;
    }
    v27 = v22 + 16 * v25;
    v26 = 1;
    goto LABEL_33;
  }
  result = WTF::equal(v16, *a2, a3);
  if (!(_DWORD)result)
    goto LABEL_13;
  v20 = *a1;
  if (*a1)
    v21 = *(unsigned int *)(v20 - 4);
  else
    v21 = 0;
  v26 = 0;
  v27 = v20 + 16 * v21;
LABEL_33:
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v27;
  *(_BYTE *)(a4 + 16) = v26;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,unsigned int>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = v6;
    do
    {
      if (*(_QWORD *)v13 != -1)
      {
        if (*(_QWORD *)v13)
        {
          v14 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::lookupForReinsert(a1, (WTF::StringImpl **)v13);
          v15 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2)
              WTF::StringImpl::destroy(v15, v10);
            else
              *(_DWORD *)v15 -= 2;
          }
          v16 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)v14 = v16;
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(v13 + 8);
          v17 = *(WTF::StringImpl **)v13;
          *(_QWORD *)v13 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v10);
            else
              *(_DWORD *)v17 -= 2;
          }
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          *(_QWORD *)v13 = 0;
        }
      }
      v13 += 16;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void API::FrameInfo::parentFrameHandle(API::FrameInfo *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 296))
  {
    v3 = *((_QWORD *)this + 35);
    v4 = *((_QWORD *)this + 36);
    v5 = API::Object::newObject(0x28uLL, 11);
    *(_QWORD *)v5 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v5);
    *(_QWORD *)v5 = &off_1E34AD1B8;
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    *(_BYTE *)(v5 + 32) = 0;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void API::FrameInfo::title(API::FrameInfo *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  if (!*((_QWORD *)this + 39))
    goto LABEL_9;
  v4 = WebKit::WebFrameProxy::webFrame(*((_QWORD *)this + 33), *((_QWORD *)this + 34));
  if (!v4)
    goto LABEL_9;
  v5 = v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v6 = *(_QWORD *)(v5 + 24);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 - 16;
    else
      v6 = 0;
  }
  if (*((_QWORD *)this + 39) != v6)
  {
    CFRelease(*(CFTypeRef *)(v5 + 8));
LABEL_9:
    *a2 = 0;
    return;
  }
  v8 = *(_DWORD **)(v5 + 232);
  if (v8)
    *v8 += 2;
  *a2 = v8;
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void API::FrameTreeNode::~FrameTreeNode(API::FrameTreeNode *this, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const void *v7;
  char v8;

  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 312, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 62);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_10[v6])(&v8, (char *)this + 224);
  *((_DWORD *)this + 62) = -1;
  v7 = (const void *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::FrameTreeNode *)((char *)this + 24));
}

{
  API::FrameTreeNode::~FrameTreeNode(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void API::HTTPCookieStore::~HTTPCookieStore(API::HTTPCookieStore *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, a2);
  v4 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  API::HTTPCookieStore::~HTTPCookieStore(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

IPC::Encoder *API::HTTPCookieStore::cookies(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  IPC::Encoder *v21;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 408)) != 0)
  {
    v7 = (uint64_t *)(a1 + 16);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v8 = *a2;
    *a2 = 0;
    v9 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v9 = 1550;
    *(_QWORD *)(v9 + 8) = 0;
    *(_QWORD *)(v9 + 528) = v9 + 16;
    *(_QWORD *)(v9 + 536) = v9 + 16;
    *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v9 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
    v21 = (IPC::Encoder *)v9;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v9, v7);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v10 = &off_1E34D9DF8;
    v10[1] = a1;
    v10[2] = a1;
    v10[3] = v8;
    v18 = v10;
    v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v20 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v21, 0, (uint64_t)&v18, 1);
    if (v20)
    {
      v12 = v18;
      v18 = 0;
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
    result = v21;
    v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    v18 = 0;
    v19 = 0;
    v16 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v16 + 16))(v16, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    return (IPC::Encoder *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v17);
  }
  return result;
}

IPC::Encoder *API::HTTPCookieStore::cookiesForURL(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  IPC::Encoder *v23;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 408)) != 0)
  {
    v9 = (uint64_t *)(a1 + 16);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v10 = *a3;
    *a3 = 0;
    v11 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v11 = 1551;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 528) = v11 + 16;
    *(_QWORD *)(v11 + 536) = v11 + 16;
    *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v11 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
    v23 = (IPC::Encoder *)v11;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v11, v9);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v12 = &off_1E34D9E20;
    v12[1] = a1;
    v12[2] = a1;
    v12[3] = v10;
    v20 = v12;
    v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v22 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v6, &v23, 0, (uint64_t)&v20, 1);
    if (v22)
    {
      v14 = v20;
      v20 = 0;
      if (v14)
        (*(void (**)(_QWORD *))(*v14 + 8))(v14);
    }
    result = v23;
    v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v18 + 16))(v18, &v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    return (IPC::Encoder *)WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v19);
  }
  return result;
}

uint64_t API::HTTPCookieStore::deleteCookie(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[2];

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 408)) != 0)
  {
    v8[0] = (uint64_t *)(a1 + 16);
    v8[1] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(v5, v8, a3, 0, 0, 1);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1548;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  IPC::ArgumentCoder<WebCore::Cookie,void>::encode((IPC::Encoder *)v12, a2[1]);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D9E98;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t API::HTTPCookieStore::deleteAllCookies(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebsiteDataStore *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int **v10;
  uint64_t *v11;
  unsigned int **v12;
  unsigned int *v13;
  uint64_t v14;
  IPC::Encoder *v15;
  uint64_t v16;
  WebKit::WebsiteDataStore *v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  IPC::Encoder *v27;
  WTF *v28;
  void *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  _QWORD *v33[2];
  char v34;
  IPC::Encoder *v35;

  result = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 8) = v5;
  v32 = (unsigned int *)result;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
  {
    v32 = 0;
    do
    {
LABEL_27:
      v30 = __ldaxr((unsigned int *)result);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)result));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)result);
      v33[0] = (_QWORD *)result;
      return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)v33);
    }
    return result;
  }
  v7 = *(WebKit::WebsiteDataStore **)(v6 + 8);
  if (v7)
  {
    WebKit::WebsiteDataStore::processPools(v7, -1, (uint64_t *)v33);
    v9 = (unsigned int **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v33);
    v10 = v8;
    v11 = v33[0];
    if (v33[0])
      v12 = (unsigned int **)&v33[0][*((unsigned int *)v33[0] - 1)];
    else
      v12 = 0;
    if (v12 != v9)
    {
      do
      {
        v13 = *v9++;
        v14 = *(_QWORD *)(a1 + 16);
        v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v15 = off_1E34D9EC0;
        *((_QWORD *)v15 + 1) = &v32;
        v35 = v15;
        WebKit::WebProcessPool::forEachProcessForSession(v13, v14, &v35);
        (*(void (**)(IPC::Encoder *))(*(_QWORD *)v15 + 8))(v15);
        while (v9 != v10)
        {
          if ((unint64_t)*v9 + 1 > 1)
            goto LABEL_13;
          ++v9;
        }
        v9 = v10;
LABEL_13:
        ;
      }
      while (v9 != v12);
      v11 = v33[0];
    }
    if (v11)
      WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v11, v8);
    v16 = *(_QWORD *)(a1 + 24);
    if (v16)
    {
      v17 = *(WebKit::WebsiteDataStore **)(v16 + 8);
      if (v17)
      {
        v18 = WebKit::WebsiteDataStore::networkProcess(v17);
        v19 = (uint64_t *)(a1 + 16);
        v20 = v32;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 + 1, v20));
        v22 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v22 = 1546;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 528) = v22 + 16;
        *(_QWORD *)(v22 + 536) = v22 + 16;
        *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v22 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
        v35 = (IPC::Encoder *)v22;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v22, v19);
        v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v23 = off_1E34D9F10;
        v23[1] = v20;
        v24 = (_QWORD *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v33[0] = v23;
        v33[1] = v24;
        v34 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v18, &v35, 0, (uint64_t)v33, 1);
        if (v34)
        {
          v26 = v33[0];
          v33[0] = 0;
          if (v26)
            (*(void (**)(_QWORD *))(*v26 + 8))(v26);
        }
        v27 = v35;
        v35 = 0;
        if (v27)
        {
          IPC::Encoder::~Encoder(v27, v25);
          WTF::fastFree(v28, v29);
        }
      }
    }
  }
  result = (uint64_t)v32;
  v32 = 0;
  if (result)
    goto LABEL_27;
  return result;
}

uint64_t API::HTTPCookieStore::deleteCookiesForHostnames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0 && (v5 = *(_QWORD *)(v4 + 408)) != 0)
  {
    v8[0] = a1 + 16;
    v8[1] = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(v5, (uint64_t)v8, a3, 0, 0, 1);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1549;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Encoder *)v12, *(_QWORD *)(a2 + 8));
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D9F38;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t API::HTTPCookieStore::setHTTPCookieAcceptPolicy(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4;
  WebKit::WebsiteDataStore *v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v4 = *(_QWORD *)(a1 + 24);
  if (v4 && (v6 = *(WebKit::WebsiteDataStore **)(v4 + 8)) != 0)
  {
    v8 = WebKit::WebsiteDataStore::networkProcess(v6);
    v11 = a1 + 16;
    v12 = a2;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(v8, (uint64_t)&v11, a3, 0, 0, 1);
  }
  else
  {
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1556;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *(uint64_t **)a2);
  LOBYTE(a4) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D9F60;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t API::HTTPCookieStore::getHTTPCookieAcceptPolicy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WebKit::WebsiteDataStore *v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t *v10;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 && (v5 = *(WebKit::WebsiteDataStore **)(v3 + 8)) != 0)
  {
    v6 = WebKit::WebsiteDataStore::networkProcess(v5);
    v10 = (uint64_t *)(a1 + 16);
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(v6, &v10, a2, 0, 0, 1);
  }
  else
  {
    v9 = 0;
    v8 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 16))(v8, &v9);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 1552;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D9F88;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t API::HTTPCookieStore::flushCookies(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && (v4 = *(_QWORD *)(v3 + 408)) != 0)
  {
    v7 = (uint64_t *)(a1 + 16);
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(v4, &v7, a2, 0, 0, 1);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 388;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34D9FB0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

unsigned int *API::HTTPCookieStore::registerObserver(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _BOOL4 isEmptyIgnoringNullReferences;
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9[3];

  v4 = a1 + 32;
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(a1 + 32));
  result = WTF::WeakHashSet<API::HTTPCookieStoreObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<API::HTTPCookieStoreObserver>(v4, a2, (uint64_t)v9);
  if (isEmptyIgnoringNullReferences)
  {
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      result = *(unsigned int **)(v7 + 8);
      if (result)
      {
        v8 = WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)result);
        v9[0] = (uint64_t *)(a1 + 16);
        return (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StartObservingCookieChanges>(v8, v9, 0, 0);
      }
    }
  }
  return result;
}

unsigned int *WTF::WeakHashSet<API::HTTPCookieStoreObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<API::HTTPCookieStoreObserver>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned int *result;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  WTF *v33;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v9 = *(_DWORD *)(v8 - 4);
      if (!v9)
        goto LABEL_25;
      v10 = 0;
      do
      {
        while (1)
        {
          v11 = *(_QWORD *)(v8 + 8 * --v9);
          if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
            break;
          if (!v9)
            goto LABEL_14;
        }
        *(_QWORD *)(v8 + 8 * v9) = 0;
        do
        {
          v12 = __ldaxr((unsigned int *)v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, (unsigned int *)v11));
        if (!v13)
        {
          atomic_store(1u, (unsigned int *)v11);
          WTF::fastFree((WTF *)v11, a2);
        }
        *(_QWORD *)(v8 + 8 * v9) = -1;
        ++v10;
      }
      while (v9);
LABEL_14:
      v8 = *(_QWORD *)a1;
      if (v10)
      {
        *(_DWORD *)(v8 - 16) += v10;
        v14 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v15 = *(_DWORD *)(v14 - 12);
        else
          v15 = 0;
        *(_DWORD *)(v14 - 12) = v15 - v10;
        v8 = *(_QWORD *)a1;
      }
      if (v8)
      {
        v16 = *(_DWORD *)(v8 - 4);
        if (v16 >= 9 && 6 * *(_DWORD *)(v8 - 12) < v16)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
          v8 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v8)
          {
            v18 = 0;
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_25:
        *(_DWORD *)(a1 + 8) = 0;
LABEL_28:
        v18 = *(_DWORD *)(v8 - 12);
        v19 = 0x7FFFFFFF;
        if (v18 >= 0x7FFFFFFF)
        {
LABEL_30:
          *(_DWORD *)(a1 + 12) = 2 * v19;
          goto LABEL_31;
        }
LABEL_29:
        v19 = v18;
        goto LABEL_30;
      }
    }
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_29;
  }
LABEL_31:
  v20 = a2[1];
  if (!v20)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = a2;
    v22 = (unsigned int *)a2[1];
    a2[1] = v20;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      v20 = a2[1];
    }
  }
  do
    v25 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v25 + 1, (unsigned int *)v20));
  do
    v26 = __ldaxr((unsigned int *)v20);
  while (__stlxr(v26 + 1, (unsigned int *)v20));
  v33 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v33, a3);
  result = (unsigned int *)v33;
  v33 = 0;
  if (result)
  {
    do
    {
      v31 = __ldaxr(result);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, result));
    if (!v32)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
    }
  }
  if (v20)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v20);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v20));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v27);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StartObservingCookieChanges>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1557;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t API::HTTPCookieStore::unregisterObserver(uint64_t a1, _QWORD *a2)
{
  _QWORD **v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v3 = (_QWORD **)(a1 + 32);
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(a1 + 32, a2);
  result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v3);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        result = *(_QWORD *)(v6 + 408);
        if (result)
        {
          v7 = (uint64_t *)(a1 + 16);
          return WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StopObservingCookieChanges>(result, &v7, 0, 0);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebCookieManager::StopObservingCookieChanges>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1558;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_QWORD *API::HTTPCookieStore::cookiesDidChange(API::HTTPCookieStore *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (char *)this + 32;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 4, &v12);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v7 = v2;
  v8 = v5;
  v9 = v5;
  v10 = v5;
  v11 = v3 + 8 * v4;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    (*(void (**)(_QWORD, API::HTTPCookieStore *))(**(_QWORD **)(*(_QWORD *)v13 + 8) + 16))(*(_QWORD *)(*(_QWORD *)v13 + 8), this);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

_DWORD *API::InspectorConfiguration::addURLSchemeHandler(uint64_t a1, _QWORD *a2, WTF::StringImpl **a3)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *result;
  _DWORD *v12;
  WTF::StringImpl *v13;

  v3 = (_DWORD *)*a2;
  *a2 = 0;
  v12 = v3;
  v4 = *a3;
  if (*a3)
    *(_DWORD *)v4 += 2;
  v13 = v4;
  v5 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 24))
  {
    WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>(a1 + 16, (unint64_t)&v12);
    v7 = v13;
    v13 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
  else
  {
    v8 = v5 + 1;
    v9 = *(_QWORD *)(a1 + 16);
    v12 = 0;
    v10 = (_QWORD *)(v9 + 16 * v5);
    *v10 = v3;
    v10[1] = v4;
    *(_DWORD *)(a1 + 28) = v8;
    v13 = 0;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void API::InspectorConfiguration::setProcessPool(API::InspectorConfiguration *this, CFTypeRef *a2)
{
  uint64_t v4;

  if (a2)
    CFRetain(a2[1]);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = a2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t API::SubstituteData::SubstituteData(uint64_t a1, uint64_t *a2, WebCore::ResourceResponseBase *this, char a4)
{
  _DWORD **v8;
  _DWORD **v9;
  _DWORD **v10;

  v8 = (_DWORD **)WebCore::ResourceResponseBase::mimeType(this);
  v9 = (_DWORD **)WebCore::ResourceResponseBase::textEncodingName(this);
  v10 = (_DWORD **)WebCore::ResourceResponseBase::url(this);
  return API::SubstituteData::SubstituteData(a1, a2, v8, v9, v10, 0, a4);
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  char v10;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9D10;
  v6 = *(_QWORD *)(a2 + 16) + 1;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = a3;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 32));
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 232));
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 474) = 0u;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(_QWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 738) = *(_BYTE *)(a1 + 738) & 0xF1 | 4;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1378) = 0;
  *(_BYTE *)(a1 + 1380) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2064));
  *(_QWORD *)(a1 + 2272) = 0;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(_QWORD *)(a1 + 2280) = 0;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2312) = 0;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_BYTE *)(a1 + 2320) = 0;
  *(_BYTE *)(a1 + 2352) = 0;
  *(_BYTE *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2376));
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_BYTE *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2672));
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2872));
  *(_WORD *)(a1 + 3072) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 3080));
  *(_QWORD *)(a1 + 3288) = 0;
  *(_QWORD *)(a1 + 3280) = 0;
  *(_DWORD *)(a1 + 3304) = 0;
  *(_QWORD *)(a1 + 3296) = 0;
  *(_BYTE *)(a1 + 3352) = 0;
  *(_WORD *)(a1 + 3364) = 0;
  *(_QWORD *)(a1 + 3312) = 0;
  *(_QWORD *)(a1 + 3328) = 0;
  *(_QWORD *)(a1 + 3320) = 0;
  *(_BYTE *)(a1 + 3336) = 0;
  *(_QWORD *)(a1 + 3368) = 0;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_QWORD *)(a1 + 3376) = 0;
  *(_DWORD *)(a1 + 3392) = 0;
  *(_WORD *)(a1 + 3400) = 1;
  v8 = 0;
  v9 = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3408, (uint64_t)&v8, 30.0);
  if (v9 != -1)
    ((void (*)(char *, uint64_t *))off_1E34D9DB0[v9])(&v10, &v8);
  *(_BYTE *)(a1 + 3464) = 0;
  *(_QWORD *)(a1 + 3472) = 0;
  *(_BYTE *)(a1 + 3480) = 0;
  *(_BYTE *)(a1 + 3482) = 0;
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  char v13;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9D10;
  v8 = *(_QWORD *)(a2 + 16) + 1;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = a3;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 32));
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 232));
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  v9 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 480) = v9;
  *(_WORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(_QWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 738) = *(_BYTE *)(a1 + 738) & 0xF1 | 4;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1378) = 0;
  *(_BYTE *)(a1 + 1380) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2064));
  *(_QWORD *)(a1 + 2272) = 0;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(_QWORD *)(a1 + 2280) = 0;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2312) = 0;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_BYTE *)(a1 + 2320) = 0;
  *(_BYTE *)(a1 + 2352) = 0;
  *(_BYTE *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2376));
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_BYTE *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2672));
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2872));
  *(_WORD *)(a1 + 3072) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 3080));
  *(_QWORD *)(a1 + 3288) = 0;
  *(_QWORD *)(a1 + 3280) = 0;
  *(_DWORD *)(a1 + 3304) = 0;
  *(_QWORD *)(a1 + 3296) = 0;
  *(_BYTE *)(a1 + 3352) = 0;
  *(_WORD *)(a1 + 3364) = 0;
  *(_QWORD *)(a1 + 3312) = 0;
  *(_QWORD *)(a1 + 3328) = 0;
  *(_QWORD *)(a1 + 3320) = 0;
  *(_BYTE *)(a1 + 3336) = 0;
  *(_QWORD *)(a1 + 3368) = 0;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_QWORD *)(a1 + 3376) = 0;
  *(_DWORD *)(a1 + 3392) = 0;
  *(_WORD *)(a1 + 3400) = 1;
  v11 = 0;
  v12 = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3408, (uint64_t)&v11, 30.0);
  if (v12 != -1)
    ((void (*)(char *, uint64_t *))off_1E34D9DB0[v12])(&v13, &v11);
  *(_BYTE *)(a1 + 3464) = 0;
  *(_QWORD *)(a1 + 3472) = 0;
  *(_BYTE *)(a1 + 3480) = 0;
  *(_BYTE *)(a1 + 3482) = 0;
  return a1;
}

{
  uint64_t v6;
  uint64_t v7;
  WTF *v8;

  v6 = API::Navigation::Navigation(a1, a2, a3);
  v7 = *a4;
  *a4 = 0;
  v8 = *(WTF **)(v6 + 496);
  *(_QWORD *)(v6 + 496) = v7;
  if (v8)
    std::default_delete<API::SubstituteData>::operator()[abi:sn180100](a1 + 496, v8);
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char v27;
  WTF::StringImpl *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9D10;
  v10 = *(_QWORD *)(a2 + 16) + 1;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = a3;
  WTF::URL::URL(a1 + 32, (uint64_t *)a4);
  WTF::URL::URL(a1 + 72, (uint64_t *)(a4 + 40));
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a4 + 80);
  v11 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a4 + 88) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = v11;
  v12 = *(_QWORD *)(a4 + 96);
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a1 + 128) = v12;
  LODWORD(v12) = *(_DWORD *)(a4 + 104);
  *(_DWORD *)(a4 + 104) = 0;
  *(_DWORD *)(a1 + 136) = v12;
  LODWORD(v12) = *(_DWORD *)(a4 + 108);
  *(_DWORD *)(a4 + 108) = 0;
  *(_DWORD *)(a1 + 140) = v12;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  v13 = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a1 + 144) = v13;
  LODWORD(v13) = *(_DWORD *)(a4 + 120);
  *(_DWORD *)(a4 + 120) = 0;
  *(_DWORD *)(a1 + 152) = v13;
  LODWORD(v13) = *(_DWORD *)(a4 + 124);
  *(_DWORD *)(a4 + 124) = 0;
  *(_DWORD *)(a1 + 156) = v13;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v14 = *(_QWORD *)(a4 + 128);
  *(_QWORD *)(a4 + 128) = 0;
  *(_QWORD *)(a1 + 160) = v14;
  LODWORD(v14) = *(_DWORD *)(a4 + 136);
  *(_DWORD *)(a4 + 136) = 0;
  *(_DWORD *)(a1 + 168) = v14;
  LODWORD(v14) = *(_DWORD *)(a4 + 140);
  *(_DWORD *)(a4 + 140) = 0;
  *(_DWORD *)(a1 + 172) = v14;
  LODWORD(v14) = *(_DWORD *)(a4 + 144);
  *(_BYTE *)(a1 + 180) = *(_BYTE *)(a4 + 148);
  *(_DWORD *)(a1 + 176) = v14;
  v15 = *(_QWORD *)(a4 + 152);
  *(_QWORD *)(a4 + 152) = 0;
  *(_QWORD *)(a1 + 184) = v15;
  v16 = *(_QWORD *)(a4 + 160);
  *(_QWORD *)(a4 + 160) = 0;
  *(_QWORD *)(a1 + 192) = v16;
  v17 = *(_QWORD *)(a4 + 168);
  *(_QWORD *)(a4 + 168) = 0;
  *(_QWORD *)(a1 + 200) = v17;
  v18 = *(_QWORD *)(a4 + 176);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a4 + 184);
  *(_QWORD *)(a1 + 208) = v18;
  v19 = *(_QWORD *)(a4 + 192);
  *(_QWORD *)(a4 + 192) = 0;
  *(_QWORD *)(a1 + 224) = v19;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 232), (const WebCore::ResourceRequest *)(a1 + 32));
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  v20 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 32));
  v21 = *(WTF::StringImpl **)v20;
  if (*(_QWORD *)v20)
    *(_DWORD *)v21 += 2;
  v28 = v21;
  v22 = *(_OWORD *)(v20 + 24);
  v29 = *(_OWORD *)(v20 + 8);
  v30 = v22;
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)(a1 + 448), (uint64_t)&v28, 1uLL);
  v24 = v28;
  v28 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  *(_QWORD *)(a1 + 464) = 0;
  v25 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 472) = v25;
  *(_QWORD *)(a1 + 480) = 0;
  *(_WORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(_QWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 738) = *(_BYTE *)(a1 + 738) & 0xF1 | 4;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1378) = 0;
  *(_BYTE *)(a1 + 1380) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2064));
  *(_QWORD *)(a1 + 2272) = 0;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(_QWORD *)(a1 + 2280) = 0;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2312) = 0;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_BYTE *)(a1 + 2320) = 0;
  *(_BYTE *)(a1 + 2352) = 0;
  *(_BYTE *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2376));
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_BYTE *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2672));
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2872));
  *(_WORD *)(a1 + 3072) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 3080));
  *(_QWORD *)(a1 + 3288) = 0;
  *(_QWORD *)(a1 + 3280) = 0;
  *(_DWORD *)(a1 + 3304) = 0;
  *(_QWORD *)(a1 + 3296) = 0;
  *(_BYTE *)(a1 + 3352) = 0;
  *(_WORD *)(a1 + 3364) = 0;
  *(_QWORD *)(a1 + 3312) = 0;
  *(_QWORD *)(a1 + 3328) = 0;
  *(_QWORD *)(a1 + 3320) = 0;
  *(_BYTE *)(a1 + 3336) = 0;
  *(_QWORD *)(a1 + 3368) = 0;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_QWORD *)(a1 + 3376) = 0;
  *(_DWORD *)(a1 + 3392) = 0;
  *(_WORD *)(a1 + 3400) = 1;
  v28 = 0;
  LODWORD(v29) = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3408, (uint64_t)&v28, 30.0);
  if ((_DWORD)v29 != -1)
    ((void (*)(char *, WTF::StringImpl **))off_1E34D9DB0[v29])(&v27, &v28);
  *(_BYTE *)(a1 + 3464) = 0;
  *(_QWORD *)(a1 + 3472) = 0;
  *(_BYTE *)(a1 + 3480) = 0;
  *(_BYTE *)(a1 + 3482) = 0;
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  char v18;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9D10;
  v12 = *(_QWORD *)(a2 + 16) + 1;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = a3;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 32), (const WTF::String *)(*a4 + 56));
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 232), (const WebCore::ResourceRequest *)(a1 + 32));
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 464) = v13;
  v14 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 472) = v14;
  *(_QWORD *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = a6;
  *(_BYTE *)(a1 + 489) = 1;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 512) = 16646149;
  *(_BYTE *)(a1 + 520) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  *(_BYTE *)(a1 + 544) = 0;
  *(_BYTE *)(a1 + 560) = 0;
  *(_WORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 600));
  *(_QWORD *)(a1 + 840) = 0;
  *(_BYTE *)(a1 + 848) = 0;
  *(_BYTE *)(a1 + 738) = *(_BYTE *)(a1 + 738) & 0xF1 | 4;
  *(_QWORD *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 880) = 0;
  *(_QWORD *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 896) = 0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 944) = 0;
  *(_BYTE *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 984) = 0;
  *(_DWORD *)(a1 + 992) = 0;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_BYTE *)(a1 + 1368) = 0;
  *(_WORD *)(a1 + 1376) = 0;
  *(_BYTE *)(a1 + 1378) = 0;
  *(_BYTE *)(a1 + 1380) = 0;
  *(_BYTE *)(a1 + 1384) = 0;
  *(_BYTE *)(a1 + 2048) = 0;
  *(_WORD *)(a1 + 2056) = 0;
  *(_BYTE *)(a1 + 860) = 0;
  *(_DWORD *)(a1 + 856) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2064));
  *(_QWORD *)(a1 + 2272) = 0;
  *(_QWORD *)(a1 + 2264) = 0;
  *(_DWORD *)(a1 + 2288) = 0;
  *(_QWORD *)(a1 + 2280) = 0;
  *(_BYTE *)(a1 + 2336) = 0;
  *(_WORD *)(a1 + 2348) = 0;
  *(_QWORD *)(a1 + 2296) = 0;
  *(_QWORD *)(a1 + 2312) = 0;
  *(_QWORD *)(a1 + 2304) = 0;
  *(_BYTE *)(a1 + 2320) = 0;
  *(_BYTE *)(a1 + 2352) = 0;
  *(_BYTE *)(a1 + 2360) = 0;
  *(_WORD *)(a1 + 2368) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2376));
  *(_QWORD *)(a1 + 2584) = 0;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_DWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2592) = 0;
  *(_BYTE *)(a1 + 2648) = 0;
  *(_WORD *)(a1 + 2660) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2624) = 0;
  *(_QWORD *)(a1 + 2616) = 0;
  *(_BYTE *)(a1 + 2632) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2672));
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 2872));
  *(_WORD *)(a1 + 3072) = 0;
  WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)(a1 + 3080));
  *(_QWORD *)(a1 + 3288) = 0;
  *(_QWORD *)(a1 + 3280) = 0;
  *(_DWORD *)(a1 + 3304) = 0;
  *(_QWORD *)(a1 + 3296) = 0;
  *(_BYTE *)(a1 + 3352) = 0;
  *(_WORD *)(a1 + 3364) = 0;
  *(_QWORD *)(a1 + 3312) = 0;
  *(_QWORD *)(a1 + 3328) = 0;
  *(_QWORD *)(a1 + 3320) = 0;
  *(_BYTE *)(a1 + 3336) = 0;
  *(_QWORD *)(a1 + 3368) = 0;
  *(_QWORD *)(a1 + 3384) = 0;
  *(_QWORD *)(a1 + 3376) = 0;
  *(_DWORD *)(a1 + 3392) = 0;
  *(_WORD *)(a1 + 3400) = 1;
  v16 = 0;
  v17 = 0;
  WebKit::ProcessThrottlerTimedActivity::ProcessThrottlerTimedActivity(a1 + 3408, (uint64_t)&v16, 30.0);
  if (v17 != -1)
    ((void (*)(char *, uint64_t *))off_1E34D9DB0[v17])(&v18, &v16);
  *(_BYTE *)(a1 + 3464) = 0;
  *(_QWORD *)(a1 + 3472) = 0;
  *(_BYTE *)(a1 + 3480) = 0;
  *(_BYTE *)(a1 + 3482) = 0;
  return a1;
}

uint64_t API::Navigation::Navigation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v8;
  uint64_t v9;
  WTF *v10;

  v8 = API::Navigation::Navigation(a1, a2, a3, a4, a6);
  v9 = *a5;
  *a5 = 0;
  v10 = *(WTF **)(v8 + 496);
  *(_QWORD *)(v8 + 496) = v9;
  if (v10)
    std::default_delete<API::SubstituteData>::operator()[abi:sn180100](a1 + 496, v10);
  return a1;
}

void API::Navigation::~Navigation(API::Navigation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  const void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  char v16;
  char v17;
  char v18;

  *(_QWORD *)this = &off_1E34D9D10;
  v2 = *((_QWORD *)this + 434);
  *((_QWORD *)this + 434) = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
  v3 = *((unsigned int *)this + 864);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34D9DB0[v3])(&v16, (char *)this + 3448);
  *((_DWORD *)this + 864) = -1;
  *((_QWORD *)this + 426) = off_1E34ABE00;
  v4 = *((_QWORD *)this + 429);
  *((_QWORD *)this + 429) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::RunLoop::TimerBase::~TimerBase((API::Navigation *)((char *)this + 3408));
  v6 = *((unsigned int *)this + 848);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_10[v6])(&v17, (char *)this + 3368);
  *((_DWORD *)this + 848) = -1;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 414);
  *((_QWORD *)this + 414) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *((unsigned int *)this + 826);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_10[v8])(&v18, (char *)this + 3280);
  *((_DWORD *)this + 826) = -1;
  v9 = (const void *)*((_QWORD *)this + 409);
  *((_QWORD *)this + 409) = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::Navigation *)((char *)this + 3080));
  WebKit::NavigationActionData::~NavigationActionData((API::Navigation *)((char *)this + 512));
  v10 = (WTF *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v10)
    std::default_delete<API::SubstituteData>::operator()[abi:sn180100]((_DWORD)this + 496, v10);
  v11 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  v12 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
  v13 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v13)
    CFRelease(*(CFTypeRef *)(v13 + 8));
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 448, v10);
  v14 = (const void *)*((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v14)
    CFRelease(v14);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::Navigation *)((char *)this + 232));
  v15 = (const void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v15)
    CFRelease(v15);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::Navigation *)((char *)this + 32));
}

{
  API::Navigation::~Navigation(this);
  JUMPOUT(0x19AEB936CLL);
}

void API::Navigation::setCurrentRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  WTF::RefCountedBase *v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;

  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 232, a2);
  WTF::String::operator=((WTF::StringImpl **)(a1 + 384), (WTF::StringImpl *)(a2 + 152));
  WTF::String::operator=((WTF::StringImpl **)(a1 + 392), (WTF::StringImpl *)(a2 + 160));
  v6 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v7 = *(WTF::RefCountedBase **)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v6;
  if (v7)
    WTF::RefCounted<WebCore::FormData>::deref(v7);
  v8 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 408) = v8;
  v9 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  v10 = *(const void **)(a1 + 424);
  *(_QWORD *)(a1 + 424) = v9;
  if (v10)
    CFRelease(v10);
  if (!*(_BYTE *)(a1 + 440))
    *(_BYTE *)(a1 + 440) = 1;
  *(_QWORD *)(a1 + 432) = a3;
}

__n128 API::Navigation::appendRedirectionURL(API::Navigation *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  uint64_t *v5;
  unsigned int v6;
  __n128 result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  const WTF::StringImpl **v11;
  const WTF::StringImpl *v12;
  uint64_t v13;

  v5 = (uint64_t *)((char *)this + 448);
  v6 = *((_DWORD *)this + 115);
  if (v6)
  {
    if ((WTF::equal(*(WTF **)(*v5 + 40 * v6 - 40), *(const WTF::StringImpl **)a2, a3) & 1) != 0)
      return result;
    v8 = *((_DWORD *)this + 115);
  }
  else
  {
    v8 = 0;
  }
  if (v8 == *((_DWORD *)this + 114))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>((uint64_t)v5, (unint64_t)a2);
  }
  else
  {
    v9 = v8;
    v10 = *v5;
    v11 = (const WTF::StringImpl **)(*v5 + 40 * v8);
    v12 = *(const WTF::StringImpl **)a2;
    if (*(_QWORD *)a2)
      *(_DWORD *)v12 += 2;
    *v11 = v12;
    v13 = v10 + 40 * v9;
    result = *(__n128 *)((char *)a2 + 8);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(__n128 *)(v13 + 8) = result;
    ++*((_DWORD *)this + 115);
  }
  return result;
}

uint64_t API::NavigationData::NavigationData(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  const void *v6;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9D38;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 24) = v5;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(a1 + 32), (const WebCore::ResourceRequest *)(a2 + 16));
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 232), (const WebCore::ResourceResponseBase *)(a2 + 216));
  v6 = *(const void **)(a2 + 456);
  *(_QWORD *)(a1 + 472) = v6;
  if (v6)
    CFRetain(v6);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 464);
  return a1;
}

void API::NavigationData::~NavigationData(API::NavigationData *this, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase *v3;
  const void *v4;
  const void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  *(_QWORD *)this = &off_1E34D9D38;
  v3 = (API::NavigationData *)((char *)this + 232);
  v4 = (const void *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v4)
    CFRelease(v4);
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  v5 = (const void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
    CFRelease(v5);
  WebCore::ResourceRequestBase::~ResourceRequestBase((API::NavigationData *)((char *)this + 32));
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
}

{
  API::NavigationData::~NavigationData(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)60>::type()
{
  return 60;
}

uint64_t API::ObjectImpl<(API::Object::Type)62>::type()
{
  return 62;
}

uint64_t API::ObjectImpl<(API::Object::Type)66>::type()
{
  return 66;
}

uint64_t API::ObjectImpl<(API::Object::Type)76>::type()
{
  return 76;
}

uint64_t API::ObjectImpl<(API::Object::Type)78>::type()
{
  return 78;
}

API::HitTestResult *API::HitTestResult::HitTestResult(API::HitTestResult *this, const WebKit::WebHitTestResultData *a2, WebKit::WebPageProxy *a3)
{
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34D9D98;
  WebKit::WebHitTestResultData::WebHitTestResultData((API::HitTestResult *)((char *)this + 16), a2);
  if (a3)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a3 + 6, (uint64_t)a3 + 16);
    v6 = (unsigned int *)*((_QWORD *)a3 + 3);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 85) = v6;
  return this;
}

void API::HitTestResult::~HitTestResult(API::HitTestResult *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D9D98;
  v3 = (unsigned int *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebKit::WebHitTestResultData::~WebHitTestResultData((API::HitTestResult *)((char *)this + 16));
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34D9D98;
  v3 = (unsigned int *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebKit::WebHitTestResultData::~WebHitTestResultData((API::HitTestResult *)((char *)this + 16));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)67>::type()
{
  return 67;
}

_QWORD *WTF::Detail::CallableWrapper<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTraits<API::HTTPCookieStore::filterAppBoundCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &)> &&)::$_0>,WTF::HashTableTraits> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = off_1E34D9DD0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 1), a2);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetAllCookies,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)#1},void,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D9DF8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetAllCookies,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)#1},void,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D9DF8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetAllCookies,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0)#1},void,API::HTTPCookieStore::cookies(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5[2];
  char v6;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v5), !v6))
  {
    v5[0] = 0;
    v5[1] = 0;
    API::HTTPCookieStore::filterAppBoundCookies(*(_QWORD *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  }
  result = API::HTTPCookieStore::filterAppBoundCookies(*(_QWORD *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
  if (v6)
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::URL &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetCookies,API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D9E20;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::URL &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetCookies,API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D9E20;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::URL &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetCookies,API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0>(API::HTTPCookieStore::cookiesForURL(WTF::URL &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5[2];
  char v6;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v5), !v6))
  {
    v5[0] = 0;
    v5[1] = 0;
    API::HTTPCookieStore::filterAppBoundCookies(*(_QWORD *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  }
  result = API::HTTPCookieStore::filterAppBoundCookies(*(_QWORD *)(a1 + 8), v5, (uint64_t *)(a1 + 24));
  if (v6)
    return WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<API::HTTPCookieStore::setCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34D9E48;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::HTTPCookieStore::setCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34D9E48;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<API::HTTPCookieStore::setCookies(WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebKit::WebsiteDataStore *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  IPC::Encoder *v19;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 24);
  if (v4 && (v5 = *(WebKit::WebsiteDataStore **)(v4 + 8)) != 0)
  {
    v7 = WebKit::WebsiteDataStore::networkProcess(v5);
    v8 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v8 = 1554;
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 528) = v8 + 16;
    *(_QWORD *)(v8 + 536) = v8 + 16;
    *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v8 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
    v19 = (IPC::Encoder *)v8;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v8, (uint64_t *)(v3 + 16));
    IPC::VectorArgumentCoder<false,WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Cookie,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, a2);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34D9E70;
    v10[1] = v9;
    v17[0] = v10;
    v17[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v18 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v7, &v19, 0, (uint64_t)v17, 1);
    if (v18)
    {
      v12 = v17[0];
      v17[0] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    result = v19;
    v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D9E70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9E70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D9E98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9E98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookie,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

IPC::Encoder *WTF::Detail::CallableWrapper<API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_0,void,WebKit::WebProcessProxy &>::call(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  void *v12;
  _QWORD v13[2];
  char v14;
  IPC::Encoder *v15;

  v3 = *(_QWORD *)(a2 + 136);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 104))
      v4 = 0;
    else
      v4 = *(_QWORD *)(a2 + 144) == 0;
    if (v4)
      return result;
  }
  else if (!*(_QWORD *)(a2 + 144))
  {
    return result;
  }
  v5 = (unsigned int *)**((_QWORD **)result + 1);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 2578;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v15 = (IPC::Encoder *)v7;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = off_1E34D9EE8;
  v8[1] = v5;
  v13[0] = v8;
  v13[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v14 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a2, &v15, 0, (uint64_t)v13, 1);
  if (v14)
  {
    v10 = v13[0];
    v13[0] = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess16DeleteAllCookiesEZZN3API15HTTPCookieStore16deleteAllCookiesEONS_17CompletionHandlerIFvvEEEENK3__0clIN6WebKit15WebProcessProxyEEEDaRT_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSN_E_vJSN_EED1Ev(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D9EE8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC10Connection31makeAsyncReplyCompletionHandlerIN8Messages10WebProcess16DeleteAllCookiesEZZN3API15HTTPCookieStore16deleteAllCookiesEONS_17CompletionHandlerIFvvEEEENK3__0clIN6WebKit15WebProcessProxyEEEDaRT_EUlvE_EENSA_IFvPNS2_7DecoderEEEEOT0_NS_19ThreadLikeAssertionEEUlSN_E_vJSN_EED0Ev(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D9EE8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteAllCookies,API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1>(API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34D9F10;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteAllCookies,API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1>(API::HTTPCookieStore::deleteAllCookies(WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34D9F10;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D9F38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9F38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::DeleteCookiesForHostnames,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D9F60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9F60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::SetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D9F88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9F88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebCookieManager::GetHTTPCookieAcceptPolicy,WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)>>(WTF::CompletionHandler<void ()(WebCore::HTTPCookieAcceptPolicy const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v5;
  unsigned __int16 v6;
  char v7;

  if (a2 && *a2)
  {
    v6 = IPC::Decoder::decode<std::tuple<WebCore::HTTPCookieAcceptPolicy>>(a2);
    if (v6 >= 0x100u)
    {
      v3 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)v3 + 16))(v3, &v6);
    }
    else
    {
      v7 = 0;
      v3 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, &v7);
    }
  }
  else
  {
    v5 = 0;
    v3 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v3 + 16))(v3, &v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34D9FB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34D9FB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FlushCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Vector<std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::String>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (uint64_t *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = v4 + 1;
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  v7 = *v3;
  *v3 = 0;
  *v6 = v7;
  v8 = v3[1];
  v3[1] = 0;
  v6[1] = v8;
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

uint64_t *WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  __int128 v13;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x6666667)
  {
    v5 = 5 * a3;
    v6 = 40 * a3;
    v7 = WTF::fastMalloc((WTF *)(40 * a3));
    *((_DWORD *)v3 + 2) = (v6 & 0xFFFFFFF8) / 0x28;
    *v3 = v7;
    v8 = a2 + 8 * v5;
    v9 = *((_DWORD *)v3 + 3);
    do
    {
      v10 = *v3;
      v11 = *(_DWORD **)a2;
      if (*(_QWORD *)a2)
        *v11 += 2;
      *(_QWORD *)(v10 + 40 * v9) = v11;
      v12 = v10 + 40 * v9;
      v13 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v12 + 8) = v13;
      v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      a2 += 40;
    }
    while (a2 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t API::OpenPanelParameters::OpenPanelParameters(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34D9FD8;
  *(_WORD *)(a1 + 16) = *(_WORD *)a2;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, a2 + 8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 40, a2 + 24);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 56, a2 + 40);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 56);
  return a1;
}

void API::OpenPanelParameters::~OpenPanelParameters(API::OpenPanelParameters *this, void *a2)
{
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E34D9FD8;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 56, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 40, v3);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 24, v4);
}

{
  API::OpenPanelParameters::~OpenPanelParameters(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::OpenPanelParameters::allowedMIMETypes@<X0>(uint64_t *a1@<X8>)
{
  void *v3;
  _BYTE v5[16];

  WebCore::MIMETypeRegistry::allowedMIMETypes();
  API::Array::createStringArray((uint64_t)v5, a1);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

void API::PageConfiguration::Data::createWebProcessPool(WebKit::WebProcessPool **a1@<X8>)
{
  CFTypeRef *v3;
  API::ProcessPoolConfiguration *v4;

  v3 = (CFTypeRef *)API::Object::newObject(0xA8uLL, 90);
  v4 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v3);
  WebKit::WebProcessPool::create(v4, a1);
  CFRelease(v3[1]);
}

WTF::StringImpl *API::PageConfiguration::Data::createWebPreferences@<X0>(WebKit::WebPreferences **a1@<X8>)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;

  v9 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v3 = (WebKit::WebPreferences *)API::Object::newObject(0x70uLL, 92);
  *a1 = WebKit::WebPreferences::WebPreferences(v3, (const WTF::String *)&v9, (const WTF::String *)&v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::PageConfiguration::Data::LazyInitializedRef<WebKit::BrowsingContextGroup,&API::PageConfiguration::Data::createBrowsingContextGroup>::get(uint64_t *a1)
{
  uint64_t result;
  void *v3;
  WebKit::BrowsingContextGroup *v4;

  result = *a1;
  if (!result)
  {
    result = WTF::fastMalloc((WTF *)0x48);
    *(_DWORD *)result = 1;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    v4 = (WebKit::BrowsingContextGroup *)*a1;
    *a1 = result;
    if (v4)
    {
      WTF::RefCounted<WebKit::BrowsingContextGroup>::deref(v4, v3);
      return *a1;
    }
  }
  return result;
}

WebKit::WebProcessPool *API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(WebKit::WebProcessPool **a1)
{
  WebKit::WebProcessPool *result;
  WebKit::WebProcessPool *v3;
  WebKit::WebProcessPool *v4;

  result = *a1;
  if (!result)
  {
    API::PageConfiguration::Data::createWebProcessPool(&v4);
    result = v4;
    v3 = *a1;
    *a1 = v4;
    if (v3)
    {
      CFRelease(*((CFTypeRef *)v3 + 1));
      return *a1;
    }
  }
  return result;
}

WebKit::WebUserContentControllerProxy *API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get(WebKit::WebUserContentControllerProxy **a1)
{
  WebKit::WebUserContentControllerProxy *result;
  WebKit::WebUserContentControllerProxy *v3;
  WebKit::WebUserContentControllerProxy *v4;

  result = *a1;
  if (!result)
  {
    v3 = (WebKit::WebUserContentControllerProxy *)API::Object::newObject(0x70uLL, 104);
    result = WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(v3);
    v4 = *a1;
    *a1 = result;
    if (v4)
    {
      CFRelease(*((CFTypeRef *)v4 + 1));
      return *a1;
    }
  }
  return result;
}

unsigned int *API::PageConfiguration::setWeakWebExtensionController(API::PageConfiguration *this, WebKit::WebExtensionController *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;

  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
    v4 = (unsigned int *)*((_QWORD *)a2 + 3);
    if (v4)
    {
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 + 1, v4));
    }
  }
  else
  {
    v4 = 0;
  }
  result = (unsigned int *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = v4;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t *API::PageConfiguration::maskedURLSchemes@<X0>(uint64_t *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;

  if (*((_BYTE *)this + 328))
  {
    v3 = this + 40;
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(a2, (_QWORD **)v3);
  }
  if (this[14] || (v4 = this[15]) != 0 && *(_QWORD *)(v4 + 8))
  {
    v3 = WebKit::WebExtensionMatchPattern::extensionSchemes((WebKit::WebExtensionMatchPattern *)this);
    return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(a2, (_QWORD **)v3);
  }
  *a2 = 0;
  return this;
}

WebKit::WebPreferences *API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(WebKit::WebPreferences **a1)
{
  WebKit::WebPreferences *result;
  WebKit::WebPreferences *v3;
  WebKit::WebPreferences *v4;

  result = *a1;
  if (!result)
  {
    API::PageConfiguration::Data::createWebPreferences(&v4);
    result = v4;
    v3 = *a1;
    *a1 = v4;
    if (v3)
    {
      CFRelease(*((CFTypeRef *)v3 + 1));
      return *a1;
    }
  }
  return result;
}

WebKit::VisitedLinkStore *API::PageConfiguration::Data::LazyInitializedRef<WebKit::VisitedLinkStore,&API::PageConfiguration::Data::createVisitedLinkStore>::get(WebKit::VisitedLinkStore **a1)
{
  WebKit::VisitedLinkStore *result;
  WebKit::VisitedLinkStore *v3;
  WebKit::VisitedLinkStore *v4;

  result = *a1;
  if (!result)
  {
    v3 = (WebKit::VisitedLinkStore *)API::Object::newObject(0x98uLL, 109);
    result = WebKit::VisitedLinkStore::VisitedLinkStore(v3);
    v4 = *a1;
    *a1 = result;
    if (v4)
    {
      CFRelease(*((CFTypeRef *)v4 + 1));
      return *a1;
    }
  }
  return result;
}

WebKit::WebsiteDataStore *API::PageConfiguration::websiteDataStore(API::PageConfiguration *this)
{
  WebKit::WebsiteDataStore *result;
  uint64_t v3;
  WebKit::WebsiteDataStore *v4;

  result = (WebKit::WebsiteDataStore *)*((_QWORD *)this + 8);
  if (!result)
  {
    WebKit::WebsiteDataStore::defaultDataStore(0, &v4);
    result = v4;
    v3 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v4;
    if (v3)
    {
      CFRelease(*(CFTypeRef *)(v3 + 8));
      return (WebKit::WebsiteDataStore *)*((_QWORD *)this + 8);
    }
  }
  return result;
}

API::WebsitePolicies *API::PageConfiguration::Data::LazyInitializedRef<API::WebsitePolicies,&API::PageConfiguration::Data::createWebsitePolicies>::get(API::WebsitePolicies **a1)
{
  API::WebsitePolicies *result;
  API::WebsitePolicies *v3;
  API::WebsitePolicies *v4;

  result = *a1;
  if (!result)
  {
    v3 = (API::WebsitePolicies *)API::Object::newObject(0xA8uLL, 123);
    result = API::WebsitePolicies::WebsitePolicies(v3);
    v4 = *a1;
    *a1 = result;
    if (v4)
    {
      CFRelease(*((CFTypeRef *)v4 + 1));
      return *a1;
    }
  }
  return result;
}

BOOL API::PageConfiguration::isLockdownModeExplicitlySet(API::PageConfiguration *this)
{
  uint64_t v1;
  _BOOL8 v2;

  v1 = *((_QWORD *)this + 7);
  if (!v1)
    return 0;
  CFRetain(*(CFTypeRef *)(v1 + 8));
  v2 = *(_BYTE *)(v1 + 153) != 0;
  CFRelease(*(CFTypeRef *)(v1 + 8));
  return v2;
}

uint64_t API::PageConfiguration::preferencesForNetworkProcess(WebKit::WebPreferences **this)
{
  WebKit::WebPreferences *v2;
  const WTF::StringImpl *v3;
  int BoolValueForKey;
  int v5;

  v2 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(this + 5);
  CFRetain(*((CFTypeRef *)v2 + 1));
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  BoolValueForKey = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferences *)((char *)v2 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, v3);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(this + 3)
                                      + 48)
                          + 96);
  CFRelease(*((CFTypeRef *)v2 + 1));
  return BoolValueForKey | (v5 << 8);
}

uint64_t API::SessionState::create@<X0>(API::SessionState *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v10[2];
  __int128 v11;
  WTF::StringImpl *v12;
  char v13;

  v5 = API::Object::newObject(0x60uLL, 19);
  v10[0] = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v10[1] = v6;
  v11 = *((_OWORD *)this + 1);
  WTF::URL::URL((uint64_t)&v12, (uint64_t *)this + 4);
  v13 = *((_BYTE *)this + 72);
  API::SessionState::SessionState(v5, v10);
  *a2 = v5;
  v8 = v12;
  v12 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v7);
}

uint64_t API::SessionState::SessionState(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DA050;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 24) = v4;
  LODWORD(v4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 28) = v4;
  *(_QWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 40) = a2[3];
  WTF::URL::URL(a1 + 48, a2 + 4);
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 72);
  return a1;
}

void API::SessionState::~SessionState(API::SessionState *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 16, a2);
}

{
  API::SessionState::~SessionState(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::TargetedElementInfo::TargetedElementInfo(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DA078;
  v6 = *a3;
  v7 = a3[1];
  v8 = a3[2];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 12);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  v9 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 7) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  v10 = *((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 8) = 0;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *((_QWORD *)a3 + 9);
  *((_QWORD *)a3 + 9) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *((_QWORD *)a3 + 10);
  *((_QWORD *)a3 + 10) = 0;
  *(_QWORD *)(a1 + 96) = v12;
  LODWORD(v12) = *((_DWORD *)a3 + 22);
  *((_DWORD *)a3 + 22) = 0;
  *(_DWORD *)(a1 + 104) = v12;
  LODWORD(v12) = *((_DWORD *)a3 + 23);
  *((_DWORD *)a3 + 23) = 0;
  *(_DWORD *)(a1 + 108) = v12;
  v13 = a3[6];
  v14 = a3[7];
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a3 + 128);
  *(_OWORD *)(a1 + 112) = v13;
  *(_OWORD *)(a1 + 128) = v14;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v15 = *((_QWORD *)a3 + 17);
  *((_QWORD *)a3 + 17) = 0;
  *(_QWORD *)(a1 + 152) = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 36);
  *((_DWORD *)a3 + 36) = 0;
  *(_DWORD *)(a1 + 160) = v15;
  LODWORD(v15) = *((_DWORD *)a3 + 37);
  *((_DWORD *)a3 + 37) = 0;
  *(_DWORD *)(a1 + 164) = v15;
  *(_QWORD *)(a1 + 168) = 0;
  v16 = *((_QWORD *)a3 + 19);
  *((_QWORD *)a3 + 19) = 0;
  *(_QWORD *)(a1 + 168) = v16;
  LODWORD(v16) = *((_DWORD *)a3 + 40);
  *(_WORD *)(a1 + 180) = *((_WORD *)a3 + 82);
  *(_DWORD *)(a1 + 176) = v16;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v17 = *(unsigned int **)(a2 + 24);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  *(_QWORD *)(a1 + 192) = v17;
  return a1;
}

BOOL API::TargetedElementInfo::isSameElement(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1[2] != a2[2])
    return 0;
  v2 = a1[5] == a2[5] && a1[4] == a2[4];
  if (!v2 || a1[6] != a2[6])
    return 0;
  v5 = a1[24];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 16;
    else
      v5 = 0;
  }
  v7 = a2[24];
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
      v7 = v8 - 16;
    else
      v7 = 0;
  }
  return v5 == v7;
}

float API::TargetedElementInfo::boundsInWebView(API::TargetedElementInfo *this)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  uint64_t v5;
  __int128 v7;

  v1 = *((_QWORD *)this + 24);
  if (!v1)
    return 0.0;
  v2 = *(_QWORD *)(v1 + 8);
  v3 = 0.0;
  if (v2)
  {
    CFRetain(*(CFTypeRef *)(v2 - 8));
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 24) + 8);
    v7 = *((_OWORD *)this + 7);
    v3 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 488))(v5, &v7);
    CFRelease(*(CFTypeRef *)(v2 - 8));
  }
  return v3;
}

void API::TargetedElementInfo::childFrames(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  uint64_t v28[2];

  v3 = *(_QWORD *)(a1 + 192);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    v6 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    CFRetain(*(CFTypeRef *)(v4 - 8));
    do
      v7 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v7 + 1, (unsigned int *)v6));
    v8 = *a2;
    *a2 = 0;
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v9 = &off_1E34DA120;
    v9[1] = v4 - 16;
    v9[2] = v6;
    v9[3] = v8;
    v11 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = v9;
    v12 = *(unsigned int *)(a1 + 164);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(a1 + 152);
      v14 = &v13[2 * v12];
      do
      {
        v15 = WebKit::WebFrameProxy::webFrame(*v13, v13[1]);
        if (v15)
        {
          v16 = v15;
          CFRetain(*(CFTypeRef *)(v15 + 8));
          v17 = *(_QWORD *)(v16 + 24);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (v18 && v18 == v4)
            {
              do
                v20 = __ldaxr((unsigned int *)v11);
              while (__stlxr(v20 + 1, (unsigned int *)v11));
              do
                v21 = __ldaxr((unsigned int *)v6);
              while (__stlxr(v21 + 1, (unsigned int *)v6));
              v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
              *v22 = off_1E34DA148;
              v22[1] = v11;
              v22[2] = v6;
              v28[0] = (uint64_t)v22;
              WebKit::WebFrameProxy::getFrameInfo((_QWORD *)v16, v28);
              v23 = v28[0];
              v28[0] = 0;
              if (v23)
                (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            }
          }
          CFRelease(*(CFTypeRef *)(v16 + 8));
        }
        v13 += 2;
      }
      while (v13 != v14);
    }
    do
    {
      v24 = __ldaxr((unsigned int *)v11);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, (unsigned int *)v11));
    if (!v25)
    {
      atomic_store(1u, (unsigned int *)v11);
      v28[0] = v11;
      WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v28);
    }
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref((unsigned int *)v6, v10);
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    v28[0] = 0;
    v28[1] = 0;
    v26 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 16))(v26, v28);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v27);
  }
}

void API::TargetedElementInfo::takeSnapshot(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[72];

  v3 = *(_QWORD *)(a1 + 192);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v4 - 8));
    WebKit::WebPageProxy::takeSnapshotForTargetedElement(v4 - 16, a1, a2);
    CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    v7[0] = 0;
    v7[64] = 0;
    v6 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v7);
  }
}

uint64_t API::TargetedElementRequest::makeRequest@<X0>(API::TargetedElementRequest *this@<X0>, const WebKit::WebPageProxy *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  float v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v6 = (uint64_t *)((char *)this + 16);
  *(_BYTE *)a3 = 0;
  *(_DWORD *)(a3 + 16) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1> const&>(a3, (uint64_t)this + 16);
  *(_WORD *)(a3 + 24) = *((_WORD *)this + 20);
  if (!*((_DWORD *)this + 8))
  {
    v8 = *((_QWORD *)a2 + 5);
    if (v8)
      v9 = *(_QWORD *)(v8 + 8);
    else
      v9 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 1584))(v9);
    v10 = 0;
    if (!*((_DWORD *)this + 8))
      v10 = *v6;
    v16 = v10;
    v11 = (*(float (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 496))(v9, &v16);
    v13 = v11;
    v14 = v12;
    v15 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v15 != -1)
    {
      if (!(_DWORD)v15)
      {
        *(float *)a3 = v11;
        *(_DWORD *)(a3 + 4) = v12;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
      }
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v15])(&v17, a3);
    }
    *(float *)a3 = v13;
    *(_DWORD *)(a3 + 4) = v14;
    *(_DWORD *)(a3 + 16) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 1592))(v9);
  }
  return result;
}

uint64_t API::UIClient::checkUserMediaPermissionForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t result;

  v6 = *(_QWORD *)(a6 + 32);
  if (v6)
  {
    *(_QWORD *)(a6 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *API::UIClient::decidePolicyForUserMediaPermissionRequest(API::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::SecurityOrigin *a4, API::SecurityOrigin *a5, WebKit::UserMediaPermissionRequestProxy *a6)
{
  if (*((unsigned __int8 *)a6 + 112) - 1 > 1)
    return WebKit::UserMediaPermissionRequestProxy::promptForGetUserMedia(a6);
  else
    return (WebKit::UserMediaPermissionRequestManagerProxy *)(*(uint64_t (**)(WebKit::UserMediaPermissionRequestProxy *, uint64_t))(*(_QWORD *)a6 + 24))(a6, 2);
}

void API::UIClient::createNewPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = 0;
  v6 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = v8;
  v8 = 0;
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 + 8));
}

uint64_t API::UIClient::decidePolicyForMediaKeySystemPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t API::ObjectImpl<(API::Object::Type)83>::type()
{
  return 83;
}

uint64_t API::ObjectImpl<(API::Object::Type)87>::type()
{
  return 87;
}

uint64_t API::ObjectImpl<(API::Object::Type)90>::type()
{
  return 90;
}

uint64_t API::ObjectImpl<(API::Object::Type)19>::type()
{
  return 19;
}

uint64_t API::UIClient::takeFocus(API::UIClient *this, WebKit::WebPageProxy *a2)
{
  return 0;
}

uint64_t API::UIClient::runJavaScriptAlert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a6 + 16))(*a6);
}

uint64_t API::UIClient::runJavaScriptConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a6 + 16))(*a6, 0);
}

WTF::StringImpl *API::UIClient::runJavaScriptPrompt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  v9 = 0;
  (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a7 + 16))(*a7, &v9);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::UIClient::runBeforeUnloadConfirmPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 1);
}

uint64_t API::UIClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a11 + 16))(*a11, a7);
}

uint64_t API::UIClient::lockScreenOrientation()
{
  return 0;
}

uint64_t API::UIClient::needsFontAttributes(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::decidePolicyForNotificationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::UIClient::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;

  v7 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

uint64_t API::UIClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t API::UIClient::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t API::UIClient::shouldIncludeAppLinkActionsForElement(API::UIClient *this, _WKActivatedElementInfo *a2)
{
  return 1;
}

void API::UIClient::actionsForElement(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

uint64_t API::UIClient::setShouldKeepScreenAwake(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::presentingViewController(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::dataDetectionReferenceDate(API::UIClient *this)
{
  return 0;
}

uint64_t API::UIClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t API::UIClient::confirmPDFOpening(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;

  v5 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t API::UIClient::runWebAuthenticationPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;

  v6 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

uint64_t API::UIClient::requestWebAuthenticationConditonalMediationRegistration(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

uint64_t API::UIClient::queryPermission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void API::TargetedElementInfo::~TargetedElementInfo(API::TargetedElementInfo *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::TargetedElementInfo::~TargetedElementInfo((API::TargetedElementInfo *)((char *)this + 16), (WTF::StringImpl *)a2);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WebCore::TargetedElementInfo::~TargetedElementInfo((API::TargetedElementInfo *)((char *)this + 16), (WTF::StringImpl *)a2);
  JUMPOUT(0x19AEB936CLL);
}

void API::UserScript::~UserScript(API::UserScript *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WebCore::UserScript::~UserScript((API::UserScript *)((char *)this + 24), a2);
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WebCore::UserScript::~UserScript((API::UserScript *)((char *)this + 24), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)28>::type()
{
  return 28;
}

unsigned int *std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false> const&>(unsigned int *result, unsigned __int8 *a2)
{
  if (*((unsigned __int8 *)result + 16) == a2[16])
  {
    if (*((_BYTE *)result + 16))
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result, (uint64_t)a2);
  }
  else if (*((_BYTE *)result + 16))
  {
    result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    *((_BYTE *)result + 16) = 0;
  }
  else
  {
    result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)result, (uint64_t)a2);
    *((_BYTE *)result + 16) = 1;
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(unsigned int *result, void *a2)
{
  WTF *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v2 = (WTF *)result;
  do
  {
    v3 = __ldaxr(result);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, result));
  if (!v4)
  {
    atomic_store(1u, result);
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(result + 2), a2);
    return (unsigned int *)WTF::fastFree(v2, v5);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JST_SS_EEEDcmSV_DpOT0____fdiagonal[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    *v3 += 2;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENSA_6VectorINSA_7HashSetISB_NSA_11DefaultHashISB_EENSA_10HashTraitsISB_EENSA_15HashTableTraitsEEELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISN_LNS0_6_TraitE1EEEEEvRSO_OT_EUlRSW_OT0_E_JRNS0_6__baseILSR_1EJS9_SB_SM_EEERKS14_EEEDcSW_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a2, a3);
}

void API::ObjectImpl<(API::Object::Type)28>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

_DWORD *WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  _DWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (v8 = *a1) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a2);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * v14;
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      v15 = (uint64_t)v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a2);
    v17 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    result = *(_DWORD **)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v17;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
    v23 = *a1;
    if (*a1)
      v24 = *(_DWORD *)(v23 - 12) + 1;
    else
      v24 = 1;
    *(_DWORD *)(v23 - 12) = v24;
    v25 = *a1;
    if (*a1)
      v26 = *(_DWORD *)(v25 - 12);
    else
      v26 = 0;
    v27 = (*(_DWORD *)(v25 - 16) + v26);
    v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_35:
        result = (_DWORD *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::WebURLSchemeHandler,WTF::RawPtrTraits<WebKit::WebURLSchemeHandler>,WTF::DefaultRefDerefTraits<WebKit::WebURLSchemeHandler>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        v15 = (uint64_t)result;
        v25 = *a1;
        if (*a1)
          v28 = *(unsigned int *)(v25 - 4);
        else
          v28 = 0;
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_35;
    }
    *(_QWORD *)a4 = v15;
    *(_QWORD *)(a4 + 8) = v25 + 16 * v28;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3))
    goto LABEL_13;
  v19 = *a1;
  if (*a1)
    v20 = *(unsigned int *)(v19 - 4);
  else
    v20 = 0;
  *(_QWORD *)a4 = v15;
  *(_QWORD *)(a4 + 8) = v19 + 16 * v20;
  *(_BYTE *)(a4 + 16) = 0;
  v21 = v8 + 16 * v14;
  v22 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  result = *(_DWORD **)(v21 + 8);
  *(_QWORD *)(v21 + 8) = v22;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  *a1 = &off_1E34DA120;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E34DA120;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v4, a2);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  v16 = 0;
  v17 = 0;
  v3 = *(unsigned int *)(v2 + 20);
  if (!(_DWORD)v3)
  {
LABEL_7:
    v14 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v14 + 16))(v14, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v15);
  }
  if (!(v3 >> 29))
  {
    v4 = WTF::fastMalloc((WTF *)(8 * v3));
    LODWORD(v17) = v3;
    v16 = v4;
    v5 = *(_DWORD *)(v2 + 20);
    if (v5)
    {
      v6 = v4;
      v7 = 0;
      v8 = *(_QWORD *)(v2 + 8);
      v9 = 312 * v5;
      do
      {
        v10 = v7;
        v11 = *(_QWORD *)(v1 + 8);
        v12 = API::Object::newObject(0x150uLL, 62);
        v13 = API::FrameTreeNode::FrameTreeNode(v12, v8, v11);
        v7 = v10 + 1;
        *(_QWORD *)(v6 + 8 * v10) = v13;
        v8 += 312;
        v9 -= 312;
      }
      while (v9);
      HIDWORD(v17) = v10 + 1;
    }
    goto LABEL_7;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &&>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;

  *(_QWORD *)a1 = off_1E34DA148;
  v3 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v3, a2);
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &&>::~CallableWrapper(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  void *v4;

  *a1 = (unsigned int *)off_1E34DA148;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WTF::Box<WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::Data,(WTF::DestructionThread)0>::deref(v3, a2);
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v4);
}

__n128 WTF::Detail::CallableWrapper<API::TargetedElementInfo::childFrames(WTF::CompletionHandler<void ()(WTF::Vector<WTF::Ref<API::FrameTreeNode,WTF::RawPtrTraits<API::FrameTreeNode>,WTF::DefaultRefDerefTraits<API::FrameTreeNode>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_1,void,WebKit::FrameTreeNodeData &&>::call(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_DWORD *)(v3 + 20);
  if (v4 == *(_DWORD *)(v3 + 16))
  {
    WTF::Vector<WebKit::FrameTreeNodeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::FrameTreeNodeData>(v3 + 8, a2);
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 8) + 312 * v4;
    *(_WORD *)v6 = *(_WORD *)a2;
    WTF::URL::URL(v6 + 8, (uint64_t *)(a2 + 8));
    WTF::URL::URL(v6 + 48, (uint64_t *)(a2 + 48));
    *(_QWORD *)(v6 + 88) = *(_QWORD *)(a2 + 88);
    v7 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_QWORD *)(v6 + 112) = 0;
    *(_QWORD *)(v6 + 96) = v7;
    v8 = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(v6 + 104) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a2 + 112) = 0;
    *(_DWORD *)(v6 + 112) = v8;
    LODWORD(v8) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(a2 + 116) = 0;
    *(_DWORD *)(v6 + 116) = v8;
    *(_QWORD *)(v6 + 120) = 0;
    *(_QWORD *)(v6 + 128) = 0;
    v9 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(v6 + 120) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 128);
    *(_DWORD *)(a2 + 128) = 0;
    *(_DWORD *)(v6 + 128) = v9;
    LODWORD(v9) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = 0;
    *(_DWORD *)(v6 + 132) = v9;
    *(_QWORD *)(v6 + 136) = 0;
    *(_QWORD *)(v6 + 144) = 0;
    v10 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(v6 + 136) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 144);
    *(_DWORD *)(a2 + 144) = 0;
    *(_DWORD *)(v6 + 144) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 148);
    *(_DWORD *)(a2 + 148) = 0;
    *(_DWORD *)(v6 + 148) = v10;
    LODWORD(v10) = *(_DWORD *)(a2 + 152);
    *(_BYTE *)(v6 + 156) = *(_BYTE *)(a2 + 156);
    *(_DWORD *)(v6 + 152) = v10;
    v11 = *(_QWORD *)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;
    *(_QWORD *)(v6 + 160) = v11;
    v12 = *(_QWORD *)(a2 + 168);
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(v6 + 168) = v12;
    v13 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(v6 + 176) = v13;
    v14 = *(_QWORD *)(a2 + 184);
    *(_BYTE *)(v6 + 192) = *(_BYTE *)(a2 + 192);
    *(_QWORD *)(v6 + 184) = v14;
    v15 = *(_QWORD *)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;
    *(_BYTE *)(v6 + 208) = 0;
    v6 += 208;
    *(_QWORD *)(v6 - 8) = v15;
    *(_DWORD *)(v6 + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1>>(v6, a2 + 208);
    v16 = *(_QWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(v6 + 32) = v16;
    result = *(__n128 *)(a2 + 248);
    v17 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(v6 + 70) = *(_OWORD *)(a2 + 278);
    *(_OWORD *)(v6 + 56) = v17;
    *(__n128 *)(v6 + 40) = result;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    v18 = *(_QWORD *)(a2 + 296);
    *(_QWORD *)(a2 + 296) = 0;
    *(_QWORD *)(v6 + 88) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 304);
    *(_DWORD *)(a2 + 304) = 0;
    *(_DWORD *)(v6 + 96) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 308);
    *(_DWORD *)(a2 + 308) = 0;
    *(_DWORD *)(v6 + 100) = v18;
    ++*(_DWORD *)(v3 + 20);
  }
  return result;
}

WTF *std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<2ul,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v5;
  WTF::StringImpl ***v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 16) != 2)
    return (WTF *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__emplace[abi:sn180100]<2ul,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a3);
  v5 = a2[3];
  if ((_DWORD)v5)
  {
    v6 = *(WTF::StringImpl ****)a2;
    v7 = 8 * v5;
    do
    {
      if (*v6)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v6, (WTF::StringImpl *)a2);
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__emplace[abi:sn180100]<2ul,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v4])(&v7, a1);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 16) = 2;
  return a1;
}

WTF::StringImpl **std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::FloatPoint,WTF::String,WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::__assign_alt[abi:sn180100]<1ul,WTF::String,WTF::String>(WTF::StringImpl **result, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  WTF::StringImpl **v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  char v7;

  v4 = result;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return WTF::String::operator=(a2, a3);
    result = (WTF::StringImpl **)((uint64_t (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore10FloatPointEN3WTF6StringENS8_6VectorINS8_7HashSetIS9_NS8_11DefaultHashIS9_EENS8_10HashTraitsIS9_EENS8_15HashTableTraitsEEELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix[v5])(&v7, result);
  }
  v6 = *(WTF::StringImpl **)a3;
  *(_QWORD *)a3 = 0;
  *v4 = v6;
  *((_DWORD *)v4 + 4) = 1;
  return result;
}

uint64_t API::UserStyleSheet::UserStyleSheet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v6;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DA508;
  *(_QWORD *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = &off_1E34DA418;
  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_DWORD **)(a2 + 8);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = v8;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 72, a2 + 48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 88, a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = v9;
  CFRetain(*(CFTypeRef *)(a3 + 8));
  *(_QWORD *)(a1 + 128) = a3;
  return a1;
}

void API::WebAuthenticationAssertionResponse::~WebAuthenticationAssertionResponse(API::WebAuthenticationAssertionResponse *this)
{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
}

{
  _DWORD *v2;

  v2 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  JUMPOUT(0x19AEB936CLL);
}

void API::WebAuthenticationAssertionResponse::userHandle(API::WebAuthenticationAssertionResponse *this@<X0>, WebKit **a2@<X8>)
{
  JSC::ArrayBuffer *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebKit *v7;

  *a2 = 0;
  v3 = *(JSC::ArrayBuffer **)(*((_QWORD *)this + 2) + 136);
  if (v3)
  {
    *(_DWORD *)v3 += 2;
    v4 = JSC::ArrayBuffer::span(v3);
    v6 = v5;
    v7 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(_QWORD *)v7 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v7);
    *(_QWORD *)v7 = &off_1E34AE750;
    *((_QWORD *)v7 + 2) = v4;
    *((_QWORD *)v7 + 3) = v6;
    *((_QWORD *)v7 + 4) = API::WebAuthenticationAssertionResponse::userHandle(void)const::$_0::__invoke;
    *((_QWORD *)v7 + 5) = v3;
    *a2 = v7;
  }
}

void API::WebAuthenticationAssertionResponse::credentialID(WebCore::AuthenticatorResponse **this@<X0>, WebKit **a2@<X8>)
{
  JSC::ArrayBuffer *v3;
  JSC::ArrayBuffer *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebKit *v8;

  *a2 = 0;
  v3 = (JSC::ArrayBuffer *)WebCore::AuthenticatorResponse::rawId(this[2]);
  if (v3)
  {
    v4 = v3;
    *(_DWORD *)v3 += 2;
    v5 = JSC::ArrayBuffer::span(v3);
    v7 = v6;
    v8 = (WebKit *)API::Object::newObject(0x30uLL, 8);
    *(_QWORD *)v8 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v8);
    *(_QWORD *)v8 = &off_1E34AE750;
    *((_QWORD *)v8 + 2) = v5;
    *((_QWORD *)v8 + 3) = v7;
    *((_QWORD *)v8 + 4) = API::WebAuthenticationAssertionResponse::credentialID(void)const::$_0::__invoke;
    *((_QWORD *)v8 + 5) = v4;
    *a2 = v8;
  }
}

uint64_t API::WebAuthenticationPanel::create@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, _DWORD **a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  v12 = API::Object::newObject(0x58uLL, 126);
  result = API::WebAuthenticationPanel::WebAuthenticationPanel(v12, a1, a2, a3, a4, a5);
  *a6 = result;
  return result;
}

API::WebAuthenticationPanel *API::WebAuthenticationPanel::WebAuthenticationPanel(API::WebAuthenticationPanel *this)
{
  WebKit::AuthenticatorManager *v2;
  _QWORD *v3;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E34DA468;
  v2 = (WebKit::AuthenticatorManager *)WTF::fastMalloc((WTF *)0x358);
  *((_QWORD *)this + 3) = WebKit::AuthenticatorManager::AuthenticatorManager(v2);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v3 = off_1E34DA530;
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  WebKit::AuthenticatorManager::enableNativeSupport(*((_QWORD *)this + 3));
  return this;
}

uint64_t API::WebAuthenticationPanel::WebAuthenticationPanel(uint64_t a1, uint64_t a2, _DWORD **a3, uint64_t *a4, char a5, _DWORD **a6)
{
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  _DWORD *v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  char v26;
  unsigned __int8 v27;
  char v28;
  unsigned __int8 v29;
  char v30;
  unsigned __int8 v31;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DA468;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v12 = off_1E34DA530;
  *(_QWORD *)(a1 + 32) = v12;
  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a2 + 8), a2);
  v13 = *(unsigned int **)(a2 + 8);
  if (v13)
  {
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 40) = v13;
  v15 = *a3;
  if (*a3)
    *v15 += 2;
  *(_QWORD *)(a1 + 56) = 0;
  v16 = (_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = a5;
  v17 = *a6;
  if (*a6)
    *v17 += 2;
  *(_QWORD *)(a1 + 80) = v17;
  v18 = WTF::fastMalloc((WTF *)5);
  *(_DWORD *)(a1 + 64) = 5;
  *(_QWORD *)(a1 + 56) = v18;
  v31 = 0;
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v31))
  {
    v30 = 0;
    v19 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v19 == *(_DWORD *)(a1 + 64))
    {
      v20 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, (WTF *)(v19 + 1), (unint64_t)&v30);
      v19 = *(unsigned int *)(a1 + 68);
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + v19) = *v20;
    }
    else
    {
      *(_BYTE *)(*v16 + v19) = 0;
    }
    *(_DWORD *)(a1 + 68) = v19 + 1;
  }
  v29 = 1;
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v29))
  {
    v28 = 1;
    v21 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v21 == *(_DWORD *)(a1 + 64))
    {
      v22 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, (WTF *)(v21 + 1), (unint64_t)&v28);
      v21 = *(unsigned int *)(a1 + 68);
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + v21) = *v22;
    }
    else
    {
      *(_BYTE *)(*v16 + v21) = 1;
    }
    *(_DWORD *)(a1 + 68) = v21 + 1;
  }
  v27 = 3;
  if (WTF::HashTable<WebCore::AuthenticatorTransport,WebCore::AuthenticatorTransport,WTF::IdentityExtractor,WTF::IntHash<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>>::contains<WTF::IdentityHashTranslator<WTF::StrongEnumHashTraits<WebCore::AuthenticatorTransport>,WTF::IntHash<WebCore::AuthenticatorTransport>>,WebCore::AuthenticatorTransport>(a4, &v27))
  {
    v26 = 3;
    v23 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v23 == *(_DWORD *)(a1 + 64))
    {
      v24 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 56, (WTF *)(v23 + 1), (unint64_t)&v26);
      v23 = *(unsigned int *)(a1 + 68);
      *(_BYTE *)(*(_QWORD *)(a1 + 56) + v23) = *v24;
    }
    else
    {
      *(_BYTE *)(*v16 + v23) = 3;
    }
    *(_DWORD *)(a1 + 68) = v23 + 1;
  }
  return a1;
}

void API::WebAuthenticationPanel::~WebAuthenticationPanel(API::WebAuthenticationPanel *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF *v4;
  WTF::StringImpl *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  API::WebAuthenticationPanel::~WebAuthenticationPanel(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

WTF::RefCountedBase *API::WebAuthenticationPanel::handleRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  WTF::WeakPtrFactory<WebKit::AuthenticatorObserver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((uint64_t *)(a1 + 16), a1);
  v7 = *(unsigned int **)(a1 + 16);
  if (v7)
  {
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v9 = *(unsigned int **)(a2 + 688);
  *(_QWORD *)(a2 + 688) = v7;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v6);
    }
  }
  return WebKit::AuthenticatorManager::handleRequest(*(_DWORD **)(a1 + 24), a2, a3);
}

uint64_t API::WebAuthenticationPanel::cancel(API::WebAuthenticationPanel *this)
{
  uint64_t v2;
  WebKit::AuthenticatorManager *v3;

  v2 = *((_QWORD *)this + 5);
  if (v2 && (v3 = *(WebKit::AuthenticatorManager **)(v2 + 8)) != 0)
    return WebKit::AuthenticatorManager::cancelRequest(v3, this);
  else
    return WebKit::AuthenticatorManager::cancel(*((WebKit::AuthenticatorManager **)this + 3));
}

WTF *API::WebAuthenticationPanel::setMockConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24)) & 1) != 0)
    return WebKit::MockAuthenticatorManager::setTestConfiguration(*(_QWORD *)(a1 + 24), a2);
  v5 = WTF::fastMalloc((WTF *)0x3F8);
  v6 = WebKit::MockAuthenticatorManager::MockAuthenticatorManager(v5, a2);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = *(_QWORD *)(a1 + 24);
  }
  return (WTF *)WebKit::AuthenticatorManager::enableNativeSupport(v6);
}

WTF *WebKit::MockAuthenticatorManager::setTestConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)(a2 + 136);
  *(_BYTE *)(a1 + 856) = *(_BYTE *)a2;
  std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>>((WTF::StringImpl **)(a1 + 864), (unsigned __int8 *)(a2 + 8));
  std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>>(a1 + 912, (uint64_t *)(a2 + 56));
  std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>>(a1 + 952, a2 + 96);
  return std::__optional_storage_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>((WTF *)(a1 + 992), v4);
}

uint64_t API::WindowFeatures::create@<X0>(API::WindowFeatures *this@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t result;

  v5 = (_OWORD *)API::Object::newObject(0x60uLL, 124);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v5);
  *(_QWORD *)v5 = &off_1E34DA4B8;
  v6 = *(_OWORD *)this;
  v7 = *((_OWORD *)this + 1);
  v8 = *((_OWORD *)this + 2);
  *(_OWORD *)((char *)v5 + 58) = *(_OWORD *)((char *)this + 42);
  v5[2] = v7;
  v5[3] = v8;
  v5[1] = v6;
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v5 + 5), (uint64_t)this + 64);
  *a2 = v5;
  return result;
}

void API::WindowFeatures::~WindowFeatures(API::WindowFeatures *this, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
}

{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::WebsiteDataRecord::WebsiteDataRecord(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DA4E0;
  v4 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 2);
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    *(_QWORD *)(a1 + 32) = a2[2];
    *(_QWORD *)(a1 + 40) = 0;
    v5 = a2[3];
    a2[3] = 0;
    *(_QWORD *)(a1 + 40) = v5;
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_QWORD *)(a1 + 56) = 0;
  v6 = a2[5];
  a2[5] = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = 0;
  v8 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = 0;
  v9 = a2[8];
  a2[8] = 0;
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = 0;
  v10 = a2[9];
  a2[9] = 0;
  *(_QWORD *)(a1 + 88) = v10;
  return a1;
}

void API::WebsiteDataRecord::~WebsiteDataRecord(API::WebsiteDataRecord *this, WTF::StringImpl *a2)
{
  WebKit::WebsiteDataRecord::~WebsiteDataRecord((API::WebsiteDataRecord *)((char *)this + 16), a2);
}

{
  WebKit::WebsiteDataRecord::~WebsiteDataRecord((API::WebsiteDataRecord *)((char *)this + 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WKApplicationCacheManagerGetTypeID()
{
  return 0;
}

uint64_t WKAuthenticationChallengeGetTypeID()
{
  return 2;
}

uint64_t WKAuthenticationChallengeGetDecisionListener(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 464);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WKAuthenticationChallengeGetProtectionSpace(void *a1)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = WebKit::AuthenticationChallengeProxy::protectionSpace((WebKit::AuthenticationChallengeProxy *)a1);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t WKAuthenticationChallengeGetProposedCredential(void *a1)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = WebKit::AuthenticationChallengeProxy::proposedCredential((WebKit::AuthenticationChallengeProxy *)a1);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t WKAuthenticationChallengeGetPreviousFailureCount(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::AuthenticationChallengeBase::previousFailureCount((WebCore::AuthenticationChallengeBase *)(a1 + 16));
}

uint64_t API::ObjectImpl<(API::Object::Type)125>::type()
{
  return 125;
}

uint64_t API::ObjectImpl<(API::Object::Type)126>::type()
{
  return 126;
}

uint64_t API::ObjectImpl<(API::Object::Type)123>::type()
{
  return 123;
}

uint64_t API::ObjectImpl<(API::Object::Type)124>::type()
{
  return 124;
}

uint64_t API::ObjectImpl<(API::Object::Type)120>::type()
{
  return 120;
}

void API::UserStyleSheet::~UserStyleSheet(API::UserStyleSheet *this, void *a2)
{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v4);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
}

{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 88, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 72, v4);
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)29>::type()
{
  return 29;
}

void API::ObjectImpl<(API::Object::Type)29>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::WebAuthenticationAssertionResponse::userHandle(void)const::$_0::__invoke(uint64_t a1, WTF::DeferrableRefCountedBase *a2)
{
  return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a2);
}

uint64_t API::WebAuthenticationAssertionResponse::credentialID(void)const::$_0::__invoke(uint64_t a1, WTF::DeferrableRefCountedBase *a2)
{
  return WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(a2);
}

WTF::StringImpl **std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>>(WTF::StringImpl **result, unsigned __int8 *a2)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = result;
  if (*((unsigned __int8 *)result + 40) == a2[40])
  {
    if (*((_BYTE *)result + 40))
    {
      *(_WORD *)result = *(_WORD *)a2;
      WTF::String::operator=(result + 1, (WTF::StringImpl *)(a2 + 8));
      WTF::String::operator=(v3 + 2, (WTF::StringImpl *)(a2 + 16));
      WTF::String::operator=(v3 + 3, (WTF::StringImpl *)(a2 + 24));
      return WTF::String::operator=(v3 + 4, (WTF::StringImpl *)(a2 + 32));
    }
  }
  else if (*((_BYTE *)result + 40))
  {
    return (WTF::StringImpl **)std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::reset[abi:sn180100]((uint64_t)result, (WTF::StringImpl *)a2);
  }
  else
  {
    *(_WORD *)result = *(_WORD *)a2;
    v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = 0;
    result[1] = v4;
    v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    result[2] = v5;
    v6 = (WTF::StringImpl *)*((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = 0;
    result[3] = v6;
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = 0;
    result[4] = v7;
    *((_BYTE *)result + 40) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::MockWebAuthenticationConfiguration::LocalConfiguration,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(result + 40))
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)(result + 32);
    *(_QWORD *)(v2 + 32) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(v2 + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    result = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 40) = 0;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::HidConfiguration,false>>(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *((unsigned __int8 *)a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      v4 = *(unsigned int *)(result + 12);
      if ((_DWORD)v4)
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)result, (WTF::StringImpl *)(*(_QWORD *)result + 8 * v4));
      result = (uint64_t)WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v3, a2);
      v5 = a2[2];
      *(_DWORD *)(v3 + 23) = *(_DWORD *)((char *)a2 + 23);
      *(_QWORD *)(v3 + 16) = v5;
    }
  }
  else if (*(_BYTE *)(result + 32))
  {
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    *(_BYTE *)(v3 + 32) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v6;
    LODWORD(v6) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v6;
    v7 = a2[2];
    *(_DWORD *)(result + 23) = *(_DWORD *)((char *)a2 + 23);
    *(_QWORD *)(result + 16) = v7;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::MockWebAuthenticationConfiguration::NfcConfiguration,false>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(_BYTE *)(result + 32))
    {
      *(_BYTE *)result = *(_BYTE *)a2;
      v4 = *(unsigned int *)(result + 20);
      if ((_DWORD)v4)
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(result + 8), (WTF::StringImpl *)(*(_QWORD *)(result + 8) + 8 * v4));
      result = (uint64_t)WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt(v3 + 8, (_DWORD *)(a2 + 8));
      *(_WORD *)(v3 + 24) = *(_WORD *)(a2 + 24);
    }
  }
  else if (*(_BYTE *)(result + 32))
  {
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result + 8, (void *)a2);
    *(_BYTE *)(v3 + 32) = 0;
  }
  else
  {
    *(_BYTE *)result = *(_BYTE *)a2;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    *(_DWORD *)(result + 16) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a2 + 20) = 0;
    *(_DWORD *)(result + 20) = v5;
    *(_WORD *)(result + 24) = *(_WORD *)(a2 + 24);
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *(unsigned int *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::CustomHeaderFields,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::CustomHeaderFields>::destruct(*(_QWORD *)a1 + 32 * v5, (void *)(*(_QWORD *)a1 + 32 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields*>((uint64_t)&v7, *(uint64_t **)a2, (uint64_t *)(*(_QWORD *)a2 + 32 * v4), *(_QWORD *)a1);
    WTF::VectorCopier<false,WebCore::CustomHeaderFields>::uninitializedCopy<WebCore::CustomHeaderFields>(*(_QWORD *)a2 + 32 * *(unsigned int *)(a1 + 12), (uint64_t *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12)), *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 12));
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  }
  return a1;
}

uint64_t WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  WTF::StringImpl ***v14;
  uint64_t v15;
  _QWORD **v16;
  WTF::StringImpl ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD **v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2 != (unsigned int *)a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = a2[3];
    if (v4 <= v5)
    {
      v8 = v5 > *(_DWORD *)(a1 + 8);
      LODWORD(v5) = *(_DWORD *)(a1 + 12);
      if (v8)
      {
        WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
        LODWORD(v5) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      v6 = *(_QWORD *)a1 + 16 * v5;
      v7 = 16 * v4 - 16 * v5;
      do
      {
        v6 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, (WTF::StringImpl *)a2)+ 16;
        v7 -= 16;
      }
      while (v7);
      *(_DWORD *)(a1 + 12) = v5;
    }
    v9 = *(_QWORD *)a2;
    v10 = *(_QWORD *)a1;
    if ((_DWORD)v5)
    {
      v11 = v9 + 16 * v5;
      do
      {
        if (v9 != v10)
        {
          v12 = *(unsigned int *)(v10 + 12);
          v13 = *(unsigned int *)(v9 + 12);
          if (v12 <= v13)
          {
            if (v13 > *(unsigned int *)(v10 + 8))
            {
              WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(v10, 0);
              WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v10, *(unsigned int *)(v9 + 12));
              v12 = *(unsigned int *)(v10 + 12);
            }
          }
          else
          {
            v14 = (WTF::StringImpl ***)(*(_QWORD *)v10 + 8 * v13);
            v15 = 8 * v12 - 8 * v13;
            do
            {
              if (*v14)
                WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v14, (WTF::StringImpl *)a2);
              ++v14;
              v15 -= 8;
            }
            while (v15);
            *(_DWORD *)(v10 + 12) = v13;
            v12 = v13;
          }
          v16 = *(_QWORD ***)v9;
          v17 = *(WTF::StringImpl ****)v10;
          if (v12)
          {
            v18 = 8 * v12;
            do
            {
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::operator=(v17++, v16++);
              v18 -= 8;
            }
            while (v18);
            v16 = *(_QWORD ***)v9;
            v12 = *(unsigned int *)(v10 + 12);
            v17 = *(WTF::StringImpl ****)v10;
          }
          v19 = *(unsigned int *)(v9 + 12);
          if (v12 != v19)
          {
            v20 = (uint64_t *)&v17[v12];
            v21 = &v16[v12];
            v22 = 8 * v19 - 8 * v12;
            do
            {
              v20 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v20, v21++)+ 1;
              v22 -= 8;
            }
            while (v22);
            LODWORD(v12) = *(_DWORD *)(v9 + 12);
          }
          *(_DWORD *)(v10 + 12) = v12;
        }
        v9 += 16;
        v10 += 16;
      }
      while (v9 != v11);
      v9 = *(_QWORD *)a2;
      v23 = *(_DWORD *)(a1 + 12);
      v10 = *(_QWORD *)a1;
    }
    else
    {
      v23 = 0;
    }
    v24 = a2[3];
    if (v23 != (_DWORD)v24)
    {
      v25 = v10 + 16 * v23;
      v26 = v9 + 16 * v23;
      v27 = 16 * v24 - 16 * v23;
      do
      {
        v25 = WTF::Vector<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v25, v26)+ 16;
        v26 += 16;
        v27 -= 16;
      }
      while (v27);
      v23 = a2[3];
    }
    *(_DWORD *)(a1 + 12) = v23;
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::operator=(uint64_t *a1, _QWORD **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v6;

  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(&v6, a2);
  v4 = *a1;
  *a1 = v6;
  v6 = v4;
  if (v4)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v4, v3);
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields const*,WebCore::CustomHeaderFields*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a4, v5);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a4 + 16), (uint64_t)(v5 + 2));
    a4 += 32;
    v5 += 4;
  }
  while (v5 != v6);
  return v6;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl **v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;

  if (a2 != (uint64_t *)a1)
  {
    v4 = *(unsigned int *)(a1 + 12);
    v5 = *((unsigned int *)a2 + 3);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
        LODWORD(v4) = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::HTTPHeaderField>::destruct((WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v5), (WTF::StringImpl *)(*(_QWORD *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    v6 = *a2;
    if ((_DWORD)v4)
    {
      v7 = v6 + 16 * v4;
      v8 = *(WTF::StringImpl ***)a1;
      do
      {
        WTF::String::operator=(v8, (WTF::StringImpl *)v6);
        WTF::String::operator=(v8 + 1, (WTF::StringImpl *)(v6 + 8));
        v6 += 16;
        v8 += 2;
      }
      while (v6 != v7);
      v6 = *a2;
      v9 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v9 = 0;
    }
    v10 = *((unsigned int *)a2 + 3);
    if (v9 != (_DWORD)v10)
    {
      v11 = (_QWORD *)(*(_QWORD *)a1 + 16 * v9);
      v12 = v6 + 16 * v9;
      do
      {
        v13 = *(_DWORD **)v12;
        if (*(_QWORD *)v12)
          *v13 += 2;
        *v11 = v13;
        v14 = *(_DWORD **)(v12 + 8);
        if (v14)
          *v14 += 2;
        v11[1] = v14;
        v12 += 16;
        v11 += 2;
      }
      while (v12 != v6 + 16 * v10);
    }
    *(_DWORD *)(a1 + 12) = v10;
  }
  return a1;
}

WTF::StringImpl *API::WebAuthenticationPanelClient::requestPin(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  v6 = 0;
  v3 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t API::WebAuthenticationPanelClient::selectAssertionResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;

  v4 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::WebAuthenticationPanelClient::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t API::WebAuthenticationPanelClient::requestLAContextForUserVerification(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WKAuthenticationDecisionListenerGetTypeID()
{
  return 3;
}

WTF::StringImpl *WKAuthenticationDecisionListenerUseCredential(void *a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  char v13;
  void *v14;

  v2 = a2;
  if (!a1)
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
LABEL_10:
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v11);
    v14 = 0;
    goto LABEL_11;
  }
  v3 = objc_msgSend(a1, "_apiObject");
  if (!v2)
    goto LABEL_10;
LABEL_3:
  v4 = objc_msgSend(v2, "_apiObject");
  v6 = *(WTF::StringImpl **)(v4 + 16);
  if (v6)
    *(_DWORD *)v6 += 2;
  v11 = v6;
  v7 = *(WTF::StringImpl **)(v4 + 24);
  if (v7)
    *(_DWORD *)v7 += 2;
  v12 = v7;
  v13 = *(_BYTE *)(v4 + 32);
  v2 = *(void **)(v4 + 40);
  v14 = v2;
  if (v2)
    CFRetain(v2);
LABEL_11:
  v8 = *(_QWORD *)(v3 + 16);
  if (v8)
  {
    *(_QWORD *)(v3 + 16) = 0;
    (*(void (**)(uint64_t, _QWORD, WTF::StringImpl **))(*(_QWORD *)v8 + 16))(v8, 0, &v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v2 = v14;
  }
  v14 = 0;
  if (v2)
    CFRelease(v2);
  v9 = v12;
  v12 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v11;
  v11 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKAuthenticationDecisionListenerCancel(void *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  CFTypeRef cf;

  if (a1)
    v1 = objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v7);
  cf = 0;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, 2, &v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKAuthenticationDecisionListenerRejectProtectionSpaceAndContinue(void *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  CFTypeRef v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  CFTypeRef cf;

  if (a1)
    v1 = objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v7);
  cf = 0;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, 3, &v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = cf;
    cf = 0;
    if (v4)
      CFRelease(v4);
  }
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKBackForwardListItemGetTypeID()
{
  return 44;
}

uint64_t WKBackForwardListItemCopyURL(_QWORD *a1)
{
  API::URL *v1;
  uint64_t v2;
  WebKit *v4;

  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  v2 = a1[7];
  v1 = (API::URL *)(a1 + 7);
  if (v2 && (API::URL::create(v1, &v4), v4))
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKBackForwardListItemCopyTitle(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKBackForwardListItemCopyOriginalURL(_QWORD *a1)
{
  API::URL *v1;
  uint64_t v2;
  WebKit *v4;

  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  v2 = a1[8];
  v1 = (API::URL *)(a1 + 8);
  if (v2 && (API::URL::create(v1, &v4), v4))
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKBackForwardListGetTypeID()
{
  return 43;
}

uint64_t WKBackForwardListGetCurrentItem(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  if (result)
    result = objc_msgSend((id)result, "_apiObject");
  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8) && *(_BYTE *)(result + 48))
  {
    v2 = *(_QWORD *)(result + 40);
    if (v2 >= *(unsigned int *)(result + 36))
    {
      __break(0xC471u);
      return result;
    }
    v3 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * v2);
    if (v3)
      return *(_QWORD *)(v3 + 8);
  }
  return 0;
}

uint64_t WKBackForwardListGetBackItem(void *a1)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = WebKit::WebBackForwardList::backItem((uint64_t)a1);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t WKBackForwardListGetForwardItem(void *a1)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = WebKit::WebBackForwardList::forwardItem((uint64_t)a1);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t WKBackForwardListGetItemAtIndex(void *a1, unsigned int a2)
{
  uint64_t result;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  result = WebKit::WebBackForwardList::itemAtIndex((uint64_t)a1, a2);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

void WKBackForwardListClear(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebBackForwardList::clear((WebKit::WebBackForwardList *)a1);
}

uint64_t WKBackForwardListGetBackListCount(uint64_t a1)
{
  uint64_t v1;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && *(_QWORD *)(v1 + 8) && *(_BYTE *)(a1 + 48))
    return *(unsigned int *)(a1 + 40);
  else
    return 0;
}

uint64_t WKBackForwardListGetForwardListCount(uint64_t a1)
{
  uint64_t v1;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  v1 = *(_QWORD *)(a1 + 16);
  if (v1 && *(_QWORD *)(v1 + 8) && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)(a1 + 36) + ~*(_DWORD *)(a1 + 40));
  else
    return 0;
}

uint64_t WKBackForwardListCopyBackListWithLimit(void *a1, unsigned int a2)
{
  WebKit *v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebBackForwardList::backListAsAPIArrayWithLimit((WebKit::WebBackForwardList *)a1, a2, &v4);
  if (v4)
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKBackForwardListCopyForwardListWithLimit(void *a1, unsigned int a2)
{
  WebKit *v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebBackForwardList::forwardListAsAPIArrayWithLimit((WebKit::WebBackForwardList *)a1, a2, &v4);
  if (v4)
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKContextGetTypeID()
{
  return 89;
}

uint64_t WKContextCreate()
{
  CFTypeRef *v0;
  WebKit *v1;
  WebKit::WebProcessPool *v2;
  WebKit::WebProcessPool *v3;
  uint64_t v4;

  v0 = (CFTypeRef *)API::Object::newObject(0xA8uLL, 90);
  v1 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v0);
  WebKit::InitializeWebKit2(v1);
  v2 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  v3 = WebKit::WebProcessPool::WebProcessPool(v2, (API::ProcessPoolConfiguration *)v0);
  if (v3)
    v4 = *((_QWORD *)v3 + 1);
  else
    v4 = 0;
  CFRelease(v0[1]);
  return v4;
}

uint64_t WKContextCreateWithInjectedBundlePath(void *a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WebKit::WebProcessPool *v5;
  WebKit::WebProcessPool *v6;
  uint64_t v7;
  WTF::StringImpl *v9;

  v2 = API::Object::newObject(0xA8uLL, 90);
  API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v2);
  if (a1)
  {
    objc_msgSend(a1, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v9 = 0;
  }
  WTF::String::operator=((WTF::StringImpl **)(v2 + 16), (WTF::StringImpl *)&v9);
  v4 = v9;
  v9 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      v4 = (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebKit::InitializeWebKit2(v4);
  v5 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  v6 = WebKit::WebProcessPool::WebProcessPool(v5, (API::ProcessPoolConfiguration *)v2);
  if (v6)
    v7 = *((_QWORD *)v6 + 1);
  else
    v7 = 0;
  CFRelease(*(CFTypeRef *)(v2 + 8));
  return v7;
}

uint64_t WKContextCreateWithConfiguration(void *a1)
{
  CFTypeRef *v1;
  WebKit *v2;
  WebKit::WebProcessPool *v3;
  WebKit::WebProcessPool *v4;
  uint64_t v5;

  if (a1)
  {
    v1 = (CFTypeRef *)objc_msgSend(a1, "_apiObject");
    v2 = (WebKit *)CFRetain(v1[1]);
  }
  else
  {
    v1 = (CFTypeRef *)API::Object::newObject(0xA8uLL, 90);
    v2 = API::ProcessPoolConfiguration::ProcessPoolConfiguration((API::ProcessPoolConfiguration *)v1);
  }
  WebKit::InitializeWebKit2(v2);
  v3 = (WebKit::WebProcessPool *)API::Object::newObject(0x3C8uLL, 89);
  v4 = WebKit::WebProcessPool::WebProcessPool(v3, (API::ProcessPoolConfiguration *)v1);
  if (v4)
    v5 = *((_QWORD *)v4 + 1);
  else
    v5 = 0;
  CFRelease(v1[1]);
  return v5;
}

_OWORD *WKContextSetClient(char *a1, _OWORD *__src)
{
  _OWORD *result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (a1)
    a1 = (char *)objc_msgSend(a1, "_apiObject");
  result = a1 + 208;
  if (__src)
  {
    if (*(_DWORD *)__src == 4)
    {
      v4 = __src[1];
      *result = *__src;
      result[1] = v4;
      v5 = __src[2];
      v6 = __src[3];
      v7 = __src[4];
      *((_QWORD *)result + 10) = *((_QWORD *)__src + 10);
      result[3] = v6;
      result[4] = v7;
      result[2] = v5;
    }
    else
    {
      *((_QWORD *)result + 10) = 0;
      result[3] = 0u;
      result[4] = 0u;
      result[1] = 0u;
      result[2] = 0u;
      *result = 0u;
      v8 = *(unsigned int *)__src;
      if ((int)v8 <= 3)
      {
        if (v8 >= 5)
          __break(1u);
        else
          return memcpy(result, __src, constinit_1[v8]);
      }
    }
  }
  else
  {
    *((_QWORD *)result + 10) = 0;
    result[3] = 0u;
    result[4] = 0u;
    result[1] = 0u;
    result[2] = 0u;
    *result = 0u;
  }
  return result;
}

_OWORD *WKContextSetInjectedBundleClient(void *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)(v4 + 8) = 0u;
  result = (_OWORD *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)v4 = off_1E34D2D20;
  if (a2)
  {
    v6 = *(unsigned int *)a2;
    if ((_DWORD)v6 == 2)
    {
      v7 = *a2;
      v8 = a2[2];
      *(_OWORD *)(v4 + 24) = a2[1];
      *(_OWORD *)(v4 + 40) = v8;
      *result = v7;
    }
    else if ((int)v6 <= 1)
    {
      if (v6 >= 3)
      {
        __break(1u);
        return result;
      }
      memcpy(result, a2, constinit_0[v6]);
    }
  }
  v9 = (_QWORD *)v4;
  WebKit::WebProcessPool::setInjectedBundleClient(v3, &v9);
  result = v9;
  if (v9)
    return (_OWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
  return result;
}

uint64_t WKContextSetHistoryClient(void *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  WebKit::WebProcessProxy **v11;
  WebKit::WebProcessProxy **v12;
  WebKit::WebProcessProxy *v13;
  unsigned int *v14;
  unsigned int v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)v4 = off_1E34DA580;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0)
        goto LABEL_8;
      __break(1u);
    }
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    *(_QWORD *)(v4 + 56) = *((_QWORD *)a2 + 6);
    *(_OWORD *)(v4 + 24) = v6;
    *(_OWORD *)(v4 + 40) = v7;
    *(_OWORD *)(v4 + 8) = v5;
  }
LABEL_8:
  v20 = (uint64_t *)v4;
  WebKit::WebProcessPool::setHistoryClient(v3, &v20);
  if (v20)
    (*(void (**)(uint64_t *))(*v20 + 8))(v20);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 312) + 56))(*(_QWORD *)(v3 + 312));
  v9 = *(unsigned int *)(v3 + 84);
  if ((_DWORD)v9)
  {
    v10 = result;
    v11 = *(WebKit::WebProcessProxy ***)(v3 + 72);
    v12 = &v11[v9];
    do
    {
      v13 = *v11;
      v14 = (unsigned int *)((char *)*v11 + 16);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      WebKit::WebProcessProxy::pages(v13, (uint64_t)&v20);
      if (v21)
      {
        v17 = v20;
        v18 = 8 * v21;
        do
        {
          v19 = *v17++;
          CFRetain(*(CFTypeRef *)(v19 + 8));
          *(_BYTE *)(v19 + 825) = v10;
          CFRelease(*(CFTypeRef *)(v19 + 8));
          v18 -= 8;
        }
        while (v18);
      }
      result = WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v16);
      if (v13)
        result = (uint64_t)WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v14);
      ++v11;
    }
    while (v11 != v12);
  }
  return result;
}

uint64_t WKContextSetDownloadClient(void *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t result;
  _OWORD *v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _DWORD *v15;

  if (a1)
    v4 = objc_msgSend(a1, "_apiObject");
  else
    v4 = 0;
  result = WTF::fastMalloc((WTF *)0x88);
  *(_OWORD *)(result + 16) = 0u;
  v6 = (_OWORD *)(result + 16);
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34DA5D0;
  *(_QWORD *)(result + 128) = a1;
  if (a2)
  {
    v7 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 == 1)
    {
      v8 = *a2;
      v9 = a2[2];
      *(_OWORD *)(result + 32) = a2[1];
      *(_OWORD *)(result + 48) = v9;
      *v6 = v8;
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[5];
      *(_OWORD *)(result + 112) = a2[6];
    }
    else
    {
      if (v7 > 0)
        goto LABEL_10;
      if (v7)
      {
        __break(1u);
        return result;
      }
      v13 = *a2;
      v14 = a2[2];
      *(_OWORD *)(result + 32) = a2[1];
      *(_OWORD *)(result + 48) = v14;
      *v6 = v13;
      v10 = a2[3];
      v11 = a2[4];
      v12 = a2[5];
      *(_QWORD *)(result + 112) = *((_QWORD *)a2 + 12);
    }
    *(_OWORD *)(result + 80) = v11;
    *(_OWORD *)(result + 96) = v12;
    *(_OWORD *)(result + 64) = v10;
  }
LABEL_10:
  v15 = *(_DWORD **)(v4 + 304);
  *(_QWORD *)(v4 + 304) = result;
  if (v15)
  {
    if (v15[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
    else
      --v15[2];
  }
  return result;
}

uint64_t WKContextDownloadURLRequest()
{
  return 0;
}

uint64_t WKContextResumeDownload()
{
  return 0;
}

void WKContextSetInitializationUserDataForInjectedBundle(void *a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
  {
LABEL_3:
    v2 = (CFTypeRef *)-[CFTypeRef _apiObject](v2, "_apiObject");
    CFRetain(v2[1]);
  }
LABEL_4:
  v4 = *(_QWORD *)(v3 + 192);
  *(_QWORD *)(v3 + 192) = v2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

WTF::StringImpl *WKContextPostMessageToInjectedBundle(void *a1, void *a2, void *a3)
{
  WebKit::WebProcessPool *v5;
  API::Object *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  if (a1)
  {
    v5 = (WebKit::WebProcessPool *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  if (a3)
    v6 = (API::Object *)objc_msgSend(a3, "_apiObject");
  else
    v6 = 0;
  WebKit::WebProcessPool::postMessageToInjectedBundle(v5, (const WTF::String *)&v9, v6);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WKContextGetGlobalStatistics(uint64_t a1)
{
  double result;

  result = *(double *)&WebKit::WebProcessPool::statistics(void)::statistics;
  *(_QWORD *)a1 = WebKit::WebProcessPool::statistics(void)::statistics;
  *(_DWORD *)(a1 + 8) = dword_1ECE73818;
  return result;
}

WTF::StringImpl *WKContextAddVisitedLink(void *a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  const WTF::String *v6;
  int v7;
  WTF::StringImpl *v8;

  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  result = v8;
  if (v8)
  {
    if (*((_DWORD *)v8 + 1))
    {
      v5 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 328);
      v7 = WebCore::computeSharedStringHash((WebCore *)&v8, v6);
      WebKit::SharedStringHashStore::scheduleAddition((WebKit::SharedStringHashStore *)(v5 + 64), v7);
      result = v8;
      v8 = 0;
      if (!result)
        return result;
    }
    else
    {
      v8 = 0;
    }
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WKContextClearVisitedLinks(void *a1)
{
  return WebKit::VisitedLinkStore::removeAll(*(WebKit::VisitedLinkStore **)(objc_msgSend(a1, "_apiObject") + 328));
}

uint64_t WKContextSetCacheModel(uint64_t a1, int a2)
{
  char v2;

  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  if (a2 == 2)
    v2 = 2;
  else
    v2 = a2 == 1;
  return WebKit::LegacyGlobalSettings::setCacheModel(&WebKit::LegacyGlobalSettings::singleton(void)::properties, v2);
}

uint64_t WKContextGetCacheModel()
{
  uint64_t result;

  {
    result = WebKit::LegacyGlobalSettings::singleton(void)::properties == 1;
    if (WebKit::LegacyGlobalSettings::singleton(void)::properties != 2)
      return result;
  }
  else
  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    unk_1ECE73790 = 0u;
    unk_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  return 2;
}

uint64_t WKContextGetMaximumNumberOfProcesses()
{
  return 0xFFFFFFFFLL;
}

uint64_t WKContextSetAlwaysUsesComplexTextCodePath(_BYTE *a1, char a2)
{
  char v4;

  if (a1)
    a1 = (_BYTE *)objc_msgSend(a1, "_apiObject");
  a1[400] = a2;
  v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetAlwaysUsesComplexTextCodePath>((uint64_t)a1, &v4, 0);
}

uint64_t WKContextSetDisableFontSubpixelAntialiasingForTesting(_BYTE *a1, char a2)
{
  char v4;

  if (a1)
    a1 = (_BYTE *)objc_msgSend(a1, "_apiObject");
  a1[401] = a2;
  v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDisableFontSubpixelAntialiasingForTesting>((uint64_t)a1, &v4, 0);
}

WTF::StringImpl *WKContextRegisterURLSchemeAsEmptyDocument(void *a1, void *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t *v8[3];

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 344), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsEmptyDocument>(v3, v8, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsSecure(void *a1, void *a2)
{
  WebKit::WebProcessPool *v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  if (a1)
  {
    v3 = (WebKit::WebProcessPool *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::registerURLSchemeAsSecure(v3, &v7, v4);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsBypassingContentSecurityPolicy(void *a1, void *a2)
{
  WebKit::WebProcessPool *v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  if (a1)
  {
    v3 = (WebKit::WebProcessPool *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::registerURLSchemeAsBypassingContentSecurityPolicy(v3, &v7, v4);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsCachePartitioned(void *a1, void *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t *v8[3];

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 384), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCachePartitioned>(v3, v8, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKContextRegisterURLSchemeAsCanDisplayOnlyIfCanRequest(void *a1, void *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t *v8[3];

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 392), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::RegisterURLSchemeAsCanDisplayOnlyIfCanRequest>(v3, v8, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKContextSetDomainRelaxationForbiddenForURLScheme(void *a1, void *a2)
{
  uint64_t v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  uint64_t *v8[3];

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(v3 + 352), &v7, v4, (uint64_t)v8);
  v8[0] = (uint64_t *)&v7;
  WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetDomainRelaxationForbiddenForURLScheme>(v3, v8, 0);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKContextSetPrewarmsProcessesAutomatically(void *a1, __int16 a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_WORD *)(*(_QWORD *)(result + 48) + 89) = a2 | 0x100;
  return result;
}

uint64_t WKContextSetUsesSingleWebProcess(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 48) + 96) = a2;
  return result;
}

uint64_t WKContextGetUsesSingleWebProcess(void *a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 96);
}

const char *WKContextGetGeolocationManager(uint64_t *a1)
{
  const char *result;
  _QWORD v2[2];

  if (a1)
    a1 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  v2[0] = "WebGeolocationManagerProxy";
  v2[1] = 27;
  result = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(a1 + 57, (WTF::ASCIILiteralHash *)v2);
  if (result)
    return (const char *)*((_QWORD *)result - 1);
  return result;
}

uint64_t WKContextGetIconDatabase()
{
  return 0;
}

const char *WKContextGetNotificationManager(uint64_t *a1)
{
  const char *result;
  _QWORD v2[2];

  if (a1)
    a1 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  v2[0] = "WebNotificationManagerProxy";
  v2[1] = 28;
  result = WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement,WTF::RawPtrTraits<WebKit::WebContextSupplement>,WTF::DefaultRefDerefTraits<WebKit::WebContextSupplement>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(a1 + 57, (WTF::ASCIILiteralHash *)v2);
  if (result)
    return (const char *)*((_QWORD *)result - 1);
  return result;
}

void WKContextStartMemorySampler(void *a1, void *a2)
{
  WebKit::WebProcessPool *v3;

  if (a1)
    v3 = (WebKit::WebProcessPool *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  WebKit::WebProcessPool::startMemorySampler(v3, *(double *)(objc_msgSend(a2, "_apiObject") + 16));
}

uint64_t WKContextStopMemorySampler(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebProcessPool::stopMemorySampler((WebKit::WebProcessPool *)a1);
}

void WKContextDisableProcessTermination(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebProcessPool::disableProcessTermination((WebKit::WebProcessPool *)a1);
}

uint64_t WKContextEnableProcessTermination(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebProcessPool::enableProcessTermination((WebKit::WebProcessPool *)a1);
}

uint64_t WKContextSetHTTPPipeliningEnabled(void *a1, WebCore::ResourceRequest *this)
{
  if (a1)
    objc_msgSend(a1, "_apiObject");
  return WebCore::ResourceRequest::setHTTPPipeliningEnabled(this);
}

unsigned int *WKContextWarmInitialProcess(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebProcessPool::prewarmProcess((unsigned int *)a1);
}

uint64_t WKContextJavaScriptConfigurationFileEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 506);
}

uint64_t WKContextSetJavaScriptConfigurationFileEnabled(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 506) = a2;
  return result;
}

uint64_t WKContextGarbageCollectJavaScriptObjects(void *a1)
{
  char v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v2 = 0;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::GarbageCollectJavaScriptObjects>((uint64_t)a1, &v2, 0);
}

uint64_t WKContextSetJavaScriptGarbageCollectorTimerEnabled(void *a1, char a2)
{
  char v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetJavaScriptGarbageCollectorTimerEnabled>((uint64_t)a1, &v4, 0);
}

uint64_t WKContextCopyPlugInAutoStartOriginHashes()
{
  return 0;
}

void *WKContextSetInvalidMessageFunction(void *result)
{
  WebKit::s_invalidMessageCallback = result;
  return result;
}

uint64_t WKContextSetMemoryCacheDisabled(_BYTE *a1, char a2)
{
  char v4;

  if (a1)
    a1 = (_BYTE *)objc_msgSend(a1, "_apiObject");
  a1[505] = a2;
  v4 = a2;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::SetMemoryCacheDisabled>((uint64_t)a1, &v4, 0);
}

WTF::StringImpl *WKContextSetFontAllowList(void *a1, void *a2)
{
  WebKit::WebProcessPool *v3;
  API::Array *v4;

  if (!a1)
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    return WebKit::WebProcessPool::setFontAllowList(v3, v4);
  }
  v3 = (WebKit::WebProcessPool *)objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = (API::Array *)objc_msgSend(a2, "_apiObject");
  return WebKit::WebProcessPool::setFontAllowList(v3, v4);
}

void WKContextTerminateGPUProcess()
{
  WebKit::GPUProcessProxy *v0;

  {
    if (WebKit::singleton(void)::singleton)
    {
      v0 = *(WebKit::GPUProcessProxy **)(WebKit::singleton(void)::singleton + 8);
      if (v0)
        WebKit::GPUProcessProxy::processIsReadyToExit(v0);
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
}

void WKContextTerminateServiceWorkers(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebProcessPool::terminateServiceWorkers((CFTypeRef *)a1);
}

uint64_t WKContextClearCurrentModifierStateForTesting(void *a1)
{
  char v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v2 = 0;
  return WebKit::WebProcessPool::sendToAllProcesses<Messages::WebProcess::ClearCurrentModifierStateForTesting>((uint64_t)a1, &v2, 0);
}

uint64_t WKContextSetUseSeparateServiceWorkerProcess(int a1, WebKit::WebProcessPool *this)
{
  return WebKit::WebProcessPool::setUseSeparateServiceWorkerProcess((uint64_t)this);
}

uint64_t WKContextCopyLocalhostAliases()
{
  void *v0;
  uint64_t v1;
  uint64_t v3[2];
  uint64_t v4;

  {
    WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
    *(_OWORD *)&qword_1ECE73790 = 0u;
    *(_OWORD *)&qword_1ECE737A0 = 0u;
    qword_1ECE737B0 = 0;
  }
  v3[0] = 0;
  v3[1] = 0;
  WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>(WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits> const&,void>::map(v3, (uint64_t **)&qword_1ECE737B0);
  API::Array::createStringArray((uint64_t)v3, &v4);
  if (v4)
    v1 = *(_QWORD *)(v4 + 8);
  else
    v1 = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v0);
  return v1;
}

uint64_t WKContextSetLocalhostAliases(uint64_t a1, void *a2)
{
  unsigned int *v2;
  void *v3;
  const WTF::StringImpl *v4;
  WTF::StringImpl **v5;
  uint64_t v6;
  WTF::StringImpl **v8;
  unsigned int v9;
  _BYTE v10[24];

  if (a2)
    v2 = (unsigned int *)objc_msgSend(a2, "_apiObject");
  else
    v2 = 0;
  API::Array::toStringVector(v2, (uint64_t)&v8);
  if (v9)
  {
    v5 = v8;
    v6 = 8 * v9;
    do
    {
      {
        WebKit::LegacyGlobalSettings::singleton(void)::properties = 2;
        *(_OWORD *)&qword_1ECE73790 = 0u;
        *(_OWORD *)&qword_1ECE737A0 = 0u;
        qword_1ECE737B0 = 0;
      }
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(&qword_1ECE737B0, v5++, v4, (uint64_t)v10);
      v6 -= 8;
    }
    while (v6);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v3);
}

WebCore::GamepadProvider *WKContextClearMockGamepadsForTesting(WebCore::GamepadProvider *a1)
{
  uint64_t v1;
  WebCore::GamepadProvider *result;
  uint64_t v3;

  v1 = WebCore::GamepadProvider::singleton(a1);
  result = (WebCore::GamepadProvider *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  if ((_DWORD)result)
  {
    v3 = WebCore::GamepadProvider::singleton(result);
    return (WebCore::GamepadProvider *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  }
  return result;
}

API::ProcessPoolConfiguration *WKContextConfigurationCreate()
{
  API::ProcessPoolConfiguration *v0;
  API::ProcessPoolConfiguration *result;

  v0 = (API::ProcessPoolConfiguration *)API::Object::newObject(0xA8uLL, 90);
  result = API::ProcessPoolConfiguration::ProcessPoolConfiguration(v0);
  if (result)
    return (API::ProcessPoolConfiguration *)*((_QWORD *)result + 1);
  return result;
}

uint64_t WKContextConfigurationCopyDiskCacheDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyIndexedDBDatabaseDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyInjectedBundlePath(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKContextConfigurationSetInjectedBundlePath(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WTF::String::operator=((WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKContextConfigurationCopyCustomClassesForParameterCoder()
{
  void *v0;
  uint64_t v1;
  _QWORD v3[2];
  uint64_t v4;

  v3[0] = 0;
  v3[1] = 0;
  API::Array::createStringArray((uint64_t)v3, &v4);
  if (v4)
    v1 = *(_QWORD *)(v4 + 8);
  else
    v1 = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v0);
  return v1;
}

uint64_t WKContextConfigurationCopyLocalStorageDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyWebSQLDatabaseDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyMediaKeysStorageDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationCopyResourceLoadStatisticsDirectory()
{
  return 0;
}

uint64_t WKContextConfigurationFullySynchronousModeIsAllowedForTesting(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 72);
}

uint64_t WKContextConfigurationSetFullySynchronousModeIsAllowedForTesting(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 72) = a2;
  return result;
}

uint64_t WKContextConfigurationIgnoreSynchronousMessagingTimeoutsForTesting(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 73);
}

uint64_t WKContextConfigurationSetIgnoreSynchronousMessagingTimeoutsForTesting(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 73) = a2;
  return result;
}

uint64_t WKContextConfigurationCopyOverrideLanguages()
{
  WebKit *v1;

  API::Array::create(&v1);
  if (v1)
    return *((_QWORD *)v1 + 1);
  else
    return 0;
}

uint64_t WKContextConfigurationSetOverrideLanguages(uint64_t a1, void *a2)
{
  unsigned int *v2;
  void *v3;
  _DWORD v5[4];

  if (a2)
    v2 = (unsigned int *)objc_msgSend(a2, "_apiObject");
  else
    v2 = 0;
  API::Array::toStringVector(v2, (uint64_t)v5);
  WebKit::setOverrideLanguages(v5);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v5, v3);
}

uint64_t WKContextConfigurationProcessSwapsOnNavigation(_BYTE *a1)
{
  uint64_t v1;

  if (a1)
    a1 = (_BYTE *)objc_msgSend(a1, "_apiObject");
  v1 = 84;
  if (!a1[85])
    v1 = 86;
  return a1[v1];
}

uint64_t WKContextConfigurationSetProcessSwapsOnNavigation(void *a1, __int16 a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_WORD *)(result + 84) = a2 | 0x100;
  return result;
}

uint64_t WKContextConfigurationPrewarmsProcessesAutomatically(_BYTE *a1)
{
  uint64_t v1;

  if (a1)
    a1 = (_BYTE *)objc_msgSend(a1, "_apiObject");
  v1 = 89;
  if (!a1[90])
    v1 = 93;
  return a1[v1];
}

uint64_t WKContextConfigurationSetPrewarmsProcessesAutomatically(void *a1, __int16 a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_WORD *)(result + 89) = a2 | 0x100;
  return result;
}

uint64_t WKContextConfigurationUsesWebProcessCache(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 91);
}

uint64_t WKContextConfigurationSetUsesWebProcessCache(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 91) = a2;
  return result;
}

uint64_t WKContextConfigurationAlwaysKeepAndReuseSwappedProcesses(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 87);
}

uint64_t WKContextConfigurationSetAlwaysKeepAndReuseSwappedProcesses(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 87) = a2;
  return result;
}

uint64_t WKContextConfigurationDiskCacheSizeOverride()
{
  return 0;
}

uint64_t WKContextConfigurationSetShouldConfigureJSCForTesting(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 94) = a2;
  return result;
}

uint64_t WKContextConfigurationCopyTimeZoneOverride(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKContextConfigurationSetTimeZoneOverride(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WTF::String::operator=((WTF::StringImpl **)(v3 + 136), (WTF::StringImpl *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKCookieManagerGetTypeID()
{
  return 0;
}

uint64_t WKCredentialGetTypeID()
{
  return 7;
}

uint64_t WKCredentialCreate(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  CFTypeRef v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  CFTypeRef cf;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  WTF::String::isolatedCopy();
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  WebCore::CredentialBase::CredentialBase();
  cf = 0;
  v3 = API::Object::newObject(0x30uLL, 7);
  v4 = WebKit::WebCredential::WebCredential(v3, (uint64_t)&v13);
  if (v4)
    v6 = *(_QWORD *)(v4 + 8);
  else
    v6 = 0;
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v5);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v5);
    else
      *(_DWORD *)v12 -= 2;
  }
  return v6;
}

uint64_t WKCredentialCreateWithCertificateInfo()
{
  return 0;
}

uint64_t WKCredentialCopyUser(uint64_t a1)
{
  WebKit *v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebCore::CredentialBase::user((WebCore::CredentialBase *)(a1 + 16));
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKDownloadGetTypeID()
{
  return 56;
}

uint64_t WKDownloadCopyRequest(char *a1)
{
  const WebCore::ResourceRequest *v1;
  uint64_t v2;

  if (a1)
    a1 = (char *)objc_msgSend(a1, "_apiObject");
  v1 = (const WebCore::ResourceRequest *)(a1 + 72);
  v2 = API::Object::newObject(0xD8uLL, 25);
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(_QWORD *)v2 = &off_1E34CC2D0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v2 + 16), v1);
  return *(_QWORD *)(v2 + 8);
}

uint64_t WKDownloadCancel(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DA6B0;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::DownloadProxy::cancel(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WKDownloadGetOriginatingPage(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 288);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 - 8);
  else
    return 0;
}

uint64_t WKDownloadGetWasUserInitiated(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 312);
}

uint64_t WKDownloadSetClient(void *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _DWORD *v8;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  result = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E34DA640;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0)
        goto LABEL_8;
      __break(1u);
    }
    v5 = *a2;
    v6 = a2[1];
    v7 = a2[3];
    *(_OWORD *)(result + 48) = a2[2];
    *(_OWORD *)(result + 64) = v7;
    *(_OWORD *)(result + 16) = v5;
    *(_OWORD *)(result + 32) = v6;
  }
LABEL_8:
  v8 = *(_DWORD **)(v3 + 48);
  *(_QWORD *)(v3 + 48) = result;
  if (v8)
  {
    if (v8[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  return result;
}

void WKContextSetHistoryClient::HistoryClient::didNavigateWithNavigationData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)(a1 + 24))
  {
    v10 = API::Object::newObject(0x1E8uLL, 78);
    API::NavigationData::NavigationData(v10, a4);
    v11 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 24);
    v12 = *(_QWORD *)(a2 + 8);
    v13 = *(_QWORD *)(a3 + 8);
    if (v10)
    {
      v11(v12, v13, *(_QWORD *)(v10 + 8), *(_QWORD *)(a5 + 8), *(_QWORD *)(a1 + 16));
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
    else
    {
      v11(v12, v13, 0, *(_QWORD *)(a5 + 8), *(_QWORD *)(a1 + 16));
    }
  }
}

void WKContextSetHistoryClient::HistoryClient::didPerformClientRedirect(WKContextSetHistoryClient::HistoryClient *this, WebKit::WebProcessPool *a2, WebKit::WebPageProxy *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WebKit::WebFrameProxy *a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit *v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebKit *v21;
  WTF::StringImpl *v22;
  WebKit *v23;

  v6 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 4);
  if (!v6)
    return;
  v10 = *((_QWORD *)a2 + 1);
  v11 = *((_QWORD *)a3 + 1);
  v12 = *a4;
  if (*a4)
  {
    *(_DWORD *)v12 += 2;
    v22 = v12;
    API::URL::create((API::URL *)&v22, &v23);
    v14 = v22;
    v15 = v23;
    v22 = 0;
    v23 = 0;
    if (!v14)
      goto LABEL_6;
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
LABEL_6:
      if (!v15)
        goto LABEL_22;
LABEL_9:
      v16 = 0;
      v17 = *((_QWORD *)v15 + 1);
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v14, v13);
    if (v15)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
LABEL_22:
  v17 = 0;
  v16 = 1;
LABEL_10:
  v18 = *a5;
  if (*a5)
  {
    *(_DWORD *)v18 += 2;
    v22 = v18;
    API::URL::create((API::URL *)&v22, &v23);
    v20 = v22;
    v21 = v23;
    v22 = 0;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v19);
        if (v21)
        {
LABEL_15:
          v6(v10, v11, v17, *((_QWORD *)v21 + 1), *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
          CFRelease(*((CFTypeRef *)v21 + 1));
          if ((v16 & 1) != 0)
            return;
          goto LABEL_16;
        }
        goto LABEL_19;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v21)
      goto LABEL_15;
  }
LABEL_19:
  v6(v10, v11, v17, 0, *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
  if ((v16 & 1) == 0)
LABEL_16:
    CFRelease(*((CFTypeRef *)v15 + 1));
}

void WKContextSetHistoryClient::HistoryClient::didPerformServerRedirect(WKContextSetHistoryClient::HistoryClient *this, WebKit::WebProcessPool *a2, WebKit::WebPageProxy *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WebKit::WebFrameProxy *a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit *v15;
  char v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebKit *v21;
  WTF::StringImpl *v22;
  WebKit *v23;

  v6 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 5);
  if (!v6)
    return;
  v10 = *((_QWORD *)a2 + 1);
  v11 = *((_QWORD *)a3 + 1);
  v12 = *a4;
  if (*a4)
  {
    *(_DWORD *)v12 += 2;
    v22 = v12;
    API::URL::create((API::URL *)&v22, &v23);
    v14 = v22;
    v15 = v23;
    v22 = 0;
    v23 = 0;
    if (!v14)
      goto LABEL_6;
    if (*(_DWORD *)v14 != 2)
    {
      *(_DWORD *)v14 -= 2;
LABEL_6:
      if (!v15)
        goto LABEL_22;
LABEL_9:
      v16 = 0;
      v17 = *((_QWORD *)v15 + 1);
      goto LABEL_10;
    }
    WTF::StringImpl::destroy(v14, v13);
    if (v15)
      goto LABEL_9;
  }
  else
  {
    v15 = 0;
  }
LABEL_22:
  v17 = 0;
  v16 = 1;
LABEL_10:
  v18 = *a5;
  if (*a5)
  {
    *(_DWORD *)v18 += 2;
    v22 = v18;
    API::URL::create((API::URL *)&v22, &v23);
    v20 = v22;
    v21 = v23;
    v22 = 0;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v19);
        if (v21)
        {
LABEL_15:
          v6(v10, v11, v17, *((_QWORD *)v21 + 1), *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
          CFRelease(*((CFTypeRef *)v21 + 1));
          if ((v16 & 1) != 0)
            return;
          goto LABEL_16;
        }
        goto LABEL_19;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v21)
      goto LABEL_15;
  }
LABEL_19:
  v6(v10, v11, v17, 0, *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
  if ((v16 & 1) == 0)
LABEL_16:
    CFRelease(*((CFTypeRef *)v15 + 1));
}

void WKContextSetHistoryClient::HistoryClient::didUpdateHistoryTitle(WKContextSetHistoryClient::HistoryClient *this, WebKit::WebProcessPool *a2, WebKit::WebPageProxy *a3, WTF::StringImpl **a4, WTF::StringImpl **a5, WebKit::WebFrameProxy *a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebKit *v20;
  WTF::StringImpl *v21;
  WebKit *v22;

  v6 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 6);
  if (v6)
  {
    v10 = *((_QWORD *)a2 + 1);
    v11 = *((_QWORD *)a3 + 1);
    v12 = *a4;
    if (*a4)
      *(_DWORD *)v12 += 2;
    v21 = v12;
    API::String::create(&v21, &v22);
    v14 = v21;
    v15 = v22;
    v21 = 0;
    v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v13);
        if (v15)
          goto LABEL_8;
        goto LABEL_18;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v15)
    {
LABEL_8:
      v16 = *((_QWORD *)v15 + 1);
      goto LABEL_9;
    }
LABEL_18:
    v16 = 0;
LABEL_9:
    v17 = *a5;
    if (!*a5)
      goto LABEL_20;
    *(_DWORD *)v17 += 2;
    v21 = v17;
    API::URL::create((API::URL *)&v21, &v22);
    v19 = v21;
    v20 = v22;
    v21 = 0;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v18);
        if (v20)
        {
LABEL_14:
          v6(v10, v11, v16, *((_QWORD *)v20 + 1), *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
          CFRelease(*((CFTypeRef *)v20 + 1));
          if (!v15)
            return;
          goto LABEL_15;
        }
LABEL_20:
        v6(v10, v11, v16, 0, *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
        if (!v15)
          return;
LABEL_15:
        CFRelease(*((CFTypeRef *)v15 + 1));
        return;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (v20)
      goto LABEL_14;
    goto LABEL_20;
  }
}

uint64_t WKContextSetHistoryClient::HistoryClient::populateVisitedLinks(uint64_t this, WebProcessPool *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 56);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

BOOL WKContextSetHistoryClient::HistoryClient::addsVisitedLinks(WKContextSetHistoryClient::HistoryClient *this)
{
  return *((_QWORD *)this + 7) != 0;
}

_QWORD *WKContextSetDownloadClient::LegacyDownloadClient::legacyDidStart(_QWORD *result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD, _QWORD);

  v2 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result[4];
  if (v2)
    return (_QWORD *)v2(result[16], *(_QWORD *)(a2 + 8), result[3]);
  return result;
}

_QWORD *WKContextSetDownloadClient::LegacyDownloadClient::didReceiveAuthenticationChallenge(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);

  v3 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))result[5];
  if (v3)
    return (_QWORD *)v3(result[16], *(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), result[3]);
  return result;
}

_QWORD *WKContextSetDownloadClient::LegacyDownloadClient::didReceiveData(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, uint64_t, _QWORD);

  v3 = (uint64_t (*)(_QWORD, _QWORD, uint64_t, _QWORD))result[7];
  if (v3)
    return (_QWORD *)v3(result[16], *(_QWORD *)(a2 + 8), a3, result[3]);
  return result;
}

void WKContextSetDownloadClient::LegacyDownloadClient::decideDestinationWithSuggestedFilename(_QWORD *a1, uint64_t a2, const WebCore::ResourceResponse *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  void (*v9)(uint64_t, uint64_t, CFTypeRef, _QWORD);
  uint64_t v11;
  uint64_t v12;
  CFTypeRef *v13;
  uint64_t (*v14)(uint64_t, uint64_t, _QWORD, unsigned __int8 *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebKit *v20;
  void *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  unsigned __int8 v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WebKit *v31;

  v9 = (void (*)(uint64_t, uint64_t, CFTypeRef, _QWORD))a1[6];
  if (v9)
  {
    v11 = a1[16];
    v12 = *(_QWORD *)(a2 + 8);
    v13 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
    if (API::URLResponse::URLResponse((API::URLResponse *)v13, a3))
    {
      v9(v11, v12, v13[1], a1[3]);
      CFRelease(v13[1]);
    }
    else
    {
      v9(v11, v12, 0, a1[3]);
    }
  }
  v14 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, unsigned __int8 *, _QWORD))a1[9];
  if (!v14)
  {
    v29 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v29);
    v26 = v29;
    v29 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
    return;
  }
  v28 = 0;
  v15 = a1[16];
  v16 = *(_QWORD *)(a2 + 8);
  v17 = *a4;
  if (*a4)
    *(_DWORD *)v17 += 2;
  v30 = v17;
  API::String::create(&v30, &v31);
  v19 = v30;
  v20 = v31;
  v30 = 0;
  v31 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
    {
      WTF::StringImpl::destroy(v19, v18);
      if (v20)
        goto LABEL_11;
LABEL_23:
      v21 = (void *)v14(v15, v16, 0, &v28, a1[3]);
      goto LABEL_12;
    }
    *(_DWORD *)v19 -= 2;
  }
  if (!v20)
    goto LABEL_23;
LABEL_11:
  v21 = (void *)v14(v15, v16, *((_QWORD *)v20 + 1), &v28, a1[3]);
  CFRelease(*((CFTypeRef *)v20 + 1));
LABEL_12:
  v22 = v28;
  if (v21)
  {
    objc_msgSend(v21, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v27 = 0;
  }
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, v22 != 0, &v27);
  v24 = v27;
  v27 = 0;
  if (!v24)
  {
LABEL_17:
    if (!v21)
      return;
LABEL_25:
    CFRelease(*(CFTypeRef *)(objc_msgSend(v21, "_apiObject") + 8));
    return;
  }
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    goto LABEL_17;
  }
  WTF::StringImpl::destroy(v24, v23);
  if (v21)
    goto LABEL_25;
}

void WKContextSetDownloadClient::LegacyDownloadClient::didCreateDestination(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WebKit *v10;
  WTF::StringImpl *v11;
  WebKit *v12;

  v3 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))a1[10];
  if (v3)
  {
    v5 = a1[16];
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *a3;
    if (*a3)
      *(_DWORD *)v7 += 2;
    v11 = v7;
    API::String::create(&v11, &v12);
    v9 = v11;
    v10 = v12;
    v11 = 0;
    v12 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
      {
        WTF::StringImpl::destroy(v9, v8);
        if (v10)
          goto LABEL_8;
        goto LABEL_11;
      }
      *(_DWORD *)v9 -= 2;
    }
    if (v10)
    {
LABEL_8:
      v3(v5, v6, *((_QWORD *)v10 + 1), a1[3]);
      CFRelease(*((CFTypeRef *)v10 + 1));
      return;
    }
LABEL_11:
    v3(v5, v6, 0, a1[3]);
  }
}

_QWORD *WKContextSetDownloadClient::LegacyDownloadClient::didFinish(_QWORD *result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD, _QWORD);

  v2 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result[11];
  if (v2)
    return (_QWORD *)v2(result[16], *(_QWORD *)(a2 + 8), result[3]);
  return result;
}

void WKContextSetDownloadClient::LegacyDownloadClient::didFail(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, _QWORD, _QWORD);

  v4 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))a1[12];
  if (v4)
  {
    v9 = v4;
    v6 = a1[16];
    v7 = *(_QWORD *)(a2 + 8);
    v8 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v8, a3))
    {
      v9(v6, v7, *(_QWORD *)(v8 + 8), a1[3]);
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
    else
    {
      v9(v6, v7, 0, a1[3]);
    }
  }
}

_QWORD *WKContextSetDownloadClient::LegacyDownloadClient::legacyDidCancel(_QWORD *result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD, _QWORD);

  v2 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result[13];
  if (v2)
    return (_QWORD *)v2(result[16], *(_QWORD *)(a2 + 8), result[3]);
  return result;
}

_QWORD *WKContextSetDownloadClient::LegacyDownloadClient::processDidCrash(_QWORD *result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD, _QWORD);

  v2 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result[14];
  if (v2)
    return (_QWORD *)v2(result[16], *(_QWORD *)(a2 + 8), result[3]);
  return result;
}

uint64_t WKContextSetDownloadClient::LegacyDownloadClient::willSendRequest(_QWORD *a1, uint64_t a2, WebCore::ResourceRequestBase *this, uint64_t a4, uint64_t *a5)
{
  void (*v7)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  WebKit *v18;

  v7 = (void (*)(uint64_t, uint64_t, _QWORD, _QWORD))a1[15];
  if (v7)
  {
    v9 = a1[16];
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url(this);
    if (!v11)
      goto LABEL_10;
    *(_DWORD *)v11 += 2;
    v17 = v11;
    API::URL::create((API::URL *)&v17, &v18);
    v13 = v17;
    v14 = v18;
    v17 = 0;
    v18 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v12);
        if (v14)
          goto LABEL_7;
        goto LABEL_10;
      }
      *(_DWORD *)v13 -= 2;
    }
    if (v14)
    {
LABEL_7:
      v7(v9, v10, *((_QWORD *)v14 + 1), a1[3]);
      CFRelease(*((CFTypeRef *)v14 + 1));
      goto LABEL_8;
    }
LABEL_10:
    v7(v9, v10, 0, a1[3]);
  }
LABEL_8:
  v15 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequestBase *))(*(_QWORD *)v15 + 16))(v15, this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
}

WTF::StringImpl *WKDownloadSetClient::DownloadClient::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);
  WTF::StringImpl *result;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  CFTypeRef v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  CFTypeRef cf;

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 40);
  if (v3)
    return (WTF::StringImpl *)v3(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a3 + 464);
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v10);
  cf = 0;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 16))(v7, 3, &v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = cf;
    cf = 0;
    if (v8)
      CFRelease(v8);
  }
  v9 = v11;
  v11 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v6);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKDownloadSetClient::DownloadClient::didReceiveData(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t (*v5)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD);

  v5 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(result + 56);
  if (v5)
    return v5(*(_QWORD *)(a2 + 8), a3, a4, a5, *(_QWORD *)(result + 24));
  return result;
}

void WKDownloadSetClient::DownloadClient::decideDestinationWithSuggestedFilename(uint64_t a1, uint64_t a2, const WebCore::ResourceResponse *a3, WTF::StringImpl **a4, uint64_t *a5)
{
  uint64_t (*v6)(uint64_t, CFTypeRef, uint64_t, _QWORD);
  uint64_t v10;
  CFTypeRef *v11;
  CFTypeRef v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WebKit *v28;

  v6 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, _QWORD))(a1 + 48);
  if (!v6)
  {
    v26 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v26);
    v23 = v26;
    v26 = 0;
    if (!v23)
      return;
LABEL_23:
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
    return;
  }
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
  if (API::URLResponse::URLResponse((API::URLResponse *)v11, a3))
    v12 = v11[1];
  else
    v12 = 0;
  v13 = *a4;
  if (*a4)
    *(_DWORD *)v13 += 2;
  v27 = v13;
  API::String::create(&v27, &v28);
  v15 = v27;
  v16 = v28;
  v27 = 0;
  v28 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
    {
      WTF::StringImpl::destroy(v15, v14);
      if (v16)
        goto LABEL_10;
      goto LABEL_26;
    }
    *(_DWORD *)v15 -= 2;
  }
  if (v16)
  {
LABEL_10:
    v17 = *((_QWORD *)v16 + 1);
    goto LABEL_11;
  }
LABEL_26:
  v17 = 0;
LABEL_11:
  v18 = (void *)v6(v10, v12, v17, *(_QWORD *)(a1 + 24));
  if (v18)
  {
    v19 = objc_msgSend(v18, "_apiObject");
    if (!v16)
      goto LABEL_14;
    goto LABEL_13;
  }
  v19 = 0;
  if (v16)
LABEL_13:
    CFRelease(*((CFTypeRef *)v16 + 1));
LABEL_14:
  if (v11)
    CFRelease(v11[1]);
  if (!v19)
  {
    v25 = 0;
    WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v25);
    v23 = v25;
    v25 = 0;
    if (!v23)
      return;
    goto LABEL_23;
  }
  WTF::String::isolatedCopy();
  WTF::CompletionHandler<void ()(WebKit::AllowOverwrite,WTF::String)>::operator()(a5, 0, &v24);
  v21 = v24;
  v24 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  CFRelease(*(CFTypeRef *)(v19 + 8));
}

uint64_t WKDownloadSetClient::DownloadClient::didFinish(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(result + 64);
  if (v2)
    return v2(*(_QWORD *)(a2 + 8), *(_QWORD *)(result + 24));
  return result;
}

void WKDownloadSetClient::DownloadClient::didFail(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 72);
  if (v4)
  {
    v8 = *(_QWORD *)(a2 + 8);
    v9 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v9, a3))
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (a4)
      {
LABEL_4:
        v11 = *(_QWORD *)(a4 + 8);
        goto LABEL_5;
      }
    }
    else
    {
      v10 = 0;
      if (a4)
        goto LABEL_4;
    }
    v11 = 0;
LABEL_5:
    v4(v8, v10, v11, *(_QWORD *)(a1 + 24));
    if (v9)
      CFRelease(*(CFTypeRef *)(v9 + 8));
  }
}

WTF::StringImpl *WKDownloadSetClient::DownloadClient::processDidCrash(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  __int128 v17;
  __int128 v18;
  WTF::StringImpl *v19;
  int v20;
  __int16 v21;
  CFTypeRef cf;
  char v23;

  v4 = *(_QWORD *)(MEMORY[0x1E0DD3A00] + 8);
  if (v4)
  {
    if (v4 == 1)
    {
      v5 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5 = v15;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 72));
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v15;
  if (v5)
    *(_DWORD *)v5 += 2;
  v15 = v5;
  v8 = *(WTF::StringImpl **)v6;
  if (*(_QWORD *)v6)
    *(_DWORD *)v8 += 2;
  v16 = v8;
  v9 = *(_OWORD *)(v6 + 24);
  v17 = *(_OWORD *)(v6 + 8);
  v18 = v9;
  if (v7)
    *(_DWORD *)v7 += 2;
  v19 = v7;
  v20 = 0;
  v21 = 1;
  cf = 0;
  v23 = 1;
  (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)a1 + 64))(a1, a2, &v15, 0);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v19;
  v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v16;
  v16 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v15;
  v15 = 0;
  if (!result)
  {
LABEL_23:
    if (!v7)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_23;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  if (!v7)
    goto LABEL_28;
LABEL_26:
  if (*(_DWORD *)v7 == 2)
  {
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v10);
    if (!v5)
      return result;
    goto LABEL_31;
  }
  *(_DWORD *)v7 -= 2;
LABEL_28:
  if (!v5)
    return result;
LABEL_31:
  if (*(_DWORD *)v5 == 2)
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v10);
  *(_DWORD *)v5 -= 2;
  return result;
}

void WKDownloadSetClient::DownloadClient::willSendRequest(uint64_t a1, uint64_t a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4, uint64_t *a5)
{
  uint64_t (*v7)(uint64_t, CFTypeRef, CFTypeRef, _QWORD);
  uint64_t v10;
  CFTypeRef *v11;
  CFTypeRef v12;
  CFTypeRef *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  _BYTE v18[192];
  CFTypeRef cf;

  v7 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef, _QWORD))(a1 + 32);
  if (!v7)
    goto LABEL_7;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
  if (API::URLResponse::URLResponse((API::URLResponse *)v11, a4))
    v12 = v11[1];
  else
    v12 = 0;
  v13 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
  *v13 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v13);
  *v13 = &off_1E34CC2D0;
  WebCore::ResourceRequest::ResourceRequest(v13 + 2, a3);
  v14 = v7(v10, v12, v13[1], *(_QWORD *)(a1 + 24));
  CFRelease(v13[1]);
  if (v11)
    CFRelease(v11[1]);
  if ((v14 & 1) == 0)
  {
    WebCore::ResourceRequest::ResourceRequest((WebCore::ResourceRequest *)v18);
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v16 + 16))(v16, v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
  }
  else
  {
LABEL_7:
    v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, const WebCore::ResourceRequest *))(*(_QWORD *)v15 + 16))(v15, a3);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

uint64_t WTF::Detail::CallableWrapper<WKDownloadCancel::$_0,void,API::Data *>::call(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(result + 16);
  if (v2)
  {
    if (a2)
      v3 = *(_QWORD *)(a2 + 8);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(result + 8));
  }
  return result;
}

uint64_t WKFeatureGetTypeID()
{
  return 57;
}

uint64_t WKFeatureCopyName(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 16);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKFeatureCopyKey(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 24);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKFeatureCopyDetails(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 32);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKFeatureDefaultValue(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 42);
}

uint64_t WKFeatureIsHidden(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 43);
}

uint64_t WKFormSubmissionListenerGetTypeID()
{
  return 58;
}

uint64_t WKFormSubmissionListenerContinue(void *a1)
{
  uint64_t result;
  uint64_t v2;

  result = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

uint64_t WKFrameGetTypeID()
{
  return 59;
}

BOOL WKFrameIsMainFrame(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  v1 = a1[3];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      if (*(_QWORD **)(v2 + 264) == a1)
        return 1;
      v3 = *(_QWORD *)(v2 + 1104);
      if (v3)
        return *(_QWORD *)(v3 + 72) == (_QWORD)a1;
    }
  }
  return 0;
}

uint64_t WKFrameGetFrameLoadState(void *a1)
{
  unsigned int v1;

  v1 = *(_DWORD *)(objc_msgSend(a1, "_apiObject") + 40);
  if (v1 >= 2)
    return 2;
  else
    return v1;
}

uint64_t WKFrameCopyProvisionalURL(_QWORD *a1)
{
  API::URL *v1;
  uint64_t v2;
  WebKit *v4;

  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  v2 = a1[11];
  v1 = (API::URL *)(a1 + 11);
  if (v2 && (API::URL::create(v1, &v4), v4))
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKFrameCopyURL(_QWORD *a1)
{
  API::URL *v1;
  uint64_t v2;
  WebKit *v4;

  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  v2 = a1[6];
  v1 = (API::URL *)(a1 + 6);
  if (v2 && (API::URL::create(v1, &v4), v4))
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKFrameCopyUnreachableURL(_QWORD *a1)
{
  API::URL *v1;
  uint64_t v2;
  WebKit *v4;

  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  v2 = a1[16];
  v1 = (API::URL *)(a1 + 16);
  if (v2 && (API::URL::create(v1, &v4), v4))
    return *((_QWORD *)v4 + 1);
  else
    return 0;
}

uint64_t WKFrameCopyMIMEType(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKFrameCopyTitle(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKFrameGetPage(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 - 8);
  else
    return 0;
}

uint64_t WKFrameGetCertificateInfo()
{
  return 0;
}

uint64_t WKFrameCanProvideSource(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrameProxy::isDisplayingMarkupDocument((WebKit::WebFrameProxy *)a1);
}

uint64_t WKFrameCanShowMIMEType()
{
  return 0;
}

uint64_t WKFrameIsDisplayingStandaloneImageDocument(uint64_t a1, const WTF::String *a2)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::Image::supportsType((WebCore::Image *)(a1 + 224), a2);
}

uint64_t WKFrameIsDisplayingMarkupDocument(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFrameProxy::isDisplayingMarkupDocument((WebKit::WebFrameProxy *)a1);
}

uint64_t WKFrameIsFrameSet()
{
  return 0;
}

uint64_t WKFrameCreateFrameHandle(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(v1 + 272);
  v3 = *(_QWORD *)(v1 + 280);
  v4 = API::Object::newObject(0x28uLL, 11);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34AD1B8;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 32) = 0;
  return *(_QWORD *)(v4 + 8);
}

uint64_t WKFrameCreateFrameInfo()
{
  return 0;
}

uint64_t WKFrameGetMainResourceData(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DA6E8;
  v6[1] = a3;
  v6[2] = a2;
  v8 = v6;
  WebKit::WebFrameProxy::getMainResourceData(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKFrameGetResourceData(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v6 = a2;
  if (a1)
  {
    v7 = objc_msgSend(a1, "_apiObject");
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  if (a2)
LABEL_3:
    v6 = (void *)objc_msgSend(v6, "_apiObject");
LABEL_4:
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DA710;
  v8[1] = a4;
  v8[2] = a3;
  v10 = v8;
  WebKit::WebFrameProxy::getResourceData(v7, (uint64_t)v6, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKFrameGetWebArchive(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DA738;
  v6[1] = a3;
  v6[2] = a2;
  v8 = v6;
  WebKit::WebFrameProxy::getWebArchive(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKFrameHandleGetTypeID()
{
  return 11;
}

uint64_t WKFrameHandleGetFrameID(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKFrameInfoGetTypeID()
{
  return 60;
}

uint64_t WKFrameInfoCreateFrameHandleRef(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(v1 + 264);
  v3 = *(_QWORD *)(v1 + 272);
  v4 = API::Object::newObject(0x28uLL, 11);
  *(_QWORD *)v4 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v4);
  *(_QWORD *)v4 = &off_1E34AD1B8;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v3;
  *(_BYTE *)(v4 + 32) = 0;
  return *(_QWORD *)(v4 + 8);
}

uint64_t WKFrameInfoCopySecurityOrigin(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[24];
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4[0] = 0;
  v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v4, (uint64_t)a1 + 224);
  API::SecurityOrigin::create(&v3);
  if (v3)
    v1 = *(_QWORD *)(v3 + 8);
  else
    v1 = 0;
  if (v5 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E34DA6C8[v5])(&v3, v4);
  return v1;
}

uint64_t WKFrameInfoGetIsMainFrame(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKFramePolicyListenerGetTypeID()
{
  return 61;
}

void WKFramePolicyListenerUse(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFramePolicyListenerProxy::use((uint64_t)a1, 0, 0);
}

void WKFramePolicyListenerUseInNewProcess(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebFramePolicyListenerProxy::use((uint64_t)a1, 0, 1);
}

void WKFramePolicyListenerUseWithPolicies(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!a1)
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_4;
  }
  v3 = objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = objc_msgSend(a2, "_apiObject");
LABEL_4:
  WebKit::WebFramePolicyListenerProxy::use(v3, v4, 0);
}

void WKFramePolicyListenerUseInNewProcessWithPolicies(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (!a1)
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_4;
  }
  v3 = objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = objc_msgSend(a2, "_apiObject");
LABEL_4:
  WebKit::WebFramePolicyListenerProxy::use(v3, v4, 1);
}

WTF *WKFramePolicyListenerDownload(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFramePolicyListenerProxy::download((WTF *)a1);
}

WTF *WKFramePolicyListenerIgnore(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebFramePolicyListenerProxy::ignore((WTF *)a1, 0);
}

uint64_t WKGeolocationManagerGetTypeID()
{
  return 64;
}

uint64_t WKGeolocationManagerSetProvider(void *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  result = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)result = off_1E34D3AC8;
  if (!a2)
    goto LABEL_10;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    v6 = *a2;
    v7 = a2[1];
    *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 4);
  }
  else
  {
    if (v5 > 0)
      goto LABEL_10;
    if (v5)
    {
      __break(1u);
      return result;
    }
    v6 = *a2;
    v7 = a2[1];
  }
  *(_OWORD *)(result + 8) = v6;
  *(_OWORD *)(result + 24) = v7;
LABEL_10:
  v8 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = result;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t *WKGeolocationManagerProviderDidChangePosition(void *a1, void *a2, const WTF::StringImpl *a3)
{
  WebKit::WebGeolocationManagerProxy *v4;
  WebKit::WebGeolocationPosition *v5;

  if (!a1)
  {
    v4 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v5 = 0;
    return WebKit::WebGeolocationManagerProxy::providerDidChangePosition(v4, v5, a3);
  }
  v4 = (WebKit::WebGeolocationManagerProxy *)objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v5 = (WebKit::WebGeolocationPosition *)objc_msgSend(a2, "_apiObject");
  return WebKit::WebGeolocationManagerProxy::providerDidChangePosition(v4, v5, a3);
}

WTF::StringImpl *WKGeolocationManagerProviderDidFailToDeterminePosition(void *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v5 = 0;
  WebKit::WebGeolocationManagerProxy::providerDidFailToDeterminePosition((WebKit::WebGeolocationManagerProxy *)a1, (const WTF::String *)&v5, a3);
  result = v5;
  v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKGeolocationManagerProviderDidFailToDeterminePositionWithErrorMessage(void *a1, void *a2, const WTF::StringImpl *a3)
{
  WebKit::WebGeolocationManagerProxy *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  if (a1)
  {
    v4 = (WebKit::WebGeolocationManagerProxy *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v4 = 0;
    if (a2)
      goto LABEL_3;
  }
  v7 = 0;
LABEL_4:
  WebKit::WebGeolocationManagerProxy::providerDidFailToDeterminePosition(v4, (const WTF::String *)&v7, a3);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKGeolocationPermissionRequestGetTypeID()
{
  return 65;
}

uint64_t WKGeolocationPermissionRequestAllow(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), 1);
}

uint64_t WKGeolocationPermissionRequestDeny(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), 0);
}

uint64_t WTF::Detail::CallableWrapper<WKFrameGetMainResourceData::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = *(_QWORD *)(a2 + 8);
  else
    v2 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16))(v2, 0, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKFrameGetResourceData::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = *(_QWORD *)(a2 + 8);
  else
    v2 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16))(v2, 0, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKFrameGetWebArchive::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = *(_QWORD *)(a2 + 8);
  else
    v2 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16))(v2, 0, *(_QWORD *)(a1 + 8));
}

uint64_t WKGeolocationPositionGetTypeID()
{
  return 68;
}

uint64_t WKGeolocationPositionCreate(double a1, double a2, double a3, double a4)
{
  uint64_t v8;

  v8 = API::Object::newObject(0x80uLL, 68);
  *(_QWORD *)v8 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v8);
  *(_QWORD *)v8 = &off_1E34CB3F8;
  *(double *)(v8 + 16) = a1;
  *(double *)(v8 + 24) = a2;
  *(double *)(v8 + 32) = a3;
  *(double *)(v8 + 40) = a4;
  *(_QWORD *)(v8 + 48) = 0;
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_BYTE *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = 0;
  *(_BYTE *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_BYTE *)(v8 + 120) = 0;
  return *(_QWORD *)(v8 + 8);
}

uint64_t WKGeolocationPositionCreate_c(int a1, int a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v30;

  v17 = a5;
  v18 = a4;
  v19 = a3;
  v20 = a2;
  v21 = a1;
  if (!a1)
    a10 = 0.0;
  if (!a2)
    a11 = 0.0;
  if (!a3)
    a12 = 0.0;
  if (!a4)
    a13 = 0.0;
  if (!a5)
    a14 = 0.0;
  v30 = API::Object::newObject(0x80uLL, 68);
  *(_QWORD *)v30 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v30);
  *(_QWORD *)v30 = &off_1E34CB3F8;
  *(double *)(v30 + 16) = a6;
  *(double *)(v30 + 24) = a7;
  *(double *)(v30 + 32) = a8;
  *(double *)(v30 + 40) = a9;
  *(double *)(v30 + 48) = a10;
  *(_BYTE *)(v30 + 56) = v21;
  *(double *)(v30 + 64) = a11;
  *(_BYTE *)(v30 + 72) = v20;
  *(double *)(v30 + 80) = a12;
  *(_BYTE *)(v30 + 88) = v19;
  *(double *)(v30 + 96) = a13;
  *(_BYTE *)(v30 + 104) = v18;
  *(double *)(v30 + 112) = a14;
  *(_BYTE *)(v30 + 120) = v17;
  return *(_QWORD *)(v30 + 8);
}

uint64_t WKGeolocationPositionCreate_b(int a1, int a2, int a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  return WKGeolocationPositionCreate_c(a1, a2, a3, a4, 0, a5, a6, a7, a8, a9, a10, a11, a12, 0.0);
}

uint64_t WKHTTPCookieStoreGetTypeID()
{
  return 66;
}

uint64_t WKHTTPCookieStoreDeleteAllCookies(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DA760;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  API::HTTPCookieStore::deleteAllCookies(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKHTTPCookieStoreSetHTTPCookieAcceptPolicy(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  if (a2 >= 4)
    LOBYTE(a2) = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DA788;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  API::HTTPCookieStore::setHTTPCookieAcceptPolicy(v7, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKHitTestResultGetTypeID()
{
  return 67;
}

uint64_t WKHitTestResultCopyAbsoluteImageURL(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 16);
  if (!v1)
    return 0;
  *(_DWORD *)v1 += 2;
  v6 = v1;
  API::URL::create((API::URL *)&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKHitTestResultCopyAbsolutePDFURL(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 24);
  if (!v1)
    return 0;
  *(_DWORD *)v1 += 2;
  v6 = v1;
  API::URL::create((API::URL *)&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKHitTestResultCopyAbsoluteLinkURL(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 32);
  if (!v1)
    return 0;
  *(_DWORD *)v1 += 2;
  v6 = v1;
  API::URL::create((API::URL *)&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKHitTestResultCopyAbsoluteMediaURL(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 40);
  if (!v1)
    return 0;
  *(_DWORD *)v1 += 2;
  v6 = v1;
  API::URL::create((API::URL *)&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKHitTestResultCopyLinkLabel(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 48);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKHitTestResultCopyLinkTitle(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 56);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKHitTestResultCopyLookupText(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 448);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKHitTestResultIsContentEditable(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 80);
}

double WKHitTestResultGetElementBoundingBox(void *a1)
{
  return (double)*(int *)(objc_msgSend(a1, "_apiObject") + 84);
}

uint64_t WKIconDatabaseGetTypeID()
{
  return 70;
}

uint64_t WKIconDatabaseCopyIconURLForPageURL()
{
  return 0;
}

uint64_t WKIconDatabaseCopyIconDataForPageURL()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetTypeID()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetOriginKey()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetCreationTimeKey()
{
  return 0;
}

uint64_t WKKeyValueStorageManagerGetModificationTimeKey()
{
  return 0;
}

uint64_t WKMediaKeySystemPermissionCallbackGetTypeID()
{
  return 127;
}

uint64_t WKMediaKeySystemPermissionCallbackComplete(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, "_apiObject");
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WKMessageListenerGetTypeID()
{
  return 75;
}

void WKMessageListenerSendReply(void *a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;
  CFTypeRef *v5;

  v2 = a2;
  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
  {
LABEL_3:
    v2 = (CFTypeRef *)-[CFTypeRef _apiObject](v2, "_apiObject");
    CFRetain(v2[1]);
  }
LABEL_4:
  v5 = v2;
  WTF::CompletionHandler<void ()(WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>)>::operator()((uint64_t *)(v3 + 16), (uint64_t *)&v5);
  v4 = (uint64_t)v5;
  v5 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKHTTPCookieStoreDeleteAllCookies::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKHTTPCookieStoreSetHTTPCookieAcceptPolicy::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

WTF::StringImpl *WKAddMockMediaDevice(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9;
  void *v10;
  size_t v11;
  uint64_t i;
  void *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  void *v17;
  void *ItemForKey;
  const char *v19;
  void *v20;
  void *v21;
  WTF *v22;
  uint64_t v23;
  char *v24;
  WTF *v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  void *v35;
  void *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *result;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47[2];
  uint64_t v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  __int16 v52;
  int v53;
  WTF::StringImpl *v54;
  int v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a4)
    objc_msgSend(a4, "_apiObject");
  WTF::String::isolatedCopy();
  LODWORD(v54) = 44100;
  v61 = 0;
  if (!MEMORY[0x19AEABBCC](v45, "camera", 6))
  {
    if (MEMORY[0x19AEABBCC](v45, "screen", 6))
    {
      LOBYTE(v46) = 0;
      *(_OWORD *)v47 = xmmword_1978D09E0;
      ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34DA7A0[v61])(&v44, &v54);
      v61 = -1;
      LOBYTE(v54) = (_BYTE)v46;
      WebCore::Color::Color();
      v56 = v47[1];
      v61 = 3;
      if (((unint64_t)v47[0] & 0x8000000000000) != 0)
      {
        v32 = (unsigned int *)((unint64_t)v47[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34)
        {
          atomic_store(1u, v32);
          WTF::fastFree((WTF *)v32, v31);
          if (!a5)
            goto LABEL_59;
          goto LABEL_51;
        }
      }
    }
    else if (MEMORY[0x19AEABBCC](v45, "speaker", 7))
    {
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34DA7A0[v61])(&v46, &v54);
      v54 = 0;
      v55 = 44100;
      v61 = 1;
    }
    else if (!MEMORY[0x19AEABBCC](v45, "microphone", 10))
    {
      goto LABEL_75;
    }
    if (!a5)
      goto LABEL_59;
    goto LABEL_51;
  }
  v43 = a3;
  v46 = (WTF::StringImpl *)0x403E000000000000;
  LOBYTE(v47[0]) = 1;
  v9 = WTF::fastMalloc((WTF *)0x20);
  v10 = (void *)v9;
  v11 = 0;
  for (i = 0; i != 2; ++i)
  {
    *(_OWORD *)(v9 + v11) = xmmword_1978D0A00[v11 / 0x10];
    v11 += 16;
  }
  v14 = WTF::fastMalloc((WTF *)0x30);
  v48 = 1;
  v47[1] = (WTF::StringImpl *)v14;
  *(_QWORD *)v14 = 0x1E000000280;
  *(_QWORD *)(v14 + 16) = 0;
  *(_DWORD *)(v14 + 20) = 2;
  *(_QWORD *)(v14 + 8) = 0;
  if ((_DWORD)v11)
  {
    v15 = (void *)WTF::fastMalloc((WTF *)v11);
    *(_DWORD *)(v14 + 16) = 2;
    *(_QWORD *)(v14 + 8) = v15;
    memcpy(v15, v10, v11);
  }
  *(_OWORD *)(v14 + 24) = xmmword_1978D09F0;
  *(_BYTE *)(v14 + 40) = 0;
  ++HIDWORD(v48);
  WTF::fastFree((WTF *)v10, v13);
  v49 = 0x11040000000000FFLL;
  LODWORD(v51) = 1;
  v50 = (WTF *)WTF::fastMalloc((WTF *)1);
  *(_BYTE *)v50 = 0;
  HIDWORD(v51) = 1;
  v52 = 0;
  if (a5)
  {
    v17 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"facingMode", v16);
    ItemForKey = (void *)WKDictionaryGetItemForKey(a5, v17);
    if (ItemForKey && WKStringIsEqualToUTF8CString(ItemForKey, (WTF::String *)"unknown"))
      LOBYTE(v47[0]) = 0;
    v20 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"fillColor", v19);
    v21 = (void *)WKDictionaryGetItemForKey(a5, v20);
    if (v21 && WKStringIsEqualToUTF8CString(v21, (WTF::String *)"green"))
    {
      v44 = 0x1104000000FF00FFLL;
      WebCore::Color::operator=();
    }
    if (v20)
      CFRelease(*(CFTypeRef *)(objc_msgSend(v20, "_apiObject") + 8));
    if (v17)
      CFRelease(*(CFTypeRef *)(objc_msgSend(v17, "_apiObject") + 8));
  }
  if (v61 != -1)
  {
    if (v61 == 2)
    {
      v54 = v46;
      LOBYTE(v55) = v47[0];
      v22 = v56;
      if (HIDWORD(v57))
      {
        v23 = 48 * HIDWORD(v57);
        v24 = (char *)v56 + 8;
        do
        {
          v25 = *(WTF **)v24;
          if (*(_QWORD *)v24)
          {
            *(_QWORD *)v24 = 0;
            *((_DWORD *)v24 + 2) = 0;
            WTF::fastFree(v25, v16);
          }
          v24 += 48;
          v23 -= 48;
        }
        while (v23);
        v22 = v56;
      }
      if (v22)
      {
        v56 = 0;
        LODWORD(v57) = 0;
        WTF::fastFree(v22, v16);
      }
      v56 = v47[1];
      v26 = v48;
      v47[1] = 0;
      v48 = 0;
      v57 = v26;
      WebCore::Color::operator=();
      v28 = v58;
      if (v58)
      {
        v58 = 0;
        LODWORD(v59) = 0;
        WTF::fastFree(v28, v27);
      }
      v58 = v50;
      v29 = v51;
      v50 = 0;
      v51 = 0;
      v59 = v29;
      v60 = v52;
      goto LABEL_39;
    }
    ((void (*)(uint64_t *, WTF::StringImpl **))off_1E34DA7A0[v61])(&v44, &v54);
  }
  v61 = -1;
  std::__variant_detail::__alt<2ul,WebCore::MockCameraProperties>::__alt[abi:sn180100]<WebCore::MockCameraProperties>((uint64_t)&v54, (uint64_t *)&v46);
  v61 = 2;
  v30 = v50;
  if (v50)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v30, v27);
  }
LABEL_39:
  if ((v49 & 0x8000000000000) != 0)
  {
    v40 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFLL);
    do
    {
      v41 = __ldaxr(v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, v40));
    if (!v42)
    {
      atomic_store(1u, v40);
      WTF::fastFree((WTF *)v40, v27);
    }
  }
  WTF::Vector<WebCore::VideoPresetData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47[1], v27);
  a3 = v43;
  if (!a5)
    goto LABEL_59;
LABEL_51:
  v35 = (void *)WKStringCreateWithUTF8CString((WTF::String *)"invalid", (const char *)v31);
  v36 = (void *)WKDictionaryGetItemForKey(a5, v35);
  if (v36)
  {
    if (WKStringIsEqualToUTF8CString(v36, (WTF::String *)"true"))
      LOBYTE(a5) = 2;
    else
      LOBYTE(a5) = 0;
    if (!v35)
      goto LABEL_59;
    goto LABEL_58;
  }
  LOBYTE(a5) = 0;
  if (v35)
LABEL_58:
    CFRelease(*(CFTypeRef *)(objc_msgSend(v35, "_apiObject", v43) + 8));
LABEL_59:
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  LOBYTE(v47[1]) = (_BYTE)a5;
  LOBYTE(v48) = 0;
  v53 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::MockMicrophoneProperties,WebCore::MockSpeakerProperties,WebCore::MockCameraProperties,WebCore::MockDisplayProperties>,(std::__variant_detail::_Trait)1>>((uint64_t)&v48, (uint64_t)&v54);
  WebKit::WebProcessPool::addMockMediaDevice((WebKit::WebProcessPool *)a1, (uint64_t)&v46);
  if (v53 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E34DA7A0[v53])(&v44, &v48);
  v53 = -1;
  v37 = v47[0];
  v47[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = v46;
  v46 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)v38 -= 2;
  }
LABEL_75:
  if (v61 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34DA7A0[v61])(&v46, &v54);
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WKClearMockMediaDevices(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebProcessPool::clearMockMediaDevices((WebKit::WebProcessPool *)a1);
}

WTF::StringImpl *WKRemoveMockMediaDevice(void *a1, void *a2)
{
  WebKit::WebProcessPool *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebProcessPool *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::removeMockMediaDevice(v3, (const WTF::String *)&v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WKResetMockMediaDevices(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebProcessPool::resetMockMediaDevices((WebKit::WebProcessPool *)a1);
}

WTF::StringImpl *WKSetMockMediaDeviceIsEphemeral(void *a1, void *a2, WTF::String *a3)
{
  WebKit::WebProcessPool *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (a1)
  {
    v5 = (WebKit::WebProcessPool *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  WebKit::WebProcessPool::setMockMediaDeviceIsEphemeral(v5, (const WTF::String *)&v8, a3);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKNavigationActionGetTypeID()
{
  return 77;
}

BOOL WKNavigationActionShouldPerformDownload(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 376) != 0;
}

uint64_t WKNavigationActionCopyRequest(char *a1)
{
  const WebCore::ResourceRequest *v1;
  uint64_t v2;

  if (a1)
    a1 = (char *)objc_msgSend(a1, "_apiObject");
  v1 = (const WebCore::ResourceRequest *)(a1 + 40);
  v2 = API::Object::newObject(0xD8uLL, 25);
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(_QWORD *)v2 = &off_1E34CC2D0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v2 + 16), v1);
  return *(_QWORD *)(v2 + 8);
}

BOOL WKNavigationActionGetShouldOpenExternalSchemes(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 369) - 1 < 2;
}

uint64_t WKNavigationActionCopyTargetFrameInfo(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 24);
  if (!v1)
    return 0;
  CFRetain(*(CFTypeRef *)(v1 + 8));
  return *(_QWORD *)(v1 + 8);
}

uint64_t WKNavigationActionGetNavigationType(void *a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 304);
  if (v1 >= 5)
    return 5;
  else
    return v1;
}

uint64_t WKNavigationDataGetTypeID()
{
  return 78;
}

uint64_t WKNavigationDataCopyTitle(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 24);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKNavigationDataCopyURL(uint64_t a1)
{
  API::URL *v1;
  WebKit *v3;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  v1 = (API::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a1 + 32));
  if (*(_QWORD *)v1 && (API::URL::create(v1, &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKNavigationDataCopyNavigationDestinationURL(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WebKit *v7;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 16);
  if (!v1)
    return 0;
  *(_DWORD *)v1 += 2;
  v6 = v1;
  API::URL::create((API::URL *)&v6, &v7);
  if (v7)
    v3 = *((_QWORD *)v7 + 1);
  else
    v3 = 0;
  v4 = v6;
  v6 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v3;
}

uint64_t WKNavigationDataCopyOriginalRequest(char *a1)
{
  const WebCore::ResourceRequest *v1;
  uint64_t v2;

  if (a1)
    a1 = (char *)objc_msgSend(a1, "_apiObject");
  v1 = (const WebCore::ResourceRequest *)(a1 + 32);
  v2 = API::Object::newObject(0xD8uLL, 25);
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v2);
  *(_QWORD *)v2 = &off_1E34CC2D0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v2 + 16), v1);
  return *(_QWORD *)(v2 + 8);
}

uint64_t WKNavigationGetTypeID()
{
  return 76;
}

uint64_t WKNavigationResponseGetTypeID()
{
  return 79;
}

uint64_t WKNavigationResponseCanShowMIMEType(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 480);
}

API::URLResponse *WKNavigationResponseCopyResponse(char *a1)
{
  const WebCore::ResourceResponse *v1;
  API::URLResponse *v2;
  API::URLResponse *result;

  if (a1)
    a1 = (char *)objc_msgSend(a1, "_apiObject");
  v1 = (const WebCore::ResourceResponse *)(a1 + 224);
  v2 = (API::URLResponse *)API::Object::newObject(0x110uLL, 26);
  result = API::URLResponse::URLResponse(v2, v1);
  if (result)
    return (API::URLResponse *)*((_QWORD *)result + 1);
  return result;
}

uint64_t WKNavigationResponseCopyFrameInfo(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
  CFRetain(*(CFTypeRef *)(v1 + 8));
  return *(_QWORD *)(v1 + 8);
}

uint64_t WKNotificationGetTypeID()
{
  return 80;
}

uint64_t WKNotificationCopyTitle(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKNotificationCopyBody(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKNotificationCopyIconURL(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKNotificationCopyTag(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKNotificationCopyLang(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKNotificationCopyDir(void *a1)
{
  const char *v1;
  unint64_t v2;
  uint64_t result;

  v2 = *(char *)(objc_msgSend(a1, "_apiObject") + 112);
  if (v2 < 3)
    return WKStringCreateWithUTF8CString((WTF::String *)off_1E34DA7C0[v2], v1);
  result = 79;
  __break(0xC471u);
  return result;
}

uint64_t WKNotificationGetSecurityOrigin(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 272);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WKNotificationGetID(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKNotificationCopyDataStoreIdentifier(_OWORD *a1)
{
  __int128 v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1)
    a1 = (_OWORD *)objc_msgSend(a1, "_apiObject");
  v1 = a1[19];
  v7[0] = a1[18];
  v7[1] = v1;
  if (!(_BYTE)v1)
    return 0;
  WTF::UUID::toString((WTF::UUID *)v7);
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

uint64_t WKNotificationCopyCoreIDForTesting(_OWORD *a1)
{
  __int128 v2;
  WebKit *v3;

  if (a1)
    a1 = (_OWORD *)objc_msgSend(a1, "_apiObject");
  v2 = a1[11];
  API::Data::create((WTF *)0x10, &v2, &v3);
  if (v3)
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

BOOL WKNotificationGetIsPersistent(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 128);
  return v1 && *(_DWORD *)(v1 + 4) != 0;
}

uint64_t WKNotificationGetAlert(void *a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = objc_msgSend(a1, "_apiObject");
  if (*(_WORD *)(v1 + 256))
    v2 = 2;
  else
    v2 = 4;
  if (*(unsigned __int16 *)(v1 + 256) < 0x100u)
    return 1;
  else
    return v2;
}

uint64_t WKNotificationManagerGetTypeID()
{
  return 81;
}

uint64_t WKNotificationManagerSetProvider(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  uint64_t v9;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)v4 = off_1E34DE698;
  if (!a2)
    goto LABEL_8;
  if (*(_DWORD *)a2)
  {
    if ((*(_DWORD *)a2 & 0x80000000) == 0)
      goto LABEL_8;
    __break(1u);
  }
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 56) = v7;
  *(_OWORD *)(v4 + 24) = v5;
LABEL_8:
  v9 = v4;
  WebKit::WebNotificationManagerProxy::setProvider(v3, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t *WKNotificationManagerProviderDidShowNotification(void *a1, uint64_t a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebNotificationManagerProxy::providerDidShowNotification((uint64_t)a1, a2);
}

void WKNotificationManagerProviderDidClickNotification(void *a1, uint64_t a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebNotificationManagerProxy::providerDidClickNotification((uint64_t)a1, a2);
}

void WKNotificationManagerProviderDidClickNotification_b(void *a1, void *a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  WebKit *v6;
  WebKit::WebNotification *v7;
  __int128 v8;

  v3 = objc_msgSend(a2, "_apiObject");
  if (*(_QWORD *)(v3 + 24) == 16)
  {
    v4 = *(__int128 **)(v3 + 16);
    if (a1)
      v5 = objc_msgSend(a1, "_apiObject");
    else
      v5 = 0;
    v8 = *v4;
    v6 = (WebKit *)WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WTF::Ref<WebKit::WebNotification,WTF::RawPtrTraits<WebKit::WebNotification>,WTF::DefaultRefDerefTraits<WebKit::WebNotification>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(v5 + 48), (uint64_t *)&v8);
    WebKit::dispatchDidClickNotification(v6, v7);
  }
}

void WKNotificationManagerProviderDidCloseNotifications(void *a1, void *a2)
{
  WebKit::WebNotificationManagerProxy *v3;
  API::Array *v4;

  if (!a1)
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    goto LABEL_4;
  }
  v3 = (WebKit::WebNotificationManagerProxy *)objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = (API::Array *)objc_msgSend(a2, "_apiObject");
LABEL_4:
  WebKit::WebNotificationManagerProxy::providerDidCloseNotifications(v3, v4);
}

WebKit::WebNotificationManagerProxy *WKNotificationManagerProviderDidUpdateNotificationPolicy(void *a1, void *a2, int a3)
{
  WebKit::WebNotificationManagerProxy *v5;
  const API::SecurityOrigin *v6;

  if (!a1)
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v6 = 0;
    return WebKit::WebNotificationManagerProxy::providerDidUpdateNotificationPolicy(v5, v6, a3);
  }
  v5 = (WebKit::WebNotificationManagerProxy *)objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v6 = (const API::SecurityOrigin *)objc_msgSend(a2, "_apiObject");
  return WebKit::WebNotificationManagerProxy::providerDidUpdateNotificationPolicy(v5, v6, a3);
}

WebKit *WKNotificationManagerProviderDidRemoveNotificationPolicies(void *a1, void *a2)
{
  WebKit *v3;
  API::Array *v4;

  if (!a1)
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
LABEL_6:
    v4 = 0;
    return WebKit::WebNotificationManagerProxy::providerDidRemoveNotificationPolicies(v3, v4);
  }
  v3 = (WebKit *)objc_msgSend(a1, "_apiObject");
  if (!a2)
    goto LABEL_6;
LABEL_3:
  v4 = (API::Array *)objc_msgSend(a2, "_apiObject");
  return WebKit::WebNotificationManagerProxy::providerDidRemoveNotificationPolicies(v3, v4);
}

uint64_t WKNotificationManagerGetSharedServiceWorkerNotificationManager(WebKit::WebNotificationManagerProxy *a1)
{
  return *((_QWORD *)WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(a1) + 1);
}

uint64_t WKNotificationPermissionRequestGetTypeID()
{
  return 82;
}

_QWORD *WKNotificationPermissionRequestAllow(_QWORD *result)
{
  uint64_t v1;

  if (result)
    result = (_QWORD *)objc_msgSend(result, "_apiObject");
  v1 = result[2];
  if (v1)
  {
    result[2] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, 1);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

_QWORD *WKNotificationPermissionRequestDeny(_QWORD *result)
{
  uint64_t v1;

  if (result)
    result = (_QWORD *)objc_msgSend(result, "_apiObject");
  v1 = result[2];
  if (v1)
  {
    result[2] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  return result;
}

uint64_t WKOpenPanelParametersGetTypeID()
{
  return 83;
}

uint64_t WKOpenPanelParametersGetAllowsDirectories(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 16);
}

uint64_t WKOpenPanelParametersGetAllowsMultipleFiles(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 17);
}

uint64_t WKOpenPanelParametersCopyAcceptedMIMETypes(void *a1)
{
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  API::Array::createStringArray((uint64_t)a1 + 24, &v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKOpenPanelParametersCopyAcceptedFileExtensions(void *a1)
{
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  API::Array::createStringArray((uint64_t)a1 + 40, &v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKOpenPanelParametersCopyAllowedMIMETypes(void *a1)
{
  uint64_t v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::OpenPanelParameters::allowedMIMETypes(&v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKOpenPanelParametersCopyCapture()
{
  return 0;
}

BOOL WKOpenPanelParametersGetMediaCaptureType(void *a1)
{
  return *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 72) != 0;
}

uint64_t WKOpenPanelParametersCopySelectedFileNames(void *a1)
{
  uint64_t v2;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  API::Array::createStringArray((uint64_t)a1 + 56, &v2);
  if (v2)
    return *(_QWORD *)(v2 + 8);
  else
    return 0;
}

uint64_t WKOpenPanelResultListenerGetTypeID()
{
  return 61;
}

uint64_t WKOpenPanelResultListenerChooseMediaFiles(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v13;
  uint64_t v14[2];

  if (a1)
    v7 = objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  filePathsFromFileURLs((const API::Array *)v14, objc_msgSend(a2, "_apiObject"));
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  if (a4)
    v9 = objc_msgSend(a4, "_apiObject");
  else
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 16);
  if (v10)
    WebKit::WebPageProxy::didChooseFilesForOpenPanelWithDisplayStringAndIcon(v10, v14, (uint64_t)&v13, v9);
  v11 = v13;
  v13 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
}

void filePathsFromFileURLs(const API::Array *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16[5];
  WTF::StringImpl *v17;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2)
  {
    if (v2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      v5 = WTF::fastMalloc((WTF *)(8 * v2));
      v6 = 0;
      *((_DWORD *)a1 + 2) = v2;
      *(_QWORD *)a1 = v5;
      do
      {
        v7 = API::Array::at<API::URL>(a2, v6);
        if (v7)
        {
          v8 = v7;
          CFRetain(*(CFTypeRef *)(v7 + 8));
          WTF::URL::URL((uint64_t)v16, (WTF::StringImpl **)(v8 + 16));
          WTF::URL::fileSystemPath((WTF::URL *)v16);
          v10 = *((unsigned int *)a1 + 3);
          if ((_DWORD)v10 == *((_DWORD *)a1 + 2))
          {
            v15 = (WTF::StringImpl **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a1, v10 + 1, (unint64_t)&v17);
            v10 = *((unsigned int *)a1 + 3);
            v11 = *(_QWORD *)a1;
            v12 = *v15;
            *v15 = 0;
          }
          else
          {
            v11 = *(_QWORD *)a1;
            v12 = v17;
            v17 = 0;
          }
          *(_QWORD *)(v11 + 8 * v10) = v12;
          *((_DWORD *)a1 + 3) = v10 + 1;
          v13 = v17;
          v17 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v9);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v16[0];
          v16[0] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v9);
            else
              *(_DWORD *)v14 -= 2;
          }
          CFRelease(*(CFTypeRef *)(v8 + 8));
        }
        ++v6;
      }
      while (v2 != v6);
    }
  }
}

uint64_t WKOpenPanelResultListenerChooseFiles(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  _BYTE v11[16];
  uint64_t v12[2];

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  filePathsFromFileURLs((const API::Array *)v12, objc_msgSend(a2, "_apiObject"));
  if (a3)
    v6 = (unsigned int *)objc_msgSend(a3, "_apiObject");
  else
    v6 = 0;
  API::Array::toStringVector(v6, (uint64_t)v11);
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
    WebKit::WebPageProxy::didChooseFilesForOpenPanel(v8, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v7);
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v12, v9);
}

void WKOpenPanelResultListenerCancel(void *a1)
{
  WebKit::WebPageProxy *v1;
  void *v2;

  v1 = *(WebKit::WebPageProxy **)(objc_msgSend(a1, "_apiObject") + 16);
  if (v1)
    WebKit::WebPageProxy::didCancelForOpenPanel(v1, v2);
}

uint64_t WKPageGetTypeID()
{
  return 86;
}

uint64_t WKPageGetContext(void *a1)
{
  return *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 24))
         + 1);
}

uint64_t WKPageGetPageGroup()
{
  return 0;
}

uint64_t WKPageCopyPageConfiguration(void *a1)
{
  API::PageConfiguration *v2;

  API::PageConfiguration::copy(*(API::PageConfiguration **)(objc_msgSend(a1, "_apiObject") + 48), &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKPageLoadURL(void *a1, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  CFTypeRef v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11[5];
  _BYTE v12[192];
  CFTypeRef cf;
  uint64_t v14;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  if (a2)
  {
    v4 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v4)
      *(_DWORD *)v4 += 2;
  }
  else
  {
    v4 = 0;
  }
  v10 = v4;
  MEMORY[0x19AEABB0C](v11, &v10, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v12, (const WTF::URL *)v11, 0);
  cf = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)v3, (WebCore::ResourceRequestBase *)v12, 1, 0, &v14);
  v5 = v14;
  v14 = 0;
  if (v5)
    CFRelease(*(CFTypeRef *)(v5 + 8));
  v6 = cf;
  cf = 0;
  if (v6)
    CFRelease(v6);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v12);
  v8 = v11[0];
  v11[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void crashBecausePageIsSuspended(void)
{
  WTFLogAlways();
  __break(0xC471u);
}

WTF::StringImpl *WKPageLoadURLWithShouldOpenExternalURLsPolicy(void *a1, void *a2, int a3)
{
  void *v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[5];
  _BYTE v15[192];
  CFTypeRef cf;
  uint64_t v17;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    if (a3)
      v6 = 2;
    else
      v6 = 0;
    v5 = (void *)objc_msgSend(v5, "_apiObject");
    if (a2)
      goto LABEL_7;
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  if (a3)
    v6 = 2;
  else
    v6 = 0;
  if (!a2)
    goto LABEL_13;
LABEL_7:
  v7 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
  if (v7)
    *(_DWORD *)v7 += 2;
LABEL_14:
  v13 = v7;
  MEMORY[0x19AEABB0C](v14, &v13, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v15, (const WTF::URL *)v14, 0);
  cf = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)v5, (WebCore::ResourceRequestBase *)v15, v6, 0, &v17);
  v8 = v17;
  v17 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
  v11 = v14[0];
  v14[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageLoadURLWithUserData(void *a1, void *a2, void *a3)
{
  void *v5;
  WTF::StringImpl *v6;
  const void *v7;
  uint64_t v8;
  CFTypeRef v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14[5];
  _BYTE v15[192];
  CFTypeRef cf;
  uint64_t v17;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (void *)objc_msgSend(v5, "_apiObject");
  }
  if (a2)
  {
    v6 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v6)
      *(_DWORD *)v6 += 2;
  }
  else
  {
    v6 = 0;
  }
  v13 = v6;
  MEMORY[0x19AEABB0C](v14, &v13, 0);
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v15, (const WTF::URL *)v14, 0);
  cf = 0;
  if (a3)
    v7 = (const void *)objc_msgSend(a3, "_apiObject");
  else
    v7 = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)v5, (WebCore::ResourceRequestBase *)v15, 0, v7, &v17);
  v8 = v17;
  v17 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
  v11 = v14[0];
  v14[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WKPageLoadURLRequest(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  CFTypeRef v7;
  uint64_t v8;
  CFTypeRef v9[24];
  CFTypeRef cf;

  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  if (a2)
    v4 = objc_msgSend(a2, "_apiObject");
  else
    v4 = 0;
  WebCore::ResourceRequest::ResourceRequest(v9, (const WebCore::ResourceRequest *)(v4 + 16));
  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  WebKit::WebPageProxy::loadRequest(v5, (WebCore::ResourceRequestBase *)v9, 1, 0, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  v7 = cf;
  cf = 0;
  if (v7)
    CFRelease(v7);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v9);
}

void WKPageLoadURLRequestWithUserData(void *a1, void *a2, void *a3)
{
  void *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  CFTypeRef v9;
  uint64_t v10;
  CFTypeRef v11[24];
  CFTypeRef cf;

  v5 = a1;
  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  if (a2)
    v6 = objc_msgSend(a2, "_apiObject");
  else
    v6 = 0;
  WebCore::ResourceRequest::ResourceRequest(v11, (const WebCore::ResourceRequest *)(v6 + 16));
  if (v5)
    v5 = (void *)objc_msgSend(v5, "_apiObject");
  if (a3)
    v7 = (const void *)objc_msgSend(a3, "_apiObject");
  else
    v7 = 0;
  WebKit::WebPageProxy::loadRequest((uint64_t)v5, (WebCore::ResourceRequestBase *)v11, 0, v7, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  v9 = cf;
  cf = 0;
  if (v9)
    CFRelease(v9);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
}

WTF::StringImpl *WKPageLoadFile(void *a1, void *a2, void *a3)
{
  void *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (void *)objc_msgSend(v5, "_apiObject");
  }
  if (a2)
  {
    v6 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v6)
      *(_DWORD *)v6 += 2;
  }
  else
  {
    v6 = 0;
  }
  v13 = v6;
  if (a3)
  {
    v7 = *(WTF::StringImpl **)(objc_msgSend(a3, "_apiObject") + 16);
    if (v7)
      *(_DWORD *)v7 += 2;
  }
  else
  {
    v7 = 0;
  }
  v12 = v7;
  WebKit::WebPageProxy::loadFile((WebKit::WebPageProxy *)v5, &v13, &v12, 0, 1, &v14);
  v9 = v14;
  v14 = 0;
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageLoadFileWithUserData(void *a1, void *a2, void *a3, void *a4)
{
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;

  v7 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v7 = (void *)objc_msgSend(v7, "_apiObject");
  }
  if (a2)
  {
    v8 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v8)
      *(_DWORD *)v8 += 2;
  }
  else
  {
    v8 = 0;
  }
  v15 = v8;
  if (a3)
  {
    v9 = *(WTF::StringImpl **)(objc_msgSend(a3, "_apiObject") + 16);
    if (v9)
      *(_DWORD *)v9 += 2;
  }
  else
  {
    v9 = 0;
  }
  v14 = v9;
  if (a4)
    objc_msgSend(a4, "_apiObject");
  WebKit::WebPageProxy::loadFile((WebKit::WebPageProxy *)v7, &v15, &v14, 0, a4 != 0, &v16);
  v11 = v16;
  v16 = 0;
  if (v11)
    CFRelease(*(CFTypeRef *)(v11 + 8));
  v12 = v14;
  v14 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageLoadData(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v9 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v9 = (void *)objc_msgSend(v9, "_apiObject");
  }
  v10 = objc_msgSend(a2, "_apiObject");
  v11 = *(_QWORD *)(v10 + 16);
  v12 = *(_QWORD *)(v10 + 24);
  if (a3)
  {
    objc_msgSend(a3, "_apiObject");
    WTF::String::isolatedCopy();
    if (a4)
      goto LABEL_6;
  }
  else
  {
    v20 = 0;
    if (a4)
    {
LABEL_6:
      objc_msgSend(a4, "_apiObject");
      WTF::String::isolatedCopy();
      if (a5)
        goto LABEL_7;
LABEL_11:
      v13 = 0;
      goto LABEL_12;
    }
  }
  v19 = 0;
  if (!a5)
    goto LABEL_11;
LABEL_7:
  v13 = *(WTF::StringImpl **)(objc_msgSend(a5, "_apiObject") + 16);
  if (v13)
    *(_DWORD *)v13 += 2;
LABEL_12:
  v18 = v13;
  WebKit::WebPageProxy::loadData((uint64_t)v9, v11, v12, (WTF::StringImpl *)&v20, (WTF::StringImpl *)&v19, (WTF::StringImpl *)&v18, 0, 0, &v21);
  if (v21)
    CFRelease(*(CFTypeRef *)(v21 + 8));
  v15 = v18;
  v18 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v19;
  v19 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageLoadDataWithUserData(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  const void *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;

  v11 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v11 = (void *)objc_msgSend(v11, "_apiObject");
  }
  v12 = objc_msgSend(a2, "_apiObject");
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  if (a3)
  {
    objc_msgSend(a3, "_apiObject");
    WTF::String::isolatedCopy();
    if (a4)
      goto LABEL_6;
  }
  else
  {
    v23 = 0;
    if (a4)
    {
LABEL_6:
      objc_msgSend(a4, "_apiObject");
      WTF::String::isolatedCopy();
      if (a5)
        goto LABEL_7;
LABEL_11:
      v15 = 0;
      goto LABEL_12;
    }
  }
  v22 = 0;
  if (!a5)
    goto LABEL_11;
LABEL_7:
  v15 = *(WTF::StringImpl **)(objc_msgSend(a5, "_apiObject") + 16);
  if (v15)
    *(_DWORD *)v15 += 2;
LABEL_12:
  v21 = v15;
  if (a6)
    v16 = (const void *)objc_msgSend(a6, "_apiObject");
  else
    v16 = 0;
  WebKit::WebPageProxy::loadData((uint64_t)v11, v13, v14, (WTF::StringImpl *)&v23, (WTF::StringImpl *)&v22, (WTF::StringImpl *)&v21, v16, 0, &v24);
  if (v24)
    CFRelease(*(CFTypeRef *)(v24 + 8));
  v18 = v21;
  v21 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v17);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v22;
  v22 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageLoadHTMLString(void *a1, void *a2, void *a3)
{
  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  return WKPageLoadHTMLStringWithUserData(a1, a2, a3, 0);
}

WTF::StringImpl *WKPageLoadHTMLStringWithUserData(void *a1, void *a2, void *a3, void *a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a3)
  {
    v8 = *(WTF::StringImpl **)(objc_msgSend(a3, "_apiObject") + 16);
    if (v8)
      *(_DWORD *)v8 += 2;
  }
  else
  {
    v8 = 0;
  }
  v12 = v8;
  loadString(a1, a2, (WTF::StringImpl *)&v13, (WTF::StringImpl *)&v12, a4);
  v10 = v12;
  v12 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *loadString(void *a1, void *a2, WTF::StringImpl *a3, WTF::StringImpl *a4, void *a5)
{
  void *v8;
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v8 = a1;
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v17 = 0;
  if (a1)
LABEL_3:
    v8 = (void *)objc_msgSend(v8, "_apiObject");
LABEL_4:
  if (v17)
  {
    v9 = *((_QWORD *)v17 + 1);
    v10 = (unint64_t)*((unsigned int *)v17 + 1) << ((*((_DWORD *)v17 + 4) & 4) == 0);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a5)
    v11 = (const void *)objc_msgSend(a5, "_apiObject");
  else
    v11 = 0;
  WebKit::WebPageProxy::loadData((uint64_t)v8, v9, v10, a3, (WTF::StringImpl *)&v15, a4, v11, 0, &v16);
  if (v16)
    CFRelease(*(CFTypeRef *)(v16 + 8));
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WKPageLoadAlternateHTMLString(_BYTE *a1, void *a2, void *a3, void *a4)
{
  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  return WKPageLoadAlternateHTMLStringWithUserData(a1, a2, a3, a4, 0);
}

_BYTE *WKPageLoadAlternateHTMLStringWithUserData(_BYTE *result, void *a2, void *a3, void *a4, void *a5)
{
  void *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  WTF::StringImpl *v13;
  char v14;
  void *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  const void *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28[5];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  uint64_t v34;

  v9 = result;
  if (result)
  {
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
  }
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    result = (_BYTE *)WTF::String::isolatedCopy();
    if (!v9)
      goto LABEL_6;
    goto LABEL_5;
  }
  v34 = 0;
  if (v9)
  {
LABEL_5:
    result = (_BYTE *)objc_msgSend(v9, "_apiObject");
    v9 = result;
  }
LABEL_6:
  if (v34)
  {
    v10 = *(char **)(v34 + 8);
    v11 = *(unsigned int *)(v34 + 4);
    v12 = v11 << ((*(_DWORD *)(v34 + 16) & 4) == 0);
    v30 = 0;
    LODWORD(v31) = 0;
    HIDWORD(v31) = v12;
    if ((_DWORD)v11)
    {
      if (HIDWORD(v12))
      {
        __break(0xC471u);
        return result;
      }
      v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)v12);
      LODWORD(v31) = v12;
      v30 = v13;
      do
      {
        v14 = *v10++;
        *(_BYTE *)v13 = v14;
        v13 = (WTF::StringImpl *)((char *)v13 + 1);
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v30 = 0;
    v31 = 0;
  }
  WebCore::DataSegment::create();
  v16 = v30;
  if (v30)
  {
    v30 = 0;
    LODWORD(v31) = 0;
    WTF::fastFree(v16, v15);
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (a3)
  {
    v17 = *(WTF::StringImpl **)(objc_msgSend(a3, "_apiObject") + 16);
    if (v17)
      *(_DWORD *)v17 += 2;
  }
  else
  {
    v17 = 0;
  }
  v29 = v17;
  MEMORY[0x19AEABB0C](&v30, &v29, 0);
  if (a4)
  {
    v18 = *(WTF::StringImpl **)(objc_msgSend(a4, "_apiObject") + 16);
    if (v18)
      *(_DWORD *)v18 += 2;
  }
  else
  {
    v18 = 0;
  }
  v27 = v18;
  MEMORY[0x19AEABB0C](v28, &v27, 0);
  if (a5)
    v19 = (const void *)objc_msgSend(a5, "_apiObject");
  else
    v19 = 0;
  WebKit::WebPageProxy::loadAlternateHTML((uint64_t)v9, (uint64_t *)&v33, (WTF::StringImpl *)&v32, (uint64_t)&v30, (uint64_t)v28, v19);
  v21 = v28[0];
  v28[0] = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v27;
  v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v30;
  v30 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v20);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v29;
  v29 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v20);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v20);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v33;
  v33 = 0;
  if (v26)
    WTF::ThreadSafeRefCounted<WebCore::DataSegment,(WTF::DestructionThread)0>::deref(v26, v20);
  result = (_BYTE *)v34;
  v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageLoadPlainTextString(void *a1, void *a2)
{
  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  return WKPageLoadPlainTextStringWithUserData(a1, a2, 0);
}

WTF::StringImpl *WKPageLoadPlainTextStringWithUserData(void *a1, void *a2, void *a3)
{
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v6 = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = (WTF::StringImpl *)WTF::aboutBlankURL(v6);
  loadString(a1, a2, (WTF::StringImpl *)&v10, v7, a3);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WKPageStopLoading(void *a1)
{
  void *v1;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  WebKit::WebPageProxy::stopLoading((WebKit::WebPageProxy *)a1);
}

void WKPageReload(void *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v2 = WTF::linkedOnOrAfterSDKWithBehavior();
    v3 = objc_msgSend(a1, "_apiObject");
  }
  else
  {
    v2 = WTF::linkedOnOrAfterSDKWithBehavior();
    v3 = 0;
  }
  WebKit::WebPageProxy::reload(v3, v2, &v5);
  v4 = v5;
  v5 = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WKPageReloadWithoutContentBlockers(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  WebKit::WebPageProxy::reload((uint64_t)a1, 4, &v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

void WKPageReloadFromOrigin(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  WebKit::WebPageProxy::reload((uint64_t)a1, 2, &v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

void WKPageReloadExpiredOnly(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  WebKit::WebPageProxy::reload((uint64_t)a1, 1, &v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

uint64_t WKPageTryClose(void *a1)
{
  void *v1;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  return WebKit::WebPageProxy::tryClose((WebKit::WebPageProxy *)a1);
}

WTF::StringImpl *WKPagePermissionChanged(void *a1, const WTF::String *a2)
{
  WTF::StringImpl *v3;
  unsigned __int16 v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF *v10;
  WTF::StringImpl *v11[3];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    objc_msgSend(a1, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v11[0] = 0;
  }
  v4 = WebCore::Permissions::toPermissionName((WebCore::Permissions *)v11, a2);
  result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  if (v4 >= 0x100u)
  {
    if (a2)
    {
      -[WTF::String _apiObject](a2, "_apiObject");
      WTF::String::isolatedCopy();
    }
    else
    {
      v9 = 0;
    }
    WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v9, v3);
    LOBYTE(v11[0]) = 0;
    v12 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v11, (uint64_t)v10 + 8);
    v7 = v10;
    v10 = 0;
    if (v7)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v7, v6);
    v8 = v9;
    v9 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v6);
      else
        *(_DWORD *)v8 -= 2;
    }
    result = (WTF::StringImpl *)WebKit::WebProcessProxy::permissionChanged(v4, (uint64_t)v11);
    if (v12 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E34DA7D8[v12])(&v10, v11);
  }
  return result;
}

unsigned int *WKPageClose(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPageProxy::close((unsigned int *)a1);
}

uint64_t WKPageIsClosed(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 729);
}

void WKPageGoForward(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  WebKit::WebPageProxy::goForward((WebKit::WebPageProxy *)a1, &v3);
  v2 = v3;
  v3 = 0;
  if (v2)
    CFRelease(*(CFTypeRef *)(v2 + 8));
}

BOOL WKPageCanGoForward(void *a1)
{
  return WebKit::WebBackForwardList::forwardItem(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 592)) != 0;
}

void WKPageGoBack(void *a1)
{
  WebKit::WebPageProxy *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v2 = (WebKit::WebPageProxy *)objc_msgSend(a1, "_apiObject");
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)v2 + 5) + 8) + 1432))(*(_QWORD *)(*((_QWORD *)v2 + 5) + 8)))
  {
    WKPageReload(a1);
  }
  else
  {
    WebKit::WebPageProxy::goBack(v2, &v4);
    v3 = v4;
    v4 = 0;
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

BOOL WKPageCanGoBack(void *a1)
{
  return WebKit::WebBackForwardList::backItem(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 592)) != 0;
}

void WKPageGoToBackForwardListItem(void *a1, void *a2)
{
  void *v3;
  uint64_t v4;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  WebKit::WebPageProxy::goToBackForwardItem((uint64_t)v3, objc_msgSend(a2, "_apiObject"), 3u, &v4);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WKPageTryRestoreScrollPosition(void *a1)
{
  void *v1;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  WebKit::WebPageProxy::tryRestoreScrollPosition((WebKit::WebPageProxy *)a1);
}

uint64_t WKPageGetBackForwardList(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 592);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

BOOL WKPageWillHandleHorizontalScrollEvents(void *a1)
{
  return *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 850) == 0;
}

void WKPageUpdateWebsitePolicies(void *a1, void *a2)
{
  API::WebsitePolicies *v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  _BYTE v7[112];

  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  if (a2)
  {
    if (!*(_QWORD *)(objc_msgSend(a2, "_apiObject") + 136))
    {
      if (!*(_QWORD *)(objc_msgSend(a2, "_apiObject") + 144))
      {
        v4 = (API::WebsitePolicies *)objc_msgSend(a2, "_apiObject");
        goto LABEL_7;
      }
LABEL_15:
      __break(0xC471u);
      JUMPOUT(0x197409738);
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x197409718);
  }
  if (MEMORY[0x88])
    goto LABEL_14;
  if (MEMORY[0x90])
    goto LABEL_15;
  v4 = 0;
LABEL_7:
  API::WebsitePolicies::data(v4, (uint64_t)v7);
  if (a1)
    v5 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  WebKit::WebPageProxy::updateWebsitePolicies(v5, (uint64_t)v7);
  WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v7, v6);
}

uint64_t WKPageCopyTitle(void *a1)
{
  WebKit *v2;

  objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKPageGetMainFrame(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 280);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WKPageGetFocusedFrame(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 296);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WKPageGetFrameSetLargestFrame()
{
  return 0;
}

uint64_t WKPageGetRenderTreeSize(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 864);
}

uint64_t WKPageGetWebsiteDataStore(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 264);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WKPageGetInspector(uint64_t a1)
{
  uint64_t v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  if (*(_BYTE *)(a1 + 729))
    return 0;
  v2 = *(_QWORD *)(a1 + 352);
  if (!v2)
    return 0;
  else
    return *(_QWORD *)(v2 + 8);
}

double WKPageGetEstimatedProgress(void *a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32);
  result = *(double *)(v1 + 1112);
  if (*(_QWORD *)(v1 + 984))
    return 0.1;
  return result;
}

uint64_t WKPageCopyUserAgent(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKPageCopyApplicationNameForUserAgent(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKPageSetApplicationNameForUserAgent(void *a1, void *a2, const WTF::StringImpl *a3)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v4 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v4 = (void *)objc_msgSend(v4, "_apiObject");
  }
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v7 = 0;
  }
  WebKit::WebPageProxy::setApplicationNameForUserAgent((WTF **)v4, &v7, a3);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageCopyCustomUserAgent(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKPageSetCustomUserAgent(void *a1, void *a2, const WTF::StringImpl *a3)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v4 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v4 = (void *)objc_msgSend(v4, "_apiObject");
  }
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v7 = 0;
  }
  WebKit::WebPageProxy::setCustomUserAgent((WTF **)v4, &v7, a3);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageSupportsTextEncoding(void *a1)
{
  const WTF::String *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 280);
  if (v2)
    return WebCore::Image::supportsType((WebCore::Image *)(v2 + 224), v1) ^ 1;
  else
    return 0;
}

uint64_t WKPageCopyCustomTextEncodingName(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  v1 = *(WTF::StringImpl **)(objc_msgSend(a1, "_apiObject") + 336);
  if (v1)
    *(_DWORD *)v1 += 2;
  v5 = v1;
  API::String::create(&v6);
  if (v6)
    v3 = *((_QWORD *)v6 + 1);
  else
    v3 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v2);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v3;
}

WTF::StringImpl *WKPageSetCustomTextEncodingName(void *a1, void *a2, const WTF::StringImpl *a3)
{
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;

  v4 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v4 = (void *)objc_msgSend(v4, "_apiObject");
  }
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v7 = 0;
  }
  WebKit::WebPageProxy::setCustomTextEncodingName((WebKit::WebPageProxy *)v4, &v7, a3);
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WKPageTerminate(void *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v2 = *(unsigned int **)(objc_msgSend(a1, "_apiObject") + 208);
  v3 = v2 + 4;
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  result = WebKit::WebProcessProxy::requestTermination(v2, 2);
  if (v2)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v2 + 4);
  return result;
}

unsigned int *WKPageResetProcessState(void *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v2 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 208);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  *(_WORD *)(v2 + 776) = 0;
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
}

uint64_t WKPageGetSessionHistoryURLValueType()
{
  uint64_t v0;
  WTF::StringImpl *v2;
  WebKit *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebKit *v7;

  if (_MergedGlobals_97 != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    API::String::create(&v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = v6;
    v5 = (uint64_t)v3;
    v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v0 = v5;
    qword_1ECE72E38 = v5;
    _MergedGlobals_97 = 1;
    if (v5)
      return *(_QWORD *)(v0 + 8);
    return 0;
  }
  v0 = qword_1ECE72E38;
  if (!qword_1ECE72E38)
    return 0;
  return *(_QWORD *)(v0 + 8);
}

uint64_t WKPageGetSessionBackForwardListItemValueType()
{
  uint64_t v0;
  WTF::StringImpl *v2;
  WebKit *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WebKit *v7;

  if (byte_1ECE72E31 != 1)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    API::String::create(&v6, &v7);
    v3 = v7;
    v7 = 0;
    v4 = v6;
    v5 = (uint64_t)v3;
    v6 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v0 = v5;
    qword_1ECE72E40 = v5;
    byte_1ECE72E31 = 1;
    if (v5)
      return *(_QWORD *)(v0 + 8);
    return 0;
  }
  v0 = qword_1ECE72E40;
  if (!qword_1ECE72E40)
    return 0;
  return *(_QWORD *)(v0 + 8);
}

uint64_t WKPageCopySessionState(void *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  unint64_t v6;
  uint64_t v7;
  WebKit *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebKit *v16;
  WTF::StringImpl *v17;
  _QWORD v19[2];
  __int128 v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  WebKit *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  WTF::StringImpl *v30;
  __int128 v31;
  __int128 v32;
  char v33;

  v4 = a2;
  v6 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if (a1)
    v7 = objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (WebKit *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E34DAEC0;
  *((_QWORD *)v8 + 1) = a1;
  *((_QWORD *)v8 + 2) = v6;
  *((_QWORD *)v8 + 3) = a3;
  v26 = v8;
  WebKit::WebPageProxy::sessionState(v7, &v26, (uint64_t)&v27);
  v9 = v26;
  v26 = 0;
  if (v9)
    (*(void (**)(WebKit *))(*(_QWORD *)v9 + 8))(v9);
  WebKit::encodeLegacySessionState((WebKit *)&v27, &v26);
  if ((v4 & 1) != 0)
  {
    v19[0] = v27;
    v12 = v28;
    v27 = 0;
    v28 = 0;
    v19[1] = v12;
    v20 = v29;
    v13 = v30;
    v30 = 0;
    v21 = v13;
    v22 = v31;
    v23 = v32;
    LODWORD(v31) = v31 & 0xFFFFFFFE;
    v24 = v33;
    API::SessionState::create((API::SessionState *)v19, &v25);
    if (v25)
      v11 = *(_QWORD *)(v25 + 8);
    else
      v11 = 0;
    v15 = v21;
    v21 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v14);
    v16 = v26;
    v26 = 0;
    if (v16)
      CFRelease(*((CFTypeRef *)v16 + 1));
  }
  else if (v26)
  {
    v11 = *((_QWORD *)v26 + 1);
  }
  else
  {
    v11 = 0;
  }
  v17 = v30;
  v30 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v10);
    else
      *(_DWORD *)v17 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v10);
  return v11;
}

uint64_t WKPageRestoreFromSessionState(OpaqueWKPage *a1, void *a2)
{
  if (a1 && *(_BYTE *)(-[OpaqueWKPage _apiObject](a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  return restoreFromSessionState(a1, a2, 1);
}

uint64_t restoreFromSessionState(OpaqueWKPage *a1, void *a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  BackForwardListItemState *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  WebKit::ViewSnapshot *v23;
  unsigned int v24;
  __int128 v25;
  WebKit::WebPageProxy *v26;
  uint64_t v27;
  StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  StringImpl *m_ptr;
  WTF::StringImpl *v32;
  SessionState v34;
  uint64_t v35;
  BackForwardListItemState *v36;
  uint64_t v37;
  __int128 v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  char v42;
  WebCore::SerializedScriptValue *v43;

  BYTE4(v38) = 0;
  v36 = 0;
  v37 = 0;
  LOBYTE(v38) = 0;
  v39 = 0;
  WTF::URL::invalidate((WTF::URL *)&v39);
  v42 = 1;
  v6 = objc_msgSend(a2, "_apiObject");
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  v8 = objc_msgSend(a2, "_apiObject");
  v9 = v8;
  if (v7 == 8)
  {
    if ((WebKit::decodeLegacySessionState(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)&v36) & 1) == 0)
      goto LABEL_35;
  }
  else
  {
    v11 = (uint64_t *)(v8 + 16);
    if ((BackForwardListItemState **)(v8 + 16) != &v36)
    {
      v12 = HIDWORD(v37);
      v13 = *(_DWORD *)(v8 + 28);
      if (HIDWORD(v37) <= v13)
      {
        if (v13 > v37)
        {
          WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v36, 0);
          WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v36, *(unsigned int *)(v9 + 28));
          v12 = HIDWORD(v37);
        }
      }
      else
      {
        WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct((WTF::StringImpl *)((char *)v36 + 312 * v13), (WTF::StringImpl *)((char *)v36 + 312 * HIDWORD(v37)));
        HIDWORD(v37) = v13;
        v12 = v13;
      }
      v14 = *v11;
      v15 = v36;
      if (v12)
      {
        v16 = v14 + 312 * v12;
        do
        {
          *(_OWORD *)v15 = *(_OWORD *)v14;
          WTF::String::operator=((WTF::StringImpl **)v15 + 2, (WTF::StringImpl *)(v14 + 16));
          WebKit::FrameState::operator=((uint64_t)v15 + 24, v14 + 24);
          *((_BYTE *)v15 + 272) = *(_BYTE *)(v14 + 272);
          v17 = *(unsigned int **)(v14 + 280);
          if (v17)
          {
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 + 1, v17));
          }
          v19 = (unsigned int *)*((_QWORD *)v15 + 35);
          *((_QWORD *)v15 + 35) = v17;
          if (v19)
          {
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              v43 = (WebCore::SerializedScriptValue *)v19;
              WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v43);
            }
          }
          *((_BYTE *)v15 + 288) = *(_BYTE *)(v14 + 288);
          *((_BYTE *)v15 + 296) = *(_BYTE *)(v14 + 296);
          v22 = *(_DWORD **)(v14 + 304);
          if (v22)
            ++*v22;
          v23 = (WebKit::ViewSnapshot *)*((_QWORD *)v15 + 38);
          *((_QWORD *)v15 + 38) = v22;
          if (v23)
            WTF::RefCounted<WebKit::ViewSnapshot>::deref(v23);
          v14 += 312;
          v15 = (BackForwardListItemState *)((char *)v15 + 312);
        }
        while (v14 != v16);
        v14 = *v11;
        v24 = HIDWORD(v37);
        v15 = v36;
      }
      else
      {
        v24 = 0;
      }
      WTF::VectorCopier<false,WebKit::BackForwardListItemState>::uninitializedCopy<WebKit::BackForwardListItemState>((WebKit::FrameState *)(v14 + 312 * v24), (WebKit::FrameState *)(v14 + 312 * *(unsigned int *)(v9 + 28)), (uint64_t)v15 + 312 * v24);
      HIDWORD(v37) = *(_DWORD *)(v9 + 28);
    }
    LODWORD(v38) = *(_DWORD *)(v9 + 32);
    BYTE4(v38) = *(_BYTE *)(v9 + 36);
    *((_QWORD *)&v38 + 1) = *(_QWORD *)(v9 + 40);
    WTF::String::operator=(&v39, (WTF::StringImpl *)(v9 + 48));
    v25 = *(_OWORD *)(v9 + 56);
    v41 = *(_OWORD *)(v9 + 72);
    v40 = v25;
    v42 = *(_BYTE *)(v9 + 88);
  }
  if (a1)
    v26 = (WebKit::WebPageProxy *)-[OpaqueWKPage _apiObject](a1, "_apiObject");
  else
    v26 = 0;
  v34.backForwardListState.items.m_buffer = v36;
  v27 = v37;
  v36 = 0;
  v37 = 0;
  *(_QWORD *)&v34.backForwardListState.items.m_capacity = v27;
  *(_OWORD *)&v34.backForwardListState.currentIndex.var0.__null_state_ = v38;
  v28 = (StringImpl *)v39;
  v39 = 0;
  v34.provisionalURL.m_string.m_impl.m_ptr = v28;
  *(_OWORD *)((char *)&v34.provisionalURL + 8) = v40;
  *(_OWORD *)&v34.provisionalURL.m_hostEnd = v41;
  LODWORD(v40) = v40 & 0xFFFFFFFE;
  v34.isAppInitiated = v42;
  WebKit::WebPageProxy::restoreFromSessionState(v26, &v34, a3, &v35);
  v30 = v35;
  v35 = 0;
  if (v30)
    CFRelease(*(CFTypeRef *)(v30 + 8));
  m_ptr = v34.provisionalURL.m_string.m_impl.m_ptr;
  v34.provisionalURL.m_string.m_impl.m_ptr = 0;
  if (m_ptr)
  {
    if (*(_DWORD *)m_ptr == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)m_ptr, v29);
    else
      *(_DWORD *)m_ptr -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v29);
LABEL_35:
  v32 = v39;
  v39 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v10);
    else
      *(_DWORD *)v32 -= 2;
  }
  return WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v10);
}

uint64_t WKPageRestoreFromSessionStateWithoutNavigation(OpaqueWKPage *a1, void *a2)
{
  if (a1 && *(_BYTE *)(-[OpaqueWKPage _apiObject](a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  return restoreFromSessionState(a1, a2, 0);
}

double WKPageGetTextZoomFactor(void *a1)
{
  return *(double *)(objc_msgSend(a1, "_apiObject") + 624);
}

double WKPageGetBackingScaleFactor(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = objc_msgSend(a1, "_apiObject");
  v2 = 692;
  if (!*(_BYTE *)(v1 + 696))
    v2 = 688;
  return *(float *)(v1 + v2);
}

uint64_t WKPageSetCustomBackingScaleFactor(void *a1, double a2)
{
  void *v3;
  float v4;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  v4 = a2;
  return WebKit::WebPageProxy::setCustomDeviceScaleFactor((uint64_t)a1, v4);
}

uint64_t WKPageSupportsTextZoom(void *a1)
{
  const WTF::String *v1;
  uint64_t v2;

  v2 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 280);
  if (v2)
    return WebCore::Image::supportsType((WebCore::Image *)(v2 + 224), v1) ^ 1;
  else
    return 0;
}

uint64_t WKPageSetTextZoomFactor(void *a1, double a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setTextZoomFactor((uint64_t)a1, a2);
}

double WKPageGetPageZoomFactor(_BYTE *a1)
{
  uint64_t v1;

  if (a1)
    a1 = (_BYTE *)objc_msgSend(a1, "_apiObject");
  v1 = 648;
  if (!a1[857])
    v1 = 632;
  return *(double *)&a1[v1];
}

_BYTE *WKPageSetPageZoomFactor(_BYTE *result, double a2)
{
  void *v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
    if (a2 > 0.0)
    {
      v4 = objc_msgSend(v3, "_apiObject");
      return (_BYTE *)WebKit::WebPageProxy::setPageZoomFactor(v4, a2);
    }
  }
  else if (a2 > 0.0)
  {
    v4 = 0;
    return (_BYTE *)WebKit::WebPageProxy::setPageZoomFactor(v4, a2);
  }
  return result;
}

uint64_t WKPageSetPageAndTextZoomFactors(void *a1, double a2, double a3)
{
  void *v5;

  if (a1)
  {
    v5 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v5, "_apiObject");
  }
  return WebKit::WebPageProxy::setPageAndTextZoomFactors((uint64_t)a1, a2, a3);
}

uint64_t WKPageSetScaleFactor(void *a1, double a2, double a3, double a4)
{
  void *v7;
  unint64_t v9;

  if (a1)
  {
    v7 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v7, "_apiObject");
  }
  v9 = (int)a3 | ((unint64_t)(int)a4 << 32);
  return WebKit::WebPageProxy::scalePage((uint64_t)a1, a2, (const WebCore::IntPoint *)&v9);
}

double WKPageGetScaleFactor(_BYTE *a1)
{
  uint64_t v1;

  if (a1)
    a1 = (_BYTE *)objc_msgSend(a1, "_apiObject");
  v1 = 672;
  if (!a1[857])
    v1 = 640;
  return *(double *)&a1[v1];
}

uint64_t WKPageSetUseFixedLayout(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setUseFixedLayout((uint64_t)a1, a2);
}

uint64_t WKPageSetFixedLayoutSize(void *a1, double a2, double a3)
{
  void *v5;
  unint64_t v7;

  if (a1)
  {
    v5 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v5, "_apiObject");
  }
  v7 = (int)a2 | ((unint64_t)(int)a3 << 32);
  return WebKit::WebPageProxy::setFixedLayoutSize((uint64_t)a1, (const WebCore::IntSize *)&v7);
}

uint64_t WKPageUseFixedLayout(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 705);
}

double WKPageFixedLayoutSize(void *a1)
{
  return (double)*(int *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 704);
}

uint64_t WKPageListenForLayoutMilestones(void *a1, __int16 a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::listenForLayoutMilestones((uint64_t)a1, a2 & 0x1B7);
}

uint64_t WKPageHasHorizontalScrollbar(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 848);
}

uint64_t WKPageHasVerticalScrollbar(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 849);
}

uint64_t WKPageSetSuppressScrollbarAnimations(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setSuppressScrollbarAnimations((uint64_t)a1, a2);
}

uint64_t WKPageAreScrollbarAnimationsSuppressed(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 708);
}

BOOL WKPageIsPinnedToLeftSide(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 788) != 0;
}

BOOL WKPageIsPinnedToRightSide(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 786) != 0;
}

BOOL WKPageIsPinnedToTopSide(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 785) != 0;
}

BOOL WKPageIsPinnedToBottomSide(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 787) != 0;
}

BOOL WKPageRubberBandsAtLeft(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 1715) != 0;
}

uint64_t WKPageSetRubberBandsAtLeft(void *a1, char a2)
{
  uint64_t result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 32) + 1715) = a2;
  return result;
}

BOOL WKPageRubberBandsAtRight(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 1713) != 0;
}

uint64_t WKPageSetRubberBandsAtRight(void *a1, char a2)
{
  uint64_t result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 32) + 1713) = a2;
  return result;
}

BOOL WKPageRubberBandsAtTop(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 1712) != 0;
}

uint64_t WKPageSetRubberBandsAtTop(void *a1, char a2)
{
  uint64_t result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 32) + 1712) = a2;
  return result;
}

BOOL WKPageRubberBandsAtBottom(void *a1)
{
  return *(_BYTE *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 1714) != 0;
}

uint64_t WKPageSetRubberBandsAtBottom(void *a1, char a2)
{
  uint64_t result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(*(_QWORD *)(result + 32) + 1714) = a2;
  return result;
}

uint64_t WKPageVerticalRubberBandingIsEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 852);
}

uint64_t WKPageSetEnableVerticalRubberBanding(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setEnableVerticalRubberBanding((uint64_t)a1, a2);
}

uint64_t WKPageHorizontalRubberBandingIsEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 853);
}

uint64_t WKPageSetEnableHorizontalRubberBanding(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setEnableHorizontalRubberBanding((uint64_t)a1, a2);
}

uint64_t WKPageSetBackgroundExtendsBeyondPage(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setBackgroundExtendsBeyondPage((uint64_t)a1, a2);
}

uint64_t WKPageBackgroundExtendsBeyondPage(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 854);
}

_BYTE *WKPageSetPaginationMode(_BYTE *result, unsigned int a2)
{
  void *v3;
  uint64_t v4;

  v3 = result;
  if (result)
  {
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
  }
  if (a2 <= 4)
  {
    if (v3)
      v4 = objc_msgSend(v3, "_apiObject");
    else
      v4 = 0;
    return (_BYTE *)WebKit::WebPageProxy::setPaginationMode(v4, a2);
  }
  return result;
}

uint64_t WKPageGetPaginationMode(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  if (((*(_BYTE *)(v1 + 709) - 1) & 0xFC) != 0)
    return 0;
  else
    return (*(_BYTE *)(v1 + 709) - 1) + 1;
}

uint64_t WKPageSetPaginationBehavesLikeColumns(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setPaginationBehavesLikeColumns((uint64_t)a1, a2);
}

uint64_t WKPageGetPaginationBehavesLikeColumns(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 710);
}

uint64_t WKPageSetPageLength(void *a1, double a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setPageLength((uint64_t)a1, a2);
}

double WKPageGetPageLength(void *a1)
{
  return *(double *)(objc_msgSend(a1, "_apiObject") + 712);
}

uint64_t WKPageSetGapBetweenPages(void *a1, double a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setGapBetweenPages((uint64_t)a1, a2);
}

double WKPageGetGapBetweenPages(void *a1)
{
  return *(double *)(objc_msgSend(a1, "_apiObject") + 720);
}

uint64_t WKPageGetPaginationLineGridEnabled()
{
  return 0;
}

uint64_t WKPageGetPageCount(void *a1)
{
  return *(unsigned int *)(objc_msgSend(a1, "_apiObject") + 860);
}

BOOL WKPageCanDelete(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32);
  return *(_BYTE *)(v1 + 234) && *(_BYTE *)(v1 + 237) != 0;
}

uint64_t WKPageHasSelectedRange(void *a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 234);
}

uint64_t WKPageIsContentEditable(void *a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 237);
}

uint64_t WKPageSetMaintainsInactiveSelection(void *a1, char a2)
{
  uint64_t result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 600) = a2;
  return result;
}

uint64_t WKPageCenterSelectionInVisibleArea(void *a1)
{
  void *v1;

  if (a1)
  {
    v1 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  return WebKit::WebPageProxy::centerSelectionInVisibleArea((uint64_t)a1);
}

WTF::StringImpl *WKPageFindStringMatches(void *a1, void *a2, unsigned __int8 a3, int a4)
{
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v7 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v7 = (void *)objc_msgSend(v7, "_apiObject");
  }
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::findStringMatches((uint64_t)v7, &v10, a3, a4);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageGetImageForFindMatch(void *a1, int a2)
{
  uint64_t v4;
  int v6;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v4 = objc_msgSend(a1, "_apiObject");
  v6 = a2;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GetImageForFindMatch>(*(_QWORD *)(v4 + 208), &v6, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
}

uint64_t WKPageSelectFindMatch(void *a1, int a2)
{
  uint64_t v4;
  int v6;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v4 = objc_msgSend(a1, "_apiObject");
  v6 = a2;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::SelectFindMatch>(*(_QWORD *)(v4 + 208), &v6, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 1896), 0);
}

WTF::StringImpl *WKPageFindString(void *a1, void *a2, unsigned __int8 a3, int a4)
{
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v7 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v7 = (void *)objc_msgSend(v7, "_apiObject");
  }
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::findString((uint64_t)v7, &v10, a3, a4);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageHideFindUI(void *a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v2 = objc_msgSend(a1, "_apiObject");
  v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::HideFindUI>(*(_QWORD *)(v2 + 208), (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896), 0);
}

WTF::StringImpl *WKPageCountStringMatches(void *a1, void *a2, unsigned __int8 a3, int a4)
{
  void *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;

  v7 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v7 = (void *)objc_msgSend(v7, "_apiObject");
  }
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::countStringMatches((uint64_t)v7, &v10, a3, a4);
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_BYTE *WKPageSetPageContextMenuClient(_BYTE *result)
{
  if (result)
  {
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
  }
  return result;
}

uint64_t WKPageSetPageDiagnosticLoggingClient(void *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  result = WTF::fastMalloc((WTF *)0x38);
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_QWORD *)result = off_1E34D3B60;
  if (!a2)
    goto LABEL_10;
  v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    v6 = *a2;
    v7 = a2[1];
    *(_OWORD *)(result + 40) = a2[2];
  }
  else
  {
    if (v5 > 0)
      goto LABEL_10;
    if (v5)
    {
      __break(1u);
      return result;
    }
    v6 = *a2;
    v7 = a2[1];
    *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 4);
  }
  *(_OWORD *)(result + 8) = v6;
  *(_OWORD *)(result + 24) = v7;
LABEL_10:
  v8 = *(_QWORD *)(v3 + 128);
  *(_QWORD *)(v3 + 128) = result;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

_QWORD *WKPageSetPageFindClient(void *a1, __int128 *a2)
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD *result;
  _QWORD *v8;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  v4 = WTF::fastMalloc((WTF *)0x30);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)v4 = off_1E34DA828;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0)
        goto LABEL_9;
      __break(1u);
    }
    v5 = *a2;
    v6 = a2[1];
    *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 4);
    *(_OWORD *)(v4 + 8) = v5;
    *(_OWORD *)(v4 + 24) = v6;
  }
LABEL_9:
  v8 = (_QWORD *)v4;
  WebKit::WebPageProxy::setFindClient((uint64_t)v3, &v8);
  result = v8;
  if (v8)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

_QWORD *WKPageSetPageFindMatchesClient(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *result;
  _QWORD *v7;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  v4 = WTF::fastMalloc((WTF *)0x28);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)v4 = off_1E34DA870;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0)
        goto LABEL_9;
      __break(1u);
    }
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(v4 + 24) = v5;
  }
LABEL_9:
  v7 = (_QWORD *)v4;
  WebKit::WebPageProxy::setFindMatchesClient((uint64_t)v3, &v7);
  result = v7;
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

WTF *WKPageSetPageInjectedBundleClient(void *a1, int *a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setInjectedBundleClient((uint64_t)a1, a2);
}

_QWORD *WKPageSetPageFormClient(void *a1, __int128 *a2)
{
  void *v3;
  _QWORD *v4;
  __int128 v5;
  _QWORD *result;
  _QWORD *v7;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = 0;
  *v4 = off_1E34D36A8;
  if (a2)
  {
    if (*(_DWORD *)a2)
    {
      if ((*(_DWORD *)a2 & 0x80000000) == 0)
        goto LABEL_9;
      __break(1u);
    }
    v5 = *a2;
    v4[3] = *((_QWORD *)a2 + 2);
    *(_OWORD *)(v4 + 1) = v5;
  }
LABEL_9:
  v7 = v4;
  WebKit::WebPageProxy::setFormClient((uint64_t)v3, &v7);
  result = v7;
  if (v7)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

uint64_t WKPageSetPageLoaderClient(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;
  __int16 *v10;
  __int16 v11;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (_QWORD *)objc_msgSend(v3, "_apiObject");
  }
  v4 = WTF::fastMalloc((WTF *)0x168);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *(_OWORD *)(v4 + 344) = 0u;
  *(_QWORD *)v4 = off_1E34DA8A0;
  if (a2)
  {
    v5 = *a2;
    if ((_DWORD)v5 == 6)
    {
      v6 = a2;
      v7 = 352;
    }
    else
    {
      if ((int)v5 > 5)
        goto LABEL_11;
      if (v5 >= 7)
      {
        __break(1u);
LABEL_76:
        JUMPOUT(0x19740B648);
      }
      v7 = qword_1978D0A20[v5];
      v6 = a2;
    }
    memcpy((void *)(v4 + 8), v6, v7);
  }
LABEL_11:
  if (*(_QWORD *)(v4 + 56))
  {
    __break(0xC471u);
    goto LABEL_76;
  }
  if (*(_QWORD *)(v4 + 80))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B668);
  }
  if (*(_QWORD *)(v4 + 88))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B688);
  }
  if (*(_QWORD *)(v4 + 96))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B6A8);
  }
  if (*(_QWORD *)(v4 + 112))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B6C8);
  }
  if (*(_QWORD *)(v4 + 120))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B6E8);
  }
  if (*(_QWORD *)(v4 + 128))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B708);
  }
  if (*(_QWORD *)(v4 + 136))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B728);
  }
  if (*(_QWORD *)(v4 + 144))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B748);
  }
  if (*(_QWORD *)(v4 + 152))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B768);
  }
  if (*(_QWORD *)(v4 + 160))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B788);
  }
  if (*(_QWORD *)(v4 + 168))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B7A8);
  }
  if (*(_QWORD *)(v4 + 176))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B7C8);
  }
  if (*(_QWORD *)(v4 + 184))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B7E8);
  }
  if (*(_QWORD *)(v4 + 208))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B808);
  }
  if (*(_QWORD *)(v4 + 216))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B828);
  }
  if (*(_QWORD *)(v4 + 224))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B848);
  }
  if (*(_QWORD *)(v4 + 232))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B868);
  }
  if (*(_QWORD *)(v4 + 240))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B888);
  }
  if (*(_QWORD *)(v4 + 248))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B8A8);
  }
  if (*(_QWORD *)(v4 + 256))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B8C8);
  }
  if (*(_QWORD *)(v4 + 264))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B8E8);
  }
  if (*(_QWORD *)(v4 + 272))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B908);
  }
  if (*(_QWORD *)(v4 + 288))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B928);
  }
  if (*(_QWORD *)(v4 + 296))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B948);
  }
  if (*(_QWORD *)(v4 + 304))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B968);
  }
  if (*(_QWORD *)(v4 + 336))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B988);
  }
  if (*(_QWORD *)(v4 + 344))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B9A8);
  }
  if (*(_QWORD *)(v4 + 352))
  {
    __break(0xC471u);
    JUMPOUT(0x19740B9C8);
  }
  v11 = 0;
  if (*(_QWORD *)(v4 + 104))
  {
    v11 = 2;
    v8 = v3[26];
    v10 = &v11;
    WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ListenForLayoutMilestones>(v8, &v10, *(_QWORD *)(v3[4] + 1896), 0);
  }
  result = v3[7];
  v3[7] = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageSetPagePolicyClient(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t result;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (_QWORD *)objc_msgSend(v3, "_apiObject");
  }
  v4 = WTF::fastMalloc((WTF *)0x50);
  *(_OWORD *)(v4 + 8) = 0u;
  v5 = (_OWORD *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)v4 = off_1E34DA918;
  if (a2)
  {
    v6 = *a2;
    if ((_DWORD)v6 == 2)
    {
      *v5 = *(_OWORD *)a2;
      v7 = *((_OWORD *)a2 + 1);
      v8 = *((_OWORD *)a2 + 2);
      v9 = *((_OWORD *)a2 + 3);
      *(_QWORD *)(v4 + 72) = *((_QWORD *)a2 + 8);
      *(_OWORD *)(v4 + 40) = v8;
      *(_OWORD *)(v4 + 56) = v9;
      *(_OWORD *)(v4 + 24) = v7;
    }
    else if ((int)v6 <= 1)
    {
      if (v6 >= 3)
      {
        __break(1u);
LABEL_17:
        JUMPOUT(0x19740BAECLL);
      }
      memcpy(v5, a2, constinit_11[v6]);
    }
  }
  if (*(_QWORD *)(v4 + 48))
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  result = v3[8];
  v3[8] = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageRunBeforeUnloadConfirmPanelResultListenerGetTypeID()
{
  return 97;
}

uint64_t WKPageRunBeforeUnloadConfirmPanelResultListenerCall(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), a2);
}

uint64_t WKPageRunJavaScriptAlertResultListenerGetTypeID()
{
  return 98;
}

uint64_t WKPageRunJavaScriptAlertResultListenerCall(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16));
}

uint64_t WKPageRunJavaScriptConfirmResultListenerGetTypeID()
{
  return 99;
}

uint64_t WKPageRunJavaScriptConfirmResultListenerCall(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_msgSend(a1, "_apiObject");
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), a2);
}

uint64_t WKPageRunJavaScriptPromptResultListenerGetTypeID()
{
  return 100;
}

WTF::StringImpl *WKPageRunJavaScriptPromptResultListenerCall(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageRequestStorageAccessConfirmResultListenerGetTypeID()
{
  return 93;
}

uint64_t WKPageRequestStorageAccessConfirmResultListenerCall(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, "_apiObject");
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void WKPageSetPageUIClient(void *a1, unsigned int *a2)
{
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  size_t v8;
  _QWORD *v9;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x288);
  bzero(v4 + 1, 0x280uLL);
  *v4 = off_1E34DA950;
  if (!a2)
    goto LABEL_11;
  v5 = *a2;
  if ((_DWORD)v5 == 19)
  {
    v6 = v4 + 1;
    v7 = a2;
    v8 = 640;
  }
  else
  {
    if ((int)v5 > 18)
      goto LABEL_11;
    if (v5 >= 0x14)
    {
      __break(1u);
      return;
    }
    v8 = qword_1978D0A70[v5];
    v6 = v4 + 1;
    v7 = a2;
  }
  memcpy(v6, v7, v8);
LABEL_11:
  v9 = v4;
  WebKit::WebPageProxy::setUIClient((uint64_t)v3, (uint64_t *)&v9);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
}

void *WKPageSetPageNavigationClient(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (_QWORD *)objc_msgSend(v3, "_apiObject");
  }
  v4 = WTF::fastMalloc((WTF *)0xF0);
  *(_OWORD *)(v4 + 8) = 0u;
  result = (void *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_QWORD *)(v4 + 232) = 0;
  *(_QWORD *)v4 = off_1E34DAEE8;
  if (a2)
  {
    v6 = *a2;
    if ((_DWORD)v6 == 3)
    {
      v7 = *(_OWORD *)a2;
      v8 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v4 + 24) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(v4 + 40) = v8;
      *(_OWORD *)result = v7;
      v9 = *((_OWORD *)a2 + 3);
      v10 = *((_OWORD *)a2 + 4);
      v11 = *((_OWORD *)a2 + 6);
      *(_OWORD *)(v4 + 88) = *((_OWORD *)a2 + 5);
      *(_OWORD *)(v4 + 104) = v11;
      *(_OWORD *)(v4 + 56) = v9;
      *(_OWORD *)(v4 + 72) = v10;
      v12 = *((_OWORD *)a2 + 7);
      v13 = *((_OWORD *)a2 + 8);
      v14 = *((_OWORD *)a2 + 10);
      *(_OWORD *)(v4 + 152) = *((_OWORD *)a2 + 9);
      *(_OWORD *)(v4 + 168) = v14;
      *(_OWORD *)(v4 + 120) = v12;
      *(_OWORD *)(v4 + 136) = v13;
      v15 = *((_OWORD *)a2 + 11);
      v16 = *((_OWORD *)a2 + 12);
      v17 = *((_OWORD *)a2 + 13);
      *(_QWORD *)(v4 + 232) = *((_QWORD *)a2 + 28);
      *(_OWORD *)(v4 + 200) = v16;
      *(_OWORD *)(v4 + 216) = v17;
      *(_OWORD *)(v4 + 184) = v15;
    }
    else if ((int)v6 <= 2)
    {
      if (v6 >= 4)
      {
        __break(1u);
        return result;
      }
      memcpy(result, a2, constinit_28[v6]);
    }
  }
  result = (void *)v3[9];
  v3[9] = v4;
  if (result)
    return (void *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WKPageSetPageStateClient(void *a1, __int128 *a2)
{
  void *v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int *result;
  unsigned int *v16;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  if (!a2)
    goto LABEL_8;
  v4 = WTF::fastMalloc((WTF *)0xC8);
  v5 = (_OWORD *)(v4 + 16);
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_QWORD *)v4 = off_1E34DADB0;
  if (*(_DWORD *)a2)
  {
    *(_QWORD *)(v4 + 192) = 0;
    *(_OWORD *)(v4 + 160) = 0uLL;
    *(_OWORD *)(v4 + 176) = 0uLL;
    *(_OWORD *)(v4 + 128) = 0uLL;
    *(_OWORD *)(v4 + 144) = 0uLL;
    *(_OWORD *)(v4 + 96) = 0uLL;
    *(_OWORD *)(v4 + 112) = 0uLL;
    *(_OWORD *)(v4 + 64) = 0uLL;
    *(_OWORD *)(v4 + 80) = 0uLL;
    *(_OWORD *)(v4 + 32) = 0uLL;
    *(_OWORD *)(v4 + 48) = 0uLL;
    *v5 = 0uLL;
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
    {
      __break(1u);
LABEL_8:
      v16 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    v6 = *a2;
    v7 = a2[1];
    v8 = a2[3];
    *(_OWORD *)(v4 + 48) = a2[2];
    *(_OWORD *)(v4 + 64) = v8;
    *v5 = v6;
    *(_OWORD *)(v4 + 32) = v7;
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2[7];
    *(_OWORD *)(v4 + 112) = a2[6];
    *(_OWORD *)(v4 + 128) = v11;
    *(_OWORD *)(v4 + 80) = v9;
    *(_OWORD *)(v4 + 96) = v10;
    v12 = a2[8];
    v13 = a2[9];
    v14 = a2[10];
    *(_QWORD *)(v4 + 192) = *((_QWORD *)a2 + 22);
    *(_OWORD *)(v4 + 160) = v13;
    *(_OWORD *)(v4 + 176) = v14;
    *(_OWORD *)(v4 + 144) = v12;
  }
  v16 = (unsigned int *)v4;
LABEL_11:
  WebKit::WebPageProxy::setPageLoadStateObserver((uint64_t)v3, &v16);
  result = v16;
  if (v16)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
  return result;
}

WTF::StringImpl *WKPageRunJavaScriptInMainFrame(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  WebKit *v8;
  char shouldEvaluateJavaScriptWithoutTransientActivation;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  API::ContentWorld *v12;
  WebKit *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  API::ContentWorld *v19;
  WTF::StringImpl *v20;
  __int128 v21;
  __int128 v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  char v25;
  WTF::StringImpl *v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  _BYTE v34[24];

  v7 = a1;
  if (a1)
  {
    v8 = (WebKit *)objc_msgSend(a1, "_apiObject");
    if (*((_BYTE *)v8 + 1290))
      crashBecausePageIsSuspended();
    shouldEvaluateJavaScriptWithoutTransientActivation = WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(v8);
    v7 = (void *)objc_msgSend(v7, "_apiObject");
    if (a2)
      goto LABEL_4;
  }
  else
  {
    shouldEvaluateJavaScriptWithoutTransientActivation = WebKit::shouldEvaluateJavaScriptWithoutTransientActivation(0);
    if (a2)
LABEL_4:
      objc_msgSend(a2, "_apiObject");
  }
  WTF::String::isolatedCopy();
  v20 = 0;
  WTF::URL::invalidate((WTF::URL *)&v20);
  v10 = v23;
  v23 = 0;
  v24 = v10;
  v25 = 0;
  v11 = v20;
  v20 = 0;
  v26 = v11;
  v27 = v21;
  v28 = v22;
  LODWORD(v21) = v21 & 0xFFFFFFFE;
  v29 = 0;
  LOBYTE(v30) = 0;
  v31 = 0;
  v32 = 1;
  v33 = shouldEvaluateJavaScriptWithoutTransientActivation;
  v12 = (API::ContentWorld *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v12 = off_1E34DB070;
  *((_QWORD *)v12 + 1) = a3;
  *((_QWORD *)v12 + 2) = a4;
  v19 = v12;
  v34[0] = 0;
  v34[16] = 0;
  v13 = API::ContentWorld::pageContentWorld(v12);
  WebKit::WebPageProxy::runJavaScriptInFrameInScriptWorld((uint64_t)v7, (uint64_t *)&v24, (uint64_t)v34, (uint64_t)v13, (uint64_t *)&v19);
  if (v19)
    (*(void (**)(API::ContentWorld *))(*(_QWORD *)v19 + 8))(v19);
  if (v31 && v30)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v14);
  v15 = v26;
  v26 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v20;
  v20 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageRunJavaScriptInMainFrame_b(void *a1, void *a2, void *aBlock)
{
  void *v6;

  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v6 = _Block_copy(aBlock);
  return WKPageRunJavaScriptInMainFrame(a1, a2, (uint64_t)v6, (uint64_t)callRunJavaScriptBlockAndRelease);
}

void callRunJavaScriptBlockAndRelease(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  a3[2](a3, a1, a2);
  _Block_release(a3);
}

uint64_t WKPageRenderTreeExternalRepresentation(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char v9;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (_QWORD *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DAE98;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[26], (uint64_t)&v9, (uint64_t *)&v8, *(_QWORD *)(v5[4] + 1896), 0, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageGetSourceForFrame(_QWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  __int128 v11;
  __int128 *v12;

  v7 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v7 = (_QWORD *)objc_msgSend(v7, "_apiObject");
  }
  if (a2)
    a2 = (_OWORD *)objc_msgSend(a2, "_apiObject");
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DAE98;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  v11 = a2[17];
  v12 = &v11;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSourceForFrame,WTF::CompletionHandler<void ()(WTF::String const&)>>(v7[26], (uint64_t **)&v12, (uint64_t *)&v10, *(_QWORD *)(v7[4] + 1896), 0, 1);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageGetContentsAsString(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char v9;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (_QWORD *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DAE98;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetContentsAsString,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[26], &v9, (uint64_t *)&v8, *(_QWORD *)(v5[4] + 1896), 0, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageGetBytecodeProfile(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char v9;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (_QWORD *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DAE98;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetBytecodeProfile,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[26], (uint64_t)&v9, (uint64_t *)&v8, *(_QWORD *)(v5[4] + 1896), 0, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageGetSamplingProfilerOutput(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char v9;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (_QWORD *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DAE98;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetSamplingProfilerOutput,WTF::CompletionHandler<void ()(WTF::String const&)>>(v5[26], (uint64_t)&v9, (uint64_t *)&v8, *(_QWORD *)(v5[4] + 1896), 0, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageGetSelectionAsWebArchiveData(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (void *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB098;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebPageProxy::getSelectionAsWebArchiveData((uint64_t)v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_BYTE *WKPageGetContentsAsMHTMLData(_BYTE *result)
{
  if (result)
  {
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
  }
  return result;
}

uint64_t WKPageForceRepaint(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (void *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB0C0;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebPageProxy::updateRenderingWithForcedRepaint((uint64_t)v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WKPageCopyPendingAPIRequestURL(void *a1)
{
  uint64_t v1;
  WebKit *v3;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32);
  if (*(_QWORD *)(v1 + 984) && (API::URL::create((API::URL *)(v1 + 984), &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKPageCopyActiveURL(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 968), &v5);
  if (!v5)
    return 0;
  API::URL::create((API::URL *)&v5, &v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WKPageCopyProvisionalURL(void *a1)
{
  uint64_t v1;
  WebKit *v3;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32);
  if (*(_QWORD *)(v1 + 992) && (API::URL::create((API::URL *)(v1 + 992), &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKPageCopyCommittedURL(void *a1)
{
  uint64_t v1;
  WebKit *v3;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32);
  if (*(_QWORD *)(v1 + 1000) && (API::URL::create((API::URL *)(v1 + 1000), &v3), v3))
    return *((_QWORD *)v3 + 1);
  else
    return 0;
}

uint64_t WKPageCopyStandardUserAgentWithApplicationName(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  WTF::String::isolatedCopy();
  WebCore::standardUserAgentWithApplicationName();
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v1);
    else
      *(_DWORD *)v5 -= 2;
  }
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  return v2;
}

WTF::StringImpl *WKPageValidateCommand(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;

  v7 = a1;
  if (a1 && *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (v7)
    v7 = (void *)objc_msgSend(v7, "_apiObject");
  v8 = v14;
  if (v14)
    *(_DWORD *)v14 += 2;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v9 = &off_1E34DB0E8;
  v9[1] = a3;
  v9[2] = a4;
  v9[3] = v8;
  v13 = v9;
  WebKit::WebPageProxy::validateCommand((uint64_t)v7, (uint64_t *)&v14, (uint64_t *)&v13);
  v11 = (uint64_t)v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageExecuteCommand(void *a1, void *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  v3 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v3 = (void *)objc_msgSend(v3, "_apiObject");
  }
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  v7 = 0;
  WebKit::WebPageProxy::executeEditCommand((WebKit::WebPageProxy *)v3, &v8, (const WTF::String *)&v7);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageComputePagesForPrinting(void *a1, void *a2, uint64_t a3, uint64_t a4, float a5, float a6, float a7)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  _QWORD *v19;
  _DWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  char v23;

  v13 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v13 = (void *)objc_msgSend(v13, "_apiObject");
  }
  v14 = objc_msgSend(a2, "_apiObject");
  v15 = *(_QWORD *)(v14 + 272);
  v16 = *(_QWORD *)(v14 + 280);
  v22 = 0;
  v21 = 0;
  v23 = 0;
  *(float *)v20 = a5;
  *(float *)&v20[1] = a6;
  *(float *)&v20[2] = a7;
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v17 = off_1E34DB110;
  v17[1] = a4;
  v17[2] = a3;
  v19 = v17;
  WebKit::WebPageProxy::computePagesForPrinting((uint64_t)v13, v15, v16, (uint64_t)v20, (uint64_t)&v19);
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageDrawPagesToPDF(void *a1, void *a2, int a3, int a4, uint64_t a5, uint64_t a6, float a7, float a8, float a9)
{
  void *v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD *v20;
  _DWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  char v24;

  v17 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v17 = (void *)objc_msgSend(v17, "_apiObject");
  }
  if (a2)
    a2 = (void *)objc_msgSend(a2, "_apiObject");
  v23 = 0;
  v22 = 0;
  v24 = 0;
  *(float *)v21 = a7;
  *(float *)&v21[1] = a8;
  *(float *)&v21[2] = a9;
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v18 = off_1E34DB138;
  v18[1] = a6;
  v18[2] = a5;
  v20 = v18;
  WebKit::WebPageProxy::drawPagesToPDF((uint64_t)v17, (uint64_t)a2, (uint64_t)v21, a3, a4, (uint64_t *)&v20);
  result = (uint64_t)v20;
  v20 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void WKPageBeginPrinting(void *a1, void *a2, float a3, float a4, float a5)
{
  void *v9;
  WebKit::WebFrameProxy *v10;
  PrintInfo v11;

  v9 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v9 = (void *)objc_msgSend(v9, "_apiObject");
  }
  if (a2)
    v10 = (WebKit::WebFrameProxy *)objc_msgSend(a2, "_apiObject");
  else
    v10 = 0;
  memset(&v11.margin, 0, 17);
  v11.pageSetupScaleFactor = a3;
  v11.availablePaperWidth = a4;
  v11.availablePaperHeight = a5;
  WebKit::WebPageProxy::beginPrinting((WebKit::WebPageProxy *)v9, v10, &v11);
}

uint64_t WKPageEndPrinting(void *a1)
{
  void *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v1 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v1 = (void *)objc_msgSend(v1, "_apiObject");
  }
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v2 = off_1E34DB160;
  v4 = v2;
  WebKit::WebPageProxy::endPrinting((uint64_t)v1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  v4 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageGetIsControlledByAutomation(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 826);
}

unsigned int *WKPageSetControlledByAutomation(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setControlledByAutomation((unsigned int *)a1, a2);
}

Inspector::RemoteInspectionTarget *WKPageGetAllowsRemoteInspection(void *a1)
{
  Inspector::RemoteInspectionTarget *result;

  result = *(Inspector::RemoteInspectionTarget **)(objc_msgSend(a1, "_apiObject") + 1080);
  if (result)
    return (Inspector::RemoteInspectionTarget *)Inspector::RemoteInspectionTarget::inspectable(result);
  return result;
}

void WKPageSetAllowsRemoteInspection(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  WebKit::WebPageProxy::setInspectable((WebKit::WebPageProxy *)a1, a2);
}

uint64_t WKPageSetMediaVolume(void *a1, float a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setMediaVolume((uint64_t)a1, a2);
}

uint64_t WKPageSetMuted(void *a1, char a2)
{
  void *v3;
  char v4;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  if ((a2 & 2) != 0)
    v4 = a2 & 1 | 6;
  else
    v4 = a2 & 1;
  return WebKit::WebPageProxy::setMuted((uint64_t)a1, v4 & 0xF7u | (8 * ((a2 & 4) != 0)));
}

_BYTE *WKPageSetMediaCaptureEnabled(_BYTE *a1, char a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (_BYTE *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setMediaCaptureEnabled(a1, a2);
}

uint64_t WKPageGetMediaCaptureEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 890);
}

_BYTE *WKPageDidAllowPointerLock(_BYTE *result)
{
  if (result)
  {
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
  }
  return result;
}

void WKPageClearUserMediaState(void *a1)
{
  WebKit::UserMediaPermissionRequestManagerProxy *v2;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v2 = *(WebKit::UserMediaPermissionRequestManagerProxy **)(objc_msgSend(a1, "_apiObject") + 504);
  if (v2)
    WebKit::UserMediaPermissionRequestManagerProxy::clearCachedState(v2);
}

_BYTE *WKPageDidDenyPointerLock(_BYTE *result)
{
  if (result)
  {
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
  }
  return result;
}

WTF::StringImpl *WKPagePostMessageToInjectedBundle(void *a1, void *a2, void *a3)
{
  WebKit::WebPageProxy *v5;
  CFTypeRef *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;

  if (a1)
  {
    v5 = (WebKit::WebPageProxy *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  if (a3)
    v6 = (CFTypeRef *)objc_msgSend(a3, "_apiObject");
  else
    v6 = 0;
  WebKit::WebPageProxy::postMessageToInjectedBundle(v5, &v9, v6);
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageCopyRelatedPages(void *a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  WebKit *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  WebKit::WebProcessProxy::pages(*(WebKit::WebProcessProxy **)(objc_msgSend(a1, "_apiObject") + 208), (uint64_t)&v15);
  if (v16)
  {
    v3 = v15;
    v4 = 8 * v16;
    do
    {
      v5 = *v3;
      CFRetain(*(CFTypeRef *)(*v3 + 8));
      if (v5 == objc_msgSend(a1, "_apiObject"))
      {
        CFRelease(*(CFTypeRef *)(v5 + 8));
      }
      else
      {
        v6 = HIDWORD(v18);
        if (HIDWORD(v18) == (_DWORD)v18)
        {
          v7 = HIDWORD(v18) + ((unint64_t)HIDWORD(v18) >> 2);
          if (v7 >= 0x10)
            v8 = v7 + 1;
          else
            v8 = 16;
          if (v8 <= (unint64_t)HIDWORD(v18) + 1)
            v9 = HIDWORD(v18) + 1;
          else
            v9 = v8;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v17, v9);
          v6 = HIDWORD(v18);
        }
        *(_QWORD *)(v17 + 8 * v6) = v5;
        HIDWORD(v18) = v6 + 1;
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v15, v2);
  v10 = (WebKit *)API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v10 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v10);
  *(_QWORD *)v10 = &off_1E34CC2F8;
  *((_QWORD *)v10 + 2) = v17;
  v11 = v18;
  v17 = 0;
  v18 = 0;
  *((_QWORD *)v10 + 3) = v11;
  v12 = *((_QWORD *)v10 + 1);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v13);
  return v12;
}

uint64_t WKPageLookUpFrameFromHandle(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = objc_msgSend(a2, "_apiObject");
  result = WebKit::WebFrameProxy::webFrame(*(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
  if (result)
  {
    v6 = *(_QWORD *)(result + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
        v6 = v7 - 16;
      else
        v6 = 0;
    }
    if (v6 == v3)
      return *(_QWORD *)(result + 8);
    else
      return 0;
  }
  return result;
}

uint64_t WKPageSetMayStartMediaWhenInWindow(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setMayStartMediaWhenInWindow((uint64_t)a1, a2);
}

_BYTE *WKPageSelectContextMenuItem(_BYTE *result)
{
  if (result)
  {
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    if (result[1290])
      crashBecausePageIsSuspended();
  }
  return result;
}

uint64_t WKPageGetScrollPinningBehavior(void *a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 1728);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

uint64_t WKPageSetScrollPinningBehavior(void *a1, int a2)
{
  void *v3;
  unsigned __int8 v4;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    if (a2 == 2)
      v4 = 2;
    else
      v4 = a2 == 1;
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  else if (a2 == 2)
  {
    v4 = 2;
  }
  else
  {
    v4 = a2 == 1;
  }
  return WebKit::WebPageProxy::setScrollPinningBehavior((uint64_t)a1, v4);
}

uint64_t WKPageGetAddsVisitedLinks(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 825);
}

uint64_t WKPageSetAddsVisitedLinks(void *a1, char a2)
{
  uint64_t result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 825) = a2;
  return result;
}

uint64_t WKPageIsPlayingAudio(void *a1)
{
  return *(_DWORD *)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32) + 808) & 1;
}

uint64_t WKPageGetMediaState(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 32);
  return (*(_DWORD *)(v1 + 1672) >> 12) & 0xC0 | (*(_DWORD *)(v1 + 1672) >> 9) & 0x3C | (*(_DWORD *)(v1 + 1672) >> 13) & 0x300 | (*(_DWORD *)(v1 + 808) | *(_DWORD *)(v1 + 1672)) & 3u;
}

IPC::Encoder *WKPageClearWheelEventTestMonitor(void *a1)
{
  IPC::Encoder *result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = *(IPC::Encoder **)(objc_msgSend(a1, "_apiObject") + 1448);
  if (result)
    return WebKit::WebPageProxyTesting::clearWheelEventTestMonitor(result);
  return result;
}

uint64_t WKPageCallAfterNextPresentationUpdate(void *a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (void *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB188;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebPageProxy::callAfterNextPresentationUpdate((uint64_t)v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WKPageSetIgnoresViewportScaleLimits(void *a1, int a2)
{
  void *v3;

  if (a1)
  {
    v3 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v3, "_apiObject");
  }
  return WebKit::WebPageProxy::setForceAlwaysUserScalable((uint64_t)a1, a2);
}

uint64_t WKPageGetProcessIdentifier(uint64_t a1)
{
  uint64_t v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  if (*(_BYTE *)(a1 + 729))
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 136);
  if (!v2)
    return 0;
  else
    return *(unsigned int *)(v2 + 108);
}

uint64_t WKPageGetGPUProcessIdentifier(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 24))
       + 22);
  if (v1 && (v2 = *(_QWORD *)(v1 + 136)) != 0)
    return *(unsigned int *)(v2 + 108);
  else
    return 0;
}

uint64_t WKPageGetApplicationManifest(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char v9;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (_QWORD *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB1B0;
  v6[1] = a3;
  v6[2] = a2;
  v8 = v6;
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetApplicationManifest,WTF::CompletionHandler<void ()(std::optional<WebCore::ApplicationManifest> const&)>>(v5[26], (uint64_t)&v9, (uint64_t *)&v8, *(_QWORD *)(v5[4] + 1896), 0, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageDumpPrivateClickMeasurement(void *a1, uint64_t (*a2)(_QWORD, uint64_t), uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v9;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v5 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v5)
    return a2(0, a3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB1D8;
  v6[1] = a3;
  v6[2] = a2;
  v9 = v6;
  WebKit::WebPageProxyTesting::dumpPrivateClickMeasurement(v5, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageClearPrivateClickMeasurement(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v9;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v5 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v5)
    return a2(a3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB200;
  v6[1] = a3;
  v6[2] = a2;
  v9 = v6;
  WebKit::WebPageProxyTesting::clearPrivateClickMeasurement(v5, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageSetPrivateClickMeasurementOverrideTimerForTesting(void *a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v11;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v7 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v7)
    return a3(a4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB228;
  v8[1] = a4;
  v8[2] = a3;
  v11 = v8;
  WebKit::WebPageProxyTesting::setPrivateClickMeasurementOverrideTimer(v7, a2, (uint64_t *)&v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageMarkAttributedPrivateClickMeasurementsAsExpiredForTesting(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v9;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v5 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v5)
    return a2(a3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB250;
  v6[1] = a3;
  v6[2] = a2;
  v9 = v6;
  WebKit::WebPageProxyTesting::markAttributedPrivateClickMeasurementsAsExpired(v5, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageSetPrivateClickMeasurementEphemeralMeasurementForTesting(void *a1, char a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v11;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v7 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v7)
    return a3(a4);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB278;
  v8[1] = a4;
  v8[2] = a3;
  v11 = v8;
  WebKit::WebPageProxyTesting::setPrivateClickMeasurementEphemeralMeasurement(v7, a2, (uint64_t *)&v11);
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageSimulatePrivateClickMeasurementSessionRestart(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v9;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v5 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v5)
    return a2(a3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB2A0;
  v6[1] = a3;
  v6[2] = a2;
  v9 = v6;
  WebKit::WebPageProxyTesting::simulatePrivateClickMeasurementSessionRestart(v5, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting(void *a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v7 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v7)
    return (WTF::StringImpl *)a3(a4);
  if (a2)
  {
    v8 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v8)
      *(_DWORD *)v8 += 2;
  }
  else
  {
    v8 = 0;
  }
  v16 = v8;
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB2C8;
  v10[1] = a4;
  v10[2] = a3;
  v15 = v10;
  WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenPublicKeyURL(v7, (uint64_t *)v17, (uint64_t *)&v15);
  v12 = (uint64_t)v15;
  v15 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting(void *a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *result;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v7 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v7)
    return (WTF::StringImpl *)a3(a4);
  if (a2)
  {
    v8 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v8)
      *(_DWORD *)v8 += 2;
  }
  else
  {
    v8 = 0;
  }
  v16 = v8;
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB2F0;
  v10[1] = a4;
  v10[2] = a3;
  v15 = v10;
  WebKit::WebPageProxyTesting::setPrivateClickMeasurementTokenSignatureURL(v7, (uint64_t *)v17, (uint64_t *)&v15);
  v12 = (uint64_t)v15;
  v15 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting(void *a1, void *a2, void *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  _QWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  _QWORD *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22[5];
  WTF::StringImpl *v23;
  WTF::StringImpl *v24[5];

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v9 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v9)
    return (WTF::StringImpl *)a4(a5);
  if (a2)
  {
    v10 = *(WTF::StringImpl **)(objc_msgSend(a2, "_apiObject") + 16);
    if (v10)
      *(_DWORD *)v10 += 2;
  }
  else
  {
    v10 = 0;
  }
  v23 = v10;
  MEMORY[0x19AEABB0C](v24, &v23, 0);
  if (a3)
  {
    v12 = *(WTF::StringImpl **)(objc_msgSend(a3, "_apiObject") + 16);
    if (v12)
      *(_DWORD *)v12 += 2;
  }
  else
  {
    v12 = 0;
  }
  v21 = v12;
  MEMORY[0x19AEABB0C](v22, &v21, 0);
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = off_1E34DB318;
  v13[1] = a5;
  v13[2] = a4;
  v20 = v13;
  WebKit::WebPageProxyTesting::setPrivateClickMeasurementAttributionReportURLs(v9, (uint64_t *)v24, (uint64_t *)v22, (uint64_t *)&v20);
  v15 = (uint64_t)v20;
  v20 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v22[0];
  v22[0] = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v14);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v14);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = v24[0];
  v24[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageMarkPrivateClickMeasurementsAsExpiredForTesting(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v9;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v5 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v5)
    return a2(a3);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB340;
  v6[1] = a3;
  v6[2] = a2;
  v9 = v6;
  WebKit::WebPageProxyTesting::markPrivateClickMeasurementsAsExpired(v5, (uint64_t *)&v9);
  result = (uint64_t)v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WKPageSetPCMFraudPreventionValuesForTesting(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v13;
  _QWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v13 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v13)
    return (WTF::StringImpl *)a6(a7);
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
    if (a3)
      goto LABEL_5;
  }
  else
  {
    v26 = 0;
    if (a3)
    {
LABEL_5:
      objc_msgSend(a3, "_apiObject");
      WTF::String::isolatedCopy();
      if (a4)
        goto LABEL_6;
LABEL_31:
      v24 = 0;
      if (a5)
        goto LABEL_7;
LABEL_32:
      v23 = 0;
      goto LABEL_8;
    }
  }
  v25 = 0;
  if (!a4)
    goto LABEL_31;
LABEL_6:
  objc_msgSend(a4, "_apiObject");
  WTF::String::isolatedCopy();
  if (!a5)
    goto LABEL_32;
LABEL_7:
  objc_msgSend(a5, "_apiObject");
  WTF::String::isolatedCopy();
LABEL_8:
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = off_1E34DB368;
  v14[1] = a7;
  v14[2] = a6;
  v22 = v14;
  WebKit::WebPageProxyTesting::setPCMFraudPreventionValues(v13, (uint64_t *)&v26, (uint64_t *)&v25, (uint64_t *)&v24, (uint64_t *)&v23, (uint64_t *)&v22);
  v16 = (uint64_t)v22;
  v22 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v23;
  v23 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v19 = v24;
  v24 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  v20 = v25;
  v25 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v15);
    else
      *(_DWORD *)v20 -= 2;
  }
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPageSetPrivateClickMeasurementAppBundleIDForTesting(void *a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v7 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 1448);
  if (!v7)
    return (WTF::StringImpl *)a3(a4);
  if (a2)
  {
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v14 = 0;
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB390;
  v8[1] = a4;
  v8[2] = a3;
  v13 = v8;
  WebKit::WebPageProxyTesting::setPrivateClickMeasurementAppBundleID(v7, (uint64_t *)&v14, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

unsigned int *WKPageSetMockCameraOrientation(void *a1, uint64_t a2, const WTF::StringImpl *a3)
{
  void *v4;

  if (a1)
  {
    v4 = a1;
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    a1 = (void *)objc_msgSend(v4, "_apiObject");
  }
  return WebKit::WebPageProxy::setOrientationForMediaCapture((unsigned int *)a1, a2, a3);
}

uint64_t WKPageSetMockCaptureDevicesInterrupted(void *a1, char a2, char a3)
{
  WebKit::WebProcessPool *v6;
  uint64_t v7;
  char v9[2];

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v6 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 24));
  v7 = WebKit::WebProcessPool::ensureGPUProcess(v6);
  v9[0] = a2;
  v9[1] = a3;
  return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesInterrupted>(v7, v9, 0, 0);
}

uint64_t WKPageTriggerMockCaptureConfigurationChange(void *a1, char a2, char a3)
{
  WebCore::MockRealtimeMediaSourceCenter *v6;
  WebCore::MockRealtimeMediaSourceCenter *v7;
  WebKit::WebProcessPool *v8;
  uint64_t v9;
  uint64_t result;
  WebCore::MockRealtimeMediaSourceCenter *v11;
  char v12[2];

  if (a1)
  {
    v6 = (WebCore::MockRealtimeMediaSourceCenter *)objc_msgSend(a1, "_apiObject");
    if (*((_BYTE *)v6 + 1290))
      crashBecausePageIsSuspended();
    v7 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(v6);
    WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(v7);
    v8 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(objc_msgSend(a1, "_apiObject") + 48) + 24));
    v9 = WebKit::WebProcessPool::ensureGPUProcess(v8);
    v12[0] = a2;
    v12[1] = a3;
    return WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::TriggerMockCaptureConfigurationChange>(v9, v12, 0, 0);
  }
  else
  {
    v11 = (WebCore::MockRealtimeMediaSourceCenter *)WebCore::MockRealtimeMediaSourceCenter::singleton(0);
    result = WebCore::MockRealtimeMediaSourceCenter::triggerMockCaptureConfigurationChange(v11);
    __break(1u);
  }
  return result;
}

uint64_t WKPageLoadedSubresourceDomains(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  char v9;

  v5 = a1;
  if (a1)
  {
    if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
      crashBecausePageIsSuspended();
    v5 = (_QWORD *)objc_msgSend(v5, "_apiObject");
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB3B8;
  v6[1] = a3;
  v6[2] = a2;
  v8 = v6;
  v9 = 0;
  WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::WebPage::GetLoadedSubresourceDomains,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v5[26], (uint64_t)&v9, (uint64_t *)&v8, *(_QWORD *)(v5[4] + 1896), 0, 1);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKPageClearLoadedSubresourceDomains(void *a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  v2 = objc_msgSend(a1, "_apiObject");
  v4 = 0;
  return WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::ClearLoadedSubresourceDomains>(*(_QWORD *)(v2 + 208), (uint64_t)&v4, *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896), 0);
}

uint64_t WKPageSetMediaCaptureReportingDelayForTesting(void *a1, double a2)
{
  uint64_t result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = objc_msgSend(a1, "_apiObject");
  *(double *)(result + 992) = a2;
  return result;
}

WebKit::WebPageProxyTesting *WKPageDispatchActivityStateUpdateForTesting(void *a1)
{
  WebKit::WebPageProxyTesting *result;

  if (*(_BYTE *)(objc_msgSend(a1, "_apiObject") + 1290))
    crashBecausePageIsSuspended();
  result = *(WebKit::WebPageProxyTesting **)(objc_msgSend(a1, "_apiObject") + 1448);
  if (result)
    return (WebKit::WebPageProxyTesting *)WebKit::WebPageProxyTesting::dispatchActivityStateUpdate(result);
  return result;
}

IPC::Encoder *WKPageClearNotificationPermissionState(void *a1, void *a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPageProxy::clearNotificationPermissionState((WebKit::WebPageProxy *)a1, a2);
}

WTF::StringImpl *WKPageExecuteCommandForTesting(void *a1, void *a2, void *a3)
{
  WebKit::WebPageProxy *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (a1)
  {
    v5 = (WebKit::WebPageProxy *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  WebKit::WebPageProxy::executeEditCommand(v5, &v10, (const WTF::String *)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebKit::WebPageProxyTesting *WKPageIsEditingCommandEnabledForTesting(void *a1, void *a2)
{
  WebKit::WebPageProxyTesting *isEditingCommandEnabled;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  isEditingCommandEnabled = *(WebKit::WebPageProxyTesting **)(objc_msgSend(a1, "_apiObject") + 1448);
  if (isEditingCommandEnabled)
  {
    if (a2)
      objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
    isEditingCommandEnabled = (WebKit::WebPageProxyTesting *)WebKit::WebPageProxyTesting::isEditingCommandEnabled(isEditingCommandEnabled, (const WTF::String *)&v7);
    v5 = v7;
    v7 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return isEditingCommandEnabled;
}

WTF::StringImpl *WKPageSetPermissionLevelForTesting(void *a1, void *a2, char a3)
{
  WTF::StringImpl *result;
  WebKit::WebPageProxyTesting *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;

  result = (WTF::StringImpl *)objc_msgSend(a1, "_apiObject");
  v6 = (WebKit::WebPageProxyTesting *)*((_QWORD *)result + 181);
  if (v6)
  {
    if (a2)
      objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
    WebKit::WebPageProxyTesting::setPermissionLevel(v6, (const WTF::String *)&v8, a3);
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKPageConfigurationGetTypeID()
{
  return 87;
}

API::PageConfiguration *WKPageConfigurationCreate()
{
  API::PageConfiguration *v0;
  API::PageConfiguration *result;

  v0 = (API::PageConfiguration *)API::Object::newObject(0x1F0uLL, 87);
  result = API::PageConfiguration::PageConfiguration(v0);
  if (result)
    return (API::PageConfiguration *)*((_QWORD *)result + 1);
  return result;
}

uint64_t WKPageConfigurationGetContext(WebKit::WebProcessPool **a1)
{
  if (a1)
    a1 = (WebKit::WebProcessPool **)objc_msgSend(a1, "_apiObject");
  return *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(a1 + 3)
         + 1);
}

void WKPageConfigurationSetContext(void *a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
  {
LABEL_3:
    v2 = (CFTypeRef *)-[CFTypeRef _apiObject](v2, "_apiObject");
    CFRetain(v2[1]);
  }
LABEL_4:
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WKPageConfigurationGetPageGroup()
{
  return 0;
}

uint64_t WKPageConfigurationGetUserContentController(WebKit::WebUserContentControllerProxy **a1)
{
  if (a1)
    a1 = (WebKit::WebUserContentControllerProxy **)objc_msgSend(a1, "_apiObject");
  return *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebUserContentControllerProxy,&API::PageConfiguration::Data::createWebUserContentControllerProxy>::get(a1 + 4)
         + 1);
}

void WKPageConfigurationSetUserContentController(void *a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
  {
LABEL_3:
    v2 = (CFTypeRef *)-[CFTypeRef _apiObject](v2, "_apiObject");
    CFRetain(v2[1]);
  }
LABEL_4:
  v4 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v3 + 32) = v2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WKPageConfigurationGetPreferences(WebKit::WebPreferences **a1)
{
  if (a1)
    a1 = (WebKit::WebPreferences **)objc_msgSend(a1, "_apiObject");
  return *((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebPreferences,&API::PageConfiguration::Data::createWebPreferences>::get(a1 + 5)
         + 1);
}

void WKPageConfigurationSetPreferences(void *a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
  {
LABEL_3:
    v2 = (CFTypeRef *)-[CFTypeRef _apiObject](v2, "_apiObject");
    CFRetain(v2[1]);
  }
LABEL_4:
  v4 = *(_QWORD *)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WKPageConfigurationGetRelatedPage(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 136);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return *(_QWORD *)(v2 - 8);
  else
    return 0;
}

unsigned int *WKPageConfigurationSetRelatedPage(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  unsigned int v8;
  unsigned int v9;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_10:
    v5 = 0;
    goto LABEL_5;
  }
  v3 = 0;
  if (!a2)
    goto LABEL_10;
LABEL_3:
  v4 = objc_msgSend(a2, "_apiObject");
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 24), v4 + 16);
  v5 = *(unsigned int **)(v4 + 24);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
LABEL_5:
  result = *(unsigned int **)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v5;
  if (result)
  {
    do
    {
      v8 = __ldaxr(result);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, result));
    if (!v9)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WKPageConfigurationGetWebsiteDataStore(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return *((_QWORD *)API::PageConfiguration::websiteDataStore((API::PageConfiguration *)a1) + 1);
}

void WKPageConfigurationSetWebsiteDataStore(void *a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
  {
LABEL_3:
    v2 = (CFTypeRef *)-[CFTypeRef _apiObject](v2, "_apiObject");
    CFRetain(v2[1]);
  }
LABEL_4:
  v4 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WKPageConfigurationSetInitialCapitalizationEnabled(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 196) = a2;
  return result;
}

uint64_t WKPageConfigurationSetBackgroundCPULimit(void *a1, double a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(double *)(result + 208) = a2;
  *(_BYTE *)(result + 216) = 1;
  return result;
}

uint64_t WKPageConfigurationSetAllowTestOnlyIPC(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 200) = a2;
  return result;
}

uint64_t WKPageConfigurationSetPortsForUpgradingInsecureSchemeForTesting(uint64_t result, int a2, int a3)
{
  if (result)
    result = objc_msgSend((id)result, "_apiObject");
  if (*(_BYTE *)(result + 228))
  {
    *(_WORD *)(result + 224) = a2;
    *(_WORD *)(result + 226) = a3;
  }
  else
  {
    *(_DWORD *)(result + 224) = a2 | (a3 << 16);
    *(_BYTE *)(result + 228) = 1;
  }
  return result;
}

uint64_t WKPageGroupGetTypeID()
{
  return 0;
}

uint64_t WKPageGroupCreateWithIdentifier()
{
  return 0;
}

uint64_t WKPageGroupGetPreferences()
{
  return 0;
}

uint64_t WKPageGroupGetUserContentController()
{
  return 0;
}

uint64_t WKPreferencesGetTypeID()
{
  return 92;
}

uint64_t WKPreferencesCreate()
{
  WTF::StringImpl *v0;
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WebKit::WebPreferences *v7;

  v6 = 0;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebPreferences::createWithLegacyDefaults((WebKit::WebPreferences *)&v6, (const WTF::String *)&v5, (const WTF::String *)&v4, &v7);
  v1 = v4;
  v4 = 0;
  if (v1)
  {
    if (*(_DWORD *)v1 == 2)
      WTF::StringImpl::destroy(v1, v0);
    else
      *(_DWORD *)v1 -= 2;
  }
  v2 = v5;
  v5 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v0);
    else
      *(_DWORD *)v2 -= 2;
  }
  if (v7)
    return *((_QWORD *)v7 + 1);
  else
    return 0;
}

uint64_t WKPreferencesCreateWithIdentifier(void *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit::WebPreferences *v9;

  if (a1)
  {
    objc_msgSend(a1, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v8 = 0;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebKit::WebPreferences::createWithLegacyDefaults((WebKit::WebPreferences *)&v8, (const WTF::String *)&v7, (const WTF::String *)&v6, &v9);
  v2 = v6;
  v6 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v1);
    else
      *(_DWORD *)v2 -= 2;
  }
  v3 = v7;
  v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v1);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (v9)
    return *((_QWORD *)v9 + 1);
  else
    return 0;
}

WebKit::WebPreferences *WKPreferencesCreateCopy(void *a1)
{
  const WebKit::WebPreferences *v1;
  WebKit::WebPreferences *v2;
  WebKit::WebPreferences *result;

  if (a1)
    v1 = (const WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
  else
    v1 = 0;
  v2 = (WebKit::WebPreferences *)API::Object::newObject(0x70uLL, 92);
  result = WebKit::WebPreferences::WebPreferences(v2, v1);
  if (result)
    return (WebKit::WebPreferences *)*((_QWORD *)result + 1);
  return result;
}

uint64_t WKPreferencesStartBatchingUpdates(uint64_t result)
{
  int v1;

  if (result)
    result = objc_msgSend((id)result, "_apiObject");
  v1 = *(_DWORD *)(result + 104);
  if (!v1)
    *(_BYTE *)(result + 108) = 0;
  *(_DWORD *)(result + 104) = v1 + 1;
  return result;
}

_QWORD *WKPreferencesEndBatchingUpdates(_QWORD *result)
{
  int v1;

  if (result)
    result = (_QWORD *)objc_msgSend(result, "_apiObject");
  v1 = *((_DWORD *)result + 26) - 1;
  *((_DWORD *)result + 26) = v1;
  if (!v1)
  {
    if (*((_BYTE *)result + 108))
      return WebKit::WebPreferences::update(result);
  }
  return result;
}

uint64_t WKPreferencesCopyExperimentalFeatures(void *a1)
{
  uint64_t *v1;
  WebKit *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = WebKit::WebPreferences::experimentalFeatures((WebKit::WebPreferences *)a1);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, (uint64_t)v1);
  v2 = (WebKit *)API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v2);
  *(_QWORD *)v2 = &off_1E34CC2F8;
  *((_QWORD *)v2 + 2) = v7;
  v3 = v8;
  v7 = 0;
  v8 = 0;
  *((_QWORD *)v2 + 3) = v3;
  v4 = *((_QWORD *)v2 + 1);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
  return v4;
}

_QWORD *WKPreferencesEnableAllExperimentalFeatures(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::enableAllExperimentalFeatures((WebKit::WebPreferences *)a1);
}

WTF::StringImpl *WKPreferencesSetExperimentalFeatureForKey(void *a1, char a2, void *a3)
{
  WebKit::WebPreferences *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (a1)
  {
    v5 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a3)
    {
LABEL_3:
      objc_msgSend(a3, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setFeatureEnabledForKey(v5, (const WTF::String *)&v8, a2);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyInternalDebugFeatures(void *a1)
{
  uint64_t *v1;
  WebKit *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = WebKit::WebPreferences::internalDebugFeatures((WebKit::WebPreferences *)a1);
  WTF::Vector<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v7, (uint64_t)v1);
  v2 = (WebKit *)API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v2);
  *(_QWORD *)v2 = &off_1E34CC2F8;
  *((_QWORD *)v2 + 2) = v7;
  v3 = v8;
  v7 = 0;
  v8 = 0;
  *((_QWORD *)v2 + 3) = v3;
  v4 = *((_QWORD *)v2 + 1);
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v5);
  return v4;
}

_QWORD *WKPreferencesResetAllInternalDebugFeatures(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::resetAllInternalDebugFeatures((WebKit::WebPreferences *)a1);
}

WTF::StringImpl *WKPreferencesSetInternalDebugFeatureForKey(void *a1, char a2, void *a3)
{
  WebKit::WebPreferences *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (a1)
  {
    v5 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a3)
    {
LABEL_3:
      objc_msgSend(a3, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setFeatureEnabledForKey(v5, (const WTF::String *)&v8, a2);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetBoolValueForKeyForTesting(void *a1, const WTF::StringImpl *a2, void *a3)
{
  WebKit::WebPreferences *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (a1)
  {
    v5 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a3)
    {
LABEL_3:
      objc_msgSend(a3, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setBoolValueForKey(v5, &v8, a2, 1);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetDoubleValueForKeyForTesting(void *a1, void *a2, double a3)
{
  WebKit::WebPreferences *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (a1)
  {
    v5 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setBoolValueForKey(v5, &v8, (const WTF::StringImpl *)(a3 != 0.0), 1);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetUInt32ValueForKeyForTesting(void *a1, unsigned int a2, void *a3)
{
  WebKit::WebPreferences *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;

  if (a1)
  {
    v5 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a3)
    {
LABEL_3:
      objc_msgSend(a3, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v5 = 0;
    if (a3)
      goto LABEL_3;
  }
  v8 = 0;
LABEL_4:
  WebKit::WebPreferences::setUInt32ValueForKey(v5, &v8, a2);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKPreferencesSetStringValueForKeyForTesting(void *a1, void *a2, void *a3)
{
  WebKit::WebPreferences *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (a1)
  {
    v5 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a3)
      goto LABEL_3;
LABEL_15:
    v10 = 0;
    if (a2)
      goto LABEL_4;
    goto LABEL_16;
  }
  v5 = 0;
  if (!a3)
    goto LABEL_15;
LABEL_3:
  objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  if (a2)
  {
LABEL_4:
    objc_msgSend(a2, "_apiObject");
    WTF::String::isolatedCopy();
    goto LABEL_5;
  }
LABEL_16:
  v9 = 0;
LABEL_5:
  WebKit::WebPreferences::setStringValueForKey(v5, &v10, &v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WKPreferencesResetTestRunnerOverrides(_QWORD *a1)
{
  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::update(a1);
}

_QWORD *WKPreferencesSetJavaScriptEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setJavaScriptEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetJavaScriptMarkupEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setJavaScriptMarkupEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptMarkupEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptMarkupEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetLoadsImagesAutomatically(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLoadsImagesAutomatically((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLoadsImagesAutomatically(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::loadsImagesAutomaticallyKey(void)::key, a3);
}

_QWORD *WKPreferencesSetLocalStorageEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLocalStorageEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLocalStorageEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::localStorageEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetDatabasesEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDatabasesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDatabasesEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::databasesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::databasesEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetJavaScriptCanOpenWindowsAutomatically(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setJavaScriptCanOpenWindowsAutomatically((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptCanOpenWindowsAutomatically(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanOpenWindowsAutomaticallyKey(void)::key, a3);
}

_QWORD *WKPreferencesSetHyperlinkAuditingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setHyperlinkAuditingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHyperlinkAuditingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hyperlinkAuditingEnabledKey(void)::key, a3);
}

WTF::StringImpl *WKPreferencesSetStandardFontFamily(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setStandardFontFamily(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyStandardFontFamily(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::standardFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetFixedFontFamily(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setFixedFontFamily(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyFixedFontFamily(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fixedFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetSerifFontFamily(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setSerifFontFamily(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopySerifFontFamily(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serifFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetSansSerifFontFamily(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setSansSerifFontFamily(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopySansSerifFontFamily(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::sansSerifFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetCursiveFontFamily(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setCursiveFontFamily(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyCursiveFontFamily(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cursiveFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetFantasyFontFamily(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setFantasyFontFamily(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyFantasyFontFamily(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fantasyFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

WTF::StringImpl *WKPreferencesSetPictographFontFamily(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setPictographFontFamily(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyPictographFontFamily(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::pictographFontFamilyKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WKPreferencesSetDefaultFontSize(void *a1, unsigned int a2)
{
  double v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4 = (double)a2;
  return WebKit::WebPreferences::setDefaultFontSize((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetDefaultFontSize(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFontSizeKey(void)::key);
}

uint64_t WKPreferencesSetDefaultFixedFontSize(void *a1, unsigned int a2)
{
  double v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4 = (double)a2;
  return WebKit::WebPreferences::setDefaultFixedFontSize((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetDefaultFixedFontSize(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultFixedFontSizeKey(void)::key);
}

uint64_t WKPreferencesSetMinimumFontSize(void *a1, unsigned int a2)
{
  double v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4 = (double)a2;
  return WebKit::WebPreferences::setMinimumFontSize((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetMinimumFontSize(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumFontSizeKey(void)::key);
}

_QWORD *WKPreferencesSetCookieEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCookieEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCookieEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetEditableLinkBehavior(void *a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int v5;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  if (a2 >= 4)
    v3 = 4;
  else
    v3 = a2;
  v5 = v3;
  return WebKit::WebPreferences::setEditableLinkBehavior((WebKit::WebPreferences *)a1, &v5);
}

uint64_t WKPreferencesGetEditableLinkBehavior(void *a1)
{
  unsigned int v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::$_0::operator() const(void)::impl;
  }
  v1 = WebKit::valueForKey<unsigned int>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::editableLinkBehaviorKey(void)::key);
  if (v1 >= 5)
    return 4;
  else
    return v1;
}

WTF::StringImpl *WKPreferencesSetDefaultTextEncodingName(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setDefaultTextEncodingName(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyDefaultTextEncodingName(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::defaultTextEncodingNameKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

_QWORD *WKPreferencesSetDeveloperExtrasEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDeveloperExtrasEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDeveloperExtrasEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetJavaScriptRuntimeFlags(void *a1, unsigned int a2)
{
  unsigned int v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setJavaScriptRuntimeFlags((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptRuntimeFlags(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<unsigned int>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptRuntimeFlagsKey(void)::key);
}

_QWORD *WKPreferencesSetTextAreasAreResizable(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setTextAreasAreResizable((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTextAreasAreResizable(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAreasAreResizableKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAcceleratedDrawingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAcceleratedDrawingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAcceleratedDrawingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedDrawingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCanvasUsesAcceleratedDrawing(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCanvasUsesAcceleratedDrawing((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCanvasUsesAcceleratedDrawing(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::canvasUsesAcceleratedDrawingKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAcceleratedCompositingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAcceleratedCompositingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAcceleratedCompositingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::acceleratedCompositingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCompositingBordersVisible(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCompositingBordersVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCompositingBordersVisible(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingBordersVisibleKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCompositingRepaintCountersVisible(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCompositingRepaintCountersVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCompositingRepaintCountersVisible(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::compositingRepaintCountersVisibleKey(void)::key, a3);
}

_QWORD *WKPreferencesSetTiledScrollingIndicatorVisible(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setTiledScrollingIndicatorVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTiledScrollingIndicatorVisible(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tiledScrollingIndicatorVisibleKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWebGLEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWebGLEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebGLEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetNeedsSiteSpecificQuirks(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setNeedsSiteSpecificQuirks((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetNeedsSiteSpecificQuirks(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsSiteSpecificQuirksKey(void)::key, a3);
}

_QWORD *WKPreferencesSetForceFTPDirectoryListings(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setForceFTPDirectoryListings((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetForceFTPDirectoryListings(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::forceFTPDirectoryListingsKey(void)::key, a3);
}

WTF::StringImpl *WKPreferencesSetFTPDirectoryTemplatePath(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setFTPDirectoryTemplatePath(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyFTPDirectoryTemplatePath(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ftpDirectoryTemplatePathKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

_QWORD *WKPreferencesSetTabsToLinks(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setTabsToLinks((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTabsToLinks(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::tabsToLinksKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::tabsToLinksKey(void)::key, a3);
}

_QWORD *WKPreferencesSetDNSPrefetchingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDNSPrefetchingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDNSPrefetchingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dnsPrefetchingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAuthorAndUserStylesEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAuthorAndUserStylesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAuthorAndUserStylesEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::authorAndUserStylesEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldPrintBackgrounds(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldPrintBackgrounds((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldPrintBackgrounds(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldPrintBackgroundsKey(void)::key, a3);
}

_QWORD *WKPreferencesSetDOMTimersThrottlingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDOMTimersThrottlingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDOMTimersThrottlingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domTimersThrottlingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWebArchiveDebugModeEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWebArchiveDebugModeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebArchiveDebugModeEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webArchiveDebugModeEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetLocalFileContentSniffingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLocalFileContentSniffingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLocalFileContentSniffingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::localFileContentSniffingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetPageCacheEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setUsesBackForwardCache((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPageCacheEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesBackForwardCacheKey(void)::key, a3);
}

_QWORD *WKPreferencesSetDOMPasteAllowed(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDOMPasteAllowed((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDOMPasteAllowed(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::domPasteAllowedKey(void)::key, a3);
}

_QWORD *WKPreferencesSetJavaScriptCanAccessClipboard(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setJavaScriptCanAccessClipboard((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetJavaScriptCanAccessClipboard(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::javaScriptCanAccessClipboardKey(void)::key, a3);
}

_QWORD *WKPreferencesSetFullScreenEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setFullScreenEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetFullScreenEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAsynchronousSpellCheckingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAsynchronousSpellCheckingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAsynchronousSpellCheckingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::asynchronousSpellCheckingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAVFoundationEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAVFoundationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAVFoundationEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAVFoundationEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWebSecurityEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWebSecurityEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebSecurityEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webSecurityEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetUniversalAccessFromFileURLsAllowed(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAllowUniversalAccessFromFileURLs((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetUniversalAccessFromFileURLsAllowed(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowUniversalAccessFromFileURLsKey(void)::key, a3);
}

_QWORD *WKPreferencesSetFileAccessFromFileURLsAllowed(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAllowFileAccessFromFileURLs((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetFileAccessFromFileURLsAllowed(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowFileAccessFromFileURLsKey(void)::key, a3);
}

_QWORD *WKPreferencesSetTopNavigationToDataURLsAllowed(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAllowTopNavigationToDataURLs((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTopNavigationToDataURLsAllowed(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTopNavigationToDataURLsKey(void)::key, a3);
}

_QWORD *WKPreferencesSetNeedsStorageAccessFromFileURLsQuirk(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setNeedsStorageAccessFromFileURLsQuirk((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetNeedsStorageAccessFromFileURLsQuirk(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::needsStorageAccessFromFileURLsQuirkKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaPlaybackRequiresUserGesture(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setRequiresUserGestureForMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaPlaybackRequiresUserGesture(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForMediaPlaybackKey(void)::key, a3);
}

_QWORD *WKPreferencesSetVideoPlaybackRequiresUserGesture(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setRequiresUserGestureForVideoPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetVideoPlaybackRequiresUserGesture(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForVideoPlaybackKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAudioPlaybackRequiresUserGesture(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setRequiresUserGestureForAudioPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAudioPlaybackRequiresUserGesture(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requiresUserGestureForAudioPlaybackKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMainContentUserGestureOverrideEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMainContentUserGestureOverrideEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMainContentUserGestureOverrideEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mainContentUserGestureOverrideEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetManagedMediaSourceLowThreshold(void *a1, double a2)
{
  double v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setManagedMediaSourceLowThreshold((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetManagedMediaSourceLowThreshold(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceLowThresholdKey(void)::key);
}

uint64_t WKPreferencesSetManagedMediaSourceHighThreshold(void *a1, double a2)
{
  double v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setManagedMediaSourceHighThreshold((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetManagedMediaSourceHighThreshold(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::managedMediaSourceHighThresholdKey(void)::key);
}

_QWORD *WKPreferencesSetMediaPlaybackAllowsInline(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAllowsInlineMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaPlaybackAllowsInline(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsInlineMediaPlaybackKey(void)::key, a3);
}

_QWORD *WKPreferencesSetInlineMediaPlaybackRequiresPlaysInlineAttribute(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setInlineMediaPlaybackRequiresPlaysInlineAttribute((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetInlineMediaPlaybackRequiresPlaysInlineAttribute(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inlineMediaPlaybackRequiresPlaysInlineAttributeKey(void)::key, a3);
}

_QWORD *WKPreferencesSetBeaconAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setBeaconAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetBeaconAPIEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::beaconAPIEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetDirectoryUploadEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDirectoryUploadEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDirectoryUploadEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::directoryUploadEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaControlsScaleWithPageZoom(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaControlsScaleWithPageZoom((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaControlsScaleWithPageZoom(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaControlsScaleWithPageZoomKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWebAuthenticationEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWebAuthenticationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebAuthenticationEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetInvisibleMediaAutoplayPermitted(void *a1, char a2)
{
  BOOL v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4 = a2 ^ 1;
  return WebKit::WebPreferences::setInvisibleAutoplayNotPermitted((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetInvisibleMediaAutoplayPermitted(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::invisibleAutoplayNotPermittedKey(void)::key, a3) ^ 1;
}

_QWORD *WKPreferencesSetShowsToolTipOverTruncatedText(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShowsToolTipOverTruncatedText((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShowsToolTipOverTruncatedText(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsToolTipOverTruncatedTextKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMockScrollbarsEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMockScrollbarsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMockScrollbarsEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockScrollbarsEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAttachmentElementEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAttachmentElementEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAttachmentElementEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWebAudioEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWebAudioEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebAudioEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAudioEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetSuppressesIncrementalRendering(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setSuppressesIncrementalRendering((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSuppressesIncrementalRendering(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::suppressesIncrementalRenderingKey(void)::key, a3);
}

_QWORD *WKPreferencesSetBackspaceKeyNavigationEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setBackspaceKeyNavigationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetBackspaceKeyNavigationEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::backspaceKeyNavigationEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCaretBrowsingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCaretBrowsingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaretBrowsingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::caretBrowsingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldDisplaySubtitles(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldDisplaySubtitles((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldDisplaySubtitles(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplaySubtitlesKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldDisplayCaptions(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldDisplayCaptions((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldDisplayCaptions(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayCaptionsKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldDisplayTextDescriptions(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldDisplayTextDescriptions((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldDisplayTextDescriptions(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldDisplayTextDescriptionsKey(void)::key, a3);
}

_QWORD *WKPreferencesSetNotificationsEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setNotificationsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetNotificationsEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::notificationsEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldRespectImageOrientation(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldRespectImageOrientation((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldRespectImageOrientation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldRespectImageOrientationKey(void)::key, a3);
}

uint64_t WKPreferencesSetStorageBlockingPolicy(void *a1, int a2)
{
  unsigned int v3;
  unsigned int v5;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v3 = a2 == 1;
  if (a2 == 2)
    v3 = 2;
  v5 = v3;
  return WebKit::WebPreferences::setStorageBlockingPolicy((WebKit::WebPreferences *)a1, &v5);
}

uint64_t WKPreferencesGetStorageBlockingPolicy(void *a1)
{
  int v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  v1 = WebKit::valueForKey<unsigned int>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

_QWORD *WKPreferencesSetDiagnosticLoggingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDiagnosticLoggingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDiagnosticLoggingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::diagnosticLoggingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetInteractiveFormValidationEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setInteractiveFormValidationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetInteractiveFormValidationEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::interactiveFormValidationEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetScrollingPerformanceLoggingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setScrollingPerformanceTestingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetScrollingPerformanceLoggingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::scrollingPerformanceTestingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetPDFPluginEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setPDFPluginEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPDFPluginEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pdfPluginEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetEncodingDetectorEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setUsesEncodingDetector((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetEncodingDetectorEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesEncodingDetectorKey(void)::key, a3);
}

_QWORD *WKPreferencesSetTextAutosizingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setTextAutosizingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTextAutosizingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetTextAutosizingUsesIdempotentMode(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setTextAutosizingUsesIdempotentMode((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTextAutosizingUsesIdempotentMode(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::textAutosizingUsesIdempotentModeKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAggressiveTileRetentionEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAggressiveTileRetentionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAggressiveTileRetentionEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::aggressiveTileRetentionEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetLogsPageMessagesToSystemConsoleEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLogsPageMessagesToSystemConsoleEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLogsPageMessagesToSystemConsoleEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::logsPageMessagesToSystemConsoleEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetPageVisibilityBasedProcessSuppressionEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setPageVisibilityBasedProcessSuppressionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPageVisibilityBasedProcessSuppressionEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::pageVisibilityBasedProcessSuppressionEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetSmartInsertDeleteEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setSmartInsertDeleteEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSmartInsertDeleteEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::smartInsertDeleteEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetSelectTrailingWhitespaceEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setSelectTrailingWhitespaceEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSelectTrailingWhitespaceEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::selectTrailingWhitespaceEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShowsURLsInToolTipsEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShowsURLsInToolTipsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShowsURLsInToolTipsEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::showsURLsInToolTipsEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetHiddenPageDOMTimerThrottlingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingEnabled((WebKit::WebPreferences *)a1, &v3);
}

_QWORD *WKPreferencesSetHiddenPageDOMTimerThrottlingAutoIncreases(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setHiddenPageDOMTimerThrottlingAutoIncreases((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHiddenPageDOMTimerThrottlingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesGetHiddenPageDOMTimerThrottlingAutoIncreases(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageDOMTimerThrottlingAutoIncreasesKey(void)::key, a3);
}

_QWORD *WKPreferencesSetHiddenPageCSSAnimationSuspensionEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setHiddenPageCSSAnimationSuspensionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHiddenPageCSSAnimationSuspensionEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::hiddenPageCSSAnimationSuspensionEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetIncrementalRenderingSuppressionTimeout(void *a1, double a2)
{
  double v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setIncrementalRenderingSuppressionTimeout((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetIncrementalRenderingSuppressionTimeout(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::incrementalRenderingSuppressionTimeoutKey(void)::key);
}

_QWORD *WKPreferencesSetThreadedScrollingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setThreadedScrollingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetThreadedScrollingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::threadedScrollingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetLegacyLineLayoutVisualCoverageEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLegacyLineLayoutVisualCoverageEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLegacyLineLayoutVisualCoverageEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyLineLayoutVisualCoverageEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetContentChangeObserverEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setContentChangeObserverEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetContentChangeObserverEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::contentChangeObserverEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetUseGiantTiles(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setUseGiantTiles((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetUseGiantTiles(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGiantTilesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGiantTilesKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaDevicesEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaDevicesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaDevicesEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaDevicesEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaStreamEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaStreamEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaStreamEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaStreamEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetPeerConnectionEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setPeerConnectionEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPeerConnectionEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::peerConnectionEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetSpatialNavigationEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setSpatialNavigationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSpatialNavigationEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::spatialNavigationEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaSourceEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaSourceEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaSourceEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaSourceEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetSourceBufferChangeTypeEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setSourceBufferChangeTypeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetSourceBufferChangeTypeEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::sourceBufferChangeTypeEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetViewGestureDebuggingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setViewGestureDebuggingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetViewGestureDebuggingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::viewGestureDebuggingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldConvertPositionStyleOnCopy(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldConvertPositionStyleOnCopy((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldConvertPositionStyleOnCopy(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldConvertPositionStyleOnCopyKey(void)::key, a3);
}

_QWORD *WKPreferencesSetTelephoneNumberParsingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setTelephoneNumberParsingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetTelephoneNumberParsingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::telephoneNumberParsingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetEnableInheritURIQueryComponent(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setEnableInheritURIQueryComponent((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetEnableInheritURIQueryComponent(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enableInheritURIQueryComponentKey(void)::key, a3);
}

_QWORD *WKPreferencesSetServiceControlsEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setServiceControlsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetServiceControlsEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceControlsEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetImageControlsEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setImageControlsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetImageControlsEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::imageControlsEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetGamepadsEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setGamepadsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetGamepadsEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetHighlightAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setHighlightAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHighlightAPIEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::highlightAPIEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesSetMinimumZoomFontSize(void *a1, double a2)
{
  double v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMinimumZoomFontSize((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetMinimumZoomFontSize(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::minimumZoomFontSizeKey(void)::key);
}

uint64_t WKPreferencesSetVisibleDebugOverlayRegions(void *a1, unsigned int a2)
{
  unsigned int v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setVisibleDebugOverlayRegions((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetVisibleDebugOverlayRegions(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<unsigned int>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::visibleDebugOverlayRegionsKey(void)::key);
}

_QWORD *WKPreferencesSetMetaRefreshEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setHTTPEquivEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMetaRefreshEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetHTTPEquivEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setHTTPEquivEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetHTTPEquivEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::httpEquivEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAllowsAirPlayForMediaPlayback(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAllowsAirPlayForMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAllowsAirPlayForMediaPlayback(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsAirPlayForMediaPlaybackKey(void)::key, a3);
}

uint64_t WKPreferencesSetUserInterfaceDirectionPolicy(void *a1, unsigned int a2)
{
  unsigned int v4;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v4 = a2;
  return WebKit::WebPreferences::setUserInterfaceDirectionPolicy((WebKit::WebPreferences *)a1, &v4);
}

uint64_t WKPreferencesGetUserInterfaceDirectionPolicy(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<unsigned int>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::userInterfaceDirectionPolicyKey(void)::key);
}

_QWORD *WKPreferencesSetResourceUsageOverlayVisible(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setResourceUsageOverlayVisible((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetResourceUsageOverlayVisible(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::resourceUsageOverlayVisibleKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMockCaptureDevicesEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMockCaptureDevicesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMockCaptureDevicesEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mockCaptureDevicesEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetGetUserMediaRequiresFocus(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setGetUserMediaRequiresFocus((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetGetUserMediaRequiresFocus(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::getUserMediaRequiresFocusKey(void)::key, a3);
}

_QWORD *WKPreferencesSetICECandidateFilteringEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setICECandidateFilteringEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetICECandidateFilteringEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::iceCandidateFilteringEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetEnumeratingAllNetworkInterfacesEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setEnumeratingAllNetworkInterfacesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetEnumeratingAllNetworkInterfacesEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::enumeratingAllNetworkInterfacesEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaCaptureRequiresSecureConnection(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaCaptureRequiresSecureConnection((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaCaptureRequiresSecureConnection(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCaptureRequiresSecureConnectionKey(void)::key, a3);
}

uint64_t WKPreferencesSetInactiveMediaCaptureSteamRepromptIntervalInMinutes(void *a1, double a2)
{
  double v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setInactiveMediaCaptureSteamRepromptIntervalInMinutes((WebKit::WebPreferences *)a1, &v3);
}

double WKPreferencesGetInactiveMediaCaptureSteamRepromptIntervalInMinutes(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::valueForKey<double>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inactiveMediaCaptureSteamRepromptIntervalInMinutesKey(void)::key);
}

_QWORD *WKPreferencesSetDataTransferItemsEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDataTransferItemsEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDataTransferItemsEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataTransferItemsEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCustomPasteboardDataEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCustomPasteboardDataEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCustomPasteboardDataEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::customPasteboardDataEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWriteRichTextDataWhenCopyingOrDragging(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWriteRichTextDataWhenCopyingOrDragging((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWriteRichTextDataWhenCopyingOrDragging(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::writeRichTextDataWhenCopyingOrDraggingKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWebShareEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWebShareEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebShareEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webShareEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webShareEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetDownloadAttributeEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setDownloadAttributeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetDownloadAttributeEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::downloadAttributeEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetWebRTCPlatformCodecsInGPUProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setWebRTCPlatformCodecsInGPUProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetWebRTCPlatformCodecsInGPUProcessEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::webRTCPlatformCodecsInGPUProcessEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetIsAccessibilityIsolatedTreeEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setIsAccessibilityIsolatedTreeEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetIsAccessibilityIsolatedTreeEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::isAccessibilityIsolatedTreeEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAllowsPictureInPictureMediaPlayback(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAllowsPictureInPictureMediaPlayback((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAllowsPictureInPictureMediaPlayback(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowsPictureInPictureMediaPlaybackKey(void)::key, a3);
}

uint64_t WKPreferencesGetApplePayEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetApplePayEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setApplePayEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetApplePayCapabilityDisclosureAllowed(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::applePayCapabilityDisclosureAllowedKey(void)::key, a3);
}

_QWORD *WKPreferencesSetApplePayCapabilityDisclosureAllowed(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setApplePayCapabilityDisclosureAllowed((WebKit::WebPreferences *)a1, &v3);
}

_QWORD *WKPreferencesSetLinkPreloadEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLinkPreloadEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLinkPreloadEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::linkPreloadEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaPreloadingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaPreloadingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaPreloadingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaPreloadingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetExposeSpeakersEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setExposeSpeakersEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetExposeSpeakersEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::exposeSpeakersEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetLargeImageAsyncDecodingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLargeImageAsyncDecodingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetLargeImageAsyncDecodingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::largeImageAsyncDecodingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAnimatedImageAsyncDecodingEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAnimatedImageAsyncDecodingEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAnimatedImageAsyncDecodingEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::animatedImageAsyncDecodingEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldSuppressKeyboardInputDuringProvisionalNavigation(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldSuppressTextInputFromEditingDuringProvisionalNavigation((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldSuppressKeyboardInputDuringProvisionalNavigation(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldSuppressTextInputFromEditingDuringProvisionalNavigationKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaUserGestureInheritsFromDocument(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaUserGestureInheritsFromDocument((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaUserGestureInheritsFromDocument(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaUserGestureInheritsFromDocumentKey(void)::key, a3);
}

WTF::StringImpl *WKPreferencesSetMediaContentTypesRequiringHardwareSupport(void *a1, void *a2)
{
  WebKit::WebPreferences *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = (WebKit::WebPreferences *)objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v6 = 0;
LABEL_4:
  WebKit::WebPreferences::setMediaContentTypesRequiringHardwareSupport(v3, &v6);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPreferencesCopyMediaContentTypesRequiringHardwareSupport(void *a1)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;
  WebKit *v6;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::valueForKey<WTF::String>((uint64_t)a1 + 40, (uint64_t)a1 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaContentTypesRequiringHardwareSupportKey(void)::key, &v5);
  API::String::create(&v6);
  if (v6)
    v2 = *((_QWORD *)v6 + 1);
  else
    v2 = 0;
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v1);
    else
      *(_DWORD *)v3 -= 2;
  }
  return v2;
}

uint64_t WKPreferencesGetLegacyEncryptedMediaAPIEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::legacyEncryptedMediaAPIEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetLegacyEncryptedMediaAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setLegacyEncryptedMediaAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetAllowMediaContentTypesRequiringHardwareSupportAsFallback(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowMediaContentTypesRequiringHardwareSupportAsFallbackKey(void)::key, a3);
}

_QWORD *WKPreferencesSetAllowMediaContentTypesRequiringHardwareSupportAsFallback(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setAllowMediaContentTypesRequiringHardwareSupportAsFallback((WebKit::WebPreferences *)a1, &v3);
}

_QWORD *WKPreferencesSetCSSOMViewScrollingAPIEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCSSOMViewScrollingAPIEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCSSOMViewScrollingAPIEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::cssOMViewScrollingAPIEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldAllowUserInstalledFonts(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldAllowUserInstalledFonts((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldAllowUserInstalledFonts(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldAllowUserInstalledFontsKey(void)::key, a3);
}

_QWORD *WKPreferencesSetMediaCapabilitiesEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setMediaCapabilitiesEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetMediaCapabilitiesEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::mediaCapabilitiesEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetRestrictedHTTPResponseAccess(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setRestrictedHTTPResponseAccess((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetRestrictedHTTPResponseAccess(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::restrictedHTTPResponseAccessKey(void)::key, a3);
}

_QWORD *WKPreferencesSetColorFilterEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setColorFilterEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetColorFilterEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::colorFilterEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetProcessSwapOnNavigationEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setProcessSwapOnCrossSiteNavigationEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetProcessSwapOnNavigationEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::processSwapOnCrossSiteNavigationEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetPunchOutWhiteBackgroundsInDarkMode(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setPunchOutWhiteBackgroundsInDarkMode((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetPunchOutWhiteBackgroundsInDarkMode(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::punchOutWhiteBackgroundsInDarkModeKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCaptureAudioInUIProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCaptureAudioInUIProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureAudioInUIProcessEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInUIProcessEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCaptureAudioInGPUProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCaptureAudioInGPUProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureAudioInGPUProcessEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureAudioInGPUProcessEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCaptureVideoInUIProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCaptureVideoInUIProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureVideoInUIProcessEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInUIProcessEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetCaptureVideoInGPUProcessEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setCaptureVideoInGPUProcessEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetCaptureVideoInGPUProcessEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::captureVideoInGPUProcessEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetVP9DecoderEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setVP9DecoderEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetVP9DecoderEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::vp9DecoderEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesGetRemotePlaybackEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::remotePlaybackEnabledKey(void)::key, a3);
}

_QWORD *WKPreferencesSetRemotePlaybackEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setRemotePlaybackEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetShouldUseServiceWorkerShortTimeout(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::shouldUseServiceWorkerShortTimeoutKey(void)::key, a3);
}

_QWORD *WKPreferencesSetShouldUseServiceWorkerShortTimeout(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setShouldUseServiceWorkerShortTimeout((WebKit::WebPreferences *)a1, &v3);
}

_QWORD *WKPreferencesSetRequestVideoFrameCallbackEnabled(void *a1, BOOL a2)
{
  BOOL v3;

  v3 = a2;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebPreferences::setRequestVideoFrameCallbackEnabled((WebKit::WebPreferences *)a1, &v3);
}

uint64_t WKPreferencesGetRequestVideoFrameCallbackEnabled(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  {
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(a1 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::requestVideoFrameCallbackEnabledKey(void)::key, a3);
}

uint64_t WKPreferencesGetPluginsEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetSubpixelAntialiasedLayerTextEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPageCacheSupportsPlugins()
{
  return 0;
}

uint64_t WKPreferencesGetAsynchronousPluginInitializationEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetAsynchronousPluginInitializationEnabledForAllPlugins()
{
  return 0;
}

uint64_t WKPreferencesGetArtificialPluginInitializationDelayEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPlugInSnapshottingEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPluginSandboxProfilesEnabledForAllPlugins()
{
  return 0;
}

uint64_t WKPreferencesGetSnapshotAllPlugIns()
{
  return 0;
}

uint64_t WKPreferencesGetAutostartOriginPlugInSnapshottingEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPrimaryPlugInSnapshotDetectionEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetAllowCrossOriginSubresourcesToAskForCredentials()
{
  return 0;
}

uint64_t WKPreferencesGetPaintTimingEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetRequestAnimationFrameEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetAVFoundationNSURLSessionEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetStorageAccessAPIEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetPrivateBrowsingEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetIgnoreViewportScalingConstraints()
{
  return 0;
}

uint64_t WKPreferencesGetKeygenElementEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetNewBlockInsideInlineModelEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetLongMousePressEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetAntialiasedFontDilationEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetHixie76WebSocketProtocolEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetFetchAPIEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetFetchAPIKeepAliveEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetIntersectionObserverEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetIsSecureContextAttributeEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetUserTimingEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetResourceTimingEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetCrossOriginResourcePolicyEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetSubpixelCSSOMElementMetricsEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetWebSQLDisabled()
{
  return 1;
}

uint64_t WKPreferencesGetXSSAuditorEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetJavaEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetPaginateDuringLayoutEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetLoadsSiteIconsIgnoringImageLoadingPreference()
{
  return 0;
}

uint64_t WKPreferencesGetOfflineWebApplicationCacheEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetMenuItemElementEnabled()
{
  return 0;
}

uint64_t WKPreferencesGetSyntheticEditingCommandsEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetReferrerPolicyAttributeEnabled()
{
  return 1;
}

uint64_t WKPreferencesGetServerTimingEnabled()
{
  return 1;
}

uint64_t WKProtectionSpaceGetTypeID()
{
  return 14;
}

uint64_t WKProtectionSpaceCopyHost(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKProtectionSpaceGetPort(void *a1)
{
  return *(unsigned int *)(objc_msgSend(a1, "_apiObject") + 32);
}

uint64_t WKProtectionSpaceCopyRealm(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKProtectionSpaceGetIsProxy(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::ProtectionSpaceBase::isProxy((WebCore::ProtectionSpaceBase *)(a1 + 16));
}

uint64_t WKProtectionSpaceGetServerType(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  if (*(unsigned __int8 *)(v1 + 36) - 2 >= 7)
    return 1;
  else
    return (*(_BYTE *)(v1 + 36) - 2) + 2;
}

uint64_t WKProtectionSpaceGetReceivesCredentialSecurely(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  return WebCore::ProtectionSpace::receivesCredentialSecurely((WebCore::ProtectionSpace *)(a1 + 16));
}

uint64_t WKProtectionSpaceGetAuthenticationScheme(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  if (*(unsigned __int8 *)(v1 + 37) - 1 < 9)
    return (*(_BYTE *)(v1 + 37) - 1) + 1;
  else
    return 100;
}

uint64_t WKQueryPermissionResultCallbackGetTypeID()
{
  return 128;
}

uint64_t WKQueryPermissionResultCallbackCompleteWithDenied(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 257);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WKQueryPermissionResultCallbackCompleteWithGranted(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 256);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WKQueryPermissionResultCallbackCompleteWithPrompt(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = objc_msgSend(a1, "_apiObject");
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, 258);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t API::Array::at<API::URL>(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (*(unsigned int *)(a1 + 28) <= a2)
    goto LABEL_8;
  result = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 16))(result) == 24)
    {
      if (*(unsigned int *)(a1 + 28) > a2)
        return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2);
LABEL_8:
      __break(0xC471u);
      JUMPOUT(0x1974155D8);
    }
    return 0;
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(*a1, a2, a3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  __n128 result;
  _DWORD *v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 48);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      WTF::String::operator=((WTF::StringImpl **)a2, (WTF::StringImpl *)a3);
      v7 = *(_BYTE *)(a3 + 40);
      result = *(__n128 *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(__n128 *)(a2 + 24) = result;
      *(_BYTE *)(a2 + 40) = v7;
      return result;
    }
    ((void (*)(char *, uint64_t))off_1E34DA7E8[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 48) = -1;
  v9 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v9 += 2;
  *(_QWORD *)v4 = v9;
  result = *(__n128 *)(a3 + 8);
  v10 = *(_OWORD *)(a3 + 24);
  *(_BYTE *)(v4 + 40) = *(_BYTE *)(a3 + 40);
  *(_OWORD *)(v4 + 24) = v10;
  *(__n128 *)(v4 + 8) = result;
  *(_DWORD *)(v4 + 48) = 1;
  return result;
}

WTF::StringImpl **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN6WebKit8HTTPBody7Element8FileDataENS8_6StringEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISI_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSM_1EJSC_SG_SH_EEERKSY_EEEDcSQ_DpT0_(uint64_t *a1, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(*a1, a2, a3);
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 48))
    return (unsigned int *)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__emplace[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, a3);
  else
    return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__emplace[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF *v5;
  void *v6;
  char v8;

  v4 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34DA7E8[v4])(&v8, a1);
  *(_DWORD *)(a1 + 48) = -1;
  v5 = (WTF *)*(unsigned int *)(a2 + 12);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = (_DWORD)v5;
  if ((_DWORD)v5)
  {
    v6 = (void *)WTF::fastMalloc(v5);
    *(_DWORD *)(a1 + 8) = (_DWORD)v5;
    *(_QWORD *)a1 = v6;
    memcpy(v6, *(const void **)a2, *(unsigned int *)(a2 + 12));
  }
  *(_DWORD *)(a1 + 48) = 0;
  return a1;
}

WTF::StringImpl **std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl *a3)
{
  _QWORD v4[2];

  if (*(_DWORD *)(a1 + 48) == 2)
    return WTF::String::operator=(a2, a3);
  v4[0] = a1;
  v4[1] = a3;
  return (WTF::StringImpl **)std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(std::__variant_detail::__alt<2ul,WTF::String> &,WTF::String const&)::{unnamed type#1}::operator()[abi:sn180100](v4);
}

_QWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>(std::__variant_detail::__alt<2ul,WTF::String> &,WTF::String const&)::{unnamed type#1}::operator()[abi:sn180100](_QWORD *result)
{
  uint64_t v1;
  _DWORD **v2;
  uint64_t v3;
  _DWORD *v4;
  char v5;

  v1 = *result;
  v2 = (_DWORD **)result[1];
  v3 = *(unsigned int *)(*result + 48);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, uint64_t))off_1E34DA7E8[v3])(&v5, v1);
  v4 = *v2;
  if (*v2)
    *v4 += 2;
  *(_QWORD *)v1 = v4;
  *(_DWORD *)(v1 + 48) = 2;
  return result;
}

void WKPageSetPageFindClient::FindClient::didCountStringMatches(WKPageSetPageFindClient::FindClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, uint64_t a4)
{
  void (*v4)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebKit *v11;
  WTF::StringImpl *v12;
  WebKit *v13;

  v4 = (void (*)(uint64_t, _QWORD, uint64_t, _QWORD))*((_QWORD *)this + 5);
  if (v4)
  {
    if (a2)
      v7 = *((_QWORD *)a2 + 1);
    else
      v7 = 0;
    v8 = *a3;
    if (*a3)
      *(_DWORD *)v8 += 2;
    v12 = v8;
    API::String::create(&v12, &v13);
    v10 = v12;
    v11 = v13;
    v12 = 0;
    v13 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v11)
          goto LABEL_10;
        goto LABEL_13;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v11)
    {
LABEL_10:
      v4(v7, *((_QWORD *)v11 + 1), a4, *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v11 + 1));
      return;
    }
LABEL_13:
    v4(v7, 0, a4, *((_QWORD *)this + 2));
  }
}

void WKPageSetPageFindClient::FindClient::didFindString(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5)
{
  void (*v5)(uint64_t, _QWORD, uint64_t, _QWORD);
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebKit *v12;
  WTF::StringImpl *v13;
  WebKit *v14;

  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 24);
  if (v5)
  {
    if (a2)
      v8 = *(_QWORD *)(a2 + 8);
    else
      v8 = 0;
    v9 = *a3;
    if (*a3)
      *(_DWORD *)v9 += 2;
    v13 = v9;
    API::String::create(&v13, &v14);
    v11 = v13;
    v12 = v14;
    v13 = 0;
    v14 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v10);
        if (v12)
          goto LABEL_10;
        goto LABEL_13;
      }
      *(_DWORD *)v11 -= 2;
    }
    if (v12)
    {
LABEL_10:
      v5(v8, *((_QWORD *)v12 + 1), a5, *(_QWORD *)(a1 + 16));
      CFRelease(*((CFTypeRef *)v12 + 1));
      return;
    }
LABEL_13:
    v5(v8, 0, a5, *(_QWORD *)(a1 + 16));
  }
}

void WKPageSetPageFindClient::FindClient::didFailToFindString(WKPageSetPageFindClient::FindClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  v3 = (void (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 4);
  if (v3)
  {
    if (a2)
      v5 = *((_QWORD *)a2 + 1);
    else
      v5 = 0;
    v6 = *a3;
    if (*a3)
      *(_DWORD *)v6 += 2;
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9)
          goto LABEL_10;
        goto LABEL_13;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_10:
      v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_13:
    v3(v5, 0, *((_QWORD *)this + 2));
  }
}

uint64_t WKPageSetPageFindMatchesClient::FindMatchesClient::didFindStringMatches(uint64_t result, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WebKit *v14;
  WebKit *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double *v24;
  WebKit *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebKit *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  int v40;
  uint64_t v42;
  uint64_t v43;
  WebKit *v44;
  uint64_t v45;
  WTF::StringImpl *v46;

  if (!*(_QWORD *)(result + 24))
    return result;
  v6 = a2;
  v7 = result;
  v42 = 0;
  v43 = 0;
  v8 = *(unsigned int *)(a4 + 12);
  v40 = v8;
  if ((_DWORD)v8)
  {
    v39 = a3;
    if (!(v8 >> 29))
    {
      v9 = WTF::fastMalloc((WTF *)(8 * v8));
      LODWORD(v43) = v8;
      v42 = v9;
      if (!*(_DWORD *)(a4 + 12))
      {
        LODWORD(v10) = 0;
        a3 = v39;
        if (!v6)
          goto LABEL_17;
        goto LABEL_16;
      }
      v37 = v6;
      v38 = v7;
      v10 = 0;
      while (1)
      {
        v11 = v10;
        v12 = *(_QWORD *)a4 + 16 * v10;
        v44 = 0;
        v45 = 0;
        v13 = *(unsigned int *)(v12 + 12);
        if ((_DWORD)v13)
        {
          if (v13 >> 29)
          {
            __break(0xC471u);
            goto LABEL_34;
          }
          v14 = (WebKit *)WTF::fastMalloc((WTF *)(8 * v13));
          LODWORD(v45) = v13;
          v44 = v14;
          if (*(_DWORD *)(v12 + 12))
          {
            v15 = v14;
            v16 = 0;
            v17 = 0;
            do
            {
              v18 = v17;
              v19 = (int *)(*(_QWORD *)v12 + v16);
              v20 = (double)*v19;
              v21 = (double)v19[1];
              v22 = (double)v19[2];
              v23 = (double)v19[3];
              v24 = (double *)API::Object::newObject(0x30uLL, 38);
              *(_QWORD *)v24 = off_1E34CC2A8;
              WebKit::InitializeWebKit2((WebKit *)v24);
              *(_QWORD *)v24 = &off_1E34AD230;
              v24[2] = v20;
              v24[3] = v21;
              v24[4] = v22;
              v24[5] = v23;
              v17 = v18 + 1;
              *((_QWORD *)v15 + v18) = v24;
              v16 += 16;
            }
            while (v18 + 1 < (unint64_t)*(unsigned int *)(v12 + 12));
            HIDWORD(v45) = v18 + 1;
          }
        }
        v25 = (WebKit *)API::Object::newObject(0x20uLL, 1);
        *(_QWORD *)v25 = off_1E34CC2A8;
        WebKit::InitializeWebKit2(v25);
        *(_QWORD *)v25 = &off_1E34CC2F8;
        *((_QWORD *)v25 + 2) = v44;
        v26 = v45;
        v44 = 0;
        v45 = 0;
        *((_QWORD *)v25 + 3) = v26;
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v27);
        v10 = v11 + 1;
        *(_QWORD *)(v9 + 8 * v11) = v25;
        if (v11 + 1 >= (unint64_t)*(unsigned int *)(a4 + 12))
        {
          HIDWORD(v43) = v11 + 1;
          v7 = v38;
          a3 = v39;
          v6 = v37;
          if (!v37)
            goto LABEL_17;
LABEL_16:
          v6 = *(_QWORD *)(v6 + 8);
          goto LABEL_17;
        }
      }
    }
    __break(0xC471u);
LABEL_34:
    JUMPOUT(0x1974160FCLL);
  }
  LODWORD(v10) = 0;
  v9 = 0;
  if (a2)
    goto LABEL_16;
LABEL_17:
  v28 = v7;
  v29 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(v7 + 24);
  v30 = *a3;
  if (*a3)
    *(_DWORD *)v30 += 2;
  v46 = v30;
  API::String::create(&v46, &v44);
  v32 = v44;
  v44 = 0;
  v33 = v46;
  v46 = 0;
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
    {
      WTF::StringImpl::destroy(v33, v31);
      if (v32)
        goto LABEL_23;
LABEL_29:
      v34 = 0;
      goto LABEL_24;
    }
    *(_DWORD *)v33 -= 2;
  }
  if (!v32)
    goto LABEL_29;
LABEL_23:
  v34 = *((_QWORD *)v32 + 1);
LABEL_24:
  v35 = API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v35 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v35);
  *(_QWORD *)v35 = &off_1E34CC2F8;
  v42 = 0;
  v43 = 0;
  *(_QWORD *)(v35 + 16) = v9;
  *(_DWORD *)(v35 + 24) = v40;
  *(_DWORD *)(v35 + 28) = v10;
  v29(v6, v34, *(_QWORD *)(v35 + 8), a5, *(_QWORD *)(v28 + 16));
  CFRelease(*(CFTypeRef *)(v35 + 8));
  if (v32)
    CFRelease(*((CFTypeRef *)v32 + 1));
  return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v36);
}

uint64_t WKPageSetPageFindMatchesClient::FindMatchesClient::didGetImageForMatchResult(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebImage *a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 32);
  if (v4)
  {
    if (a2)
    {
      v5 = *((_QWORD *)a2 + 1);
      if (a3)
      {
LABEL_4:
        v6 = *((_QWORD *)a3 + 1);
        return v4(v5, v6, a4, *(_QWORD *)(this + 16));
      }
    }
    else
    {
      v5 = 0;
      if (a3)
        goto LABEL_4;
    }
    v6 = 0;
    return v4(v5, v6, a4, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didStartProvisionalLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 24);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a3 + 1);
    if (a5)
      v8 = *((_QWORD *)a5 + 1);
    else
      v8 = 0;
    return v5(v6, v7, v8, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didReceiveServerRedirectForProvisionalLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 32);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a3 + 1);
    if (a5)
      v8 = *((_QWORD *)a5 + 1);
    else
      v8 = 0;
    return v5(v6, v7, v8, *(_QWORD *)(this + 16));
  }
  return this;
}

void WKPageSetPageLoaderClient::LoaderClient::didFailProvisionalLoadWithErrorForFrame(WKPageSetPageLoaderClient::LoaderClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, const WebCore::ResourceError *a5, API::Object *a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 5);
  if (v6)
  {
    v10 = *((_QWORD *)a2 + 1);
    v11 = *((_QWORD *)a3 + 1);
    v12 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v12, (uint64_t)a5))
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (a6)
      {
LABEL_4:
        v14 = *((_QWORD *)a6 + 1);
        goto LABEL_5;
      }
    }
    else
    {
      v13 = 0;
      if (a6)
        goto LABEL_4;
    }
    v14 = 0;
LABEL_5:
    v6(v10, v11, v13, v14, *((_QWORD *)this + 2));
    if (v12)
      CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didFinishLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 64);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a3 + 1);
    if (a5)
      v8 = *((_QWORD *)a5 + 1);
    else
      v8 = 0;
    return v5(v6, v7, v8, *(_QWORD *)(this + 16));
  }
  return this;
}

void WKPageSetPageLoaderClient::LoaderClient::didFailLoadWithErrorForFrame(WKPageSetPageLoaderClient::LoaderClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, const WebCore::ResourceError *a5, API::Object *a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 9);
  if (v6)
  {
    v10 = *((_QWORD *)a2 + 1);
    v11 = *((_QWORD *)a3 + 1);
    v12 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v12, (uint64_t)a5))
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (a6)
      {
LABEL_4:
        v14 = *((_QWORD *)a6 + 1);
        goto LABEL_5;
      }
    }
    else
    {
      v13 = 0;
      if (a6)
        goto LABEL_4;
    }
    v14 = 0;
LABEL_5:
    v6(v10, v11, v13, v14, *((_QWORD *)this + 2));
    if (v12)
      CFRelease(*(CFTypeRef *)(v12 + 8));
  }
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didFirstVisuallyNonEmptyLayoutForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::Object *a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 104);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = *((_QWORD *)a3 + 1);
    if (a4)
      v7 = *((_QWORD *)a4 + 1);
    else
      v7 = 0;
    return v4(v5, v6, v7, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didReachLayoutMilestone(uint64_t result, uint64_t a2, __int16 a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);
  int v4;

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(result + 280);
  if (v3)
  {
    v4 = (a3 & 1) != 0;
    if ((a3 & 2) != 0)
      v4 |= 2u;
    if ((a3 & 4) != 0)
      v4 |= 4u;
    if ((a3 & 0x10) != 0)
      v4 |= 0x10u;
    if ((a3 & 0x20) != 0)
      v4 |= 0x20u;
    if ((a3 & 0x80) != 0)
      v4 |= 0x80u;
    return v3(*(_QWORD *)(a2 + 8), v4 | a3 & 0x100u, 0, *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::shouldKeepCurrentBackForwardListItemInList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1 + 328);
  if (v3)
    return v3(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(a1 + 16));
  else
    return 1;
}

BOOL WKPageSetPageLoaderClient::LoaderClient::processDidCrash(WKPageSetPageLoaderClient::LoaderClient *this, WebKit::WebPageProxy *a2)
{
  void (*v2)(_QWORD, _QWORD);

  v2 = (void (*)(_QWORD, _QWORD))*((_QWORD *)this + 24);
  if (v2)
    v2(*((_QWORD *)a2 + 1), *((_QWORD *)this + 2));
  return v2 != 0;
}

void WKPageSetPageLoaderClient::LoaderClient::didChangeBackForwardList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 200);
  if (v4)
  {
    v9 = *((unsigned int *)a4 + 3);
    if ((_DWORD)v9)
    {
      v22 = 0;
      if (v9 >> 29)
      {
        __break(0xC471u);
        return;
      }
      v10 = WTF::fastMalloc((WTF *)(8 * v9));
      v11 = v10;
      v12 = *((unsigned int *)a4 + 3);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = *a4;
        v15 = 8 * v12;
        do
        {
          v16 = *(_QWORD *)(v14 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = 0;
          *(_QWORD *)(v10 + 8 * v13++) = v16;
          v15 -= 8;
        }
        while (v15);
      }
      else
      {
        LODWORD(v13) = 0;
      }
      v17 = API::Object::newObject(0x20uLL, 1);
      *(_QWORD *)v17 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v17);
      *(_QWORD *)v17 = &off_1E34CC2F8;
      v21 = 0;
      *(_QWORD *)(v17 + 16) = v11;
      HIDWORD(v22) = 0;
      *(_DWORD *)(v17 + 24) = v9;
      *(_DWORD *)(v17 + 28) = v13;
      WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v18);
      v4 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 200);
    }
    else
    {
      v17 = 0;
    }
    v19 = *(_QWORD *)(a2 + 8);
    if (a3)
    {
      v20 = *(_QWORD *)(a3 + 8);
      if (v17)
      {
LABEL_13:
        v4(v19, v20, *(_QWORD *)(v17 + 8), *(_QWORD *)(a1 + 16));
        CFRelease(*(CFTypeRef *)(v17 + 8));
        return;
      }
    }
    else
    {
      v20 = 0;
      if (v17)
        goto LABEL_13;
    }
    v4(v19, v20, 0, *(_QWORD *)(a1 + 16));
  }
}

uint64_t WKPageSetPageLoaderClient::LoaderClient::didCommitLoadForFrame(uint64_t this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, Navigation *a4, API::Object *a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 48);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = *((_QWORD *)a3 + 1);
    if (a5)
      v8 = *((_QWORD *)a5 + 1);
    else
      v8 = 0;
    return v5(v6, v7, v8, *(_QWORD *)(this + 16));
  }
  return this;
}

void WKPageSetPagePolicyClient::PolicyClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, const WebCore::ResourceRequest *a6, const WebCore::ResourceRequest *a7, uint64_t *a8)
{
  CFTypeRef *v15;
  CFTypeRef *v16;
  void (*v17)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, _QWORD, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, _QWORD, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (*(_QWORD *)(a1 + 24) || *(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 72))
  {
    v15 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *v15 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v15);
    *v15 = &off_1E34CC2D0;
    WebCore::ResourceRequest::ResourceRequest(v15 + 2, a6);
    v16 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *v16 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v16);
    *v16 = &off_1E34CC2D0;
    WebCore::ResourceRequest::ResourceRequest(v16 + 2, a7);
    v17 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, _QWORD, _QWORD))(a1 + 24);
    if (v17)
    {
      if (a3)
        v18 = *(_QWORD *)(a3 + 8);
      else
        v18 = 0;
      v19 = *a4;
      if (*(unsigned __int8 *)(*a4 + 304) >= 5u)
        v20 = 5;
      else
        v20 = *(unsigned __int8 *)(*a4 + 304);
      v21 = *(_BYTE *)(v19 + 305) & 0x1F;
      v22 = *(unsigned __int8 *)(v19 + 306);
      if (v22 >= 3)
        v23 = 4294967294;
      else
        v23 = v22;
      if (*a8)
        v24 = *(_QWORD *)(*a8 + 8);
      else
        v24 = 0;
      v17(*(_QWORD *)(a2 + 8), v18, v20, v21, v23, v16[1], v24, 0, *(_QWORD *)(a1 + 16));
    }
    else
    {
      v25 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, uint64_t, _QWORD, _QWORD))(a1 + 56);
      if (v25)
      {
        if (a3)
          v26 = *(_QWORD *)(a3 + 8);
        else
          v26 = 0;
        v27 = *a4;
        if (*(unsigned __int8 *)(*a4 + 304) >= 5u)
          v28 = 5;
        else
          v28 = *(unsigned __int8 *)(*a4 + 304);
        v29 = *(_BYTE *)(v27 + 305) & 0x1F;
        v30 = *(unsigned __int8 *)(v27 + 306);
        if (v30 >= 3)
          v31 = 4294967294;
        else
          v31 = v30;
        if (a5)
          v32 = *(_QWORD *)(a5 + 8);
        else
          v32 = 0;
        if (*a8)
          v33 = *(_QWORD *)(*a8 + 8);
        else
          v33 = 0;
        v25(*(_QWORD *)(a2 + 8), v26, v28, v29, v31, v32, v16[1], v33, 0, *(_QWORD *)(a1 + 16));
      }
      else
      {
        if (a3)
          v34 = *(_QWORD *)(a3 + 8);
        else
          v34 = 0;
        v35 = *a4;
        if (*(unsigned __int8 *)(*a4 + 304) >= 5u)
          v36 = 5;
        else
          v36 = *(unsigned __int8 *)(*a4 + 304);
        v37 = *(_BYTE *)(v35 + 305) & 0x1F;
        v38 = *(unsigned __int8 *)(v35 + 306);
        if (v38 >= 3)
          v39 = 4294967294;
        else
          v39 = v38;
        if (a5)
          v40 = *(_QWORD *)(a5 + 8);
        else
          v40 = 0;
        v41 = *a8;
        if (*a8)
          v41 = *(_QWORD *)(v41 + 8);
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, CFTypeRef, CFTypeRef, uint64_t, _QWORD, _QWORD))(a1 + 72))(*(_QWORD *)(a2 + 8), v34, v36, v37, v39, v40, v15[1], v16[1], v41, 0, *(_QWORD *)(a1 + 16));
      }
    }
    CFRelease(v16[1]);
    CFRelease(v15[1]);
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::use(*a8, 0, 0);
  }
}

void WKPageSetPagePolicyClient::PolicyClient::decidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const WebCore::ResourceRequest *a5, WTF::StringImpl **a6, uint64_t *a7)
{
  CFTypeRef *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  CFTypeRef v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebKit *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, _QWORD);
  WTF::StringImpl *v30;
  WebKit *v31;

  if (*(_QWORD *)(a1 + 32))
  {
    v14 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *v14 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v14);
    *v14 = &off_1E34CC2D0;
    WebCore::ResourceRequest::ResourceRequest(v14 + 2, a5);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, CFTypeRef, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a3 + 8);
    v17 = *a4;
    if (*(unsigned __int8 *)(*a4 + 304) >= 5u)
      v18 = 5;
    else
      v18 = *(unsigned __int8 *)(*a4 + 304);
    v19 = *(_BYTE *)(v17 + 305);
    v20 = *(unsigned __int8 *)(v17 + 306);
    if (v20 >= 3)
      v21 = 4294967294;
    else
      v21 = v20;
    v22 = v14[1];
    v23 = *a6;
    if (*a6)
      *(_DWORD *)v23 += 2;
    v30 = v23;
    API::String::create(&v30, &v31);
    v25 = v30;
    v26 = v31;
    v30 = 0;
    v31 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v26)
      v27 = *((_QWORD *)v26 + 1);
    else
      v27 = 0;
    if (*a7)
      v28 = *(_QWORD *)(*a7 + 8);
    else
      v28 = 0;
    v29(v15, v16, v18, v19 & 0x1F, v21, v22, v27, v28, 0, *(_QWORD *)(a1 + 16));
    if (v26)
      CFRelease(*((CFTypeRef *)v26 + 1));
    CFRelease(v14[1]);
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::use(*a7, 0, 0);
  }
}

void WKPageSetPagePolicyClient::PolicyClient::decidePolicyForResponse(uint64_t a1, uint64_t a2, uint64_t a3, const WebCore::ResourceResponse *a4, const WebCore::ResourceRequest *a5, uint64_t a6, uint64_t *a7)
{
  CFTypeRef *v14;
  CFTypeRef *v15;
  void (*v16)(_QWORD, _QWORD, CFTypeRef, CFTypeRef, uint64_t, _QWORD, _QWORD);
  CFTypeRef v17;
  uint64_t v18;
  CFTypeRef v19;
  uint64_t v20;

  if (*(_QWORD *)(a1 + 40) || *(_QWORD *)(a1 + 64))
  {
    v14 = (CFTypeRef *)API::Object::newObject(0x110uLL, 26);
    API::URLResponse::URLResponse((API::URLResponse *)v14, a4);
    v15 = (CFTypeRef *)API::Object::newObject(0xD8uLL, 25);
    *v15 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v15);
    *v15 = &off_1E34CC2D0;
    WebCore::ResourceRequest::ResourceRequest(v15 + 2, a5);
    v16 = *(void (**)(_QWORD, _QWORD, CFTypeRef, CFTypeRef, uint64_t, _QWORD, _QWORD))(a1 + 40);
    if (v16)
    {
      if (v14)
        v17 = v14[1];
      else
        v17 = 0;
      if (*a7)
        v18 = *(_QWORD *)(*a7 + 8);
      else
        v18 = 0;
      v16(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), v17, v15[1], v18, 0, *(_QWORD *)(a1 + 16));
    }
    else
    {
      if (v14)
        v19 = v14[1];
      else
        v19 = 0;
      if (*a7)
        v20 = *(_QWORD *)(*a7 + 8);
      else
        v20 = 0;
      (*(void (**)(_QWORD, _QWORD, CFTypeRef, CFTypeRef, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 64))(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), v19, v15[1], a6, v20, 0, *(_QWORD *)(a1 + 16));
    }
    CFRelease(v15[1]);
    if (v14)
      CFRelease(v14[1]);
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::use(*a7, 0, 0);
  }
}

void WKPageSetPageUIClient::UIClient::createNewPage(uint64_t a1, uint64_t a2, uint64_t a3, API::WindowFeatures *this, uint64_t a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  BOOL v20;
  WebKit *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  char v24;
  WebKit *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  double v28;
  double *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  double v32;
  double *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  double v36;
  double *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  double v40;
  double *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  char v44;
  WebKit *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  char v48;
  WebKit *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  char v52;
  WebKit *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  char v56;
  WebKit *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  char v60;
  WebKit *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  char v64;
  WebKit *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  char v68;
  WebKit *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  char v72;
  WebKit *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  char v76;
  WebKit *v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  uint64_t v80;
  uint64_t v81;
  const WebCore::ResourceRequest *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD v96[3];
  WebKit *v97;
  WTF::StringImpl *v98;
  uint64_t v99;

  if (*(_QWORD *)(a1 + 480))
  {
    API::WindowFeatures::create(this, v96);
    if (*(_QWORD *)a3)
    {
      v12 = *(_QWORD *)(*(_QWORD *)a3 + 8);
      goto LABEL_4;
    }
LABEL_156:
    v12 = 0;
LABEL_4:
    if (*(_QWORD *)a5)
      v13 = *(_QWORD *)(*(_QWORD *)a5 + 8);
    else
      v13 = 0;
    v14 = v96[0];
    if (v96[0])
      v15 = *(_QWORD *)(v96[0] + 8);
    else
      v15 = 0;
    v16 = (void *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 480))(*(_QWORD *)(a2 + 8), v12, v13, v15, *(_QWORD *)(a1 + 16));
    if (v16)
      v16 = (void *)objc_msgSend(v16, "_apiObject");
    v99 = (uint64_t)v16;
    v17 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 16))(v17, &v99);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v99;
    v99 = 0;
    if (v18)
      CFRelease(*(CFTypeRef *)(v18 + 8));
    if (v14)
    {
      v19 = *(const void **)(v14 + 8);
LABEL_14:
      CFRelease(v19);
      return;
    }
    return;
  }
  if (*(_QWORD *)(a1 + 336) || *(_QWORD *)(a1 + 24))
  {
    v99 = 0;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v98 = (WTF::StringImpl *)v96[0];
    v20 = WebCore::WindowFeatures::wantsPopup(this);
    v21 = (WebKit *)API::Object::newObject(0x18uLL, 32);
    *((_BYTE *)v21 + 16) = v20;
    *(_QWORD *)v21 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v21);
    *(_QWORD *)v21 = &off_1E34AD258;
    v97 = v21;
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
    if (v97)
      CFRelease(*((CFTypeRef *)v97 + 1));
    v23 = v98;
    v98 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v98 = (WTF::StringImpl *)v96[0];
    v24 = *(_BYTE *)this;
    v25 = (WebKit *)API::Object::newObject(0x18uLL, 32);
    *((_BYTE *)v25 + 16) = v24;
    *(_QWORD *)v25 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v25);
    *(_QWORD *)v25 = &off_1E34AD258;
    v97 = v25;
    WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
    if (v97)
      CFRelease(*((CFTypeRef *)v97 + 1));
    v27 = v98;
    v98 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v26);
      else
        *(_DWORD *)v27 -= 2;
    }
    if (*((_BYTE *)this + 8))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 8))
        goto LABEL_155;
      v28 = *((float *)this + 1);
      v29 = (double *)API::Object::newObject(0x18uLL, 33);
      v29[2] = v28;
      *(_QWORD *)v29 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v29);
      *(_QWORD *)v29 = &off_1E34AE778;
      v97 = (WebKit *)v29;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v31 = v98;
      v98 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v30);
        else
          *(_DWORD *)v31 -= 2;
      }
    }
    if (*((_BYTE *)this + 16))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 16))
        goto LABEL_155;
      v32 = *((float *)this + 3);
      v33 = (double *)API::Object::newObject(0x18uLL, 33);
      v33[2] = v32;
      *(_QWORD *)v33 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v33);
      *(_QWORD *)v33 = &off_1E34AE778;
      v97 = (WebKit *)v33;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v35 = v98;
      v98 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v34);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    if (*((_BYTE *)this + 24))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 24))
        goto LABEL_155;
      v36 = *((float *)this + 5);
      v37 = (double *)API::Object::newObject(0x18uLL, 33);
      v37[2] = v36;
      *(_QWORD *)v37 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v37);
      *(_QWORD *)v37 = &off_1E34AE778;
      v97 = (WebKit *)v37;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v39 = v98;
      v98 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v38);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
    if (*((_BYTE *)this + 32))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 32))
        goto LABEL_155;
      v40 = *((float *)this + 7);
      v41 = (double *)API::Object::newObject(0x18uLL, 33);
      v41[2] = v40;
      *(_QWORD *)v41 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v41);
      *(_QWORD *)v41 = &off_1E34AE778;
      v97 = (WebKit *)v41;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v43 = v98;
      v98 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v42);
        else
          *(_DWORD *)v43 -= 2;
      }
    }
    if (*((_BYTE *)this + 37))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 37))
        goto LABEL_155;
      v44 = *((_BYTE *)this + 36);
      v45 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v45 + 16) = v44;
      *(_QWORD *)v45 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v45);
      *(_QWORD *)v45 = &off_1E34AD258;
      v97 = v45;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v47 = v98;
      v98 = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v46);
        else
          *(_DWORD *)v47 -= 2;
      }
    }
    if (*((_BYTE *)this + 39))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 39))
        goto LABEL_155;
      v48 = *((_BYTE *)this + 38);
      v49 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v49 + 16) = v48;
      *(_QWORD *)v49 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v49);
      *(_QWORD *)v49 = &off_1E34AD258;
      v97 = v49;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v51 = v98;
      v98 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2)
          WTF::StringImpl::destroy(v51, v50);
        else
          *(_DWORD *)v51 -= 2;
      }
    }
    if (*((_BYTE *)this + 41))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 41))
        goto LABEL_155;
      v52 = *((_BYTE *)this + 40);
      v53 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v53 + 16) = v52;
      *(_QWORD *)v53 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v53);
      *(_QWORD *)v53 = &off_1E34AD258;
      v97 = v53;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v55 = v98;
      v98 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, v54);
        else
          *(_DWORD *)v55 -= 2;
      }
    }
    if (*((_BYTE *)this + 43))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 43))
        goto LABEL_155;
      v56 = *((_BYTE *)this + 42);
      v57 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v57 + 16) = v56;
      *(_QWORD *)v57 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v57);
      *(_QWORD *)v57 = &off_1E34AD258;
      v97 = v57;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v59 = v98;
      v98 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, v58);
        else
          *(_DWORD *)v59 -= 2;
      }
    }
    if (*((_BYTE *)this + 45))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 45))
        goto LABEL_155;
      v60 = *((_BYTE *)this + 44);
      v61 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v61 + 16) = v60;
      *(_QWORD *)v61 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v61);
      *(_QWORD *)v61 = &off_1E34AD258;
      v97 = v61;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v63 = v98;
      v98 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v62);
        else
          *(_DWORD *)v63 -= 2;
      }
    }
    if (*((_BYTE *)this + 47))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 47))
        goto LABEL_155;
      v64 = *((_BYTE *)this + 46);
      v65 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v65 + 16) = v64;
      *(_QWORD *)v65 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v65);
      *(_QWORD *)v65 = &off_1E34AD258;
      v97 = v65;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v67 = v98;
      v98 = 0;
      if (v67)
      {
        if (*(_DWORD *)v67 == 2)
          WTF::StringImpl::destroy(v67, v66);
        else
          *(_DWORD *)v67 -= 2;
      }
    }
    if (*((_BYTE *)this + 49))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 49))
        goto LABEL_155;
      v68 = *((_BYTE *)this + 48);
      v69 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v69 + 16) = v68;
      *(_QWORD *)v69 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v69);
      *(_QWORD *)v69 = &off_1E34AD258;
      v97 = v69;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v71 = v98;
      v98 = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
          WTF::StringImpl::destroy(v71, v70);
        else
          *(_DWORD *)v71 -= 2;
      }
    }
    if (*((_BYTE *)this + 51))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v98 = (WTF::StringImpl *)v96[0];
      if (!*((_BYTE *)this + 51))
        goto LABEL_155;
      v72 = *((_BYTE *)this + 50);
      v73 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v73 + 16) = v72;
      *(_QWORD *)v73 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v73);
      *(_QWORD *)v73 = &off_1E34AD258;
      v97 = v73;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v75 = v98;
      v98 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v74);
        else
          *(_DWORD *)v75 -= 2;
      }
    }
    if (!*((_BYTE *)this + 53))
      goto LABEL_133;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (*((_BYTE *)this + 53))
    {
      v76 = *((_BYTE *)this + 52);
      v77 = (WebKit *)API::Object::newObject(0x18uLL, 32);
      *((_BYTE *)v77 + 16) = v76;
      *(_QWORD *)v77 = off_1E34CC2A8;
      WebKit::InitializeWebKit2(v77);
      *(_QWORD *)v77 = &off_1E34AD258;
      v97 = v77;
      WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>((uint64_t)v96, &v99, &v98, (uint64_t *)&v97);
      if (v97)
        CFRelease(*((CFTypeRef *)v97 + 1));
      v79 = v98;
      v98 = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v78);
        else
          *(_DWORD *)v79 -= 2;
      }
LABEL_133:
      v80 = API::Object::newObject(0x18uLL, 9);
      *(_QWORD *)v80 = off_1E34CC2A8;
      WebKit::InitializeWebKit2((WebKit *)v80);
      *(_QWORD *)v80 = &off_1E34CC280;
      v81 = v99;
      v99 = 0;
      *(_QWORD *)(v80 + 16) = v81;
      if (*(_QWORD *)(a1 + 336))
      {
        v82 = (const WebCore::ResourceRequest *)(*(_QWORD *)a5 + 40);
        v83 = API::Object::newObject(0xD8uLL, 25);
        *(_QWORD *)v83 = off_1E34CC2A8;
        WebKit::InitializeWebKit2((WebKit *)v83);
        *(_QWORD *)v83 = &off_1E34CC2D0;
        WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v83 + 16), v82);
        if (*(unsigned __int8 *)(*(_QWORD *)a5 + 306) >= 3u)
          v84 = 4294967294;
        else
          v84 = *(unsigned __int8 *)(*(_QWORD *)a5 + 306);
        v85 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 336))(*(_QWORD *)(a2 + 8), *(_QWORD *)(v83 + 8), *(_QWORD *)(v80 + 8), *(_BYTE *)(*(_QWORD *)a5 + 305) & 0x1F, v84, *(_QWORD *)(a1 + 16));
        if (v85)
          v85 = (void *)objc_msgSend(v85, "_apiObject");
        v96[0] = v85;
        v86 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v86 + 16))(v86, v96);
        (*(void (**)(uint64_t))(*(_QWORD *)v86 + 8))(v86);
        v87 = v96[0];
        v96[0] = 0;
        if (v87)
          CFRelease(*(CFTypeRef *)(v87 + 8));
        v88 = *(const void **)(v83 + 8);
      }
      else
      {
        if (*(unsigned __int8 *)(*(_QWORD *)a5 + 306) >= 3u)
          v89 = 4294967294;
        else
          v89 = *(unsigned __int8 *)(*(_QWORD *)a5 + 306);
        v90 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(a1 + 24))(*(_QWORD *)(a2 + 8), *(_QWORD *)(v80 + 8), *(_BYTE *)(*(_QWORD *)a5 + 305) & 0x1F, v89, *(_QWORD *)(a1 + 16));
        if (v90)
          v90 = (void *)objc_msgSend(v90, "_apiObject");
        v96[0] = v90;
        v91 = *a6;
        *a6 = 0;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v91 + 16))(v91, v96);
        (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
        v92 = v96[0];
        v96[0] = 0;
        if (!v92)
          goto LABEL_150;
        v88 = *(const void **)(v92 + 8);
      }
      CFRelease(v88);
LABEL_150:
      CFRelease(*(CFTypeRef *)(v80 + 8));
      if (v99)
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v99, v93);
      return;
    }
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  v96[0] = 0;
  v94 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v94 + 16))(v94, v96);
  (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v95 = v96[0];
  v96[0] = 0;
  if (v95)
  {
    v19 = *(const void **)(v95 + 8);
    goto LABEL_14;
  }
}

uint64_t WKPageSetPageUIClient::UIClient::showPage(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(this + 32);
  if (v2)
  {
    if (a2)
      v3 = *((_QWORD *)a2 + 1);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::fullscreenMayReturnToInline(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(this + 528);
  if (v2)
  {
    if (a2)
      v3 = *((_QWORD *)a2 + 1);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::hasVideoInPictureInPictureDidChange(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(this + 560);
  if (v3)
  {
    if (a2)
      v4 = *((_QWORD *)a2 + 1);
    else
      v4 = 0;
    return v3(v4, a3, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::close(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(this + 40);
  if (v2)
  {
    if (a2)
      v3 = *((_QWORD *)a2 + 1);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(this + 16));
  }
  return this;
}

BOOL WKPageSetPageUIClient::UIClient::takeFocus(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  void (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;

  v3 = (void (*)(uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 6);
  if (v3)
  {
    if (a2)
      v4 = *((_QWORD *)a2 + 1);
    else
      v4 = 0;
    v3(v4, a3, *((_QWORD *)this + 2));
  }
  return v3 != 0;
}

uint64_t WKPageSetPageUIClient::UIClient::focus(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(this + 56);
  if (v2)
  {
    if (a2)
      v3 = *((_QWORD *)a2 + 1);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::unfocus(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(this + 64);
  if (v2)
  {
    if (a2)
      v3 = *((_QWORD *)a2 + 1);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(this + 16));
  }
  return this;
}

void WKPageSetPageUIClient::UIClient::runJavaScriptAlert(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  WebKit *v11;
  uint64_t v12;
  WebKit *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebKit *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  WebKit *v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebKit *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WebKit *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WebKit *v43;

  if (a1[61])
  {
    v11 = (WebKit *)API::Object::newObject(0x18uLL, 98);
    *(_QWORD *)v11 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v11);
    *(_QWORD *)v11 = &off_1E34DABF8;
    v12 = *a6;
    *a6 = 0;
    *((_QWORD *)v11 + 2) = v12;
    API::SecurityOrigin::create(&v43);
    v13 = v43;
    v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))a1[61];
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *a3;
    if (*a3)
      *(_DWORD *)v16 += 2;
    v42 = v16;
    API::String::create(&v42, &v43);
    v18 = v42;
    v19 = v43;
    v42 = 0;
    v43 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (v19)
        {
LABEL_8:
          v20 = *((_QWORD *)v19 + 1);
          if (a4)
            goto LABEL_9;
          goto LABEL_34;
        }
LABEL_33:
        v20 = 0;
        if (a4)
        {
LABEL_9:
          v21 = *(_QWORD *)(a4 + 8);
          if (v13)
          {
LABEL_10:
            v22 = *((_QWORD *)v13 + 1);
LABEL_11:
            v14(v15, v20, v21, v22, *((_QWORD *)v11 + 1), a1[2]);
            if (v19)
              CFRelease(*((CFTypeRef *)v19 + 1));
            if (v13)
              CFRelease(*((CFTypeRef *)v13 + 1));
            v23 = (const void *)*((_QWORD *)v11 + 1);
            goto LABEL_30;
          }
LABEL_35:
          v22 = 0;
          goto LABEL_11;
        }
LABEL_34:
        v21 = 0;
        if (v13)
          goto LABEL_10;
        goto LABEL_35;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (v19)
      goto LABEL_8;
    goto LABEL_33;
  }
  if (!a1[56])
  {
    v34 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD))a1[9];
    if (!v34)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a6 + 16))(*a6);
      return;
    }
    v35 = *(_QWORD *)(a2 + 8);
    v36 = *a3;
    if (*a3)
      *(_DWORD *)v36 += 2;
    v42 = v36;
    API::String::create(&v42, &v43);
    v38 = v42;
    v39 = v43;
    v42 = 0;
    v43 = 0;
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
      {
        WTF::StringImpl::destroy(v38, v37);
        if (v39)
        {
LABEL_43:
          v40 = *((_QWORD *)v39 + 1);
          if (a4)
          {
LABEL_44:
            v41 = *(_QWORD *)(a4 + 8);
LABEL_45:
            v34(v35, v40, v41, a1[2]);
            if (v39)
              CFRelease(*((CFTypeRef *)v39 + 1));
            (*(void (**)(_QWORD))(*(_QWORD *)*a6 + 16))(*a6);
            return;
          }
LABEL_55:
          v41 = 0;
          goto LABEL_45;
        }
LABEL_54:
        v40 = 0;
        if (a4)
          goto LABEL_44;
        goto LABEL_55;
      }
      *(_DWORD *)v38 -= 2;
    }
    if (v39)
      goto LABEL_43;
    goto LABEL_54;
  }
  API::SecurityOrigin::create(&v43);
  v24 = v43;
  v25 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))a1[56];
  v26 = *(_QWORD *)(a2 + 8);
  v27 = *a3;
  if (*a3)
    *(_DWORD *)v27 += 2;
  v42 = v27;
  API::String::create(&v42, &v43);
  v29 = v42;
  v30 = v43;
  v42 = 0;
  v43 = 0;
  if (!v29)
  {
LABEL_22:
    if (v30)
      goto LABEL_23;
    goto LABEL_49;
  }
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v29, v28);
  if (v30)
  {
LABEL_23:
    v31 = *((_QWORD *)v30 + 1);
    if (a4)
      goto LABEL_24;
LABEL_50:
    v32 = 0;
    if (v24)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_49:
  v31 = 0;
  if (!a4)
    goto LABEL_50;
LABEL_24:
  v32 = *(_QWORD *)(a4 + 8);
  if (v24)
  {
LABEL_25:
    v33 = *((_QWORD *)v24 + 1);
    goto LABEL_26;
  }
LABEL_51:
  v33 = 0;
LABEL_26:
  v25(v26, v31, v32, v33, a1[2]);
  if (v30)
    CFRelease(*((CFTypeRef *)v30 + 1));
  (*(void (**)(_QWORD))(*(_QWORD *)*a6 + 16))(*a6);
  if (v24)
  {
    v23 = (const void *)*((_QWORD *)v24 + 1);
LABEL_30:
    CFRelease(v23);
  }
}

void WKPageSetPageUIClient::UIClient::runJavaScriptConfirm(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  WebKit *v11;
  uint64_t v12;
  WebKit *v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebKit *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  WebKit *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebKit *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WebKit *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WebKit *v45;

  if (a1[62])
  {
    v11 = (WebKit *)API::Object::newObject(0x18uLL, 99);
    *(_QWORD *)v11 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v11);
    *(_QWORD *)v11 = &off_1E34DAC20;
    v12 = *a6;
    *a6 = 0;
    *((_QWORD *)v11 + 2) = v12;
    API::SecurityOrigin::create(&v45);
    v13 = v45;
    v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))a1[62];
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *a3;
    if (*a3)
      *(_DWORD *)v16 += 2;
    v44 = v16;
    API::String::create(&v44, &v45);
    v18 = v44;
    v19 = v45;
    v44 = 0;
    v45 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
      {
        WTF::StringImpl::destroy(v18, v17);
        if (v19)
        {
LABEL_8:
          v20 = *((_QWORD *)v19 + 1);
          if (a4)
            goto LABEL_9;
          goto LABEL_34;
        }
LABEL_33:
        v20 = 0;
        if (a4)
        {
LABEL_9:
          v21 = *(_QWORD *)(a4 + 8);
          if (v13)
          {
LABEL_10:
            v22 = *((_QWORD *)v13 + 1);
LABEL_11:
            v14(v15, v20, v21, v22, *((_QWORD *)v11 + 1), a1[2]);
            if (v19)
              CFRelease(*((CFTypeRef *)v19 + 1));
            if (v13)
              CFRelease(*((CFTypeRef *)v13 + 1));
            v23 = (const void *)*((_QWORD *)v11 + 1);
            goto LABEL_30;
          }
LABEL_35:
          v22 = 0;
          goto LABEL_11;
        }
LABEL_34:
        v21 = 0;
        if (v13)
          goto LABEL_10;
        goto LABEL_35;
      }
      *(_DWORD *)v18 -= 2;
    }
    if (v19)
      goto LABEL_8;
    goto LABEL_33;
  }
  if (!a1[57])
  {
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))a1[10];
    if (!v35)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a6 + 16))(*a6, 0);
      return;
    }
    v36 = *(_QWORD *)(a2 + 8);
    v37 = *a3;
    if (*a3)
      *(_DWORD *)v37 += 2;
    v44 = v37;
    API::String::create(&v44, &v45);
    v39 = v44;
    v40 = v45;
    v44 = 0;
    v45 = 0;
    if (v39)
    {
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v38);
        if (v40)
        {
LABEL_43:
          v41 = *((_QWORD *)v40 + 1);
          if (a4)
          {
LABEL_44:
            v42 = *(_QWORD *)(a4 + 8);
LABEL_45:
            v43 = v35(v36, v41, v42, a1[2]);
            if (v40)
              CFRelease(*((CFTypeRef *)v40 + 1));
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, v43);
            return;
          }
LABEL_55:
          v42 = 0;
          goto LABEL_45;
        }
LABEL_54:
        v41 = 0;
        if (a4)
          goto LABEL_44;
        goto LABEL_55;
      }
      *(_DWORD *)v39 -= 2;
    }
    if (v40)
      goto LABEL_43;
    goto LABEL_54;
  }
  API::SecurityOrigin::create(&v45);
  v24 = v45;
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))a1[57];
  v26 = *(_QWORD *)(a2 + 8);
  v27 = *a3;
  if (*a3)
    *(_DWORD *)v27 += 2;
  v44 = v27;
  API::String::create(&v44, &v45);
  v29 = v44;
  v30 = v45;
  v44 = 0;
  v45 = 0;
  if (!v29)
  {
LABEL_22:
    if (v30)
      goto LABEL_23;
    goto LABEL_49;
  }
  if (*(_DWORD *)v29 != 2)
  {
    *(_DWORD *)v29 -= 2;
    goto LABEL_22;
  }
  WTF::StringImpl::destroy(v29, v28);
  if (v30)
  {
LABEL_23:
    v31 = *((_QWORD *)v30 + 1);
    if (a4)
      goto LABEL_24;
LABEL_50:
    v32 = 0;
    if (v24)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_49:
  v31 = 0;
  if (!a4)
    goto LABEL_50;
LABEL_24:
  v32 = *(_QWORD *)(a4 + 8);
  if (v24)
  {
LABEL_25:
    v33 = *((_QWORD *)v24 + 1);
    goto LABEL_26;
  }
LABEL_51:
  v33 = 0;
LABEL_26:
  v34 = v25(v26, v31, v32, v33, a1[2]);
  if (v30)
    CFRelease(*((CFTypeRef *)v30 + 1));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, v34);
  if (v24)
  {
    v23 = (const void *)*((_QWORD *)v24 + 1);
LABEL_30:
    CFRelease(v23);
  }
}

void WKPageSetPageUIClient::UIClient::runJavaScriptPrompt(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3, WTF::StringImpl **a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  WebKit *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  WTF::StringImpl *v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;

  if (a1[63])
  {
    v13 = (WebKit *)API::Object::newObject(0x18uLL, 100);
    *(_QWORD *)v13 = off_1E34CC2A8;
    WebKit::InitializeWebKit2(v13);
    *(_QWORD *)v13 = &off_1E34DAC48;
    v14 = *a7;
    *a7 = 0;
    *((_QWORD *)v13 + 2) = v14;
    API::SecurityOrigin::create(&v72);
    v15 = v72;
    v16 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))a1[63];
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *a3;
    if (*a3)
      *(_DWORD *)v18 += 2;
    v71 = v18;
    API::String::create(&v71, &v72);
    v20 = v71;
    v21 = v72;
    v71 = 0;
    v72 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v19);
        if (v21)
          goto LABEL_8;
        goto LABEL_52;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v21)
    {
LABEL_8:
      v22 = *((_QWORD *)v21 + 1);
      goto LABEL_9;
    }
LABEL_52:
    v22 = 0;
LABEL_9:
    v23 = *a4;
    if (*a4)
      *(_DWORD *)v23 += 2;
    v71 = v23;
    API::String::create(&v71, &v72);
    v25 = v71;
    v26 = v72;
    v71 = 0;
    v72 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v24);
        if (v26)
        {
LABEL_15:
          v27 = *((_QWORD *)v26 + 1);
          if (a5)
            goto LABEL_16;
          goto LABEL_55;
        }
LABEL_54:
        v27 = 0;
        if (a5)
        {
LABEL_16:
          v28 = *(_QWORD *)(a5 + 8);
          if (v15)
          {
LABEL_17:
            v29 = *((_QWORD *)v15 + 1);
LABEL_18:
            v16(v17, v22, v27, v28, v29, *((_QWORD *)v13 + 1), a1[2]);
            if (v26)
              CFRelease(*((CFTypeRef *)v26 + 1));
            if (v21)
              CFRelease(*((CFTypeRef *)v21 + 1));
            if (v15)
              CFRelease(*((CFTypeRef *)v15 + 1));
            v30 = (const void *)*((_QWORD *)v13 + 1);
            goto LABEL_99;
          }
LABEL_56:
          v29 = 0;
          goto LABEL_18;
        }
LABEL_55:
        v28 = 0;
        if (v15)
          goto LABEL_17;
        goto LABEL_56;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v26)
      goto LABEL_15;
    goto LABEL_54;
  }
  if (!a1[58])
  {
    v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))a1[11];
    if (!v50)
    {
LABEL_86:
      v72 = 0;
      (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a7 + 16))(*a7, &v72);
      v70 = v72;
      v72 = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v69);
        else
          *(_DWORD *)v70 -= 2;
      }
      return;
    }
    v51 = *(_QWORD *)(a2 + 8);
    v52 = *a3;
    if (*a3)
      *(_DWORD *)v52 += 2;
    v71 = v52;
    API::String::create(&v71, &v72);
    v54 = v71;
    v55 = v72;
    v71 = 0;
    v72 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::destroy(v54, v53);
        if (v55)
          goto LABEL_64;
        goto LABEL_102;
      }
      *(_DWORD *)v54 -= 2;
    }
    if (v55)
    {
LABEL_64:
      v56 = *((_QWORD *)v55 + 1);
      goto LABEL_65;
    }
LABEL_102:
    v56 = 0;
LABEL_65:
    v57 = *a4;
    if (*a4)
      *(_DWORD *)v57 += 2;
    v71 = v57;
    API::String::create(&v71, &v72);
    v59 = v71;
    v60 = v72;
    v71 = 0;
    v72 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2)
      {
        WTF::StringImpl::destroy(v59, v58);
        if (v60)
        {
LABEL_71:
          v61 = *((_QWORD *)v60 + 1);
          if (a5)
          {
LABEL_72:
            v62 = *(_QWORD *)(a5 + 8);
            goto LABEL_73;
          }
LABEL_105:
          v62 = 0;
LABEL_73:
          v63 = (void *)v50(v51, v56, v61, v62, a1[2]);
          if (v63)
          {
            v64 = objc_msgSend(v63, "_apiObject", v71);
            if (!v60)
              goto LABEL_76;
          }
          else
          {
            v64 = 0;
            if (!v60)
            {
LABEL_76:
              if (v55)
                CFRelease(*((CFTypeRef *)v55 + 1));
              if (v64)
              {
                WTF::String::isolatedCopy();
                (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a7 + 16))(*a7, &v72);
                v66 = v72;
                v72 = 0;
                if (v66)
                {
                  if (*(_DWORD *)v66 == 2)
                    WTF::StringImpl::destroy(v66, v65);
                  else
                    *(_DWORD *)v66 -= 2;
                }
                v30 = *(const void **)(v64 + 8);
                goto LABEL_99;
              }
              goto LABEL_86;
            }
          }
          CFRelease(*((CFTypeRef *)v60 + 1));
          goto LABEL_76;
        }
LABEL_104:
        v61 = 0;
        if (a5)
          goto LABEL_72;
        goto LABEL_105;
      }
      *(_DWORD *)v59 -= 2;
    }
    if (v60)
      goto LABEL_71;
    goto LABEL_104;
  }
  API::SecurityOrigin::create(&v72);
  v31 = v72;
  v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))a1[58];
  v33 = *(_QWORD *)(a2 + 8);
  v34 = *a3;
  if (*a3)
    *(_DWORD *)v34 += 2;
  v71 = v34;
  API::String::create(&v71, &v72);
  v36 = v71;
  v37 = v72;
  v71 = 0;
  v72 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
    {
      WTF::StringImpl::destroy(v36, v35);
      if (v37)
        goto LABEL_32;
      goto LABEL_90;
    }
    *(_DWORD *)v36 -= 2;
  }
  if (v37)
  {
LABEL_32:
    v38 = *((_QWORD *)v37 + 1);
    goto LABEL_33;
  }
LABEL_90:
  v38 = 0;
LABEL_33:
  v39 = *a4;
  if (*a4)
    *(_DWORD *)v39 += 2;
  v71 = v39;
  API::String::create(&v71, &v72);
  v41 = v71;
  v42 = v72;
  v71 = 0;
  v72 = 0;
  if (!v41)
  {
LABEL_38:
    if (v42)
      goto LABEL_39;
    goto LABEL_92;
  }
  if (*(_DWORD *)v41 != 2)
  {
    *(_DWORD *)v41 -= 2;
    goto LABEL_38;
  }
  WTF::StringImpl::destroy(v41, v40);
  if (v42)
  {
LABEL_39:
    v43 = *((_QWORD *)v42 + 1);
    if (a5)
      goto LABEL_40;
LABEL_93:
    v44 = 0;
    if (v31)
      goto LABEL_41;
    goto LABEL_94;
  }
LABEL_92:
  v43 = 0;
  if (!a5)
    goto LABEL_93;
LABEL_40:
  v44 = *(_QWORD *)(a5 + 8);
  if (v31)
  {
LABEL_41:
    v45 = *((_QWORD *)v31 + 1);
    goto LABEL_42;
  }
LABEL_94:
  v45 = 0;
LABEL_42:
  v46 = (void *)v32(v33, v38, v43, v44, v45, a1[2]);
  if (!v46)
  {
    v47 = 0;
    if (!v42)
      goto LABEL_45;
    goto LABEL_44;
  }
  v47 = objc_msgSend(v46, "_apiObject", v71);
  if (v42)
LABEL_44:
    CFRelease(*((CFTypeRef *)v42 + 1));
LABEL_45:
  if (v37)
    CFRelease(*((CFTypeRef *)v37 + 1));
  if (v47)
  {
    WTF::String::isolatedCopy();
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a7 + 16))(*a7, &v72);
    v49 = v72;
    v72 = 0;
    if (v49)
    {
      if (*(_DWORD *)v49 == 2)
        WTF::StringImpl::destroy(v49, v48);
      else
        *(_DWORD *)v49 -= 2;
    }
    CFRelease(*(CFTypeRef *)(v47 + 8));
LABEL_97:
    if (!v31)
      return;
    goto LABEL_98;
  }
  v72 = 0;
  (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a7 + 16))(*a7, &v72);
  v68 = v72;
  v72 = 0;
  if (!v68)
    goto LABEL_97;
  if (*(_DWORD *)v68 != 2)
  {
    *(_DWORD *)v68 -= 2;
    if (!v31)
      return;
    goto LABEL_98;
  }
  WTF::StringImpl::destroy(v68, v67);
  if (v31)
  {
LABEL_98:
    v30 = (const void *)*((_QWORD *)v31 + 1);
LABEL_99:
    CFRelease(v30);
  }
}

void WKPageSetPageUIClient::UIClient::setStatusText(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WebKit *v9;
  WTF::StringImpl *v10;
  WebKit *v11;

  v3 = (void (*)(uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 12);
  if (v3)
  {
    if (a2)
      v5 = *((_QWORD *)a2 + 1);
    else
      v5 = 0;
    v6 = *a3;
    if (*a3)
      *(_DWORD *)v6 += 2;
    v10 = v6;
    API::String::create(&v10, &v11);
    v8 = v10;
    v9 = v11;
    v10 = 0;
    v11 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v7);
        if (v9)
          goto LABEL_10;
        goto LABEL_13;
      }
      *(_DWORD *)v8 -= 2;
    }
    if (v9)
    {
LABEL_10:
      v3(v5, *((_QWORD *)v9 + 1), *((_QWORD *)this + 2));
      CFRelease(*((CFTypeRef *)v9 + 1));
      return;
    }
LABEL_13:
    v3(v5, 0, *((_QWORD *)this + 2));
  }
}

void WKPageSetPageUIClient::UIClient::mouseDidMoveOverElement(uint64_t a1, WebKit::WebPageProxy *a2, const WebKit::WebHitTestResultData *a3, char a4, uint64_t a5)
{
  int v10;
  CFTypeRef *v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 344))
  {
    v10 = *(_DWORD *)(a1 + 8);
    if (v10 > 0)
    {
LABEL_7:
      v11 = (CFTypeRef *)API::Object::newObject(0x2B0uLL, 67);
      API::HitTestResult::HitTestResult((API::HitTestResult *)v11, a3, a2);
      if (v11)
        v12 = v11[1];
      else
        v12 = 0;
      if (a5)
        v13 = *(_QWORD *)(a5 + 8);
      else
        v13 = 0;
      (*(void (**)(_QWORD, CFTypeRef, _QWORD, uint64_t, _QWORD))(a1 + 344))(*((_QWORD *)a2 + 1), v12, a4 & 0x1F, v13, *(_QWORD *)(a1 + 16));
      if (v11)
        CFRelease(v11[1]);
      return;
    }
  }
  else
  {
    if (!*(_QWORD *)(a1 + 104))
      return;
    v10 = *(_DWORD *)(a1 + 8);
    if (v10 > 0)
      return;
  }
  if (v10)
    goto LABEL_7;
  if (a5)
    v14 = *(_QWORD *)(a5 + 8);
  else
    v14 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(a1 + 104))(*((_QWORD *)a2 + 1), a4 & 0x1F, v14, *(_QWORD *)(a1 + 16));
}

uint64_t WKPageSetPageUIClient::UIClient::didNotHandleKeyEvent(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 120);
  if (v3)
  {
    if (a2)
      v4 = *(_QWORD *)(a2 + 8);
    else
      v4 = 0;
    return v3(v4, *(_QWORD *)(a3 + 88), *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::didNotHandleWheelEvent(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, _QWORD, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 128);
  if (v2)
  {
    if (a2)
      v3 = *(_QWORD *)(a2 + 8);
    else
      v3 = 0;
    return v2(v3, 0, *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::toolbarsAreVisible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(_QWORD, _QWORD);
  uint64_t (*v5)(void);

  v4 = *(void (**)(_QWORD, _QWORD))(a1 + 136);
  if (v4)
  {
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 16));
    v5 = *(uint64_t (**)(void))(**(_QWORD **)a3 + 16);
  }
  else
  {
    v5 = *(uint64_t (**)(void))(**(_QWORD **)a3 + 16);
  }
  return v5();
}

uint64_t WKPageSetPageUIClient::UIClient::setToolbarsAreVisible(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(this + 144);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), a3, *(_QWORD *)(this + 16));
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::menuBarIsVisible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(_QWORD, _QWORD);
  uint64_t (*v5)(void);

  v4 = *(void (**)(_QWORD, _QWORD))(a1 + 152);
  if (v4)
  {
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 16));
    v5 = *(uint64_t (**)(void))(**(_QWORD **)a3 + 16);
  }
  else
  {
    v5 = *(uint64_t (**)(void))(**(_QWORD **)a3 + 16);
  }
  return v5();
}

uint64_t WKPageSetPageUIClient::UIClient::setMenuBarIsVisible(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(this + 160);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), a3, *(_QWORD *)(this + 16));
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::statusBarIsVisible(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v4)(_QWORD, _QWORD);
  uint64_t (*v5)(void);

  v4 = *(void (**)(_QWORD, _QWORD))(a1 + 168);
  if (v4)
  {
    v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 16));
    v5 = *(uint64_t (**)(void))(**(_QWORD **)a3 + 16);
  }
  else
  {
    v5 = *(uint64_t (**)(void))(**(_QWORD **)a3 + 16);
  }
  return v5();
}

uint64_t WKPageSetPageUIClient::UIClient::setStatusBarIsVisible(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(this + 176);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), a3, *(_QWORD *)(this + 16));
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::setIsResizable(uint64_t this, WebKit::WebPageProxy *a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, uint64_t, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(this + 192);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), a3, *(_QWORD *)(this + 16));
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::setWindowFrame(uint64_t this, WebKit::WebPageProxy *a2, const FloatRect *a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, double, double, double, double);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(this + 208);
  if (v3)
    return v3(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16), a3->m_location.m_x, a3->m_location.m_y, a3->m_size.m_width, a3->m_size.m_height);
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::windowFrame(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7)
{
  double (*v8)(_QWORD, _QWORD);
  uint64_t (*v9)(__n128, __n128, __n128, __n128);

  v8 = *(double (**)(_QWORD, _QWORD))(a1 + 200);
  if (v8)
  {
    a4.n128_f64[0] = v8(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 16));
    a4.n128_f32[0] = a4.n128_f64[0];
    a5.n128_f32[0] = a5.n128_f64[0];
    a6.n128_f32[0] = a6.n128_f64[0];
    a7.n128_f32[0] = a7.n128_f64[0];
    v9 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(**(_QWORD **)a3 + 16);
  }
  else
  {
    v9 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(**(_QWORD **)a3 + 16);
    a4.n128_u32[0] = 0;
    a5.n128_u32[0] = 0;
    a6.n128_u32[0] = 0;
    a7.n128_u32[0] = 0;
  }
  return v9(a4, a5, a6, a7);
}

BOOL WKPageSetPageUIClient::UIClient::canRunBeforeUnloadConfirmPanel(WKPageSetPageUIClient::UIClient *this)
{
  return *((_QWORD *)this + 27) || *((_QWORD *)this + 65) != 0;
}

void WKPageSetPageUIClient::UIClient::runBeforeUnloadConfirmPanel(_QWORD *a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WebKit *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebKit *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WebKit *v31;

  if (a1[65])
  {
    v11 = API::Object::newObject(0x18uLL, 97);
    *(_QWORD *)v11 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v11);
    *(_QWORD *)v11 = &off_1E34DAC70;
    v12 = *a6;
    *a6 = 0;
    *(_QWORD *)(v11 + 16) = v12;
    v13 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))a1[65];
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *a3;
    if (*a3)
      *(_DWORD *)v15 += 2;
    v30 = v15;
    API::String::create(&v30, &v31);
    v17 = v30;
    v18 = v31;
    v30 = 0;
    v31 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
      {
        WTF::StringImpl::destroy(v17, v16);
        if (v18)
        {
LABEL_8:
          v19 = *((_QWORD *)v18 + 1);
          if (a4)
          {
LABEL_9:
            v20 = *(_QWORD *)(a4 + 8);
LABEL_10:
            v13(v14, v19, v20, *(_QWORD *)(v11 + 8), a1[2]);
            if (v18)
              CFRelease(*((CFTypeRef *)v18 + 1));
            CFRelease(*(CFTypeRef *)(v11 + 8));
            return;
          }
LABEL_28:
          v20 = 0;
          goto LABEL_10;
        }
LABEL_27:
        v19 = 0;
        if (a4)
          goto LABEL_9;
        goto LABEL_28;
      }
      *(_DWORD *)v17 -= 2;
    }
    if (v18)
      goto LABEL_8;
    goto LABEL_27;
  }
  v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))a1[27];
  if (!v21)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, 1);
    return;
  }
  v22 = *(_QWORD *)(a2 + 8);
  v23 = *a3;
  if (*a3)
    *(_DWORD *)v23 += 2;
  v30 = v23;
  API::String::create(&v30, &v31);
  v25 = v30;
  v26 = v31;
  v30 = 0;
  v31 = 0;
  if (!v25)
  {
LABEL_19:
    if (v26)
      goto LABEL_20;
LABEL_31:
    v27 = 0;
    if (a4)
      goto LABEL_21;
LABEL_32:
    v28 = 0;
    goto LABEL_22;
  }
  if (*(_DWORD *)v25 != 2)
  {
    *(_DWORD *)v25 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v25, v24);
  if (!v26)
    goto LABEL_31;
LABEL_20:
  v27 = *((_QWORD *)v26 + 1);
  if (!a4)
    goto LABEL_32;
LABEL_21:
  v28 = *(_QWORD *)(a4 + 8);
LABEL_22:
  v29 = v21(v22, v27, v28, a1[2]);
  if (v26)
    CFRelease(*((CFTypeRef *)v26 + 1));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 16))(*a6, v29);
}

uint64_t WKPageSetPageUIClient::UIClient::pageDidScroll(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t, _QWORD))(this + 232);
  if (v2)
  {
    if (a2)
      v3 = *((_QWORD *)a2 + 1);
    else
      v3 = 0;
    return v2(v3, *(_QWORD *)(this + 16));
  }
  return this;
}

void WKPageSetPageUIClient::UIClient::exceededDatabaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WTF::StringImpl **a5, WTF::StringImpl **a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebKit *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WebKit *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  WebKit *v31;

  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 240);
  if (!v12)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a11 + 16))(*a11, a7);
    return;
  }
  if (a2)
  {
    v28 = *(_QWORD *)(a2 + 8);
    if (a3)
    {
LABEL_4:
      v27 = *(_QWORD *)(a3 + 8);
      goto LABEL_5;
    }
  }
  else
  {
    v28 = 0;
    if (a3)
      goto LABEL_4;
  }
  v27 = 0;
LABEL_5:
  if (a4)
    v15 = *(_QWORD *)(a4 + 8);
  else
    v15 = 0;
  v16 = *a5;
  if (*a5)
    *(_DWORD *)v16 += 2;
  v30 = v16;
  API::String::create(&v30, &v31);
  v18 = v30;
  v19 = v31;
  v30 = 0;
  v31 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      WTF::StringImpl::destroy(v18, v17);
      if (v19)
        goto LABEL_13;
      goto LABEL_25;
    }
    *(_DWORD *)v18 -= 2;
  }
  if (v19)
  {
LABEL_13:
    v20 = *((_QWORD *)v19 + 1);
    goto LABEL_14;
  }
LABEL_25:
  v20 = 0;
LABEL_14:
  v21 = *a6;
  if (*a6)
    *(_DWORD *)v21 += 2;
  v30 = v21;
  API::String::create(&v30, &v31);
  v23 = v30;
  v24 = v31;
  v30 = 0;
  v31 = 0;
  if (!v23)
  {
LABEL_19:
    if (v24)
      goto LABEL_20;
    goto LABEL_27;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v23, v22);
  if (v24)
  {
LABEL_20:
    v25 = v12(v28, v27, v15, v20, *((_QWORD *)v24 + 1), a7, a8, a9, a10, *(_QWORD *)(a1 + 16));
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a11 + 16))(*a11, v25);
    CFRelease(*((CFTypeRef *)v24 + 1));
    if (!v19)
      return;
    goto LABEL_21;
  }
LABEL_27:
  v26 = v12(v28, v27, v15, v20, 0, a7, a8, a9, a10, *(_QWORD *)(a1 + 16));
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a11 + 16))(*a11, v26);
  if (v19)
LABEL_21:
    CFRelease(*((CFTypeRef *)v19 + 1));
}

BOOL WKPageSetPageUIClient::UIClient::lockScreenOrientation(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  v3 = *(void (**)(uint64_t, uint64_t))(a1 + 632);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (a3 >= 4)
      v5 = 0;
    else
      v5 = a3;
    v3(v4, v5);
  }
  return v3 != 0;
}

uint64_t WKPageSetPageUIClient::UIClient::unlockScreenOrientation(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(_QWORD);

  v2 = *(uint64_t (**)(_QWORD))(this + 640);
  if (v2)
    return v2(*((_QWORD *)a2 + 1));
  return this;
}

BOOL WKPageSetPageUIClient::UIClient::runOpenPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 248);
  if (v6)
  {
    if (a3)
      v8 = *(_QWORD *)(a3 + 8);
    else
      v8 = 0;
    v9 = *(_QWORD *)(a2 + 8);
    if (a5)
    {
      v10 = *(_QWORD *)(a5 + 8);
      if (a6)
      {
LABEL_6:
        v11 = *(_QWORD *)(a6 + 8);
LABEL_7:
        v6(v9, v8, v10, v11, *(_QWORD *)(a1 + 16));
        return v6 != 0;
      }
    }
    else
    {
      v10 = 0;
      if (a6)
        goto LABEL_6;
    }
    v11 = 0;
    goto LABEL_7;
  }
  return v6 != 0;
}

void WKPageSetPageUIClient::UIClient::decidePolicyForGeolocationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  void (*v9)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(a1 + 256))
  {
    API::SecurityOrigin::create(&v16);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 256);
    v10 = *(_QWORD *)(a2 + 8);
    v11 = *(_QWORD *)(a3 + 8);
    if (v16)
      v12 = *(_QWORD *)(v16 + 8);
    else
      v12 = 0;
    v13 = *a5;
    *a5 = 0;
    v14 = API::Object::newObject(0x18uLL, 65);
    *(_QWORD *)v14 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v14);
    *(_QWORD *)v14 = &off_1E34DAC98;
    *(_QWORD *)(v14 + 16) = v13;
    v9(v10, v11, v12, *(_QWORD *)(v14 + 8), *(_QWORD *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v14 + 8));
    v15 = v16;
    v16 = 0;
    if (v15)
      CFRelease(*(CFTypeRef *)(v15 + 8));
  }
}

WebKit::UserMediaPermissionRequestManagerProxy *WKPageSetPageUIClient::UIClient::decidePolicyForUserMediaPermissionRequest(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3, API::SecurityOrigin *a4, API::SecurityOrigin *a5, WebKit::UserMediaPermissionRequestProxy *a6)
{
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v6 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 54);
  if (v6)
    return (WebKit::UserMediaPermissionRequestManagerProxy *)v6(*((_QWORD *)a2 + 1), *((_QWORD *)a3 + 1), *((_QWORD *)a4 + 1), *((_QWORD *)a5 + 1), *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
  else
    return WebKit::UserMediaPermissionRequestProxy::deny(a6, 1);
}

uint64_t WKPageSetPageUIClient::UIClient::checkUserMediaPermissionForOrigin(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t (*v6)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v7;

  v6 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(result + 512);
  if (v6)
    return v6(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8), *(_QWORD *)(a5 + 8), *(_QWORD *)(a6 + 8), *(_QWORD *)(result + 16));
  v7 = *(_QWORD *)(a6 + 32);
  if (v7)
  {
    *(_QWORD *)(a6 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, 1);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

void WKPageSetPageUIClient::UIClient::decidePolicyForNotificationPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v5)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 352);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a3 + 8);
    v9 = API::Object::newObject(0x18uLL, 82);
    *(_QWORD *)v9 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v9);
    *(_QWORD *)v9 = &off_1E34DACC0;
    v10 = *a4;
    *a4 = 0;
    *(_QWORD *)(v9 + 16) = v10;
    v5(v7, v8, *(_QWORD *)(v9 + 8), *(_QWORD *)(a1 + 16));
    CFRelease(*(CFTypeRef *)(v9 + 8));
  }
  else
  {
    v11 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 16))(v11, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

void WKPageSetPageUIClient::UIClient::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, WTF::StringImpl **a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WebKit *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebKit *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebKit *v29;

  if (*(_QWORD *)(a1 + 584))
  {
    v13 = API::Object::newObject(0x18uLL, 93);
    *(_QWORD *)v13 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v13);
    *(_QWORD *)v13 = &off_1E34DACE8;
    v14 = *a7;
    *a7 = 0;
    *(_QWORD *)(v13 + 16) = v14;
    if (a3)
      v15 = *(_QWORD *)(a3 + 8);
    else
      v15 = 0;
    v16 = *(_QWORD *)(a2 + 8);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 584);
    v18 = *a4;
    if (*a4)
      *(_DWORD *)v18 += 2;
    v28 = v18;
    API::String::create(&v28, &v29);
    v20 = v28;
    v21 = v29;
    v28 = 0;
    v29 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
      {
        WTF::StringImpl::destroy(v20, v19);
        if (v21)
          goto LABEL_10;
        goto LABEL_22;
      }
      *(_DWORD *)v20 -= 2;
    }
    if (v21)
    {
LABEL_10:
      v22 = *((_QWORD *)v21 + 1);
      goto LABEL_11;
    }
LABEL_22:
    v22 = 0;
LABEL_11:
    v23 = *a5;
    if (*a5)
      *(_DWORD *)v23 += 2;
    v28 = v23;
    API::String::create(&v28, &v29);
    v25 = v28;
    v26 = v29;
    v28 = 0;
    v29 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
      {
        WTF::StringImpl::destroy(v25, v24);
        if (v26)
        {
LABEL_17:
          v17(v16, v15, v22, *((_QWORD *)v26 + 1), *(_QWORD *)(v13 + 8), *(_QWORD *)(a1 + 16));
          CFRelease(*((CFTypeRef *)v26 + 1));
          if (!v21)
          {
LABEL_19:
            CFRelease(*(CFTypeRef *)(v13 + 8));
            return;
          }
LABEL_18:
          CFRelease(*((CFTypeRef *)v21 + 1));
          goto LABEL_19;
        }
LABEL_24:
        v17(v16, v15, v22, 0, *(_QWORD *)(v13 + 8), *(_QWORD *)(a1 + 16));
        if (!v21)
          goto LABEL_19;
        goto LABEL_18;
      }
      *(_DWORD *)v25 -= 2;
    }
    if (v26)
      goto LABEL_17;
    goto LABEL_24;
  }
  v27 = *a7;
  *a7 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 16))(v27, 1);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
}

float WKPageSetPageUIClient::UIClient::headerHeight(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3)
{
  void (*v3)(_QWORD, _QWORD, _QWORD);
  float result;

  v3 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)this + 33);
  if (!v3)
    return 0.0;
  v3(*((_QWORD *)a2 + 1), *((_QWORD *)a3 + 1), *((_QWORD *)this + 2));
  return result;
}

float WKPageSetPageUIClient::UIClient::footerHeight(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WebKit::WebFrameProxy *a3)
{
  void (*v3)(_QWORD, _QWORD, _QWORD);
  float result;

  v3 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)this + 34);
  if (!v3)
    return 0.0;
  v3(*((_QWORD *)a2 + 1), *((_QWORD *)a3 + 1), *((_QWORD *)this + 2));
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::drawHeader(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, double, double, double, double);

  v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, double, double, double, double))(result + 280);
  if (v4)
    return v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(result + 16), *a4, a4[1], a4[2], a4[3]);
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::drawFooter(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, double, double, double, double);

  v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, double, double, double, double))(result + 288);
  if (v4)
    return v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(result + 16), *a4, a4[1], a4[2], a4[3]);
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::printFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  void (*v6)(_QWORD, _QWORD, _QWORD);
  uint64_t v7;

  v6 = *(void (**)(_QWORD, _QWORD, _QWORD))(a1 + 296);
  if (v6)
    v6(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(a1 + 16));
  v7 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

BOOL WKPageSetPageUIClient::UIClient::canRunModal(WKPageSetPageUIClient::UIClient *this)
{
  return *((_QWORD *)this + 38) != 0;
}

uint64_t WKPageSetPageUIClient::UIClient::runModal(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 304);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

void WKPageSetPageUIClient::UIClient::saveDataToFileInDownloadsFolder(WKPageSetPageUIClient::UIClient *this, WebKit::WebPageProxy *a2, WTF::StringImpl **a3, WTF::StringImpl **a4, WTF::StringImpl **a5, API::Data *a6)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WebKit *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WebKit *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WebKit *v25;
  WTF::StringImpl *v26;
  WebKit *v27;

  v6 = (void (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))*((_QWORD *)this + 40);
  if (v6)
  {
    if (a2)
      v11 = *((_QWORD *)a2 + 1);
    else
      v11 = 0;
    v12 = *a3;
    if (*a3)
      *(_DWORD *)v12 += 2;
    v26 = v12;
    API::String::create(&v26, &v27);
    v14 = v26;
    v15 = v27;
    v26 = 0;
    v27 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
      {
        WTF::StringImpl::destroy(v14, v13);
        if (v15)
          goto LABEL_10;
        goto LABEL_29;
      }
      *(_DWORD *)v14 -= 2;
    }
    if (v15)
    {
LABEL_10:
      v16 = *((_QWORD *)v15 + 1);
      goto LABEL_11;
    }
LABEL_29:
    v16 = 0;
LABEL_11:
    v17 = *a4;
    if (*a4)
      *(_DWORD *)v17 += 2;
    v26 = v17;
    API::String::create(&v26, &v27);
    v19 = v26;
    v20 = v27;
    v26 = 0;
    v27 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
      {
        WTF::StringImpl::destroy(v19, v18);
        if (v20)
          goto LABEL_17;
        goto LABEL_31;
      }
      *(_DWORD *)v19 -= 2;
    }
    if (v20)
    {
LABEL_17:
      v21 = *((_QWORD *)v20 + 1);
      goto LABEL_18;
    }
LABEL_31:
    v21 = 0;
LABEL_18:
    v22 = *a5;
    if (!*a5)
      goto LABEL_33;
    *(_DWORD *)v22 += 2;
    v26 = v22;
    API::URL::create((API::URL *)&v26, &v27);
    v24 = v26;
    v25 = v27;
    v26 = 0;
    v27 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        WTF::StringImpl::destroy(v24, v23);
        if (v25)
        {
LABEL_23:
          v6(v11, v16, v21, *((_QWORD *)v25 + 1), *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
          CFRelease(*((CFTypeRef *)v25 + 1));
          if (!v20)
            goto LABEL_25;
          goto LABEL_24;
        }
LABEL_33:
        v6(v11, v16, v21, 0, *((_QWORD *)a6 + 1), *((_QWORD *)this + 2));
        if (!v20)
        {
LABEL_25:
          if (v15)
            CFRelease(*((CFTypeRef *)v15 + 1));
          return;
        }
LABEL_24:
        CFRelease(*((CFTypeRef *)v20 + 1));
        goto LABEL_25;
      }
      *(_DWORD *)v24 -= 2;
    }
    if (v25)
      goto LABEL_23;
    goto LABEL_33;
  }
}

uint64_t WKPageSetPageUIClient::UIClient::pinnedStateDidChange(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 392);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::isPlayingMediaDidChange(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 424);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::handleAutoplayEvent(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t (*v4)(_QWORD, uint64_t, _QWORD, _QWORD);

  v4 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(result + 552);
  if (v4)
  {
    if (a3 >= 4)
    {
      result = 2134;
      __break(0xC471u);
    }
    else
    {
      return v4(*(_QWORD *)(a2 + 8), a3, a4 & 7, *(_QWORD *)(result + 16));
    }
  }
  return result;
}

void WKPageSetPageUIClient::UIClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  const WTF::String *v9;
  WTF::StringImpl *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF *v21;
  uint64_t v22;

  if (*(_QWORD *)(a1 + 592))
  {
    WebKit::PageLoadState::activeURL((unsigned __int8 *)(*(_QWORD *)(a2 + 32) + 968), &v20);
    WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v20, v9);
    API::SecurityOrigin::create(&v22);
    v11 = v21;
    v21 = 0;
    if (v11)
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v11, v10);
    v12 = v20;
    v20 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v10);
      else
        *(_DWORD *)v12 -= 2;
    }
    CFRetain(*(CFTypeRef *)(a2 + 8));
    v21 = (WTF *)a2;
    v14 = API::Object::newObject(0x140uLL, 60);
    API::FrameInfo::FrameInfo(v14, a4, (uint64_t *)&v21);
    if (v21)
      CFRelease(*((CFTypeRef *)v21 + 1));
    if (v22)
      v15 = *(_QWORD *)(v22 + 8);
    else
      v15 = 0;
    if (v14)
      v16 = *(_QWORD *)(v14 + 8);
    else
      v16 = 0;
    v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(a1 + 592))(*(_QWORD *)(a2 + 8), v15, v16, *(_QWORD *)(a1 + 16));
    v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 + 8));
    v19 = v22;
    v22 = 0;
    if (v19)
      CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  else
  {
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

uint64_t WKPageSetPageUIClient::UIClient::didClickAutoFillButton(uint64_t this, WebKit::WebPageProxy *a2, API::Object *a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(this + 440);
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 1);
    if (a3)
      v5 = *((_QWORD *)a3 + 1);
    else
      v5 = 0;
    return v3(v4, v5, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::didResignInputElementStrongPasswordAppearance(uint64_t this, WebKit::WebPageProxy *a2, API::Object *a3)
{
  uint64_t (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(this + 576);
  if (v3)
  {
    v4 = *((_QWORD *)a2 + 1);
    if (a3)
      v5 = *((_QWORD *)a3 + 1);
    else
      v5 = 0;
    return v3(v4, v5, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageUIClient::UIClient::runWebAuthenticationPanel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 600))
  {
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v8 = off_1E34DAD10;
    v9 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, 1);
  }
  else
  {
    v10 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

void WKPageSetPageUIClient::UIClient::decidePolicyForMediaKeySystemPermissionRequest(uint64_t a1, uint64_t a2, uint64_t a3, API::String *this, uint64_t *a5)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebKit *v12;
  uint64_t v13;
  WebKit *v14;

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a1 + 616);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = *(_QWORD *)(a3 + 8);
    API::String::create(&v14);
    if (v14)
      v9 = *((_QWORD *)v14 + 1);
    else
      v9 = 0;
    v10 = API::Object::newObject(0x18uLL, 127);
    *(_QWORD *)v10 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v10);
    *(_QWORD *)v10 = &off_1E34DAD60;
    v11 = *a5;
    *a5 = 0;
    *(_QWORD *)(v10 + 16) = v11;
    v6(v7, v8, v9, *(_QWORD *)(v10 + 8));
    CFRelease(*(CFTypeRef *)(v10 + 8));
    v12 = v14;
    v14 = 0;
    if (v12)
      CFRelease(*((CFTypeRef *)v12 + 1));
  }
  else
  {
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD, uint64_t, API::String *))(*(_QWORD *)v13 + 16))(v13, 0, a3, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

void WKPageSetPageUIClient::UIClient::queryPermission(uint64_t a1, API::String *this, uint64_t a3, uint64_t *a4)
{
  void (*v5)(uint64_t, uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebKit *v11;
  uint64_t v12;
  WebKit *v13;

  v5 = *(void (**)(uint64_t, uint64_t, _QWORD))(a1 + 624);
  if (v5)
  {
    API::String::create(&v13);
    if (v13)
      v7 = *((_QWORD *)v13 + 1);
    else
      v7 = 0;
    v8 = *(_QWORD *)(a3 + 8);
    v9 = API::Object::newObject(0x18uLL, 128);
    *(_QWORD *)v9 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v9);
    *(_QWORD *)v9 = &off_1E34DAD88;
    v10 = *a4;
    *a4 = 0;
    *(_QWORD *)(v9 + 16) = v10;
    v5(v7, v8, *(_QWORD *)(v9 + 8));
    CFRelease(*(CFTypeRef *)(v9 + 8));
    v11 = v13;
    v13 = 0;
    if (v11)
      CFRelease(*((CFTypeRef *)v11 + 1));
  }
  else
  {
    v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 16))(v12, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

void WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::inlineSet<WTF::String,WTF::Ref<API::Boolean,WTF::RawPtrTraits<API::Boolean>,WTF::DefaultRefDerefTraits<API::Boolean>>>(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _QWORD *v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *((_DWORD *)*a3 + 4);
  if (v10 >= 0x100)
    v11 = v10 >> 8;
  else
    v11 = WTF::StringImpl::hashSlowCase(*a3);
  v12 = 0;
  for (i = 1; ; ++i)
  {
    v14 = v11 & v9;
    v15 = v8 + 16 * v14;
    v16 = *(WTF **)v15;
    if (*(_QWORD *)v15 != -1)
      break;
    v12 = (_QWORD *)(v8 + 16 * v14);
LABEL_13:
    v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v15 = (uint64_t)v12;
    }
    WTF::String::operator=((WTF::StringImpl **)v15, (WTF::StringImpl *)a3);
    v17 = *a4;
    *a4 = 0;
    v18 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v17;
    if (v18)
      CFRelease(*(CFTypeRef *)(v18 + 8));
    v19 = *a2;
    if (*a2)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *a2;
    if (*a2)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 <= 2 * v23)
      {
LABEL_24:
        v15 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a2, v15);
        v21 = *a2;
        if (*a2)
          v24 = *(unsigned int *)(v21 - 4);
        else
          v24 = 0;
      }
    }
    else if (3 * v24 <= 4 * v23)
    {
      goto LABEL_24;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v21 + 16 * v24;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  if (!WTF::equal(v16, *a3, (const WTF::StringImpl *)a3))
    goto LABEL_13;
  v25 = *a2;
  if (*a2)
    v26 = *(unsigned int *)(v25 - 4);
  else
    v26 = 0;
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = v25 + 16 * v26;
  *(_BYTE *)(a1 + 16) = 0;
  v27 = v8 + 16 * v14;
  v28 = *a4;
  *a4 = 0;
  v29 = *(_QWORD *)(v27 + 8);
  *(_QWORD *)(v27 + 8) = v28;
  if (v29)
    CFRelease(*(CFTypeRef *)(v29 + 8));
}

void WebKit::RunJavaScriptAlertResultListener::~RunJavaScriptAlertResultListener(WebKit::RunJavaScriptAlertResultListener *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DABF8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DABF8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)98>::type()
{
  return 98;
}

void WebKit::RunJavaScriptConfirmResultListener::~RunJavaScriptConfirmResultListener(WebKit::RunJavaScriptConfirmResultListener *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC20;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC20;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)99>::type()
{
  return 99;
}

void WebKit::RunJavaScriptPromptResultListener::~RunJavaScriptPromptResultListener(WebKit::RunJavaScriptPromptResultListener *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC48;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC48;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)100>::type()
{
  return 100;
}

void WebKit::RunBeforeUnloadConfirmPanelResultListener::~RunBeforeUnloadConfirmPanelResultListener(WebKit::RunBeforeUnloadConfirmPanelResultListener *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC70;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC70;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)97>::type()
{
  return 97;
}

void WebKit::GeolocationPermissionRequest::~GeolocationPermissionRequest(WebKit::GeolocationPermissionRequest *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC98;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAC98;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)65>::type()
{
  return 65;
}

void WebKit::NotificationPermissionRequest::~NotificationPermissionRequest(WebKit::NotificationPermissionRequest *this)
{
  WebKit::NotificationPermissionRequest::~NotificationPermissionRequest(this);
  JUMPOUT(0x19AEB936CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DACC0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)82>::type()
{
  return 82;
}

void WebKit::RequestStorageAccessConfirmResultListener::~RequestStorageAccessConfirmResultListener(WebKit::RequestStorageAccessConfirmResultListener *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DACE8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DACE8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)93>::type()
{
  return 93;
}

uint64_t WKPageSetPageUIClient::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::PanelClient::selectAssertionResponse(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (*((_DWORD *)a2 + 3))
  {
    v4 = **a2;
    v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WKPageSetPageUIClient::UIClient::runWebAuthenticationPanel(WebKit::WebPageProxy &,API::WebAuthenticationPanel &,WebKit::WebFrameProxy &,WebKit::FrameInfoData &&,WTF::CompletionHandler<void ()(WebKit::WebAuthenticationPanelResult)> &&)::PanelClient::decidePolicyForLocalAuthenticator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebKit::MediaKeySystemPermissionCallback::~MediaKeySystemPermissionCallback(WebKit::MediaKeySystemPermissionCallback *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAD60;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E34DAD60;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)127>::type()
{
  return 127;
}

void WebKit::QueryPermissionResultCallback::~QueryPermissionResultCallback(WebKit::QueryPermissionResultCallback *this)
{
  WebKit::QueryPermissionResultCallback::~QueryPermissionResultCallback(this);
  JUMPOUT(0x19AEB936CLL);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DAD88;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 16))(v2, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t API::ObjectImpl<(API::Object::Type)128>::type()
{
  return 128;
}

void StateClient::~StateClient(unsigned int **this, void *a2)
{
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
}

{
  void *v3;

  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);
  WTF::fastFree((WTF *)this, v3);
}

uint64_t StateClient::willChangeIsLoading(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 32);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeIsLoading(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 40);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeTitle(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 48);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeTitle(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 56);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeActiveURL(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 64);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeActiveURL(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 72);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeHasOnlySecureContent(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 80);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeHasOnlySecureContent(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 88);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeEstimatedProgress(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 96);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeEstimatedProgress(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 104);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeCanGoBack(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 112);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeCanGoBack(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 120);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeCanGoForward(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 128);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeCanGoForward(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 136);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeNetworkRequestsInProgress(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 144);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeNetworkRequestsInProgress(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 152);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeCertificateInfo(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 160);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeCertificateInfo(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 168);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::willChangeWebProcessIsResponsive(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 176);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didChangeWebProcessIsResponsive(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 184);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

uint64_t StateClient::didSwapWebProcesses(uint64_t this)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(this + 192);
  if (v1)
    return v1(*(_QWORD *)(this + 24));
  return this;
}

void WTF::Detail::CallableWrapper<toStringCallback(void *,void (*)(OpaqueWKString const*,OpaqueWKError const*,void *))::$_0,void,WTF::String const&>::call(uint64_t a1, API::String *this)
{
  void (*v3)(uint64_t, _QWORD, _QWORD);
  uint64_t v4;
  WebKit *v5;
  WebKit *v6;

  v3 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 16);
  API::String::create(&v6);
  if (v6)
    v4 = *((_QWORD *)v6 + 1);
  else
    v4 = 0;
  v3(v4, 0, *(_QWORD *)(a1 + 8));
  v5 = v6;
  v6 = 0;
  if (v5)
    CFRelease(*((CFTypeRef *)v5 + 1));
}

uint64_t WTF::Detail::CallableWrapper<WKPageCopySessionState::$_0,BOOL,WebKit::WebBackForwardListItem &>::call(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t SessionBackForwardListItemValueType;
  uint64_t result;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t SessionHistoryURLValueType;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebKit *v14;
  int v15;
  WTF::StringImpl *v16;
  WebKit *v17;

  v2 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))a1[3];
  if (!v2)
    return 1;
  v5 = a1[1];
  SessionBackForwardListItemValueType = WKPageGetSessionBackForwardListItemValueType();
  result = v2(v5, SessionBackForwardListItemValueType, *(_QWORD *)(a2 + 8), a1[2]);
  if (!(_DWORD)result)
    return result;
  v8 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD))a1[3];
  v9 = a1[1];
  SessionHistoryURLValueType = WKPageGetSessionHistoryURLValueType();
  v11 = *(WTF::StringImpl **)(a2 + 64);
  if (!v11)
    return (v8(v9, SessionHistoryURLValueType, 0, a1[2]) & 1) != 0;
  *(_DWORD *)v11 += 2;
  v16 = v11;
  API::URL::create((API::URL *)&v16, &v17);
  v13 = v16;
  v14 = v17;
  v16 = 0;
  v17 = 0;
  if (!v13)
  {
LABEL_7:
    if (v14)
      goto LABEL_8;
    return (v8(v9, SessionHistoryURLValueType, 0, a1[2]) & 1) != 0;
  }
  if (*(_DWORD *)v13 != 2)
  {
    *(_DWORD *)v13 -= 2;
    goto LABEL_7;
  }
  WTF::StringImpl::destroy(v13, v12);
  if (!v14)
    return (v8(v9, SessionHistoryURLValueType, 0, a1[2]) & 1) != 0;
LABEL_8:
  v15 = v8(v9, SessionHistoryURLValueType, *((_QWORD *)v14 + 1), a1[2]);
  CFRelease(*((CFTypeRef *)v14 + 1));
  return v15 != 0;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didStartProvisionalNavigation(uint64_t this, WebKit::WebPageProxy *a2, const ResourceRequest *a3, Navigation *a4, API::Object *a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 48);
  if (v5)
  {
    v6 = *((_QWORD *)a2 + 1);
    if (a4)
    {
      v7 = *((_QWORD *)a4 + 1);
      if (a5)
      {
LABEL_4:
        v8 = *((_QWORD *)a5 + 1);
        return v5(v6, v7, v8, *(_QWORD *)(this + 16));
      }
    }
    else
    {
      v7 = 0;
      if (a5)
        goto LABEL_4;
    }
    v8 = 0;
    return v5(v6, v7, v8, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didReceiveServerRedirectForProvisionalNavigation(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 56);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (a3)
    {
      v6 = *((_QWORD *)a3 + 1);
      if (a4)
      {
LABEL_4:
        v7 = *((_QWORD *)a4 + 1);
        return v4(v5, v6, v7, *(_QWORD *)(this + 16));
      }
    }
    else
    {
      v6 = 0;
      if (a4)
        goto LABEL_4;
    }
    v7 = 0;
    return v4(v5, v6, v7, *(_QWORD *)(this + 16));
  }
  return this;
}

void WKPageSetPageNavigationClient::NavigationClient::didFailProvisionalNavigationWithError(_QWORD *a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*a3)
  {
    v11 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))a1[8];
    if (!v11)
      return;
    if (a4)
      v12 = *(_QWORD *)(a4 + 8);
    else
      v12 = 0;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v14, a6))
    {
      v15 = *(_QWORD *)(v14 + 8);
      if (a7)
      {
LABEL_7:
        v16 = *(_QWORD *)(a7 + 8);
        goto LABEL_8;
      }
    }
    else
    {
      v15 = 0;
      if (a7)
        goto LABEL_7;
    }
    v16 = 0;
LABEL_8:
    v11(v13, v12, v15, v16, a1[2]);
    if (v14)
      CFRelease(*(CFTypeRef *)(v14 + 8));
    return;
  }
  v17 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))a1[12];
  if (!v17)
    return;
  v19 = *(_QWORD *)(a2 + 8);
  if (a4)
    v20 = *(_QWORD *)(a4 + 8);
  else
    v20 = 0;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  v26 = a2;
  v21 = API::Object::newObject(0x140uLL, 60);
  if (API::FrameInfo::FrameInfo(v21, (uint64_t)a3, &v26))
    v22 = *(_QWORD *)(v21 + 8);
  else
    v22 = 0;
  v23 = API::Object::newObject(0x60uLL, 10);
  if (!API::Error::Error(v23, a6))
  {
    v24 = 0;
    if (a7)
      goto LABEL_17;
LABEL_31:
    v25 = 0;
    goto LABEL_18;
  }
  v24 = *(_QWORD *)(v23 + 8);
  if (!a7)
    goto LABEL_31;
LABEL_17:
  v25 = *(_QWORD *)(a7 + 8);
LABEL_18:
  v17(v19, v20, v22, v24, v25, a1[2]);
  if (v23)
    CFRelease(*(CFTypeRef *)(v23 + 8));
  if (v21)
    CFRelease(*(CFTypeRef *)(v21 + 8));
  if (v26)
    CFRelease(*(CFTypeRef *)(v26 + 8));
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didCommitNavigation(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 72);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (a3)
    {
      v6 = *((_QWORD *)a3 + 1);
      if (a4)
      {
LABEL_4:
        v7 = *((_QWORD *)a4 + 1);
        return v4(v5, v6, v7, *(_QWORD *)(this + 16));
      }
    }
    else
    {
      v6 = 0;
      if (a4)
        goto LABEL_4;
    }
    v7 = 0;
    return v4(v5, v6, v7, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didFinishDocumentLoad(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 104);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (a3)
    {
      v6 = *((_QWORD *)a3 + 1);
      if (a4)
      {
LABEL_4:
        v7 = *((_QWORD *)a4 + 1);
        return v4(v5, v6, v7, *(_QWORD *)(this + 16));
      }
    }
    else
    {
      v6 = 0;
      if (a4)
        goto LABEL_4;
    }
    v7 = 0;
    return v4(v5, v6, v7, *(_QWORD *)(this + 16));
  }
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didFinishNavigation(uint64_t this, WebKit::WebPageProxy *a2, Navigation *a3, API::Object *a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(this + 80);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 1);
    if (a3)
    {
      v6 = *((_QWORD *)a3 + 1);
      if (a4)
      {
LABEL_4:
        v7 = *((_QWORD *)a4 + 1);
        return v4(v5, v6, v7, *(_QWORD *)(this + 16));
      }
    }
    else
    {
      v6 = 0;
      if (a4)
        goto LABEL_4;
    }
    v7 = 0;
    return v4(v5, v6, v7, *(_QWORD *)(this + 16));
  }
  return this;
}

void WKPageSetPageNavigationClient::NavigationClient::didFailNavigationWithError(WKPageSetPageNavigationClient::NavigationClient *this, WebKit::WebPageProxy *a2, const FrameInfoData *a3, Navigation *a4, const WTF::URL *a5, const WebCore::ResourceError *a6, API::Object *a7)
{
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))*((_QWORD *)this + 11);
  if (v7)
  {
    if (a4)
      v11 = *((_QWORD *)a4 + 1);
    else
      v11 = 0;
    v12 = *((_QWORD *)a2 + 1);
    v13 = API::Object::newObject(0x60uLL, 10);
    if (API::Error::Error(v13, (uint64_t)a6))
    {
      v14 = *(_QWORD *)(v13 + 8);
      if (a7)
      {
LABEL_6:
        v15 = *((_QWORD *)a7 + 1);
        goto LABEL_7;
      }
    }
    else
    {
      v14 = 0;
      if (a7)
        goto LABEL_6;
    }
    v15 = 0;
LABEL_7:
    v7(v12, v11, v14, v15, *((_QWORD *)this + 2));
    if (v13)
      CFRelease(*(CFTypeRef *)(v13 + 8));
  }
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didSameDocumentNavigation(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(result + 112);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (a3)
      v7 = *(_QWORD *)(a3 + 8);
    else
      v7 = 0;
    if ((a4 - 1) < 3)
      v8 = (a4 - 1) + 1;
    else
      v8 = 0;
    if (a5)
      v9 = *(_QWORD *)(a5 + 8);
    else
      v9 = 0;
    return v5(v6, v7, v8, v9, *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::renderingProgressDidChange(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(result + 120);
  if (v3)
    return v3(*(_QWORD *)(a2 + 8), (a3 >> 3) & 8 | a3 & 0x137, 0, *(_QWORD *)(result + 16));
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::navigationResponseDidBecomeDownload(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD);

  v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(result + 224);
  if (v4)
    return v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8), *(_QWORD *)(result + 16));
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::navigationActionDidBecomeDownload(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD, _QWORD);

  v4 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(result + 216);
  if (v4)
    return v4(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(a4 + 8), *(_QWORD *)(result + 16));
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::contextMenuDidCreateDownload(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  v3 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(result + 232);
  if (v3)
    return v3(*(_QWORD *)(a2 + 8), *(_QWORD *)(a3 + 8), *(_QWORD *)(result + 16));
  return result;
}

WTF::StringImpl *WKPageSetPageNavigationClient::NavigationClient::didReceiveAuthenticationChallenge(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v6)(uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t (*v11)(_QWORD, _QWORD, _QWORD);
  WTF::StringImpl *result;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  CFTypeRef cf;

  v6 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))a1[16];
  if (!v6)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(a3 + 2));
  v9 = API::Object::newObject(0x30uLL, 14);
  if (!WebKit::WebProtectionSpace::WebProtectionSpace(v9, v8))
  {
    if ((v6(v7, 0, a1[2]) & 1) == 0)
      goto LABEL_9;
LABEL_4:
    v11 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))a1[17];
    if (v11)
      return (WTF::StringImpl *)v11(*(_QWORD *)(a2 + 8), a3[1], a1[2]);
    v13 = a3[58];
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v19);
    cf = 0;
    v15 = *(_QWORD *)(v13 + 16);
    if (v15)
    {
      *(_QWORD *)(v13 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, 1, &v19);
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  v10 = v6(v7, *(_QWORD *)(v9 + 8), a1[2]);
  CFRelease(*(CFTypeRef *)(v9 + 8));
  if ((v10 & 1) != 0)
    goto LABEL_4;
LABEL_9:
  v16 = a3[58];
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v19);
  cf = 0;
  v15 = *(_QWORD *)(v16 + 16);
  if (v15)
  {
    *(_QWORD *)(v16 + 16) = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v15 + 16))(v15, 3, &v19);
LABEL_11:
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    v17 = cf;
    cf = 0;
    if (v17)
      CFRelease(v17);
  }
LABEL_13:
  v18 = v20;
  v20 = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v14);
    else
      *(_DWORD *)v18 -= 2;
  }
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::processDidTerminate(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void (*v3)(uint64_t, uint64_t, _QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD);

  v3 = (void (*)(uint64_t, uint64_t, _QWORD))a1[24];
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (a3 > 9)
      v5 = 3;
    else
      v5 = dword_1978D0B30[(char)a3];
    v3(v4, v5, a1[2]);
    return 1;
  }
  v6 = 0;
  if (a3 != 2)
  {
    v7 = (void (*)(_QWORD, _QWORD))a1[18];
    if (v7)
    {
      v7(*(_QWORD *)(a2 + 8), a1[2]);
      return 1;
    }
  }
  return v6;
}

void WKPageSetPageNavigationClient::NavigationClient::legacyWebCryptoMasterKey(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t (*v4)(_QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t i;
  uint64_t v11;
  void *v12;
  WTF *v13;
  uint64_t v14;
  void *v15;
  WTF *v16;
  WTF *v17;
  int v18;
  int v19;
  char v20;

  v4 = (uint64_t (*)(_QWORD, _QWORD))a1[19];
  if (v4 && (a1 = (_QWORD *)v4(*(_QWORD *)(a2 + 8), a1[2])) != 0)
  {
    v5 = objc_msgSend(a1, "_apiObject");
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 24);
    if (v7)
    {
      if (HIDWORD(v7))
      {
        __break(0xC471u);
        return;
      }
      v8 = *(_QWORD *)(v5 + 16);
      v9 = (WTF *)WTF::fastMalloc(*(WTF **)(v5 + 24));
      for (i = 0; i != v7; ++i)
        *((_BYTE *)v9 + i) = *(_BYTE *)(v8 + i);
    }
    else
    {
      v9 = 0;
    }
    v17 = v9;
    v18 = v7;
    v19 = v7;
    v20 = 1;
    v11 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v11 + 16))(v11, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v20)
    {
      v13 = v17;
      if (v17)
      {
        v17 = 0;
        v18 = 0;
        WTF::fastFree(v13, v12);
      }
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
  }
  else
  {
    WebCore::defaultWebCryptoMasterKey((WebCore *)a1);
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v14 + 16))(v14, &v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if (v20)
    {
      v16 = v17;
      if (v17)
      {
        v17 = 0;
        v18 = 0;
        WTF::fastFree(v16, v15);
      }
    }
  }
}

void WKPageSetPageNavigationClient::NavigationClient::decidePolicyForNavigationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a3)
      v6 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    else
      v6 = 0;
    if (*a4)
      v7 = *(_QWORD *)(*a4 + 8);
    else
      v7 = 0;
    v4(v5, v6, v7, 0, *(_QWORD *)(a1 + 16));
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
  }
}

void WKPageSetPageNavigationClient::NavigationClient::decidePolicyForNavigationResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  void (*v4)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 32);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a3)
      v6 = *(_QWORD *)(*(_QWORD *)a3 + 8);
    else
      v6 = 0;
    if (*a4)
      v7 = *(_QWORD *)(*a4 + 8);
    else
      v7 = 0;
    v4(v5, v6, v7, 0, *(_QWORD *)(a1 + 16));
  }
  else
  {
    WebKit::WebFramePolicyListenerProxy::use(*a4, 0, 0);
  }
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::contentRuleListNotification(uint64_t result, _QWORD *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WebKit *v17;
  WebKit *v18;
  WebKit *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  WebKit *v24;
  WebKit *v25;
  WebKit *v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WebKit *v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  WebKit *v49;

  if (*(_QWORD *)(result + 200))
  {
    v46 = 0;
    v47 = 0;
    v44 = 0;
    v45 = 0;
    v4 = *(unsigned int *)(a4 + 52);
    if (!(_DWORD)v4)
      goto LABEL_39;
    v7 = result;
    v8 = *(_QWORD *)(a4 + 40);
    v9 = v8 + 32 * v4;
    do
    {
      v10 = *(unsigned int *)(v8 + 28);
      if ((_DWORD)v10)
      {
        v11 = *(_QWORD *)(v8 + 16);
        v12 = 8 * v10;
        do
        {
          API::String::create(&v49);
          v13 = HIDWORD(v47);
          if (HIDWORD(v47) == (_DWORD)v47)
          {
            v14 = HIDWORD(v47) + ((unint64_t)HIDWORD(v47) >> 2);
            if (v14 >= 0x10)
              v15 = v14 + 1;
            else
              v15 = 16;
            if (v15 <= (unint64_t)HIDWORD(v47) + 1)
              v16 = HIDWORD(v47) + 1;
            else
              v16 = v15;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v46, v16);
            v13 = HIDWORD(v47);
            v17 = v49;
            v49 = 0;
            *(_QWORD *)(v46 + 8 * HIDWORD(v47)) = v17;
          }
          else
          {
            v18 = v49;
            v49 = 0;
            *(_QWORD *)(v46 + 8 * HIDWORD(v47)) = v18;
          }
          HIDWORD(v47) = v13 + 1;
          v19 = v49;
          v49 = 0;
          if (v19)
            CFRelease(*((CFTypeRef *)v19 + 1));
          API::String::create(&v49);
          v20 = HIDWORD(v45);
          if (HIDWORD(v45) == (_DWORD)v45)
          {
            v21 = HIDWORD(v45) + ((unint64_t)HIDWORD(v45) >> 2);
            if (v21 >= 0x10)
              v22 = v21 + 1;
            else
              v22 = 16;
            if (v22 <= (unint64_t)HIDWORD(v45) + 1)
              v23 = HIDWORD(v45) + 1;
            else
              v23 = v22;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v44, v23);
            v20 = HIDWORD(v45);
            v24 = v49;
            v49 = 0;
            *(_QWORD *)(v44 + 8 * HIDWORD(v45)) = v24;
          }
          else
          {
            v25 = v49;
            v49 = 0;
            *(_QWORD *)(v44 + 8 * HIDWORD(v45)) = v25;
          }
          HIDWORD(v45) = v20 + 1;
          v26 = v49;
          v49 = 0;
          if (v26)
            CFRelease(*((CFTypeRef *)v26 + 1));
          v11 += 8;
          v12 -= 8;
        }
        while (v12);
      }
      v8 += 32;
    }
    while (v8 != v9);
    if (!HIDWORD(v45))
      goto LABEL_39;
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v7 + 200);
    v28 = a2[1];
    v29 = *a3;
    if (!*a3)
    {
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(v7 + 200);
      v32 = 0;
      goto LABEL_44;
    }
    *(_DWORD *)v29 += 2;
    v48 = v29;
    API::URL::create((API::URL *)&v48, &v49);
    v31 = v48;
    v32 = v49;
    v48 = 0;
    v49 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
      {
        WTF::StringImpl::destroy(v31, v30);
        if (v32)
          goto LABEL_36;
LABEL_42:
        v33 = v27;
LABEL_44:
        v34 = 0;
        v43 = 1;
LABEL_37:
        v35 = API::Object::newObject(0x20uLL, 1);
        *(_QWORD *)v35 = off_1E34CC2A8;
        WebKit::InitializeWebKit2((WebKit *)v35);
        *(_QWORD *)v35 = &off_1E34CC2F8;
        v36 = v46;
        v46 = 0;
        *(_QWORD *)(v35 + 16) = v36;
        v37 = v47;
        v47 = 0;
        *(_QWORD *)(v35 + 24) = v37;
        v38 = *(_QWORD *)(v35 + 8);
        v39 = API::Object::newObject(0x20uLL, 1);
        *(_QWORD *)v39 = off_1E34CC2A8;
        WebKit::InitializeWebKit2((WebKit *)v39);
        *(_QWORD *)v39 = &off_1E34CC2F8;
        v40 = v44;
        v44 = 0;
        *(_QWORD *)(v39 + 16) = v40;
        v41 = v45;
        v45 = 0;
        *(_QWORD *)(v39 + 24) = v41;
        v33(v28, v34, v38, *(_QWORD *)(v39 + 8), *(_QWORD *)(v7 + 16));
        CFRelease(*(CFTypeRef *)(v39 + 8));
        CFRelease(*(CFTypeRef *)(v35 + 8));
        if ((v43 & 1) == 0)
          CFRelease(*((CFTypeRef *)v32 + 1));
LABEL_39:
        WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, a2);
        return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v42);
      }
      *(_DWORD *)v31 -= 2;
    }
    if (v32)
    {
LABEL_36:
      v33 = v27;
      v43 = 0;
      v34 = *((_QWORD *)v32 + 1);
      goto LABEL_37;
    }
    goto LABEL_42;
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didBeginNavigationGesture(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 160);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::willEndNavigationGesture(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 168);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (a3)
      v6 = *(_QWORD *)(a4 + 8);
    else
      v6 = 0;
    return v4(v5, v6, *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didEndNavigationGesture(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t (*v4)(uint64_t, uint64_t, _QWORD);
  uint64_t v5;
  uint64_t v6;

  v4 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(result + 176);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (a3)
      v6 = *(_QWORD *)(a4 + 8);
    else
      v6 = 0;
    return v4(v5, v6, *(_QWORD *)(result + 16));
  }
  return result;
}

uint64_t WKPageSetPageNavigationClient::NavigationClient::didRemoveNavigationGestureSnapshot(uint64_t this, WebKit::WebPageProxy *a2)
{
  uint64_t (*v2)(_QWORD, _QWORD);

  v2 = *(uint64_t (**)(_QWORD, _QWORD))(this + 184);
  if (v2)
    return v2(*((_QWORD *)a2 + 1), *(_QWORD *)(this + 16));
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WKPageRunJavaScriptInMainFrame::$_0,void,std::experimental::fundamentals_v3::expected<WTF::RefPtr<API::SerializedScriptValue,WTF::RawPtrTraits<API::SerializedScriptValue>,WTF::DefaultRefDerefTraits<API::SerializedScriptValue>>,WebCore::ExceptionDetails> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (*((_DWORD *)a2 + 8))
  {
    v2 = 0;
  }
  else
  {
    v2 = *a2;
    if (*a2)
      v2 = *(_QWORD *)(v2 + 8);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16))(v2, 0, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageGetSelectionAsWebArchiveData::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = *(_QWORD *)(a2 + 8);
  else
    v2 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16))(v2, 0, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageForceRepaint::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 16))(0, *(_QWORD *)(a1 + 8));
}

_QWORD *WTF::Detail::CallableWrapper<WKPageValidateCommand::$_0,void,BOOL,int>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E34DB0E8;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKPageValidateCommand::$_0,void,BOOL,int>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E34DB0E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WKPageValidateCommand::$_0,void,BOOL,int>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v7;
  WebKit *v8;
  WebKit *v9;

  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(a1 + 16);
  API::String::create(&v9);
  if (v9)
    v7 = *((_QWORD *)v9 + 1);
  else
    v7 = 0;
  v6(v7, a2, a3, 0, *(_QWORD *)(a1 + 8));
  v8 = v9;
  v9 = 0;
  if (v8)
    CFRelease(*((CFTypeRef *)v8 + 1));
}

uint64_t WTF::Detail::CallableWrapper<WKPageComputePagesForPrinting::$_0,void,WTF::Vector<WebCore::IntRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,double,WebCore::RectEdges<float> const&>::call(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  float64x2_t *v13;
  uint64_t v14;
  int64x2_t v15;
  float64x2_t v16;
  uint64_t result;
  void *v18;

  v5 = a2[3];
  if ((_DWORD)v5)
  {
    if (v5 >> 27)
      goto LABEL_12;
    v7 = WTF::fastMalloc((WTF *)(32 * v5));
    v8 = (WTF *)v7;
    v9 = a2[3];
    if ((_DWORD)v9)
    {
      v10 = 0;
      v11 = (_QWORD *)(*(_QWORD *)a2 + 8);
      v12 = 32 * v9;
      while (32 * v5 != v10)
      {
        v13 = (float64x2_t *)(v7 + v10);
        v14 = *(v11 - 1);
        v15.i64[0] = (int)v14;
        v15.i64[1] = SHIDWORD(v14);
        v16 = vcvtq_f64_s64(v15);
        v15.i64[0] = (int)*v11;
        v15.i64[1] = (int)HIDWORD(*v11);
        *v13 = v16;
        v13[1] = vcvtq_f64_s64(v15);
        v11 += 2;
        v10 += 32;
        if (v12 == v10)
          goto LABEL_9;
      }
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x19741B45CLL);
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_9:
  result = (*(uint64_t (**)(WTF *, uint64_t, _QWORD, _QWORD, double))(a1 + 16))(v8, v5, 0, *(_QWORD *)(a1 + 8), a3);
  if (v8)
    return WTF::fastFree(v8, v18);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKPageDrawPagesToPDF::$_0,void,API::Data *>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
    v2 = *(_QWORD *)(a2 + 8);
  else
    v2 = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 16))(v2, 0, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageCallAfterNextPresentationUpdate::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 16))(0, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageGetApplicationManifest::$_0,void,std::optional<WebCore::ApplicationManifest> const&>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

void WTF::Detail::CallableWrapper<WKPageDumpPrivateClickMeasurement::$_0,void,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  void (*v3)(_QWORD, _QWORD);
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebKit *v7;
  WTF::StringImpl *v8;
  WebKit *v9;

  v3 = *(void (**)(_QWORD, _QWORD))(a1 + 16);
  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v8 = v4;
  API::String::create(&v8, &v9);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      if (v7)
        goto LABEL_7;
LABEL_10:
      v3(0, *(_QWORD *)(a1 + 8));
      return;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v7)
    goto LABEL_10;
LABEL_7:
  v3(*((_QWORD *)v7 + 1), *(_QWORD *)(a1 + 8));
  CFRelease(*((CFTypeRef *)v7 + 1));
}

uint64_t WTF::Detail::CallableWrapper<WKPageClearPrivateClickMeasurement::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementOverrideTimerForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageMarkAttributedPrivateClickMeasurementsAsExpiredForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementEphemeralMeasurementForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSimulatePrivateClickMeasurementSessionRestart::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementTokenPublicKeyURLForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementTokenSignatureURLForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementAttributionReportURLsForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageMarkPrivateClickMeasurementsAsExpiredForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPCMFraudPreventionValuesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageSetPrivateClickMeasurementAppBundleIDForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKPageLoadedSubresourceDomains::$_0,void,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WebKit *v13;
  WTF::StringImpl *v14;
  void (*v15)(_QWORD, _QWORD);
  uint64_t v16;
  void *v17;
  WebKit *v18[2];
  WTF::StringImpl *v19;

  v2 = result;
  v3 = *((unsigned int *)a2 + 3);
  if (!(_DWORD)v3)
  {
    LODWORD(v7) = 0;
    v5 = 0;
LABEL_14:
    v15 = *(void (**)(_QWORD, _QWORD))(v2 + 16);
    v16 = API::Object::newObject(0x20uLL, 1);
    *(_QWORD *)v16 = off_1E34CC2A8;
    WebKit::InitializeWebKit2((WebKit *)v16);
    *(_QWORD *)v16 = &off_1E34CC2F8;
    v18[0] = 0;
    v18[1] = 0;
    *(_QWORD *)(v16 + 16) = v5;
    *(_DWORD *)(v16 + 24) = v3;
    *(_DWORD *)(v16 + 28) = v7;
    v15(*(_QWORD *)(v16 + 8), *(_QWORD *)(v2 + 8));
    CFRelease(*(CFTypeRef *)(v16 + 8));
    return WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v17);
  }
  if (!(v3 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v3));
    v6 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *a2;
      v9 = 8 * v6;
      do
      {
        v10 = v7;
        v11 = *(WTF::StringImpl **)(v8 + 8 * v7);
        if (v11)
          *(_DWORD *)v11 += 2;
        v19 = v11;
        API::String::create(&v19, v18);
        v13 = v18[0];
        v18[0] = 0;
        v14 = v19;
        v19 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        ++v7;
        *(_QWORD *)(v5 + 8 * v10) = v13;
        v9 -= 8;
      }
      while (v9);
    }
    else
    {
      LODWORD(v7) = 0;
    }
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

uint64_t WKResourceCacheManagerGetTypeID()
{
  return 0;
}

uint64_t WKSessionStateGetTypeID()
{
  return 19;
}

uint64_t WKSessionStateCreateFromData(void *a1)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _QWORD v11[2];
  __int128 v12;
  WTF::StringImpl *v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  WTF::StringImpl *v21;
  __int128 v22;
  __int128 v23;
  char v24;

  BYTE4(v20) = 0;
  v18 = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v21 = 0;
  WTF::URL::invalidate((WTF::URL *)&v21);
  v24 = 1;
  v2 = objc_msgSend(a1, "_apiObject");
  v4 = 0;
  if (WebKit::decodeLegacySessionState(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), (uint64_t)&v18))
  {
    v11[0] = v18;
    v5 = v19;
    v18 = 0;
    v19 = 0;
    v11[1] = v5;
    v12 = v20;
    v6 = v21;
    v21 = 0;
    v13 = v6;
    v14 = v22;
    v15 = v23;
    LODWORD(v22) = v22 & 0xFFFFFFFE;
    v16 = v24;
    API::SessionState::create((API::SessionState *)v11, &v17);
    if (v17)
      v4 = *(_QWORD *)(v17 + 8);
    else
      v4 = 0;
    v8 = v13;
    v13 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
        WTF::StringImpl::destroy(v8, v7);
      else
        *(_DWORD *)v8 -= 2;
    }
    WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v11, v7);
  }
  v9 = v21;
  v21 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v3);
    else
      *(_DWORD *)v9 -= 2;
  }
  WTF::Vector<WebKit::BackForwardListItemState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v3);
  return v4;
}

uint64_t WKSessionStateCopyData(uint64_t a1)
{
  WebKit *v2;

  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  WebKit::encodeLegacySessionState((WebKit *)(a1 + 16), &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKSpeechRecognitionPermissionCallbackGetTypeID()
{
  return 101;
}

uint64_t WKSpeechRecognitionPermissionCallbackComplete(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, "_apiObject");
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WKUserContentControllerGetTypeID()
{
  return 104;
}

WebKit::WebUserContentControllerProxy *WKUserContentControllerCreate()
{
  WebKit::WebUserContentControllerProxy *v0;
  WebKit::WebUserContentControllerProxy *result;

  v0 = (WebKit::WebUserContentControllerProxy *)API::Object::newObject(0x70uLL, 104);
  result = WebKit::WebUserContentControllerProxy::WebUserContentControllerProxy(v0);
  if (result)
    return (WebKit::WebUserContentControllerProxy *)*((_QWORD *)result + 1);
  return result;
}

uint64_t WKUserContentControllerCopyUserScripts(void *a1)
{
  WebKit *v2;

  API::Array::copy(*(API::Array **)(objc_msgSend(a1, "_apiObject") + 56), &v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

void WKUserContentControllerAddUserScript(void *a1, void *a2)
{
  uint64_t v3;

  if (a1)
    v3 = objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  WebKit::WebUserContentControllerProxy::addUserScript(v3, objc_msgSend(a2, "_apiObject"), 0);
}

void WKUserContentControllerRemoveAllUserScripts(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  WebKit::WebUserContentControllerProxy::removeAllUserScripts((WebKit::WebUserContentControllerProxy *)a1);
}

WTF::StringImpl *WKUserContentControllerAddUserContentFilter(void *a1, void *a2)
{
  void *v2;
  WebKit::WebUserContentControllerProxy *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6[5];

  v2 = a2;
  if (a1)
  {
    v3 = (WebKit::WebUserContentControllerProxy *)objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
LABEL_3:
    v2 = (void *)objc_msgSend(v2, "_apiObject");
LABEL_4:
  v6[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v6);
  WebKit::WebUserContentControllerProxy::addContentRuleList(v3, (API::ContentRuleList *)v2, (const WTF::URL *)v6);
  result = v6[0];
  v6[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WKUserContentControllerRemoveAllUserContentFilters(void *a1, WTF::StringImpl *a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebUserContentControllerProxy::removeAllContentRuleLists((WebKit::WebUserContentControllerProxy *)a1, a2);
}

uint64_t WKUserContentExtensionStoreGetTypeID()
{
  return 49;
}

uint64_t WKUserContentExtensionStoreCreate(void *a1)
{
  API::ContentRuleListStore *v1;
  API::ContentRuleListStore *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  if (a1)
  {
    objc_msgSend(a1, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v7 = 0;
  }
  v1 = (API::ContentRuleListStore *)API::Object::newObject(0x30uLL, 49);
  v2 = API::ContentRuleListStore::ContentRuleListStore(v1, (const WTF::String *)&v7);
  if (v2)
    v4 = *((_QWORD *)v2 + 1);
  else
    v4 = 0;
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  return v4;
}

WTF::StringImpl *WKUserContentExtensionStoreCompile(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  CFTypeRef *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  _QWORD *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (a1)
  {
    v9 = (CFTypeRef *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_17:
    v16 = 0;
    if (a3)
      goto LABEL_4;
    goto LABEL_18;
  }
  v9 = 0;
  if (!a2)
    goto LABEL_17;
LABEL_3:
  objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    objc_msgSend(a3, "_apiObject");
    WTF::String::isolatedCopy();
    goto LABEL_5;
  }
LABEL_18:
  v15 = 0;
LABEL_5:
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB3E0;
  v10[1] = a4;
  v10[2] = a5;
  v14 = v10;
  API::ContentRuleListStore::compileContentRuleList(v9, (const WTF::String *)&v16, (const WTF::String *)&v15, (uint64_t *)&v14);
  if (v14)
    (*(void (**)(_QWORD *))(*v14 + 8))(v14);
  v12 = v15;
  v15 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKUserContentExtensionStoreLookup(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  _QWORD *v11;
  WTF::StringImpl *v12;

  if (a1)
  {
    v7 = objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  v12 = 0;
LABEL_4:
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB408;
  v8[1] = a3;
  v8[2] = a4;
  v11 = v8;
  API::ContentRuleListStore::lookupContentRuleList(v7, (const WTF::String *)&v12, (const WTF::String *)&v11);
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKUserContentExtensionStoreRemove(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  _QWORD *v11;
  WTF::StringImpl *v12;

  if (a1)
  {
    v7 = objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      goto LABEL_4;
    }
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  v12 = 0;
LABEL_4:
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB430;
  v8[1] = a3;
  v8[2] = a4;
  v11 = v8;
  API::ContentRuleListStore::removeContentRuleList(v7, (const WTF::String *)&v12, (const WTF::String *)&v11);
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKUserMediaPermissionCheckGetTypeID()
{
  return 106;
}

_QWORD *WKUserMediaPermissionCheckSetUserMediaAccessInfo(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;

  if (result)
    result = (_QWORD *)objc_msgSend(result, "_apiObject");
  v4 = result[4];
  if (v4)
  {
    if (a3)
      v5 = 2;
    else
      v5 = 1;
    result[4] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WKUserMediaPermissionRequestGetTypeID()
{
  return 107;
}

WTF::StringImpl *WKUserMediaPermissionRequestAllow(void *a1, void *a2, void *a3)
{
  WebKit::UserMediaPermissionRequestProxy *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (a1)
  {
    v5 = (WebKit::UserMediaPermissionRequestProxy *)objc_msgSend(a1, "_apiObject");
    if (a2)
      goto LABEL_3;
LABEL_15:
    v10 = 0;
    if (a3)
      goto LABEL_4;
    goto LABEL_16;
  }
  v5 = 0;
  if (!a2)
    goto LABEL_15;
LABEL_3:
  objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  if (a3)
  {
LABEL_4:
    objc_msgSend(a3, "_apiObject");
    WTF::String::isolatedCopy();
    goto LABEL_5;
  }
LABEL_16:
  v9 = 0;
LABEL_5:
  WebKit::UserMediaPermissionRequestProxy::allow(v5, &v10, (const WTF::String *)&v9);
  v7 = v9;
  v9 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v6);
    else
      *(_DWORD *)v7 -= 2;
  }
  result = v10;
  v10 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebKit::UserMediaPermissionRequestManagerProxy *WKUserMediaPermissionRequestDeny(_QWORD *a1, unsigned int a2)
{
  int v3;

  if (a1)
    a1 = (_QWORD *)objc_msgSend(a1, "_apiObject");
  if (a2 >= 6)
    v3 = 6;
  else
    v3 = a2;
  return WebKit::UserMediaPermissionRequestProxy::deny(a1, v3);
}

char *WKUserMediaPermissionRequestVideoDeviceUIDs(void *a1)
{
  char *v2;
  uint64_t v3;
  void *v4;
  API::String *v5;
  uint64_t v6;
  void *v7;
  WebKit *v8;
  WebKit *v10;
  API::String *v11;
  unsigned int v12;

  API::Array::create(&v11);
  if (v11)
  {
    v2 = (char *)*((_QWORD *)v11 + 1);
    if (a1)
    {
LABEL_3:
      v3 = objc_msgSend(a1, "_apiObject");
      goto LABEL_4;
    }
  }
  else
  {
    v2 = 0;
    if (a1)
      goto LABEL_3;
  }
  v3 = 0;
LABEL_4:
  WebKit::UserMediaPermissionRequestProxy::videoDeviceUIDs(v3, (uint64_t)&v11);
  if (v12)
  {
    v5 = v11;
    v6 = 8 * v12;
    do
    {
      API::String::create(&v10);
      if (v10)
        v7 = (void *)*((_QWORD *)v10 + 1);
      else
        v7 = 0;
      WKArrayAppendItem(v2, v7);
      v8 = v10;
      v10 = 0;
      if (v8)
        CFRelease(*((CFTypeRef *)v8 + 1));
      v5 = (API::String *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
  return v2;
}

char *WKUserMediaPermissionRequestAudioDeviceUIDs(void *a1)
{
  char *v2;
  uint64_t v3;
  void *v4;
  API::String *v5;
  uint64_t v6;
  void *v7;
  WebKit *v8;
  WebKit *v10;
  API::String *v11;
  unsigned int v12;

  API::Array::create(&v11);
  if (v11)
  {
    v2 = (char *)*((_QWORD *)v11 + 1);
    if (a1)
    {
LABEL_3:
      v3 = objc_msgSend(a1, "_apiObject");
      goto LABEL_4;
    }
  }
  else
  {
    v2 = 0;
    if (a1)
      goto LABEL_3;
  }
  v3 = 0;
LABEL_4:
  WebKit::UserMediaPermissionRequestProxy::audioDeviceUIDs(v3, (uint64_t)&v11);
  if (v12)
  {
    v5 = v11;
    v6 = 8 * v12;
    do
    {
      API::String::create(&v10);
      if (v10)
        v7 = (void *)*((_QWORD *)v10 + 1);
      else
        v7 = 0;
      WKArrayAppendItem(v2, v7);
      v8 = v10;
      v10 = 0;
      if (v8)
        CFRelease(*((CFTypeRef *)v8 + 1));
      v5 = (API::String *)((char *)v5 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v11, v4);
  return v2;
}

BOOL WKUserMediaPermissionRequestRequiresCameraCapture(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  return *(unsigned __int8 *)(v1 + 112) - 1 >= 2 && *(_DWORD *)(v1 + 92) != 0;
}

BOOL WKUserMediaPermissionRequestRequiresDisplayCapture(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 112) - 1 < 2;
}

BOOL WKUserMediaPermissionRequestRequiresMicrophoneCapture(void *a1)
{
  return *(_DWORD *)(objc_msgSend(a1, "_apiObject") + 108) != 0;
}

void WTF::Detail::CallableWrapper<WKUserContentExtensionStoreCompile::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, _QWORD);
  uint64_t v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *(void (**)(uint64_t, uint64_t, _QWORD))(a1 + 16);
  if ((_DWORD)a3)
  {
    if (a3 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x19741C230);
    }
    v4(0, a3, *(_QWORD *)(a1 + 8));
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  else
  {
    if (v3)
      v5 = *(_QWORD *)(v3 + 8);
    else
      v5 = 0;
    v4(v5, 0, *(_QWORD *)(a1 + 8));
  }
}

void WTF::Detail::CallableWrapper<WKUserContentExtensionStoreLookup::$_0,void,WTF::RefPtr<API::ContentRuleList,WTF::RawPtrTraits<API::ContentRuleList>,WTF::DefaultRefDerefTraits<API::ContentRuleList>>,std::error_code>::call(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, _QWORD);
  uint64_t v5;

  v3 = *a2;
  *a2 = 0;
  v4 = *(void (**)(uint64_t, uint64_t, _QWORD))(a1 + 16);
  if ((_DWORD)a3)
  {
    if (a3 >= 5)
    {
      __break(0xC471u);
      JUMPOUT(0x19741C2D8);
    }
    v4(0, a3, *(_QWORD *)(a1 + 8));
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 + 8));
  }
  else
  {
    if (v3)
      v5 = *(_QWORD *)(v3 + 8);
    else
      v5 = 0;
    v4(v5, 0, *(_QWORD *)(a1 + 8));
  }
}

uint64_t WTF::Detail::CallableWrapper<WKUserContentExtensionStoreRemove::$_0,void,std::error_code>::call(uint64_t a1, unsigned int a2)
{
  uint64_t result;

  if (a2 < 5)
    return (*(uint64_t (**)(_QWORD))(a1 + 16))(0);
  result = 72;
  __break(0xC471u);
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetTypeID()
{
  return 122;
}

uint64_t WKWebsiteDataStoreConfigurationCreate()
{
  uint64_t v0;
  uint64_t result;

  v0 = API::Object::newObject(0x220uLL, 122);
  result = WebKit::WebsiteDataStoreConfiguration::WebsiteDataStoreConfiguration(v0, 1, 1);
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyApplicationCacheDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetApplicationCacheDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 72);
  *(_QWORD *)(v3 + 72) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyNetworkCacheDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetNetworkCacheDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 168);
  *(_QWORD *)(v3 + 168) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyIndexedDBDatabaseDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetIndexedDBDatabaseDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyLocalStorageDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetLocalStorageDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 144);
  *(_QWORD *)(v3 + 144) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyWebSQLDatabaseDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetWebSQLDatabaseDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 200);
  *(_QWORD *)(v3 + 200) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyCacheStorageDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetCacheStorageDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 88);
  *(_QWORD *)(v3 + 88) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyGeneralStorageDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetGeneralStorageDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 112);
  *(_QWORD *)(v3 + 112) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyMediaKeysStorageDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetMediaKeysStorageDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 160);
  *(_QWORD *)(v3 + 160) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyResourceLoadStatisticsDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetResourceLoadStatisticsDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 176);
  *(_QWORD *)(v3 + 176) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyServiceWorkerRegistrationDirectory(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetServiceWorkerRegistrationDirectory(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 192);
  *(_QWORD *)(v3 + 192) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyCookieStorageFile(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetCookieStorageFile(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  result = *(WTF::StringImpl **)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v6;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, v4);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetPerOriginStorageQuota(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 216);
}

uint64_t WKWebsiteDataStoreConfigurationSetPerOriginStorageQuota(void *a1, uint64_t a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_QWORD *)(result + 216) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetNetworkCacheSpeculativeValidationEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 288);
}

uint64_t WKWebsiteDataStoreConfigurationSetNetworkCacheSpeculativeValidationEnabled(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 288) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetTestingSessionEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 415);
}

uint64_t WKWebsiteDataStoreConfigurationSetTestingSessionEnabled(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 415) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationGetStaleWhileRevalidateEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 289);
}

uint64_t WKWebsiteDataStoreConfigurationSetStaleWhileRevalidateEnabled(void *a1, char a2)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 289) = a2;
  return result;
}

uint64_t WKWebsiteDataStoreConfigurationCopyPCMMachServiceName(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreConfigurationSetPCMMachServiceName(void *a1, void *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (a2)
    {
LABEL_3:
      objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      v4 = v6;
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    if (a2)
      goto LABEL_3;
  }
  v4 = 0;
LABEL_6:
  result = *(WTF::StringImpl **)(v3 + 488);
  *(_QWORD *)(v3 + 488) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      return 0;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

BOOL WKWebsiteDataStoreConfigurationHasOriginQuotaRatio(void *a1)
{
  return *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 232) != 0;
}

uint64_t WKWebsiteDataStoreConfigurationClearOriginQuotaRatio(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_QWORD *)(result + 224) = 0;
  *(_BYTE *)(result + 232) = 0;
  return result;
}

BOOL WKWebsiteDataStoreConfigurationHasTotalQuotaRatio(void *a1)
{
  return *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 248) != 0;
}

uint64_t WKWebsiteDataStoreConfigurationClearTotalQuotaRatio(void *a1)
{
  uint64_t result;

  result = objc_msgSend(a1, "_apiObject");
  *(_QWORD *)(result + 240) = 0;
  *(_BYTE *)(result + 248) = 0;
  return result;
}

uint64_t WKWebsiteDataStoreGetTypeID()
{
  return 121;
}

const void *WKWebsiteDataStoreGetDefaultDataStore(WebKit::WebsiteDataStore *a1)
{
  const void *v1;
  WebKit::WebsiteDataStore *v3;

  WebKit::WebsiteDataStore::defaultDataStore(a1, &v3);
  if (!v3)
    return 0;
  v1 = (const void *)*((_QWORD *)v3 + 1);
  CFRelease(v1);
  return v1;
}

uint64_t WKWebsiteDataStoreCreateNonPersistentDataStore()
{
  WebKit::WebsiteDataStore *v1;

  WebKit::WebsiteDataStore::createNonPersistent(&v1);
  if (v1)
    return *((_QWORD *)v1 + 1);
  else
    return 0;
}

uint64_t WKWebsiteDataStoreCreateWithConfiguration(void *a1)
{
  PAL::SessionID *v2;
  uint64_t PersistentSessionID;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebKit::WebsiteDataStore *v9;

  v2 = (PAL::SessionID *)objc_msgSend(a1, "_apiObject");
  if (*((_BYTE *)v2 + 16))
    PersistentSessionID = PAL::SessionID::generatePersistentSessionID(v2);
  else
    PersistentSessionID = PAL::SessionID::generateEphemeralSessionID(v2);
  v4 = PersistentSessionID;
  v5 = objc_msgSend(a1, "_apiObject");
  CFRetain(*(CFTypeRef *)(v5 + 8));
  v8 = v5;
  WebKit::WebsiteDataStore::create(&v8, v4, &v9);
  if (v9)
    v6 = *((_QWORD *)v9 + 1);
  else
    v6 = 0;
  if (v8)
    CFRelease(*(CFTypeRef *)(v8 + 8));
  return v6;
}

unsigned int *WKWebsiteDataStoreTerminateNetworkProcess(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebsiteDataStore::terminateNetworkProcess((unsigned int *)a1);
}

uint64_t WKWebsiteDataStoreGetNetworkProcessIdentifier(void *a1)
{
  uint64_t v1;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  v1 = *(_QWORD *)(WebKit::WebsiteDataStore::networkProcess((WebKit::WebsiteDataStore *)a1) + 136);
  if (v1)
    return *(unsigned int *)(v1 + 108);
  else
    return 0;
}

WTF::StringImpl *WKWebsiteDataStoreRemoveITPDataForDomain(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  WTF::StringImpl *v21[2];
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  WebCore::SecurityOriginData *v28[2];
  __int128 v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl **v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v24 = 4096;
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)&v22, v21);
  v24 |= 0x1000u;
  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v30, v21, (uint64_t)&v31);
  v8 = v21[0];
  v21[0] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = v22;
  v22 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v23;
  v23 = 0;
  v31 = v10;
  v32 = v24;
  LOBYTE(v33) = 0;
  v35 = 0;
  if (v27)
  {
    v11 = v26;
    v26 = 0;
    v33 = v25;
    v34 = v11;
    v35 = 1;
  }
  v36 = *(_OWORD *)v28;
  v12 = v29;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v37 = v12;
  v13 = v30;
  v30 = 0;
  v38 = v13;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v21, (uint64_t)&v31, 1uLL);
  if (v38)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v38, v14);
  if (*((_QWORD *)&v37 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v37 + 1), v14);
  if ((_QWORD)v37)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v37, v14);
  if (*((_QWORD *)&v36 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v36 + 1), v14);
  if ((_QWORD)v36)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)v36, v14);
  if (v35 && v34)
    WTF::fastFree((WTF *)(v34 - 16), v14);
  v15 = v31;
  v31 = 0;
  if (!v15)
  {
LABEL_29:
    if (!a1)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (*(_DWORD *)v15 != 2)
  {
    *(_DWORD *)v15 -= 2;
    goto LABEL_29;
  }
  WTF::StringImpl::destroy(v15, v14);
  if (a1)
LABEL_30:
    a1 = (void *)objc_msgSend(a1, "_apiObject", v21[0]);
LABEL_31:
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v16 = off_1E34DB468;
  *((_QWORD *)v16 + 1) = a3;
  *((_QWORD *)v16 + 2) = a4;
  v31 = v16;
  WebKit::WebsiteDataStore::removeData((uint64_t)a1, 4096, (uint64_t *)v21, (uint64_t *)&v31);
  v18 = v31;
  v31 = 0;
  if (v18)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v18 + 8))(v18);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v17);
  if (v30)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v30, v19);
  if (*((_QWORD *)&v29 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v29 + 1), v19);
  if ((_QWORD)v29)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v29, v19);
  if (v28[1])
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v28[1], v19);
  if (v28[0])
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v28[0], v19);
  if (v27 && v26)
    WTF::fastFree((WTF *)(v26 - 16), v19);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKWebsiteDataStoreDoesStatisticsDomainIDExistInDatabase(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB490;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::domainIDExistsInDatabase(v7, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

unsigned int *WKWebsiteDataStoreSetServiceWorkerFetchTimeoutForTesting(void *a1, double a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebsiteDataStore::setServiceWorkerTimeoutForTesting((WebKit::WebsiteDataStore *)a1, a2);
}

unsigned int *WKWebsiteDataStoreResetServiceWorkerFetchTimeoutForTesting(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebsiteDataStore::resetServiceWorkerTimeoutForTesting((WebKit::WebsiteDataStore *)a1);
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsEnabled(void *a1, int a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebsiteDataStore::setTrackingPreventionEnabled((uint64_t)a1, a2);
}

uint64_t WKWebsiteDataStoreIsStatisticsEphemeral(void *a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB4B8;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::isResourceLoadStatisticsEphemeral(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WKWebsiteDataStoreGetResourceLoadStatisticsEnabled(uint64_t a1)
{
  if (a1)
    a1 = objc_msgSend((id)a1, "_apiObject");
  if (*(_BYTE *)(a1 + 265))
    return *(_BYTE *)(a1 + 265) == 2;
  if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 208) + 536) >= 0x100u)
    return *(_WORD *)(*(_QWORD *)(a1 + 208) + 536) != 0;
  return WebKit::doesAppHaveTrackingPreventionEnabled((WebKit *)a1);
}

_QWORD *WKWebsiteDataStoreSetResourceLoadStatisticsDebugMode(void *a1, char a2)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode((WebKit::WebsiteDataStore *)a1, a2);
}

uint64_t WKWebsiteDataStoreSyncLocalStorage(void *a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB4E0;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::syncLocalStorage(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreGetHTTPCookieStore(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  return *((_QWORD *)WebKit::WebsiteDataStore::cookieStore((WebKit::WebsiteDataStore *)a1) + 1);
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsDebugModeWithCompletionHandler(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB508;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(v7, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB530;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::setPrevalentResourceForDebugMode(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsLastSeen(void *a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _QWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB558;
  v10[1] = a3;
  v10[2] = a4;
  v15 = v10;
  WebKit::WebsiteDataStore::setLastSeen(v9, (const WTF::URL *)v17, (uint64_t *)&v15, a5);
  v12 = (uint64_t)v15;
  v15 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsMergeStatistic(void *a1, void *a2, void *a3, void *a4, char a5, char a6, char a7, char a8, double a9, double a10, unsigned int a11, uint64_t a12, uint64_t a13)
{
  WebKit::WebsiteDataStore *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  _QWORD *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34[5];
  WTF::StringImpl *v35;
  WTF::StringImpl *v36[5];
  WTF::StringImpl *v37;
  WTF::StringImpl *v38[5];

  if (a1)
  {
    v22 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v22 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v38, &v37, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v36, &v35, 0);
  if (a4)
    objc_msgSend(a4, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v34, &v33, 0);
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v23 = off_1E34DB580;
  v23[1] = a12;
  v23[2] = a13;
  v32 = v23;
  WebKit::WebsiteDataStore::mergeStatisticForTesting(v22, (const WTF::URL *)v38, (const WTF::URL *)v36, (const WTF::URL *)v34, a5, a6, a7, a8, a9, a10, a11, (uint64_t *)&v32);
  v25 = (uint64_t)v32;
  v32 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = v34[0];
  v34[0] = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v24);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v33;
  v33 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v24);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v36[0];
  v36[0] = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v24);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v35;
  v35 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v24);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = v38[0];
  v38[0] = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v24);
    else
      *(_DWORD *)v30 -= 2;
  }
  result = v37;
  v37 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsExpiredStatistic(void *a1, void *a2, unsigned int a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8)
{
  WebKit::WebsiteDataStore *v15;
  _QWORD *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *result;
  _QWORD *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];

  if (a1)
  {
    v15 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v15 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v23, &v22, 0);
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v16 = off_1E34DB5A8;
  v16[1] = a7;
  v16[2] = a8;
  v21 = v16;
  WebKit::WebsiteDataStore::insertExpiredStatisticForTesting(v15, (const WTF::URL *)v23, a3, a4, a5, a6, (uint64_t *)&v21);
  v18 = (uint64_t)v21;
  v21 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v23[0];
  v23[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v17);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsPrevalentResource(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a3)
    {
LABEL_3:
      if (a2)
        objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      MEMORY[0x19AEABB0C](v18, &v17, 0);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34DB5D0;
      v10[1] = a4;
      v10[2] = a5;
      v16 = v10;
      WebKit::WebsiteDataStore::setPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
      goto LABEL_10;
    }
  }
  else
  {
    v9 = 0;
    if (a3)
      goto LABEL_3;
  }
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v18, &v17, 0);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34DB5F8;
  v12[1] = a4;
  v12[2] = a5;
  v16 = v12;
  WebKit::WebsiteDataStore::clearPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
LABEL_10:
  v13 = (uint64_t)v16;
  v16 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsVeryPrevalentResource(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a3)
    {
LABEL_3:
      if (a2)
        objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      MEMORY[0x19AEABB0C](v18, &v17, 0);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34DB620;
      v10[1] = a4;
      v10[2] = a5;
      v16 = v10;
      WebKit::WebsiteDataStore::setVeryPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
      goto LABEL_10;
    }
  }
  else
  {
    v9 = 0;
    if (a3)
      goto LABEL_3;
  }
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v18, &v17, 0);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34DB648;
  v12[1] = a4;
  v12[2] = a5;
  v16 = v12;
  WebKit::WebsiteDataStore::clearPrevalentResource(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
LABEL_10:
  v13 = (uint64_t)v16;
  v16 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKWebsiteDataStoreDumpResourceLoadStatistics(void *a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB670;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::dumpResourceLoadStatistics(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsPrevalentResource(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB698;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::isPrevalentResource(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsVeryPrevalentResource(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB6C0;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::isVeryPrevalentResource(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v21, &v20, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v19, &v18, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB6E8;
  v10[1] = a4;
  v10[2] = a5;
  v17 = v10;
  WebKit::WebsiteDataStore::isRegisteredAsSubresourceUnder(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  v12 = (uint64_t)v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v21, &v20, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v19, &v18, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB710;
  v10[1] = a4;
  v10[2] = a5;
  v17 = v10;
  WebKit::WebsiteDataStore::isRegisteredAsSubFrameUnder(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  v12 = (uint64_t)v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v21, &v20, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v19, &v18, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB738;
  v10[1] = a4;
  v10[2] = a5;
  v17 = v10;
  WebKit::WebsiteDataStore::isRegisteredAsRedirectingTo(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  v12 = (uint64_t)v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsHasHadUserInteraction(void *a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *result;
  _QWORD *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a3)
    {
LABEL_3:
      if (a2)
        objc_msgSend(a2, "_apiObject");
      WTF::String::isolatedCopy();
      MEMORY[0x19AEABB0C](v18, &v17, 0);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v10 = off_1E34DB760;
      v10[1] = a4;
      v10[2] = a5;
      v16 = v10;
      WebKit::WebsiteDataStore::logUserInteraction(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
      goto LABEL_10;
    }
  }
  else
  {
    v9 = 0;
    if (a3)
      goto LABEL_3;
  }
  if (a2)
    objc_msgSend(a2, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v18, &v17, 0);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34DB788;
  v12[1] = a4;
  v12[2] = a5;
  v16 = v12;
  WebKit::WebsiteDataStore::clearUserInteraction(v9, (const WTF::URL *)v18, (uint64_t *)&v16);
LABEL_10:
  v13 = (uint64_t)v16;
  v16 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v18[0];
  v18[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsHasHadUserInteraction(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB7B0;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::hasHadUserInteraction(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v21, &v20, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v19, &v18, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DB7D8;
  v10[1] = a4;
  v10[2] = a5;
  v17 = v10;
  WebKit::WebsiteDataStore::isRelationshipOnlyInDatabaseOnce(v9, (const WTF::URL *)v21, (const WTF::URL *)v19, (uint64_t *)&v17);
  v12 = (uint64_t)v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsGrandfathered(void *a1, void *a2, char a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  _QWORD *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13[5];

  if (a1)
  {
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v13, &v12, 0);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34DB800;
  v11 = v6;
  WebKit::WebsiteDataStore::setGrandfathered(v5, (const WTF::URL *)v13, a3, (uint64_t *)&v11);
  v8 = (uint64_t)v11;
  v11 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v13[0];
  v13[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreIsStatisticsGrandfathered(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB828;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::isGrandfathered(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubframeUnderTopFrameOrigin(void *a1, void *a2, void *a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34DB850;
  v13 = v6;
  WebKit::WebsiteDataStore::setSubframeUnderTopFrameDomain(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  v8 = (uint64_t)v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubresourceUnderTopFrameOrigin(void *a1, void *a2, void *a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34DB878;
  v13 = v6;
  WebKit::WebsiteDataStore::setSubresourceUnderTopFrameDomain(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  v8 = (uint64_t)v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectTo(void *a1, void *a2, void *a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34DB8A0;
  v13 = v6;
  WebKit::WebsiteDataStore::setSubresourceUniqueRedirectTo(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  v8 = (uint64_t)v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsSubresourceUniqueRedirectFrom(void *a1, void *a2, void *a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34DB8C8;
  v13 = v6;
  WebKit::WebsiteDataStore::setSubresourceUniqueRedirectFrom(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  v8 = (uint64_t)v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectTo(void *a1, void *a2, void *a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34DB8F0;
  v13 = v6;
  WebKit::WebsiteDataStore::setTopFrameUniqueRedirectTo(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  v8 = (uint64_t)v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsTopFrameUniqueRedirectFrom(void *a1, void *a2, void *a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v5 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v6 = off_1E34DB918;
  v13 = v6;
  WebKit::WebsiteDataStore::setTopFrameUniqueRedirectFrom(v5, (const WTF::URL *)v17, (const WTF::URL *)v15, (uint64_t *)&v13);
  v8 = (uint64_t)v13;
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = v15[0];
  v15[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v7);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v17[0];
  v17[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration(void *a1, void *a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  WebKit::WebsiteDataStore *v11;
  _QWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  _QWORD *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[5];
  WTF::StringImpl *v22;
  WTF::StringImpl *v23[5];

  if (a1)
  {
    v11 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v11 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v23, &v22, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v21, &v20, 0);
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v12 = off_1E34DB940;
  v12[1] = a5;
  v12[2] = a6;
  v19 = v12;
  WebKit::WebsiteDataStore::setCrossSiteLoadWithLinkDecorationForTesting(v11, (const WTF::URL *)v23, (const WTF::URL *)v21, a4, (uint64_t *)&v19);
  v14 = (uint64_t)v19;
  v19 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = v23[0];
  v23[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v13);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsTimeToLiveUserInteraction(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DB968;
  v8[1] = a2;
  v8[2] = a3;
  v10 = v8;
  WebKit::WebsiteDataStore::setTimeToLiveUserInteraction(v7, (uint64_t *)&v10, a4);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsProcessStatisticsAndDataRecords(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB990;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::scheduleStatisticsAndDataRecordsProcessing(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsUpdateCookieBlocking(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DB9B8;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::scheduleCookieBlockingUpdate(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsNotifyPagesWhenDataRecordsWereScanned(void *a1, char a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  if (a1)
    v3 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34DB9E0;
  v6 = v4;
  WebKit::WebsiteDataStore::setNotifyPagesWhenDataRecordsWereScanned(v3, a2, (uint64_t *)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsTimeAdvanceForTesting(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBA08;
  v8[1] = a2;
  v8[2] = a3;
  v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsTimeAdvanceForTesting(v7, (uint64_t *)&v10, a4);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsIsRunningTest(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBA30;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::setIsRunningResourceLoadStatisticsTest(v7, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsShouldClassifyResourcesBeforeDataRecordsRemoval(void *a1, char a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  if (a1)
    v3 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34DBA58;
  v6 = v4;
  WebKit::WebsiteDataStore::setShouldClassifyResourcesBeforeDataRecordsRemoval(v3, a2, (uint64_t *)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsMinimumTimeBetweenDataRecordsRemoval(void *a1, double a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  if (a1)
    v3 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34DBA80;
  v6 = v4;
  WebKit::WebsiteDataStore::setMinimumTimeBetweenDataRecordsRemoval(v3, (uint64_t *)&v6, a2);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsGrandfatheringTime(void *a1, double a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  if (a1)
    v3 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34DBAA8;
  v6 = v4;
  WebKit::WebsiteDataStore::setGrandfatheringTime(v3, (uint64_t *)&v6, a2);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsMaxStatisticsEntries(void *a1, unsigned int a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  if (a1)
    v3 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34DBAD0;
  v6 = v4;
  WebKit::WebsiteDataStore::setMaxStatisticsEntries(v3, (uint64_t *)a2, (uint64_t *)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsPruneEntriesDownTo(void *a1, unsigned int a2)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  if (a1)
    v3 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v3 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = off_1E34DBAF8;
  v6 = v4;
  WebKit::WebsiteDataStore::setPruneEntriesDownTo(v3, (uint64_t *)a2, (uint64_t *)&v6);
  result = (uint64_t)v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStore(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBB20;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(v5, 1, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStoreModifiedSinceHours(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  double v8;
  double v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  if (a1)
  {
    a1 = (void *)objc_msgSend(a1, "_apiObject");
    v7 = (uint64_t *)a1;
  }
  else
  {
    v7 = 0;
  }
  WTF::WallTime::now((WTF::WallTime *)a1);
  v9 = v8 + (double)a2 * -3600.0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DBB48;
  v10[1] = a3;
  v10[2] = a4;
  v12 = v10;
  WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent(v7, 1, (uint64_t *)&v12, v9);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreStatisticsClearThroughWebsiteDataRemoval(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBB70;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 4096, (uint64_t *)&v8, 0.0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreStatisticsDeleteCookiesForTesting(void *a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  _QWORD *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v17, &v16, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DBB98;
  v10[1] = a4;
  v10[2] = a5;
  v15 = v10;
  WebKit::WebsiteDataStore::deleteCookiesForTesting(v9, (const WTF::URL *)v17, a3, (uint64_t *)&v15);
  v12 = (uint64_t)v15;
  v15 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreStatisticsHasLocalStorage(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBBC0;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::hasLocalStorageForTesting(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKWebsiteDataStoreSetStatisticsCacheMaxAgeCap(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBBE8;
  v8[1] = a2;
  v8[2] = a3;
  v10 = v8;
  WebKit::WebsiteDataStore::setCacheMaxAgeCapForPrevalentResources(v7, (uint64_t *)&v10, a4);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreStatisticsHasIsolatedSession(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBC10;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::hasIsolatedSessionForTesting(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKWebsiteDataStoreHasAppBoundSession(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBC38;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::hasAppBoundSession(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsShouldDowngradeReferrerForTesting(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBC60;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldDowngradeReferrerForTesting(v7, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsShouldBlockThirdPartyCookiesForTesting(void *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  int v11;
  int v12;
  uint64_t result;
  _QWORD *v14;

  if (a1)
    v9 = objc_msgSend(a1, "_apiObject");
  else
    v9 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DBC88;
  v10[1] = a4;
  v10[2] = a5;
  v14 = v10;
  if (a3)
    v11 = 3;
  else
    v11 = 0;
  if (a2)
    v12 = v11;
  else
    v12 = 4;
  WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode(v9, v12, (uint64_t *)&v14);
  result = (uint64_t)v14;
  if (v14)
    return (*(uint64_t (**)(_QWORD *))(*v14 + 8))(v14);
  return result;
}

uint64_t WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBCB0;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting(v7, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBCD8;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsToSameSiteStrictCookiesForTesting(v7, (const WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  WebKit::WebsiteDataStore *v9;
  _QWORD *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  _QWORD *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19[5];
  WTF::StringImpl *v20;
  WTF::StringImpl *v21[5];

  if (a1)
  {
    v9 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v9 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v21, &v20, 0);
  if (a3)
    objc_msgSend(a3, "_apiObject");
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v19, &v18, 0);
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = off_1E34DBD00;
  v10[1] = a4;
  v10[2] = a5;
  v17 = v10;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting(v9, (WTF::URL *)v21, (WTF::URL *)v19, (uint64_t *)&v17);
  v12 = (uint64_t)v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = v19[0];
  v19[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v18;
  v18 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v11);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v21[0];
  v21[0] = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v11);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *result;
  _QWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15[5];

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  MEMORY[0x19AEABB0C](v15, &v14, 0);
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DBD28;
  v8[1] = a3;
  v8[2] = a4;
  v13 = v8;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsThirdPartyCNAMEDomainForTesting(v7, (WTF::URL *)v15, (uint64_t *)&v13);
  v10 = (uint64_t)v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v15[0];
  v15[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WKWebsiteDataStoreSetAppBoundDomainsForTesting(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21[5];
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;

  if (a1)
  {
    v6 = objc_msgSend(a1, "_apiObject");
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *(unsigned int *)(v6 + 28);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(v7);
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = WTF::fastZeroedMalloc((WTF *)(8 * v9 + 16));
  v23 = (WTF::StringImpl **)(v10 + 16);
  *(_DWORD *)(v10 + 8) = v9 - 1;
  *(_DWORD *)(v10 + 12) = v9;
  *(_QWORD *)v10 = 0;
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v12 = API::Array::at<API::URL>(v6, i);
      if (v12)
      {
        WTF::URL::URL((uint64_t)v21, (WTF::StringImpl **)(v12 + 16));
        WebCore::RegistrableDomain::RegistrableDomain(&v22, (const WTF::URL *)v21);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v23, &v22, (uint64_t)&v20);
        v14 = v22;
        v22 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = v21[0];
        v21[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v16 = off_1E34DBD50;
  *((_QWORD *)v16 + 1) = a2;
  *((_QWORD *)v16 + 2) = a3;
  v21[0] = v16;
  WebKit::WebsiteDataStore::setAppBoundDomainsForTesting((uint64_t *)&v23, (uint64_t *)v21, v17);
  v19 = v21[0];
  v21[0] = 0;
  if (v19)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
  if (!v23)
  {
    if (!a1)
      return;
    goto LABEL_22;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v18);
  if (a1)
LABEL_22:
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

void WKWebsiteDataStoreSetManagedDomainsForTesting(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  const WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21[5];
  WTF::StringImpl *v22;
  WTF::StringImpl **v23;

  if (a1)
  {
    v6 = objc_msgSend(a1, "_apiObject");
    CFRetain(*(CFTypeRef *)(v6 + 8));
    v7 = *(unsigned int *)(v6 + 28);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(v7);
  if (v8 <= 8)
    v9 = 8;
  else
    v9 = v8;
  v10 = WTF::fastZeroedMalloc((WTF *)(8 * v9 + 16));
  v23 = (WTF::StringImpl **)(v10 + 16);
  *(_DWORD *)(v10 + 8) = v9 - 1;
  *(_DWORD *)(v10 + 12) = v9;
  *(_QWORD *)v10 = 0;
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      v12 = API::Array::at<API::URL>(v6, i);
      if (v12)
      {
        WTF::URL::URL((uint64_t)v21, (WTF::StringImpl **)(v12 + 16));
        WebCore::RegistrableDomain::RegistrableDomain(&v22, (const WTF::URL *)v21);
        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)&v23, &v22, (uint64_t)&v20);
        v14 = v22;
        v22 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v13);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = v21[0];
        v21[0] = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v13);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
    }
  }
  v16 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v16 = off_1E34DBD78;
  *((_QWORD *)v16 + 1) = a2;
  *((_QWORD *)v16 + 2) = a3;
  v21[0] = v16;
  WebKit::WebsiteDataStore::setManagedDomainsForTesting((uint64_t *)&v23, (uint64_t *)v21, v17);
  v19 = v21[0];
  v21[0] = 0;
  if (v19)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
  if (!v23)
  {
    if (!a1)
      return;
    goto LABEL_22;
  }
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v23, v18);
  if (a1)
LABEL_22:
    CFRelease(*(CFTypeRef *)(v6 + 8));
}

uint64_t WKWebsiteDataStoreStatisticsResetToConsistentState(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD *v20;
  unsigned int v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t result;
  unsigned int v33;
  unsigned int v34;
  _QWORD *v35;

  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBDA0;
  v6[1] = a2;
  v6[2] = a3;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = v6;
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  do
    v8 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v8 + 1, (unsigned int *)v7));
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = off_1E34DBDC8;
  v9[1] = v7;
  v35 = v9;
  WebKit::WebsiteDataStore::clearResourceLoadStatisticsInWebProcesses((WebKit::WebsiteDataStore *)a1, (uint64_t *)&v35);
  if (v35)
    (*(void (**)(_QWORD *))(*v35 + 8))(v35);
  do
    v10 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v10 + 1, (unsigned int *)v7));
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E34DBDF0;
  v11[1] = v7;
  v35 = v11;
  WebKit::WebsiteDataStore::resetCacheMaxAgeCapForPrevalentResources((uint64_t *)a1, (uint64_t *)&v35);
  v12 = (uint64_t)v35;
  v35 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  do
    v13 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v13 + 1, (unsigned int *)v7));
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = off_1E34DBE18;
  v14[1] = v7;
  v35 = v14;
  WebKit::WebsiteDataStore::resetCrossSiteLoadsWithLinkDecorationForTesting((uint64_t *)a1, (uint64_t *)&v35);
  v15 = (uint64_t)v35;
  v35 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  do
    v16 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v16 + 1, (unsigned int *)v7));
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v17 = off_1E34DBE40;
  v17[1] = v7;
  v35 = v17;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldDowngradeReferrerForTesting((WebKit::WebsiteDataStore *)a1, 1, (uint64_t *)&v35);
  v18 = (uint64_t)v35;
  v35 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  do
    v19 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v19 + 1, (unsigned int *)v7));
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v20 = off_1E34DBE68;
  v20[1] = v7;
  v35 = v20;
  WebKit::WebsiteDataStore::setThirdPartyCookieBlockingMode((uint64_t)a1, 4, (uint64_t *)&v35);
  if (v35)
    (*(void (**)(_QWORD *))(*v35 + 8))(v35);
  do
    v21 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v21 + 1, (unsigned int *)v7));
  v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v22 = off_1E34DBE90;
  v22[1] = v7;
  v35 = v22;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsShouldEnbleSameSiteStrictEnforcementForTesting((WebKit::WebsiteDataStore *)a1, 1, (uint64_t *)&v35);
  v23 = (uint64_t)v35;
  v35 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  do
    v24 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v24 + 1, (unsigned int *)v7));
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v25 = off_1E34DBEB8;
  v25[1] = v7;
  v35 = v25;
  WebKit::WebsiteDataStore::setResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting((uint64_t *)a1, 0, (uint64_t *)&v35);
  v26 = (uint64_t)v35;
  v35 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  do
    v27 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v27 + 1, (unsigned int *)v7));
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = off_1E34DBEE0;
  v28[1] = v7;
  v35 = v28;
  WebKit::WebsiteDataStore::resetParametersToDefaultValues((uint64_t *)a1, (uint64_t *)&v35);
  v29 = (uint64_t)v35;
  v35 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  do
    v30 = __ldaxr((unsigned int *)v7);
  while (__stlxr(v30 + 1, (unsigned int *)v7));
  v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v31 = off_1E34DBF08;
  v31[1] = v7;
  v35 = v31;
  WebKit::WebsiteDataStore::scheduleClearInMemoryAndPersistent((uint64_t *)a1, 0, (uint64_t *)&v35);
  result = (uint64_t)v35;
  v35 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  do
  {
    v33 = __ldaxr((unsigned int *)v7);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, (unsigned int *)v7));
  if (!v34)
  {
    atomic_store(1u, (unsigned int *)v7);
    v35 = (_QWORD *)v7;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v35);
  }
  return result;
}

uint64_t WKWebsiteDataStoreRemoveAllFetchCaches(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBF30;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 0x8000, (uint64_t *)&v8, -INFINITY);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreRemoveNetworkCache(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBF58;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 2, (uint64_t *)&v8, -INFINITY);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreRemoveMemoryCaches(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBF80;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 4, (uint64_t *)&v8, -INFINITY);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WKWebsiteDataStoreRemoveFetchCacheForOrigin(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl **v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *result;
  uint64_t v18[2];
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  WebCore::SecurityOriginData *v24[2];
  __int128 v25;
  WTF::StringImpl **v26;
  WTF::StringImpl *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;
  WTF::StringImpl **v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  LOBYTE(v21) = 0;
  v23 = 0;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v26 = 0;
  if (a2)
    v7 = objc_msgSend(a2, "_apiObject");
  else
    v7 = 0;
  v20 = 0x8000;
  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add((uint64_t *)v24, v7 + 16, (uint64_t)&v27);
  v8 = v19;
  v19 = 0;
  v27 = v8;
  v28 = 0x8000;
  LOBYTE(v29) = 0;
  v31 = 0;
  v32 = *(_OWORD *)v24;
  v9 = v25;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v33 = v9;
  v10 = v26;
  v26 = 0;
  v34 = v10;
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18, (uint64_t)&v27, 1uLL);
  if (v34)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v34, v11);
  if (*((_QWORD *)&v33 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v33 + 1), v11);
  if ((_QWORD)v33)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v33, v11);
  if (*((_QWORD *)&v32 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v32 + 1), v11);
  if ((_QWORD)v32)
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable((WebCore::SecurityOriginData *)v32, v11);
  if (v31 && v30)
    WTF::fastFree((WTF *)(v30 - 16), v11);
  v12 = v27;
  v27 = 0;
  if (!v12)
  {
LABEL_19:
    if (!a1)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (*(_DWORD *)v12 != 2)
  {
    *(_DWORD *)v12 -= 2;
    goto LABEL_19;
  }
  WTF::StringImpl::destroy(v12, v11);
  if (a1)
LABEL_20:
    a1 = (void *)objc_msgSend(a1, "_apiObject");
LABEL_21:
  v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v13 = off_1E34DBFA8;
  *((_QWORD *)v13 + 1) = a3;
  *((_QWORD *)v13 + 2) = a4;
  v27 = v13;
  WebKit::WebsiteDataStore::removeData((uint64_t)a1, 0x8000, v18, (uint64_t *)&v27);
  v15 = v27;
  v27 = 0;
  if (v15)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v15 + 8))(v15);
  WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v14);
  if (v26)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v16);
  if (*((_QWORD *)&v25 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v25 + 1), v16);
  if ((_QWORD)v25)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v25, v16);
  if (v24[1])
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v24[1], v16);
  if (v24[0])
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v24[0], v16);
  if (v23 && v22)
    WTF::fastFree((WTF *)(v22 - 16), v16);
  result = v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKWebsiteDataStoreRemoveAllIndexedDatabases(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBFD0;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 128, (uint64_t *)&v8, -INFINITY);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreRemoveLocalStorage(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DBFF8;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 32, (uint64_t *)&v8, -INFINITY);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreRemoveAllServiceWorkerRegistrations(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC020;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 0x4000, (uint64_t *)&v8, -INFINITY);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreGetFetchCacheOrigins(void *a1, uint64_t a2, uint64_t a3)
{
  WTF::WorkQueue *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (WTF::WorkQueue *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC048;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::fetchData(v5, 0x8000, 0, (uint64_t *)&v8);
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WKWebsiteDataStoreGetFetchCacheSizeForOrigin(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WTF::WorkQueue *v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = (WTF::WorkQueue *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v8 = off_1E34DC070;
  v8[1] = a2;
  v8[2] = a3;
  v8[3] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::fetchData(v7, 0x8000, 1, (uint64_t *)&v10);
  result = (uint64_t)v10;
  if (v10)
    return (*(uint64_t (**)(_QWORD *))(*v10 + 8))(v10);
  return result;
}

uint64_t WKWebsiteDataStoreClearAllDeviceOrientationPermissions(void *a1)
{
  uint64_t result;
  void *v2;
  WebCore::SecurityOriginData *v3;

  result = objc_msgSend(a1, "_apiObject");
  v3 = *(WebCore::SecurityOriginData **)(result + 376);
  if (v3)
  {
    *(_QWORD *)(result + 376) = 0;
    return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,BOOL>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,BOOL,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v3, v2);
  }
  return result;
}

uint64_t WKWebsiteDataStoreClearPrivateClickMeasurementsThroughWebsiteDataRemoval(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC098;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 0x20000, (uint64_t *)&v8, 0.0);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetCacheModelSynchronouslyForTesting(void *a1, int a2)
{
  char v3;

  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  if (a2 == 2)
    v3 = 2;
  else
    v3 = a2 == 1;
  return WebKit::WebsiteDataStore::setCacheModelSynchronouslyForTesting((uint64_t)a1, v3);
}

uint64_t WKWebsiteDataStoreResetQuota(void *a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC0C0;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::resetQuota(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreResetStoragePersistedState(void *a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC0E8;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::resetStoragePersistedState(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreClearStorage(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC110;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::removeData(v5, 581792, (uint64_t *)&v8, -INFINITY);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreSetOriginQuotaRatioEnabled(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  if (a1)
    v7 = objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DC138;
  v8[1] = a3;
  v8[2] = a4;
  v10 = v8;
  WebKit::WebsiteDataStore::setOriginQuotaRatioEnabledForTesting(v7, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreClearAppBoundSession(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (uint64_t *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC160;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::clearAppBoundSession(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WebKit *WKWebsiteDataStoreReinitializeAppBoundDomains(void *a1)
{
  if (a1)
    a1 = (void *)objc_msgSend(a1, "_apiObject");
  atomic_store(0, WebKit::hasInitializedAppBoundDomains);
  return WebKit::WebsiteDataStore::initializeAppBoundDomains((WebKit *)a1, 1);
}

WTF::StringImpl *WKWebsiteDataStoreUpdateBundleIdentifierInNetworkProcess(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  _QWORD *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *result;
  _QWORD *v12;
  WTF::StringImpl *v13;

  if (a1)
  {
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
    if (a2)
LABEL_3:
      objc_msgSend(a2, "_apiObject");
  }
  else
  {
    v7 = 0;
    if (a2)
      goto LABEL_3;
  }
  WTF::String::isolatedCopy();
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = off_1E34DC188;
  v8[1] = a3;
  v8[2] = a4;
  v12 = v8;
  WebKit::WebsiteDataStore::updateBundleIdentifierInNetworkProcess(v7, (uint64_t *)&v13, (uint64_t *)&v12);
  v10 = (uint64_t)v12;
  v12 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v13;
  v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WKWebsiteDataStoreClearBundleIdentifierInNetworkProcess(void *a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  if (a1)
    v5 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v5 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = off_1E34DC1B0;
  v6[1] = a2;
  v6[2] = a3;
  v8 = v6;
  WebKit::WebsiteDataStore::clearBundleIdentifierInNetworkProcess(v5, (uint64_t *)&v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WKWebsiteDataStoreGetAllStorageAccessEntries(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD *v11;

  if (a1)
    v7 = (WebKit::WebsiteDataStore *)objc_msgSend(a1, "_apiObject");
  else
    v7 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)(objc_msgSend(a2, "_apiObject") + 32) + 744);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v9 = off_1E34DC1D8;
  v9[1] = a3;
  v9[2] = a4;
  v11 = v9;
  WebKit::WebsiteDataStore::getAllStorageAccessEntries(v7, v8, (uint64_t *)&v11);
  result = (uint64_t)v11;
  if (v11)
    return (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  return result;
}

uint64_t WKWebsitePoliciesGetTypeID()
{
  return 123;
}

API::WebsitePolicies *WKWebsitePoliciesCreate()
{
  API::WebsitePolicies *v0;
  API::WebsitePolicies *result;

  v0 = (API::WebsitePolicies *)API::Object::newObject(0xA8uLL, 123);
  result = API::WebsitePolicies::WebsitePolicies(v0);
  if (result)
    return (API::WebsitePolicies *)*((_QWORD *)result + 1);
  return result;
}

WTF::StringImpl **WKWebsitePoliciesSetContentBlockersEnabled(void *a1, char a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl **result;

  v4 = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(v4 + 104) = a2;
  result = *(WTF::StringImpl ***)(v4 + 112);
  *(_QWORD *)(v4 + 112) = 0;
  if (result)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  return result;
}

uint64_t WKWebsitePoliciesGetContentBlockersEnabled(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 104);
}

uint64_t WKWebsitePoliciesCopyCustomHeaderFields()
{
  return 0;
}

uint64_t WKWebsitePoliciesSetAllowedAutoplayQuirks(void *a1, char a2)
{
  char v2;
  uint64_t result;

  v2 = a2 & 0xF;
  result = objc_msgSend(a1, "_apiObject");
  *(_BYTE *)(result + 98) = v2;
  return result;
}

uint64_t WKWebsitePoliciesGetAllowedAutoplayQuirks(void *a1)
{
  return *(_BYTE *)(objc_msgSend(a1, "_apiObject") + 98) & 0xF;
}

uint64_t WKWebsitePoliciesGetAutoplayPolicy(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "_apiObject");
  if (*(unsigned __int8 *)(v1 + 120) - 1 < 3)
    return (*(_BYTE *)(v1 + 120) - 1) + 1;
  else
    return 0;
}

_BYTE *WKWebsitePoliciesSetAutoplayPolicy(_BYTE *result, unsigned int a2)
{
  char v2;

  if (a2 <= 3)
  {
    v2 = a2;
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    result[120] = v2;
  }
  return result;
}

uint64_t WKWebsitePoliciesGetPopUpPolicy(void *a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 121);
  if (v1 == 2)
    return 2;
  else
    return v1 == 1;
}

_BYTE *WKWebsitePoliciesSetPopUpPolicy(_BYTE *result, unsigned int a2)
{
  char v2;

  if (a2 <= 2)
  {
    v2 = a2;
    result = (_BYTE *)objc_msgSend(result, "_apiObject");
    result[121] = v2;
  }
  return result;
}

uint64_t WKWebsitePoliciesGetDataStore(void *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 136);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

void WKWebsitePoliciesSetDataStore(void *a1, CFTypeRef *a2)
{
  CFTypeRef *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a2;
  if (a1)
  {
    v3 = objc_msgSend(a1, "_apiObject");
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = 0;
  if (a2)
  {
LABEL_3:
    v2 = (CFTypeRef *)-[CFTypeRef _apiObject](v2, "_apiObject");
    CFRetain(v2[1]);
  }
LABEL_4:
  v4 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v2;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WKWindowFeaturesGetTypeID()
{
  return 124;
}

uint64_t WKContextMenuListenerGetTypeID()
{
  return 0;
}

uint64_t WKGetWebURLSchemeTaskInstanceCount()
{
  return 0;
}

uint64_t WKUserScriptGetTypeID()
{
  return 28;
}

uint64_t WKUserScriptCreate(_QWORD *a1, void *a2, void *a3, void *a4, int a5, uint64_t a6)
{
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  __int128 v16;
  API::ContentWorld *v17;
  WebKit *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  _QWORD v28[2];
  _QWORD v29[2];
  WTF::StringImpl *v30;
  WTF::StringImpl *v31[11];
  WebKit *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  __int128 v35;
  WTF::StringImpl *v36;

  v10 = a1;
  if (a2)
  {
    a1 = (_QWORD *)objc_msgSend(a2, "_apiObject");
    v11 = (WTF::StringImpl *)a1[2];
    if (v11)
      *(_DWORD *)v11 += 2;
  }
  else
  {
    v11 = 0;
  }
  v36 = v11;
  if (a3)
  {
    a1 = (_QWORD *)objc_msgSend(a3, "_apiObject");
    a3 = a1;
  }
  if (a4)
  {
    a1 = (_QWORD *)objc_msgSend(a4, "_apiObject");
    a4 = a1;
  }
  if (!v11 || !*((_DWORD *)v11 + 1))
  {
    v14 = WTF::aboutBlankURL((WTF *)a1);
    v15 = *(WTF::StringImpl **)v14;
    if (*(_QWORD *)v14)
      *(_DWORD *)v15 += 2;
    v33 = v15;
    v16 = *(_OWORD *)(v14 + 24);
    v34 = *(_OWORD *)(v14 + 8);
    v35 = v16;
LABEL_18:
    if (!v10)
      goto LABEL_23;
    goto LABEL_19;
  }
  v31[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v31);
  MEMORY[0x19AEABB24](&v33, v31, &v36, 0);
  v13 = v31[0];
  v31[0] = 0;
  if (!v13)
    goto LABEL_18;
  if (*(_DWORD *)v13 == 2)
  {
    WTF::StringImpl::destroy(v13, v12);
    if (!v10)
      goto LABEL_23;
LABEL_19:
    objc_msgSend(v10, "_apiObject");
    WTF::String::isolatedCopy();
    if (!a3)
      goto LABEL_24;
    goto LABEL_20;
  }
  *(_DWORD *)v13 -= 2;
  if (v10)
    goto LABEL_19;
LABEL_23:
  v30 = 0;
  if (!a3)
  {
LABEL_24:
    v29[0] = 0;
    v29[1] = 0;
    if (!a4)
      goto LABEL_25;
LABEL_21:
    API::Array::toStringVector((unsigned int *)a4, (uint64_t)v28);
    goto LABEL_26;
  }
LABEL_20:
  API::Array::toStringVector((unsigned int *)a3, (uint64_t)v29);
  if (a4)
    goto LABEL_21;
LABEL_25:
  v28[0] = 0;
  v28[1] = 0;
LABEL_26:
  v17 = (API::ContentWorld *)MEMORY[0x19AEAC7C0](v31, &v30, &v33, v29, v28, a5 == 1, a6, 0);
  v18 = API::ContentWorld::pageContentWorld(v17);
  API::UserScript::create((uint64_t *)v31, (uint64_t)v18, &v32);
  if (v32)
    v20 = *((_QWORD *)v32 + 1);
  else
    v20 = 0;
  v32 = 0;
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v31, v19);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v21);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v22);
  v24 = v30;
  v30 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v23);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v33;
  v33 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v23);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v36;
  v36 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v23);
    else
      *(_DWORD *)v26 -= 2;
  }
  return v20;
}

void API::UserScript::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, WebKit **a3@<X8>)
{
  WebKit *v6;
  void *v7;
  _BYTE v8[88];

  v6 = (WebKit *)API::Object::newObject(0x78uLL, 28);
  WebCore::UserScript::UserScript((uint64_t)v8, a1);
  API::UserScript::UserScript(v6, (uint64_t)v8, a2);
  *a3 = v6;
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v8, v7);
}

uint64_t WKUserScriptCreateWithSource(void *a1, int a2, uint64_t a3)
{
  API::ContentWorld *v5;
  WebKit *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  _QWORD v15[2];
  _QWORD v16[2];
  WTF::StringImpl *v17[5];
  WTF::StringImpl *v18;
  uint64_t v19[11];
  WebKit *v20;

  if (a1)
  {
    objc_msgSend(a1, "_apiObject");
    WTF::String::isolatedCopy();
  }
  else
  {
    v18 = 0;
  }
  v17[0] = 0;
  WTF::URL::invalidate((WTF::URL *)v17);
  v16[0] = 0;
  v16[1] = 0;
  v15[0] = 0;
  v15[1] = 0;
  v5 = (API::ContentWorld *)MEMORY[0x19AEAC7C0](v19, &v18, v17, v16, v15, a2 == 1, a3, 0);
  v6 = API::ContentWorld::pageContentWorld(v5);
  API::UserScript::create(v19, (uint64_t)v6, &v20);
  if (v20)
    v8 = *((_QWORD *)v20 + 1);
  else
    v8 = 0;
  v20 = 0;
  WebCore::UserScript::~UserScript((WebCore::UserScript *)v19, v7);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v10);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v18;
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  return v8;
}

uint64_t WKUserScriptCopySource(void *a1)
{
  WebKit *v2;

  if (a1)
    objc_msgSend(a1, "_apiObject");
  API::String::create(&v2);
  if (v2)
    return *((_QWORD *)v2 + 1);
  else
    return 0;
}

uint64_t WKUserScriptGetInjectionTime(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 104);
}

uint64_t WKUserScriptGetMainFrameOnly(void *a1)
{
  return *(unsigned __int8 *)(objc_msgSend(a1, "_apiObject") + 105);
}

uint64_t WKIconDatabaseTryGetCGImageForURL()
{
  return 0;
}

uint64_t WKIconDatabaseTryCopyCGImageArrayForURL()
{
  return 0;
}

uint64_t *WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  uint64_t *v18;

  v3 = result;
  *result = 0;
  result[1] = 0;
  if (!a3)
    return v3;
  if (a3 < 0x3333334)
  {
    v5 = 5 * a3;
    v6 = 80 * a3;
    v7 = WTF::fastMalloc((WTF *)(80 * a3));
    *((_DWORD *)v3 + 2) = (v6 & 0xFFFFFFF0) / 0x50;
    *v3 = v7;
    v8 = (uint64_t *)(a2 + 16 * v5);
    v9 = *((_DWORD *)v3 + 3);
    v10 = (uint64_t *)(a2 + 72);
    do
    {
      v12 = v10 - 9;
      v11 = (_DWORD *)*(v10 - 9);
      v13 = *v3;
      if (v11)
        *v11 += 2;
      v14 = v9;
      v15 = v13 + 80 * v9;
      v16 = *((_DWORD *)v10 - 16);
      *(_BYTE *)(v15 + 16) = 0;
      *(_QWORD *)v15 = v11;
      *(_DWORD *)(v15 + 8) = v16;
      *(_BYTE *)(v15 + 32) = 0;
      v17 = (_BYTE *)(v15 + 32);
      if (*((_BYTE *)v10 - 40))
      {
        *(_QWORD *)(v15 + 16) = *(v10 - 7);
        WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned long long>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,unsigned long long,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::HashTable((uint64_t *)(v13 + 80 * v9 + 24), (_DWORD **)v10 - 6);
        *v17 = 1;
      }
      v18 = (uint64_t *)(v13 + 80 * v14);
      WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::HashTable(v18 + 5, v10 - 4);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v18 + 6, (_QWORD **)v10 - 3);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v18 + 7, (_QWORD **)v10 - 2);
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable(v18 + 8, (_QWORD **)v10 - 1);
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(v18 + 9, v10);
      v9 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + 3) = v9;
      v10 += 10;
    }
    while (v12 + 10 != v8);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveITPDataForDomain::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreDoesStatisticsDomainIDExistInDatabase::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsEphemeral::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSyncLocalStorage::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsDebugModeWithCompletionHandler::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsPrevalentResourceForDebugMode::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsLastSeen::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsMergeStatistic::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsExpiredStatistic::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsPrevalentResource::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsPrevalentResource::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsVeryPrevalentResource::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsVeryPrevalentResource::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

void WTF::Detail::CallableWrapper<WKWebsiteDataStoreDumpResourceLoadStatistics::$_0,void,WTF::String const&>::call(uint64_t a1, WTF::StringImpl **a2)
{
  void (*v3)(_QWORD, _QWORD);
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebKit *v7;
  WTF::StringImpl *v8;
  WebKit *v9;

  v3 = *(void (**)(_QWORD, _QWORD))(a1 + 16);
  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v8 = v4;
  API::String::create(&v8, &v9);
  v6 = v8;
  v7 = v9;
  v8 = 0;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
    {
      WTF::StringImpl::destroy(v6, v5);
      if (v7)
        goto LABEL_7;
LABEL_10:
      v3(0, *(_QWORD *)(a1 + 8));
      return;
    }
    *(_DWORD *)v6 -= 2;
  }
  if (!v7)
    goto LABEL_10;
LABEL_7:
  v3(*((_QWORD *)v7 + 1), *(_QWORD *)(a1 + 8));
  CFRelease(*((CFTypeRef *)v7 + 1));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsPrevalentResource::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsVeryPrevalentResource::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsRegisteredAsSubresourceUnder::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsRegisteredAsSubFrameUnder::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsRegisteredAsRedirectingTo::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsHasHadUserInteraction::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsHasHadUserInteraction::$_1,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsHasHadUserInteraction::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsOnlyInDatabaseOnce::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreIsStatisticsGrandfathered::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsCrossSiteLoadWithLinkDecoration::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsTimeToLiveUserInteraction::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsProcessStatisticsAndDataRecords::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsUpdateCookieBlocking::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsTimeAdvanceForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsIsRunningTest::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStore::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsClearInMemoryAndPersistentStoreModifiedSinceHours::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsClearThroughWebsiteDataRemoval::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsDeleteCookiesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsHasLocalStorage::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetStatisticsCacheMaxAgeCap::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsHasIsolatedSession::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreHasAppBoundSession::$_0,void,BOOL>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a2, *(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsShouldDowngradeReferrerForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsShouldBlockThirdPartyCookiesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyWebsiteDataRemovalModeForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsToSameSiteStrictCookiesForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsFirstPartyHostCNAMEDomainForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetResourceLoadStatisticsThirdPartyCNAMEDomainForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetAppBoundDomainsForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetManagedDomainsForTesting::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_1,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBDC8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_1,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBDC8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_2,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBDF0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_2,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBDF0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_3,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBE18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_3,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBE18;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_4,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBE40;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_4,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBE40;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_5,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBE68;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_5,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBE68;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_6,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBE90;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_6,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBE90;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_7,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBEB8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_7,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBEB8;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_8,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBEE0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_8,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBEE0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_9,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DBF08;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreStatisticsResetToConsistentState::$_9,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DBF08;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveAllFetchCaches::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveNetworkCache::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveMemoryCaches::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveFetchCacheForOrigin::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveAllIndexedDatabases::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveLocalStorage::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreRemoveAllServiceWorkerRegistrations::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreGetFetchCacheOrigins::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  WebCore::SecurityOriginData *v7;
  WebCore::SecurityOriginData *v8;
  uint64_t v9;
  WebCore::SecurityOriginData *v10;
  WTF::StringImpl *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  void (*v20)(_QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  WTF::StringImpl *v24;
  uint64_t v26;
  int v27;
  unsigned int v28;
  WTF *v29;
  uint64_t v30;
  WebCore::SecurityOriginData *v31[2];
  uint64_t v32;
  uint64_t v33;

  v3 = *a2;
  v26 = *a2;
  v5 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v27 = v5;
  v28 = v4;
  v32 = 0;
  v33 = 0;
  if (v4)
  {
    v6 = v3 + 80 * v4;
    do
    {
      v7 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v3 + 40));
      v31[0] = v7;
      v31[1] = v8;
      v9 = *(_QWORD *)(v3 + 40);
      if (v9)
        v10 = (WebCore::SecurityOriginData *)(v9 + 32 * *(unsigned int *)(v9 - 4));
      else
        v10 = 0;
      if (v10 != v7)
      {
        do
        {
          WebCore::SecurityOriginData::securityOrigin(v7);
          API::SecurityOrigin::create(&v30);
          v12 = HIDWORD(v33);
          if (HIDWORD(v33) == (_DWORD)v33)
          {
            v13 = HIDWORD(v33) + ((unint64_t)HIDWORD(v33) >> 2);
            if (v13 >= 0x10)
              v14 = v13 + 1;
            else
              v14 = 16;
            if (v14 <= (unint64_t)HIDWORD(v33) + 1)
              v15 = HIDWORD(v33) + 1;
            else
              v15 = v14;
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)&v32, v15);
            v12 = HIDWORD(v33);
            v16 = v30;
            v30 = 0;
            *(_QWORD *)(v32 + 8 * HIDWORD(v33)) = v16;
          }
          else
          {
            v17 = v30;
            v30 = 0;
            *(_QWORD *)(v32 + 8 * HIDWORD(v33)) = v17;
          }
          HIDWORD(v33) = v12 + 1;
          v18 = v30;
          v30 = 0;
          if (v18)
            CFRelease(*(CFTypeRef *)(v18 + 8));
          v19 = v29;
          v29 = 0;
          if (v19)
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v19, v11);
          v31[0] = (WebCore::SecurityOriginData *)((char *)v31[0] + 32);
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v31);
          v7 = v31[0];
        }
        while (v31[0] != v10);
      }
      v3 += 80;
    }
    while (v3 != v6);
  }
  v20 = *(void (**)(_QWORD, _QWORD))(a1 + 16);
  v21 = API::Object::newObject(0x20uLL, 1);
  *(_QWORD *)v21 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v21);
  *(_QWORD *)v21 = &off_1E34CC2F8;
  *(_QWORD *)(v21 + 16) = v32;
  v22 = v33;
  v32 = 0;
  v33 = 0;
  *(_QWORD *)(v21 + 24) = v22;
  v20(*(_QWORD *)(v21 + 8), *(_QWORD *)(a1 + 8));
  CFRelease(*(CFTypeRef *)(v21 + 8));
  WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v32, v23);
  return WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v24);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreGetFetchCacheSizeForOrigin::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;
  const WTF::String *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v19;
  unint64_t v20;
  WTF *v21[2];
  WTF::StringImpl *v22;
  _BYTE v23[24];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v19 = *a2;
  v4 = *((_DWORD *)a2 + 2);
  v5 = *((_DWORD *)a2 + 3);
  *a2 = 0;
  a2[1] = 0;
  v20 = __PAIR64__(v5, v4);
  v6 = *(void **)(a1 + 8);
  if (v6)
    objc_msgSend(v6, "_apiObject", v19, v20);
  WTF::String::isolatedCopy();
  WebCore::SecurityOrigin::createFromString((WebCore::SecurityOrigin *)&v22, v7);
  v23[0] = 0;
  v24 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v23, (uint64_t)v21[0] + 8);
  v9 = v21[0];
  v21[0] = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v9, v8);
  v10 = v22;
  v22 = 0;
  if (!v10)
  {
LABEL_8:
    if (!v5)
      goto LABEL_22;
    goto LABEL_11;
  }
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_8;
  }
  WTF::StringImpl::destroy(v10, v8);
  if (!v5)
  {
LABEL_22:
    (*(void (**)(_QWORD, _QWORD))(a1 + 24))(0, *(_QWORD *)(a1 + 16));
    goto LABEL_25;
  }
LABEL_11:
  v11 = v3 + 80 * v5;
  while (1)
  {
    v12 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::begin((uint64_t *)(v3 + 40));
    v21[0] = v12;
    v21[1] = v13;
    v14 = *(_QWORD *)(v3 + 40);
    v15 = v14 ? (WTF *)(v14 + 32 * *(unsigned int *)(v14 - 4)) : 0;
    if (v15 != v12)
      break;
LABEL_17:
    v3 += 80;
    if (v3 == v11)
      goto LABEL_22;
  }
  while (!WebCore::operator==())
  {
    v21[0] = (WTF *)((char *)v21[0] + 32);
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::skipEmptyBuckets(v21);
    if (v21[0] == v15)
      goto LABEL_17;
  }
  if (*(_BYTE *)(v3 + 32))
    v16 = *(_QWORD *)(v3 + 16);
  else
    v16 = 0;
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(v16, *(_QWORD *)(a1 + 16));
LABEL_25:
  if (v24 != -1)
    ((void (*)(WTF **, _BYTE *))off_1E34DB448[v24])(v21, v23);
  return WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v17);
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearPrivateClickMeasurementsThroughWebsiteDataRemoval::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreResetQuota::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreResetStoragePersistedState::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearStorage::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreSetOriginQuotaRatioEnabled::$_0,void>::call(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  v1 = *(uint64_t (**)(_QWORD))(result + 16);
  if (v1)
    return v1(*(_QWORD *)(result + 8));
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearAppBoundSession::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreUpdateBundleIdentifierInNetworkProcess::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreClearBundleIdentifierInNetworkProcess::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WKWebsiteDataStoreGetAllStorageAccessEntries::$_0,void,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&>::call(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  const char *v9;
  WTF::String *v10;
  void *v11;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;
  WTF *v16;
  WTF::StringImpl *v17;

  API::Array::create(&v17);
  if (v17)
    v4 = (char *)*((_QWORD *)v17 + 1);
  else
    v4 = 0;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5)
  {
    v6 = *(WTF::StringImpl ***)a2;
    v7 = 8 * v5;
    do
    {
      v8 = *v6;
      if (*v6)
        *(_DWORD *)v8 += 2;
      v17 = v8;
      WTF::String::utf8();
      if (v16)
        v10 = (WTF *)((char *)v16 + 16);
      else
        v10 = 0;
      v11 = (void *)WKStringCreateWithUTF8CString(v10, v9);
      WKArrayAppendItem(v4, v11);
      if (v11)
        CFRelease(*(CFTypeRef *)(objc_msgSend(v11, "_apiObject") + 8));
      v13 = v16;
      v16 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
          WTF::fastFree(v13, v12);
        else
          --*(_DWORD *)v13;
      }
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)v14 -= 2;
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return (*(uint64_t (**)(_QWORD, char *))(a1 + 16))(*(_QWORD *)(a1 + 8), v4);
}

uint64_t WKFrameGetServerTrust(void *a1)
{
  return *(_QWORD *)(objc_msgSend(a1, "_apiObject") + 256);
}

WebKit *WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy(WebKit *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  WebKit *v15;
  unsigned __int8 **v17[2];

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(a1);
  *(_QWORD *)a1 = &off_1E34DC200;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)a1 + 16, a2);
  v10 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a2 + 416) = 0;
  *((_QWORD *)a1 + 54) = v10;
  v11 = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a2 + 424) = 0;
  *((_QWORD *)a1 + 56) = 0;
  *((_QWORD *)a1 + 57) = 0;
  *((_QWORD *)a1 + 55) = v11;
  v12 = *a4;
  *a4 = 0;
  v13 = *a5;
  *a5 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v14 = off_1E34DC7E8;
  v14[1] = a3;
  v14[2] = v12;
  v14[3] = v13;
  v15 = (WebKit *)API::Object::newObject(0x18uLL, 3);
  *(_QWORD *)v15 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v15);
  *(_QWORD *)v15 = &off_1E34DC228;
  *((_QWORD *)v15 + 2) = v14;
  *((_QWORD *)a1 + 58) = v15;
  v17[0] = 0;
  v17[1] = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v17);
  return a1;
}

uint64_t WebKit::AuthenticationChallengeProxy::proposedCredential(WebKit::AuthenticationChallengeProxy *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *((_QWORD *)this + 56);
  if (!result)
  {
    v3 = WebCore::AuthenticationChallengeBase::proposedCredential((WebKit::AuthenticationChallengeProxy *)((char *)this + 16));
    v4 = API::Object::newObject(0x30uLL, 7);
    result = WebKit::WebCredential::WebCredential(v4, v3);
    v5 = *((_QWORD *)this + 56);
    *((_QWORD *)this + 56) = result;
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(v5 + 8));
      return *((_QWORD *)this + 56);
    }
  }
  return result;
}

uint64_t WebKit::AuthenticationChallengeProxy::protectionSpace(WebKit::AuthenticationChallengeProxy *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *((_QWORD *)this + 57);
  if (!result)
  {
    v3 = WebCore::AuthenticationChallengeBase::protectionSpace((WebKit::AuthenticationChallengeProxy *)((char *)this + 16));
    v4 = API::Object::newObject(0x30uLL, 14);
    result = WebKit::WebProtectionSpace::WebProtectionSpace(v4, v3);
    v5 = *((_QWORD *)this + 57);
    *((_QWORD *)this + 57) = result;
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(v5 + 8));
      return *((_QWORD *)this + 57);
    }
  }
  return result;
}

uint64_t WebKit::WebCredential::WebCredential(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  const void *v6;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DC250;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 16);
  v6 = *(const void **)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v6;
  if (v6)
    CFRetain(v6);
  return a1;
}

void WebKit::WebCredential::~WebCredential(WebKit::WebCredential *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34DC250;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  WebKit::WebCredential::~WebCredential(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebProtectionSpace::WebProtectionSpace(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  const void *v7;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DC278;
  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_DWORD **)(a2 + 8);
  if (v5)
    *v5 += 2;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 35) = *(_DWORD *)(a2 + 19);
  *(_DWORD *)(a1 + 32) = v6;
  v7 = *(const void **)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v7;
  if (v7)
    CFRetain(v7);
  return a1;
}

void WebKit::UIRemoteObjectRegistry::backgroundActivity(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v7)
    v8 = v7 - 16;
  else
    v8 = 0;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v9 = *(_QWORD *)(v8 + 208) + 200;
  v10 = WTF::fastMalloc((WTF *)0x28);
  *a4 = WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v10, v9, a2, a3, 0, 0);
  if (v7)
    CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::UIRemoteObjectRegistry::~UIRemoteObjectRegistry(WebKit::UIRemoteObjectRegistry *this, void *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  WebKit::UIRemoteObjectRegistry *v5;

  v2 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v5 = this;
      WTF::fastFree((WTF *)v2, a2);
      this = v5;
    }
  }
  WebKit::RemoteObjectRegistry::~RemoteObjectRegistry(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::UIRemoteObjectRegistry::~UIRemoteObjectRegistry(this, a2);
  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::UIRemoteObjectRegistry::sendInvocation(WebKit::UIRemoteObjectRegistry *this, const WebKit::RemoteObjectInvocation *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  WebKit::WebPageProxy::launchInitialProcessIfNecessary((WebKit::WebProcessProxy **)v5);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 - 8));
  return WebKit::RemoteObjectRegistry::sendInvocation(this, a2);
}

uint64_t WebKit::UIRemoteObjectRegistry::messageSender(WebKit::UIRemoteObjectRegistry *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  return *(_QWORD *)(v2 + 208);
}

uint64_t WebKit::UIRemoteObjectRegistry::messageDestinationID(WebKit::UIRemoteObjectRegistry *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v1)
    v2 = v1 - 16;
  else
    v2 = 0;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 1896);
  if (v1)
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v3;
}

WTF::Lock *WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>@<X0>(WTF::NativePromiseBase *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WTF::fastMalloc((WTF *)0x78);
  v5 = WTF::NativePromise<void,void,0u>::NativePromise(v4, a1);
  *a2 = v5;
  return WTF::NativePromise<void,void,0u>::resolve<std::enable_if<true,void>>(v5, a1);
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>(uint64_t a1, uint64_t a2)
{
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  unsigned __int8 *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v7;
  uint64_t result;
  void *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 **v20;
  WTF::ThreadSafeWeakPtrControlBlock *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  int v44;

  v4 = (WTF::ThreadSafeWeakPtrControlBlock *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
  if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v4))
  {
    result = 98;
    __break(0xC471u);
    return result;
  }
  v5 = (unsigned __int8 *)(a1 + 16);
  if (__ldaxr((unsigned __int8 *)(a1 + 16)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](a1 + 16);
LABEL_6:
  v7 = (WTF::ThreadSafeWeakPtrControlBlock *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
  result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakRef(v7);
  if (!result)
    goto LABEL_58;
  v10 = (unsigned __int8 *)result;
  v11 = *(_DWORD *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v12;
  v13 = *(_QWORD *)a1;
  if (v12 > v11)
  {
    if (v13)
    {
      v14 = *(_DWORD *)(v13 - 4);
      if (!v14)
        goto LABEL_29;
      v15 = 0;
      v16 = v14 - 1;
      do
      {
        v17 = v16;
        v18 = (_QWORD *)(v13 + 16 * v16);
        if ((unint64_t)(*v18 + 1) >= 2)
        {
          v19 = v13 + 16 * v16;
          v21 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v19 + 8);
          v20 = (unsigned __int8 **)(v19 + 8);
          if (WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v21))
          {
            *v18 = -1;
            v22 = *v20;
            *v20 = 0;
            if (v22)
              WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v22, v9);
            ++v15;
          }
        }
        --v16;
      }
      while (v17);
      v13 = *(_QWORD *)a1;
      if (v15)
      {
        *(_DWORD *)(v13 - 16) += v15;
        v23 = *(_QWORD *)a1;
        if (*(_QWORD *)a1)
          v24 = *(_DWORD *)(v23 - 12);
        else
          v24 = 0;
        *(_DWORD *)(v23 - 12) = v24 - v15;
        v13 = *(_QWORD *)a1;
      }
      if (v13)
      {
        v25 = *(_DWORD *)(v13 - 4);
        if (v25 >= 9 && 6 * *(_DWORD *)(v13 - 12) < v25)
        {
          WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize((uint64_t *)a1);
          v13 = *(_QWORD *)a1;
          *(_DWORD *)(a1 + 8) = 0;
          if (!v13)
          {
            v27 = 0;
            goto LABEL_33;
          }
LABEL_30:
          v27 = *(_DWORD *)(v13 - 12);
          v28 = 0x7FFFFFFF;
          if (v27 >= 0x7FFFFFFF)
            goto LABEL_34;
          goto LABEL_33;
        }
LABEL_29:
        *(_DWORD *)(a1 + 8) = 0;
        goto LABEL_30;
      }
    }
    v13 = 0;
    v27 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_33:
    v28 = v27;
LABEL_34:
    *(_DWORD *)(a1 + 12) = 2 * v28;
  }
  if (v13
    || (WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::expand((uint64_t *)a1),
        (v13 = *(_QWORD *)a1) != 0))
  {
    v29 = *(_DWORD *)(v13 - 8);
  }
  else
  {
    v29 = 0;
  }
  v30 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v31 = 9 * ((v30 + ~(v30 << 13)) ^ ((v30 + ~(v30 << 13)) >> 8));
  v32 = (v31 ^ (v31 >> 15)) + ~((v31 ^ (v31 >> 15)) << 27);
  v33 = v29 & ((v32 >> 31) ^ v32);
  v34 = (_QWORD *)(v13 + 16 * v33);
  v35 = *v34;
  if (*v34)
  {
    v36 = 0;
    v37 = 1;
    do
    {
      if (v35 == a2)
      {
        result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v10, v9);
        goto LABEL_58;
      }
      if (v35 == -1)
        v36 = v34;
      v33 = (v33 + v37) & v29;
      v34 = (_QWORD *)(v13 + 16 * v33);
      v35 = *v34;
      ++v37;
    }
    while (*v34);
    if (v36)
    {
      *v36 = 0;
      v36[1] = 0;
      --*(_DWORD *)(*(_QWORD *)a1 - 16);
      v34 = v36;
    }
  }
  result = v34[1];
  *v34 = a2;
  v34[1] = v10;
  if (result)
    result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v9);
  v38 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v39 = *(_DWORD *)(v38 - 12) + 1;
  else
    v39 = 1;
  *(_DWORD *)(v38 - 12) = v39;
  v40 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
    v41 = *(_DWORD *)(v40 - 12);
  else
    v41 = 0;
  v42 = (*(_DWORD *)(v40 - 16) + v41);
  v43 = *(unsigned int *)(v40 - 4);
  if (v43 <= 0x400)
  {
    if (3 * v43 > 4 * v42)
      goto LABEL_58;
    goto LABEL_57;
  }
  if (v43 <= 2 * v42)
LABEL_57:
    result = WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::expand((uint64_t *)a1);
LABEL_58:
  v44 = __ldxr(v5);
  if (v44 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 16));
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t *a8)
{
  WebCore::RealtimeMediaSourceCenter *v16;
  int v17;
  int v18;
  uint64_t v19;
  WebCore::RealtimeMediaSourceCenter *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  int v32;
  void *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WebCore::RealtimeMediaSourceCenter *v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *result;
  uint64_t v47;
  uint64_t *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  void *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  int v61;
  int v62;
  WTF::StringImpl *v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unsigned __int8 *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  const WTF::StringImpl *v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  WebCore::RealtimeMediaSourceCenter *v79;
  WebCore::RealtimeMediaSourceCenter *v80;
  uint64_t v81;
  void *v82;
  WebCore::RealtimeMediaSource **v83;
  uint64_t v84;
  WebCore::RealtimeMediaSource *v85;
  NSObject *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  __int16 v89;
  WTF::StringImpl *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  WTF::StringImpl *v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;
  WTF::Lock *v104;
  const WTF::StringImpl *v105;
  WebCore::RealtimeMediaSource *v106;
  NSObject *v107;
  WTF::ThreadSafeWeakPtrControlBlock *v108;
  void *v109;
  WTF::ThreadSafeWeakPtrControlBlock *v110;
  unsigned __int8 *v111;
  WTF::StringImpl *v112;
  WTF::StringImpl *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 **v116;
  uint64_t v117;
  uint64_t v118;
  const WTF::MachSendRight *v119;
  WebKit::UserMediaCaptureManagerProxySourceProxy *v120;
  unsigned int *v121;
  unsigned int v122;
  unsigned int *v123;
  unsigned int v124;
  WebCore::MediaTrackConstraintSetMap *v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  void *v129;
  unsigned int v130;
  unsigned int v131;
  WTF::StringImpl *v132;
  NSObject *v133;
  uint64_t v134;
  void *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  NSObject *v140;
  int v141;
  uint64_t v142;
  int v143;
  int v144;
  _QWORD *v145;
  WebKit::UserMediaCaptureManagerProxySourceProxy *v146;
  uint64_t v147;
  unsigned __int8 **v148;
  WTF::StringImpl *v149;
  WTF::StringImpl *v150[2];
  __int16 v151;
  WTF::StringImpl *v152[2];
  __int128 v153;
  WTF::StringImpl *v154[2];
  WTF::StringImpl *v155[2];
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE v159[14];
  __int16 v160;
  uint8_t buf[8];
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v16 = (WebCore::RealtimeMediaSourceCenter *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a3 + 8));
  if ((v16 & 1) != 0)
  {
    v17 = *(unsigned __int8 *)(a5 + 960);
    v150[0] = 0;
    v150[1] = 0;
    v151 = 0;
    v18 = *(unsigned __int8 *)(a3 + 8);
    if ((v18 - 4) < 2)
    {
      v41 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v16);
      v42 = WebCore::RealtimeMediaSourceCenter::displayCaptureFactory(v41);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v42 + 16))(&v163, v42, a3, a4, 0, a7);
      *(_OWORD *)v150 = v163;
      v151 = v164;
      v43 = (WTF::StringImpl *)v163;
      if ((_QWORD)v163)
        goto LABEL_128;
      goto LABEL_91;
    }
    if (v18 != 3)
    {
      if (v18 != 1)
        goto LABEL_91;
      v143 = v17;
      if (v17)
        v19 = a5;
      else
        v19 = 0;
      v20 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v16);
      v21 = WebCore::RealtimeMediaSourceCenter::audioCaptureFactory(v20);
      (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v152, v21, a3, a4, v19, a7);
      if (!v152[0])
      {
        v62 = a6;
        v43 = 0;
        v63 = v152[1];
        v64 = v153;
        v152[0] = 0;
        v152[1] = 0;
        v17 = v143;
        goto LABEL_125;
      }
      v23 = (uint64_t *)(a1 + 72);
      v22 = *(_QWORD *)(a1 + 72);
      if (v22
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 72), 0), (v22 = *v23) != 0))
      {
        v24 = *(_DWORD *)(v22 - 8);
      }
      else
      {
        v24 = 0;
      }
      v25 = (~(a7 << 32) + a7) ^ ((unint64_t)(~(a7 << 32) + a7) >> 22);
      v26 = 9 * ((v25 + ~(v25 << 13)) ^ ((v25 + ~(v25 << 13)) >> 8));
      v27 = (v26 ^ (v26 >> 15)) + ~((v26 ^ (v26 >> 15)) << 27);
      v28 = v24 & ((v27 >> 31) ^ v27);
      v29 = (uint64_t *)(v22 + 48 * v28);
      v30 = *v29;
      if (*v29)
      {
        v31 = 0;
        v32 = 1;
        while (v30 != a7)
        {
          if (v30 == -1)
            v31 = v29;
          v28 = (v28 + v32) & v24;
          v29 = (uint64_t *)(v22 + 48 * v28);
          v30 = *v29;
          ++v32;
          if (!*v29)
          {
            if (v31)
            {
              *((_OWORD *)v31 + 1) = 0u;
              *((_OWORD *)v31 + 2) = 0u;
              *(_OWORD *)v31 = 0u;
              --*(_DWORD *)(*v23 - 16);
              v29 = v31;
            }
            goto LABEL_20;
          }
        }
LABEL_110:
        v104 = (WTF::Lock *)v29[1];
        v17 = v143;
        if (v104)
        {
          WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v163, v104, v29[2]);
          v106 = (WebCore::RealtimeMediaSource *)v163;
          if ((_QWORD)v163)
          {
            if ((WTF::equal(*(WTF **)(v163 + 176), *(const WTF::StringImpl **)a3, v105) & 1) == 0
              && !*((_BYTE *)v106 + 294))
            {
              v107 = qword_1ECE71B18;
              if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v107, OS_LOG_TYPE_ERROR, "Ending microphone source as new source is using a different device.", buf, 2u);
              }
              WebCore::RealtimeMediaSource::end(v106, 0);
            }
            (*(void (**)(WebCore::RealtimeMediaSource *))(*(_QWORD *)v106 + 144))(v106);
          }
        }
        v43 = v152[0];
        v152[0] = 0;
        v108 = (WTF::ThreadSafeWeakPtrControlBlock *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v43
                                                                                                  + 152))(v43);
        v110 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v108);
        v111 = (unsigned __int8 *)v29[1];
        v29[1] = (uint64_t)v110;
        if (v111)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v111, v109);
        v29[2] = (uint64_t)v43;
        v112 = v152[1];
        v152[1] = 0;
        v62 = a6;
        if (v112)
        {
          if (*(_DWORD *)v112 != 2)
          {
            v63 = 0;
            v64 = 0;
            *(_DWORD *)v112 -= 2;
            goto LABEL_125;
          }
          WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v109);
        }
        v63 = 0;
        v64 = 0;
LABEL_125:
        v113 = v152[0];
        v152[0] = 0;
        if (v113)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v113 + 144))(v113);
        v150[0] = v43;
        v150[1] = v63;
        v151 = v64;
        a6 = v62;
        if (v43)
          goto LABEL_128;
        goto LABEL_91;
      }
LABEL_20:
      *v29 = a7;
      *(_QWORD *)&v165 = 0;
      v163 = 0u;
      v164 = 0u;
      WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>((uint64_t)(v29 + 1), (unsigned __int8 *)&v163);
      if ((_QWORD)v164)
        WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v164, v33);
      v34 = (unsigned __int8 *)v163;
      *(_QWORD *)&v163 = 0;
      if (v34)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v34, v33);
      v35 = *v23;
      if (*v23)
        v36 = *(_DWORD *)(v35 - 12) + 1;
      else
        v36 = 1;
      *(_DWORD *)(v35 - 12) = v36;
      v100 = *v23;
      if (*v23)
        v101 = *(_DWORD *)(v100 - 12);
      else
        v101 = 0;
      v102 = (*(_DWORD *)(v100 - 16) + v101);
      v103 = *(unsigned int *)(v100 - 4);
      if (v103 > 0x400)
      {
        if (v103 > 2 * v102)
          goto LABEL_110;
      }
      else if (3 * v103 > 4 * v102)
      {
        goto LABEL_110;
      }
      v29 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 72), v29);
      goto LABEL_110;
    }
    v144 = v17;
    v48 = (uint64_t *)(a1 + 72);
    v47 = *(_QWORD *)(a1 + 72);
    v142 = a2;
    if (v47
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 72), 0), (v47 = *v48) != 0))
    {
      v49 = *(_DWORD *)(v47 - 8);
    }
    else
    {
      v49 = 0;
    }
    v50 = (~(a7 << 32) + a7) ^ ((unint64_t)(~(a7 << 32) + a7) >> 22);
    v51 = 9 * ((v50 + ~(v50 << 13)) ^ ((v50 + ~(v50 << 13)) >> 8));
    v52 = (v51 ^ (v51 >> 15)) + ~((v51 ^ (v51 >> 15)) << 27);
    v53 = v49 & ((v52 >> 31) ^ v52);
    v54 = (uint64_t *)(v47 + 48 * v53);
    v55 = *v54;
    v141 = a6;
    if (*v54)
    {
      v56 = 0;
      v57 = 1;
      while (v55 != a7)
      {
        if (v55 == -1)
          v56 = v54;
        v53 = (v53 + v57) & v49;
        v54 = (uint64_t *)(v47 + 48 * v53);
        v55 = *v54;
        ++v57;
        if (!*v54)
        {
          if (v56)
          {
            *((_OWORD *)v56 + 1) = 0u;
            *((_OWORD *)v56 + 2) = 0u;
            *(_OWORD *)v56 = 0u;
            --*(_DWORD *)(*v48 - 16);
            v54 = v56;
          }
          goto LABEL_55;
        }
      }
LABEL_69:
      v69 = (unsigned __int8 *)(v54 + 3);
      WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::values((uint64_t)v152, (unsigned __int8 *)v54 + 24);
      v70 = v152[0];
      v152[0] = 0;
      *(_QWORD *)&v163 = v70;
      LODWORD(v70) = v152[1];
      v71 = HIDWORD(v152[1]);
      v152[1] = 0;
      *((_QWORD *)&v163 + 1) = __PAIR64__(v71, v70);
      *(_QWORD *)&v164 = 0;
      WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v152, v72);
      *(_QWORD *)buf = 0;
      v152[0] = 0;
      v162 = 0;
      v152[1] = 0;
      *(_QWORD *)&v153 = 0;
      WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v73);
      if ((_DWORD)v71)
      {
        v76 = 0;
        while (1)
        {
          if (v76 >= v71)
          {
            __break(0xC471u);
            JUMPOUT(0x197424774);
          }
          v77 = *(_QWORD *)(v163 + 8 * v76);
          if (WTF::equal(*(WTF **)(v77 + 176), *(const WTF::StringImpl **)a3, v75))
          {
            if (!*(_BYTE *)(v77 + 294))
              break;
          }
          v71 = HIDWORD(v163);
          if ((unint64_t)v164 >= HIDWORD(v163))
          {
            __break(0xC471u);
            JUMPOUT(0x197424794);
          }
          v76 = v164 + 1;
          *(_QWORD *)&v164 = v76;
          if (v76 == HIDWORD(v163))
            goto LABEL_76;
        }
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)v77 + 48))(buf, v77);
        WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>((uint64_t)v69, *(uint64_t *)buf);
        v43 = *(WTF::StringImpl **)buf;
        WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v152, v91);
        WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163, v92);
        v89 = 0;
        v90 = 0;
        a2 = v142;
        v17 = v144;
        a6 = v141;
      }
      else
      {
LABEL_76:
        WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v152, v74);
        v79 = (WebCore::RealtimeMediaSourceCenter *)WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163, v78);
        v80 = (WebCore::RealtimeMediaSourceCenter *)WebCore::RealtimeMediaSourceCenter::singleton(v79);
        v81 = WebCore::RealtimeMediaSourceCenter::videoCaptureFactory(v80);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v81 + 16))(&v163, v81, a3, a4, 0, a7);
        if ((_QWORD)v163)
        {
          WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::values((uint64_t)v152, v69);
          if (HIDWORD(v152[1]))
          {
            v83 = (WebCore::RealtimeMediaSource **)v152[0];
            v84 = 8 * HIDWORD(v152[1]);
            do
            {
              v85 = *v83;
              v86 = qword_1ECE71B18;
              if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)buf = 0;
                _os_log_error_impl(&dword_196BCC000, v86, OS_LOG_TYPE_ERROR, "Ending camera source as new source is using a different device.", buf, 2u);
              }
              WebCore::RealtimeMediaSource::end(v85, 0);
              ++v83;
              v84 -= 8;
            }
            while (v84);
          }
          WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v152, v82);
          v43 = (WTF::StringImpl *)v163;
          *(_QWORD *)&v163 = 0;
          (*(void (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)v43 + 232))(v43, a1 + 32);
          WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>((uint64_t)v69, (uint64_t)v43);
          v88 = (WTF::StringImpl *)*((_QWORD *)&v163 + 1);
          *((_QWORD *)&v163 + 1) = 0;
          a6 = v141;
          if (v88)
          {
            a2 = v142;
            v17 = v144;
            if (*(_DWORD *)v88 == 2)
            {
              WTF::StringImpl::destroy(v88, v87);
              v89 = 0;
              v90 = 0;
            }
            else
            {
              v89 = 0;
              v90 = 0;
              *(_DWORD *)v88 -= 2;
            }
          }
          else
          {
            v89 = 0;
            v90 = 0;
            a2 = v142;
            v17 = v144;
          }
        }
        else
        {
          v43 = 0;
          v90 = (WTF::StringImpl *)*((_QWORD *)&v163 + 1);
          v89 = v164;
          v163 = 0uLL;
          a2 = v142;
          v17 = v144;
          a6 = v141;
        }
        v93 = v163;
        *(_QWORD *)&v163 = 0;
        if (v93)
          (*(void (**)(uint64_t))(*(_QWORD *)v93 + 144))(v93);
      }
      v150[0] = v43;
      v150[1] = v90;
      v151 = v89;
      if (v43)
      {
LABEL_128:
        v149 = v43;
        v150[0] = 0;
        v114 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
        v115 = WTF::cryptographicallyRandomNumber<unsigned long long>();
        (*(void (**)(WTF::StringImpl *, uint64_t, uint64_t))(*(_QWORD *)v43 + 272))(v43, v114, v115);
        v116 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v148, v116);
        v117 = 0;
        if (a6)
        {
          v118 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
          v117 = v118;
          if (v118)
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v118 + 16));
        }
        v147 = v117;
        v119 = (const WTF::MachSendRight *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
        WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)&v163, v119);
        v120 = (WebKit::UserMediaCaptureManagerProxySourceProxy *)WTF::fastMalloc((WTF *)0x558);
        v146 = (WebKit::UserMediaCaptureManagerProxySourceProxy *)WebKit::UserMediaCaptureManagerProxySourceProxy::UserMediaCaptureManagerProxySourceProxy((uint64_t)v120, a2, (uint64_t *)&v148, (const WTF::MachSendRight *)&v163, (uint64_t *)&v149, &v147);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v163);
        WebKit::UserMediaCaptureManagerProxySourceProxy::observeMedia(v120);
        WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
        v121 = *(unsigned int **)(a1 + 8);
        if (v121)
        {
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 + 1, v121));
        }
        if (v17 && (v123 = (unsigned int *)v146, *(_BYTE *)(*((_QWORD *)v146 + 8) + 112)))
        {
          if ((WebCore::MediaTrackConstraintSetMap::isValid((WebCore::MediaTrackConstraintSetMap *)a5) & 1) != 0)
          {
            v124 = *(_DWORD *)(a5 + 956);
            if (!v124)
            {
LABEL_140:
              v146 = 0;
              v127 = *a8;
              *a8 = 0;
              v128 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
              *v128 = &off_1E34DC810;
              v128[1] = v123;
              v128[2] = a2;
              v128[3] = v127;
              v128[4] = v121;
              v128[5] = a1;
              v145 = v128;
              WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(v123, a5, (uint64_t *)&v145);
              if (v145)
                (*(void (**)(_QWORD *))(*v145 + 8))(v145);
LABEL_147:
              if (v146)
                (*(void (**)(WebKit::UserMediaCaptureManagerProxySourceProxy *))(*(_QWORD *)v146 + 8))(v146);
              if (v147)
                WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v147 + 16), v129);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v148);
              if (v149)
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v149 + 144))(v149);
LABEL_153:
              v132 = v150[1];
              v150[1] = 0;
              if (v132)
              {
                if (*(_DWORD *)v132 == 2)
                  WTF::StringImpl::destroy(v132, v96);
                else
                  *(_DWORD *)v132 -= 2;
              }
              result = v150[0];
              v150[0] = 0;
              if (result)
                return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 144))(result);
              return result;
            }
            v125 = *(WebCore::MediaTrackConstraintSetMap **)(a5 + 944);
            v126 = 944 * v124;
            while ((WebCore::MediaTrackConstraintSetMap::isValid(v125) & 1) != 0)
            {
              v125 = (WebCore::MediaTrackConstraintSetMap *)((char *)v125 + 944);
              v126 -= 944;
              if (!v126)
                goto LABEL_140;
            }
            v133 = off_1ECE71C40;
            if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
            {
              LODWORD(v163) = 136315138;
              *(_QWORD *)((char *)&v163 + 4) = "void WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDev"
                                               "iceWithConstraints(RealtimeMediaSourceIdentifier, const CaptureDevice &, "
                                               "WebCore::MediaDeviceHashSalts &&, MediaConstraints &&, BOOL, PageIdentifi"
                                               "er, CreateSourceCallback &&)";
              _os_log_fault_impl(&dword_196BCC000, v133, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 572: Invalid message dispatched %s", (uint8_t *)&v163, 0xCu);
            }
          }
          else
          {
            v140 = off_1ECE71C40;
            if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
            {
              LODWORD(v163) = 136315138;
              *(_QWORD *)((char *)&v163 + 4) = "void WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDev"
                                               "iceWithConstraints(RealtimeMediaSourceIdentifier, const CaptureDevice &, "
                                               "WebCore::MediaDeviceHashSalts &&, MediaConstraints &&, BOOL, PageIdentifi"
                                               "er, CreateSourceCallback &&)";
              _os_log_fault_impl(&dword_196BCC000, v140, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 570: Invalid message dispatched %s", (uint8_t *)&v163, 0xCu);
            }
          }
          *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24)) + 98) = 1;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_QWORD *)buf = v163;
          LOWORD(v162) = 4;
          v156 = 4;
          *(_OWORD *)v154 = 0u;
          *(_OWORD *)v155 = 0u;
          *(_OWORD *)v152 = 0u;
          v153 = 0u;
          memset(v159, 0, sizeof(v159));
          v160 = 0;
          v157 = 0x3FF0000000000000;
          v158 = 0;
          v173 = 0u;
          v174 = 0u;
          v171 = 0u;
          v172 = 0u;
          v169 = 0u;
          v170 = 0u;
          v167 = 0u;
          v168 = 0u;
          v165 = 0u;
          v166 = 0u;
          v163 = 0u;
          v164 = 0u;
          v134 = *a8;
          *a8 = 0;
          (*(void (**)(uint64_t, uint8_t *, WTF::StringImpl **, __int128 *))(*(_QWORD *)v134 + 16))(v134, buf, v152, &v163);
          (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
          WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v163, v135);
          v136 = v155[1];
          v155[1] = 0;
          if (v136)
          {
            if (*(_DWORD *)v136 == 2)
              WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v129);
            else
              *(_DWORD *)v136 -= 2;
          }
          v137 = v155[0];
          v155[0] = 0;
          if (v137)
          {
            if (*(_DWORD *)v137 == 2)
              WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v129);
            else
              *(_DWORD *)v137 -= 2;
          }
          v138 = v154[1];
          v154[1] = 0;
          if (v138)
          {
            if (*(_DWORD *)v138 == 2)
              WTF::StringImpl::destroy(v138, (WTF::StringImpl *)v129);
            else
              *(_DWORD *)v138 -= 2;
          }
          v139 = *(WTF::StringImpl **)buf;
          *(_QWORD *)buf = 0;
          if (v139)
          {
            if (*(_DWORD *)v139 == 2)
              WTF::StringImpl::destroy(v139, (WTF::StringImpl *)v129);
            else
              *(_DWORD *)v139 -= 2;
          }
        }
        else
        {
          WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_0::operator()((uint64_t)v121, a1, &v146, a2, a8);
        }
        if (v121)
        {
          do
          {
            v130 = __ldaxr(v121);
            v131 = v130 - 1;
          }
          while (__stlxr(v131, v121));
          if (!v131)
          {
            atomic_store(1u, v121);
            WTF::fastFree((WTF *)v121, v129);
          }
        }
        goto LABEL_147;
      }
LABEL_91:
      v156 = 4;
      *(_OWORD *)v154 = 0u;
      *(_OWORD *)v155 = 0u;
      *(_OWORD *)v152 = 0u;
      v153 = 0u;
      memset(v159, 0, sizeof(v159));
      v160 = 0;
      v157 = 0x3FF0000000000000;
      v158 = 0;
      v173 = 0u;
      v174 = 0u;
      v171 = 0u;
      v172 = 0u;
      v169 = 0u;
      v170 = 0u;
      v167 = 0u;
      v168 = 0u;
      v165 = 0u;
      v166 = 0u;
      v163 = 0u;
      v164 = 0u;
      v94 = *a8;
      *a8 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int128 *))(*(_QWORD *)v94 + 16))(v94, &v150[1], v152, &v163);
      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
      WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v163, v95);
      v97 = v155[1];
      v155[1] = 0;
      if (v97)
      {
        if (*(_DWORD *)v97 == 2)
          WTF::StringImpl::destroy(v97, v96);
        else
          *(_DWORD *)v97 -= 2;
      }
      v98 = v155[0];
      v155[0] = 0;
      if (v98)
      {
        if (*(_DWORD *)v98 == 2)
          WTF::StringImpl::destroy(v98, v96);
        else
          *(_DWORD *)v98 -= 2;
      }
      v99 = v154[1];
      v154[1] = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, v96);
        else
          *(_DWORD *)v99 -= 2;
      }
      goto LABEL_153;
    }
LABEL_55:
    *v54 = a7;
    *(_QWORD *)&v165 = 0;
    v163 = 0u;
    v164 = 0u;
    WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>((uint64_t)(v54 + 1), (unsigned __int8 *)&v163);
    if ((_QWORD)v164)
      WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v164, v58);
    v59 = (unsigned __int8 *)v163;
    *(_QWORD *)&v163 = 0;
    if (v59)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v59, v58);
    v60 = *v48;
    if (*v48)
      v61 = *(_DWORD *)(v60 - 12) + 1;
    else
      v61 = 1;
    *(_DWORD *)(v60 - 12) = v61;
    v65 = *v48;
    if (*v48)
      v66 = *(_DWORD *)(v65 - 12);
    else
      v66 = 0;
    v67 = (*(_DWORD *)(v65 - 16) + v66);
    v68 = *(unsigned int *)(v65 - 4);
    if (v68 > 0x400)
    {
      if (v68 > 2 * v67)
        goto LABEL_69;
    }
    else if (3 * v68 > 4 * v67)
    {
      goto LABEL_69;
    }
    v54 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 72), v54);
    goto LABEL_69;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOWORD(v150[1]) = 6;
  v156 = 4;
  *(_OWORD *)v154 = 0u;
  *(_OWORD *)v155 = 0u;
  *(_OWORD *)v152 = 0u;
  v153 = 0u;
  memset(v159, 0, sizeof(v159));
  v160 = 0;
  v157 = 0x3FF0000000000000;
  v158 = 0;
  v173 = 0u;
  v174 = 0u;
  v171 = 0u;
  v172 = 0u;
  v169 = 0u;
  v170 = 0u;
  v167 = 0u;
  v168 = 0u;
  v165 = 0u;
  v166 = 0u;
  v163 = 0u;
  v164 = 0u;
  v37 = *a8;
  *a8 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **, WTF::StringImpl **, __int128 *))(*(_QWORD *)v37 + 16))(v37, v150, v152, &v163);
  (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)&v163, v38);
  v40 = v155[1];
  v155[1] = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  v44 = v155[0];
  v155[0] = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v39);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = v154[1];
  v154[1] = 0;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v39);
    else
      *(_DWORD *)v45 -= 2;
  }
  result = v150[0];
  v150[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::observeMedia(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  if (!*(_BYTE *)(*((_QWORD *)this + 8) + 112))
    return WebCore::RealtimeMediaSource::addAudioSampleObserver();
  if (!*((_QWORD *)this + 46) && *((double *)this + 47) == 0.0)
    return WebCore::RealtimeMediaSource::addVideoFrameObserver();
  return WebCore::RealtimeMediaSource::addVideoFrameObserver();
}

uint64_t *WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_0::operator()(uint64_t a1, uint64_t a2, WebKit::UserMediaCaptureManagerProxySourceProxy **a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t *result;
  WTF::StringImpl *v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[22];
  __int16 v38;
  uint64_t *v39;
  __int16 v40;
  uint64_t v41;

  v41 = a4;
  if (a1 && *(_QWORD *)(a1 + 8))
  {
    v20[0] = 0;
    v20[1] = 0;
    v8 = WebKit::UserMediaCaptureManagerProxySourceProxy::settings(*a3);
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)*a3 + 8) + 120))(*((_QWORD *)*a3 + 8));
    v10 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v20, v8, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v12 = v20[0];
    v20[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>((uint64_t *)v20, (uint64_t *)(a2 + 16), &v41, (uint64_t *)a3);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v40 = 8;
    v35 = 4;
    v33 = 0u;
    v34 = 0u;
    memset(v32, 0, sizeof(v32));
    v38 = 0;
    v36 = 0x3FF0000000000000;
    memset(v37, 0, sizeof(v37));
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)v20 = 0u;
    v21 = 0u;
    v13 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t **, _OWORD *, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, &v39, v32, v20);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v20, v14);
    v16 = (WTF::StringImpl *)*((_QWORD *)&v34 + 1);
    *((_QWORD *)&v34 + 1) = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = (WTF::StringImpl *)v34;
    *(_QWORD *)&v34 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v15);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = (WTF::StringImpl *)*((_QWORD *)&v33 + 1);
    *((_QWORD *)&v33 + 1) = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    result = v39;
    v39 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(unsigned int *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  WTF *v24;
  _BYTE v25[560];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  if (a1)
  {
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a1 + 2, (uint64_t)a1);
    v6 = (unsigned int *)*((_QWORD *)a1 + 1);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
    v6 = 0;
  }
  v24 = (WTF *)v6;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)v25, a2);
  v8 = *(_QWORD *)(a2 + 944);
  *(_QWORD *)(a2 + 944) = 0;
  v30 = v8;
  v9 = *(_QWORD *)(a2 + 952);
  *(_QWORD *)(a2 + 952) = 0;
  v31 = v9;
  v32 = *(_BYTE *)(a2 + 960);
  v10 = *a3;
  *a3 = 0;
  v33 = v10;
  v11 = WTF::fastMalloc((WTF *)0x3E8);
  *(_QWORD *)v11 = off_1E34DC4A0;
  *(_QWORD *)(v11 + 8) = a1;
  *(_QWORD *)(v11 + 16) = v24;
  WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v11 + 24, (uint64_t)v25);
  *(_QWORD *)(v11 + 976) = 0;
  v12 = v30;
  v30 = 0;
  *(_QWORD *)(v11 + 968) = v12;
  v13 = v31;
  v31 = 0;
  *(_QWORD *)(v11 + 976) = v13;
  *(_BYTE *)(v11 + 984) = v32;
  v14 = v33;
  v33 = 0;
  *(_QWORD *)(v11 + 992) = v14;
  v34 = v11;
  WebKit::UserMediaCaptureManagerProxySourceProxy::queueAndProcessSerialAction((WTF::RunLoop *)a1, &v34);
  v16 = v34;
  v34 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v33;
  v33 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v15);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v18);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v19);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v20);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v26, v21);
  return 0;
}

void WebKit::UserMediaCaptureManagerProxy::startProducingData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::RealtimeMediaSourceCenter *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12[16];
  uint8_t buf[8];
  uint64_t v14;

  v14 = a2;
  v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v14);
  if (v5)
  {
    v6 = v5;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24)) & 1) != 0)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
      v7 = (WebCore::RealtimeMediaSourceCenter *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24)
                                                                                            + 80))(*(_QWORD *)(a1 + 24), a3);
      if ((v7 & 1) != 0
        || *(_QWORD *)(WebCore::RealtimeMediaSourceCenter::singleton(v7) + 88)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 64) + 208))(*(_QWORD *)(v6 + 64)) != 3
        || !WTF::processHasEntitlement())
      {
        v10 = *(_QWORD *)(a1 + 24);
        v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 64) + 208))(*(_QWORD *)(v6 + 64));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v11);
        *(_BYTE *)(v6 + 240) = 1;
        *(_BYTE *)(v6 + 168) = 0;
        WebCore::RealtimeMediaSource::start(*(WebCore::RealtimeMediaSource **)(v6 + 64));
      }
      else
      {
        v8 = qword_1ECE71B18;
        if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v12 = 0;
          _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, "Unable to set media environment, failing capture.", v12, 2u);
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 64) + 240))(*(_QWORD *)(v6 + 64));
      }
    }
    else
    {
      v9 = qword_1ECE71B18;
      if (os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_196BCC000, v9, OS_LOG_TYPE_ERROR, "Unable to set capture attribution, failing capture.", buf, 2u);
      }
    }
  }
}

uint64_t WebKit::UserMediaCaptureManagerProxy::stopProducingData(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v3);
  if (result)
  {
    *(_BYTE *)(result + 168) = 1;
    return WebCore::RealtimeMediaSource::stop(*(WebCore::RealtimeMediaSource **)(result + 64));
  }
  return result;
}

uint64_t *WebKit::UserMediaCaptureManagerProxy::removeSource(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = (uint64_t *)(a1 + 16);
  result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v7);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v6 = 0;
  }
  if (v6 != result)
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(v3, result);
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::applyConstraints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::MediaTrackConstraintSetMap *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *result;
  uint64_t v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  const char *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _BYTE buf[12];
  WTF::StringImpl **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v21 = a2;
  v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v21);
  if (v5)
  {
    v6 = (unsigned int *)v5;
    if ((WebCore::MediaTrackConstraintSetMap::isValid((WebCore::MediaTrackConstraintSetMap *)a3) & 1) == 0)
    {
      v17 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        goto LABEL_17;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::UserMediaCaptureManagerProxy::applyConstraints(RealtimeMediaSourceIdentifier, We"
                           "bCore::MediaConstraints &&)";
      v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp "
            "638: Invalid message dispatched %s";
LABEL_19:
      _os_log_fault_impl(&dword_196BCC000, v17, OS_LOG_TYPE_FAULT, v18, buf, 0xCu);
LABEL_17:
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
      *((_BYTE *)result + 98) = 1;
      return result;
    }
    v7 = *(_DWORD *)(a3 + 956);
    if (v7)
    {
      v8 = *(WebCore::MediaTrackConstraintSetMap **)(a3 + 944);
      v9 = 944 * v7;
      while ((WebCore::MediaTrackConstraintSetMap::isValid(v8) & 1) != 0)
      {
        v8 = (WebCore::MediaTrackConstraintSetMap *)((char *)v8 + 944);
        v9 -= 944;
        if (!v9)
          goto LABEL_7;
      }
      v17 = off_1ECE71C40;
      if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
        goto LABEL_17;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "void WebKit::UserMediaCaptureManagerProxy::applyConstraints(RealtimeMediaSourceIdentifier, We"
                           "bCore::MediaConstraints &&)";
      v18 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp "
            "640: Invalid message dispatched %s";
      goto LABEL_19;
    }
LABEL_7:
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
    v10 = *(unsigned int **)(a1 + 8);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v12 = v21;
    v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v13 = &off_1E34DC838;
    *((_QWORD *)v13 + 1) = a1;
    *((_QWORD *)v13 + 2) = v10;
    *((_QWORD *)v13 + 3) = v12;
    *((_QWORD *)v13 + 4) = v6;
    v19 = v13;
    WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(v6, a3, (uint64_t *)&v19);
    result = v19;
    if (v19)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
  }
  else
  {
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_QWORD *)buf = &v21;
    buf[8] = 0;
    v23 = &v20;
    IPC::Connection::send<Messages::UserMediaCaptureManager::ApplyConstraintsFailed>(v15, (uint64_t)buf);
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

char *IPC::Connection::send<Messages::UserMediaCaptureManager::ApplyConstraintsFailed>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  char *result;
  WTF *v14;
  void *v15;
  unint64_t v16;
  size_t v17;
  void *v18;
  IPC::Encoder *v19;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1475;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v19 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, *(uint64_t **)a2);
  v5 = *(_BYTE *)(a2 + 8);
  v6 = *(_QWORD *)(v4 + 544);
  v7 = v6 + 1;
  v8 = *(_QWORD *)(v4 + 552);
  if (v8 < v6 + 1)
  {
    v16 = (2 * v8 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v17 = v16;
      v16 *= 2;
    }
    while (v17 < v7);
    result = (char *)mmap(0, v17, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v9 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v18 = *(void **)(v4 + 528);
    if (v18 != (void *)(v4 + 16))
      munmap(v18, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v9;
    *(_QWORD *)(v4 + 552) = v17;
    v10 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v9 = *(char **)(v4 + 528);
    v10 = *(_QWORD *)(v4 + 544);
  }
  bzero(&v9[v10], v6 - v10);
  *(_QWORD *)(v4 + 544) = v7;
  v11 = (_BYTE *)(*(_QWORD *)(v4 + 528) + v6);
  *(_QWORD *)(v4 + 536) = v11 + 1;
  *v11 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)(a2 + 16));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v19, 0, 0);
  result = (char *)v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    return (char *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::clone(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  void *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 **v30;
  uint64_t v31;
  uint64_t v32;
  const WTF::MachSendRight *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  void *v41;
  NSObject *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t buf[16];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v48 = a3;
  v49 = a2;
  v7 = (uint64_t *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  if ((WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, a2) & 1) == 0)
  {
    v42 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
LABEL_51:
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
      *(_BYTE *)(result + 98) = 1;
      return result;
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::UserMediaCaptureManagerProxy::clone(RealtimeMediaSourceIdentifier, RealtimeMediaSo"
                         "urceIdentifier, WebCore::PageIdentifier)";
    v43 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 65"
          "8: Invalid message dispatched %s";
LABEL_53:
    _os_log_fault_impl(&dword_196BCC000, v42, OS_LOG_TYPE_FAULT, v43, buf, 0xCu);
    goto LABEL_51;
  }
  if (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, a3))
  {
    v42 = off_1ECE71C40;
    if (!os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
      goto LABEL_51;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "void WebKit::UserMediaCaptureManagerProxy::clone(RealtimeMediaSourceIdentifier, RealtimeMediaSo"
                         "urceIdentifier, WebCore::PageIdentifier)";
    v43 = "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Cocoa/UserMediaCaptureManagerProxy.cpp 65"
          "9: Invalid message dispatched %s";
    goto LABEL_53;
  }
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v7, &v49);
  if (!result)
    return result;
  v10 = result;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(result + 64) + 48))(&v47);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 208))(v47) == 3)
  {
    v12 = (uint64_t *)(a1 + 72);
    v11 = *(_QWORD *)(a1 + 72);
    if (v11
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 72), 0), (v11 = *v12) != 0))
    {
      v13 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (~(a4 << 32) + a4) ^ ((unint64_t)(~(a4 << 32) + a4) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = (uint64_t *)(v11 + 48 * v17);
    v19 = *v18;
    if (*v18)
    {
      v20 = 0;
      v21 = 1;
      while (v19 != a4)
      {
        if (v19 == -1)
          v20 = v18;
        v17 = (v17 + v21) & v13;
        v18 = (uint64_t *)(v11 + 48 * v17);
        v19 = *v18;
        ++v21;
        if (!*v18)
        {
          if (v20)
          {
            *((_OWORD *)v20 + 1) = 0u;
            *((_OWORD *)v20 + 2) = 0u;
            *(_OWORD *)v20 = 0u;
            --*(_DWORD *)(*v12 - 16);
            v18 = v20;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_29;
    }
LABEL_16:
    *v18 = a4;
    v52 = 0;
    *(_OWORD *)buf = 0u;
    v51 = 0u;
    WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>((uint64_t)(v18 + 1), buf);
    if ((_QWORD)v51)
      WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v51, v22);
    v23 = *(unsigned __int8 **)buf;
    *(_QWORD *)buf = 0;
    if (v23)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v23, v22);
    v24 = *v12;
    if (*v12)
      v25 = *(_DWORD *)(v24 - 12) + 1;
    else
      v25 = 1;
    *(_DWORD *)(v24 - 12) = v25;
    v26 = *v12;
    if (*v12)
      v27 = *(_DWORD *)(v26 - 12);
    else
      v27 = 0;
    v28 = (*(_DWORD *)(v26 - 16) + v27);
    v29 = *(unsigned int *)(v26 - 4);
    if (v29 > 0x400)
    {
      if (v29 > 2 * v28)
        goto LABEL_29;
    }
    else if (3 * v29 > 4 * v28)
    {
LABEL_29:
      WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::add<WebCore::RealtimeMediaSource,(void *)0>((uint64_t)(v18 + 3), v47);
      goto LABEL_30;
    }
    v18 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 72), v18);
    goto LABEL_29;
  }
LABEL_30:
  v30 = (unsigned __int8 **)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, v30);
  v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24));
  v32 = v31;
  if (v31)
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(v31 + 16));
  v45 = v32;
  v33 = (const WTF::MachSendRight *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)buf, v33);
  v34 = WTF::fastMalloc((WTF *)0x558);
  v44 = WebKit::UserMediaCaptureManagerProxySourceProxy::UserMediaCaptureManagerProxySourceProxy(v34, v48, (uint64_t *)&v46, (const WTF::MachSendRight *)buf, &v47, &v45);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
  v35 = (WTF::StringImpl *)(v10 + 256);
  v36 = (_OWORD *)(v34 + 256);
  if (*(unsigned __int8 *)(v34 + 360) == *(unsigned __int8 *)(v10 + 360))
  {
    if (*(_BYTE *)(v34 + 360))
    {
      v37 = *(_OWORD *)v35;
      v38 = *(_OWORD *)(v10 + 272);
      *(_BYTE *)(v34 + 288) = *(_BYTE *)(v10 + 288);
      *v36 = v37;
      *(_OWORD *)(v34 + 272) = v38;
      WTF::String::operator=((WTF::StringImpl **)(v34 + 296), (WTF::StringImpl *)(v10 + 296));
      WTF::String::operator=((WTF::StringImpl **)(v34 + 304), (WTF::StringImpl *)(v10 + 304));
      WTF::String::operator=((WTF::StringImpl **)(v34 + 312), (WTF::StringImpl *)(v10 + 312));
      v39 = *(_QWORD *)(v10 + 350);
      v40 = *(_OWORD *)(v10 + 336);
      *(_OWORD *)(v34 + 320) = *(_OWORD *)(v10 + 320);
      *(_OWORD *)(v34 + 336) = v40;
      *(_QWORD *)(v34 + 350) = v39;
    }
  }
  else if (*(_BYTE *)(v34 + 360))
  {
    std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::reset[abi:sn180100]((uint64_t)v36, v35);
  }
  else
  {
    std::construct_at[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceSettings*>((uint64_t)v36, (__int128 *)v35);
    *(_BYTE *)(v34 + 360) = 1;
  }
  *(_QWORD *)(v34 + 368) = *(_QWORD *)(v10 + 368);
  *(_QWORD *)(v34 + 376) = *(_QWORD *)(v10 + 376);
  WebKit::UserMediaCaptureManagerProxySourceProxy::observeMedia((WebKit::UserMediaCaptureManagerProxySourceProxy *)v34);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>((uint64_t *)buf, v7, &v48, &v44);
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  if (v45)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v45 + 16), v41);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v46);
  result = v47;
  v47 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::add<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a3;
  v12 = *a3 + ~(*a3 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v23 = 0;
        else
          v23 = *(unsigned int *)(v8 - 4);
        v24 = 0;
        v25 = v8 + 16 * v23;
        goto LABEL_28;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      v11 = *a3;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a4;
  *a4 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v26 = *a2;
  if (*a2)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 <= 2 * v28)
    {
LABEL_25:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v16);
      v16 = result;
      v26 = *a2;
      if (*a2)
        v29 = *(unsigned int *)(v26 - 4);
      else
        v29 = 0;
    }
  }
  else if (3 * v29 <= 4 * v28)
  {
    goto LABEL_25;
  }
  v25 = v26 + 16 * v29;
  v24 = 1;
LABEL_28:
  *v7 = (uint64_t)v16;
  v7[1] = v25;
  *((_BYTE *)v7 + 16) = v24;
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::takePhoto(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  WTF *v12;
  unsigned int v13;
  __int128 v14;
  WTF::NativePromiseBase *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  WTF::StringImpl *result;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  WTF *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  __int128 v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49[2];
  __int128 v50;
  _BYTE v51[32];
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  WTF::NativePromiseBase *v56;
  __int128 v57;
  __int128 v58;

  v48 = a2;
  v6 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v48);
  if (v6)
  {
    v7 = (unsigned int *)v6;
    v49[0] = 0;
    v49[1] = 0;
    *(_QWORD *)&v50 = "takePhoto";
    *((_QWORD *)&v50 + 1) = 0;
    WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)&v56, 0, (WTF::Logger::LogSiteIdentifier *)v49);
    v8 = (unsigned int *)v56;
    if (v56)
    {
      v9 = (unsigned int *)((char *)v56 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    v49[0] = (WTF *)v7;
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v7 + 2, (uint64_t)v7);
    v11 = (unsigned int *)*((_QWORD *)v7 + 1);
    v12 = (WTF *)v7;
    if (v11)
    {
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 + 1, v11));
      v12 = v49[0];
    }
    v14 = a3[1];
    v50 = *a3;
    *(_OWORD *)v51 = v14;
    *(_OWORD *)&v51[10] = *(__int128 *)((char *)a3 + 26);
    v15 = v56;
    v56 = 0;
    v53 = v57;
    v54 = v58;
    v16 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)v16 = off_1E34DC540;
    *(_QWORD *)(v16 + 8) = v12;
    *(_QWORD *)(v16 + 16) = v11;
    v17 = *(_OWORD *)v51;
    v18 = v50;
    *(_OWORD *)(v16 + 56) = *(_OWORD *)&v51[16];
    *(_OWORD *)(v16 + 24) = v18;
    *(_OWORD *)(v16 + 40) = v17;
    v49[1] = 0;
    v52 = 0;
    *(_QWORD *)(v16 + 72) = v15;
    v19 = v54;
    *(_OWORD *)(v16 + 80) = v53;
    *(_OWORD *)(v16 + 96) = v19;
    v55 = v16;
    WebKit::UserMediaCaptureManagerProxySourceProxy::queueAndProcessSerialAction((WTF::RunLoop *)v7, &v55);
    v20 = v55;
    v55 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(&v52);
    v22 = (unsigned int *)v49[1];
    v49[1] = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
    }
    v25 = WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v56);
    v26 = WTF::RunLoop::main((WTF::RunLoop *)v25);
    v49[0] = 0;
    v49[1] = 0;
    v27 = *a4;
    *a4 = 0;
    v28 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v29 = &off_1E34DC660;
    v29[1] = v27;
    *(_DWORD *)(v28 + 8) = 1;
    *(_QWORD *)(v28 + 16) = v26;
    *(_QWORD *)(v28 + 24) = 0;
    *(_QWORD *)(v28 + 32) = 0;
    *(_QWORD *)(v28 + 40) = "takePhoto";
    *(_QWORD *)(v28 + 48) = 0;
    *(_WORD *)(v28 + 56) = 0;
    *(_QWORD *)v28 = off_1E34DC688;
    v30 = v8 + 2;
    *(_QWORD *)(v28 + 64) = 0;
    *(_QWORD *)(v28 + 72) = v29;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
    v45 = *(_OWORD *)v49;
    v46 = "takePhoto";
    v47 = 0;
    v56 = (WTF::NativePromiseBase *)v28;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle((uint64_t)v8, &v56, (WTF::Logger::LogSiteIdentifier *)&v45);
    v32 = (unsigned int *)v56;
    v56 = 0;
    if (v32)
    {
      v33 = v32 + 2;
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v32 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
      }
    }
    result = (WTF::StringImpl *)v8;
    if (!v8)
      goto LABEL_25;
    v37 = v8 + 2;
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v8 + 2);
      result = (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    }
    else
    {
LABEL_25:
      if (!v8)
        return result;
    }
    do
    {
      v40 = __ldaxr(v30);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v30));
    if (!v41)
    {
      atomic_store(1u, v8 + 2);
      return (WTF::StringImpl *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
    }
  }
  else
  {
    std::experimental::fundamentals_v3::unexpected<WTF::String>::unexpected<WTF::ASCIILiteral>(&v56, (uint64_t)"Device not available", 21);
    v42 = v56;
    v56 = 0;
    v49[0] = v42;
    DWORD2(v50) = 1;
    v43 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v43 + 16))(v43, v49);
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    if (DWORD2(v50) != -1)
      ((void (*)(uint64_t *, WTF **))off_1E34DC4E0[DWORD2(v50)])(&v55, v49);
    DWORD2(v50) = -1;
    result = v56;
    v56 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v44);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::getPhotoCapabilities(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::RunLoop *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  WTF::NativePromiseBase *v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  _BYTE *v19;
  _BYTE *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  WTF *v31;
  void *v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t i;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::NativePromiseBase **v47;
  int v48;
  uint64_t v49;
  WTF::NativePromiseBase *v50;
  WTF::Lock *v51;
  int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unsigned int *v70;
  unsigned int *v71;
  __int128 v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::NativePromiseBase *v76;
  WTF::Lock *v77;
  char v78;
  WTF::StringImpl *v79[2];
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint8_t buf[4];
  _BYTE v90[12];
  int v91;
  _DWORD v92[4];
  uint64_t v93;
  int v94;
  _DWORD v95[8];
  _DWORD v96[4];
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v75 = a2;
  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v75);
  if (v4)
  {
    v5 = (WTF::RunLoop *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(v4 + 64) + 168))(&v69);
    v6 = (uint64_t)v69;
    v7 = WTF::RunLoop::main(v5);
    v8 = *a3;
    *a3 = 0;
    v9 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34DC6C8;
    v10[1] = v8;
    *(_DWORD *)(v9 + 8) = 1;
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = "getPhotoCapabilities";
    *(_QWORD *)(v9 + 48) = 0;
    *(_WORD *)(v9 + 56) = 0;
    *(_QWORD *)v9 = off_1E34DC6F0;
    v11 = (unsigned int *)(v6 + 8);
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = v10;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v72 = 0uLL;
    v73 = "getPhotoCapabilities";
    v74 = 0;
    v70 = (unsigned int *)v6;
    v71 = 0;
    v13 = (WTF::NativePromiseBase *)(v6 + 48);
    v76 = (WTF::NativePromiseBase *)v9;
    v77 = (WTF::Lock *)(v6 + 48);
    v78 = 1;
    if (__ldaxr((unsigned __int8 *)(v6 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
LABEL_13:
      *(_BYTE *)(v6 + 264) = 1;
      v19 = (_BYTE *)WTF::NativePromiseBase::logChannel(v13);
      if (*v19)
      {
        v20 = v19;
        if (v19[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
          WTF::String::String((WTF::String *)&v86, " invoking maybeSettle() [");
          WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, &v85);
          WTF::String::String((WTF::String *)&v84, " callback:");
          WTF::LogArgument<void const*>::toString();
          WTF::String::String((WTF::String *)&v82, " isNothing:");
          WTF::LogArgument<BOOL>::toString<BOOL>(&v81);
          WTF::String::String((WTF::String *)&v80, "]");
          result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, &v88);
          if (!v88)
          {
            __break(0xC471u);
            return result;
          }
          v22 = v80;
          v80 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v21);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = v81;
          v81 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v21);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v82;
          v82 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v21);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v83;
          v83 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v21);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v84;
          v84 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v21);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v85;
          v85 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v21);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = v86;
          v86 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v21);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = v87;
          v87 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v21);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = *((_QWORD *)v20 + 4);
          v31 = (WTF *)os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v31)
          {
            WTF::String::utf8();
            v33 = v79[0] ? (char *)v79[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v90 = v33;
            _os_log_impl(&dword_196BCC000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v31 = v79[0];
            v79[0] = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 1)
                v31 = (WTF *)WTF::fastFree(v31, v32);
              else
                --*(_DWORD *)v31;
            }
          }
          if (*v20 && v20[16] >= 4u)
          {
            v34 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v35 = *v34;
              if ((v35 & 1) != 0)
                break;
              v36 = __ldaxr(v34);
              if (v36 == v35)
              {
                if (!__stxr(v35 | 1, v34))
                {
                  v37 = WTF::Logger::observers(v31);
                  v38 = *(unsigned int *)(v37 + 12);
                  if ((_DWORD)v38)
                  {
                    v39 = *(uint64_t **)v37;
                    v68 = *(_QWORD *)v37 + 8 * v38;
                    do
                    {
                      v40 = *v39;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
                      v91 = 0;
                      WTF::String::String((WTF::String *)v92, " invoking maybeSettle() [");
                      v92[2] = 0;
                      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, &v93);
                      v94 = 0;
                      WTF::String::String((WTF::String *)v95, " callback:");
                      v95[2] = 0;
                      WTF::LogArgument<void const*>::toString();
                      v95[6] = 0;
                      WTF::String::String((WTF::String *)v96, " isNothing:");
                      v96[2] = 0;
                      WTF::LogArgument<BOOL>::toString<BOOL>(&v97);
                      v98 = 0;
                      WTF::String::String((WTF::String *)&v99, "]");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v79, (uint64_t)buf, 8uLL);
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v40 + 16))(v40, v20, 4, v79);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, v41);
                      for (i = 120; i != -8; i -= 16)
                      {
                        v43 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v43)
                        {
                          if (*(_DWORD *)v43 == 2)
                            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v32);
                          else
                            *(_DWORD *)v43 -= 2;
                        }
                      }
                      ++v39;
                    }
                    while (v39 != (uint64_t *)v68);
                  }
                  v44 = __ldxr(v34);
                  if (v44 == 1)
                  {
                    if (!__stlxr(0, v34))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v45 = v88;
          v88 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v32);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
      }
      if (*(_DWORD *)(v6 + 216))
      {
        WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(v76, v6, (unsigned __int8 **)&v77);
      }
      else
      {
        v46 = *(unsigned int *)(v6 + 236);
        if ((_DWORD)v46 == *(_DWORD *)(v6 + 232))
        {
          v47 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 224, v46 + 1, (unint64_t)&v76);
          v46 = *(unsigned int *)(v6 + 236);
          v48 = v46 + 1;
          v49 = *(_QWORD *)(v6 + 224);
          v50 = *v47;
          *v47 = 0;
        }
        else
        {
          v48 = v46 + 1;
          v49 = *(_QWORD *)(v6 + 224);
          v50 = v76;
          v76 = 0;
        }
        *(_QWORD *)(v49 + 8 * v46) = v50;
        *(_DWORD *)(v6 + 236) = v48;
      }
      if (!v78)
        goto LABEL_95;
      v51 = v77;
      v52 = __ldxr((unsigned __int8 *)v77);
      if (v52 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v77))
        {
LABEL_95:
          v53 = (unsigned int *)v76;
          v76 = 0;
          if (v53)
          {
            v54 = v53 + 2;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v53 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
            }
          }
          v57 = v71;
          v71 = 0;
          if (v57)
          {
            v58 = v57 + 2;
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v57 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
            }
          }
          v61 = v70;
          v70 = 0;
          if (v61)
          {
            v62 = v61 + 2;
            do
            {
              v63 = __ldaxr(v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v62));
            if (!v64)
            {
              atomic_store(1u, v61 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 16))(v61);
            }
          }
          result = v69;
          v69 = 0;
          if (result)
          {
            v65 = (unsigned int *)((char *)result + 8);
            do
            {
              v66 = __ldaxr(v65);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, v65));
            if (!v67)
            {
              atomic_store(1u, (unsigned int *)result + 2);
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
            }
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v51);
      goto LABEL_95;
    }
    v13 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C]();
    goto LABEL_13;
  }
  std::experimental::fundamentals_v3::unexpected<WTF::String>::unexpected<WTF::ASCIILiteral>(v79, (uint64_t)"Device not available", 21);
  v15 = v79[0];
  v79[0] = 0;
  *(_QWORD *)&v90[4] = v15;
  v100 = 1;
  v16 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v100 != -1)
    ((void (*)(WTF::Lock **, _BYTE *))off_1E34DC6A8[v100])(&v77, &v90[4]);
  v100 = -1;
  result = v79[0];
  v79[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::UserMediaCaptureManagerProxy::getPhotoSettings(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  WTF::RunLoop *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  WTF::NativePromiseBase *v13;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  _BYTE *v19;
  _BYTE *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  NSObject *v30;
  WTF *v31;
  void *v32;
  char *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  uint64_t i;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::NativePromiseBase **v47;
  int v48;
  uint64_t v49;
  WTF::NativePromiseBase *v50;
  WTF::Lock *v51;
  int v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  WTF::StringImpl *v69;
  unsigned int *v70;
  unsigned int *v71;
  __int128 v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  WTF::NativePromiseBase *v76;
  WTF::Lock *v77;
  char v78;
  WTF::StringImpl *v79[2];
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint8_t buf[4];
  _BYTE v90[12];
  int v91;
  _DWORD v92[4];
  uint64_t v93;
  int v94;
  _DWORD v95[8];
  _DWORD v96[4];
  uint64_t v97;
  int v98;
  _QWORD v99[3];

  v99[1] = *MEMORY[0x1E0C80C00];
  v75 = a2;
  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v75);
  if (v4)
  {
    v5 = (WTF::RunLoop *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(v4 + 64) + 176))(&v69);
    v6 = (uint64_t)v69;
    v7 = WTF::RunLoop::main(v5);
    v8 = *a3;
    *a3 = 0;
    v9 = WTF::fastMalloc((WTF *)0x50);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E34DC760;
    v10[1] = v8;
    *(_DWORD *)(v9 + 8) = 1;
    *(_QWORD *)(v9 + 16) = v7;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = "getPhotoSettings";
    *(_QWORD *)(v9 + 48) = 0;
    *(_WORD *)(v9 + 56) = 0;
    *(_QWORD *)v9 = off_1E34DC788;
    v11 = (unsigned int *)(v6 + 8);
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = v10;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    v72 = 0uLL;
    v73 = "getPhotoSettings";
    v74 = 0;
    v70 = (unsigned int *)v6;
    v71 = 0;
    v13 = (WTF::NativePromiseBase *)(v6 + 48);
    v76 = (WTF::NativePromiseBase *)v9;
    v77 = (WTF::Lock *)(v6 + 48);
    v78 = 1;
    if (__ldaxr((unsigned __int8 *)(v6 + 48)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
LABEL_13:
      *(_BYTE *)(v6 + 168) = 1;
      v19 = (_BYTE *)WTF::NativePromiseBase::logChannel(v13);
      if (*v19)
      {
        v20 = v19;
        if (v19[16] >= 4u)
        {
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
          WTF::String::String((WTF::String *)&v86, " invoking maybeSettle() [");
          WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, &v85);
          WTF::String::String((WTF::String *)&v84, " callback:");
          WTF::LogArgument<void const*>::toString();
          WTF::String::String((WTF::String *)&v82, " isNothing:");
          WTF::LogArgument<BOOL>::toString<BOOL>(&v81);
          WTF::String::String((WTF::String *)&v80, "]");
          result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v87, (uint64_t *)&v86, (uint64_t *)&v85, (uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, (uint64_t *)&v81, (uint64_t *)&v80, &v88);
          if (!v88)
          {
            __break(0xC471u);
            return result;
          }
          v22 = v80;
          v80 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2)
              WTF::StringImpl::destroy(v22, v21);
            else
              *(_DWORD *)v22 -= 2;
          }
          v23 = v81;
          v81 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v21);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = v82;
          v82 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v21);
            else
              *(_DWORD *)v24 -= 2;
          }
          v25 = v83;
          v83 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v21);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v84;
          v84 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v21);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v85;
          v85 = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v21);
            else
              *(_DWORD *)v27 -= 2;
          }
          v28 = v86;
          v86 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v21);
            else
              *(_DWORD *)v28 -= 2;
          }
          v29 = v87;
          v87 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v21);
            else
              *(_DWORD *)v29 -= 2;
          }
          v30 = *((_QWORD *)v20 + 4);
          v31 = (WTF *)os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v31)
          {
            WTF::String::utf8();
            v33 = v79[0] ? (char *)v79[0] + 16 : 0;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)v90 = v33;
            _os_log_impl(&dword_196BCC000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            v31 = v79[0];
            v79[0] = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 1)
                v31 = (WTF *)WTF::fastFree(v31, v32);
              else
                --*(_DWORD *)v31;
            }
          }
          if (*v20 && v20[16] >= 4u)
          {
            v34 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v35 = *v34;
              if ((v35 & 1) != 0)
                break;
              v36 = __ldaxr(v34);
              if (v36 == v35)
              {
                if (!__stxr(v35 | 1, v34))
                {
                  v37 = WTF::Logger::observers(v31);
                  v38 = *(unsigned int *)(v37 + 12);
                  if ((_DWORD)v38)
                  {
                    v39 = *(uint64_t **)v37;
                    v68 = *(_QWORD *)v37 + 8 * v38;
                    do
                    {
                      v40 = *v39;
                      *(_DWORD *)buf = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v72);
                      v91 = 0;
                      WTF::String::String((WTF::String *)v92, " invoking maybeSettle() [");
                      v92[2] = 0;
                      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v6, &v93);
                      v94 = 0;
                      WTF::String::String((WTF::String *)v95, " callback:");
                      v95[2] = 0;
                      WTF::LogArgument<void const*>::toString();
                      v95[6] = 0;
                      WTF::String::String((WTF::String *)v96, " isNothing:");
                      v96[2] = 0;
                      WTF::LogArgument<BOOL>::toString<BOOL>(&v97);
                      v98 = 0;
                      WTF::String::String((WTF::String *)v99, "]");
                      WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v79, (uint64_t)buf, 8uLL);
                      (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF::StringImpl **))(*(_QWORD *)v40 + 16))(v40, v20, 4, v79);
                      WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v79, v41);
                      for (i = 120; i != -8; i -= 16)
                      {
                        v43 = *(WTF::StringImpl **)&buf[i];
                        *(_QWORD *)&buf[i] = 0;
                        if (v43)
                        {
                          if (*(_DWORD *)v43 == 2)
                            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v32);
                          else
                            *(_DWORD *)v43 -= 2;
                        }
                      }
                      ++v39;
                    }
                    while (v39 != (uint64_t *)v68);
                  }
                  v44 = __ldxr(v34);
                  if (v44 == 1)
                  {
                    if (!__stlxr(0, v34))
                      break;
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v45 = v88;
          v88 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v32);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
      }
      if (*(_DWORD *)(v6 + 120))
      {
        WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(v76, v6, (unsigned __int8 **)&v77);
      }
      else
      {
        v46 = *(unsigned int *)(v6 + 140);
        if ((_DWORD)v46 == *(_DWORD *)(v6 + 136))
        {
          v47 = (WTF::NativePromiseBase **)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 128, v46 + 1, (unint64_t)&v76);
          v46 = *(unsigned int *)(v6 + 140);
          v48 = v46 + 1;
          v49 = *(_QWORD *)(v6 + 128);
          v50 = *v47;
          *v47 = 0;
        }
        else
        {
          v48 = v46 + 1;
          v49 = *(_QWORD *)(v6 + 128);
          v50 = v76;
          v76 = 0;
        }
        *(_QWORD *)(v49 + 8 * v46) = v50;
        *(_DWORD *)(v6 + 140) = v48;
      }
      if (!v78)
        goto LABEL_95;
      v51 = v77;
      v52 = __ldxr((unsigned __int8 *)v77);
      if (v52 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v77))
        {
LABEL_95:
          v53 = (unsigned int *)v76;
          v76 = 0;
          if (v53)
          {
            v54 = v53 + 2;
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              atomic_store(1u, v53 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 8))(v53);
            }
          }
          v57 = v71;
          v71 = 0;
          if (v57)
          {
            v58 = v57 + 2;
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v57 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
            }
          }
          v61 = v70;
          v70 = 0;
          if (v61)
          {
            v62 = v61 + 2;
            do
            {
              v63 = __ldaxr(v62);
              v64 = v63 - 1;
            }
            while (__stlxr(v64, v62));
            if (!v64)
            {
              atomic_store(1u, v61 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v61 + 16))(v61);
            }
          }
          result = v69;
          v69 = 0;
          if (result)
          {
            v65 = (unsigned int *)((char *)result + 8);
            do
            {
              v66 = __ldaxr(v65);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, v65));
            if (!v67)
            {
              atomic_store(1u, (unsigned int *)result + 2);
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
            }
          }
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v51);
      goto LABEL_95;
    }
    v13 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C]();
    goto LABEL_13;
  }
  std::experimental::fundamentals_v3::unexpected<WTF::String>::unexpected<WTF::ASCIILiteral>(v79, (uint64_t)"Device not available", 21);
  v15 = v79[0];
  v79[0] = 0;
  *(_QWORD *)&v90[4] = v15;
  v95[0] = 1;
  v16 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v16 + 16))(v16, buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (v95[0] != -1)
    ((void (*)(WTF::Lock **, _BYTE *))off_1E34DC740[v95[0]])(&v77, &v90[4]);
  v95[0] = -1;
  result = v79[0];
  v79[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::endProducingData(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v3);
  if (result)
  {
    *(_WORD *)(result + 168) = 257;
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 64) + 72))(*(_QWORD *)(result + 64), result);
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxy::isPowerEfficient(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = a2;
  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v8);
  if (v4)
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 64) + 320))(*(_QWORD *)(v4 + 64));
  else
    v5 = 0;
  v6 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

_QWORD *WebKit::UserMediaCaptureManagerProxy::close(WebKit::UserMediaCaptureManagerProxy *this)
{
  _QWORD *v1;
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::Ref<WebKit::RemoteMediaPlayerProxy,WTF::RawPtrTraits<WebKit::RemoteMediaPlayerProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteMediaPlayerProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::begin(v1);
  v4 = result;
  v5 = v3;
  v6 = 0;
  if (v1)
    v6 = &v1[2 * *((unsigned int *)v1 - 1)];
  if (v6 != result)
  {
    do
    {
      v7 = v4[1];
      *(_BYTE *)(v7 + 168) = 1;
      result = (_QWORD *)WebCore::RealtimeMediaSource::stop(*(WebCore::RealtimeMediaSource **)(v7 + 64));
      while (1)
      {
        v4 += 2;
        if (v4 == v5)
          break;
        if ((unint64_t)(*v4 + 1) > 1)
          goto LABEL_11;
      }
      v4 = v5;
LABEL_11:
      ;
    }
    while (v4 != v6);
  }
  if (v1)
    return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v1, v3);
  return result;
}

WTF::StringImpl *WebKit::WebGeolocationManagerProxy::positionChanged(uint64_t a1, WTF::StringImpl **this, _OWORD *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  WTF::StringImpl *result;
  id v21;
  uint64_t *v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  WTF::StringImpl *v30;

  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(this, &v30);
  v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)(a1 + 56), &v30);
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
    v7 += 16 * *(unsigned int *)(v7 - 4);
  if (v7 == v5)
    goto LABEL_12;
  v8 = *(_QWORD *)(v5 + 8);
  v9 = *(unsigned __int8 *)(v8 + 144);
  v11 = a3[1];
  v10 = a3[2];
  *(_OWORD *)(v8 + 32) = *a3;
  *(_OWORD *)(v8 + 48) = v11;
  *(_OWORD *)(v8 + 64) = v10;
  v12 = a3[6];
  v14 = a3[3];
  v13 = a3[4];
  *(_OWORD *)(v8 + 112) = a3[5];
  *(_OWORD *)(v8 + 128) = v12;
  *(_OWORD *)(v8 + 80) = v14;
  *(_OWORD *)(v8 + 96) = v13;
  if (!v9)
    *(_BYTE *)(v8 + 144) = 1;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)v8, &v28);
  v15 = *(_QWORD **)v8;
  if (*(_QWORD *)v8)
  {
    v16 = *((unsigned int *)v15 - 1);
    v17 = &v15[v16];
  }
  else
  {
    v17 = 0;
    v16 = 0;
  }
  v23 = v8;
  v24 = v17;
  v25 = v17;
  v26 = v17;
  v27 = &v15[v16];
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v23);
  v18 = v29;
  if (v29 == v24)
  {
LABEL_12:
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    while (*(_BYTE *)(v8 + 144))
    {
      v19 = *(_QWORD *)(*v18 + 8);
      v22[0] = (uint64_t *)&v30;
      v22[1] = (uint64_t *)(v8 + 32);
      WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidChangePosition>(v19, v22, 0, 0);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v28);
      v18 = v29;
      if (v29 == v24)
        goto LABEL_12;
    }
    v21 = std::__throw_bad_optional_access[abi:sn180100]();
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebGeolocationManagerProxy::positionChanged(uint64_t a1, WTF::StringImpl **a2, _OWORD *a3)
{
  return WebKit::WebGeolocationManagerProxy::positionChanged(a1 - 48, a2, a3);
}

WTF::StringImpl *WebKit::WebGeolocationManagerProxy::errorOccurred(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  uint64_t v13;
  WTF::StringImpl *result;
  uint64_t *v15[2];
  _QWORD **v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  WTF::StringImpl *v23;

  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(a2, &v23);
  v5 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, &v23);
  v7 = *((_QWORD *)this + 7);
  if (v7)
    v7 += 16 * *(unsigned int *)(v7 - 4);
  if (v7 != v5)
  {
    v8 = *(_QWORD ***)(v5 + 8);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v8, &v21);
    v9 = *v8;
    if (*v8)
    {
      v10 = *((unsigned int *)v9 - 1);
      v11 = &v9[v10];
    }
    else
    {
      v11 = 0;
      v10 = 0;
    }
    v16 = v8;
    v17 = v11;
    v18 = v11;
    v19 = v11;
    v20 = &v9[v10];
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v16);
    for (i = v22; v22 != v17; i = v22)
    {
      v13 = *(_QWORD *)(*i + 8);
      v15[0] = (uint64_t *)&v23;
      v15[1] = (uint64_t *)a3;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::DidFailToDeterminePosition>(v13, v15, 0, 0);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v21);
    }
  }
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebGeolocationManagerProxy::errorOccurred(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  return WebKit::WebGeolocationManagerProxy::errorOccurred((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2, a3);
}

WTF::StringImpl *WebKit::WebGeolocationManagerProxy::resetGeolocation(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  _QWORD **v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  uint64_t v11;
  WTF::StringImpl *result;
  WTF::StringImpl **v13;
  _QWORD **v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  WTF::StringImpl *v21;

  WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(a2, &v21);
  v3 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WebKit::RestrictedOpenerType,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebKit::RestrictedOpenerType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 7, &v21);
  v5 = *((_QWORD *)this + 7);
  if (v5)
    v5 += 16 * *(unsigned int *)(v5 - 4);
  if (v5 != v3)
  {
    v6 = *(_QWORD ***)(v3 + 8);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(v6, &v19);
    v7 = *v6;
    if (*v6)
    {
      v8 = *((unsigned int *)v7 - 1);
      v9 = &v7[v8];
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v14 = v6;
    v15 = v9;
    v16 = v9;
    v17 = v9;
    v18 = &v7[v8];
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v14);
    for (i = v20; v20 != v15; i = v20)
    {
      v11 = *(_QWORD *)(*i + 8);
      v13 = &v21;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebGeolocationManager::ResetPermissions>(v11, (uint64_t **)&v13, 0, 0);
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v19);
    }
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebKit::WebGeolocationManagerProxy::resetGeolocation(WebKit::WebGeolocationManagerProxy *this, WTF::StringImpl **a2)
{
  return WebKit::WebGeolocationManagerProxy::resetGeolocation((WebKit::WebGeolocationManagerProxy *)((char *)this - 48), a2);
}

uint64_t API::ObjectImpl<(API::Object::Type)3>::type()
{
  return 3;
}

uint64_t API::ObjectImpl<(API::Object::Type)7>::type()
{
  return 7;
}

uint64_t API::ObjectImpl<(API::Object::Type)2>::type()
{
  return 2;
}

void WebKit::WebProtectionSpace::~WebProtectionSpace(WebKit::WebProtectionSpace *this, WTF::StringImpl *a2)
{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34DC278;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  const void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34DC278;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)14>::type()
{
  return 14;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(_QWORD *a1, void *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    v4 = a1;
    do
    {
      if (*v4 != -1)
      {
        v5 = v4[3];
        if (v5)
          WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v5, a2);
        v6 = (unsigned __int8 *)v4[1];
        v4[1] = 0;
        if (v6)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, a2);
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

uint64_t WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (unsigned __int8 **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned __int8 *)-1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebCore::OrientationNotifier::~OrientationNotifier(WebCore::OrientationNotifier *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;

  v3 = (WTF *)*((_QWORD *)this + 1);
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = v3;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)v6 + 8))
        *(_QWORD *)(*(_QWORD *)v6 + 8) = 0;
      v6 = (WTF *)((char *)v6 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  if (v3)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
}

uint64_t WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 144))(v6);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::UserMediaCaptureManagerProxySourceProxy(uint64_t a1, uint64_t a2, uint64_t *a3, const WTF::MachSendRight *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v12 = WebCore::RealtimeMediaSourceObserver::RealtimeMediaSourceObserver((WebCore::RealtimeMediaSourceObserver *)a1);
  *(_DWORD *)(v12 + 32) = 0;
  *(_QWORD *)v12 = off_1E34DC330;
  *(_QWORD *)(v12 + 16) = &unk_1E34DC3C0;
  *(_QWORD *)(v12 + 24) = &unk_1E34DC408;
  *(_QWORD *)(v12 + 40) = a2;
  v13 = *a3;
  *a3 = 0;
  *(_QWORD *)(v12 + 48) = v13;
  WTF::MachSendRight::MachSendRight((WTF::MachSendRight *)(v12 + 56), a4);
  v14 = *a5;
  *a5 = 0;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = 10000000;
  *(_BYTE *)(a1 + 236) = 1;
  *(_BYTE *)(a1 + 240) = 0;
  v15 = *a6;
  *a6 = 0;
  *(_QWORD *)(a1 + 248) = v15;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 1352) = 0;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  v17[0] = 0;
  v17[1] = 0;
  v17[2] = "UserMediaCaptureManagerProxySourceProxy";
  v17[3] = 0;
  WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)v17, (uint64_t *)(a1 + 1360));
  WebCore::RealtimeMediaSource::addObserver(*(WebCore::RealtimeMediaSource **)(a1 + 64), (WebCore::RealtimeMediaSourceObserver *)a1);
  return a1;
}

char *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceStopped(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v1;
  uint64_t *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  void *v11;
  char *result;
  WTF *v13;
  void *v14;
  unint64_t v15;
  size_t v16;
  void *v17;
  IPC::Encoder *v18;

  v1 = *((_QWORD *)this + 6);
  v2 = (uint64_t *)((char *)this + 40);
  v3 = *(_BYTE *)(*((_QWORD *)this + 8) + 293);
  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1480;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v18 = (IPC::Encoder *)v4;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v4, v2);
  v5 = *(_QWORD *)(v4 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(v4 + 552);
  if (v7 < v5 + 1)
  {
    v15 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v16 = v15;
      v15 *= 2;
    }
    while (v16 < v6);
    result = (char *)mmap(0, v16, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v8 = result;
    memcpy(result, *(const void **)(v4 + 528), *(_QWORD *)(v4 + 544));
    v17 = *(void **)(v4 + 528);
    if (v17 != (void *)(v4 + 16))
      munmap(v17, *(_QWORD *)(v4 + 552));
    *(_QWORD *)(v4 + 528) = v8;
    *(_QWORD *)(v4 + 552) = v16;
    v9 = *(_QWORD *)(v4 + 544);
  }
  else
  {
    v8 = *(char **)(v4 + 528);
    v9 = *(_QWORD *)(v4 + 544);
  }
  bzero(&v8[v9], v5 - v9);
  *(_QWORD *)(v4 + 544) = v6;
  v10 = (_BYTE *)(*(_QWORD *)(v4 + 528) + v5);
  *(_QWORD *)(v4 + 536) = v10 + 1;
  *v10 = v3;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v18, 0, 0);
  result = (char *)v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
    return (char *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceMutedChanged(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v1;
  uint64_t *v2;
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE *v19;
  void *v20;
  IPC::Encoder *result;
  WTF *v22;
  void *v23;
  unint64_t v24;
  size_t v25;
  char *v26;
  void *v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  void *v31;
  IPC::Encoder *v32;

  v1 = *((_QWORD *)this + 6);
  v2 = (uint64_t *)((char *)this + 40);
  v3 = (_BYTE *)*((_QWORD *)this + 8);
  v4 = v3[289];
  v5 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v3 + 88))(v3);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1478;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (void *)(v6 + 16);
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v32 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, v2);
  v8 = *(_QWORD *)(v6 + 544);
  v9 = v8 + 1;
  v10 = *(_QWORD *)(v6 + 552);
  if (v10 < v8 + 1)
  {
    v24 = (2 * v10 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v25 = v24;
      v24 *= 2;
    }
    while (v25 < v9);
    v26 = (char *)mmap(0, v25, 3, 4098, -1, 0);
    if (v26 == (char *)-1)
      goto LABEL_20;
    v11 = v26;
    memcpy(v26, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
    v27 = *(void **)(v6 + 528);
    if (v27 != v7)
      munmap(v27, *(_QWORD *)(v6 + 552));
    *(_QWORD *)(v6 + 528) = v11;
    *(_QWORD *)(v6 + 552) = v25;
    v12 = *(_QWORD *)(v6 + 544);
  }
  else
  {
    v11 = *(char **)(v6 + 528);
    v12 = *(_QWORD *)(v6 + 544);
  }
  bzero(&v11[v12], v8 - v12);
  *(_QWORD *)(v6 + 544) = v9;
  v13 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v8);
  *(_QWORD *)(v6 + 536) = v13 + 1;
  *v13 = v4;
  v14 = *(_QWORD *)(v6 + 544);
  v15 = v14 + 1;
  v16 = *(_QWORD *)(v6 + 552);
  if (v16 >= v14 + 1)
  {
    v17 = *(char **)(v6 + 528);
    v18 = *(_QWORD *)(v6 + 544);
    goto LABEL_5;
  }
  v28 = (2 * v16 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v29 = v28;
    v28 *= 2;
  }
  while (v29 < v15);
  v30 = (char *)mmap(0, v29, 3, 4098, -1, 0);
  if (v30 == (char *)-1)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x197427B48);
  }
  v17 = v30;
  memcpy(v30, *(const void **)(v6 + 528), *(_QWORD *)(v6 + 544));
  v31 = *(void **)(v6 + 528);
  if (v31 != v7)
    munmap(v31, *(_QWORD *)(v6 + 552));
  *(_QWORD *)(v6 + 528) = v17;
  *(_QWORD *)(v6 + 552) = v29;
  v18 = *(_QWORD *)(v6 + 544);
LABEL_5:
  bzero(&v17[v18], v14 - v18);
  *(_QWORD *)(v6 + 544) = v15;
  v19 = (_BYTE *)(*(_QWORD *)(v6 + 528) + v14);
  *(_QWORD *)(v6 + 536) = v19 + 1;
  *v19 = v5;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v32, 0, 0);
  result = v32;
  v32 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceSettingsChanged(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  uint64_t v6;
  void *v7;
  IPC::Encoder *result;
  WTF *v9;
  void *v10;
  IPC::Encoder *v11[13];
  char v12;

  LOBYTE(v11[0]) = 0;
  v12 = 0;
  std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>((uint64_t)this + 256, (__int128 *)v11);
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v11, v2);
  v3 = *((_QWORD *)this + 6);
  v4 = (uint64_t *)((char *)this + 40);
  v5 = (int *)WebKit::UserMediaCaptureManagerProxySourceProxy::settings(this);
  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1479;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v11[0] = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, v4);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode((IPC::Encoder *)v6, v5);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)v11, 0, 0);
  result = v11[0];
  v11[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::audioUnitWillStart(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v1;
  WebCore::AudioSession *v2;
  WebCore::AudioSession *v3;

  v1 = WebCore::AudioSession::sharedSession(this);
  v2 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v1 + 32))(v1, 5, 1, 0);
  v3 = (WebCore::AudioSession *)WebCore::AudioSession::sharedSession(v2);
  return WebCore::AudioSession::tryToSetActive(v3);
}

IPC::Encoder *WebKit::UserMediaCaptureManagerProxySourceProxy::sourceConfigurationChanged(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int *v5;
  int *v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *result;
  WTF *v10;
  void *v11;
  IPC::Encoder *v12;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 208))(*((_QWORD *)this + 8)) & 0xFE) == 4
    && *((_BYTE *)this + 1352)
    && WebKit::UserMediaCaptureManagerProxySourceProxy::updateVideoConstraints((uint64_t)this, (WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this + 384)))
  {
    WebCore::RealtimeMediaSource::removeVideoFrameObserver();
    WebCore::RealtimeMediaSource::addVideoFrameObserver();
  }
  v2 = *((_QWORD *)this + 6);
  v3 = (uint64_t *)((char *)this + 40);
  v4 = (uint64_t *)(*((_QWORD *)this + 8) + 176);
  v5 = (int *)WebKit::UserMediaCaptureManagerProxySourceProxy::settings(this);
  v6 = (int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 120))(*((_QWORD *)this + 8));
  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1477;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v12 = (IPC::Encoder *)v7;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode((IPC::Encoder *)v7, v5);
  IPC::ArgumentCoder<WebCore::RealtimeMediaSourceCapabilities,void>::encode((IPC::Encoder *)v7, v6);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v12, 0, 0);
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

BOOL WebKit::UserMediaCaptureManagerProxySourceProxy::preventSourceFromEnding(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((_BYTE *)this + 169) == 0;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCount(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCountWithoutThreadCheck(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 32);
  return this;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 32);
  if (v1)
  {
    *(_DWORD *)(this + 32) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::audioSamplesAvailable(uint64_t a1, _QWORD *a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  WebCore::CAAudioStreamDescription *v10;
  uint64_t v11;
  semaphore_t *v12;
  uint64_t v13;
  WebCore::AudioSession *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  double v18;
  WebCore::CARingBuffer *v19;
  WebCore::CARingBuffer *v20;
  WebCore::CARingBuffer *v21;
  uint64_t v22;
  IPC::Semaphore *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  WebCore::CARingBuffer *v36;
  WebCore::CARingBuffer *v37;
  uint64_t result;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v44;
  size_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  WebCore::CARingBuffer *v50;
  _BYTE v51[24];
  _QWORD v52[2];
  __int128 v53;
  char v54;
  IPC::Encoder *v55;

  v10 = (WebCore::CAAudioStreamDescription *)(a1 + 80);
  if (*(_BYTE *)(a1 + 160) && WebCore::CAAudioStreamDescription::operator==() && !*(_BYTE *)(a1 + 240))
    goto LABEL_19;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  v11 = *(_QWORD *)((char *)a2 + 5);
  *(_QWORD *)(a1 + 224) = *a2;
  *(_QWORD *)(a1 + 229) = v11;
  v12 = (semaphore_t *)WTF::fastMalloc((WTF *)8);
  *v12 = 0;
  v12[1] = 0;
  semaphore_create(*MEMORY[0x1E0C83DA0], v12 + 1, 0, 0);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)(a1 + 192), (IPC::Semaphore *)v12);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  if (*(_DWORD *)(v13 + 16) != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_34;
  }
  v14 = std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(v10, *(const AudioStreamBasicDescription **)(v13 + 8));
  v15 = WebCore::AudioSession::sharedSession(v14);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 104))(v15);
  v17 = 128;
  if (v16 > 0x80)
    v17 = v16;
  *(_QWORD *)(a1 + 216) = v17;
  if (!*(_BYTE *)(a1 + 160))
    goto LABEL_30;
  WebCore::CAAudioStreamDescription::sampleRate(v10);
  WebKit::ProducerSharedCARingBuffer::allocate(v10, (const WebCore::CAAudioStreamDescription *)(v18 + v18), (uint64_t)v52);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x1974281F0);
  }
  v19 = (WebCore::CARingBuffer *)v52[0];
  v52[0] = 0;
  v50 = v19;
  WTF::MachSendRight::MachSendRight();
  *(_OWORD *)&v51[8] = v53;
  v20 = *(WebCore::CARingBuffer **)(a1 + 72);
  v21 = v50;
  v50 = 0;
  *(_QWORD *)(a1 + 72) = v21;
  if (v20)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 72, v20);
  if (!*(_BYTE *)(a1 + 160))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v22 = *(_QWORD *)(a1 + 48);
  v23 = *(IPC::Semaphore **)(a1 + 192);
  v48 = *(_QWORD *)(a1 + 216);
  v49 = a5;
  v24 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v24 = 735;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 528) = v24 + 16;
  *(_QWORD *)(v24 + 536) = v24 + 16;
  *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v24 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
  v55 = (IPC::Encoder *)v24;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v24, (uint64_t *)(a1 + 40));
  IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode((IPC::Encoder *)v24, (unint64_t)v51);
  v25 = (_QWORD *)WebCore::CAAudioStreamDescription::streamDescription(v10);
  IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode((IPC::Encoder *)v24, v25);
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v24, v23);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v24, (_QWORD *)(a1 + 224));
  v26 = *(_QWORD *)(v24 + 544);
  v27 = (v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = v27 + 8;
  v29 = *(_QWORD *)(v24 + 552);
  if (v29 < v27 + 8)
  {
    v44 = (2 * v29 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v45 = v44;
      v44 *= 2;
    }
    while (v45 < v28);
    v46 = (char *)mmap(0, v45, 3, 4098, -1, 0);
    if (v46 != (char *)-1)
    {
      v30 = v46;
      memcpy(v46, *(const void **)(v24 + 528), *(_QWORD *)(v24 + 544));
      v47 = *(void **)(v24 + 528);
      if (v47 != (void *)(v24 + 16))
        munmap(v47, *(_QWORD *)(v24 + 552));
      *(_QWORD *)(v24 + 528) = v30;
      *(_QWORD *)(v24 + 552) = v45;
      v26 = *(_QWORD *)(v24 + 544);
      goto LABEL_14;
    }
LABEL_34:
    __break(0xC471u);
LABEL_35:
    JUMPOUT(0x1974281D0);
  }
  v30 = *(char **)(v24 + 528);
LABEL_14:
  bzero(&v30[v26], v27 - v26);
  *(_QWORD *)(v24 + 544) = v28;
  v31 = (_QWORD *)(*(_QWORD *)(v24 + 528) + v27);
  *(_QWORD *)(v24 + 536) = v31 + 1;
  *v31 = v48;
  IPC::Connection::sendMessageImpl(v22, (uint64_t *)&v55, 0, 0);
  v33 = v55;
  v55 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v32);
    WTF::fastFree(v34, v35);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v51);
  a5 = v49;
  v36 = v50;
  v50 = 0;
  if (v36)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v50, v36);
  std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v52);
LABEL_19:
  v37 = *(WebCore::CARingBuffer **)(a1 + 72);
  if (((unsigned int (*)(const AudioBufferList **))(*a3)->mBuffers[0].mData)(a3) != 1)
  {
LABEL_31:
    __break(0xC471u);
    goto LABEL_35;
  }
  result = WebCore::CARingBuffer::store(v37, a3[5]);
  v39 = *(_QWORD *)(a1 + 208) + a5;
  v40 = *(_QWORD *)(a1 + 216);
  v41 = v39 / v40;
  *(_QWORD *)(a1 + 200) += a5;
  *(_QWORD *)(a1 + 208) = v39 % v40;
  if (v40 <= v39)
  {
    v42 = 1;
    do
      result = MEMORY[0x19AEBA1A0](*(unsigned int *)(*(_QWORD *)(a1 + 192) + 4));
    while (v41 > v42++);
  }
  return result;
}

void WebKit::UserMediaCaptureManagerProxySourceProxy::videoFrameAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v4;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  IPC::Encoder *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  IPC::Encoder *v24;
  WTF *v25;
  void *v26;
  uint64_t *v27;
  const void *v28;
  const void *v29;
  unsigned __int16 v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  unsigned __int16 *v39;
  uint64_t v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  void *v46;
  IPC::Encoder *v47;
  WTF *v48;
  void *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  size_t v54;
  char *v55;
  void *v56;
  unint64_t v57;
  size_t v58;
  char *v59;
  void *v60;
  size_t v61;
  uint64_t v62;
  _OWORD v63[4];
  unsigned __int16 *v64;
  IPC::Encoder *v65;

  v4 = (unsigned __int16 *)a2;
  if (*(_BYTE *)(a1 + 184))
    v6 = *(unsigned __int16 *)(a2 + 34) == 0;
  else
    v6 = 1;
  if (v6)
  {
    v7 = (unsigned int *)(a2 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    goto LABEL_19;
  }
  if (!*(_QWORD *)(a1 + 176))
  {
    v10 = WTF::fastMalloc((WTF *)0x70);
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_BYTE *)(v10 + 104) = 1;
    v11 = *(WTF **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = v10;
    if (v11)
      std::default_delete<WebCore::ImageRotationSessionVT>::operator()[abi:sn180100](v11, v9);
  }
  LOWORD(v63[0]) = 0;
  DWORD1(v63[0]) = 0;
  v12 = v4[17];
  if (v12 == 270 || v12 == 180 || v12 == 90)
    DWORD1(v63[0]) = v4[17];
  WebCore::ImageRotationSessionVT::rotate();
  LOBYTE(v63[0]) = 0;
  BYTE8(v63[0]) = 0;
  WebCore::VideoFrameCV::create();
  v4 = v64;
  v13 = v65;
  v65 = 0;
  if (v13)
    CFRelease(v13);
  if (v64)
  {
LABEL_19:
    if (WebCore::ProcessIdentity::operator BOOL())
      (*(void (**)(unsigned __int16 *, uint64_t))(*(_QWORD *)v4 + 64))(v4, a1 + 56);
    v14 = *(_QWORD *)(a1 + 248);
    if (v14)
    {
      v15 = (unsigned int *)(v4 + 4);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 + 1, v15));
      v65 = (IPC::Encoder *)v4;
      WebKit::RemoteVideoFrameObjectHeap::add(v14, (uint64_t *)&v65, (uint64_t)v63);
      v17 = (unsigned int *)v65;
      v65 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      v21 = *(_QWORD *)(a1 + 48);
      v22 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v22 = 736;
      *(_QWORD *)(v22 + 8) = 0;
      *(_QWORD *)(v22 + 528) = v22 + 16;
      *(_QWORD *)(v22 + 536) = v22 + 16;
      *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v22 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
      v65 = (IPC::Encoder *)v22;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v22, (uint64_t *)(a1 + 40));
      IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode((IPC::Encoder *)v22, (uint64_t *)v63);
      IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::encode((IPC::Encoder *)v22, a3);
      IPC::Connection::sendMessageImpl(v21, (uint64_t *)&v65, 0, 0);
      v24 = v65;
      v65 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v23);
        WTF::fastFree(v25, v26);
      }
LABEL_41:
      v50 = (unsigned int *)(v4 + 4);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
      {
        atomic_store(1u, (unsigned int *)v4 + 2);
        (*(void (**)(unsigned __int16 *))(*(_QWORD *)v4 + 8))(v4);
      }
      return;
    }
    v62 = *(_QWORD *)(a1 + 48);
    v27 = (uint64_t *)(a1 + 40);
    v28 = (const void *)(*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v4 + 56))(v4);
    v29 = v28;
    if (v28)
      CFRetain(v28);
    v30 = v4[17];
    v31 = *((_BYTE *)v4 + 32);
    v63[0] = *((_OWORD *)v4 + 1);
    v32 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v32 = 737;
    *(_QWORD *)(v32 + 8) = 0;
    v33 = (void *)(v32 + 16);
    *(_QWORD *)(v32 + 528) = v32 + 16;
    *(_QWORD *)(v32 + 536) = v32 + 16;
    *(_OWORD *)(v32 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v32 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v32);
    v65 = (IPC::Encoder *)v32;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v32, v27);
    IPC::ArgumentCoder<__CVBuffer *,void>::encode(v32, v29);
    v34 = *(_QWORD *)(v32 + 544);
    v35 = (v34 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v36 = v35 + 2;
    v37 = *(_QWORD *)(v32 + 552);
    if (v37 < v35 + 2)
    {
      v53 = (2 * v37 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v54 = v53;
        v53 *= 2;
      }
      while (v54 < v36);
      v61 = v54;
      v55 = (char *)mmap(0, v54, 3, 4098, -1, 0);
      if (v55 == (char *)-1)
        goto LABEL_58;
      v38 = v55;
      memcpy(v55, *(const void **)(v32 + 528), *(_QWORD *)(v32 + 544));
      v56 = *(void **)(v32 + 528);
      if (v56 != v33)
        munmap(v56, *(_QWORD *)(v32 + 552));
      *(_QWORD *)(v32 + 528) = v38;
      *(_QWORD *)(v32 + 552) = v61;
      v34 = *(_QWORD *)(v32 + 544);
    }
    else
    {
      v38 = *(char **)(v32 + 528);
    }
    bzero(&v38[v34], v35 - v34);
    *(_QWORD *)(v32 + 544) = v36;
    v39 = (unsigned __int16 *)(*(_QWORD *)(v32 + 528) + v35);
    *(_QWORD *)(v32 + 536) = v39 + 1;
    *v39 = v30;
    v40 = *(_QWORD *)(v32 + 544);
    v41 = v40 + 1;
    v42 = *(_QWORD *)(v32 + 552);
    if (v42 >= v40 + 1)
    {
      v43 = *(char **)(v32 + 528);
      v44 = *(_QWORD *)(v32 + 544);
LABEL_37:
      bzero(&v43[v44], v40 - v44);
      *(_QWORD *)(v32 + 544) = v41;
      v45 = (_BYTE *)(*(_QWORD *)(v32 + 528) + v40);
      *(_QWORD *)(v32 + 536) = v45 + 1;
      *v45 = v31;
      IPC::ArgumentCoder<WTF::MediaTime,void>::encode((IPC::Encoder *)v32, v63);
      IPC::ArgumentCoder<WebCore::VideoFrameTimeMetadata,void>::encode((IPC::Encoder *)v32, a3);
      IPC::Connection::sendMessageImpl(v62, (uint64_t *)&v65, 0, 0);
      v47 = v65;
      v65 = 0;
      if (v47)
      {
        IPC::Encoder::~Encoder(v47, v46);
        WTF::fastFree(v48, v49);
      }
      if (v29)
        CFRelease(v29);
      goto LABEL_41;
    }
    v57 = (2 * v42 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v58 = v57;
      v57 *= 2;
    }
    while (v58 < v41);
    v59 = (char *)mmap(0, v58, 3, 4098, -1, 0);
    if (v59 != (char *)-1)
    {
      v43 = v59;
      memcpy(v59, *(const void **)(v32 + 528), *(_QWORD *)(v32 + 544));
      v60 = *(void **)(v32 + 528);
      if (v60 != v33)
        munmap(v60, *(_QWORD *)(v32 + 552));
      *(_QWORD *)(v32 + 528) = v43;
      *(_QWORD *)(v32 + 552) = v58;
      v44 = *(_QWORD *)(v32 + 544);
      goto LABEL_37;
    }
LABEL_58:
    __break(0xC471u);
    JUMPOUT(0x1974286F4);
  }
}

void `non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this - 16));
}

{
  WebKit::UserMediaCaptureManagerProxySourceProxy::operator delete((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this - 16));
}

{
  WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this - 24));
}

{
  WebKit::UserMediaCaptureManagerProxySourceProxy::operator delete((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this - 24));
}

uint64_t `non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCount(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::ptrCountWithoutThreadCheck(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t `non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::incrementPtrCount(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

uint64_t `non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::decrementPtrCount(uint64_t this)
{
  int v1;

  v1 = *(_DWORD *)(this + 16);
  if (v1)
  {
    *(_DWORD *)(this + 16) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::audioSamplesAvailable(uint64_t a1, _QWORD *a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  return WebKit::UserMediaCaptureManagerProxySourceProxy::audioSamplesAvailable(a1 - 16, a2, a3, a4, a5);
}

void `non-virtual thunk to'WebKit::UserMediaCaptureManagerProxySourceProxy::videoFrameAvailable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::UserMediaCaptureManagerProxySourceProxy::videoFrameAvailable(a1 - 24, a2, a3);
}

void WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WebCore::CARingBuffer *v12;
  uint64_t v13;

  if (*(_BYTE *)(*((_QWORD *)this + 8) + 112))
    WebCore::RealtimeMediaSource::removeVideoFrameObserver();
  else
    WebCore::RealtimeMediaSource::removeAudioSampleObserver();
  WebCore::RealtimeMediaSource::removeObserver(*((WebCore::RealtimeMediaSource **)this + 8), this);
  v3 = (unsigned int *)*((_QWORD *)this + 170);
  *((_QWORD *)this + 170) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  std::__optional_destruct_base<WebCore::MediaConstraints,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 384, v2);
  std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 256, v7);
  v9 = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v9)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v9 + 16), v8);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 24, 0);
  v11 = (WTF *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v11)
    std::default_delete<WebCore::ImageRotationSessionVT>::operator()[abi:sn180100](v11, v10);
  if (*((_BYTE *)this + 160))
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this + 80));
  v12 = (WebCore::CARingBuffer *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((_DWORD)this + 72, v12);
  v13 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 144))(v13);
  WTF::MachSendRight::~MachSendRight((WebKit::UserMediaCaptureManagerProxySourceProxy *)((char *)this + 56));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)this + 6);
  WebCore::RealtimeMediaSourceObserver::~RealtimeMediaSourceObserver(this);
}

uint64_t std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  if (*(_BYTE *)(a1 + 104))
  {
    v3 = *(WTF::StringImpl **)(a1 + 56);
    *(_QWORD *)(a1 + 56) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t std::default_delete<WebCore::ImageRotationSessionVT>::operator()[abi:sn180100](WTF *this, void *a2)
{
  const void *v3;
  const void *v4;

  v3 = (const void *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    CFRelease(v4);
  return WTF::fastFree(this, a2);
}

void WebKit::UserMediaCaptureManagerProxySourceProxy::operator delete(WebKit::UserMediaCaptureManagerProxySourceProxy *a1)
{
  _DWORD *v1;
  void *v2;

  WebKit::UserMediaCaptureManagerProxySourceProxy::~UserMediaCaptureManagerProxySourceProxy(a1);
  if (v1[8])
    bzero(v1, 0x558uLL);
  else
    WTF::fastFree((WTF *)v1, v2);
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::settings(WebKit::UserMediaCaptureManagerProxySourceProxy *this)
{
  _BYTE *v2;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  double v12;
  WebCore::RealtimeMediaSource *v13;
  uint64_t v14;
  int v15;
  int v16;
  float v17;

  v2 = (_BYTE *)*((_QWORD *)this + 8);
  if (v2[112])
  {
    if (*((_BYTE *)this + 360))
      return (uint64_t)this + 256;
    v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 128))(v2);
    v5 = v4;
    if (*((_BYTE *)this + 360))
    {
      v6 = *(_OWORD *)v4;
      v7 = *(_OWORD *)(v4 + 16);
      *((_BYTE *)this + 288) = *(_BYTE *)(v4 + 32);
      *((_OWORD *)this + 16) = v6;
      *((_OWORD *)this + 17) = v7;
      WTF::String::operator=((WTF::StringImpl **)this + 37, (WTF::StringImpl *)(v4 + 40));
      WTF::String::operator=((WTF::StringImpl **)this + 38, (WTF::StringImpl *)(v5 + 48));
      WTF::String::operator=((WTF::StringImpl **)this + 39, (WTF::StringImpl *)(v5 + 56));
      v8 = *(_QWORD *)(v5 + 94);
      v9 = *(_OWORD *)(v5 + 80);
      *((_OWORD *)this + 20) = *(_OWORD *)(v5 + 64);
      *((_OWORD *)this + 21) = v9;
      *(_QWORD *)((char *)this + 350) = v8;
    }
    else
    {
      std::construct_at[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceSettings*>((uint64_t)this + 256, (__int128 *)v4);
      *((_BYTE *)this + 360) = 1;
    }
    v10 = *((unsigned int *)this + 92);
    v11 = *((unsigned int *)this + 93);
    if (*((_QWORD *)this + 46))
    {
      v13 = (WebCore::RealtimeMediaSource *)*((_QWORD *)this + 8);
      v14 = WebCore::RealtimeMediaSource::intrinsicSize(v13);
      v5 = (*(uint64_t (**)(WebCore::RealtimeMediaSource *, unint64_t, uint64_t))(*(_QWORD *)v13 + 224))(v13, v10 | (v11 << 32), v14);
      v10 = HIDWORD(v5);
      v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 216))(*((_QWORD *)this + 8));
      if (v15 == 270 || v15 == 90)
      {
        v16 = HIDWORD(v5);
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    v12 = *((double *)this + 47);
    if (v12 == 0.0)
    {
      if (*((_BYTE *)this + 360))
        return (uint64_t)this + 256;
    }
    else if (*((_BYTE *)this + 360))
    {
LABEL_20:
      if (v12 < *((float *)this + 66))
      {
        v17 = v12;
        *((float *)this + 66) = v17;
      }
      return (uint64_t)this + 256;
    }
    do
    {
      __break(1u);
LABEL_17:
      v16 = v5;
      LODWORD(v5) = v10;
LABEL_18:
      ;
    }
    while (!*((_BYTE *)this + 360));
    *((_DWORD *)this + 64) = v16;
    *((_DWORD *)this + 65) = v5;
    v12 = *((double *)this + 47);
    if (v12 == 0.0)
      return (uint64_t)this + 256;
    goto LABEL_20;
  }
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v2 + 128))(v2);
}

__n128 std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  if (*(unsigned __int8 *)(a1 + 104) == *((unsigned __int8 *)a2 + 104))
  {
    if (*(_BYTE *)(a1 + 104))
    {
      v4 = *a2;
      v5 = a2[1];
      *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
      WTF::String::operator=((WTF::StringImpl **)(a1 + 40), (WTF::StringImpl *)((char *)a2 + 40));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 48), (WTF::StringImpl *)(a2 + 3));
      WTF::String::operator=((WTF::StringImpl **)(a1 + 56), (WTF::StringImpl *)((char *)a2 + 56));
      v6 = *(_QWORD *)((char *)a2 + 94);
      result = (__n128)a2[5];
      *(_OWORD *)(a1 + 64) = a2[4];
      *(__n128 *)(a1 + 80) = result;
      *(_QWORD *)(a1 + 94) = v6;
    }
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::reset[abi:sn180100](a1, (WTF::StringImpl *)a2);
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v9;
    v10 = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = 0;
    *(_QWORD *)(a1 + 40) = v10;
    v11 = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 6) = 0;
    *(_QWORD *)(a1 + 48) = v11;
    v12 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    *(_QWORD *)(a1 + 56) = v12;
    result = (__n128)a2[4];
    v13 = a2[5];
    *(_QWORD *)(a1 + 94) = *(_QWORD *)((char *)a2 + 94);
    *(__n128 *)(a1 + 64) = result;
    *(_OWORD *)(a1 + 80) = v13;
    *(_BYTE *)(a1 + 104) = 1;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(result + 104))
  {
    v2 = result;
    v3 = *(WTF::StringImpl **)(result + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(v2 + 48);
    *(_QWORD *)(v2 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    result = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v2 + 40) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      else
        *(_DWORD *)result -= 2;
    }
    *(_BYTE *)(v2 + 104) = 0;
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::RealtimeMediaSourceSettings,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceSettings*>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  __int128 v7;
  __int128 v8;

  if (result)
  {
    v2 = *a2;
    v3 = a2[1];
    *(_BYTE *)(result + 32) = *((_BYTE *)a2 + 32);
    *(_OWORD *)result = v2;
    *(_OWORD *)(result + 16) = v3;
    v4 = (_DWORD *)*((_QWORD *)a2 + 5);
    if (v4)
      *v4 += 2;
    *(_QWORD *)(result + 40) = v4;
    v5 = (_DWORD *)*((_QWORD *)a2 + 6);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(result + 48) = v5;
    v6 = (_DWORD *)*((_QWORD *)a2 + 7);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(result + 56) = v6;
    v7 = a2[4];
    v8 = a2[5];
    *(_QWORD *)(result + 94) = *(_QWORD *)((char *)a2 + 94);
    *(_OWORD *)(result + 64) = v7;
    *(_OWORD *)(result + 80) = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::UserMediaCaptureManagerProxySourceProxy::updateVideoConstraints(uint64_t a1, const WebCore::MediaTrackConstraintSetMap *a2)
{
  int v3;
  int v4;
  _BOOL4 v6;
  int v8;
  char v9;
  int v10;
  unsigned __int8 v11;
  double v12;
  char v13;

  std::optional<WebCore::MediaConstraints>::operator=[abi:sn180100]<WebCore::MediaConstraints const&,void>((WebCore::MediaTrackConstraintSetMap *)(a1 + 384), a2);
  WebCore::RealtimeMediaSource::extractVideoPresetConstraints();
  if (v9)
  {
    v3 = *(_DWORD *)(a1 + 368);
    v4 = v3 != v8;
    *(_DWORD *)(a1 + 368) = v8;
    if (!v11)
    {
      v4 = v3 != v8 || *(_DWORD *)(a1 + 372) != 0;
      *(_DWORD *)(a1 + 372) = 0;
      goto LABEL_15;
    }
  }
  else
  {
    v4 = v11;
    if (!v11)
      goto LABEL_15;
    v4 = *(_DWORD *)(a1 + 368) != 0;
    *(_DWORD *)(a1 + 368) = 0;
  }
  if (*(_DWORD *)(a1 + 372) != v10)
    v4 = 1;
  *(_DWORD *)(a1 + 372) = v10;
LABEL_15:
  if (v13)
  {
    v6 = *(double *)(a1 + 376) != v12;
    *(double *)(a1 + 376) = v12;
  }
  else
  {
    v6 = *(double *)(a1 + 376) != 0.0;
    *(_QWORD *)(a1 + 376) = 0;
  }
  return v4 | v6;
}

WebCore::MediaTrackConstraintSetMap *std::optional<WebCore::MediaConstraints>::operator=[abi:sn180100]<WebCore::MediaConstraints const&,void>(WebCore::MediaTrackConstraintSetMap *a1, const WebCore::MediaTrackConstraintSetMap *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;

  v4 = (uint64_t)a1 + 944;
  v5 = (uint64_t)a2 + 944;
  if (*((_BYTE *)a1 + 968))
  {
    WebCore::MediaTrackConstraintSetMap::operator=((uint64_t)a1, (uint64_t)a2);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4, v5);
    v6 = *((_BYTE *)a2 + 960);
  }
  else
  {
    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(a1, a2);
    WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v4, v5);
    v6 = *((_BYTE *)a2 + 960);
    *((_BYTE *)a1 + 968) = 1;
  }
  *((_BYTE *)a1 + 960) = v6;
  return a1;
}

uint64_t WebCore::MediaTrackConstraintSetMap::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v4 = *(_OWORD *)(a2 + 12);
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      *(_OWORD *)(a1 + 12) = v4;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)a1 = &off_1E34ADA88;
    v5 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 12) = v5;
    *(_QWORD *)a1 = &off_1E34ADA60;
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 104) == *(unsigned __int8 *)(a2 + 104))
  {
    if (*(_BYTE *)(a1 + 104))
    {
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      v6 = *(_OWORD *)(a2 + 68);
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
      *(_OWORD *)(a1 + 68) = v6;
    }
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 104) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = &off_1E34ADA88;
    v7 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    *(_OWORD *)(a1 + 68) = v7;
    *(_QWORD *)(a1 + 56) = &off_1E34ADA60;
    *(_BYTE *)(a1 + 104) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    if (*(_BYTE *)(a1 + 160))
    {
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      v8 = *(_OWORD *)(a2 + 124);
      *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
      *(_OWORD *)(a1 + 124) = v8;
    }
  }
  else if (*(_BYTE *)(a1 + 160))
  {
    *(_BYTE *)(a1 + 160) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(a1 + 112) = &off_1E34ADA88;
    v9 = *(_OWORD *)(a2 + 124);
    *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
    *(_OWORD *)(a1 + 124) = v9;
    *(_QWORD *)(a1 + 112) = &off_1E34ADA60;
    *(_BYTE *)(a1 + 160) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 216) == *(unsigned __int8 *)(a2 + 216))
  {
    if (*(_BYTE *)(a1 + 216))
    {
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      v10 = *(_OWORD *)(a2 + 180);
      *(_OWORD *)(a1 + 193) = *(_OWORD *)(a2 + 193);
      *(_OWORD *)(a1 + 180) = v10;
    }
  }
  else if (*(_BYTE *)(a1 + 216))
  {
    *(_BYTE *)(a1 + 216) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = &off_1E34ADA88;
    v11 = *(_OWORD *)(a2 + 180);
    *(_OWORD *)(a1 + 193) = *(_OWORD *)(a2 + 193);
    *(_OWORD *)(a1 + 180) = v11;
    *(_QWORD *)(a1 + 168) = &off_1E34ADA60;
    *(_BYTE *)(a1 + 216) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 304) == *(unsigned __int8 *)(a2 + 304))
  {
    if (*(_BYTE *)(a1 + 304))
    {
      *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
      v12 = *(_OWORD *)(a2 + 240);
      v13 = *(_OWORD *)(a2 + 256);
      v14 = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
      *(_OWORD *)(a1 + 256) = v13;
      *(_OWORD *)(a1 + 272) = v14;
      *(_OWORD *)(a1 + 240) = v12;
    }
  }
  else if (*(_BYTE *)(a1 + 304))
  {
    *(_BYTE *)(a1 + 304) = 0;
  }
  else
  {
    v15 = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(a1 + 224) = &off_1E34ADAD8;
    *(_BYTE *)(a1 + 232) = v15;
    v16 = *(_OWORD *)(a2 + 240);
    v17 = *(_OWORD *)(a2 + 256);
    v18 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 281) = *(_OWORD *)(a2 + 281);
    *(_OWORD *)(a1 + 256) = v17;
    *(_OWORD *)(a1 + 272) = v18;
    *(_OWORD *)(a1 + 240) = v16;
    *(_QWORD *)(a1 + 224) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 304) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 392) == *(unsigned __int8 *)(a2 + 392))
  {
    if (*(_BYTE *)(a1 + 392))
    {
      *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
      v19 = *(_OWORD *)(a2 + 328);
      v20 = *(_OWORD *)(a2 + 344);
      v21 = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 369) = *(_OWORD *)(a2 + 369);
      *(_OWORD *)(a1 + 344) = v20;
      *(_OWORD *)(a1 + 360) = v21;
      *(_OWORD *)(a1 + 328) = v19;
    }
  }
  else if (*(_BYTE *)(a1 + 392))
  {
    *(_BYTE *)(a1 + 392) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(a1 + 312) = &off_1E34ADAD8;
    v22 = *(_OWORD *)(a2 + 328);
    v23 = *(_OWORD *)(a2 + 344);
    v24 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 369) = *(_OWORD *)(a2 + 369);
    *(_OWORD *)(a1 + 344) = v23;
    *(_OWORD *)(a1 + 360) = v24;
    *(_OWORD *)(a1 + 328) = v22;
    *(_QWORD *)(a1 + 312) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 392) = 1;
  }
  if (*(unsigned __int8 *)(a1 + 480) == *(unsigned __int8 *)(a2 + 480))
  {
    if (*(_BYTE *)(a1 + 480))
    {
      *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
      v25 = *(_OWORD *)(a2 + 416);
      v26 = *(_OWORD *)(a2 + 432);
      v27 = *(_OWORD *)(a2 + 448);
      *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
      *(_OWORD *)(a1 + 432) = v26;
      *(_OWORD *)(a1 + 448) = v27;
      *(_OWORD *)(a1 + 416) = v25;
    }
  }
  else if (*(_BYTE *)(a1 + 480))
  {
    *(_BYTE *)(a1 + 480) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 408) = *(_BYTE *)(a2 + 408);
    *(_QWORD *)(a1 + 400) = &off_1E34ADAD8;
    v28 = *(_OWORD *)(a2 + 416);
    v29 = *(_OWORD *)(a2 + 432);
    v30 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 457) = *(_OWORD *)(a2 + 457);
    *(_OWORD *)(a1 + 432) = v29;
    *(_OWORD *)(a1 + 448) = v30;
    *(_OWORD *)(a1 + 416) = v28;
    *(_QWORD *)(a1 + 400) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 480) = 1;
  }
  std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(a1 + 488, a2 + 488);
  std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(a1 + 512, a2 + 512);
  std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(a1 + 536, a2 + 536);
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::StringConstraint,false> const&>((unsigned int *)(a1 + 560), (_BYTE *)(a2 + 560));
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::StringConstraint,false> const&>((unsigned int *)(a1 + 616), (_BYTE *)(a2 + 616));
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::StringConstraint,false> const&>((unsigned int *)(a1 + 672), (_BYTE *)(a2 + 672));
  std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::StringConstraint,false> const&>((unsigned int *)(a1 + 728), (_BYTE *)(a2 + 728));
  if (*(unsigned __int8 *)(a1 + 864) == *(unsigned __int8 *)(a2 + 864))
  {
    if (*(_BYTE *)(a1 + 864))
    {
      *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
      v31 = *(_OWORD *)(a2 + 800);
      v32 = *(_OWORD *)(a2 + 816);
      v33 = *(_OWORD *)(a2 + 832);
      *(_OWORD *)(a1 + 841) = *(_OWORD *)(a2 + 841);
      *(_OWORD *)(a1 + 816) = v32;
      *(_OWORD *)(a1 + 832) = v33;
      *(_OWORD *)(a1 + 800) = v31;
    }
  }
  else if (*(_BYTE *)(a1 + 864))
  {
    *(_BYTE *)(a1 + 864) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 792) = *(_BYTE *)(a2 + 792);
    *(_QWORD *)(a1 + 784) = &off_1E34ADAD8;
    v34 = *(_OWORD *)(a2 + 800);
    v35 = *(_OWORD *)(a2 + 816);
    v36 = *(_OWORD *)(a2 + 832);
    *(_OWORD *)(a1 + 841) = *(_OWORD *)(a2 + 841);
    *(_OWORD *)(a1 + 816) = v35;
    *(_OWORD *)(a1 + 832) = v36;
    *(_OWORD *)(a1 + 800) = v34;
    *(_QWORD *)(a1 + 784) = &off_1E34ADAB0;
    *(_BYTE *)(a1 + 864) = 1;
  }
  std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(a1 + 872, a2 + 872);
  std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(a1 + 896, a2 + 896);
  std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(a1 + 920, a2 + 920);
  return a1;
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  WebCore::MediaTrackConstraintSetMap *v8;
  const WebCore::MediaTrackConstraintSetMap *v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *(_DWORD *)(a2 + 12);
    if (v4 <= v5)
    {
      if (v5 > *(_DWORD *)(a1 + 8))
      {
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
        WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
        v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      WTF::VectorDestructor<true,WebCore::MediaTrackConstraintSetMap>::destruct(*(_QWORD *)a1 + 944 * v5, (char *)(*(_QWORD *)a1 + 944 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap*,0>(*(_QWORD *)a2, *(_QWORD *)a2 + 944 * v4, *(_QWORD *)a1);
    v6 = *(_DWORD *)(a1 + 12);
    v7 = *(_DWORD *)(a2 + 12);
    if (v6 != v7)
    {
      v8 = (WebCore::MediaTrackConstraintSetMap *)(*(_QWORD *)a1 + 944 * v6);
      v9 = (const WebCore::MediaTrackConstraintSetMap *)(*(_QWORD *)a2 + 944 * v6);
      v10 = 944 * v7 - 944 * v6;
      do
      {
        v8 = (WebCore::MediaTrackConstraintSetMap *)((char *)WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v8, v9)+ 944);
        v9 = (const WebCore::MediaTrackConstraintSetMap *)((char *)v9 + 944);
        v10 -= 944;
      }
      while (v10);
      v6 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a1 + 12) = v6;
  }
  return a1;
}

uint64_t std::__optional_storage_base<WebCore::BooleanConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::BooleanConstraint,false> const&>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
      *(_DWORD *)(result + 9) = *(_DWORD *)(a2 + 9);
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    *(_BYTE *)(result + 16) = 0;
  }
  else
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)result = &off_1E34ADB00;
    *(_DWORD *)(result + 9) = *(_DWORD *)(a2 + 9);
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

unsigned int *std::__optional_storage_base<WebCore::StringConstraint,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WebCore::StringConstraint,false> const&>(unsigned int *result, _BYTE *a2)
{
  unsigned int *v3;

  v3 = result;
  if (*((unsigned __int8 *)result + 48) == a2[48])
  {
    if (*((_BYTE *)result + 48))
    {
      *((_BYTE *)result + 8) = a2[8];
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(result + 4, (uint64_t)(a2 + 16));
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v3 + 8, (uint64_t)(a2 + 32));
    }
  }
  else if (*((_BYTE *)result + 48))
  {
    return (unsigned int *)std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100]((uint64_t)result, a2);
  }
  else
  {
    *((_BYTE *)result + 8) = a2[8];
    *(_QWORD *)result = &off_1E34AE7C8;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(result + 4), (uint64_t)(a2 + 16));
    result = (unsigned int *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v3 + 8), (uint64_t)(a2 + 32));
    *((_BYTE *)v3 + 48) = 1;
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap const*,WebCore::MediaTrackConstraintSetMap*,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      WebCore::MediaTrackConstraintSetMap::operator=(a3, v4);
      v4 += 944;
      a3 += 944;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

WebCore::MediaTrackConstraintSetMap *WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(WebCore::MediaTrackConstraintSetMap *this, const WebCore::MediaTrackConstraintSetMap *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 48) = 0;
  if (*((_BYTE *)a2 + 48))
  {
    *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)this = &off_1E34ADA88;
    v4 = *(_OWORD *)((char *)a2 + 12);
    *(_OWORD *)((char *)this + 25) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)((char *)this + 12) = v4;
    *(_QWORD *)this = &off_1E34ADA60;
    *((_BYTE *)this + 48) = 1;
  }
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
    *((_QWORD *)this + 7) = &off_1E34ADA88;
    v5 = *(_OWORD *)((char *)a2 + 68);
    *(_OWORD *)((char *)this + 81) = *(_OWORD *)((char *)a2 + 81);
    *(_OWORD *)((char *)this + 68) = v5;
    *((_QWORD *)this + 7) = &off_1E34ADA60;
    *((_BYTE *)this + 104) = 1;
  }
  *((_BYTE *)this + 112) = 0;
  *((_BYTE *)this + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    *((_BYTE *)this + 120) = *((_BYTE *)a2 + 120);
    *((_QWORD *)this + 14) = &off_1E34ADA88;
    v6 = *(_OWORD *)((char *)a2 + 124);
    *(_OWORD *)((char *)this + 137) = *(_OWORD *)((char *)a2 + 137);
    *(_OWORD *)((char *)this + 124) = v6;
    *((_QWORD *)this + 14) = &off_1E34ADA60;
    *((_BYTE *)this + 160) = 1;
  }
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 216) = 0;
  if (*((_BYTE *)a2 + 216))
  {
    *((_BYTE *)this + 176) = *((_BYTE *)a2 + 176);
    *((_QWORD *)this + 21) = &off_1E34ADA88;
    v7 = *(_OWORD *)((char *)a2 + 180);
    *(_OWORD *)((char *)this + 193) = *(_OWORD *)((char *)a2 + 193);
    *(_OWORD *)((char *)this + 180) = v7;
    *((_QWORD *)this + 21) = &off_1E34ADA60;
    *((_BYTE *)this + 216) = 1;
  }
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 304) = 0;
  if (*((_BYTE *)a2 + 304))
  {
    v8 = *((_BYTE *)a2 + 232);
    *((_QWORD *)this + 28) = &off_1E34ADAD8;
    *((_BYTE *)this + 232) = v8;
    v9 = *((_OWORD *)a2 + 15);
    v10 = *((_OWORD *)a2 + 16);
    v11 = *((_OWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 281) = *(_OWORD *)((char *)a2 + 281);
    *((_OWORD *)this + 16) = v10;
    *((_OWORD *)this + 17) = v11;
    *((_OWORD *)this + 15) = v9;
    *((_QWORD *)this + 28) = &off_1E34ADAB0;
    *((_BYTE *)this + 304) = 1;
  }
  *((_BYTE *)this + 312) = 0;
  *((_BYTE *)this + 392) = 0;
  if (*((_BYTE *)a2 + 392))
  {
    *((_BYTE *)this + 320) = *((_BYTE *)a2 + 320);
    *((_QWORD *)this + 39) = &off_1E34ADAD8;
    v12 = *(_OWORD *)((char *)a2 + 328);
    v13 = *(_OWORD *)((char *)a2 + 344);
    v14 = *(_OWORD *)((char *)a2 + 360);
    *(_OWORD *)((char *)this + 369) = *(_OWORD *)((char *)a2 + 369);
    *(_OWORD *)((char *)this + 344) = v13;
    *(_OWORD *)((char *)this + 360) = v14;
    *(_OWORD *)((char *)this + 328) = v12;
    *((_QWORD *)this + 39) = &off_1E34ADAB0;
    *((_BYTE *)this + 392) = 1;
  }
  *((_BYTE *)this + 400) = 0;
  *((_BYTE *)this + 480) = 0;
  if (*((_BYTE *)a2 + 480))
  {
    *((_BYTE *)this + 408) = *((_BYTE *)a2 + 408);
    *((_QWORD *)this + 50) = &off_1E34ADAD8;
    v15 = *((_OWORD *)a2 + 26);
    v16 = *((_OWORD *)a2 + 27);
    v17 = *((_OWORD *)a2 + 28);
    *(_OWORD *)((char *)this + 457) = *(_OWORD *)((char *)a2 + 457);
    *((_OWORD *)this + 27) = v16;
    *((_OWORD *)this + 28) = v17;
    *((_OWORD *)this + 26) = v15;
    *((_QWORD *)this + 50) = &off_1E34ADAB0;
    *((_BYTE *)this + 480) = 1;
  }
  *((_BYTE *)this + 488) = 0;
  *((_BYTE *)this + 504) = 0;
  if (*((_BYTE *)a2 + 504))
  {
    *((_BYTE *)this + 496) = *((_BYTE *)a2 + 496);
    *((_QWORD *)this + 61) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 497) = *(_DWORD *)((char *)a2 + 497);
    *((_BYTE *)this + 504) = 1;
  }
  *((_BYTE *)this + 512) = 0;
  *((_BYTE *)this + 528) = 0;
  if (*((_BYTE *)a2 + 528))
  {
    *((_BYTE *)this + 520) = *((_BYTE *)a2 + 520);
    *((_QWORD *)this + 64) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 521) = *(_DWORD *)((char *)a2 + 521);
    *((_BYTE *)this + 528) = 1;
  }
  *((_BYTE *)this + 536) = 0;
  *((_BYTE *)this + 552) = 0;
  if (*((_BYTE *)a2 + 552))
  {
    *((_BYTE *)this + 544) = *((_BYTE *)a2 + 544);
    *((_QWORD *)this + 67) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 545) = *(_DWORD *)((char *)a2 + 545);
    *((_BYTE *)this + 552) = 1;
  }
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)this + 560, (uint64_t)a2 + 560);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)this + 616, (uint64_t)a2 + 616);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)this + 672, (uint64_t)a2 + 672);
  std::__optional_move_base<WebCore::StringConstraint,false>::__optional_move_base[abi:sn180100]((_BYTE *)this + 728, (uint64_t)a2 + 728);
  *((_BYTE *)this + 784) = 0;
  *((_BYTE *)this + 864) = 0;
  if (*((_BYTE *)a2 + 864))
  {
    *((_BYTE *)this + 792) = *((_BYTE *)a2 + 792);
    *((_QWORD *)this + 98) = &off_1E34ADAD8;
    v18 = *((_OWORD *)a2 + 50);
    v19 = *((_OWORD *)a2 + 51);
    v20 = *((_OWORD *)a2 + 52);
    *(_OWORD *)((char *)this + 841) = *(_OWORD *)((char *)a2 + 841);
    *((_OWORD *)this + 51) = v19;
    *((_OWORD *)this + 52) = v20;
    *((_OWORD *)this + 50) = v18;
    *((_QWORD *)this + 98) = &off_1E34ADAB0;
    *((_BYTE *)this + 864) = 1;
  }
  *((_BYTE *)this + 872) = 0;
  *((_BYTE *)this + 888) = 0;
  if (*((_BYTE *)a2 + 888))
  {
    *((_BYTE *)this + 880) = *((_BYTE *)a2 + 880);
    *((_QWORD *)this + 109) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 881) = *(_DWORD *)((char *)a2 + 881);
    *((_BYTE *)this + 888) = 1;
  }
  *((_BYTE *)this + 896) = 0;
  *((_BYTE *)this + 912) = 0;
  if (*((_BYTE *)a2 + 912))
  {
    *((_BYTE *)this + 904) = *((_BYTE *)a2 + 904);
    *((_QWORD *)this + 112) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 905) = *(_DWORD *)((char *)a2 + 905);
    *((_BYTE *)this + 912) = 1;
  }
  *((_BYTE *)this + 920) = 0;
  *((_BYTE *)this + 936) = 0;
  if (*((_BYTE *)a2 + 936))
  {
    *((_BYTE *)this + 928) = *((_BYTE *)a2 + 928);
    *((_QWORD *)this + 115) = &off_1E34ADB00;
    *(_DWORD *)((char *)this + 929) = *(_DWORD *)((char *)a2 + 929);
    *((_BYTE *)this + 936) = 1;
  }
  return this;
}

uint64_t WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v5;
  WebCore::MediaTrackConstraintSetMap *v6;
  unsigned int v7;
  const WebCore::MediaTrackConstraintSetMap *v8;
  uint64_t v9;

  v2 = result;
  v3 = *(_DWORD *)(a2 + 12);
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3)
    return v2;
  if (v3 < 0x456C7A)
  {
    v5 = 944 * v3;
    v6 = (WebCore::MediaTrackConstraintSetMap *)WTF::fastMalloc((WTF *)(944 * v3));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF0) / 0x3B0;
    *(_QWORD *)v2 = v6;
    v7 = *(_DWORD *)(a2 + 12);
    if (v7)
    {
      v8 = *(const WebCore::MediaTrackConstraintSetMap **)a2;
      v9 = 944 * v7;
      do
      {
        v6 = (WebCore::MediaTrackConstraintSetMap *)((char *)WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v6, v8)+ 944);
        v8 = (const WebCore::MediaTrackConstraintSetMap *)((char *)v8 + 944);
        v9 -= 944;
      }
      while (v9);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

WebCore::CAAudioStreamDescription *std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(WebCore::CAAudioStreamDescription *this, const AudioStreamBasicDescription *a2)
{
  _BYTE v4[24];
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  int v9;

  if (*((_BYTE *)this + 80))
  {
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4, a2);
    *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v4[8];
    *(_OWORD *)((char *)this + 24) = v5;
    *((_QWORD *)this + 5) = v6;
    *((_OWORD *)this + 3) = v7;
    *((_QWORD *)this + 8) = v8;
    *((_DWORD *)this + 18) = v9;
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v4);
  }
  else
  {
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription(this, a2);
    *((_BYTE *)this + 80) = 1;
  }
  return this;
}

unsigned int *WebKit::UserMediaCaptureManagerProxySourceProxy::queueAndProcessSerialAction(WTF::RunLoop *a1, uint64_t *a2)
{
  WTF::RunLoop *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *result;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  WTF::NativePromiseBase *v45;
  __int128 v46;
  const char *v47;
  uint64_t v48;
  unsigned int *v49;
  WTF::NativePromiseBase *v50[4];

  v3 = a1;
  v4 = *((_QWORD *)a1 + 170);
  v5 = (unsigned __int8 *)(v4 + 48);
  if (__ldaxr((unsigned __int8 *)(v4 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  a1 = (WTF::RunLoop *)MEMORY[0x19AEABB3C](v4 + 48);
LABEL_5:
  v7 = *(_DWORD *)(v4 + 64);
  if (v7)
  {
    if (v7 == 1)
      v8 = v4 + 56;
    else
      v8 = 0;
    v9 = *(unsigned __int8 *)(v8 + 1) == 0;
  }
  else
  {
    v9 = 0;
  }
  v10 = __ldxr(v5);
  if (v10 != 1)
  {
    __clrex();
LABEL_16:
    a1 = (WTF::RunLoop *)WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 48));
    if (v9)
      goto LABEL_14;
    goto LABEL_17;
  }
  if (__stlxr(0, v5))
    goto LABEL_16;
  if (v9)
  {
LABEL_14:
    (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)*a2 + 16))(&v49);
    goto LABEL_36;
  }
LABEL_17:
  v11 = (unsigned int *)*((_QWORD *)v3 + 170);
  v12 = WTF::RunLoop::main(a1);
  v13 = *a2;
  *a2 = 0;
  v14 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DC430;
  v15[1] = v13;
  *(_DWORD *)(v14 + 8) = 1;
  *(_QWORD *)(v14 + 16) = v12;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = "queueAndProcessSerialAction";
  *(_QWORD *)(v14 + 48) = 0;
  *(_WORD *)(v14 + 56) = 0;
  *(_QWORD *)v14 = off_1E34DC458;
  v16 = v11 + 2;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 72) = v15;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v44 = v11;
  v46 = 0uLL;
  v47 = "queueAndProcessSerialAction";
  v48 = 0;
  v50[0] = 0;
  v50[1] = 0;
  v50[2] = (WTF::NativePromiseBase *)"<completion promise>";
  v50[3] = 0;
  v18 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  v19 = *(unsigned int **)WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v18, (WTF::Logger::LogSiteIdentifier *)v50);
  if (v19)
  {
    v20 = v19 + 2;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  v49 = v19;
  v22 = (unsigned __int8 *)(v14 + 57);
  if (__ldaxr((unsigned __int8 *)(v14 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v22))
  {
    goto LABEL_26;
  }
  MEMORY[0x19AEABB3C](v22);
LABEL_26:
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(v14 + 64), v18);
  v24 = __ldxr(v22);
  if (v24 == 1)
  {
    if (!__stlxr(0, v22))
      goto LABEL_31;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v22);
LABEL_31:
  v45 = 0;
  v50[0] = (WTF::NativePromiseBase *)v14;
  WTF::NativePromise<void,void,0u>::maybeSettle((uint64_t)v44, v50, (WTF::Logger::LogSiteIdentifier *)&v46);
  v25 = (unsigned int *)v50[0];
  v50[0] = 0;
  if (v25)
  {
    v26 = v25 + 2;
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v25 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    }
  }
LABEL_36:
  v29 = v49;
  v49 = 0;
  result = (unsigned int *)*((_QWORD *)v3 + 170);
  *((_QWORD *)v3 + 170) = v29;
  if (!result)
    goto LABEL_45;
  v31 = result + 2;
  do
  {
    v32 = __ldaxr(v31);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v31));
  if (!v33)
  {
    atomic_store(1u, result + 2);
    (*(void (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
  }
  result = v49;
  v49 = 0;
  if (!result)
    goto LABEL_45;
  v34 = result + 2;
  do
  {
    v35 = __ldaxr(v34);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v34));
  if (!v36)
  {
    atomic_store(1u, result + 2);
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 16))(result);
    if (v9)
      return result;
  }
  else
  {
LABEL_45:
    if (v9)
      return result;
  }
  if (v45)
  {
    v50[0] = v45;
    WTF::NativePromise<void,void,0u>::maybeSettle((uint64_t)v44, v50, (WTF::Logger::LogSiteIdentifier *)&v46);
    v37 = (unsigned int *)v50[0];
    v50[0] = 0;
    if (v37)
    {
      v38 = v37 + 2;
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v37 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
      }
    }
  }
  result = v44;
  if (v44)
  {
    v41 = v44 + 2;
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      atomic_store(1u, v44 + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v44 + 16))(v44);
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_8FunctionIFNS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEEvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_SB_JST_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DC430;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_8FunctionIFNS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEEvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_SB_JST_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DC430;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIvvLj0EE11whenSettledINS_8FunctionIFNS_3RefIS3_NS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEEvEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedIvNS_6detail15VoidPlaceholderEEEE_SB_JST_EE4callEST_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34DC458;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB3C0;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34DC458;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34BB3C0;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  uint64_t *v19;
  void *v20;
  _QWORD v21[4];
  unsigned __int8 *v22;

  v6 = *(unsigned __int8 *)(a3 + 1);
  v21[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<void,void,0u>,char [11],void const*,char [2]>((uint64_t)v7, 4u, v9, " then() call made from ", (WTF::Logger::LogSiteIdentifier *)(a1 + 24), "[", a2, " callback:", (uint64_t)v21, "]");
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v22, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v21[0] = 0;
    v21[1] = 0;
    v21[2] = "<chained completion promise>";
    v21[3] = 0;
    WTF::NativePromise<void,void,0u>::chainTo(v22, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v21);
  }
  v14 = (unsigned int *)v22;
  v22 = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v19 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v19, v20);
  }
  return result;
}

uint64_t WTF::NativePromise<void,void,0u>::chainTo(unsigned __int8 *a1, unint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  NSObject *v25;
  WTF *v26;
  void *v27;
  char *v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t i;
  WTF::StringImpl *v39;
  int v40;
  WTF::StringImpl *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unsigned __int8 *v51;
  __int128 v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  WTF *v56[2];
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  uint8_t buf[4];
  char *v67;
  int v68;
  _DWORD v69[4];
  uint64_t v70;
  int v71;
  _DWORD v72[4];
  uint64_t v73;
  int v74;
  _DWORD v75[4];
  uint64_t v76;
  int v77;
  _QWORD v78[3];

  v5 = (uint64_t)a1;
  v78[1] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
LABEL_4:
    a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
    goto LABEL_5;
  }
  if (__stxr(1u, v6))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(v5 + 112) = 1;
  v8 = *(unsigned __int8 **)a2;
  if (*(_QWORD *)a2)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  v11 = *(unsigned int *)(v5 + 64);
  v12 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v12)
    v13 = v12[16] >= 4u;
  else
    v13 = 0;
  if (v13)
  {
    v14 = v12;
    WTF::Logger::LogSiteIdentifier::toString(a3);
    WTF::String::String((WTF::String *)&v63, " invoking chainTo() [");
    WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v5, &v62);
    WTF::String::String((WTF::String *)&v61, " chainedPromise:");
    WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString((uint64_t)v8, &v60);
    WTF::String::String((WTF::String *)&v59, " isNothing:");
    WTF::LogArgument<BOOL>::toString<BOOL>(&v58);
    WTF::String::String((WTF::String *)&v57, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v64, (uint64_t *)&v63, (uint64_t *)&v62, (uint64_t *)&v61, (uint64_t *)&v60, (uint64_t *)&v59, (uint64_t *)&v58, (uint64_t *)&v57, &v65);
    if (!v65)
    {
      __break(0xC471u);
      return result;
    }
    v17 = v57;
    v57 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v58;
    v58 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v59;
    v59 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v60;
    v60 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v16);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = v61;
    v61 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v16);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v62;
    v62 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v16);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v63;
    v63 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v16);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = v64;
    v64 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v16);
      else
        *(_DWORD *)v24 -= 2;
    }
    v25 = *((_QWORD *)v14 + 4);
    v26 = (WTF *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v26)
    {
      WTF::String::utf8();
      v28 = v56[0] ? (char *)v56[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v67 = v28;
      _os_log_impl(&dword_196BCC000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v26 = v56[0];
      v56[0] = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
          v26 = (WTF *)WTF::fastFree(v26, v27);
        else
          --*(_DWORD *)v26;
      }
    }
    if (*v14 && v14[16] >= 4u)
    {
      v29 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v30 = *v29;
        if ((v30 & 1) != 0)
          break;
        v31 = __ldaxr(v29);
        if (v31 == v30)
        {
          if (!__stxr(v30 | 1, v29))
          {
            v54 = a2;
            v32 = WTF::Logger::observers(v26);
            v33 = *(unsigned int *)(v32 + 12);
            if ((_DWORD)v33)
            {
              v34 = *(uint64_t **)v32;
              v55 = *(_QWORD *)v32 + 8 * v33;
              do
              {
                v35 = v11;
                v36 = *v34;
                *(_DWORD *)buf = 0;
                WTF::Logger::LogSiteIdentifier::toString(a3);
                v68 = 0;
                WTF::String::String((WTF::String *)v69, " invoking chainTo() [");
                v69[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(v5, &v70);
                v71 = 0;
                WTF::String::String((WTF::String *)v72, " chainedPromise:");
                v72[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString((uint64_t)v8, &v73);
                v74 = 0;
                WTF::String::String((WTF::String *)v75, " isNothing:");
                v75[2] = 0;
                WTF::LogArgument<BOOL>::toString<BOOL>(&v76);
                v77 = 0;
                WTF::String::String((WTF::String *)v78, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v56, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v36 + 16))(v36, v14, 4, v56);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v37);
                for (i = 120; i != -8; i -= 16)
                {
                  v39 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v39)
                  {
                    if (*(_DWORD *)v39 == 2)
                      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v27);
                    else
                      *(_DWORD *)v39 -= 2;
                  }
                }
                ++v34;
                v11 = v35;
              }
              while (v34 != (uint64_t *)v55);
            }
            v40 = __ldxr(v29);
            if (v40 == 1)
            {
              a2 = v54;
              if (!__stlxr(0, v29))
                break;
            }
            else
            {
              __clrex();
              a2 = v54;
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v41 = v65;
    v65 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
      {
        WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v27);
        if (!v8)
          goto LABEL_84;
        goto LABEL_80;
      }
      *(_DWORD *)v41 -= 2;
    }
  }
  if (!v8)
    goto LABEL_84;
LABEL_80:
  v42 = (unsigned int *)(v8 + 8);
  do
  {
    v43 = __ldaxr(v42);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v42));
  if (!v44)
  {
    atomic_store(1u, (unsigned int *)v8 + 2);
    (*(void (**)(unsigned __int8 *))(*(_QWORD *)v8 + 16))(v8);
  }
LABEL_84:
  v45 = atomic_load((unsigned __int8 *)(v5 + 113));
  result = (uint64_t)WTF::NativePromise<void,void,0u>::setDispatchMode(*(unsigned __int8 **)a2, v45, a3);
  if (*(_DWORD *)(v5 + 64))
  {
    result = (uint64_t)WTF::NativePromise<void,void,0u>::settleChainedPromise(v5, a2);
  }
  else
  {
    v46 = *(unsigned int *)(v5 + 108);
    if ((_DWORD)v46 == *(_DWORD *)(v5 + 104))
    {
      result = WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v5 + 96, v46 + 1, a2);
      v47 = *(_QWORD *)(v5 + 96) + 40 * *(unsigned int *)(v5 + 108);
      v48 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      *(_QWORD *)v47 = v48;
      v49 = *(_OWORD *)(result + 24);
      *(_OWORD *)(v47 + 8) = *(_OWORD *)(result + 8);
      *(_OWORD *)(v47 + 24) = v49;
    }
    else
    {
      v50 = *(_QWORD *)(v5 + 96) + 40 * v46;
      v51 = *(unsigned __int8 **)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v50 = v51;
      v52 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(v50 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v50 + 8) = v52;
    }
    ++*(_DWORD *)(v5 + 108);
  }
  v53 = __ldxr(v6);
  if (v53 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

_BYTE *WTF::NativePromise<void,void,0u>::setDispatchMode(unsigned __int8 *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *result;
  BOOL v9;
  int v10;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  result = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*result)
    v9 = result[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [39],WTF::NativePromise<void,void,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  atomic_store(a2, (unsigned __int8 *)(v5 + 113));
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

unint64_t WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t *WTF::Vector<WTF::NativePromiseProducer<void,void,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = (WTF *)*result;
      v4 = *((_DWORD *)result + 3);
      v5 = 40 * a2;
      result = (uint64_t *)WTF::fastMalloc((WTF *)(40 * a2));
      *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
      *v2 = (uint64_t)result;
      if (v4)
      {
        v7 = result;
        result = (uint64_t *)v3;
        do
        {
          v8 = *result;
          *result = 0;
          *v7 = v8;
          v9 = *(_OWORD *)(result + 1);
          *(_OWORD *)(v7 + 3) = *(_OWORD *)(result + 3);
          *(_OWORD *)(v7 + 1) = v9;
          result = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(result) + 5;
          v7 += 5;
        }
        while (result != (uint64_t *)((char *)v3 + 40 * v4));
      }
      if (v3)
      {
        if ((WTF *)*v2 == v3)
        {
          *v2 = 0;
          *((_DWORD *)v2 + 2) = 0;
        }
        return (uint64_t *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, WTF::Logger::LogSiteIdentifier *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  __int128 v6;

  v4 = WTF::fastMalloc((WTF *)0x78);
  v5 = (unsigned __int8 *)WTF::NativePromise<void,void,0u>::NativePromise(v4, a2);
  *(_QWORD *)a1 = v5;
  v6 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = v6;
  WTF::NativePromise<void,void,0u>::setDispatchMode(v5, 0, a2);
  return a1;
}

WTF::StringImpl *WTF::Logger::log<char [10],WTF::NativePromise<void,void,0u>>(uint64_t a1, unsigned int a2, char *a3, uint64_t a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  NSObject *v11;
  WTF *v12;
  void *v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t i;
  WTF::StringImpl *v25;
  int v26;
  WTF *v28[2];
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint8_t buf[16];
  int v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v30, a3);
  WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, &v29);
  *(_QWORD *)buf = v30;
  v28[0] = v29;
  result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)buf, (uint64_t *)v28, &v31);
  if (v31)
  {
    v9 = v29;
    v29 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v30;
    v30 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(NSObject **)(a1 + 32);
    v12 = (WTF *)os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v12)
    {
      WTF::String::utf8();
      v14 = v28[0] ? (char *)v28[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v12 = v28[0];
      v28[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 1)
          v12 = (WTF *)WTF::fastFree(v12, v13);
        else
          --*(_DWORD *)v12;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
    {
      v15 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v16 = *v15;
        if ((v16 & 1) != 0)
          break;
        v17 = __ldaxr(v15);
        if (v17 == v16)
        {
          if (!__stxr(v16 | 1, v15))
          {
            v18 = WTF::Logger::observers(v12);
            v19 = *(unsigned int *)(v18 + 12);
            if ((_DWORD)v19)
            {
              v20 = *(uint64_t **)v18;
              v21 = *(_QWORD *)v18 + 8 * v19;
              do
              {
                v22 = *v20;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], a3);
                v33 = 0;
                WTF::LogArgument<WTF::NativePromise<void,void,0u>>::toString(a4, v34);
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v28, (uint64_t)buf, 2uLL);
                (*(void (**)(uint64_t, uint64_t, _QWORD, WTF **))(*(_QWORD *)v22 + 16))(v22, a1, a2, v28);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v23);
                for (i = 24; i != -8; i -= 16)
                {
                  v25 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v25)
                  {
                    if (*(_DWORD *)v25 == 2)
                      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v13);
                    else
                      *(_DWORD *)v25 -= 2;
                  }
                }
                ++v20;
              }
              while (v20 != (uint64_t *)v21);
            }
            v26 = __ldxr(v15);
            if (v26 == 1)
            {
              if (!__stlxr(0, v15))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(WebCore::MediaConstraints &&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *a1 = off_1E34DC4A0;
  v3 = a1[124];
  a1[124] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 121), a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 94), v4);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 87), v5);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 80), v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 73), v7);
  v9 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(WebCore::MediaConstraints &&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)a1 = off_1E34DC4A0;
  v3 = *((_QWORD *)a1 + 124);
  *((_QWORD *)a1 + 124) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::MediaTrackConstraintSetMap,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 968, a2);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 752, v4);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 696, v5);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 640, v6);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 584, v7);
  v9 = (unsigned int *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  return WTF::fastFree(a1, v8);
}

WTF::Lock *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::applyConstraints(WebCore::MediaConstraints &&,WTF::CompletionHandler<void ()(std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&)>)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  _QWORD *v16;
  WTF::StringImpl *v17;
  const char *v18;
  uint64_t v19;

  v4 = a1[2];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = a1[1];
    v6 = *(_BYTE **)(v5 + 64);
    if (v6[112])
    {
      WebCore::RealtimeMediaSource::removeVideoFrameObserver();
      v7 = *(_QWORD *)(v5 + 64);
      v8 = a1[2];
      a1[2] = 0;
      v9 = a1[124];
      a1[124] = 0;
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v10 = &off_1E34DC4C8;
      v10[1] = v5;
      v10[2] = v8;
      v10[3] = a1 + 3;
      v10[4] = v9;
      v16 = v10;
      (*(void (**)(uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v7 + 184))(v7, a1 + 3, &v16);
      v11 = v16;
      v16 = 0;
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
    else
    {
      (*(void (**)(_BYTE *, _QWORD *, _QWORD *))(*(_QWORD *)v6 + 184))(v6, a1 + 3, a1 + 124);
    }
  }
  else
  {
    LOBYTE(v16) = 0;
    v17 = 0;
    LOBYTE(v18) = 1;
    v12 = a1[124];
    a1[124] = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 16))(v12, &v16);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if ((_BYTE)v18)
    {
      v14 = v17;
      v17 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  v16 = 0;
  v17 = 0;
  v18 = "operator()";
  v19 = 0;
  return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v16, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy16applyConstraintsEON7WebCore16MediaConstraintsENS_17CompletionHandlerIFvONSt3__18optionalINS4_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEEENUlvE_clEvEUlOT_E_vJSD_EED1Ev(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34DC4C8;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy16applyConstraintsEON7WebCore16MediaConstraintsENS_17CompletionHandlerIFvONSt3__18optionalINS4_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEEENUlvE_clEvEUlOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34DC4C8;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy16applyConstraintsEON7WebCore16MediaConstraintsENS_17CompletionHandlerIFvONSt3__18optionalINS4_19RealtimeMediaSource21ApplyConstraintsErrorEEEEEEENUlvE_clEvEUlOT_E_vJSD_EE4callESD_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  __int128 v11;
  char v12;
  char v13;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!*(_BYTE *)(a2 + 16))
    {
      WebKit::UserMediaCaptureManagerProxySourceProxy::updateVideoConstraints(*(_QWORD *)(a1 + 8), *(const WebCore::MediaTrackConstraintSetMap **)(a1 + 24));
      LOBYTE(v11) = 0;
      v13 = 0;
      std::__optional_storage_base<WebCore::RealtimeMediaSourceSettings,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::RealtimeMediaSourceSettings,false>>(v5 + 256, &v11);
      std::__optional_destruct_base<WebCore::RealtimeMediaSourceSettings,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v11, v6);
    }
    WebCore::RealtimeMediaSource::addVideoFrameObserver();
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    LOBYTE(v11) = 0;
    *((_QWORD *)&v11 + 1) = 0;
    v12 = 1;
    v9 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 16))(v9, &v11);
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v12)
    {
      result = (WTF::StringImpl *)*((_QWORD *)&v11 + 1);
      *((_QWORD *)&v11 + 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_QWORD *std::experimental::fundamentals_v3::unexpected<WTF::String>::unexpected<WTF::ASCIILiteral>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  if (a3)
  {
    if (a3 == 1)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v6;
    }
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSF_SE_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  WTF *result;

  v3 = *(WTF::StringImpl **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSF_SE_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromiseProducer<std::enable_if<true,void>>(uint64_t a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  __int128 v8;

  v6 = WTF::fastMalloc((WTF *)0x90);
  v7 = (unsigned __int8 *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(v6, a3);
  *(_QWORD *)a1 = v7;
  v8 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 24) = *((_OWORD *)a3 + 1);
  *(_OWORD *)(a1 + 8) = v8;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::setDispatchMode(v7, a2, a3);
  return a1;
}

_BYTE *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::setDispatchMode(unsigned __int8 *a1, unsigned __int8 a2, WTF::Logger::LogSiteIdentifier *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  _BYTE *result;
  BOOL v9;
  int v10;

  v5 = (uint64_t)a1;
  v6 = a1 + 48;
  if (__ldaxr(a1 + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  a1 = (unsigned __int8 *)MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  result = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*result)
    v9 = result[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)result, 4u, a3, " runSynchronouslyOnTarget ", v5);
  atomic_store(a2, (unsigned __int8 *)(v5 + 137));
  v10 = __ldxr(v6);
  if (v10 != 1)
  {
    __clrex();
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  if (__stlxr(0, v6))
    return (_BYTE *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::NativePromise(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  _BYTE *v4;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E34DC500;
  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  v4 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v4 && v4[16] >= 4u)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v4, 4u, "creating ", a1);
  return a1;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(uint64_t result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v1 = result;
  v2 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  v4 = *(unsigned int *)(v1 + 132);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(v1 + 120);
    v6 = 40 * v4;
    do
    {
      result = *v5;
      if (*v5)
        result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead();
      v5 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  v7 = __ldxr(v2);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  unsigned int *v1;
  void *v2;

  v1 = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(a1);
  return WTF::fastFree((WTF *)v1, v2);
}

unsigned int *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromise(unsigned int *a1)
{
  _BYTE *v2;
  BOOL v3;
  void *v4;
  void *v5;
  uint64_t v6;
  char v8;

  v2 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v2)
    v3 = v2[16] >= 4u;
  else
    v3 = 0;
  if (v3)
    WTF::Logger::log<char [10],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v2, 4u, "destroying ", (uint64_t)a1);
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead((uint64_t)a1);
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 30), v4);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 24), v5);
  v6 = a1[22];
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, unsigned int *))off_1E34DC518[v6])(&v8, a1 + 14);
  a1[22] = -1;
  return a1;
}

uint64_t WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)a1;
    v5 = 40 * v3;
    do
    {
      v4 = WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(v4)
         + 5;
      v5 -= 40;
    }
    while (v5);
  }
  v6 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34DC4E0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSS_1EJSJ_SN_SQ_EEEEEEDcSU_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::takePhoto(WebCore::PhotoSettings &&)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::NativePromise>,WTF::DefaultRefDerefTraits<WTF::NativePromise>>>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = off_1E34DC540;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 9);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::takePhoto(WebCore::PhotoSettings &&)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::NativePromise>,WTF::DefaultRefDerefTraits<WTF::NativePromise>>>::~CallableWrapper(uint64_t *a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = (uint64_t)off_1E34DC540;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 9);
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxySourceProxy::takePhoto(WebCore::PhotoSettings &&)::{lambda(void)#1},WTF::Ref<WTF::NativePromise<void,void,0u>,WTF::RawPtrTraits<WTF::NativePromise>,WTF::DefaultRefDerefTraits<WTF::NativePromise>>>::call@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  WTF::RunLoop *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t isSettled;
  uint64_t v23;
  WTF::NativePromiseBase *v24;
  _BYTE *v26;
  BOOL v27;
  int v28;
  WTF::NativePromiseBase *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::NativePromiseBase *v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  WTF::StringImpl *result;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  _BYTE *v51;
  _BYTE *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  NSObject *v57;
  uint64_t v58;
  void *v59;
  char *v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  void *v68;
  uint64_t i;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  uint64_t v74;
  WTF::Lock *v75;
  int v76;
  uint64_t v77;
  WTF *v78;
  __int128 v79;
  __int128 v80;
  WTF::Lock *v81[2];
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::NativePromiseBase *v86;
  __int128 v87;
  __int128 v88;
  uint8_t buf[16];
  __int128 v90;
  const char *v91;
  _QWORD v92[3];

  v92[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    v86 = 0;
    *(_QWORD *)&v87 = 0;
    *((_QWORD *)&v87 + 1) = "operator()";
    *(_QWORD *)&v88 = 0;
    isSettled = *(_QWORD *)(a1 + 72);
    if (isSettled)
    {
      isSettled = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(isSettled);
      v23 = *(_QWORD *)(a1 + 72);
      if (!(_DWORD)isSettled)
      {
        v24 = (WTF::NativePromiseBase *)(v23 + 48);
        v81[0] = (WTF::Lock *)(v23 + 48);
        LOBYTE(v81[1]) = 1;
        if (__ldaxr((unsigned __int8 *)(v23 + 48)))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v24))
        {
LABEL_58:
          v51 = (_BYTE *)WTF::NativePromiseBase::logChannel(v24);
          if (*v51)
          {
            v52 = v51;
            if (v51[16] >= 4u)
            {
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
              WTF::String::String((WTF::String *)&v83, " rejecting ");
              WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v23, &v82);
              WTF::makeString<WTF::String,WTF::String,WTF::String>((uint64_t *)&v84, (uint64_t *)&v83, (uint64_t *)&v82, &v85);
              v54 = v82;
              v82 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 2)
                  WTF::StringImpl::destroy(v54, v53);
                else
                  *(_DWORD *)v54 -= 2;
              }
              v55 = v83;
              v83 = 0;
              if (v55)
              {
                if (*(_DWORD *)v55 == 2)
                  WTF::StringImpl::destroy(v55, v53);
                else
                  *(_DWORD *)v55 -= 2;
              }
              v56 = v84;
              v84 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                  WTF::StringImpl::destroy(v56, v53);
                else
                  *(_DWORD *)v56 -= 2;
              }
              v57 = *((_QWORD *)v52 + 4);
              v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v58)
              {
                WTF::String::utf8();
                v60 = v78 ? (char *)v78 + 16 : 0;
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = v60;
                _os_log_impl(&dword_196BCC000, v57, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
                v58 = (uint64_t)v78;
                v78 = 0;
                if (v58)
                {
                  if (*(_DWORD *)v58 == 1)
                    v58 = WTF::fastFree((WTF *)v58, v59);
                  else
                    --*(_DWORD *)v58;
                }
              }
              if (*v52 && v52[16] >= 4u)
              {
                v61 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                while (1)
                {
                  v62 = *v61;
                  if ((v62 & 1) != 0)
                    break;
                  v63 = __ldaxr(v61);
                  if (v63 == v62)
                  {
                    if (!__stxr(v62 | 1, v61))
                    {
                      v64 = WTF::Logger::observers((WTF::Logger *)v58);
                      v65 = *(unsigned int *)(v64 + 12);
                      if ((_DWORD)v65)
                      {
                        v66 = *(uint64_t **)v64;
                        v77 = *(_QWORD *)v64 + 8 * v65;
                        do
                        {
                          v67 = *v66;
                          *(_DWORD *)buf = 0;
                          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v86);
                          LODWORD(v90) = 0;
                          WTF::String::String((WTF::String *)((char *)&v90 + 8), " rejecting ");
                          LODWORD(v91) = 0;
                          WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(v23, v92);
                          WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)&v78, (uint64_t)buf, 3uLL);
                          (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v67 + 16))(v67, v52, 4, &v78);
                          WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v68);
                          for (i = 40; i != -8; i -= 16)
                          {
                            v70 = *(WTF::StringImpl **)&buf[i];
                            *(_QWORD *)&buf[i] = 0;
                            if (v70)
                            {
                              if (*(_DWORD *)v70 == 2)
                                WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v59);
                              else
                                *(_DWORD *)v70 -= 2;
                            }
                          }
                          ++v66;
                        }
                        while (v66 != (uint64_t *)v77);
                      }
                      v71 = __ldxr(v61);
                      if (v71 == 1)
                      {
                        if (!__stlxr(0, v61))
                          break;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                      break;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              v72 = v85;
              v85 = 0;
              if (v72)
              {
                if (*(_DWORD *)v72 == 2)
                  WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v59);
                else
                  *(_DWORD *)v72 -= 2;
              }
            }
          }
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v73 = *(_QWORD *)buf;
          v74 = *(unsigned int *)(v23 + 88);
          if ((_DWORD)v74 != -1)
            ((void (*)(uint8_t *, uint64_t))off_1E34DC518[v74])(buf, v23 + 56);
          *(_QWORD *)(v23 + 56) = v73;
          *(_DWORD *)(v23 + 80) = 1;
          *(_DWORD *)(v23 + 88) = 1;
          WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll((_QWORD *)v23, (unsigned __int8 **)v81);
          if (!LOBYTE(v81[1]))
            goto LABEL_114;
          v75 = v81[0];
          v76 = __ldxr((unsigned __int8 *)v81[0]);
          if (v76 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v81[0]))
              goto LABEL_114;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(v75);
LABEL_114:
          *(_OWORD *)buf = 0uLL;
          v90 = (unint64_t)"operator()";
          return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)buf, a2);
        }
        v24 = (WTF::NativePromiseBase *)MEMORY[0x19AEABB3C]();
        goto LABEL_58;
      }
    }
    else
    {
      v23 = 0;
    }
    v26 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*v26)
      v27 = v26[16] >= 4u;
    else
      v27 = 0;
    if (v27)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v26, 4u, (WTF::Logger::LogSiteIdentifier *)&v86, " ignored already resolved or rejected ", v23);
    goto LABEL_114;
  }
  v5 = (WTF::RunLoop *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 64)
                                                                                                  + 160))(&v85, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64), a1 + 24);
  v6 = v85;
  v7 = WTF::RunLoop::main(v5);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  v79 = *(_OWORD *)(a1 + 80);
  v9 = *(_OWORD *)(a1 + 80);
  v80 = *(_OWORD *)(a1 + 96);
  v81[0] = 0;
  v81[1] = 0;
  v78 = 0;
  v10 = *(_OWORD *)(a1 + 96);
  v87 = v9;
  v88 = v10;
  v11 = WTF::fastMalloc((WTF *)0x50);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  v12 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v12 = off_1E34DC5D8;
  *(_QWORD *)(v12 + 8) = v8;
  v86 = 0;
  v13 = v88;
  *(_OWORD *)(v12 + 16) = v87;
  *(_OWORD *)(v12 + 32) = v13;
  *(_DWORD *)(v11 + 8) = 1;
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = "operator()";
  *(_QWORD *)(v11 + 48) = 0;
  *(_WORD *)(v11 + 56) = 0;
  *(_QWORD *)v11 = off_1E34DC600;
  v14 = (unsigned int *)((char *)v6 + 8);
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = v12;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)buf = v6;
  *(_QWORD *)&buf[8] = v11;
  v90 = *(_OWORD *)v81;
  v91 = "operator()";
  v92[0] = 0;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v86);
  v86 = 0;
  *(_QWORD *)&v87 = 0;
  *((_QWORD *)&v87 + 1) = "<completion promise>";
  *(_QWORD *)&v88 = 0;
  v16 = (uint64_t *)WTF::fastMalloc((WTF *)0x28);
  v17 = *(_QWORD *)WTF::NativePromiseProducer<void,void,0u>::NativePromiseProducer<std::enable_if<true,void>>((uint64_t)v16, (WTF::Logger::LogSiteIdentifier *)&v86);
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 + 1, v18));
    v11 = *(_QWORD *)&buf[8];
  }
  *a2 = v17;
  v20 = (unsigned __int8 *)(v11 + 57);
  if (__ldaxr((unsigned __int8 *)(v11 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v20))
  {
    goto LABEL_24;
  }
  MEMORY[0x19AEABB3C](v11 + 57);
LABEL_24:
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(v11 + 64), v16);
  v28 = __ldxr(v20);
  if (v28 != 1)
  {
    __clrex();
    goto LABEL_28;
  }
  if (__stlxr(0, v20))
LABEL_28:
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 57));
  v29 = *(WTF::NativePromiseBase **)&buf[8];
  *(_QWORD *)&buf[8] = 0;
  v86 = v29;
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(*(uint64_t *)buf, &v86, (WTF::Logger::LogSiteIdentifier *)&v90);
  v30 = (unsigned int *)v86;
  v86 = 0;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  v34 = *(WTF::NativePromiseBase **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    *(_QWORD *)&buf[8] = 0;
    v86 = v34;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(*(uint64_t *)buf, &v86, (WTF::Logger::LogSiteIdentifier *)&v90);
    v35 = (unsigned int *)v86;
    v86 = 0;
    if (v35)
    {
      v36 = v35 + 2;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        atomic_store(1u, v35 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
      }
    }
    v39 = *(unsigned int **)&buf[8];
    *(_QWORD *)&buf[8] = 0;
    if (v39)
    {
      v40 = v39 + 2;
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        atomic_store(1u, v39 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 8))(v39);
      }
    }
  }
  else
  {
    *(_QWORD *)&buf[8] = 0;
  }
  v43 = *(unsigned int **)buf;
  *(_QWORD *)buf = 0;
  if (v43)
  {
    v44 = v43 + 2;
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while (__stlxr(v46, v44));
    if (!v46)
    {
      atomic_store(1u, v43 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v43 + 16))(v43);
    }
  }
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer((uint64_t *)&v78);
  result = v85;
  v85 = 0;
  if (result)
  {
    v48 = (unsigned int *)((char *)result + 8);
    do
    {
      v49 = __ldaxr(v48);
      v50 = v49 - 1;
    }
    while (__stlxr(v50, v48));
    if (!v50)
    {
      atomic_store(1u, (unsigned int *)result + 2);
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

BOOL WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 88);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 != 0;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 != 0;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(_QWORD *__dst, unsigned __int8 **a2)
{
  _QWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  WTF::NativePromiseBase **v13;
  uint64_t v14;
  WTF::NativePromiseBase *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::NativePromiseBase **v23;
  uint64_t v24;
  uint64_t v25;

  v5 = __dst + 12;
  v4 = (_QWORD *)__dst[12];
  v20 = &v22;
  v21 = 1;
  v23 = (WTF::NativePromiseBase **)&v25;
  v24 = 1;
  if (v4 == __dst + 14)
  {
    v7 = *((unsigned int *)__dst + 27);
    memcpy(&v25, v4, 8 * v7);
  }
  else
  {
    __dst[12] = __dst + 14;
    v23 = (WTF::NativePromiseBase **)v4;
    v6 = *((_DWORD *)__dst + 26);
    LODWORD(v7) = *((_DWORD *)__dst + 27);
    *((_DWORD *)__dst + 26) = 1;
    LODWORD(v24) = v6;
  }
  *((_DWORD *)__dst + 27) = 0;
  HIDWORD(v24) = v7;
  WTF::VectorBuffer<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::FastMalloc>::adopt(v5, &v20);
  WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v8);
  v9 = __dst[15];
  v20 = (uint64_t *)v9;
  v10 = *((unsigned int *)__dst + 33);
  LODWORD(v21) = *((_DWORD *)__dst + 32);
  HIDWORD(v21) = v10;
  v19[0] = 0;
  __dst[15] = 0;
  v19[1] = 0;
  __dst[16] = 0;
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v11);
  if (HIDWORD(v24))
  {
    v13 = v23;
    v14 = 8 * HIDWORD(v24);
    do
    {
      v15 = *v13++;
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(v15, (uint64_t)__dst, a2);
      v14 -= 8;
    }
    while (v14);
  }
  if ((_DWORD)v10)
  {
    v16 = 40 * v10;
    do
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleChainedPromise((uint64_t)__dst, v9);
      v9 += 40;
      v16 -= 40;
    }
    while (v16);
  }
  WTF::Vector<WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v12);
  return WTF::Vector<WTF::Ref<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v17);
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD v20[3];
  int v21;
  char v22;

  v5 = a1;
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 137));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v12 = &off_1E34DC578;
      v12[1] = v5;
      v12[2] = v5;
      v12[3] = a2;
      v20[0] = v12;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v20);
      result = (unsigned __int8 *)v20[0];
      v20[0] = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v20[0] = v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)v20, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResultRunnable(a2, &v19);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v19 + 16))(v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    if (v21 != -1)
      ((void (*)(char *, _QWORD *))off_1E34DC4E0[v21])(&v22, v20);
    v21 = -1;
    v17 = v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult(a2, (uint64_t)v20);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, _QWORD *))(*(_QWORD *)v5 + 24))(v5, a2, v20);
    if (v21 != -1)
      ((void (*)(uint64_t *, _QWORD *))off_1E34DC4E0[v21])(&v19, v20);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

uint64_t *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleChainedPromise(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v13 = v2;
  v3 = *(_OWORD *)(a2 + 24);
  v14 = *(_OWORD *)(a2 + 8);
  v15 = v3;
  if (v2)
  {
    v4 = (unsigned int *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>((unsigned __int8 *)v2, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
    do
    {
      v6 = __ldaxr(v4);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v4));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v2 + 8));
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = "<chained promise>";
    v12 = 0;
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>(0, a1 + 56, (WTF::Logger::LogSiteIdentifier *)&v9);
  }
  return WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(&v13);
}

BOOL WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 88);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  if (*(_DWORD *)(v2 + 88) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  *a2 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  if (*(_DWORD *)(a1 + 88) != 1)
  {
    v8 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(v8, v9);
  }
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 24) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(a2, a1 + 56);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34DC4E0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34DC558[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_SE_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_SE_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34DC578;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34DC578;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  unsigned __int8 *v8;
  _QWORD v9[3];
  int v10;
  char v11;

  v1 = *a1;
  v2 = a1[2];
  if (*(_BYTE *)(*a1 + 56))
  {
    v9[0] = *a1;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result)
      v4 = result[16] >= 4u;
    else
      v4 = 0;
    if (v4)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)v9, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  }
  else
  {
    hasRunnable = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::hasRunnable(a1[2]);
    v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v8 + 16))(v9);
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      if (v10 != -1)
        ((void (*)(char *, _QWORD *))off_1E34DC4E0[v10])(&v11, v9);
      v10 = -1;
      result = v8;
      v8 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::takeResult(a1[2], (uint64_t)v9);
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v1 + 24))(v1, v7, v9);
      if (v10 != -1)
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, _QWORD *))off_1E34DC4E0[v10])(&v8, v9);
    }
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::settleAsChainedPromise<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage>(unsigned __int8 *a1, uint64_t a2, WTF::Logger::LogSiteIdentifier *a3)
{
  unsigned __int8 *v6;
  _BYTE *v8;
  BOOL v9;
  uint64_t result;
  int v11;
  unsigned __int8 *v12;

  v6 = a1 + 48;
  v12 = v6;
  if (__ldaxr(v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  v6 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
LABEL_5:
  v8 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v6);
  if (*v8)
    v9 = v8[16] >= 4u;
  else
    v9 = 0;
  if (v9)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v8, 4u, a3, " settling chained promise ", (uint64_t)a1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>,(std::__variant_detail::_Trait)1>>((uint64_t)(a1 + 56), a2);
  WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(a1);
  result = (uint64_t)v12;
  v11 = __ldxr(v12);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  }
  if (__stlxr(0, v12))
    return WTF::Lock::unlockSlow((WTF::Lock *)v12);
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 32);
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34DC518[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_1E34DC590[v4])(&v5, result, a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 32);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E34DC518[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(*a1, a2, a3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF13NativePromiseINS_4pairINS8_6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESF_Lj0EE7Storage8NoResultENSt12experimental15fundamentals_v38expectedISG_SF_EENS8_8FunctionIFSN_vEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISR_LNS0_6_TraitE1EEEEEvOT_EUlRSX_OT0_E_JRNS0_6__baseILSV_1EJSJ_SN_SQ_EEEOS15_EEEDcSX_DpT0_(unsigned int **a1, unsigned int **a2, unsigned int **a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>(*a1, a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 32) == 1)
    return std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::operator=(a2, a3);
  else
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__emplace[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(a1, a3);
}

uint64_t std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::operator=(uint64_t a1, uint64_t a2)
{
  _BYTE v4[24];
  int v5;
  char v6;

  v4[0] = 0;
  v5 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v4, a2);
  std::variant<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::swap[abi:sn180100]<true,0>((uint64_t)v4, a1);
  if (v5 != -1)
    ((void (*)(char *, _BYTE *))off_1E34DC4E0[v5])(&v6, v4);
  return a1;
}

uint64_t std::variant<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>::swap[abi:sn180100]<true,0>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v7;
  BOOL v8;
  uint64_t v9;
  _WORD v10[12];
  int v11;
  char v12;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 == -1)
  {
    v5 = *(_DWORD *)(a2 + 24);
    if (v5 == -1)
      return result;
    v10[0] = 0;
LABEL_11:
    v7 = *((unsigned __int8 *)v10 + v5);
    v8 = v7 == 0;
    if (v7)
      v9 = result;
    else
      v9 = a2;
    if (v8)
      v2 = result;
    v3 = v9;
    goto LABEL_17;
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5 != -1 && v5 == (_DWORD)v4)
    return ((uint64_t (*)(_WORD *, uint64_t, uint64_t))off_1E34DC5A8[v4])(v10, result, a2);
  v10[0] = 0;
  if (*((_BYTE *)v10 + v4))
  {
    v10[0] = 0;
    if (v5 != -1)
      goto LABEL_11;
  }
LABEL_17:
  LOBYTE(v10[0]) = 0;
  v11 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>((uint64_t)v10, v2);
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(v2, v3);
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(v3, (uint64_t)v10);
  if (v11 != -1)
    return ((uint64_t (*)(char *, _WORD *))off_1E34DC4E0[v11])(&v12, v10);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__impl<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34DC4E0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34DC5B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESD_EE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SD_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = v3;
  LODWORD(v3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = v3;
  v4 = a2[2];
  a2[2] = a3[2];
  a3[2] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__implIJNS_4pairIN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENS8_6StringEEESD_EE6__swapB8sn180100ERSF_EUlRT_RT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSE_SD_EEESQ_EEEDcSH_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  *a2 = *a3;
  *a3 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_6__implIJSF_SE_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SE_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_4pairIN3WTF6VectorIhLm0ENS9_15CrashOnOverflowELm16ENS9_10FastMallocEEENS9_6StringEEESE_EEEE19__generic_constructB8sn180100INS0_6__implIJSF_SE_EEEEEvRSH_OT_EUlRSM_OT0_E_JRNS0_6__baseILNS0_6_TraitE1EJSF_SE_EEEOSV_EEEDcSM_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__emplace[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34DC518[v4])(&v6, a1);
  *(_DWORD *)(a1 + 32) = -1;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(_DWORD *)(a1 + 32) = 1;
  return a1;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__assign_alt[abi:sn180100]<2ul,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  char v8;

  v4 = result;
  v5 = result[8];
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1E34DC518[v5])(&v8, result);
LABEL_6:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    v4[8] = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy9takePhotoEON7WebCore13PhotoSettingsEENUlvE_clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsIS10_EENS_21DefaultRefDerefTraitsIS10_EEEEJSX_EED1Ev(_QWORD *a1)
{
  *a1 = off_1E34DC5D8;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy9takePhotoEON7WebCore13PhotoSettingsEENUlvE_clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsIS10_EENS_21DefaultRefDerefTraitsIS10_EEEEJSX_EED0Ev(uint64_t *a1)
{
  void *v2;

  *a1 = (uint64_t)off_1E34DC5D8;
  WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

WTF::Lock *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledIZZN6WebKit39UserMediaCaptureManagerProxySourceProxy9takePhotoEON7WebCore13PhotoSettingsEENUlvE_clEvEUlOT_E_EEDaRNS_34RefCountedSerialFunctionDispatcherESK_RKNS_6Logger17LogSiteIdentifierEEUlONSt12experimental15fundamentals_v38expectedISA_S9_EEE_NS_3RefINS2_IvvLj0EEENS_12RawPtrTraitsIS10_EENS_21DefaultRefDerefTraitsIS10_EEEEJSX_EE4callESX_@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t isSettled;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _BYTE *v10;
  BOOL v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::Lock *v16;
  int v17;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  WTF::Lock *v25;
  char v26;
  char v27;

  v20[0] = 0;
  v20[1] = 0;
  v20[2] = "operator()";
  v20[3] = 0;
  isSettled = *(_QWORD *)(a1 + 8);
  if (!isSettled)
  {
    v7 = 0;
LABEL_6:
    v10 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)isSettled);
    if (*v10)
      v11 = v10[16] >= 4u;
    else
      v11 = 0;
    if (v11)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v10, 4u, (WTF::Logger::LogSiteIdentifier *)v20, " ignored already resolved or rejected ", (uint64_t)v7);
    goto LABEL_29;
  }
  isSettled = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::isSettled(isSettled);
  v7 = *(unsigned __int8 **)(a1 + 8);
  if ((_DWORD)isSettled)
    goto LABEL_6;
  v8 = v7 + 48;
  v25 = (WTF::Lock *)(v7 + 48);
  v26 = 1;
  if (__ldaxr(v7 + 48))
  {
    __clrex();
LABEL_13:
    v8 = (unsigned __int8 *)MEMORY[0x19AEABB3C]();
    goto LABEL_14;
  }
  if (__stxr(1u, v8))
    goto LABEL_13;
LABEL_14:
  v12 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)v8);
  if (*v12 && v12[16] >= 4u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [12],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>((uint64_t)v12, 4u, (WTF::Logger::LogSiteIdentifier *)v20, " settling ", (uint64_t)v7);
  v13 = *((_DWORD *)a2 + 6);
  if (v13 == 1)
  {
    WTF::String::isolatedCopy();
LABEL_21:
    LODWORD(v24) = v13;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::Storage::NoResult,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>,WTF::Function<std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String> ()(void)>>>::__emplace[abi:sn180100]<1ul,std::experimental::fundamentals_v3::expected<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String>>((uint64_t)(v7 + 56), (uint64_t)&v21);
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::dispatchAll(v7, (unsigned __int8 **)&v25);
    if ((_DWORD)v24 != -1)
      ((void (*)(char *, uint64_t *))off_1E34DC4E0[v24])(&v27, &v21);
    if (!v26)
      goto LABEL_29;
    v16 = v25;
    v17 = __ldxr((unsigned __int8 *)v25);
    if (v17 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v25))
        goto LABEL_29;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v16);
LABEL_29:
    v21 = 0;
    v22 = 0;
    v23 = "operator()";
    v24 = 0;
    return WTF::NativePromise<void,void,0u>::createAndResolve<std::enable_if<true,void>>((WTF::NativePromiseBase *)&v21, a3);
  }
  if (!v13)
  {
    v14 = *a2;
    v15 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    WTF::String::isolatedCopy();
    v21 = v14;
    v22 = v15;
    goto LABEL_21;
  }
  v19 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::Lock *)WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::~ThenCallback(v19);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34DC600;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC630;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34DC600;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC630;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<true,WTF::NativePromise<void,void,0u>>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t result;
  uint64_t *v19;
  void *v20;
  _QWORD v21[4];
  unsigned __int8 *v22;

  v6 = *(_DWORD *)(a3 + 24);
  v21[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>((uint64_t)v7, v9, (WTF::Logger::LogSiteIdentifier *)(a1 + 24), a2);
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(unsigned __int8 **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(&v22, *(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v21[0] = 0;
    v21[1] = 0;
    v21[2] = "<chained completion promise>";
    v21[3] = 0;
    WTF::NativePromise<void,void,0u>::chainTo(v22, (unint64_t)v12, (WTF::Logger::LogSiteIdentifier *)v21);
  }
  v14 = (unsigned int *)v22;
  v22 = 0;
  if (v14)
  {
    v15 = v14 + 2;
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v14 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v19 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v19, v20);
  }
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>(uint64_t a1, const char *a2, WTF::Logger::LogSiteIdentifier *a3, uint64_t a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  WTF *v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t i;
  WTF::StringImpl *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v35[2];
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  char *v46;
  int v47;
  _DWORD v48[8];
  _DWORD v49[4];
  uint64_t v50;
  int v51;
  _DWORD v52[8];
  _QWORD v53[3];

  v53[1] = *MEMORY[0x1E0C80C00];
  WTF::String::String((WTF::String *)&v43, a2);
  WTF::String::String((WTF::String *)&v42, " then() call made from ");
  WTF::Logger::LogSiteIdentifier::toString(a3);
  WTF::String::String((WTF::String *)&v40, "[");
  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v39);
  WTF::String::String((WTF::String *)&v38, " callback:");
  WTF::LogArgument<void const*>::toString();
  WTF::String::String((WTF::String *)&v36, "]");
  result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v43, (uint64_t *)&v42, (uint64_t *)&v41, (uint64_t *)&v40, (uint64_t *)&v39, (uint64_t *)&v38, (uint64_t *)&v37, (uint64_t *)&v36, &v44);
  if (v44)
  {
    v9 = v36;
    v36 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v8);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = v37;
    v37 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v8);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = v38;
    v38 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v8);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = v39;
    v39 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v8);
      else
        *(_DWORD *)v12 -= 2;
    }
    v13 = v40;
    v40 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v8);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v41;
    v41 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v42;
    v42 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v8);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v43;
    v43 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v8);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = *(NSObject **)(a1 + 32);
    v18 = (WTF *)os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v18)
    {
      WTF::String::utf8();
      v20 = v35[0] ? (char *)v35[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      v46 = v20;
      _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v18 = v35[0];
      v35[0] = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
          v18 = (WTF *)WTF::fastFree(v18, v19);
        else
          --*(_DWORD *)v18;
      }
    }
    if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= 4u)
    {
      v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v22 = *v21;
        if ((v22 & 1) != 0)
          break;
        v23 = __ldaxr(v21);
        if (v23 == v22)
        {
          if (!__stxr(v22 | 1, v21))
          {
            v33 = a1;
            v24 = WTF::Logger::observers(v18);
            v25 = *(unsigned int *)(v24 + 12);
            if ((_DWORD)v25)
            {
              v26 = *(uint64_t **)v24;
              v32 = *(_QWORD *)v24 + 8 * v25;
              do
              {
                v27 = *v26;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)((char *)&v46 + 4), a2);
                v47 = 0;
                WTF::String::String((WTF::String *)v48, " then() call made from ");
                v48[2] = 0;
                WTF::Logger::LogSiteIdentifier::toString(a3);
                v48[6] = 0;
                WTF::String::String((WTF::String *)v49, "[");
                v49[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a4, &v50);
                v51 = 0;
                WTF::String::String((WTF::String *)v52, " callback:");
                v52[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v52[6] = 0;
                WTF::String::String((WTF::String *)v53, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v35, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF **))(*(_QWORD *)v27 + 16))(v27, v33, 4, v35);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v35, v28);
                for (i = 120; i != -8; i -= 16)
                {
                  v30 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v30)
                  {
                    if (*(_DWORD *)v30 == 2)
                      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v30 -= 2;
                  }
                }
                ++v26;
              }
              while (v26 != (uint64_t *)v32);
            }
            v31 = __ldxr(v21);
            if (v31 == 1)
            {
              if (!__stlxr(0, v21))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    result = v44;
    v44 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::maybeSettle(uint64_t a1, WTF::NativePromiseBase **a2, WTF::Logger::LogSiteIdentifier *a3)
{
  WTF::Lock *v5;
  unsigned __int8 *result;
  unsigned __int8 *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  WTF *v19;
  void *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  void *v29;
  uint64_t i;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  WTF::NativePromiseBase *v36;
  int v37;
  uint64_t v38;
  WTF::Lock *v40;
  char v41;
  WTF *v42[2];
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  uint8_t buf[4];
  char *v53;
  int v54;
  _DWORD v55[4];
  uint64_t v56;
  int v57;
  _DWORD v58[8];
  _DWORD v59[4];
  uint64_t v60;
  int v61;
  _QWORD v62[3];

  v62[1] = *MEMORY[0x1E0C80C00];
  v5 = (WTF::Lock *)(a1 + 48);
  v40 = v5;
  v41 = 1;
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_4:
    v5 = (WTF::Lock *)MEMORY[0x19AEABB3C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_4;
LABEL_5:
  *(_BYTE *)(a1 + 136) = 1;
  result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(v5);
  if (*result)
  {
    v8 = result;
    if (result[16] >= 4u)
    {
      WTF::Logger::LogSiteIdentifier::toString(a3);
      WTF::String::String((WTF::String *)&v49, " invoking maybeSettle() [");
      WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, &v48);
      WTF::String::String((WTF::String *)&v47, " callback:");
      WTF::LogArgument<void const*>::toString();
      WTF::String::String((WTF::String *)&v45, " isNothing:");
      WTF::LogArgument<BOOL>::toString<BOOL>(&v44);
      WTF::String::String((WTF::String *)&v43, "]");
      result = (unsigned __int8 *)WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, (uint64_t *)&v43, &v51);
      if (!v51)
      {
        __break(0xC471u);
        return result;
      }
      v10 = v43;
      v43 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = v44;
      v44 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = v45;
      v45 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = v46;
      v46 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v9);
        else
          *(_DWORD *)v13 -= 2;
      }
      v14 = v47;
      v47 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v9);
        else
          *(_DWORD *)v14 -= 2;
      }
      v15 = v48;
      v48 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, v9);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = v49;
      v49 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v9);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = v50;
      v50 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v9);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = *((_QWORD *)v8 + 4);
      v19 = (WTF *)os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v19)
      {
        WTF::String::utf8();
        v21 = v42[0] ? (char *)v42[0] + 16 : 0;
        *(_DWORD *)buf = 136446210;
        v53 = v21;
        _os_log_impl(&dword_196BCC000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        v19 = v42[0];
        v42[0] = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 1)
            v19 = (WTF *)WTF::fastFree(v19, v20);
          else
            --*(_DWORD *)v19;
        }
      }
      if (*v8 && v8[16] >= 4u)
      {
        v22 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v23 = *v22;
          if ((v23 & 1) != 0)
            break;
          v24 = __ldaxr(v22);
          if (v24 == v23)
          {
            if (!__stxr(v23 | 1, v22))
            {
              v25 = WTF::Logger::observers(v19);
              v26 = *(unsigned int *)(v25 + 12);
              if ((_DWORD)v26)
              {
                v27 = *(uint64_t **)v25;
                v38 = *(_QWORD *)v25 + 8 * v26;
                do
                {
                  v28 = *v27;
                  *(_DWORD *)buf = 0;
                  WTF::Logger::LogSiteIdentifier::toString(a3);
                  v54 = 0;
                  WTF::String::String((WTF::String *)v55, " invoking maybeSettle() [");
                  v55[2] = 0;
                  WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a1, &v56);
                  v57 = 0;
                  WTF::String::String((WTF::String *)v58, " callback:");
                  v58[2] = 0;
                  WTF::LogArgument<void const*>::toString();
                  v58[6] = 0;
                  WTF::String::String((WTF::String *)v59, " isNothing:");
                  v59[2] = 0;
                  WTF::LogArgument<BOOL>::toString<BOOL>(&v60);
                  v61 = 0;
                  WTF::String::String((WTF::String *)v62, "]");
                  WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v42, (uint64_t)buf, 8uLL);
                  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, WTF **))(*(_QWORD *)v28 + 16))(v28, v8, 4, v42);
                  WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v29);
                  for (i = 120; i != -8; i -= 16)
                  {
                    v31 = *(WTF::StringImpl **)&buf[i];
                    *(_QWORD *)&buf[i] = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2)
                        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v20);
                      else
                        *(_DWORD *)v31 -= 2;
                    }
                  }
                  ++v27;
                }
                while (v27 != (uint64_t *)v38);
              }
              v32 = __ldxr(v22);
              if (v32 == 1)
              {
                if (!__stlxr(0, v22))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = (unsigned __int8 *)v51;
      v51 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (unsigned __int8 *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v20);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  if (*(_DWORD *)(a1 + 88))
  {
    result = WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallbackBase::dispatch(*a2, a1, (unsigned __int8 **)&v40);
  }
  else
  {
    v33 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v33 == *(_DWORD *)(a1 + 104))
    {
      result = (unsigned __int8 *)WTF::Vector<WTF::Ref<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase,WTF::RawPtrTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>,WTF::DefaultRefDerefTraits<WTF::NativePromise<WebCore::VideoPlaybackQualityMetrics,WebCore::PlatformMediaError,0u>::ThenCallbackBase>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 96, v33 + 1, (unint64_t)a2);
      v33 = *(unsigned int *)(a1 + 108);
      v34 = v33 + 1;
      v35 = *(_QWORD *)(a1 + 96);
      v36 = *(WTF::NativePromiseBase **)result;
      *(_QWORD *)result = 0;
    }
    else
    {
      v34 = v33 + 1;
      v35 = *(_QWORD *)(a1 + 96);
      v36 = *a2;
      *a2 = 0;
    }
    *(_QWORD *)(v35 + 8 * v33) = v36;
    *(_DWORD *)(a1 + 108) = v34;
  }
  if (v41)
  {
    result = (unsigned __int8 *)v40;
    v37 = __ldxr((unsigned __int8 *)v40);
    if (v37 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v40))
        return result;
    }
    else
    {
      __clrex();
    }
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t *WTF::NativePromiseProducer<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::~NativePromiseProducer(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *a1;
  if (v2)
  {
    WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::assertIsDead(v2);
    v3 = (unsigned int *)*a1;
    *a1 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v3 + 2);
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISA_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSI_E_vJSI_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DC660;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISA_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSI_E_vJSI_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DC660;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseINSt3__14pairINS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS_6StringEEES9_Lj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedISA_S9_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSI_E_vJSI_EE4callESI_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34DC688;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC630;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34DC688;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC630;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t *v12;
  int v13;
  uint64_t result;
  uint64_t *v15;
  void *v16;
  _QWORD v17[4];

  v6 = *(_DWORD *)(a3 + 24);
  v17[0] = a1;
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    if (v6)
      v9 = "Rejecting";
    else
      v9 = "Resolving";
    WTF::Logger::log<char [10],char [24],WTF::Logger::LogSiteIdentifier,char [2],WTF::NativePromise<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String>,WTF::String,0u>,char [11],void const*,char [2]>((uint64_t)v7, v9, (WTF::Logger::LogSiteIdentifier *)(a1 + 24), a2);
  }
  v10 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_14;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_14:
  v12 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    goto LABEL_18;
  }
  if (__stlxr(0, v10))
LABEL_18:
    WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = "<chained completion promise>";
    v17[3] = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v12, (WTF::NativePromiseBase *)v17);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v12)
  {
    v15 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v12);
    return WTF::fastFree((WTF *)v15, v16);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v2;

  if (*(_BYTE *)(a2 + 136))
  {
    v2 = *(WTF **)(a2 + 120);
    if (v2)
    {
      *(_QWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 128) = 0;
      WTF::fastFree(v2, (void *)a2);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DC6C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DC6C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore17PhotoCapabilitiesENS_6StringELj0EE11whenSettledINS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEEEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSD_E_vJSD_EE4callESD_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34DC6F0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC720;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34DC6F0;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC720;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  char *v44;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[16];
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD v60[4];
  uint64_t v61;
  int v62;
  _DWORD v63[8];
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 152);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v44 = (char *)v10;
    WTF::String::String((WTF::String *)&v53, v10);
    WTF::String::String((WTF::String *)&v52, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v50, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v49);
    WTF::String::String((WTF::String *)&v48, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v46, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v46;
    v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v47;
    v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v48;
    v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v51;
    v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v52;
    v52 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v53;
    v53 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = (WTF *)os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v45[0];
      v45[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v43 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v44);
                LODWORD(v56) = 0;
                WTF::String::String((WTF::String *)&v57, " then() call made from ");
                v58 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "[");
                v60[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v61);
                v62 = 0;
                WTF::String::String((WTF::String *)v63, " callback:");
                v63[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v31 + 16))(v31, v9, 4, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v32);
                for (i = 120; i != -8; i -= 16)
                {
                  v34 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v43);
            }
            v35 = __ldxr(v25);
            if (v35 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v54;
    v54 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v39 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v39)
  {
    *(_OWORD *)buf = 0uLL;
    v56 = "<chained completion promise>";
    v57 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v39, (WTF::NativePromiseBase *)buf);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
    v41 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v39);
    return WTF::fastFree((WTF *)v41, v42);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZN6WebKit28UserMediaCaptureManagerProxy16getPhotoSettingsENS_23ObjectIdentifierGenericINS3_33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSK_E_vJSK_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DC760;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZN6WebKit28UserMediaCaptureManagerProxy16getPhotoSettingsENS_23ObjectIdentifierGenericINS3_33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSK_E_vJSK_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DC760;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZNS_13NativePromiseIN7WebCore13PhotoSettingsENS_6StringELj0EE11whenSettledIZN6WebKit28UserMediaCaptureManagerProxy16getPhotoSettingsENS_23ObjectIdentifierGenericINS3_33RealtimeMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyEEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIS4_S5_EEEEEE3__0EEDaRNS_34RefCountedSerialFunctionDispatcherEOT_RKNS_6Logger17LogSiteIdentifierEEUlSK_E_vJSK_EE4callESK_(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<false,void>::~ThenCallback(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E34DC788;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC7B8;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_1E34DC788;
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  *(_QWORD *)a1 = off_1E34DC7B8;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<false,void>::disconnect(uint64_t a1)
{
  uint64_t result;

  *(_BYTE *)(a1 + 56) = 1;
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallback<false,void>::processResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  _BYTE *v7;
  BOOL v8;
  _BYTE *v9;
  const char *v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  NSObject *v21;
  WTF *v22;
  void *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  uint64_t i;
  WTF::StringImpl *v34;
  int v35;
  WTF::StringImpl *v36;
  unsigned __int8 *v37;
  uint64_t *v39;
  int v40;
  uint64_t *v41;
  void *v42;
  uint64_t v43;
  char *v44;
  WTF *v45[2];
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint8_t buf[16];
  const char *v56;
  uint64_t v57;
  int v58;
  int v59;
  _DWORD v60[4];
  uint64_t v61;
  int v62;
  _DWORD v63[8];
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a3 + 56);
  v7 = (_BYTE *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
  if (*v7)
    v8 = v7[16] >= 4u;
  else
    v8 = 0;
  if (v8)
  {
    v9 = v7;
    if (v6)
      v10 = "Rejecting";
    else
      v10 = "Resolving";
    v44 = (char *)v10;
    WTF::String::String((WTF::String *)&v53, v10);
    WTF::String::String((WTF::String *)&v52, " then() call made from ");
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
    WTF::String::String((WTF::String *)&v50, "[");
    WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v49);
    WTF::String::String((WTF::String *)&v48, " callback:");
    WTF::LogArgument<void const*>::toString();
    WTF::String::String((WTF::String *)&v46, "]");
    result = WTF::tryMakeString<WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v53, (uint64_t *)&v52, (uint64_t *)&v51, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v48, (uint64_t *)&v47, (uint64_t *)&v46, &v54);
    if (!v54)
    {
      __break(0xC471u);
      return result;
    }
    v13 = v46;
    v46 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = v47;
    v47 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    v15 = v48;
    v48 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v49;
    v49 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v12);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v50;
    v50 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v51;
    v51 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v12);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = v52;
    v52 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v12);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v53;
    v53 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v12);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *((_QWORD *)v9 + 4);
    v22 = (WTF *)os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v22)
    {
      WTF::String::utf8();
      v24 = v45[0] ? (char *)v45[0] + 16 : 0;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v24;
      _os_log_impl(&dword_196BCC000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      v22 = v45[0];
      v45[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 1)
          v22 = (WTF *)WTF::fastFree(v22, v23);
        else
          --*(_DWORD *)v22;
      }
    }
    if (*v9 && v9[16] >= 4u)
    {
      v25 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
      while (1)
      {
        v26 = *v25;
        if ((v26 & 1) != 0)
          break;
        v27 = __ldaxr(v25);
        if (v27 == v26)
        {
          if (!__stxr(v26 | 1, v25))
          {
            v28 = WTF::Logger::observers(v22);
            v29 = *(unsigned int *)(v28 + 12);
            if ((_DWORD)v29)
            {
              v30 = *(uint64_t **)v28;
              v43 = *(_QWORD *)v28 + 8 * v29;
              do
              {
                v31 = *v30;
                *(_DWORD *)buf = 0;
                WTF::String::String((WTF::String *)&buf[8], v44);
                LODWORD(v56) = 0;
                WTF::String::String((WTF::String *)&v57, " then() call made from ");
                v58 = 0;
                WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 24));
                v59 = 0;
                WTF::String::String((WTF::String *)v60, "[");
                v60[2] = 0;
                WTF::LogArgument<WTF::NativePromise<void,WebCore::PlatformMediaError,0u>>::toString(a2, &v61);
                v62 = 0;
                WTF::String::String((WTF::String *)v63, " callback:");
                v63[2] = 0;
                WTF::LogArgument<void const*>::toString();
                v63[6] = 0;
                WTF::String::String((WTF::String *)v64, "]");
                WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v45, (uint64_t)buf, 8uLL);
                (*(void (**)(uint64_t, _BYTE *, uint64_t, WTF **))(*(_QWORD *)v31 + 16))(v31, v9, 4, v45);
                WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v32);
                for (i = 120; i != -8; i -= 16)
                {
                  v34 = *(WTF::StringImpl **)&buf[i];
                  *(_QWORD *)&buf[i] = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v23);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                }
                ++v30;
              }
              while (v30 != (uint64_t *)v43);
            }
            v35 = __ldxr(v25);
            if (v35 == 1)
            {
              if (!__stlxr(0, v25))
                break;
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v36 = v54;
    v54 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v36 -= 2;
    }
  }
  v37 = (unsigned __int8 *)(a1 + 57);
  if (__ldaxr((unsigned __int8 *)(a1 + 57)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v37))
  {
    goto LABEL_80;
  }
  MEMORY[0x19AEABB3C](a1 + 57);
LABEL_80:
  v39 = *(uint64_t **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  std::unique_ptr<WTF::NativePromiseProducer<void,void,0u>>::reset[abi:sn180100]((uint64_t **)(a1 + 64), 0);
  v40 = __ldxr(v37);
  if (v40 == 1)
  {
    if (!__stlxr(0, v37))
      goto LABEL_85;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 57));
LABEL_85:
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 72) + 16))(*(_QWORD *)(a1 + 72), a3);
  if (v39)
  {
    *(_OWORD *)buf = 0uLL;
    v56 = "<chained completion promise>";
    v57 = 0;
    WTF::NativePromiseProducer<void,void,0u>::resolve<std::enable_if<true,void>>(v39, (WTF::NativePromiseBase *)buf);
  }
  result = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  if (v39)
  {
    v41 = WTF::NativePromiseProducer<void,void,0u>::~NativePromiseProducer(v39);
    return WTF::fastFree((WTF *)v41, v42);
  }
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::disconnect(uint64_t result)
{
  *(_BYTE *)(result + 56) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy(WebCore::AuthenticationChallenge &&,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&,WTF::WeakPtr<WebKit::SecKeyProxyStore,WTF::DefaultWeakPtrImpl,IPC::Connection<WTF::WeakPtr>> &&)::$_0,void,WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = off_1E34DC7E8;
  v3 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return a1;
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void *v6;

  *(_QWORD *)a1 = off_1E34DC7E8;
  v3 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)(a1 + 16));
  return WTF::fastFree((WTF *)a1, v6);
}

void WTF::Detail::CallableWrapper<WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy(WebCore::AuthenticationChallenge &&,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC>,WTF::DefaultRefDerefTraits<IPC>> &&,WTF::WeakPtr<WebKit::SecKeyProxyStore,WTF::DefaultWeakPtrImpl,IPC::Connection<WTF::WeakPtr>> &&)::$_0,void,WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&>::call(_QWORD *a1, char a2, WebCore::Credential *a3)
{
  uint64_t v6;
  WebKit::SecKeyProxyStore *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  void *v24;
  IPC::Encoder *v25;

  v6 = a1[3];
  if (v6)
  {
    v7 = *(WebKit::SecKeyProxyStore **)(v6 + 8);
    if (v7)
    {
      if (WebKit::SecKeyProxyStore::initialize(v7, a3))
      {
        WebKit::AuthenticationChallengeProxy::sendClientCertificateCredentialOverXpc(a1[2], *(_QWORD *)(a1[3] + 8), a1[1], a3);
        return;
      }
    }
  }
  v8 = a1 + 1;
  v9 = a1[2];
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 2;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v25 = (IPC::Encoder *)v10;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, v8);
  v11 = *(_QWORD *)(v10 + 544);
  v12 = v11 + 1;
  v13 = *(_QWORD *)(v10 + 552);
  if (v13 < v11 + 1)
  {
    v21 = (2 * v13 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v22 = v21;
      v21 *= 2;
    }
    while (v22 < v12);
    v23 = (char *)mmap(0, v22, 3, 4098, -1, 0);
    if (v23 == (char *)-1)
    {
      __break(0xC471u);
      return;
    }
    v14 = v23;
    memcpy(v23, *(const void **)(v10 + 528), *(_QWORD *)(v10 + 544));
    v24 = *(void **)(v10 + 528);
    if (v24 != (void *)(v10 + 16))
      munmap(v24, *(_QWORD *)(v10 + 552));
    *(_QWORD *)(v10 + 528) = v14;
    *(_QWORD *)(v10 + 552) = v22;
    v15 = *(_QWORD *)(v10 + 544);
  }
  else
  {
    v14 = *(char **)(v10 + 528);
    v15 = *(_QWORD *)(v10 + 544);
  }
  bzero(&v14[v15], v11 - v15);
  *(_QWORD *)(v10 + 544) = v12;
  v16 = (_BYTE *)(*(_QWORD *)(v10 + 528) + v11);
  *(_QWORD *)(v10 + 536) = v16 + 1;
  *v16 = a2;
  IPC::ArgumentCoder<WebCore::Credential,void>::encode((IPC::Encoder *)v10, a3);
  IPC::Connection::sendMessageImpl(v9, (uint64_t *)&v25, 0, 0);
  v18 = v25;
  v25 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v19, v20);
  }
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebKit::UserMediaCaptureManagerProxy::PageSources,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned __int8 *v48;
  uint64_t *result;
  uint64_t v50;
  uint64_t *v53;
  uint64_t v54;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 4);
    v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      v5 = v3 << (6 * v4 >= 2 * v3);
      goto LABEL_6;
    }
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = 8;
LABEL_6:
  v6 = WTF::fastMalloc((WTF *)(48 * v5 + 16));
  v8 = v6;
  v9 = v6 + 16;
  if (v5)
    bzero((void *)(v6 + 16), 48 * v5);
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    v10 = 0;
    v11 = 0;
    v12 = v3;
    v54 = v2;
    v50 = v3;
    while (1)
    {
      v13 = (uint64_t *)(v2 + 48 * v10);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v18 = *a1;
          v53 = v11;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v11 = (uint64_t *)(v18 + 48 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (*v11);
          v26 = v25;
          v27 = v18 + 48 * v25;
          v30 = *(_QWORD *)(v27 + 24);
          v29 = v27 + 24;
          v28 = v30;
          if (v30)
            WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v28, v7);
          v31 = *(unsigned __int8 **)(v29 - 16);
          *(_QWORD *)(v29 - 16) = 0;
          if (v31)
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v31, v7);
          *v11 = *v13;
          v32 = v2 + 48 * v10;
          v34 = *(_QWORD *)(v32 + 8);
          v33 = v32 + 8;
          *(_QWORD *)(v29 - 16) = v34;
          v35 = v18 + 48 * v26;
          v36 = *(_QWORD *)(v33 + 8);
          *(_OWORD *)v33 = 0u;
          *(_QWORD *)(v35 + 16) = v36;
          v37 = (unsigned __int8 *)(v35 + 40);
          *(_OWORD *)v29 = 0u;
          *(_BYTE *)(v29 + 16) = 0;
          LODWORD(v36) = __ldaxr((unsigned __int8 *)(v35 + 40));
          if ((_DWORD)v36)
          {
            __clrex();
            goto LABEL_28;
          }
          if (__stxr(1u, v37))
LABEL_28:
            MEMORY[0x19AEABB3C](v35 + 40);
          v38 = (unsigned __int8 *)(v2 + 48 * v10 + 40);
          if (__ldaxr(v38))
          {
            __clrex();
            goto LABEL_32;
          }
          if (__stxr(1u, v38))
LABEL_32:
            MEMORY[0x19AEABB3C](v2 + 48 * v10 + 40);
          v40 = (uint64_t *)(v33 + 16);
          v41 = *(_QWORD *)(v33 + 16);
          *(_QWORD *)(v33 + 16) = 0;
          v42 = *(_QWORD *)v29;
          *(_QWORD *)v29 = v41;
          if (v42)
            WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v42, v7);
          v43 = v54 + 48 * v10;
          v44 = *(_DWORD *)(v43 + 32);
          *(_DWORD *)(v43 + 32) = 0;
          *(_DWORD *)(v35 + 32) = v44;
          v45 = *(_DWORD *)(v43 + 36);
          *(_DWORD *)(v43 + 36) = 0;
          *(_DWORD *)(v35 + 36) = v45;
          v46 = __ldxr(v38);
          if (v46 == 1)
          {
            if (!__stlxr(0, v38))
            {
LABEL_40:
              v47 = __ldxr(v37);
              if (v47 == 1)
              {
                if (!__stlxr(0, v37))
                  goto LABEL_45;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)(v35 + 40));
LABEL_45:
              if (*v40)
                WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(*v40, v7);
              v48 = *(unsigned __int8 **)v33;
              *(_QWORD *)v33 = 0;
              v2 = v54;
              v12 = v50;
              if (v48)
                WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v48, v7);
              if (v13 != a2)
                v11 = v53;
              goto LABEL_51;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v38);
          goto LABEL_40;
        }
        v15 = v2 + 48 * v10;
        v16 = *(_QWORD *)(v15 + 24);
        if (v16)
          WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(v16, v7);
        v17 = *(unsigned __int8 **)(v15 + 8);
        *(_QWORD *)(v15 + 8) = 0;
        if (v17)
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v17, v7);
      }
LABEL_51:
      if (++v10 == v12)
        goto LABEL_54;
    }
  }
  v11 = 0;
  result = 0;
  if (v2)
  {
LABEL_54:
    WTF::fastFree((WTF *)(v2 - 16), v7);
    return v11;
  }
  return result;
}

uint64_t WTF::GenericHashTraits<WebKit::UserMediaCaptureManagerProxy::PageSources>::assignToEmpty<WebKit::UserMediaCaptureManagerProxy::PageSources,WebKit::UserMediaCaptureManagerProxy::PageSources>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  int v15;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(unsigned __int8 **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = (unsigned __int8 *)(a1 + 32);
  LODWORD(v6) = __ldaxr((unsigned __int8 *)(a1 + 32));
  if ((_DWORD)v6)
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEABB3C](a1 + 32);
LABEL_7:
  v8 = a2 + 32;
  if (__ldaxr(a2 + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEABB3C](a2 + 32);
LABEL_11:
  v10 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  if (result)
    result = WTF::HashTable<WebCore::RealtimeMediaSource const*,WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashMap<WebCore::RealtimeMediaSource const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WebCore::RealtimeMediaSource const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RealtimeMediaSource const*>>::deallocateTable(result, a2);
  v12 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v12;
  v13 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v13;
  v14 = __ldxr(v8);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_17;
  }
  if (__stlxr(0, v8))
LABEL_17:
    result = WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 32));
  v15 = __ldxr(v7);
  if (v15 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
  }
  if (__stlxr(0, v7))
    return WTF::Lock::unlockSlow((WTF::Lock *)(a1 + 32));
  return result;
}

uint64_t WTF::ThreadSafeWeakHashSet<WebCore::RealtimeMediaSource>::values(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t *v32;
  WTF::ThreadSafeWeakPtrControlBlock *v33;
  void *v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v3 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  v4 = a2 + 16;
  if (__ldaxr(a2 + 16))
  {
    __clrex();
LABEL_4:
    result = MEMORY[0x19AEABB3C](a2 + 16);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  v42 = 0;
  v43 = 0;
  if (!*(_QWORD *)a2 || (v6 = *(unsigned int *)(*(_QWORD *)a2 - 12), !(_DWORD)v6))
  {
    v12 = 0;
    goto LABEL_36;
  }
  if (v6 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
  LODWORD(v43) = v6;
  v42 = (uint64_t)v7;
  v8 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2 || !*(_DWORD *)(v8 - 12))
  {
    v12 = 0;
    goto LABEL_17;
  }
  v9 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = *(_QWORD *)a2;
    while ((unint64_t)(*(_QWORD *)v11 + 1) <= 1)
    {
      v11 += 16;
      v10 -= 16;
      if (!v10)
        goto LABEL_32;
    }
  }
  else
  {
    v11 = *(_QWORD *)a2;
  }
  v13 = v8 + 16 * v9;
  if (v13 == v11)
  {
LABEL_32:
    v12 = 0;
    LODWORD(v14) = 0;
  }
  else
  {
    v12 = 0;
    LODWORD(v14) = 0;
    v15 = *(_QWORD *)v11;
LABEL_21:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::LibWebRTCCodecsProxy>(&v45, *(WTF::Lock **)(v11 + 8), v15);
    if (v45)
    {
      v44 = v45;
      if ((_DWORD)v14 == (_DWORD)v43)
      {
        v16 = (uint64_t *)WTF::Vector<WTF::Ref<WebCore::ApplePayError,WTF::RawPtrTraits<WebCore::ApplePayError>,WTF::DefaultRefDerefTraits<WebCore::ApplePayError>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v42, v14 + 1, (unint64_t)&v44);
        v14 = HIDWORD(v43);
        v7 = (WTF *)v42;
        v17 = *v16;
        *v16 = 0;
        *((_QWORD *)v7 + v14) = v17;
      }
      else
      {
        v44 = 0;
        *((_QWORD *)v7 + v14) = v45;
      }
      LODWORD(v14) = v14 + 1;
      HIDWORD(v43) = v14;
      v18 = v44;
      v44 = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 144))(v18);
    }
    else
    {
      v12 = 1;
    }
    while (1)
    {
      v11 += 16;
      if (v11 == v13)
        break;
      v15 = *(_QWORD *)v11;
      if ((unint64_t)(*(_QWORD *)v11 + 1) > 1)
      {
        if (v11 != v13)
          goto LABEL_21;
        break;
      }
    }
    LODWORD(v6) = v43;
  }
  if (v6 > v14)
  {
    if ((_DWORD)v14)
    {
      LODWORD(v43) = v14;
      v42 = WTF::fastRealloc(v7, (void *)(8 * v14));
      goto LABEL_36;
    }
    if (v7)
    {
LABEL_17:
      v42 = 0;
      LODWORD(v43) = 0;
      WTF::fastFree(v7, a2);
    }
  }
LABEL_36:
  v19 = *(unsigned int *)(v3 + 12);
  v20 = *(WTF **)v3;
  if ((_DWORD)v19)
  {
    v21 = 8 * v19;
    v22 = *(WTF **)v3;
    do
    {
      v23 = *(_QWORD *)v22;
      *(_QWORD *)v22 = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
      v22 = (WTF *)((char *)v22 + 8);
      v21 -= 8;
    }
    while (v21);
  }
  if (v20)
    WTF::fastFree(v20, a2);
  *(_QWORD *)v3 = v42;
  v24 = v43;
  v42 = 0;
  v43 = 0;
  *(_QWORD *)(v3 + 8) = v24;
  result = WTF::Vector<WTF::Ref<WebCore::RealtimeMediaSource,WTF::RawPtrTraits<WebCore::RealtimeMediaSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeMediaSource>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, a2);
  v25 = *(_QWORD *)a2;
  if (v12)
  {
    if (v25)
    {
      v26 = *(_DWORD *)(v25 - 4);
      if (!v26)
        goto LABEL_65;
      v27 = 0;
      v28 = v26 - 1;
      do
      {
        v29 = v28;
        v30 = (_QWORD *)(v25 + 16 * v28);
        if ((unint64_t)(*v30 + 1) >= 2)
        {
          v31 = v25 + 16 * v28;
          v33 = *(WTF::ThreadSafeWeakPtrControlBlock **)(v31 + 8);
          v32 = (uint64_t *)(v31 + 8);
          result = WTF::ThreadSafeWeakPtrControlBlock::objectHasStartedDeletion(v33);
          if ((_DWORD)result)
          {
            *v30 = -1;
            result = *v32;
            *v32 = 0;
            if (result)
              result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v34);
            ++v27;
          }
        }
        --v28;
      }
      while (v29);
      v25 = *(_QWORD *)a2;
      if (v27)
      {
        *(_DWORD *)(v25 - 16) += v27;
        v35 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
          v36 = *(_DWORD *)(v35 - 12);
        else
          v36 = 0;
        *(_DWORD *)(v35 - 12) = v36 - v27;
        v25 = *(_QWORD *)a2;
      }
      if (v25)
      {
        v37 = *(_DWORD *)(v25 - 4);
        if (v37 >= 9 && 6 * *(_DWORD *)(v25 - 12) < v37)
        {
          result = WTF::HashTable<WebKit::ProcessAndUIAssertion const*,WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashMap<WebKit::ProcessAndUIAssertion const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::ProcessAndUIAssertion const*>>::shrinkToBestSize((uint64_t *)a2);
          v25 = *(_QWORD *)a2;
          goto LABEL_67;
        }
LABEL_65:
        *((_DWORD *)a2 + 2) = 0;
        goto LABEL_68;
      }
    }
    v39 = 0;
    *((_DWORD *)a2 + 2) = 0;
LABEL_71:
    v40 = v39;
    goto LABEL_72;
  }
LABEL_67:
  *((_DWORD *)a2 + 2) = 0;
  if (!v25)
  {
    v39 = 0;
    goto LABEL_71;
  }
LABEL_68:
  v39 = *(_DWORD *)(v25 - 12);
  v40 = 0x7FFFFFFF;
  if (v39 < 0x7FFFFFFF)
    goto LABEL_71;
LABEL_72:
  *((_DWORD *)a2 + 3) = 2 * v40;
  v41 = __ldxr(v4);
  if (v41 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;

  v3 = *a1;
  if (*a1 && (v5 = *(_DWORD *)(v3 - 4)) != 0)
    v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  else
    v4 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v4, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 16 * v11);
      v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          v17 = *a1;
          if (*a1)
            v18 = *(_DWORD *)(v17 - 8);
          else
            v18 = 0;
          v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          v22 = v18 & ((v21 >> 31) ^ v21);
          v23 = 1;
          do
          {
            v24 = v22;
            v25 = *(_QWORD *)(v17 + 16 * v22);
            v22 = (v22 + v23++) & v18;
          }
          while (v25);
          v26 = (uint64_t *)(v17 + 16 * v24);
          v27 = v26[1];
          v26[1] = 0;
          if (v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
          *v26 = *v13;
          v28 = v6 + 16 * v11;
          v29 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          v26[1] = v29;
          v30 = *(_QWORD *)(v28 + 8);
          *(_QWORD *)(v28 + 8) = 0;
          if (v30)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          if (v13 == a3)
            v12 = v26;
        }
        else
        {
          v15 = v6 + 16 * v11;
          v16 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)(v15 + 8) = 0;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_1,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E34DC810;
  v3 = (unsigned int *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[1];
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_1,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E34DC810;
  v3 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_1,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::call(uint64_t a1, char *a2)
{
  char v2;
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _OWORD v10[12];
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[22];
  __int16 v17;
  uint64_t *v18;
  char v19;
  char v20;

  if (!a2[16])
    return WebKit::UserMediaCaptureManagerProxy::createMediaSourceForCaptureDeviceWithConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::CaptureDevice const&,WebCore::MediaDeviceHashSalts &&,WebCore::MediaConstraints &&,BOOL,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(WebCore::CaptureSourceError const&,WebCore::RealtimeMediaSourceSettings const&,WebCore::RealtimeMediaSourceCapabilities const&)> &&)::$_0::operator()(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (WebKit::UserMediaCaptureManagerProxySourceProxy **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  v2 = *a2;
  v18 = 0;
  v19 = 4;
  v20 = v2;
  v14 = 4;
  v12 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  v17 = 0;
  v15 = 0x3FF0000000000000;
  memset(v16, 0, sizeof(v16));
  memset(v10, 0, sizeof(v10));
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, uint64_t **, _OWORD *, _OWORD *))(*(_QWORD *)v3 + 16))(v3, &v18, v11, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::RealtimeMediaSourceCapabilities::~RealtimeMediaSourceCapabilities((WebCore::RealtimeMediaSourceCapabilities *)v10, v4);
  v6 = (WTF::StringImpl *)*((_QWORD *)&v13 + 1);
  *((_QWORD *)&v13 + 1) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v8 = (WTF::StringImpl *)v13;
  *(_QWORD *)&v13 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v5);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)&v12 + 1);
  *((_QWORD *)&v12 + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v5);
    else
      *(_DWORD *)v9 -= 2;
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t *result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  ++*(_DWORD *)(*a1 - 16);
  v4 = *a1;
  if (*a1)
    v5 = *(_DWORD *)(v4 - 12) - 1;
  else
    v5 = -1;
  *(_DWORD *)(v4 - 12) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = 6 * *(_DWORD *)(v6 - 12);
    v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::UserMediaCaptureManagerProxySourceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v8 >> 1, 0);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::applyConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraints &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34DC838;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::applyConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraints &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34DC838;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

char *WTF::Detail::CallableWrapper<WebKit::UserMediaCaptureManagerProxy::applyConstraints(WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WebCore::MediaConstraints &&)::$_0,void,std::optional<WebCore::RealtimeMediaSource::ApplyConstraintsError> &&>::call(char *result, char *a2)
{
  uint64_t v2;
  char *v4;
  int v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  int *v9;
  uint64_t v10;
  void *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v14;
  char v15;
  _BYTE *v16;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v4 = result;
    v5 = a2[16];
    result = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)result + 1) + 24) + 32))(*(_QWORD *)(*((_QWORD *)result + 1) + 24));
    v6 = (uint64_t)result;
    if (v5)
    {
      if (a2[16])
      {
        v7 = *a2;
        v14 = (IPC::Encoder *)(v4 + 24);
        v15 = v7;
        v16 = a2 + 8;
        return IPC::Connection::send<Messages::UserMediaCaptureManager::ApplyConstraintsFailed>((uint64_t)result, (uint64_t)&v14);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      v8 = (uint64_t *)(v4 + 24);
      v9 = (int *)WebKit::UserMediaCaptureManagerProxySourceProxy::settings(*((WebKit::UserMediaCaptureManagerProxySourceProxy **)v4
                                                                            + 4));
      v10 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v10 = 1476;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 528) = v10 + 16;
      *(_QWORD *)(v10 + 536) = v10 + 16;
      *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v10 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
      v14 = (IPC::Encoder *)v10;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v10, v8);
      IPC::ArgumentCoder<WebCore::RealtimeMediaSourceSettings,void>::encode((IPC::Encoder *)v10, v9);
      IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v14, 0, 0);
      result = (char *)v14;
      v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v11);
        return (char *)WTF::fastFree(v12, v13);
      }
    }
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  unsigned __int8 *v21;
  _BYTE v22[144];
  int v23;
  uint64_t v24;

  v5 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 265));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E34DC870;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v21 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v21);
      result = v21;
      v21 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v21 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v21, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResultRunnable(a2, &v19);
    (*(void (**)(unsigned __int8 **__return_ptr))(*(_QWORD *)v19 + 16))(&v21);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v21);
    if (v23 != -1)
      ((void (*)(char *, _BYTE *))off_1E34DC6A8[v23])(&v20, v22);
    v23 = -1;
    v17 = v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult(a2, (uint64_t)&v21);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v21);
    if (v23 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E34DC6A8[v23])(&v19, v22);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

BOOL WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 216);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  if (*(_DWORD *)(v2 + 216) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  *a2 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  if (*(_DWORD *)(a1 + 216) != 1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v9, v10);
  }
  *(_BYTE *)(a2 + 8) = 0;
  v6 = a2 + 8;
  *(_DWORD *)(v6 + 144) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(v6, a1 + 64);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoCapabilities,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 144);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34DC6A8[v4])(&v7, result);
  *(_DWORD *)(v3 + 144) = -1;
  v5 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34DC850[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 144) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v3 = *a3;
  v4 = a3[1];
  v5 = a3[3];
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = v3;
  *(_OWORD *)(a2 + 16) = v4;
  v6 = a3[4];
  v7 = a3[5];
  v8 = a3[6];
  *(_BYTE *)(a2 + 112) = *((_BYTE *)a3 + 112);
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  *(_OWORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  if (*((_BYTE *)a3 + 136))
  {
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    v9 = *((_QWORD *)a3 + 15);
    *((_QWORD *)a3 + 15) = 0;
    *(_QWORD *)(a2 + 120) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 32);
    *((_DWORD *)a3 + 32) = 0;
    *(_DWORD *)(a2 + 128) = v9;
    LODWORD(v9) = *((_DWORD *)a3 + 33);
    *((_DWORD *)a3 + 33) = 0;
    *(_DWORD *)(a2 + 132) = v9;
    *(_BYTE *)(a2 + 136) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore17PhotoCapabilitiesEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34DC870;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34DC870;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  unsigned __int8 *v8;
  char v9;
  uint64_t v10;
  _BYTE v11[144];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = a1[2];
  if (*(_BYTE *)(*a1 + 56))
  {
    v10 = *a1;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result)
      v4 = result[16] >= 4u;
    else
      v4 = 0;
    if (v4)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  }
  else
  {
    hasRunnable = WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::hasRunnable(a1[2]);
    v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 16))(&v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1)
        ((void (*)(char *, _BYTE *))off_1E34DC6A8[v12])(&v9, v11);
      v12 = -1;
      result = v8;
      v8 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WTF::NativePromise<WebCore::PhotoCapabilities,WTF::String,0u>::takeResult(v7, (uint64_t)&v10);
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1)
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, _BYTE *))off_1E34DC6A8[v12])(&v8, v11);
    }
  }
  return result;
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromiseBase *a1, uint64_t a2, unsigned __int8 **a3)
{
  WTF::NativePromiseBase *v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned __int8 *result;
  BOOL v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  unsigned __int8 *v21;
  _BYTE v22[48];
  int v23;
  uint64_t v24;

  v5 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 2))
  {
    v6 = atomic_load((unsigned __int8 *)(a2 + 169));
    if (v6 != 1
      || (a1 = (WTF::NativePromiseBase *)(*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD **)a1 + 2)),
          !(_DWORD)a1))
    {
      v7 = *((_QWORD *)v5 + 2);
      v8 = (unsigned int *)((char *)v5 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      v10 = (unsigned int *)(a2 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      v12 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v12 = &off_1E34DC8A8;
      *((_QWORD *)v12 + 1) = v5;
      *((_QWORD *)v12 + 2) = v5;
      *((_QWORD *)v12 + 3) = a2;
      v21 = v12;
      (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v7 + 16))(v7, &v21);
      result = v21;
      v21 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      return result;
    }
  }
  if (*((_BYTE *)v5 + 56))
  {
    v21 = (unsigned __int8 *)v5;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel(a1);
    if (*result)
      v14 = result[16] >= 4u;
    else
      v14 = 0;
    if (v14)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", a2, " aborting [callback:", (int)&v21, " callSite:", (WTF::NativePromiseBase *)((char *)v5 + 24), "]");
    return result;
  }
  v15 = *a3;
  v16 = __ldxr(*a3);
  if (v16 == 1)
  {
    if (!__stlxr(0, v15))
      goto LABEL_23;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v15);
LABEL_23:
  if (WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::hasRunnable(a2))
  {
    WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResultRunnable(a2, &v19);
    (*(void (**)(unsigned __int8 **__return_ptr))(*(_QWORD *)v19 + 16))(&v21);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v21);
    if (v23 != -1)
      ((void (*)(char *, _BYTE *))off_1E34DC740[v23])(&v20, v22);
    v23 = -1;
    v17 = v19;
    v19 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  else
  {
    WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult(a2, (uint64_t)&v21);
    (*(void (**)(WTF::NativePromiseBase *, uint64_t, unsigned __int8 **))(*(_QWORD *)v5 + 24))(v5, a2, &v21);
    if (v23 != -1)
      ((void (*)(uint64_t *, _BYTE *))off_1E34DC740[v23])(&v19, v22);
  }
  result = *a3;
  if (__ldaxr(*a3))
  {
    __clrex();
  }
  else if (!__stxr(1u, result))
  {
    return result;
  }
  return (unsigned __int8 *)MEMORY[0x19AEABB3C]();
}

BOOL WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::hasRunnable(uint64_t a1)
{
  unsigned __int8 *v2;
  int v4;
  int v5;

  v2 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  v4 = *(_DWORD *)(a1 + 120);
  v5 = __ldxr(v2);
  if (v5 == 1)
  {
    if (!__stlxr(0, v2))
      return v4 == 2;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return v4 == 2;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResultRunnable@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v2 = result;
  v4 = (unsigned __int8 *)(result + 48);
  if (__ldaxr((unsigned __int8 *)(result + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEABB3C](result + 48);
LABEL_5:
  if (*(_DWORD *)(v2 + 120) != 2)
  {
    v7 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult(v7);
  }
  v6 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;
  *a2 = v6;
  LODWORD(v6) = __ldxr(v4);
  if ((_DWORD)v6 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v4 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C](a1 + 48);
LABEL_5:
  if (*(_DWORD *)(a1 + 120) != 1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v9, v10);
  }
  *(_BYTE *)(a2 + 8) = 0;
  v6 = a2 + 8;
  *(_DWORD *)(v6 + 48) = -1;
  result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(v6, a1 + 64);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::PhotoSettings,WTF::String>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 48);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34DC740[v4])(&v7, result);
  *(_DWORD *)(v3 + 48) = -1;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34DC888[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore13PhotoSettingsEN3WTF6StringEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJS9_SB_EEEOSR_EEEDcSJ_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  *a1 = &off_1E34DC8A8;
  v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
    }
  }
  v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v6 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34DC8A8;
  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
  {
    v8 = v7 + 2;
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v7 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()((uint64_t *)(a1 + 8));
}

unsigned __int8 *WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::ThenCallbackBase::dispatch(WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>&,WTF::Locker<WTF::Lock,void> &)::{lambda(void)#1}::operator()(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *result;
  BOOL v4;
  _BOOL4 hasRunnable;
  uint64_t v7;
  unsigned __int8 *v8;
  char v9;
  uint64_t v10;
  _BYTE v11[48];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = a1[2];
  if (*(_BYTE *)(*a1 + 56))
  {
    v10 = *a1;
    result = (unsigned __int8 *)WTF::NativePromiseBase::logChannel((WTF::NativePromiseBase *)a1);
    if (*result)
      v4 = result[16] >= 4u;
    else
      v4 = 0;
    if (v4)
      return (unsigned __int8 *)WTF::Logger::log<char [32],WTF::NativePromise<void,WebCore::PlatformMediaError,0u>,char [21],void const*,char [11],WTF::Logger::LogSiteIdentifier,char [2]>((uint64_t)result, 4u, "ThenCallback disconnected from ", v2, " aborting [callback:", (int)&v10, " callSite:", (WTF::Logger::LogSiteIdentifier *)(v1 + 24), "]");
  }
  else
  {
    hasRunnable = WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::hasRunnable(a1[2]);
    v7 = a1[2];
    if (hasRunnable)
    {
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResultRunnable(a1[2], &v8);
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 16))(&v10);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1)
        ((void (*)(char *, _BYTE *))off_1E34DC740[v12])(&v9, v11);
      v12 = -1;
      result = v8;
      v8 = 0;
      if (result)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      WTF::NativePromise<WebCore::PhotoSettings,WTF::String,0u>::takeResult(v7, (uint64_t)&v10);
      result = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v1 + 24))(v1, v7, &v10);
      if (v12 != -1)
        return (unsigned __int8 *)((uint64_t (*)(unsigned __int8 **, _BYTE *))off_1E34DC740[v12])(&v8, v11);
    }
  }
  return result;
}

void WebKit::DownloadProxy::~DownloadProxy(WebKit::DownloadProxy *this, void *a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E34DC8F8;
  *((_QWORD *)this + 2) = &unk_1E34DC928;
  v3 = *((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 41) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 16))(v3, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = (const void *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v4)
    CFRelease(v4);
  v5 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v6)
    CFRelease(*(CFTypeRef *)(v6 + 8));
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 296, a2);
  v8 = (unsigned int *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
  }
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 35) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v7);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v13)
    CFRelease(v13);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::DownloadProxy *)((char *)this + 72));
  v15 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v15)
    CFRelease(*(CFTypeRef *)(v15 + 8));
  v16 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  v17 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v17)
    CFRelease(*(CFTypeRef *)(v17 + 8));
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v14);
}

{
  WebKit::DownloadProxy::~DownloadProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::DownloadProxy::~DownloadProxy(WebKit::DownloadProxy *this, void *a2)
{
  WebKit::DownloadProxy::~DownloadProxy((WebKit::DownloadProxy *)((char *)this - 16), a2);
}

{
  WebKit::DownloadProxy::~DownloadProxy((WebKit::DownloadProxy *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

IPC::Encoder *WebKit::DownloadProxy::cancel(uint64_t a1, uint64_t *a2)
{
  WebKit::WebsiteDataStore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v4 = *(WebKit::WebsiteDataStore **)(a1 + 40);
  if (v4)
  {
    v5 = WebKit::WebsiteDataStore::networkProcess(v4);
    CFRetain(*(CFTypeRef *)(a1 + 8));
    v6 = *a2;
    *a2 = 0;
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 360;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v17 = (IPC::Encoder *)v7;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v7, (uint64_t *)(a1 + 56));
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v8 = &off_1E34DCC70;
    v8[1] = a1;
    v8[2] = a1;
    v8[3] = v6;
    v15[0] = v8;
    v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v17, 0, (uint64_t)v15, 1);
    if (v16)
    {
      v10 = v15[0];
      v15[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    v14 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

void WebKit::DownloadProxy::publishProgress(WebKit::WebsiteDataStore **this, const WTF::URL *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7[3];
  const char **v8;
  char v9;

  if (this[5])
  {
    WTF::URL::fileSystemPath(a2);
    WebKit::SandboxExtension::createHandle(1, (uint64_t)&v8);
    v5 = v7[0];
    v7[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v4);
      else
        *(_DWORD *)v5 -= 2;
    }
    if (v9)
    {
      v6 = WebKit::WebsiteDataStore::networkProcess(this[5]);
      v7[0] = (WTF::StringImpl *)(this + 7);
      v7[1] = a2;
      v7[2] = (WTF::StringImpl *)&v8;
      WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::PublishDownloadProgress>(v6, (uint64_t)v7, 0, 0);
      if (v9)
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v8);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::PublishDownloadProgress>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 422;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WebKit::SandboxExtensionHandle &&>,void>::encode<IPC::Encoder,WebKit::SandboxExtensionHandle &&,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::DownloadProxy::didStart(WebKit::DownloadProxy *this, const WebCore::ResourceRequest *a2, const WTF::String *a3)
{
  uint64_t v6;
  const void *v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  const WTF::StringImpl **v11;
  const WTF::StringImpl *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  WebCore::ResourceRequestBase::operator=((uint64_t)this + 72, (uint64_t)a2);
  v6 = *((_QWORD *)a2 + 24);
  if (v6)
    CFRetain(*((CFTypeRef *)a2 + 24));
  v7 = (const void *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = v6;
  if (v7)
    CFRelease(v7);
  WTF::String::operator=((WTF::StringImpl **)this + 34, a3);
  v8 = (uint64_t *)((char *)this + 296);
  v9 = *((_DWORD *)this + 77);
  if (!v9
    || (v10 = *v8 + 40 * v9,
        v11 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url(a2),
        (WTF::equal(*(WTF **)(v10 - 40), *v11, v12) & 1) == 0))
  {
    v13 = WebCore::ResourceRequestBase::url(a2);
    v14 = *((_DWORD *)this + 77);
    if (v14 == *((_DWORD *)this + 76))
    {
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>((uint64_t)this + 296, v13);
    }
    else
    {
      v15 = *v8;
      v16 = (_QWORD *)(*v8 + 40 * v14);
      v17 = *(_DWORD **)v13;
      if (*(_QWORD *)v13)
        *v17 += 2;
      *v16 = v17;
      v18 = v15 + 40 * v14;
      v19 = *(_OWORD *)(v13 + 8);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v18 + 8) = v19;
      ++*((_DWORD *)this + 77);
    }
  }
  v20 = *((_QWORD *)this + 41);
  if (v20)
  {
    *((_QWORD *)this + 41) = 0;
    (*(void (**)(uint64_t, WebKit::DownloadProxy *))(*(_QWORD *)v20 + 16))(v20, this);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  return (*(uint64_t (**)(_QWORD, WebKit::DownloadProxy *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), this);
}

void WebKit::DownloadProxy::didReceiveAuthenticationChallenge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebsiteDataStore *v4;
  uint64_t v7;
  CFTypeRef *v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WTF *v13;
  unsigned __int8 **v14;

  v4 = *(WebKit::WebsiteDataStore **)(a1 + 40);
  if (v4)
  {
    v7 = WebKit::WebsiteDataStore::networkProcess(v4);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v14, *(unsigned __int8 ***)(v7 + 144));
    v13 = 0;
    v8 = (CFTypeRef *)API::Object::newObject(0x1D8uLL, 2);
    WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy((WebKit *)v8, a2, a3, (uint64_t *)&v14, (uint64_t *)&v13);
    v10 = (unsigned int *)v13;
    v13 = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v9);
      }
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
    (*(void (**)(_QWORD, uint64_t, CFTypeRef *))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), a1, v8);
    if (v8)
      CFRelease(v8[1]);
  }
}

uint64_t WebKit::DownloadProxy::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;

  v8 = *(_QWORD *)(a1 + 48);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v9 = *a4;
  *a4 = 0;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v10 = &off_1E34DCC98;
  v10[1] = a1;
  v10[2] = a1;
  v10[3] = v9;
  v12 = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v8 + 88))(v8, a1, a2, a3, &v12);
  result = (uint64_t)v12;
  v12 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(uint64_t a1, WebCore::ResourceResponseBase *this, WTF::StringImpl **a3, uint64_t *a4)
{
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  const WTF::String *v15;
  const WTF::String *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  _QWORD *v25;
  WTF::StringImpl *result;
  NSObject *v27;
  _QWORD *v28;
  uint8_t buf[16];

  if (!WebCore::ResourceResponseBase::expectedContentLength(this))
  {
    v27 = off_1ECE713E8;
    if (os_log_type_enabled((os_log_t)off_1ECE713E8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v27, OS_LOG_TYPE_INFO, "DownloadProxy::decideDestinationWithSuggestedFilename expectedContentLength is null", buf, 2u);
    }
  }
  if ((WebCore::ResourceResponseBase::isAttachmentWithFilename(this) & 1) == 0)
  {
    if (*a3 && *((_DWORD *)*a3 + 1))
    {
      v13 = *(_QWORD *)(a1 + 272);
      if (!v13 || !*(_DWORD *)(v13 + 4))
        goto LABEL_17;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 272);
      if (!v14 || !*(_DWORD *)(v14 + 4))
        goto LABEL_3;
    }
    WTF::String::operator=(a3, (WTF::StringImpl *)(a1 + 272));
    goto LABEL_17;
  }
LABEL_3:
  WebCore::ResourceResponseBase::suggestedFilename(this);
  v9 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  v10 = *a3;
  *a3 = v9;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
LABEL_7:
      *(_DWORD *)v10 = v11;
      goto LABEL_17;
    }
    WTF::StringImpl::destroy(v10, v8);
    v10 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v10)
    {
      v11 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v12);
        goto LABEL_17;
      }
      goto LABEL_7;
    }
  }
LABEL_17:
  v15 = (const WTF::String *)WebCore::ResourceResponseBase::mimeType(this);
  WebCore::MIMETypeRegistry::appendFileExtensionIfNecessary((WebCore::MIMETypeRegistry *)a3, v15, v16);
  v18 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  v19 = *a3;
  *a3 = v18;
  if (!v19)
    goto LABEL_22;
  v20 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 != 2)
    goto LABEL_21;
  WTF::StringImpl::destroy(v19, v17);
  v19 = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (!v19)
    goto LABEL_22;
  v20 = *(_DWORD *)v19 - 2;
  if (*(_DWORD *)v19 == 2)
    WTF::StringImpl::destroy(v19, v17);
  else
LABEL_21:
    *(_DWORD *)v19 = v20;
LABEL_22:
  v21 = *(_QWORD *)(a1 + 48);
  WebCore::ResourceResponseBase::sanitizeSuggestedFilename((WebCore::ResourceResponseBase *)a3, v17);
  CFRetain(*(CFTypeRef *)(a1 + 8));
  v22 = *a4;
  *a4 = 0;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v23 = &off_1E34DCCC0;
  v23[1] = a1;
  v23[2] = a1;
  v23[3] = v22;
  v28 = v23;
  (*(void (**)(uint64_t, uint64_t, WebCore::ResourceResponseBase *, uint8_t *, _QWORD **))(*(_QWORD *)v21 + 40))(v21, a1, this, buf, &v28);
  v25 = v28;
  v28 = 0;
  if (v25)
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::DownloadProxyMap::downloadFinished(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 56);
  v5 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v29 = 134217984;
    v30 = v4;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "Removing download %llu from UIProcess DownloadProxyMap", (uint8_t *)&v29, 0xCu);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v7 = (unsigned int *)(v6 + 16);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  IPC::MessageReceiverMap::removeMessageReceiver(v6 + 152, 4u, v4);
  if (v6)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v6 + 16));
  v10 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  if (v10)
    CFRelease(*(CFTypeRef *)(v10 + 8));
  v12 = (uint64_t *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    goto LABEL_39;
  v13 = *(_DWORD *)(v11 - 8);
  v14 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = v13 & ((v16 >> 31) ^ v16);
  v18 = *(_QWORD *)(v11 + 16 * v17);
  if (v18 != v4)
  {
    v19 = 1;
    while (v18)
    {
      v17 = ((_DWORD)v17 + v19) & v13;
      v18 = *(_QWORD *)(v11 + 16 * v17);
      ++v19;
      if (v18 == v4)
        goto LABEL_16;
    }
    v17 = *(unsigned int *)(v11 - 4);
  }
LABEL_16:
  if (v17 != *(_DWORD *)(v11 - 4))
  {
    v20 = (_QWORD *)(v11 + 16 * v17);
    v21 = v20[1];
    *v20 = -1;
    v20[1] = 0;
    if (v21)
      CFRelease(*(CFTypeRef *)(v21 + 8));
    ++*(_DWORD *)(*v12 - 16);
    v22 = *v12;
    v23 = *v12 ? *(_DWORD *)(v22 - 12) - 1 : -1;
    *(_DWORD *)(v22 - 12) = v23;
    v11 = *v12;
    if (!*v12)
      goto LABEL_39;
    v24 = *(_DWORD *)(v11 - 4);
    if (6 * *(_DWORD *)(v11 - 12) < v24 && v24 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)(a1 + 16), v24 >> 1);
      v11 = *v12;
      if (!*v12)
        goto LABEL_39;
    }
  }
  if (!*(_DWORD *)(v11 - 12))
  {
LABEL_39:
    if (*(_BYTE *)(a1 + 24))
    {
      v26 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      if (v26)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v26 + 8), v9);
      v27 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      if (v27)
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v27 + 8), v9);
      v28 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl(&dword_196BCC000, v28, OS_LOG_TYPE_DEFAULT, "UIProcess released 'WebKit downloads' assertions for UIProcess and NetworkProcess", (uint8_t *)&v29, 2u);
      }
    }
  }
}

void WebKit::DownloadProxy::didFail(uint64_t a1, uint64_t a2, const void *a3, WTF *this)
{
  uint64_t v6;
  WebKit *v7;

  if (this)
  {
    API::Data::create(this, a3, &v7);
    this = v7;
  }
  v6 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = this;
  if (v6)
  {
    CFRelease(*(CFTypeRef *)(v6 + 8));
    this = *(WTF **)(a1 + 64);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, WTF *))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48), a1, a2, this);
  WebKit::DownloadProxyMap::downloadFinished(*(_QWORD *)(a1 + 32), a1);
}

WebKit::DownloadProxyMap *WebKit::DownloadProxyMap::DownloadProxyMap(WebKit::DownloadProxyMap *this, WebKit::NetworkProcessProxy *a2)
{
  unsigned int *v4;
  unsigned int v5;

  *(_QWORD *)this = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 2, (uint64_t)a2);
  v4 = (unsigned int *)*((_QWORD *)a2 + 1);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = WTF::processHasEntitlement();
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void WebKit::DownloadProxyMap::~DownloadProxyMap(WebKit::DownloadProxyMap *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  v5 = *((_QWORD *)this + 2);
  if (v5)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v5, a2);
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

unsigned int *WebKit::DownloadProxyMap::createDownloadProxy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, const WebCore::ResourceRequest *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  CFTypeRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  NSObject *v43;
  uint64_t v44;
  pid_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  NSObject *v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *result;
  uint64_t v66[2];
  _BYTE buf[192];
  CFTypeRef cf;
  _BYTE v69[24];
  int v70;
  WTF::StringImpl *v71;
  __int128 v72;
  _OWORD v73[2];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v14 = API::Object::newObject(0x158uLL, 56);
  v15 = *a3;
  *(_QWORD *)v14 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)v14);
  *(_QWORD *)v14 = &off_1E34DC8F8;
  *(_QWORD *)(v14 + 16) = &unk_1E34DC928;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = a1;
  CFRetain(*(CFTypeRef *)(a2 + 8));
  *(_QWORD *)(v14 + 40) = a2;
  ++*(_DWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 48) = v15;
  *(_QWORD *)(v14 + 56) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(v14 + 64) = 0;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v14 + 72), a4);
  *(_QWORD *)(v14 + 272) = 0;
  *(_QWORD *)(v14 + 280) = 0;
  if (a6)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a6 + 24), a6 + 16);
    v16 = *(unsigned int **)(a6 + 24);
    if (v16)
    {
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
  }
  else
  {
    v16 = 0;
  }
  *(_QWORD *)(v14 + 296) = 0;
  *(_QWORD *)(v14 + 304) = 0;
  *(_QWORD *)(v14 + 288) = v16;
  *(_BYTE *)(v14 + 312) = 1;
  *(_WORD *)buf = *(_WORD *)a5;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)&buf[8], (const WebCore::ResourceRequest *)(a5 + 8));
  v69[0] = 0;
  v70 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v69, a5 + 208);
  v18 = *(WTF::StringImpl **)(a5 + 240);
  if (v18)
    *(_DWORD *)v18 += 2;
  v71 = v18;
  v73[0] = *(_OWORD *)(a5 + 264);
  *(_OWORD *)((char *)v73 + 14) = *(_OWORD *)(a5 + 278);
  v72 = *(_OWORD *)(a5 + 248);
  if (a6)
    CFRetain(*(CFTypeRef *)(a6 + 8));
  v66[0] = a6;
  v19 = API::Object::newObject(0x140uLL, 60);
  *(_QWORD *)(v14 + 320) = API::FrameInfo::FrameInfo(v19, (uint64_t)buf, v66);
  if (v66[0])
    CFRelease(*(CFTypeRef *)(v66[0] + 8));
  v21 = v71;
  v71 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v20);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (v70 != -1)
    ((void (*)(uint64_t *, _BYTE *))off_1E34DCBA8[v70])(v66, v69);
  v70 = -1;
  v22 = cf;
  cf = 0;
  if (v22)
    CFRelease(v22);
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
  *(_QWORD *)(v14 + 328) = 0;
  *(_QWORD *)(v14 + 336) = 0;
  *(_QWORD *)a7 = v14;
  v23 = *(_QWORD *)(v14 + 56);
  CFRetain(*(CFTypeRef *)(v14 + 8));
  v25 = (uint64_t *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 16);
  if (v24
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 16)),
        (v24 = *v25) != 0))
  {
    v26 = *(_DWORD *)(v24 - 8);
  }
  else
  {
    v26 = 0;
  }
  v27 = (v23 + ~(v23 << 32)) ^ ((unint64_t)(v23 + ~(v23 << 32)) >> 22);
  v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
  v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
  v30 = v26 & ((v29 >> 31) ^ v29);
  v31 = (_QWORD *)(v24 + 16 * v30);
  v32 = *v31;
  if (!*v31)
  {
LABEL_31:
    v35 = v31[1];
    *v31 = v23;
    v31[1] = v14;
    if (v35)
      CFRelease(*(CFTypeRef *)(v35 + 8));
    v36 = *v25;
    if (*v25)
      v37 = *(_DWORD *)(v36 - 12) + 1;
    else
      v37 = 1;
    *(_DWORD *)(v36 - 12) = v37;
    v39 = *v25;
    if (*v25)
      v40 = *(_DWORD *)(v39 - 12);
    else
      v40 = 0;
    v41 = (*(_DWORD *)(v39 - 16) + v40);
    v42 = *(unsigned int *)(v39 - 4);
    if (v42 > 0x400)
    {
      if (v42 > 2 * v41)
        goto LABEL_44;
    }
    else if (3 * v42 > 4 * v41)
    {
      goto LABEL_44;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)(a1 + 16));
    goto LABEL_44;
  }
  v33 = 0;
  v34 = 1;
  while (v32 != v23)
  {
    if (v32 == -1)
      v33 = v31;
    v30 = (v30 + v34) & v26;
    v31 = (_QWORD *)(v24 + 16 * v30);
    v32 = *v31;
    ++v34;
    if (!*v31)
    {
      if (v33)
      {
        *v33 = 0;
        v33[1] = 0;
        --*(_DWORD *)(*v25 - 16);
        v31 = v33;
      }
      goto LABEL_31;
    }
  }
  v38 = v31[1];
  v31[1] = v14;
  if (v38)
    CFRelease(*(CFTypeRef *)(v38 + 8));
LABEL_44:
  v43 = qword_1ECE71320;
  if (os_log_type_enabled((os_log_t)qword_1ECE71320, OS_LOG_TYPE_DEFAULT))
  {
    v44 = *(_QWORD *)(v14 + 56);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v44;
    _os_log_impl(&dword_196BCC000, v43, OS_LOG_TYPE_DEFAULT, "Adding download %llu to UIProcess DownloadProxyMap", buf, 0xCu);
  }
  if (*v25 && *(_DWORD *)(*v25 - 12) == 1 && *(_BYTE *)(a1 + 24))
  {
    v45 = getpid();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66[0] = 0;
    v46 = WTF::fastMalloc((WTF *)0xB0);
    v47 = WebKit::ProcessAssertion::ProcessAssertion(v46, v45, (_DWORD **)buf, 2, MEMORY[0x1E0CBF738]);
    WebKit::ProcessAssertion::acquireAsync(v47, v66);
    v49 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v46;
    if (v49)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v49 + 8), v48);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    v51 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v48);
      else
        *(_DWORD *)v51 -= 2;
    }
    v52 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v66[0] = 0;
    v53 = WTF::fastMalloc((WTF *)0xB0);
    v54 = WebKit::ProcessAssertion::ProcessAssertion(v53, v52, (_DWORD **)buf, 2);
    WebKit::ProcessAssertion::acquireAsync(v54, v66);
    v56 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v53;
    if (v56)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v56 + 8), v55);
    v57 = v66[0];
    v66[0] = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    v58 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 2)
        WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v55);
      else
        *(_DWORD *)v58 -= 2;
    }
    v59 = qword_1ECE71640;
    if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_196BCC000, v59, OS_LOG_TYPE_DEFAULT, "UIProcess took 'WebKit downloads' assertions for UIProcess and NetworkProcess", buf, 2u);
    }
  }
  v60 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v61 = (unsigned int *)(v60 + 16);
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 + 1, v61));
  v63 = *(_QWORD *)(*(_QWORD *)a7 + 56);
  v64 = *(_QWORD *)a7 + 16;
  v66[0] = 4;
  v66[1] = v63;
  result = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v60 + 160), (unsigned __int8 *)v66, v64, (unsigned int **)buf);
  if (v60)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v60 + 16));
  return result;
}

void WebKit::DownloadProxyMap::invalidate(WebKit::DownloadProxyMap *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t v18[16];

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_10:
    v5 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_11;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_10;
  }
  v6 = (_QWORD *)v3;
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = (_QWORD *)v3;
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_11:
  if (v3)
    v8 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v8 = 0;
  if (v8 != v6)
  {
    do
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v6[1] + 48) + 80))(*(_QWORD *)(v6[1] + 48));
      v9 = v6[1];
      v10 = *(_QWORD *)(v9 + 40);
      *(_QWORD *)(v9 + 40) = 0;
      if (v10)
        CFRelease(*(CFTypeRef *)(v10 + 8));
      v11 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
      v12 = (unsigned int *)(v11 + 16);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 + 1, v12));
      IPC::MessageReceiverMap::removeMessageReceiver(v11 + 152, 4u, *(_QWORD *)(v6[1] + 56));
      if (v11)
        WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v11 + 16));
      v14 = v6 + 2;
      v6 = v5;
      if (v14 != v5)
      {
        v6 = v14;
        while ((unint64_t)(*v6 + 1) <= 1)
        {
          v6 += 2;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
    }
    while (v6 != v8);
    v3 = *((_QWORD *)this + 2);
  }
  if (v3)
  {
    *((_QWORD *)this + 2) = 0;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  }
  v15 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v15 + 8), a2);
  v16 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v16)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v16 + 8), a2);
  v17 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "UIProcess DownloadProxyMap invalidated - Released 'WebKit downloads' assertions for UIProcess and NetworkProcess", v18, 2u);
  }
}

uint64_t WebKit::WebExtensionAlarm::schedule(WebKit::WebExtensionAlarm *this)
{
  double v2;
  double v3;
  NSObject *v4;
  WebCore::TimerBase *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  double v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  WTF::MonotonicTime::now(this);
  v2 = *((double *)this + 2);
  *((double *)this + 4) = v2 + v3;
  v4 = qword_1ECE710C8;
  if (os_log_type_enabled((os_log_t)qword_1ECE710C8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *((_QWORD *)this + 3);
    v10 = 134349312;
    v11 = v2;
    v12 = 2050;
    v13 = v9;
    _os_log_debug_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEBUG, "Scheduled alarm; initial = %{public}f seconds; repeat = %{public}f seconds",
      (uint8_t *)&v10,
      0x16u);
  }
  v5 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)WebCore::TimerBase::TimerBase(v5) = off_1E34B3740;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34DCBC8;
  v6[1] = WebKit::WebExtensionAlarm::fire;
  v6[2] = 0;
  v6[3] = this;
  *((_QWORD *)v5 + 6) = v6;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v5;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WebCore::TimerBase::start();
}

uint64_t WebKit::WebExtensionAlarm::fire(WebKit::WebExtensionAlarm *this)
{
  double v2;
  double v3;
  double v4;
  uint64_t result;

  WTF::MonotonicTime::now(this);
  v3 = v2;
  v4 = *((double *)this + 3);
  result = (*(uint64_t (**)(_QWORD, WebKit::WebExtensionAlarm *))(**((_QWORD **)this + 5) + 16))(*((_QWORD *)this + 5), this);
  if (*((double *)this + 3) == 0.0)
  {
    result = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *((double *)this + 4) = v4 + v3;
  }
  return result;
}

WebKit::WebExtensionContext *WebKit::WebExtensionContext::WebExtensionContext(WebKit::WebExtensionContext *this)
{
  int64x2_t v2;
  _BYTE v4[24];
  uint64_t v5;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34DCBF0;
  *((_QWORD *)this + 2) = &off_1E34B0558;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)this = &off_1E34F9468;
  *((_QWORD *)this + 2) = &unk_1E34F9498;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)this + 9) = 0;
  WTF::URL::invalidate((WebKit::WebExtensionContext *)((char *)this + 72));
  WTF::UUID::UUID((WTF::UUID *)v4);
  WTF::UUID::toString((WTF::UUID *)v4);
  *((_WORD *)this + 60) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)this + 10) = v2;
  *((_OWORD *)this + 11) = 0u;
  *((_BYTE *)this + 520) = 0;
  *((int64x2_t *)this + 12) = v2;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 234) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_WORD *)this + 144) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 338) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 497) = 0u;
  *((_BYTE *)this + 592) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 673) = 0u;
  *((_QWORD *)this + 89) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  {
    WebKit::webExtensionContexts(void)::contexts = 0;
  }
  v5 = *((_QWORD *)this + 4);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebExtensionContext&>(&WebKit::webExtensionContexts(void)::contexts, &v5, (uint64_t)this, (uint64_t)v4);
  return this;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebExtensionContext&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v27 = 0;
        else
          v27 = *(unsigned int *)(v8 - 4);
        v32 = 0;
        v33 = v8 + 16 * v27;
        goto LABEL_35;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 24), a3 + 16);
  v21 = *(unsigned int **)(a3 + 24);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)result);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)result));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
    }
  }
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v28 = *v6;
  if (*v6)
    v29 = *(_DWORD *)(v28 - 12);
  else
    v29 = 0;
  v30 = (*(_DWORD *)(v28 - 16) + v29);
  v31 = *(unsigned int *)(v28 - 4);
  if (v31 > 0x400)
  {
    if (v31 <= 2 * v30)
    {
LABEL_28:
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
      v16 = result;
      v28 = *v6;
      if (*v6)
        v31 = *(unsigned int *)(v28 - 4);
      else
        v31 = 0;
    }
  }
  else if (3 * v31 <= 4 * v30)
  {
    goto LABEL_28;
  }
  v33 = v28 + 16 * v31;
  v32 = 1;
LABEL_35:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v33;
  *(_BYTE *)(a4 + 16) = v32;
  return result;
}

_QWORD *WebKit::WebExtensionContext::parameters@<X0>(WebKit::WebExtensionContext *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  __int128 v5;
  _DWORD *v6;
  uint64_t v7;

  *(_QWORD *)a2 = *((_QWORD *)this + 4);
  v4 = (_DWORD *)*((_QWORD *)this + 9);
  if (v4)
    *v4 += 2;
  *(_QWORD *)(a2 + 8) = v4;
  v5 = *((_OWORD *)this + 6);
  *(_OWORD *)(a2 + 16) = *((_OWORD *)this + 5);
  *(_OWORD *)(a2 + 32) = v5;
  v6 = (_DWORD *)*((_QWORD *)this + 14);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(a2 + 48) = v6;
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a2 + 56), (_QWORD **)this + 16);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)(a2 + 64), (_QWORD **)this + 18);
  WebKit::WebExtension::serializeLocalization(*((id **)this + 7), (WebKit **)(a2 + 72));
  WebKit::WebExtension::serializeManifest(*((WebKit::WebExtension **)this + 7), (WebKit **)(a2 + 80));
  *(double *)(a2 + 88) = WebKit::WebExtension::manifestVersion(*((WebKit::WebExtension **)this + 7));
  *(_BYTE *)(a2 + 96) = *((_BYTE *)this + 688);
  *(_QWORD *)(a2 + 104) = WebKit::WebExtensionContext::backgroundPageIdentifier(this);
  *(_QWORD *)(a2 + 112) = v7;
  WebKit::WebExtensionContext::popupPageIdentifiers(this, a2 + 120);
  return WebKit::WebExtensionContext::tabPageIdentifiers(this, a2 + 136);
}

uint64_t WebKit::WebExtensionContext::pageListensForEvent(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 a4)
{
  uint64_t v4;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13[2];

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    return 0;
  if (!*(_QWORD *)(v4 + 8))
    return 0;
  if (!*(_BYTE *)(a1 + 249))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a2 + 264) + 24);
    if (v7 < 0 && v7 != -1)
      return 0;
  }
  v13[0] = a3;
  v13[1] = a4;
  v8 = WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>,std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>((uint64_t *)(a1 + 280), v13);
  v9 = *(unsigned __int8 **)(a1 + 280);
  if (v9)
    v9 += 24 * *((unsigned int *)v9 - 1);
  if (v9 == v8)
    return 0;
  result = WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::contains((uint64_t)(v8 + 8), a2);
  if ((_DWORD)result)
  {
    v11 = *(_QWORD *)(a2 + 208);
    v12 = *(_QWORD *)(v11 + 136);
    return v12 && *(_BYTE *)(v12 + 104) || *(_QWORD *)(v11 + 144) != 0;
  }
  return result;
}

char *WebKit::WebExtensionContext::processes@<X0>(char *result@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  char *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int i;
  unsigned int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v53;
  unsigned __int8 v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;

  *a4 = 0;
  v5 = *((_QWORD *)result + 8);
  if (!v5 || !*(_QWORD *)(v5 + 8))
    return result;
  v6 = result;
  v7 = *a2;
  if (!*a2)
  {
    v10 = 0;
    v8 = 0;
LABEL_12:
    v9 = &v7[v8];
    goto LABEL_13;
  }
  v8 = *((unsigned int *)v7 - 1);
  v9 = &v7[v8];
  if (!*((_DWORD *)v7 - 3))
  {
    v10 = &v7[v8];
    goto LABEL_12;
  }
  v10 = *a2;
  if ((_DWORD)v8)
  {
    v10 = *a2;
    while (*v10 >= 0xFEu)
    {
      ++v10;
      if (!--v8)
      {
        v10 = v9;
        break;
      }
    }
  }
LABEL_13:
  if (v7)
    v7 += *((unsigned int *)v7 - 1);
  if (v7 != v10)
  {
    v11 = (void **)(result + 280);
    v50 = v7;
    v51 = v9;
    while (1)
    {
      v12 = *a3;
      if (!*a3)
        break;
      v13 = *((unsigned int *)v12 - 1);
      v14 = &v12[v13];
      if (!*((_DWORD *)v12 - 3))
      {
        v15 = &v12[v13];
LABEL_28:
        v14 = &v12[v13];
        if (!v12)
          goto LABEL_29;
        goto LABEL_25;
      }
      v15 = *a3;
      if ((_DWORD)v13)
      {
        v15 = *a3;
        while (*v15 >= 0xFEu)
        {
          ++v15;
          if (!--v13)
          {
            v15 = v14;
            break;
          }
        }
      }
      if (!v12)
      {
LABEL_29:
        v16 = 0;
        goto LABEL_30;
      }
LABEL_25:
      v16 = &v12[*((unsigned int *)v12 - 1)];
LABEL_30:
      if (v16 != v15)
      {
        v54 = *v10;
        v53 = v16;
        while (1)
        {
          v17 = *v15;
          LOBYTE(v61) = v54;
          BYTE1(v61) = v17;
          result = (char *)WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>,std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>((uint64_t *)v6 + 35, (unsigned __int8 *)&v61);
          v18 = result;
          v19 = (char *)*v11;
          if (*v11)
            v19 += 24 * *((unsigned int *)v19 - 1);
          if (v19 != result)
            break;
LABEL_84:
          v48 = v15 + 1;
          v15 = v14;
          if (v48 != v14)
          {
            v15 = v48;
            while (*v15 >= 0xFEu)
            {
              if (++v15 == v14)
              {
                v15 = v14;
                break;
              }
            }
          }
          if (v15 == v16)
            goto LABEL_90;
        }
        WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::begin((_QWORD **)result + 1, (uint64_t)&v61);
        v20 = *((_QWORD *)v18 + 1);
        if (v20)
        {
          v21 = *(unsigned int *)(v20 - 4);
          v22 = (_QWORD *)(v20 + 16 * v21);
        }
        else
        {
          v22 = 0;
          v21 = 0;
        }
        v55 = v18 + 8;
        v56 = v22;
        v57 = v22;
        v58 = v22;
        v59 = v20 + 16 * v21;
        v60 = 0;
        result = (char *)WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v55);
LABEL_39:
        if (v62 == v56)
        {
          v16 = v53;
          goto LABEL_84;
        }
        v23 = *(_QWORD *)(*v62 + 8);
        if (v23)
          v24 = v23 - 16;
        else
          v24 = 0;
        if (!v6[249])
        {
          v25 = *(_QWORD *)(*(_QWORD *)(v24 + 264) + 24);
          if (v25 < 0 && v25 != -1)
            goto LABEL_74;
        }
        v26 = *(_QWORD *)(v24 + 208);
        v27 = (unsigned int *)(v26 + 16);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
        v29 = *(_QWORD *)(v26 + 136);
        if ((!v29 || !*(_BYTE *)(v29 + 104)) && !*(_QWORD *)(v26 + 144))
          goto LABEL_63;
        v30 = *a4;
        if (*a4
          || (WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(a4, 0), (v30 = *a4) != 0))
        {
          v31 = *(_DWORD *)(v30 - 8);
        }
        else
        {
          v31 = 0;
        }
        v32 = 0;
        v33 = (~(v26 << 32) + v26) ^ ((unint64_t)(~(v26 << 32) + v26) >> 22);
        v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
        v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
        v36 = (v35 >> 31) ^ v35;
        for (i = 1; ; ++i)
        {
          v38 = v36 & v31;
          v39 = (uint64_t *)(v30 + 8 * v38);
          v40 = *v39;
          if (*v39 == -1)
          {
            v32 = (uint64_t *)(v30 + 8 * v38);
          }
          else
          {
            if (!v40)
            {
              if (v32)
              {
                *v32 = 0;
                --*(_DWORD *)(*a4 - 16);
                *v32 = v26;
              }
              else
              {
                *v39 = v26;
                v32 = (uint64_t *)(v30 + 8 * v38);
              }
              v41 = *a4;
              if (*a4)
                v42 = *(_DWORD *)(v41 - 12) + 1;
              else
                v42 = 1;
              *(_DWORD *)(v41 - 12) = v42;
              v43 = *a4;
              if (*a4)
                v44 = *(_DWORD *)(v43 - 12);
              else
                v44 = 0;
              v45 = (*(_DWORD *)(v43 - 16) + v44);
              v46 = *(unsigned int *)(v43 - 4);
              if (v46 > 0x400)
              {
                if (v46 > 2 * v45)
                  goto LABEL_74;
              }
              else if (3 * v46 > 4 * v45)
              {
                goto LABEL_74;
              }
              WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(a4, v32);
              goto LABEL_74;
            }
            if (v40 == v26)
            {
              if (!v26)
                goto LABEL_74;
LABEL_63:
              WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v26 + 16));
LABEL_74:
              v47 = v62;
              do
              {
                v47 += 2;
                v62 = v47;
              }
              while (v47 != v63 && (unint64_t)(*v47 + 1) <= 1);
              ++v64;
              result = (char *)WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets(&v61);
              ++*(_DWORD *)(v61 + 8);
              goto LABEL_39;
            }
          }
          v36 = i + v38;
        }
      }
LABEL_90:
      v49 = v10 + 1;
      v10 = v51;
      if (v49 != v51)
      {
        v10 = v49;
        while (*v10 >= 0xFEu)
        {
          if (++v10 == v51)
          {
            v10 = v51;
            break;
          }
        }
      }
      if (v10 == v50)
        return result;
    }
    v15 = 0;
    v13 = 0;
    goto LABEL_28;
  }
  return result;
}

void WebKit::WebExtensionMessagePort::~WebExtensionMessagePort(WebKit::WebExtensionMessagePort *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34DCDD8;
  WebKit::WebExtensionMessagePort::remove((uint64_t)this);
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, v2);
    }
  }
}

{
  WebKit::WebExtensionMessagePort::~WebExtensionMessagePort(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebExtensionController::WebExtensionController(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  dispatch_time_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DCC18;
  *(_QWORD *)(a1 + 16) = &off_1E34B0558;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = &off_1E34DC960;
  *(_QWORD *)(a1 + 16) = &unk_1E34DC990;
  v4 = *a2;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  *(_QWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a1 + 176) & 0xFC | 1;
  *(_BYTE *)(a1 + 177) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  {
    WebKit::webExtensionControllers(void)::controllers = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::WebExtensionContext&>(&WebKit::webExtensionControllers(void)::controllers, &v11, a1, (uint64_t)&v10);
  WebKit::WebExtensionController::initializePlatform((WebKit::WebExtensionController *)a1);
  v5 = dispatch_time(0, 5000000000);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  v6 = *(unsigned int **)(a1 + 24);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = malloc_type_malloc(0x30uLL, 0x10E004002B5D1D8uLL);
  *v8 = MEMORY[0x1E0C809A0];
  v8[1] = 50331650;
  v8[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::{lambda(void *)#1}::__invoke;
  v8[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::descriptor;
  v8[4] = a1;
  v8[5] = v6;
  dispatch_after(v5, MEMORY[0x1E0C80D38], v8);
  _Block_release(v8);
  return a1;
}

void WebKit::WebExtensionController::~WebExtensionController(WebKit::WebExtensionController *this)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t *v21;
  const void *v22;
  uint64_t v23;

  *(_QWORD *)this = &off_1E34DC960;
  *((_QWORD *)this + 2) = &unk_1E34DC990;
  WebKit::WebExtensionController::unloadAll(this);
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    if ((_DWORD)v6)
    {
      v7 = *((_QWORD *)this + 21);
      do
      {
        v8 = *(WTF::StringImpl **)v7;
        if (*(_QWORD *)v7 != -1)
        {
          v9 = *(_DWORD **)(v7 + 8);
          *(_QWORD *)(v7 + 8) = 0;
          if (v9)
          {
            if (v9[2] == 1)
            {
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
              v8 = *(WTF::StringImpl **)v7;
            }
            else
            {
              --v9[2];
            }
          }
          *(_QWORD *)v7 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v2);
            else
              *(_DWORD *)v8 -= 2;
          }
        }
        v7 += 16;
        --v6;
      }
      while (v6);
    }
    WTF::fastFree((WTF *)(v5 - 16), v2);
  }
  v10 = *((_QWORD *)this + 19);
  if (v10)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v10, v2);
  v11 = *((_QWORD *)this + 17);
  if (v11)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v11, v2);
  v12 = *((_QWORD *)this + 15);
  if (v12)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v12, v2);
  v13 = *((_QWORD *)this + 13);
  if (v13)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v13, v2);
  v14 = *((_QWORD *)this + 11);
  if (v14)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v14, v2);
  v15 = *((_QWORD *)this + 9);
  if (v15)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v15, v2);
  v16 = *((_QWORD *)this + 8);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v17)
    {
      v18 = *((_QWORD *)this + 8);
      do
      {
        v19 = *(WTF::StringImpl **)v18;
        if (*(_QWORD *)v18 != -1)
        {
          v20 = *(_QWORD *)(v18 + 8);
          *(_QWORD *)(v18 + 8) = 0;
          if (v20)
          {
            CFRelease(*(CFTypeRef *)(v20 + 8));
            v19 = *(WTF::StringImpl **)v18;
          }
          *(_QWORD *)v18 = 0;
          if (v19)
          {
            if (*(_DWORD *)v19 == 2)
              WTF::StringImpl::destroy(v19, v2);
            else
              *(_DWORD *)v19 -= 2;
          }
        }
        v18 += 16;
        --v17;
      }
      while (v17);
    }
    WTF::fastFree((WTF *)(v16 - 16), v2);
  }
  v21 = (uint64_t *)*((_QWORD *)this + 7);
  if (v21)
    WTF::HashTable<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionMatchPattern,WTF::RawPtrTraits<WebKit::WebExtensionMatchPattern>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionMatchPattern>>>>::deallocateTable(v21, v2);
  v22 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
    CFRelease(v22);
  v23 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
    CFRelease(*(CFTypeRef *)(v23 + 8));
  *((_QWORD *)this + 2) = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
}

{
  WebKit::WebExtensionController::~WebExtensionController(this);
  JUMPOUT(0x19AEB936CLL);
}

void `non-virtual thunk to'WebKit::WebExtensionController::~WebExtensionController(WebKit::WebExtensionController *this)
{
  WebKit::WebExtensionController::~WebExtensionController((WebKit::WebExtensionController *)((char *)this - 16));
}

{
  WebKit::WebExtensionController::~WebExtensionController((WebKit::WebExtensionController *)((char *)this - 16));
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::WebExtensionController::parameters@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD **v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  WebKit::WebExtensionContext **v8;
  WebKit::WebExtensionContext **v9;
  WebKit::WebExtensionContext **v10;
  WebKit::WebExtensionContext **v11;
  uint64_t v12;
  WebKit::WebExtensionContext *v13;
  void *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[152];

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = *(_QWORD *)(this + 32);
  *(_BYTE *)(a2 + 8) = (*(_BYTE *)(this + 176) & 2) != 0;
  v4 = (_QWORD **)(this + 56);
  v3 = *(_QWORD *)(this + 56);
  v17 = 0;
  v18 = 0;
  if (v3 && (v5 = *(_DWORD *)(v3 - 12)) != 0)
  {
    if (v5 >= 0x1AF286C)
    {
      __break(0xC471u);
      return this;
    }
    v16 = 152 * v5;
    v6 = WTF::fastMalloc((WTF *)(152 * v5));
    v7 = v16 / 0x98;
    LODWORD(v18) = v16 / 0x98;
    v17 = v6;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v8 = (WebKit::WebExtensionContext **)WTF::HashTable<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionContext,WTF::RawPtrTraits<WebKit::WebExtensionContext>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionContext>>>>::begin(v4);
  v10 = v8;
  v11 = v9;
  if (*v4)
    v12 = (uint64_t)&(*v4)[*((unsigned int *)*v4 - 1)];
  else
    v12 = 0;
  if ((WebKit::WebExtensionContext **)v12 == v8)
  {
    v15 = v7;
  }
  else
  {
    do
    {
      v13 = *v10++;
      WebKit::WebExtensionContext::parameters(v13, (uint64_t)v19);
      WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck((uint64_t)&v17, (uint64_t)v19);
      WebKit::WebExtensionContextParameters::~WebExtensionContextParameters((WebKit::WebExtensionContextParameters *)v19, v14);
      while (v10 != v11)
      {
        if ((unint64_t)*v10 + 1 > 1)
          goto LABEL_13;
        ++v10;
      }
      v10 = v11;
LABEL_13:
      ;
    }
    while (v10 != (WebKit::WebExtensionContext **)v12);
    v15 = v18;
    v6 = v17;
  }
  v17 = 0;
  v18 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v15;
  return WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v9);
}

_QWORD *WebKit::WebExtensionController::allProcesses@<X0>(WebKit::WebExtensionController *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 72;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 9, &v17);
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    v6 = *(unsigned int *)(v5 - 4);
    v7 = v5 + 8 * v6;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v12 = v4;
  v13 = v7;
  v14 = v7;
  v15 = v7;
  v16 = v5 + 8 * v6;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
  while (v18 != v13)
  {
    v9 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if (v9)
      v10 = v9 - 16;
    else
      v10 = 0;
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)a2, *(unsigned int **)(v10 + 208), (uint64_t)v11);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
  }
  return result;
}

uint64_t WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(uint64_t a1, int a2)
{
  _DWORD *v4;
  _BYTE v6[40];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DC9C8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (a2)
  {
    v6[0] = 0;
    v6[16] = 0;
    WebKit::WebExtensionControllerConfiguration::createStorageDirectoryPath((WTF::UUID *)v6);
  }
  else
  {
    v4 = (_DWORD *)*MEMORY[0x1E0CBF6F0];
    if (*MEMORY[0x1E0CBF6F0])
      *v4 += 2;
    *(_QWORD *)(a1 + 40) = v4;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

uint64_t WebKit::WebExtensionControllerConfiguration::WebExtensionControllerConfiguration(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  NSString *v5;
  _QWORD *v6;
  _DWORD *v7;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DC9C8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  v6 = (_QWORD *)(a1 + 40);
  v7 = *a3;
  if (*a3 && v7[1])
  {
    *v7 += 2;
    *v6 = v7;
  }
  else
  {
    WebKit::WebExtensionControllerConfiguration::createTemporaryStorageDirectoryPath(v5, (uint64_t)v6);
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

uint64_t WebKit::WebExtensionControllerConfiguration::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  BOOL v7;

  if (a1 == a2)
    return 1;
  result = 0;
  v7 = (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16) || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24))
    && *(_OWORD *)(a1 + 16) != 0;
  if ((*(_OWORD *)(a1 + 16) != 0) == (*(_OWORD *)(a2 + 16) != 0) && !v7)
  {
    result = WTF::equal(*(WTF **)(a1 + 40), *(const WTF::StringImpl **)(a2 + 40), a3);
    if ((_DWORD)result)
      return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56);
  }
  return result;
}

CFTypeRef *WebKit::WebExtensionControllerConfiguration::defaultWebsiteDataStore(WebKit::WebExtensionControllerConfiguration *this)
{
  CFTypeRef *v1;
  CFTypeRef *v3;

  v1 = (CFTypeRef *)*((_QWORD *)this + 7);
  if (!v1)
  {
    WebKit::WebsiteDataStore::defaultDataStore(this, (WebKit::WebsiteDataStore **)&v3);
    v1 = v3;
    if (v3)
      CFRelease(v3[1]);
  }
  return v1;
}

WebKit::WebExtensionDataRecord *WebKit::WebExtensionDataRecord::WebExtensionDataRecord(WebKit::WebExtensionDataRecord *this, const WTF::String *a2, const WTF::String *a3)
{
  _DWORD *v6;
  _DWORD *v7;

  *(_QWORD *)this = off_1E34CC2A8;
  WebKit::InitializeWebKit2(this);
  *(_QWORD *)this = &off_1E34DC9F0;
  v6 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v6 += 2;
  *((_QWORD *)this + 2) = v6;
  v7 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v7 += 2;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = v7;
  return this;
}

uint64_t WebKit::WebExtensionDataRecord::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result;
  const WTF::StringImpl *v6;

  if (a1 == a2)
    return 1;
  result = WTF::equal(*(WTF **)(a1 + 16), *(const WTF::StringImpl **)(a2 + 16), a3);
  if ((_DWORD)result)
    return WTF::equal(*(WTF **)(a1 + 24), *(const WTF::StringImpl **)(a2 + 24), v6);
  return result;
}

uint64_t WebKit::WebExtensionDataRecord::totalSize(WebKit::WebExtensionDataRecord *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  unsigned __int8 *v7;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = &v1[16 * v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[16 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    v4 = &v1[16 * v2];
    goto LABEL_10;
  }
  v4 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = (unsigned __int8 *)*((_QWORD *)this + 4);
    while (*v4 >= 0xFEu)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v1 += 16 * *((unsigned int *)v1 - 1);
  if (v1 == v4)
    return 0;
  result = 0;
  do
  {
    v7 = v3;
    if (v4 + 16 != v3)
    {
      v7 = v4 + 16;
      while (*v7 >= 0xFEu)
      {
        v7 += 16;
        if (v7 == v3)
        {
          v7 = v3;
          break;
        }
      }
    }
    result += *((_QWORD *)v4 + 1);
    v4 = v7;
  }
  while (v7 != v1);
  return result;
}

uint64_t WebKit::WebExtensionDataRecord::sizeOfTypes(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned __int8 v6;

  v2 = a2;
  if (!(_BYTE)a2)
    return 0;
  v3 = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = v2 & -(char)v2;
    v3 += WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebExtensionDataType>>,WebKit::WebExtensionDataType>(v4, &v6);
    v2 &= v2 - 1;
  }
  while ((_BYTE)v2);
  return v3;
}

uint64_t WebKit::WebExtensionDataRecord::types(WebKit::WebExtensionDataRecord *this)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  unsigned __int8 *v8;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (!v1)
  {
    v4 = 0;
    v2 = 0;
LABEL_10:
    v3 = &v1[16 * v2];
    goto LABEL_11;
  }
  v2 = *((unsigned int *)v1 - 1);
  v3 = &v1[16 * v2];
  if (!*((_DWORD *)v1 - 3))
  {
    v4 = &v1[16 * v2];
    goto LABEL_10;
  }
  v4 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if ((_DWORD)v2)
  {
    v5 = 16 * v2;
    v4 = (unsigned __int8 *)*((_QWORD *)this + 4);
    while (*v4 >= 0xFEu)
    {
      v4 += 16;
      v5 -= 16;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_11:
  if (v1)
    v1 += 16 * *((unsigned int *)v1 - 1);
  if (v1 == v4)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v8 = v4 + 16;
    v7 = *v4;
    v4 = v3;
    if (v8 != v3)
    {
      v4 = v8;
      while (*v4 >= 0xFEu)
      {
        v4 += 16;
        if (v4 == v3)
        {
          v4 = v3;
          break;
        }
      }
    }
    result = v7 | result;
  }
  while (v4 != v1);
  return result;
}

unsigned int *WebKit::GPUProcessProxy::keepProcessAliveTemporarily(unsigned int *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  WTF::RunLoop *v5;
  _QWORD *v6;
  _QWORD *v7;

  {
    if (WebKit::singleton(void)::singleton)
    {
      v1 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
      if (v1)
      {
        {
          WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
        }
        v2 = (unsigned int *)(v1 + 16);
        do
          v3 = __ldaxr(v2);
        while (__stlxr(v3 + 1, v2));
        v4 = WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy;
        WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = v1;
        if (v4)
          this = WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
        {
          v5 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)this);
          v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v6 = off_1E34DCCE8;
          v7 = (_QWORD *)WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)&WebKit::GPUProcessProxy::keepProcessAliveTemporarily(void)::releaseGPUProcessTimer, v5);
          *v7 = off_1E34ABE00;
          v7[3] = v6;
        }
        return (unsigned int *)WTF::RunLoop::TimerBase::start();
      }
    }
  }
  else
  {
    WebKit::singleton(void)::singleton = 0;
  }
  return this;
}

void WebKit::GPUProcessProxy::~GPUProcessProxy(WebKit::GPUProcessProxy *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *((_QWORD *)this + 56);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  v4 = *((unsigned int *)this + 106);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34DCC50[v4])(&v5, (char *)this + 416);
  *((_DWORD *)this + 106) = -1;
  WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(this);
}

void `non-virtual thunk to'WebKit::GPUProcessProxy::~GPUProcessProxy(WebKit::GPUProcessProxy *this, void *a2)
{
  WebKit::GPUProcessProxy::~GPUProcessProxy((WebKit::GPUProcessProxy *)((char *)this - 24), a2);
}

{
  WebKit::GPUProcessProxy::~GPUProcessProxy((WebKit::GPUProcessProxy *)((char *)this - 32), a2);
}

{
  WebKit::GPUProcessProxy::operator delete((WebKit::GPUProcessProxy *)((char *)this - 24), a2);
}

{
  WebKit::GPUProcessProxy::operator delete((WebKit::GPUProcessProxy *)((char *)this - 32), a2);
}

double WebKit::GPUProcessProxy::operator delete(WebKit::GPUProcessProxy *a1, void *a2)
{
  uint64_t v2;
  void *v3;
  double result;

  WebKit::GPUProcessProxy::~GPUProcessProxy(a1, a2);
  if (atomic_load((unsigned int *)(v2 + 48)))
  {
    *(_QWORD *)(v2 + 448) = 0;
    result = 0.0;
    *(_OWORD *)(v2 + 416) = 0u;
    *(_OWORD *)(v2 + 432) = 0u;
    *(_OWORD *)(v2 + 384) = 0u;
    *(_OWORD *)(v2 + 400) = 0u;
    *(_OWORD *)(v2 + 352) = 0u;
    *(_OWORD *)(v2 + 368) = 0u;
    *(_OWORD *)(v2 + 320) = 0u;
    *(_OWORD *)(v2 + 336) = 0u;
    *(_OWORD *)(v2 + 288) = 0u;
    *(_OWORD *)(v2 + 304) = 0u;
    *(_OWORD *)(v2 + 256) = 0u;
    *(_OWORD *)(v2 + 272) = 0u;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesEnabled>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 74;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetOrientationForMediaCapture>(uint64_t a1, _DWORD **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 77;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 4uLL, 4) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

_BYTE *WebKit::GPUProcessProxy::updateSandboxAccess(_BYTE *this, void *a2, int a3)
{
  char v3;
  _BYTE *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char **v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char ***v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t buf[8];
  const char **v26;
  unsigned __int8 v27;
  char v28;
  uint8_t v29[8];
  unsigned __int8 v30;

  if (this[432])
    return this;
  v3 = (char)a2;
  v4 = this;
  v23 = 0;
  v24 = 0;
  if (a3)
  {
    if (this[441])
      goto LABEL_4;
    WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.camera", (uint64_t)&v26);
    v9 = v27;
    if (v27)
    {
      v18 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, HIDWORD(v24) + 1, (unint64_t)&v26);
      v19 = HIDWORD(v24);
      v20 = v23;
      v21 = *v18;
      *v18 = 0;
      *(_QWORD *)(v20 + 8 * v19) = v21;
      HIDWORD(v24) = v19 + 1;
    }
    else
    {
      v15 = qword_1ECE71B18;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
        goto LABEL_4;
      *(_WORD *)v29 = 0;
      _os_log_error_impl(&dword_196BCC000, v15, OS_LOG_TYPE_ERROR, "Unable to create com.apple.webkit.camera sandbox extension", v29, 2u);
    }
    if (v27)
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v26);
    if (v9)
      v4[441] = 1;
LABEL_4:
    if ((v3 & 1) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!(_DWORD)a2)
    goto LABEL_9;
LABEL_7:
  if (v4[442])
    goto LABEL_8;
  WebKit::SandboxExtension::createHandleForGenericExtension((uint64_t)"com.apple.webkit.microphone", (uint64_t)&v26);
  v10 = v27;
  if (v27)
  {
    v11 = HIDWORD(v24);
    if (HIDWORD(v24) == (_DWORD)v24)
    {
      v22 = (const char ***)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, HIDWORD(v24) + 1, (unint64_t)&v26);
      v11 = HIDWORD(v24);
      v12 = v23;
      v13 = *v22;
      *v22 = 0;
    }
    else
    {
      v12 = v23;
      v13 = v26;
      v26 = 0;
    }
    *(_QWORD *)(v12 + 8 * v11) = v13;
    HIDWORD(v24) = v11 + 1;
  }
  else
  {
    v16 = qword_1ECE71B18;
    if (!os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_WORD *)v29 = 0;
    _os_log_error_impl(&dword_196BCC000, v16, OS_LOG_TYPE_ERROR, "Unable to create com.apple.webkit.microphone sandbox extension", v29, 2u);
  }
  if (v27)
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v26);
  if (v10)
    v4[442] = 1;
LABEL_8:
  if (!v4[440])
  {
    LOBYTE(v26) = 0;
    v28 = 0;
    WebKit::SandboxExtension::createHandleForMachLookup((uint64_t)"com.apple.tccd", (uint64_t)&v26, (uint64_t)v29);
    v5 = v30;
    if (v30)
    {
      v6 = HIDWORD(v24);
      if (HIDWORD(v24) == (_DWORD)v24)
      {
        v17 = (uint64_t *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, HIDWORD(v24) + 1, (unint64_t)v29);
        v6 = HIDWORD(v24);
        v7 = v23;
        v8 = *v17;
        *v17 = 0;
      }
      else
      {
        v7 = v23;
        v8 = *(_QWORD *)v29;
        *(_QWORD *)v29 = 0;
      }
      *(_QWORD *)(v7 + 8 * v6) = v8;
      HIDWORD(v24) = v6 + 1;
    }
    else
    {
      v14 = qword_1ECE71B18;
      if (!os_log_type_enabled((os_log_t)qword_1ECE71B18, OS_LOG_TYPE_ERROR))
        goto LABEL_9;
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_196BCC000, v14, OS_LOG_TYPE_ERROR, "Unable to create com.apple.tccd sandbox extension", buf, 2u);
    }
    if (v30)
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)v29);
    if (v5)
      v4[440] = 1;
  }
LABEL_9:
  if (HIDWORD(v24))
  {
    v26 = (const char **)&v23;
    WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateSandboxAccess>((uint64_t)v4, (uint64_t *)&v26, 0, 0);
  }
  return (_BYTE *)WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, a2);
}

uint64_t WebKit::GPUProcessProxy::updateCaptureAccess(_BYTE *a1, void *a2, int a3, char a4, uint64_t a5, uint64_t *a6)
{
  char v8;
  char v9;
  _BYTE v12[8];
  uint64_t *v13;
  uint64_t v14;

  v8 = a3;
  v9 = (char)a2;
  v14 = a5;
  WebKit::GPUProcessProxy::updateSandboxAccess(a1, a2, a3);
  v12[0] = v9;
  v12[1] = v8;
  v12[2] = a4;
  v13 = &v14;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>((uint64_t)a1, (uint64_t)v12, a6, 0, 0, 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 79;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DCD10;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::UpdateCaptureOrigin>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 80;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v8, *(_QWORD *)a2);
  v9 = **(_QWORD **)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::AddMockMediaDevice>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 62;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::MockMediaDevice,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ClearMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 64;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveMockMediaDevice>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 69;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockMediaDeviceIsEphemeral>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 76;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *(uint64_t **)a2);
  LOBYTE(a3) = *(_BYTE *)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::ResetMockMediaDevices>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 72;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::SetMockCaptureDevicesInterrupted>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 75;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::TriggerMockCaptureConfigurationChange>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 78;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebCore::CompositeMode,void>::encode((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *WebKit::GPUProcessProxy::processWillShutDown(WebKit::GPUProcessProxy *this, IPC::Connection *a2)
{
  unsigned int *result;
  WebKit::GPUProcessProxy *v4;
  unsigned int v5;
  unsigned int v6;

  {
    result = (unsigned int *)WebKit::singleton(void)::singleton;
    if (WebKit::singleton(void)::singleton)
      v4 = *(WebKit::GPUProcessProxy **)(WebKit::singleton(void)::singleton + 8);
    else
      v4 = 0;
  }
  else
  {
    result = 0;
    v4 = 0;
    WebKit::singleton(void)::singleton = 0;
  }
  if (v4 == this)
  {
    WebKit::singleton(void)::singleton = 0;
    if (result)
    {
      do
      {
        v5 = __ldaxr(result);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, result));
      if (!v6)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::GPUProcessProxy::createGPUProcessConnection(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  WebKit::WebsiteDataStore *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  IPC::Encoder *v14;
  const char **v15;
  WTF *v16;
  void *v17;
  uint64_t v18;
  IPC::Encoder *v19;
  const char **v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  IPC::Encoder *v25;
  IPC::Encoder *v26;
  WTF *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  IPC::Encoder *result;
  WTF *v62;
  void *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  uint64_t v69;
  int v70;
  const char **v71;
  IPC::Encoder *v72;
  char v73;
  char v74;
  IPC::Encoder *v75;
  uint8_t buf[16];
  WebKit::SandboxExtensionImpl *v77[2];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a4 + 48) = WebKit::GPUProcessProxy::s_hasVP9HardwareDecoder;
  *(_WORD *)(a4 + 50) = WebKit::GPUProcessProxy::s_hasAV1HardwareDecoder;
  v8 = *(WebKit::WebsiteDataStore **)(a2 + 752);
  if (v8)
  {
    if ((v9 = *(_QWORD *)(a1 + 136)) != 0 && *(_BYTE *)(v9 + 104) || *(_QWORD *)(a1 + 144))
    {
      v10 = *((_QWORD *)v8 + 3);
      v11 = *(_QWORD *)(a1 + 448);
      if (v11)
      {
        v64 = *(_DWORD *)(v11 - 8);
        v65 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
        v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
        v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
        v68 = v64 & ((v67 >> 31) ^ v67);
        v69 = *(_QWORD *)(v11 + 8 * v68);
        if (v69 == v10)
          goto LABEL_51;
        v70 = 1;
        while (v69)
        {
          v68 = (v68 + v70) & v64;
          v69 = *(_QWORD *)(v11 + 8 * v68);
          ++v70;
          if (v69 == v10)
            goto LABEL_51;
        }
      }
      *(_OWORD *)buf = 0u;
      *(_OWORD *)v77 = 0u;
      v12 = WebKit::WebsiteDataStore::resolvedDirectories(v8);
      WTF::String::operator=((WTF::StringImpl **)buf, (WTF::StringImpl *)(v12 + 88));
      v75 = 0;
      if (*(_QWORD *)buf)
      {
        v13 = *(unsigned int *)(*(_QWORD *)buf + 4);
        if ((_DWORD)v13)
        {
          WebKit::SandboxExtension::createHandleWithoutResolvingPath(*(WebKit::SandboxExtensionImpl **)(*(_QWORD *)buf + 8), (WebKit::SandboxExtensionImpl *)(v13 | ((unint64_t)((*(_DWORD *)(*(_QWORD *)buf + 16) >> 2) & 1) << 32)), 1, (uint64_t)&v72);
          if (v73)
          {
            v14 = v72;
            v72 = 0;
            v15 = *(const char ***)&buf[8];
            *(_QWORD *)&buf[8] = v14;
            if (!v15 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v15), WTF::fastFree(v16, v17), v73))
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v72);
          }
        }
      }
      WTF::String::operator=(v77, (WTF::StringImpl *)(v12 + 96));
      v71 = 0;
      if (v77[0])
      {
        v18 = *((unsigned int *)v77[0] + 1);
        if ((_DWORD)v18)
        {
          WebKit::SandboxExtension::createHandleWithoutResolvingPath(*((WebKit::SandboxExtensionImpl **)v77[0] + 1), (WebKit::SandboxExtensionImpl *)(v18 | ((unint64_t)((*((_DWORD *)v77[0] + 4) >> 2) & 1) << 32)), 1, (uint64_t)&v72);
          if (v73)
          {
            v19 = v72;
            v72 = 0;
            v20 = (const char **)v77[1];
            v77[1] = v19;
            if (!v20 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v20), WTF::fastFree(v21, v22), v73))
              WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v72);
          }
        }
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v71);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v75);
      v23 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v23 = 63;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 528) = v23 + 16;
      *(_QWORD *)(v23 + 536) = v23 + 16;
      *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v23 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
      v75 = (IPC::Encoder *)v23;
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v23, 8uLL, 8) = v10;
      IPC::ArgumentCoder<WebKit::GPUProcessSessionParameters,void>::encode((IPC::Encoder *)v23, (uint64_t)buf);
      LOBYTE(v72) = 0;
      v74 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v75, 0, (uint64_t)&v72, 1);
      if (v74)
      {
        v25 = v72;
        v72 = 0;
        if (v25)
          (*(void (**)(IPC::Encoder *))(*(_QWORD *)v25 + 8))(v25);
      }
      v26 = v75;
      v75 = 0;
      if (v26)
      {
        IPC::Encoder::~Encoder(v26, v24);
        WTF::fastFree(v27, v28);
      }
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v77[1]);
      v30 = v77[0];
      v77[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v29);
        else
          *(_DWORD *)v30 -= 2;
      }
      v31 = (uint64_t *)(a1 + 448);
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&buf[8]);
      v33 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = *((_QWORD *)v8 + 3);
      v35 = *v31;
      if (*v31
        || (WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand((uint64_t *)(a1 + 448), 0), (v35 = *v31) != 0))
      {
        v36 = *(_DWORD *)(v35 - 8);
      }
      else
      {
        v36 = 0;
      }
      v37 = (v34 + ~(v34 << 32)) ^ ((unint64_t)(v34 + ~(v34 << 32)) >> 22);
      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
      v40 = v36 & ((v39 >> 31) ^ v39);
      v41 = (_QWORD *)(v35 + 8 * v40);
      v42 = *v41;
      if (!*v41)
      {
LABEL_42:
        *v41 = v34;
        v45 = *v31;
        if (*v31)
          v46 = *(_DWORD *)(v45 - 12) + 1;
        else
          v46 = 1;
        *(_DWORD *)(v45 - 12) = v46;
        v47 = *v31;
        if (*v31)
          v48 = *(_DWORD *)(v47 - 12);
        else
          v48 = 0;
        v49 = (*(_DWORD *)(v47 - 16) + v48);
        v50 = *(unsigned int *)(v47 - 4);
        if (v50 > 0x400)
        {
          if (v50 > 2 * v49)
            goto LABEL_51;
        }
        else if (3 * v50 > 4 * v49)
        {
          goto LABEL_51;
        }
        WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::expand((uint64_t *)(a1 + 448), v41);
        goto LABEL_51;
      }
      v43 = 0;
      v44 = 1;
      while (v42 != v34)
      {
        if (v42 == -1)
          v43 = v41;
        v40 = (v40 + v44) & v36;
        v41 = (_QWORD *)(v35 + 8 * v40);
        v42 = *v41;
        ++v44;
        if (!*v41)
        {
          if (v43)
          {
            *v43 = 0;
            --*(_DWORD *)(*v31 - 16);
            v41 = v43;
          }
          goto LABEL_42;
        }
      }
    }
  }
LABEL_51:
  v51 = qword_1ECE71640;
  if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_196BCC000, v51, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy is taking a background assertion because a web process is requesting a connection", buf, 0xCu);
  }
  if (*(_BYTE *)(a1 + 169))
  {
    WebKit::ResponsivenessTimer::start(a1 + 56);
  }
  else if (!*(_BYTE *)(a1 + 185))
  {
    *(_WORD *)(a1 + 184) = 256;
  }
  v52 = *(_QWORD *)(a2 + 176);
  v53 = *(_QWORD *)(*(_QWORD *)(a2 + 752) + 24);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v54 = *(unsigned int **)(a1 + 8);
  if (v54)
  {
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
  }
  v56 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v56 = 65;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 528) = v56 + 16;
  *(_QWORD *)(v56 + 536) = v56 + 16;
  *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v56 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
  v72 = (IPC::Encoder *)v56;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v56, 8uLL, 8) = v52;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v56, 8uLL, 8) = v53;
  IPC::Encoder::addAttachment(v56, a3);
  IPC::ArgumentCoder<WebKit::GPUProcessConnectionParameters,void>::encode((IPC::Encoder *)v56, (char *)a4);
  v57 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v57 = &off_1E34DCD38;
  v57[1] = a1;
  v57[2] = v54;
  v58 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  *(_QWORD *)buf = v57;
  *(_QWORD *)&buf[8] = v58;
  LOBYTE(v77[0]) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v72, 1, (uint64_t)buf, 1);
  if (LOBYTE(v77[0]))
  {
    v60 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  result = v72;
  v72 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v59);
    return (IPC::Encoder *)WTF::fastFree(v62, v63);
  }
  return result;
}

unsigned int *WebKit::GPUProcessProxy::gpuProcessExited(uint64_t a1, unsigned int a2)
{
  unsigned int *v4;
  unsigned int v5;
  NSObject *v6;
  WTF::StringImpl *v7;
  WebKit *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unsigned int *result;
  const char *v28;
  _QWORD *v29;
  _QWORD v30[2];
  WebKit::WebProcessPool **v31;
  int v32;
  _BYTE buf[24];
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned int *)(a1 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v28 = "ExceededMemoryLimit";
    switch(a2)
    {
      case 0u:
        break;
      case 1u:
        v28 = "ExceededCPULimit";
        break;
      case 2u:
        v28 = "RequestedByClient";
        break;
      case 3u:
        v28 = "IdleExit";
        break;
      case 4u:
        v28 = "Unresponsive";
        break;
      case 5u:
        v28 = "Crash";
        break;
      case 6u:
        v28 = "ExceededProcessCountLimit";
        break;
      case 7u:
        v28 = "NavigationSwap";
        break;
      case 8u:
        v28 = "RequestedByNetworkProcess";
        break;
      case 9u:
        v28 = "RequestedByGPUProcess";
        break;
      default:
        v28 = (const char *)&str_10_5;
        break;
    }
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v28;
    _os_log_error_impl(&dword_196BCC000, v6, OS_LOG_TYPE_ERROR, "%p - GPUProcessProxy::gpuProcessExited: reason=%{public}s", buf, 0x16u);
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v31);
  if (v32)
  {
    v8 = (WebKit *)WebKit::WebProcessPool::extensionCapabilityGranter(*v31);
    v29 = *(_QWORD **)(a1 + 392);
    *(_QWORD *)(a1 + 392) = 0;
    v9 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v29);
    if (v29)
    {
      v11 = *((_DWORD *)v29 - 1);
      v12 = &v29[3 * v11];
    }
    else
    {
      v12 = 0;
      v11 = 0;
    }
    *(_QWORD *)buf = &v29;
    *(_QWORD *)&buf[8] = v9;
    *(_QWORD *)&buf[16] = v10;
    v34 = v12;
    v35 = &v29[3 * v11];
    v30[0] = 0;
    v30[1] = 0;
    WTF::Mapper<WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::moveToVectorOf<WebKit::ExtensionCapabilityGrant,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &)::{lambda(WebKit::ExtensionCapabilityGrant&&)#1},WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>,WTF::HashTableValuesIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WebKit::ExtensionCapabilityGrant>> &,void>::map((uint64_t)v30, (uint64_t **)buf);
    WebKit::ExtensionCapabilityGranter::invalidateGrants(v8, (uint64_t)v30);
    WTF::Vector<WebKit::ExtensionCapabilityGrant,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v30, v13);
    if (v29)
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)v29, v7);
  }
  WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v31, v7);
  {
    v15 = WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy;
  }
  else
  {
    v15 = 0;
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
  }
  if (v15 == a1)
  {
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
    if (a1)
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  }
  {
    v16 = (unsigned int *)WebKit::singleton(void)::singleton;
    if (WebKit::singleton(void)::singleton)
      v17 = *(_QWORD *)(WebKit::singleton(void)::singleton + 8);
    else
      v17 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    WebKit::singleton(void)::singleton = 0;
  }
  if (v17 == a1)
  {
    WebKit::singleton(void)::singleton = 0;
    if (v16)
    {
      do
      {
        v18 = __ldaxr(v16);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v16));
      if (!v19)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v14);
      }
    }
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)buf);
  if (*(_DWORD *)&buf[12])
  {
    v21 = *(uint64_t **)buf;
    v22 = 8 * *(unsigned int *)&buf[12];
    do
    {
      v23 = *(_QWORD *)(a1 + 136);
      if (v23)
        v24 = *(unsigned int *)(v23 + 108);
      else
        v24 = 0;
      v25 = *v21++;
      WebKit::WebProcessPool::gpuProcessExited(v25, v24, a2);
      v22 -= 8;
    }
    while (v22);
    WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v26);
  }
  else
  {
    result = (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)buf, v20);
    if (!a1)
      return result;
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::GPUProcessProxy::processIsReadyToExit(WebKit::GPUProcessProxy *this)
{
  NSObject *v2;
  int v4;
  WebKit::GPUProcessProxy *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v4 = 134217984;
    v5 = this;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - GPUProcessProxy::processIsReadyToExit:", (uint8_t *)&v4, 0xCu);
  }
  WebKit::AuxiliaryProcessProxy::terminate(this);
  return WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)this, 3u);
}

unsigned int *WebKit::GPUProcessProxy::didBecomeUnresponsive(WebKit::GPUProcessProxy *this)
{
  NSObject *v2;
  uint64_t v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v4 = *((_QWORD *)this + 17);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "GPUProcessProxy::didBecomeUnresponsive: GPUProcess with PID %d became unresponsive, terminating it", (uint8_t *)v5, 8u);
  }
  WebKit::AuxiliaryProcessProxy::terminate(this);
  return WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)this, 4u);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 84;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34DCD60;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

unsigned int *WebKit::GPUProcessProxy::didClose(WebKit::GPUProcessProxy *this, IPC::Connection *a2)
{
  NSObject *v3;
  int v5;
  WebKit::GPUProcessProxy *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v5 = 134217984;
    v6 = this;
    _os_log_error_impl(&dword_196BCC000, v3, OS_LOG_TYPE_ERROR, "%p - GPUProcessProxy::didClose:", (uint8_t *)&v5, 0xCu);
  }
  return WebKit::GPUProcessProxy::gpuProcessExited((uint64_t)this, 5u);
}

unsigned int *`non-virtual thunk to'WebKit::GPUProcessProxy::didClose(WebKit::GPUProcessProxy *this, IPC::Connection *a2)
{
  return WebKit::GPUProcessProxy::didClose((WebKit::GPUProcessProxy *)((char *)this - 32), a2);
}

unsigned int *WebKit::GPUProcessProxy::didReceiveInvalidMessage(WebKit::AuxiliaryProcessProxy *a1, uint64_t a2, WTF::StringImpl *a3)
{
  IPC::Connection *v5;

  WebKit::AuxiliaryProcessProxy::logInvalidMessage(a1, a2, a3);
  WebKit::WebProcessPool::didReceiveInvalidMessage(a3);
  WebKit::AuxiliaryProcessProxy::terminate(a1);
  return WebKit::GPUProcessProxy::didClose(a1, v5);
}

unsigned int *`non-virtual thunk to'WebKit::GPUProcessProxy::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  return WebKit::GPUProcessProxy::didReceiveInvalidMessage((WebKit::AuxiliaryProcessProxy *)(a1 - 32), a2, a3);
}

void `non-virtual thunk to'WebKit::GPUProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::GPUProcessProxy::didFinishLaunching((WebKit::AuxiliaryProcessProxy *)(a1 - 24), a2, a3);
}

_QWORD *WebKit::GPUProcessProxy::removeSession(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;

  v2 = (uint64_t)result;
  v7 = a2;
  v3 = result[17];
  if (v3 && *(_BYTE *)(v3 + 104) || result[18])
  {
    result = (_QWORD *)WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(result + 56, &v7);
    v4 = *(_QWORD *)(v2 + 448);
    if (v4)
    {
      v5 = (_QWORD *)(v4 + 8 * *(unsigned int *)(v4 - 4));
      if (v5 == result)
        return result;
    }
    else
    {
      if (!result)
        return result;
      v5 = 0;
    }
    if (v5 != result)
      WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::remove((uint64_t *)(v2 + 448), result);
    v6 = &v7;
    return (_QWORD *)WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveSession>(v2, &v6, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::GPUProcess::RemoveSession>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 70;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

IPC::Encoder *WebKit::GPUProcessProxy::sendPrepareToSuspend(WTF::MonotonicTime *a1, char a2, uint64_t *a3, double a4)
{
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  _QWORD v18[2];
  char v19;
  IPC::Encoder *v20;

  WTF::MonotonicTime::now(a1);
  v9 = v8 + a4;
  v10 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v10 = 67;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 528) = v10 + 16;
  *(_QWORD *)(v10 + 536) = v10 + 16;
  *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v10 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
  v20 = (IPC::Encoder *)v10;
  *IPC::Encoder::grow((IPC::Encoder *)v10, 1uLL, 1) = a2;
  *(double *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v9;
  v11 = *a3;
  *a3 = 0;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v12 = &off_1E34DCD88;
  v12[1] = v11;
  v18[0] = v12;
  v18[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v19 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)a1, &v20, 0, (uint64_t)v18, 0);
  if (v19)
  {
    v14 = v18[0];
    v18[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *WebKit::GPUProcessProxy::sendProcessDidResume(IPC::Encoder *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  WTF *v6;
  void *v7;
  uint64_t v8;
  char v9;
  IPC::Encoder *v10;

  v1 = (uint64_t)result;
  v2 = *((_QWORD *)result + 17);
  if (v2 && *(_BYTE *)(v2 + 104) || *((_QWORD *)result + 18))
  {
    v3 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v3 = 68;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 528) = v3 + 16;
    *(_QWORD *)(v3 + 536) = v3 + 16;
    *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v3 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
    v10 = (IPC::Encoder *)v3;
    LOBYTE(v8) = 0;
    v9 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v1, &v10, 0, (uint64_t)&v8, 1);
    if (v9)
    {
      v5 = v8;
      v8 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
    result = v10;
    v10 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      return (IPC::Encoder *)WTF::fastFree(v6, v7);
    }
  }
  return result;
}

unsigned int *WebKit::GPUProcessProxy::terminateWebProcess(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v5 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v5);
  if (result)
  {
    v3 = result + 4;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    WebKit::WebProcessProxy::requestTermination(result, 9);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  return result;
}

void WebKit::GPUProcessProxy::didCreateContextForVisibilityPropagation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  WebKit::ProvisionalPageProxy *v10;
  NSObject *v11;
  uint8_t v12[16];
  _BYTE buf[12];
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = a2;
    v14 = 2048;
    v15 = a3;
    v16 = 1024;
    v17 = a4;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "GPUProcessProxy::didCreateContextForVisibilityPropagation: webPageProxyID: %llu, pagePID: %llu, contextID: %u", buf, 0x1Cu);
  }
  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)buf);
  v8 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)buf + 32) + 1896) == a3)
    {
      WebKit::WebPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(*(WebKit::WebPageProxy **)buf, a4);
    }
    else
    {
      v10 = *(WebKit::ProvisionalPageProxy **)(*(_QWORD *)buf + 1120);
      if (v10 && *((_QWORD *)v10 + 4) == a3)
      {
        WebKit::ProvisionalPageProxy::didCreateContextInGPUProcessForVisibilityPropagation(v10, a4);
      }
      else
      {
        v11 = qword_1ECE71C68;
        if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v12 = 0;
          _os_log_impl(&dword_196BCC000, v11, OS_LOG_TYPE_DEFAULT, "GPUProcessProxy::didCreateContextForVisibilityPropagation() There was a WebPageProxy for this identifier, but it had the wrong WebPage identifier.", v12, 2u);
        }
      }
    }
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
  else
  {
    v9 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "GPUProcessProxy::didCreateContextForVisibilityPropagation() No WebPageProxy with this identifier", v12, 2u);
    }
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 71;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DCDB0;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::GPUProcessProxy::statusBarWasTapped(uint64_t a1, uint64_t *a2)
{
  WebKit::WebPageProxy *v3;
  uint64_t v4;
  WebKit::WebPageProxy *v6;

  WebKit::WebProcessProxy::audioCapturingWebPage(&v6);
  v3 = v6;
  if (v6)
  {
    WebKit::WebPageProxy::statusBarWasTapped(v6);
    CFRelease(*((CFTypeRef *)v3 + 1));
  }
  v4 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t API::ObjectImpl<(API::Object::Type)56>::type()
{
  return 56;
}

uint64_t API::ObjectImpl<(API::Object::Type)118>::type()
{
  return 118;
}

uint64_t API::ObjectImpl<(API::Object::Type)114>::type()
{
  return 114;
}

uint64_t WebKit::GPUProcessProxy::type(WebKit::GPUProcessProxy *this)
{
  return 0;
}

const char *WebKit::GPUProcessProxy::clientName(WebKit::GPUProcessProxy *this)
{
  return "GPUProcess";
}

const char *WebKit::GPUProcessProxy::processName(WebKit::GPUProcessProxy *this)
{
  return "GPU";
}

void WebKit::WebExtensionControllerConfiguration::~WebExtensionControllerConfiguration(WebKit::WebExtensionControllerConfiguration *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34DC9C8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
}

{
  uint64_t v3;
  const void *v4;
  WTF::StringImpl *v5;

  *(_QWORD *)this = &off_1E34DC9C8;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (const void *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    CFRelease(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)115>::type()
{
  return 115;
}

void WebKit::WebExtensionDataRecord::~WebExtensionDataRecord(WebKit::WebExtensionDataRecord *this, void *a2)
{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34DC9F0;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
}

{
  const void *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)this = &off_1E34DC9F0;
  v3 = (const void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    CFRelease(v3);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)116>::type()
{
  return 116;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::WebExtensionAlarm::*&)(void),WebKit::WebExtensionAlarm*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

void API::ObjectImpl<(API::Object::Type)113>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

uint64_t API::ObjectImpl<(API::Object::Type)113>::type()
{
  return 113;
}

uint64_t WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  ++*(_DWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a2 + 24);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return 0;
  v4 = *(_QWORD *)(a2 + 24);
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::contains<WTF::HashMapTranslator<WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>((uint64_t *)a1, &v4);
}

void API::ObjectImpl<(API::Object::Type)114>::~ObjectImpl()
{
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;

  result = *(unsigned int **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0>(WebKit::WebExtensionController::WebExtensionController(WTF::Ref<WebKit::WebExtensionControllerConfiguration,WTF::RawPtrTraits<WebKit::WebExtensionControllerConfiguration>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionControllerConfiguration>>)::$_0)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      *(_BYTE *)(*(_QWORD *)(result + 32) + 176) &= ~1u;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DCC70;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DCC70;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8[2];
  WTF *v9;
  char v10;
  WebKit *v11;

  v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(a2, (uint64_t)v8);
    if (v10)
    {
      v4 = v9;
      v5 = *v2;
      if (v9)
      {
        API::Data::create(v9, *(const void **)v8, &v11);
        v4 = v11;
      }
      v6 = *(_QWORD *)(v5 + 64);
      *(_QWORD *)(v5 + 64) = v4;
      if (v6)
      {
        CFRelease(*(CFTypeRef *)(v6 + 8));
        v4 = *(WTF **)(v5 + 64);
      }
      v7 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v7 + 16))(v7, v4);
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      WebKit::DownloadProxyMap::downloadFinished(*(_QWORD *)(v5 + 32), v5);
    }
    else
    {
      IPC::Connection::cancelReply<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(v2);
    }
  }
  else
  {
    IPC::Connection::cancelReply<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>((uint64_t *)(a1 + 8));
  }
}

void IPC::Connection::cancelReply<Messages::NetworkProcess::CancelDownload,WebKit::DownloadProxy::cancel(WTF::CompletionHandler<void ()(API::Data *)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 64);
  *(_QWORD *)(*a1 + 64) = 0;
  if (v3)
  {
    CFRelease(*(CFTypeRef *)(v3 + 8));
    v4 = *(_QWORD *)(v2 + 64);
  }
  else
  {
    v4 = 0;
  }
  v5 = a1[2];
  a1[2] = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WebKit::DownloadProxyMap::downloadFinished(*(_QWORD *)(v2 + 32), v2);
}

const char **IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::URL const&,WebKit::SandboxExtensionHandle &&>,void>::encode<IPC::Encoder,WebKit::SandboxExtensionHandle &&,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 8));
  return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, *(const char ****)(a2 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DownloadProxy::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DCC98;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DownloadProxy::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DCC98;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DownloadProxy::willSendRequest(WebCore::ResourceRequest &&,WebCore::ResourceResponse const&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest &)> &&)::$_0,void,WebCore::ResourceRequest &>::call(uint64_t a1, WebCore::ResourceRequestBase *this)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = (uint64_t *)(v4 + 296);
  v6 = WebCore::ResourceRequestBase::url(this);
  v7 = *(_DWORD *)(v4 + 308);
  if (v7 == *(_DWORD *)(v4 + 304))
  {
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::URL const&>(v4 + 296, v6);
  }
  else
  {
    v8 = *v5;
    v9 = (_QWORD *)(*v5 + 40 * v7);
    v10 = *(_DWORD **)v6;
    if (*(_QWORD *)v6)
      *v10 += 2;
    *v9 = v10;
    v11 = v8 + 40 * v7;
    v12 = *(_OWORD *)(v6 + 8);
    *(_OWORD *)(v11 + 24) = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v11 + 8) = v12;
    ++*(_DWORD *)(v4 + 308);
  }
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  (*(void (**)(uint64_t, WebCore::ResourceRequestBase *))(*(_QWORD *)v13 + 16))(v13, this);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite)> &&)::$_0,void,WebKit::SandboxExtensionHandle,WTF::String>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DCCC0;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite)> &&)::$_0,void,WebKit::SandboxExtensionHandle,WTF::String>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DCCC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::DownloadProxy::decideDestinationWithSuggestedFilename(WebCore::ResourceResponse const&,WTF::String &&,WTF::CompletionHandler<void ()(WTF::String,WebKit::SandboxExtensionHandle,WebKit::AllowOverwrite)> &&)::$_0,void,WebKit::SandboxExtensionHandle,WTF::String>::call(uint64_t a1, uint64_t a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const char **v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  const char **v15;
  WTF::StringImpl *v16;
  char v17;
  const char **v18;
  const char **v19;
  const char **v20;

  v5 = *a3;
  *a3 = 0;
  v14 = v5;
  v6 = *(_QWORD *)(a1 + 8);
  if (v5 && (WebKit::SandboxExtension::createHandle(1, (uint64_t)&v16), v17))
  {
    v7 = (const char **)v16;
    v16 = 0;
    v18 = v7;
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v16);
  }
  else
  {
    v7 = 0;
  }
  WTF::String::operator=((WTF::StringImpl **)(v6 + 280), (WTF::StringImpl *)&v14);
  v8 = v14;
  if (v14)
    *(_DWORD *)v14 += 2;
  v18 = 0;
  v19 = 0;
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v15 = 0;
  v16 = v8;
  v20 = v7;
  (*(void (**)(uint64_t, WTF::StringImpl **, const char ***, uint64_t))(*(_QWORD *)v9 + 16))(v9, &v16, &v20, a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v20);
  v11 = v16;
  v16 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v19);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v15);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v18);
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::DownloadProxy,WTF::RawPtrTraits<WebKit::DownloadProxy>,WTF::DefaultRefDerefTraits<WebKit::DownloadProxy>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
            CFRelease(*(CFTypeRef *)(v24 + 8));
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          CFRelease(*(CFTypeRef *)(v13 + 8));
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebExtensionContext,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionContextIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t *result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = 8;
LABEL_6:
  v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (uint64_t *)(v4 + 16 * v10);
      v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          v23 = v19 & ((v22 >> 31) ^ v22);
          v24 = 1;
          do
          {
            v25 = v23;
            v26 = *(_QWORD *)(v18 + 16 * v23);
            v23 = (v23 + v24++) & v19;
          }
          while (v26);
          v27 = (uint64_t *)(v18 + 16 * v25);
          v28 = (unsigned int *)v27[1];
          v27[1] = 0;
          if (v28)
          {
            do
            {
              v32 = __ldaxr(v28);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v28));
            if (!v33)
            {
              atomic_store(1u, v28);
              WTF::fastFree((WTF *)v28, v9);
            }
          }
          *v27 = *v12;
          v29 = v4 + 16 * v10;
          v30 = *(_QWORD *)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          v27[1] = v30;
          v31 = *(unsigned int **)(v29 + 8);
          *(_QWORD *)(v29 + 8) = 0;
          if (v31)
          {
            do
            {
              v34 = __ldaxr(v31);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v31));
            if (!v35)
            {
              atomic_store(1u, v31);
              WTF::fastFree((WTF *)v31, v9);
            }
          }
          if (v12 == a2)
            v11 = v27;
        }
        else
        {
          v14 = v4 + 16 * v10;
          v15 = *(unsigned int **)(v14 + 8);
          *(_QWORD *)(v14 + 8) = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v9);
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    v11 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

unsigned __int8 *WTF::HashTable<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>,WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>,WTF::HashTraits<WTF::WeakHashCountedSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>>,std::pair<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned __int8 *result;
  int v11;
  int v12;
  int v14;

  v2 = *a1;
  if (!*a1)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  v6 = WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(a2);
  v7 = *a2;
  v8 = a2[1];
  v9 = v6 & v5;
  result = (unsigned __int8 *)(v2 + 24 * (v6 & v5));
  v11 = *result;
  v12 = result[1];
  if (v11 != v7 || v12 != v8)
  {
    v14 = 1;
    while (v11 != 255 || v12 != 255)
    {
      v9 = (v9 + v14) & v5;
      result = (unsigned __int8 *)(v2 + 24 * v9);
      v11 = *result;
      v12 = result[1];
      ++v14;
      if (v11 == v7 && v12 == v8)
        return result;
    }
    if (*a1)
      return (unsigned __int8 *)(*a1 + 24 * *(unsigned int *)(*a1 - 4));
    else
      return 0;
  }
  return result;
}

unint64_t WTF::PairHash<WebKit::WebExtensionEventListenerType,WebKit::WebExtensionContentWorldType>::hash(unsigned __int8 *a1)
{
  int32x2_t v1;
  int8x8_t v2;
  int8x8_t v3;
  int32x2_t v4;
  int8x8_t v5;
  int32x2_t v6;

  v1.i32[0] = *a1;
  v1.i32[1] = a1[1];
  v2 = (int8x8_t)vadd_s32((int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v1, 0xFuLL)), v1);
  v3 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v2, 0xAuLL), v2), (int32x2_t)0x900000009);
  v4 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v3, 6uLL), v3);
  v5 = (int8x8_t)vadd_s32(v4, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v4, 0xBuLL)));
  v6 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 0x10uLL), v5), (int32x2_t)0x5AC73FE109132F9);
  return (0xD7862706ELL * (unint64_t)vadd_s32(vdup_lane_s32(v6, 1), v6).u32[0]) >> 4;
}

_QWORD *WTF::WeakHashMap<WebKit::WebPageProxy,unsigned int,WTF::DefaultWeakPtrImpl>::begin@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  v6 = *a1;
  if (*a1)
  {
    v7 = *((unsigned int *)v6 - 1);
    v8 = &v6[2 * v7];
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = &v6[2 * v7];
  *(_DWORD *)(a2 + 40) = 0;
  return WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>,WTF::HashTableIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>>>,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekPtrType,WTF::WeakHashMap<WebKit::WebPageProxy,WTF::HashSet<std::unique_ptr<WebKit::RemotePageProxy>,WTF::DefaultHash<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTraits<std::unique_ptr<WebKit::RemotePageProxy>>,WTF::HashTableTraits>,WTF::DefaultWeakPtrImpl>::PeekType>::skipEmptyBuckets((_QWORD *)a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>,WTF::HashTraits<WTF::Ref<WebKit::WebProcessProxy,WTF::RawPtrTraits<WebKit::WebProcessProxy>,WTF::DefaultRefDerefTraits<WebKit::WebProcessProxy>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  v11 = 0;
  if (v7)
  {
    v12 = v7;
    v13 = (uint64_t *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          v14 = (_QWORD *)WTF::HashTable<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>,WTF::HashTraits<WTF::Ref<WebKit::WebExtensionTab,WTF::RawPtrTraits<WebKit::WebExtensionTab>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionTab>>>>::lookupForReinsert(a1, v13);
          v15 = *v14;
          *v14 = 0;
          if (v15)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v15 + 16));
          v16 = *v13;
          *v13 = 0;
          *v14 = v16;
          v17 = *v13;
          *v13 = 0;
          if (v17)
            WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v17 + 16));
          if (v13 == a3)
            v11 = v14;
        }
        else
        {
          *v13 = 0;
        }
      }
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    result = 0;
    if (!v6)
      return result;
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

__n128 WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::unsafeAppendWithoutCapacityCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)a1 + 152 * *(unsigned int *)(a1 + 12);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  WTF::URL::URL(v4 + 8, (uint64_t *)(a2 + 8));
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 56) = 0;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = 0;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(v4 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(v4 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(v4 + 80) = v9;
  result = *(__n128 *)(a2 + 88);
  *(_OWORD *)(v4 + 97) = *(_OWORD *)(a2 + 97);
  *(__n128 *)(v4 + 88) = result;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(v4 + 120) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(v4 + 128) = v11;
  LODWORD(v11) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(v4 + 132) = v11;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  v12 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(v4 + 136) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v12;
  LODWORD(v12) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(v4 + 148) = v12;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebExtensionDataType,unsigned long,WTF::DefaultHash<WebKit::WebExtensionDataType>,WTF::HashTraits<WebKit::WebExtensionDataType>,WTF::HashTraits<unsigned long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebExtensionDataType>>,WebKit::WebExtensionDataType>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = *(_DWORD *)(v2 - 8);
    v4 = *a2;
    v5 = 9 * ((~(v4 << 15) + v4) ^ ((~(v4 << 15) + v4) >> 10));
    v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    v7 = (v6 ^ HIWORD(v6)) & v3;
    v8 = *(unsigned __int8 *)(v2 + 16 * v7);
    if (v8 == v4)
      return *(_QWORD *)(v2 + 16 * v7 + 8);
    v9 = 1;
    while (v8 != 255)
    {
      v7 = ((_DWORD)v7 + v9) & v3;
      v8 = *(unsigned __int8 *)(v2 + 16 * v7);
      ++v9;
      if (v8 == v4)
        return *(_QWORD *)(v2 + 16 * v7 + 8);
    }
  }
  return 0;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::GPUProcessProxy::keepProcessAliveTemporarily(void)::$_0,void>::call()
{
  uint64_t v0;
  unsigned int *result;

  {
    v0 = WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy;
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
    if (v0)
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v0 + 16));
  }
  else
  {
    WebKit::keptAliveGPUProcessProxy(void)::keptAliveGPUProcessProxy = 0;
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<BOOL,BOOL,BOOL,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *(_BYTE *)(a2 + 1);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v5;
  v6 = *(_BYTE *)(a2 + 2);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  v7 = **(_QWORD **)(a2 + 8);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DCD10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DCD10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::UpdateCaptureAccess,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0>(WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34DCD38;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0>(WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34DCD38;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::CreateGPUConnectionToWebProcess,WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0>(WebKit::GPUProcessProxy::createGPUProcessConnection(WebKit::WebProcessProxy &,IPC::ConnectionHandle &&,WebKit::GPUProcessConnectionParameters &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(_BYTE *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
      return WebKit::ResponsivenessTimer::stop((_BYTE *)(*((_QWORD *)result + 1) + 56));
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DCD60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DCD60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::WebProcessConnectionCountForTesting,WTF::CompletionHandler<void ()(unsigned long long)>>(WTF::CompletionHandler<void ()(unsigned long long)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<double>>(a2), v4))
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 16))(v5, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DCD88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DCD88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DCDB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DCDB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::MachSendRight *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::GPUProcess::RequestBitmapImageForCurrentTime,WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ShareableBitmapHandle> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v3;
  WTF::MachSendRight *result;
  uint64_t v5;
  _BYTE v6[72];
  char v7;

  if (!a2
    || !*(_QWORD *)a2
    || (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a2, v6), !v7))
  {
    v6[0] = 0;
    v6[64] = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 16))(v5, v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 16))(v3, v6);
  result = (WTF::MachSendRight *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
    return std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
  return result;
}

void WebKit::UIGamepad::updateFromPlatformGamepad(WebKit::UIGamepad *this, WebCore::PlatformGamepad *a2)
{
  unsigned int *v4;
  unsigned int *v5;

  v4 = (unsigned int *)(*(uint64_t (**)(WebCore::PlatformGamepad *))(*(_QWORD *)a2 + 24))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 24, v4);
  v5 = (unsigned int *)(*(uint64_t (**)(WebCore::PlatformGamepad *))(*(_QWORD *)a2 + 32))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)this + 40, v5);
  *((double *)this + 7) = (*(double (**)(WebCore::PlatformGamepad *))(*(_QWORD *)a2 + 16))(a2);
}

uint64_t WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF **v13;
  WTF *v14;
  WTF *v15;
  WTF **v16;
  WTF **v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  WTF **v24;
  uint64_t v25;
  _DWORD *v26;

  v2 = result;
  if (a2 == (unsigned int *)result)
    return v2;
  v4 = *(unsigned int *)(result + 12);
  v5 = a2[3];
  if (v4 > v5)
  {
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct((WTF *)(*(_QWORD *)result + 8 * v5), (void *)(*(_QWORD *)result + 8 * v4));
    *(_DWORD *)(v2 + 12) = v5;
    LODWORD(v4) = v5;
LABEL_24:
    v16 = *(WTF ***)a2;
    if ((_DWORD)v4)
    {
      v17 = *(WTF ***)v2;
      v18 = 8 * v4;
      do
      {
        v19 = *v16;
        *(_DWORD *)v19 = *(_DWORD *)*v16 + 1;
        v20 = *v17;
        *v17 = v19;
        if (v20)
        {
          if (*(_DWORD *)v20 == 1)
            WTF::fastFree(v20, a2);
          else
            --*(_DWORD *)v20;
        }
        ++v16;
        ++v17;
        v18 -= 8;
      }
      while (v18);
      v16 = *(WTF ***)a2;
      v21 = *(_DWORD *)(v2 + 12);
    }
    else
    {
      v21 = 0;
    }
    v22 = a2[3];
    if (v21 != (_DWORD)v22)
    {
      v23 = (_QWORD *)(*(_QWORD *)v2 + 8 * v21);
      v24 = &v16[v21];
      v25 = 8 * v22 - 8 * v21;
      do
      {
        v26 = *v24++;
        ++*v26;
        *v23++ = v26;
        v25 -= 8;
      }
      while (v25);
    }
    *(_DWORD *)(v2 + 12) = v22;
    return v2;
  }
  v6 = *(_DWORD *)(result + 8);
  if (v5 <= v6)
    goto LABEL_24;
  if (v6)
  {
    if ((_DWORD)v4)
    {
      WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)result, (void *)(*(_QWORD *)result + 8 * v4));
      *(_DWORD *)(v2 + 12) = 0;
    }
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
  }
  v7 = a2[3];
  if (*(_DWORD *)(v2 + 8) >= v7)
  {
LABEL_23:
    LODWORD(v4) = *(_DWORD *)(v2 + 12);
    goto LABEL_24;
  }
  if (!(v7 >> 29))
  {
    v8 = *(WTF **)v2;
    v9 = *(unsigned int *)(v2 + 12);
    v10 = WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(v2 + 8) = v7;
    *(_QWORD *)v2 = v10;
    if ((_DWORD)v9)
    {
      v11 = (_QWORD *)v10;
      v12 = 8 * v9;
      v13 = (WTF **)v8;
      do
      {
        v14 = *v13;
        *v13 = 0;
        *v11 = v14;
        v15 = *v13;
        *v13 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 1)
            WTF::fastFree(v15, a2);
          else
            --*(_DWORD *)v15;
        }
        ++v11;
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    if (v8)
    {
      if (*(WTF **)v2 == v8)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v8, a2);
    }
    goto LABEL_23;
  }
  __break(0xC471u);
  return result;
}

WebKit::UIGamepadProvider *WebKit::UIGamepadProvider::UIGamepadProvider(WebKit::UIGamepadProvider *this)
{
  WTF::RunLoop::TimerBase *v2;
  WTF::RunLoop *v3;
  _QWORD *v4;

  *(_QWORD *)this = &off_1E34DCE00;
  *((_QWORD *)this + 1) = 0;
  v2 = (WebKit::UIGamepadProvider *)((char *)this + 48);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v3 = (WTF::RunLoop *)WTF::RunLoop::main(this);
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = off_1E34DCFF0;
  v4[1] = WebKit::UIGamepadProvider::gamepadSyncTimerFired;
  v4[2] = 0;
  v4[3] = this;
  WTF::RunLoop::TimerBase::TimerBase(v2, v3);
  *((_QWORD *)this + 6) = off_1E34ABE00;
  *((_QWORD *)this + 9) = v4;
  *((_WORD *)this + 40) = 0;
  WebKit::UIGamepadProvider::platformSetDefaultGamepadProvider(this);
  return this;
}

void WebKit::UIGamepadProvider::gamepadSyncTimerFired(WebKit::UIGamepadProvider *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  void *v6;
  _BYTE v7[16];
  _BYTE *v8;
  char v9;

  v2 = WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    v4 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get(*(_QWORD *)(v3 + 48) + 24);
    if (WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)this + 16, v4))
    {
      WebKit::UIGamepadProvider::snapshotGamepads((uint64_t)this, (uint64_t)v7);
      v5 = *((_BYTE *)this + 81);
      v8 = v7;
      v9 = v5;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebPage::GamepadActivity>(*(_QWORD *)(v3 + 208), (uint64_t)&v8, *(_QWORD *)(*(_QWORD *)(v3 + 32) + 1896), 0);
      WTF::Vector<std::optional<WebKit::GamepadData>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
      *((_BYTE *)this + 81) = 0;
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::UIGamepadProvider::~UIGamepadProvider(WebKit::UIGamepadProvider *this)
{
  uint64_t *v2;
  _BOOL8 isEmptyIgnoringNullReferences;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v2 = (uint64_t *)((char *)this + 16);
  isEmptyIgnoringNullReferences = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)this + 2);
  if (!isEmptyIgnoringNullReferences)
  {
    v4 = WebCore::GamepadProvider::singleton((WebCore::GamepadProvider *)isEmptyIgnoringNullReferences);
    (*(void (**)(uint64_t, WebKit::UIGamepadProvider *))(*(_QWORD *)v4 + 24))(v4, this);
  }
  *((_QWORD *)this + 6) = off_1E34ABE00;
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::UIGamepadProvider *)((char *)this + 48));
  v7 = *((unsigned int *)this + 11);
  if ((_DWORD)v7)
  {
    v8 = (WTF **)*((_QWORD *)this + 4);
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      *v8 = 0;
      if (v10)
        std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](v10, v6);
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 4);
  if (v11)
  {
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    WTF::fastFree(v11, v6);
  }
  if (*v2)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v2, v6);
  v12 = *((_QWORD *)this + 1);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v13)
    {
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        atomic_store(1u, v13);
        WTF::fastFree((WTF *)v13, v6);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebKit::UIGamepadProvider::~UIGamepadProvider(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::UIGamepadProvider::snapshotGamepads@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(this + 44);
  if ((_DWORD)v3)
  {
    if (v3 >= 0x3333334)
    {
      __break(0xC471u);
    }
    else
    {
      v4 = this;
      v5 = 80 * v3;
      this = WTF::fastMalloc((WTF *)(80 * v3));
      *(_DWORD *)(a2 + 8) = (v5 & 0xFFFFFFF0) / 0x50;
      *(_QWORD *)a2 = this;
      if (*(_DWORD *)(v4 + 44))
      {
        v7 = 0;
        v8 = (_BYTE *)(this + 72);
        do
        {
          v9 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v7);
          if (v9)
          {
            WebKit::GamepadData::GamepadData((uint64_t)&v24, *(_DWORD *)v9, (_DWORD **)(v9 + 8), (_DWORD **)(v9 + 16), (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 40), (unsigned __int8 **)(v9 + 64), *(double *)(v9 + 56));
            v15 = v24;
            v16 = v25;
            v17 = v26;
            v18 = v27;
            v19 = v28;
            v20 = v29;
            v21 = v30;
            v22 = v31;
            v23 = 1;
            *((_DWORD *)v8 - 18) = v24;
            v10 = v16;
            *(_QWORD *)&v16 = 0;
            *((_QWORD *)v8 - 8) = v10;
            v11 = *((_QWORD *)&v16 + 1);
            *((_QWORD *)&v16 + 1) = 0;
            *((_QWORD *)v8 - 7) = v11;
            v12 = v17;
            v17 = 0;
            *((_QWORD *)v8 - 6) = v12;
            LODWORD(v12) = v18;
            LODWORD(v18) = 0;
            *((_DWORD *)v8 - 10) = v12;
            LODWORD(v12) = HIDWORD(v18);
            HIDWORD(v18) = 0;
            *((_DWORD *)v8 - 9) = v12;
            v13 = v19;
            v19 = 0;
            *((_QWORD *)v8 - 4) = v13;
            LODWORD(v13) = v20;
            LODWORD(v20) = 0;
            *((_DWORD *)v8 - 6) = v13;
            LODWORD(v13) = HIDWORD(v20);
            HIDWORD(v20) = 0;
            *((_DWORD *)v8 - 5) = v13;
            *((_QWORD *)v8 - 2) = v21;
            v14 = v22;
            v22 = 0;
            *((_QWORD *)v8 - 1) = v14;
            *v8 = 1;
          }
          else
          {
            LOBYTE(v15) = 0;
            v23 = 0;
            *(v8 - 72) = 0;
            *v8 = 0;
          }
          *(_DWORD *)(a2 + 12) = ++v7;
          this = std::__optional_destruct_base<WebKit::GamepadData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v6);
          v8 += 80;
        }
        while (v7 < *(unsigned int *)(v4 + 44));
      }
    }
  }
  return this;
}

uint64_t WebKit::UIGamepadProvider::scheduleGamepadStateSync(uint64_t this)
{
  uint64_t v1;
  WTF::RunLoop::TimerBase *v2;

  if (*(_BYTE *)(this + 80))
  {
    v1 = this;
    v2 = (WTF::RunLoop::TimerBase *)(this + 48);
    this = WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 48));
    if ((this & 1) == 0)
    {
      if (*(_DWORD *)(v1 + 44)
        && !WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences((_QWORD **)(v1 + 16)))
      {
        return WTF::RunLoop::TimerBase::start();
      }
      else
      {
        return WTF::RunLoop::TimerBase::stop(v2);
      }
    }
  }
  return this;
}

_QWORD *WebKit::UIGamepadProvider::platformGamepadConnected(uint64_t a1, unsigned int *a2, char a3)
{
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = *(unsigned int *)(a1 + 44);
  v7 = a2[8];
  if (v6 <= v7)
  {
    v8 = v7 + 1;
    v9 = *(unsigned int *)(a1 + 40);
    if (v9 < v8)
    {
      v10 = v9 + (v9 >> 2);
      if (v10 >= 0x10)
        v11 = v10 + 1;
      else
        v11 = 16;
      if (v11 <= v8)
        v12 = v8;
      else
        v12 = v11;
      if (v12 >> 29)
      {
        __break(0xC471u);
LABEL_38:
        JUMPOUT(0x19743842CLL);
      }
      v13 = *(void **)(a1 + 32);
      v14 = (void *)WTF::fastMalloc((WTF *)(8 * v12));
      *(_DWORD *)(a1 + 40) = v12;
      *(_QWORD *)(a1 + 32) = v14;
      memcpy(v14, v13, 8 * v6);
      if (v13)
      {
        if (*(void **)(a1 + 32) == v13)
        {
          *(_QWORD *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + 40) = 0;
        }
        WTF::fastFree((WTF *)v13, v15);
      }
    }
    v16 = *(_QWORD *)(a1 + 32);
    if (v16)
      bzero((void *)(v16 + 8 * *(unsigned int *)(a1 + 44)), 8 * v8 - 8 * *(unsigned int *)(a1 + 44));
    *(_DWORD *)(a1 + 44) = v8;
  }
  v17 = WTF::fastMalloc((WTF *)0x48);
  v18 = v17;
  *(_DWORD *)v17 = a2[8];
  v19 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v19)
    *v19 += 2;
  *(_QWORD *)(v17 + 8) = v19;
  v20 = (_DWORD *)*((_QWORD *)a2 + 3);
  if (v20)
    *v20 += 2;
  *(_QWORD *)(v17 + 16) = v20;
  v21 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 24))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18 + 24, *(unsigned int *)(v21 + 12));
  v22 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 32))(a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18 + 40, *(unsigned int *)(v22 + 12));
  *(double *)(v18 + 56) = (*(double (**)(unsigned int *))(*(_QWORD *)a2 + 16))(a2);
  WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::HashTable((uint64_t *)(v18 + 64), (unsigned __int8 **)a2 + 7);
  WebKit::UIGamepad::updateFromPlatformGamepad((WebKit::UIGamepad *)v18, (WebCore::PlatformGamepad *)a2);
  v24 = a2[8];
  if (*(_DWORD *)(a1 + 44) <= v24)
  {
    __break(0xC471u);
    JUMPOUT(0x197438434);
  }
  v25 = *(_QWORD *)(a1 + 32);
  v26 = *(WTF **)(v25 + 8 * v24);
  *(_QWORD *)(v25 + 8 * v24) = v18;
  if (v26)
    std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](v26, v23);
  WebKit::UIGamepadProvider::scheduleGamepadStateSync(a1);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 16), &v39);
  v27 = *(_QWORD *)(a1 + 16);
  if (v27)
  {
    v28 = *(unsigned int *)(v27 - 4);
    v29 = v27 + 8 * v28;
  }
  else
  {
    v29 = 0;
    v28 = 0;
  }
  v34 = a1 + 16;
  v35 = v29;
  v36 = v29;
  v37 = v29;
  v38 = v27 + 8 * v28;
  result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v34);
  while (v40 != v35)
  {
    v31 = a2[8];
    if (*(_DWORD *)(a1 + 44) <= v31)
    {
      __break(0xC471u);
      goto LABEL_38;
    }
    v32 = *(_QWORD *)(*(_QWORD *)v40 + 8);
    if (v32)
      v33 = v32 - 16;
    else
      v33 = 0;
    WebKit::WebProcessPool::gamepadConnected(v33, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v31), a3);
    result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v39);
  }
  return result;
}

_QWORD *WebKit::UIGamepadProvider::platformGamepadDisconnected(_QWORD *this, WebCore::PlatformGamepad *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  const WebKit::UIGamepad *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  WebKit::WebProcessPool *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((unsigned int *)a2 + 8);
  if (*((_DWORD *)this + 11) <= v2)
  {
    __break(0xC471u);
  }
  else
  {
    v3 = this;
    v4 = this[4];
    v5 = *(const WebKit::UIGamepad **)(v4 + 8 * v2);
    *(_QWORD *)(v4 + 8 * v2) = 0;
    WebKit::UIGamepadProvider::scheduleGamepadStateSync((uint64_t)this);
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)v3 + 2, &v17);
    v6 = v3[2];
    if (v6)
    {
      v7 = *(unsigned int *)(v6 - 4);
      v8 = v6 + 8 * v7;
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    v12 = v3 + 2;
    v13 = v8;
    v14 = v8;
    v15 = v8;
    v16 = v6 + 8 * v7;
    this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v12);
    while (v18 != v13)
    {
      v10 = *(_QWORD *)(*(_QWORD *)v18 + 8);
      if (v10)
        v11 = (WebKit::WebProcessPool *)(v10 - 16);
      else
        v11 = 0;
      WebKit::WebProcessPool::gamepadDisconnected(v11, v5);
      this = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v17);
    }
    if (v5)
      return (_QWORD *)std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](v5, v9);
  }
  return this;
}

uint64_t WebKit::UIGamepadProvider::platformGamepadInputActivity(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int **v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  WebKit::UIGamepad *v17;
  unsigned int *v18;
  WebCore::PlatformGamepad *v19;
  void *v20;
  unsigned int **v22;
  int v23;
  int v24;

  v4 = WebCore::GamepadProvider::singleton((WebCore::GamepadProvider *)a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v6 = *(unsigned int *)(v5 + 12);
  v22 = 0;
  v23 = 0;
  v24 = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
      goto LABEL_26;
    v7 = v5;
    v8 = (unsigned int **)WTF::fastMalloc((WTF *)(8 * v6));
    v23 = v6;
    v22 = v8;
    v9 = *(unsigned int *)(v7 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(unsigned int ***)v7;
      v11 = *(_QWORD *)v7 + 8 * v9;
      do
      {
        v12 = *v10;
        if (*v10)
        {
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
        }
        *v8++ = v12;
        ++v10;
      }
      while (v10 != (unsigned int **)v11);
      LODWORD(v6) = v24;
    }
  }
  v14 = *(_DWORD *)(a1 + 44);
  if (v6 >= v14)
    v15 = v14;
  else
    v15 = v6;
  if ((_DWORD)v15)
  {
    v16 = 0;
    while (v16 < *(unsigned int *)(a1 + 44))
    {
      v17 = *(WebKit::UIGamepad **)(*(_QWORD *)(a1 + 32) + 8 * v16);
      if (v17)
      {
        if (v16 >= v6)
        {
          __break(0xC471u);
          JUMPOUT(0x197438650);
        }
        v18 = v22[v16];
        if (v18)
        {
          v19 = (WebCore::PlatformGamepad *)*((_QWORD *)v18 + 1);
          if (v19)
            WebKit::UIGamepad::updateFromPlatformGamepad(v17, v19);
        }
      }
      if (v15 == ++v16)
        goto LABEL_21;
    }
LABEL_26:
    __break(0xC471u);
    JUMPOUT(0x197438648);
  }
LABEL_21:
  if ((a2 & 1) != 0)
    *(_BYTE *)(a1 + 81) = 1;
  WebKit::UIGamepadProvider::scheduleGamepadStateSync(a1);
  return WTF::Vector<WTF::WeakPtr<WebKit::StorageAccessPromptQuirkObserver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v20);
}

unsigned int *WebKit::UIGamepadProvider::processPoolStartedUsingGamepads(WebKit::UIGamepadProvider *this, WebKit::WebProcessPool *a2)
{
  unsigned int *result;
  uint64_t v4;
  _BYTE v5[24];

  result = WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)this + 16, (unsigned int *)a2, (uint64_t)v5);
  if (!*((_BYTE *)this + 80))
  {
    result = (unsigned int *)WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
    if (result)
    {
      if (!*((_BYTE *)this + 80))
      {
        *((_BYTE *)this + 80) = 1;
        v4 = WebCore::GamepadProvider::singleton((WebCore::GamepadProvider *)result);
        return (unsigned int *)(*(uint64_t (**)(uint64_t, WebKit::UIGamepadProvider *))(*(_QWORD *)v4 + 16))(v4, this);
      }
    }
  }
  return result;
}

uint64_t WebKit::UIGamepadProvider::processPoolStoppedUsingGamepads(WebKit::UIGamepadProvider *this, WebKit::WebProcessPool *a2)
{
  uint64_t result;

  result = WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 16, a2);
  if (*((_BYTE *)this + 80))
    return WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  return result;
}

WebCore::GamepadProvider *WebKit::UIGamepadProvider::viewBecameActive(WebKit::UIGamepadProvider *this, WebKit::WebPageProxy *a2)
{
  char *v3;
  WebKit::WebProcessPool *v4;
  WebCore::GamepadProvider *result;
  uint64_t v6;

  v3 = (char *)this + 16;
  v4 = API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*((_QWORD *)a2 + 6) + 24));
  result = (WebCore::GamepadProvider *)WTF::WeakHashSet<WebKit::WebProcessPool,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebKit::WebProcessPool>((uint64_t)v3, (uint64_t)v4);
  if ((_DWORD)result)
  {
    if (!*((_BYTE *)this + 80))
    {
      *((_BYTE *)this + 80) = 1;
      v6 = WebCore::GamepadProvider::singleton(result);
      (*(void (**)(uint64_t, WebKit::UIGamepadProvider *))(*(_QWORD *)v6 + 16))(v6, this);
    }
    return (WebCore::GamepadProvider *)WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  }
  return result;
}

void WebKit::UIGamepadProvider::viewBecameInactive(WebKit::UIGamepadProvider *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = WebKit::UIGamepadProvider::platformWebPageProxyForGamepadInput(this);
  if (v2)
  {
    v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::InspectorTargetProxy::create(uint64_t a1@<X0>, _DWORD **a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if (v8)
    v9 = v8 - 16;
  else
    v9 = 0;
  CFRetain(*(CFTypeRef *)(v9 + 8));
  WebKit::InspectorTargetProxy::create(v9, a2, a3, a4);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v11 = *(unsigned int **)(a1 + 8);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(unsigned int **)(*a4 + 56);
  *(_QWORD *)(*a4 + 56) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v10);
    }
  }
  CFRelease(*(CFTypeRef *)(v9 + 8));
}

IPC::Encoder *WebKit::InspectorTargetProxy::connect(IPC::Encoder *result, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  IPC::Encoder *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  IPC::Encoder *v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  unint64_t v34;
  size_t v35;
  char *v36;
  void *v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  void *v41;
  WTF::StringImpl *v42;
  IPC::Encoder *v43[2];
  char v44;
  IPC::Encoder *v45;

  v3 = *((_QWORD *)result + 7);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = v4 + 16;
      v6 = (IPC::Encoder *)*((_QWORD *)result + 5);
      if (v6)
        *(_DWORD *)v6 += 2;
      v45 = v6;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 2143;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v43[0] = (IPC::Encoder *)v8;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)&v45);
      v9 = *(_QWORD *)(v8 + 544);
      v10 = v9 + 1;
      v11 = *(_QWORD *)(v8 + 552);
      if (v11 >= v9 + 1)
      {
        v12 = *(char **)(v8 + 528);
        v13 = *(_QWORD *)(v8 + 544);
        goto LABEL_7;
      }
      v34 = (2 * v11 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v35 = v34;
        v34 *= 2;
      }
      while (v35 < v10);
      v36 = (char *)mmap(0, v35, 3, 4098, -1, 0);
      if (v36 != (char *)-1)
      {
        v12 = v36;
        memcpy(v36, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
        v37 = *(void **)(v8 + 528);
        if (v37 != (void *)(v8 + 16))
          munmap(v37, *(_QWORD *)(v8 + 552));
        *(_QWORD *)(v8 + 528) = v12;
        *(_QWORD *)(v8 + 552) = v35;
        v13 = *(_QWORD *)(v8 + 544);
LABEL_7:
        bzero(&v12[v13], v9 - v13);
        *(_QWORD *)(v8 + 544) = v10;
        v14 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v9);
        *(_QWORD *)(v8 + 536) = v14 + 1;
        *v14 = a2;
        (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, v43, 0);
        v16 = v43[0];
        v43[0] = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v15);
          WTF::fastFree(v17, v18);
        }
        result = v45;
        v45 = 0;
        if (!result)
          return result;
LABEL_23:
        if (*(_DWORD *)result == 2)
          return (IPC::Encoder *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v15);
        *(_DWORD *)result -= 2;
        return result;
      }
      __break(0xC471u);
LABEL_41:
      JUMPOUT(0x197438BE0);
    }
  }
  v19 = *((_QWORD *)result + 4);
  if (*(_BYTE *)(v19 + 729) || !*(_BYTE *)(v19 + 728))
    return result;
  v20 = *(_QWORD *)(v19 + 208);
  v21 = (WTF::StringImpl *)*((_QWORD *)result + 5);
  if (v21)
    *(_DWORD *)v21 += 2;
  v42 = v21;
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 1896);
  v23 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v23 = 2143;
  *(_QWORD *)(v23 + 8) = v22;
  *(_QWORD *)(v23 + 528) = v23 + 16;
  *(_QWORD *)(v23 + 536) = v23 + 16;
  *(_OWORD *)(v23 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v23 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v23);
  v45 = (IPC::Encoder *)v23;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v23, (uint64_t *)&v42);
  v24 = *(_QWORD *)(v23 + 544);
  v25 = v24 + 1;
  v26 = *(_QWORD *)(v23 + 552);
  if (v26 < v24 + 1)
  {
    v38 = (2 * v26 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v39 = v38;
      v38 *= 2;
    }
    while (v39 < v25);
    v40 = (char *)mmap(0, v39, 3, 4098, -1, 0);
    if (v40 == (char *)-1)
    {
      __break(0xC471u);
      goto LABEL_41;
    }
    v27 = v40;
    memcpy(v40, *(const void **)(v23 + 528), *(_QWORD *)(v23 + 544));
    v41 = *(void **)(v23 + 528);
    if (v41 != (void *)(v23 + 16))
      munmap(v41, *(_QWORD *)(v23 + 552));
    *(_QWORD *)(v23 + 528) = v27;
    *(_QWORD *)(v23 + 552) = v39;
    v28 = *(_QWORD *)(v23 + 544);
  }
  else
  {
    v27 = *(char **)(v23 + 528);
    v28 = *(_QWORD *)(v23 + 544);
  }
  bzero(&v27[v28], v24 - v28);
  *(_QWORD *)(v23 + 544) = v25;
  v29 = (_BYTE *)(*(_QWORD *)(v23 + 528) + v24);
  *(_QWORD *)(v23 + 536) = v29 + 1;
  *v29 = a2;
  LOBYTE(v43[0]) = 0;
  v44 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(v20, &v45, 0, (uint64_t)v43, 1);
  if (v44)
  {
    v30 = v43[0];
    v43[0] = 0;
    if (v30)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v30 + 8))(v30);
  }
  v31 = v45;
  v45 = 0;
  if (v31)
  {
    IPC::Encoder::~Encoder(v31, v15);
    WTF::fastFree(v32, v33);
  }
  result = v42;
  v42 = 0;
  if (result)
    goto LABEL_23;
  return result;
}

_BYTE *WebKit::InspectorTargetProxy::disconnect(_BYTE *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  IPC::Encoder *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  IPC::Encoder *v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  WTF::StringImpl *v21;
  IPC::Encoder *v22[2];
  char v23;
  IPC::Encoder *v24;

  v1 = this;
  if (this[24])
    this = (_BYTE *)Inspector::InspectorTarget::resume((Inspector::InspectorTarget *)this);
  v2 = v1[7];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = v3 + 16;
      v5 = (IPC::Encoder *)v1[5];
      if (v5)
        *(_DWORD *)v5 += 2;
      v24 = v5;
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 2179;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v22[0] = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)&v24);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v4 + 32))(v4, v22, 0);
      v9 = v22[0];
      v22[0] = 0;
      if (v9)
      {
        IPC::Encoder::~Encoder(v9, v8);
        WTF::fastFree(v10, v11);
      }
      this = v24;
      v24 = 0;
      if (!this)
        return this;
LABEL_21:
      if (*(_DWORD *)this == 2)
        return (_BYTE *)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v8);
      *(_DWORD *)this -= 2;
      return this;
    }
  }
  v12 = v1[4];
  if (!*(_BYTE *)(v12 + 729) && *(_BYTE *)(v12 + 728))
  {
    v13 = *(_QWORD *)(v12 + 208);
    v14 = (WTF::StringImpl *)v1[5];
    if (v14)
      *(_DWORD *)v14 += 2;
    v21 = v14;
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 1896);
    v16 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v16 = 2179;
    *(_QWORD *)(v16 + 8) = v15;
    *(_QWORD *)(v16 + 528) = v16 + 16;
    *(_QWORD *)(v16 + 536) = v16 + 16;
    *(_OWORD *)(v16 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v16 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v16);
    v24 = (IPC::Encoder *)v16;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v21);
    LOBYTE(v22[0]) = 0;
    v23 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v13, &v24, 0, (uint64_t)v22, 1);
    if (v23)
    {
      v17 = v22[0];
      v22[0] = 0;
      if (v17)
        (*(void (**)(IPC::Encoder *))(*(_QWORD *)v17 + 8))(v17);
    }
    v18 = v24;
    v24 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v8);
      WTF::fastFree(v19, v20);
    }
    this = v21;
    v21 = 0;
    if (this)
      goto LABEL_21;
  }
  return this;
}

IPC::Encoder *WebKit::InspectorTargetProxy::sendMessageToTargetBackend(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  IPC::Encoder *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  IPC::Encoder *v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  WTF::StringImpl *v22;
  IPC::Encoder *v23[2];
  char v24;
  IPC::Encoder *v25;

  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = v4 + 16;
      v6 = (IPC::Encoder *)*((_QWORD *)this + 5);
      if (v6)
        *(_DWORD *)v6 += 2;
      v25 = v6;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
      v8 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v8 = 2362;
      *(_QWORD *)(v8 + 8) = v7;
      *(_QWORD *)(v8 + 528) = v8 + 16;
      *(_QWORD *)(v8 + 536) = v8 + 16;
      *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v8 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
      v23[0] = (IPC::Encoder *)v8;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)&v25);
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, (uint64_t *)a2);
      (*(void (**)(uint64_t, IPC::Encoder **, _QWORD))(*(_QWORD *)v5 + 32))(v5, v23, 0);
      v10 = v23[0];
      v23[0] = 0;
      if (v10)
      {
        IPC::Encoder::~Encoder(v10, v9);
        WTF::fastFree(v11, v12);
      }
      this = v25;
      v25 = 0;
      if (!this)
        return this;
LABEL_19:
      if (*(_DWORD *)this == 2)
        return (IPC::Encoder *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v9);
      *(_DWORD *)this -= 2;
      return this;
    }
  }
  v13 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v13 + 729) && *(_BYTE *)(v13 + 728))
  {
    v14 = *(_QWORD *)(v13 + 208);
    v15 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    if (v15)
      *(_DWORD *)v15 += 2;
    v22 = v15;
    v16 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 1896);
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 2362;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v25 = (IPC::Encoder *)v17;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)&v22);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, (uint64_t *)a2);
    LOBYTE(v23[0]) = 0;
    v24 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v14, &v25, 0, (uint64_t)v23, 1);
    if (v24)
    {
      v18 = v23[0];
      v23[0] = 0;
      if (v18)
        (*(void (**)(IPC::Encoder *))(*(_QWORD *)v18 + 8))(v18);
    }
    v19 = v25;
    v25 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v9);
      WTF::fastFree(v20, v21);
    }
    this = v22;
    v22 = 0;
    if (this)
      goto LABEL_19;
  }
  return this;
}

BOOL WebKit::InspectorTargetProxy::isProvisional(WebKit::InspectorTargetProxy *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 7);
  return v1 && *(_QWORD *)(v1 + 8) != 0;
}

uint64_t *WebKit::trackInspectorPage(WebKit *this, WebKit::WebPageProxy *a2, WebKit::WebPageProxy *a3)
{
  _BYTE v4[28];
  int v5;
  WebKit *v6;

  v6 = this;
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  v5 = WebKit::inspectorLevelForPage(a2, a2);
  return WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<WebKit::WebPageProxy * const&,unsigned int>(&WebKit::pageLevelMap(void)::map, (uint64_t *)&v6, &v5, (uint64_t)v4);
}

uint64_t *WebKit::untrackInspectorPage(WebKit *this, WebKit::WebPageProxy *a2)
{
  uint64_t *result;
  uint64_t v3;
  WebKit *v4;

  v4 = this;
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  result = (uint64_t *)WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(&WebKit::pageLevelMap(void)::map, &v4);
  if (WebKit::pageLevelMap(void)::map)
  {
    v3 = WebKit::pageLevelMap(void)::map + 16 * *(unsigned int *)(WebKit::pageLevelMap(void)::map - 4);
    if ((uint64_t *)v3 == result)
      return result;
  }
  else
  {
    if (!result)
      return result;
    v3 = 0;
  }
  if ((uint64_t *)v3 != result)
    return WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::remove(&WebKit::pageLevelMap(void)::map, result);
  return result;
}

void `non-virtual thunk to'WebKit::WebInspectorUIProxy::~WebInspectorUIProxy(WebKit::WebInspectorUIProxy *this, void *a2)
{
  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy((WebKit::WebInspectorUIProxy *)((char *)this - 16), a2);
}

{
  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy((WebKit::WebInspectorUIProxy *)((char *)this - 32), a2);
}

{
  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy((WebKit::WebInspectorUIProxy *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

{
  WebKit::WebInspectorUIProxy::~WebInspectorUIProxy((WebKit::WebInspectorUIProxy *)((char *)this - 32), a2);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::inspectorLevelForPage(WebKit *this, WebKit::WebPageProxy *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebKit *v5;

  v5 = this;
  if (!this)
    return 1;
  {
    WebKit::pageLevelMap(void)::map = 0;
  }
  v2 = WTF::HashTable<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>>,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>,WebKit::PCM::DaemonConnectionSet::DebugModeEnabled,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>,WTF::HashTraits<WebKit::PCM::DaemonConnectionSet::DebugModeEnabled>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RetainPtr<NSObject  {objcproto13OS_xpc_object}*>>>,NSObject  {objcproto13OS_xpc_object} const*>(&WebKit::pageLevelMap(void)::map, &v5);
  {
    v3 = WebKit::pageLevelMap(void)::map;
    if (WebKit::pageLevelMap(void)::map)
      v3 = WebKit::pageLevelMap(void)::map + 16 * *(unsigned int *)(WebKit::pageLevelMap(void)::map - 4);
  }
  else
  {
    v3 = 0;
    WebKit::pageLevelMap(void)::map = 0;
  }
  if (v3 == v2)
    return 1;
  else
    return (*(_DWORD *)(v2 + 8) + 1);
}

IPC::Encoder *WebKit::WebInspectorUIProxy::sendMessageToFrontend(IPC::Encoder *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  char v13;
  IPC::Encoder *v14;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = *(_QWORD *)(v3 + 192);
      v6 = *(_QWORD *)(*(_QWORD *)(v3 + 16) + 1896);
      v7 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v7 = 1799;
      *(_QWORD *)(v7 + 8) = v6;
      *(_QWORD *)(v7 + 528) = v7 + 16;
      *(_QWORD *)(v7 + 536) = v7 + 16;
      *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v7 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
      v14 = (IPC::Encoder *)v7;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
      LOBYTE(v12) = 0;
      v13 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v14, 0, (uint64_t)&v12, 1);
      if (v13)
      {
        v9 = v12;
        v12 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      this = v14;
      v14 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v8);
        return (IPC::Encoder *)WTF::fastFree(v10, v11);
      }
    }
  }
  return this;
}

IPC::Encoder *`non-virtual thunk to'WebKit::WebInspectorUIProxy::sendMessageToFrontend(WebKit::WebInspectorUIProxy *this, const WTF::String *a2)
{
  return WebKit::WebInspectorUIProxy::sendMessageToFrontend((WebKit::WebInspectorUIProxy *)((char *)this - 32), a2);
}

uint64_t WebKit::WebInspectorUIProxy::connect(uint64_t this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = this;
      v6 = *(_QWORD *)(v4 + 208);
      {
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      this = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
      if ((_DWORD)this && !*(_BYTE *)(v5 + 77))
      {
        *(_WORD *)(v5 + 77) = 257;
        WebKit::WebInspectorUIProxy::createFrontendPage((WebKit::WebInspectorUIProxy *)v5, v7);
        v8 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
        if (v8)
          v9 = v8 - 16;
        else
          v9 = 0;
        v10 = *(_QWORD *)(v9 + 208);
        v15 = 0;
        WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorInterruptDispatcher::NotifyNeedDebuggerBreak>(v10, (uint64_t)&v15, 0, 0);
        v11 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
        v12 = v11 - 16;
        if (!v11)
          v12 = 0;
        v13 = *(_QWORD *)(v12 + 208);
        v14 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Show>(v13, (uint64_t)&v14, *(_QWORD *)(*(_QWORD *)(v11 + 16) + 1896), 0);
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebInspectorUIProxy::createFrontendPage(WebKit::WebInspectorUIProxy *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  WebKit::WebPageProxy *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebPageProxy *v11;
  uint64_t v12;
  uint64_t v13;
  WebKit::WebProcessProxy **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int *v19;
  _QWORD v20[2];

  result = (unsigned int *)*((_QWORD *)this + 6);
  if (result)
  {
    if (!*((_QWORD *)result + 1))
    {
      *((_QWORD *)this + 6) = 0;
      do
      {
        v4 = __ldaxr(result);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, result));
      if (!v5)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
      v6 = *((_QWORD *)this + 6);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          CFRetain(*(CFTypeRef *)(v7 - 8));
          v9 = *((_QWORD *)this + 5);
          if (v9 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
          {
            CFRetain(*(CFTypeRef *)(v10 - 8));
            WebKit::trackInspectorPage((WebKit *)(v7 - 16), (WebKit::WebPageProxy *)(v10 - 16), v11);
            CFRelease(*(CFTypeRef *)(v10 - 8));
          }
          else
          {
            WebKit::trackInspectorPage((WebKit *)(v7 - 16), 0, v8);
          }
          CFRelease(*(CFTypeRef *)(v7 - 8));
          v12 = *((_QWORD *)this + 5);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (v13)
              v14 = (WebKit::WebProcessProxy **)(v13 - 16);
            else
              v14 = 0;
          }
          else
          {
            v14 = 0;
          }
          WebKit::WebPageProxy::launchInitialProcessIfNecessary(v14);
          v15 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
          if (v15)
            v16 = v15 - 16;
          else
            v16 = 0;
          v17 = *((_QWORD *)this + 8);
          v18 = (uint64_t *)(*(_QWORD *)(v16 + 208) + 160);
          v20[0] = 175;
          v20[1] = v17;
          return WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>(v18, (unsigned __int8 *)v20, (uint64_t)this + 16, &v19);
        }
      }
    }
  }
  else
  {
    *((_QWORD *)this + 6) = 0;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorInterruptDispatcher::NotifyNeedDebuggerBreak>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1750;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

char *WebKit::WebInspectorUIProxy::show(char *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 5);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = this;
    v5 = *((_QWORD *)this + 6);
    if (v5 && *(_QWORD *)(v5 + 8))
    {
      if (!this[78])
      {
        if (!this[73])
          return WebKit::WebInspectorUIProxy::open(this);
        return this;
      }
    }
    else
    {
      this = (char *)WebKit::WebInspectorUIProxy::connect((uint64_t)this, a2, a3);
    }
    v4[78] = 0;
  }
  return this;
}

void WebKit::WebInspectorUIProxy::close(WebKit::WebInspectorUIProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  WebKit::WebPageProxy *v5;
  char v6;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 + 192);
      v6 = 0;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Close>(v4, (uint64_t)&v6, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896), 0);
      WebKit::WebInspectorUIProxy::closeFrontendPageAndWindow(this, v5);
    }
  }
}

char *WebKit::WebInspectorUIProxy::reopen(char *this)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  const WTF::StringImpl *v4;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 8))
    {
      v2 = this;
      WebKit::WebInspectorUIProxy::close((WebKit::WebInspectorUIProxy *)this);
      return WebKit::WebInspectorUIProxy::show(v2, v3, v4);
    }
  }
  return this;
}

_QWORD *WebKit::WebInspectorUIProxy::resetState(_QWORD *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  WebKit::WebPreferences *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WebKit::WebPreferences *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  WebKit::WebPreferences *v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  WebKit::WebPreferences *v19;
  const WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WebKit::WebPreferences *v23;

  v3 = this[5];
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      v4 = this;
      v5 = this[6];
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          v7 = *(WebKit::WebPreferences **)(*(_QWORD *)(v6 + 200) + 40);
          {
            WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v7, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedHeightKey(void)::key, a3);
          v9 = *(_QWORD *)(v4[6] + 8);
          if (v9)
            v10 = v9 - 16;
          else
            v10 = 0;
          v11 = *(WebKit::WebPreferences **)(*(_QWORD *)(v10 + 216) + 40);
          {
            WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v11, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachedWidthKey(void)::key, v8);
          v13 = *(_QWORD *)(v4[6] + 8);
          if (v13)
            v14 = v13 - 16;
          else
            v14 = 0;
          v15 = *(WebKit::WebPreferences **)(*(_QWORD *)(v14 + 216) + 40);
          {
            WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v15, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key, v12);
          v17 = *(_QWORD *)(v4[6] + 8);
          if (v17)
            v18 = v17 - 16;
          else
            v18 = 0;
          v19 = *(WebKit::WebPreferences **)(*(_QWORD *)(v18 + 216) + 40);
          {
            WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
          }
          WebKit::WebPreferences::deleteKey(v19, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, v16);
          v21 = *(_QWORD *)(v4[6] + 8);
          if (v21)
            v22 = v21 - 16;
          else
            v22 = 0;
          v23 = *(WebKit::WebPreferences **)(*(_QWORD *)(v22 + 216) + 40);
          {
            WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::$_0::operator() const(void)::impl;
          }
          return WebKit::WebPreferences::deleteKey(v23, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorWindowFrameKey(void)::key, v20);
        }
      }
    }
  }
  return this;
}

unsigned int *WebKit::WebInspectorUIProxy::updateForNewPageProcess(WebKit::WebInspectorUIProxy *this, WebKit::WebPageProxy *a2)
{
  void *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20[3];
  _QWORD v21[2];

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)a2 + 6, (uint64_t)a2 + 16);
  v5 = *((_QWORD *)a2 + 3);
  if (v5)
  {
    do
      v6 = __ldaxr((unsigned int *)v5);
    while (__stlxr(v6 + 1, (unsigned int *)v5));
  }
  v7 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v5;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v4);
    }
    v5 = *((_QWORD *)this + 5);
  }
  v10 = *(_QWORD *)(v5 + 8);
  if (v10)
    v11 = v10 - 16;
  else
    v11 = 0;
  *((_QWORD *)this + 8) = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 744);
  v12 = *(_QWORD *)(v5 + 8);
  if (v12)
    v13 = v12 - 16;
  else
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 208);
  v15 = *(_QWORD *)(*(_QWORD *)(v13 + 32) + 1896);
  v21[0] = 175;
  v21[1] = v15;
  result = WTF::HashMap<std::pair<IPC::ReceiverName,unsigned long long>,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<std::pair<IPC::ReceiverName,unsigned long long>>,WTF::PairHashTraits<WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<std::pair<IPC::ReceiverName,unsigned long long>,IPC::MessageReceiver&>((uint64_t *)(v14 + 160), (unsigned __int8 *)v21, (uint64_t)this + 16, v20);
  v17 = *((_QWORD *)this + 6);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 192);
      LOBYTE(v20[0]) = 0;
      return (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::UpdateConnection>(v19, (uint64_t)v20, *(_QWORD *)(*(_QWORD *)(v18 + 16) + 1896), 0);
    }
  }
  return result;
}

uint64_t WebKit::WebInspectorUIProxy::setFrontendConnection(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 192);
      v5 = a2;
      return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetFrontendConnection>(v4, &v5, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 1896), 0);
    }
  }
  return result;
}

_QWORD *WebKit::WebInspectorUIProxy::showConsole(_QWORD *this, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = this[5];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = this;
    WebKit::WebInspectorUIProxy::createFrontendPage((WebKit::WebInspectorUIProxy *)this, a2);
    v4 = *(_QWORD *)(v3[5] + 8);
    v5 = v4 - 16;
    if (!v4)
      v5 = 0;
    v6 = *(_QWORD *)(v5 + 208);
    v7 = 0;
    return (_QWORD *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowConsole>(v6, (uint64_t)&v7, *(_QWORD *)(*(_QWORD *)(v4 + 16) + 1896), 0);
  }
  return this;
}

_QWORD *WebKit::WebInspectorUIProxy::showResources(_QWORD *this, void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v2 = this[5];
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    v3 = this;
    WebKit::WebInspectorUIProxy::createFrontendPage((WebKit::WebInspectorUIProxy *)this, a2);
    v4 = *(_QWORD *)(v3[5] + 8);
    v5 = v4 - 16;
    if (!v4)
      v5 = 0;
    v6 = *(_QWORD *)(v5 + 208);
    v7 = 0;
    return (_QWORD *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowResources>(v6, (uint64_t)&v7, *(_QWORD *)(*(_QWORD *)(v4 + 16) + 1896), 0);
  }
  return this;
}

void WebKit::WebInspectorUIProxy::showMainResourceForFrame(WebKit::WebInspectorUIProxy *a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  __int128 **v10;
  char v11;
  __int128 v12;
  char v13;

  *(_QWORD *)&v9 = a2;
  *((_QWORD *)&v9 + 1) = a3;
  v3 = *((_QWORD *)a1 + 5);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    WebKit::WebInspectorUIProxy::createFrontendPage(a1, a2);
    v5 = *((_QWORD *)a1 + 5);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
        v7 = v6 - 16;
      else
        v7 = 0;
    }
    else
    {
      v7 = 0;
    }
    v12 = v9;
    v8 = &v9;
    v13 = 1;
    v10 = &v8;
    v11 = 0;
    WebKit::WebPageProxy::sendToWebPage<void WebKit::WebPageProxy::sendToProcessContainingFrame<Messages::WebInspector::ShowMainResourceForFrame>(std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,Messages::WebInspector::ShowMainResourceForFrame &&,WTF::OptionSet<IPC::SendOption>)::{lambda(Messages::WebInspector::ShowMainResourceForFrame&)#1}>(v7, (uint64_t)&v12, (uint64_t)&v10);
  }
}

IPC::Encoder *WebKit::WebInspectorUIProxy::attach(IPC::Encoder *result, unsigned int a2)
{
  uint64_t v2;
  IPC::Encoder *v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::WebPreferences *v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::WebPreferences *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  BOOL v21;
  unsigned int v22;

  v2 = *((_QWORD *)result + 5);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 8))
    {
      v3 = result;
      v4 = *((_QWORD *)result + 6);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*((_BYTE *)result + 74) || *((_BYTE *)result + 75))
          {
            *((_BYTE *)result + 74) = 1;
            *((_DWORD *)result + 21) = a2;
            v6 = *(WebKit::WebPreferences **)(*(_QWORD *)(v5 + 200) + 40);
            v22 = a2;
            WebKit::WebPreferences::setInspectorAttachmentSide(v6, &v22);
            if (*((_BYTE *)v3 + 73))
            {
              v7 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8);
              if (v7)
                v8 = v7 - 16;
              else
                v8 = 0;
              v9 = *(WebKit::WebPreferences **)(*(_QWORD *)(v8 + 216) + 40);
              v21 = 1;
              WebKit::WebPreferences::setInspectorStartsAttached(v9, &v21);
            }
            v10 = *(_QWORD *)(*((_QWORD *)v3 + 5) + 8);
            v11 = v10 - 16;
            if (!v10)
              v11 = 0;
            v12 = *(_QWORD *)(v11 + 208);
            v20 = 1;
            result = (IPC::Encoder *)WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(v12, &v20, *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896), 0);
            v13 = *((_DWORD *)v3 + 21);
            switch(v13)
            {
              case 2:
                v16 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8);
                v17 = v16 - 16;
                if (!v16)
                  v17 = 0;
                return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedLeft>(*(_QWORD *)(v17 + 208), *(_QWORD *)(*(_QWORD *)(v16 + 16) + 1896));
              case 1:
                v18 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8);
                v19 = v18 - 16;
                if (!v18)
                  v19 = 0;
                return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedRight>(*(_QWORD *)(v19 + 208), *(_QWORD *)(*(_QWORD *)(v18 + 16) + 1896));
              case 0:
                v14 = *(_QWORD *)(*((_QWORD *)v3 + 6) + 8);
                v15 = v14 - 16;
                if (!v14)
                  v15 = 0;
                return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedBottom>(*(_QWORD *)(v15 + 208), *(_QWORD *)(*(_QWORD *)(v14 + 16) + 1896));
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebInspectorUIProxy::detach(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebKit::WebPreferences *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  BOOL v15;

  v1 = *(_QWORD *)(this + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = this;
      v4 = *(_QWORD *)(this + 48);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(unsigned __int8 *)(this + 73);
          if (*(_BYTE *)(this + 74))
          {
            *(_BYTE *)(this + 74) = 0;
            if (v6)
            {
              v7 = *(WebKit::WebPreferences **)(*(_QWORD *)(v5 + 200) + 40);
              v15 = 0;
              WebKit::WebPreferences::setInspectorStartsAttached(v7, &v15);
              v2 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 8);
            }
          }
          else
          {
            if (*(_BYTE *)(this + 73))
              return this;
            *(_BYTE *)(this + 74) = 0;
          }
          v8 = v2 - 16;
          if (!v2)
            v8 = 0;
          v9 = *(_QWORD *)(v8 + 208);
          v14 = 0;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(v9, &v14, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896), 0);
          v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8);
          v11 = v10 - 16;
          if (!v10)
            v11 = 0;
          v12 = *(_QWORD *)(v11 + 208);
          v13 = 0;
          return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::Detached>(v12, (uint64_t)&v13, *(_QWORD *)(*(_QWORD *)(v10 + 16) + 1896), 0);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::setAttachedWindowHeight(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v4 = a2;
  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return WebKit::WebPreferences::setInspectorAttachedHeight(*(WebKit::WebPreferences **)(*(_QWORD *)(v3 + 200) + 40), &v4);
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::setAttachedWindowWidth(uint64_t this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v4 = a2;
  v2 = *(_QWORD *)(this + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return WebKit::WebPreferences::setInspectorAttachedWidth(*(WebKit::WebPreferences **)(*(_QWORD *)(v3 + 200) + 40), &v4);
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::togglePageProfiling(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  char v6;

  v1 = *(_QWORD *)(this + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(unsigned __int8 *)(this + 76);
      v4 = *(_QWORD *)(v2 + 192);
      if (v3)
      {
        v6 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopPageProfiling>(v4, (uint64_t)&v6, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896), 0);
      }
      else
      {
        v5 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartPageProfiling>(v4, (uint64_t)&v5, *(_QWORD *)(*(_QWORD *)(v2 + 16) + 1896), 0);
      }
    }
  }
  return this;
}

uint64_t WebKit::WebInspectorUIProxy::toggleElementSelection(uint64_t this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = *(_QWORD *)(this + 40);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      v5 = this;
      if (*(_BYTE *)(this + 79))
      {
        *(_BYTE *)(this + 80) = 1;
        v6 = *(_QWORD *)(v4 + 192);
        v11 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopElementSelection>(v6, (uint64_t)&v11, *(_QWORD *)(*(_QWORD *)(v4 + 16) + 1896), 0);
      }
      else
      {
        WebKit::WebInspectorUIProxy::connect(this, a2, a3);
        v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
        v8 = v7 - 16;
        if (!v7)
          v8 = 0;
        v9 = *(_QWORD *)(v8 + 208);
        v10 = 0;
        return WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartElementSelection>(v9, (uint64_t)&v10, *(_QWORD *)(*(_QWORD *)(v7 + 16) + 1896), 0);
      }
    }
  }
  return this;
}

void WebKit::WebInspectorUIProxy::openLocalInspectorFrontend(WebKit::WebInspectorUIProxy *this, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  const WTF::StringImpl *v8;
  uint64_t v9;
  void *v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::WebPageProxy *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  size_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  size_t v31;
  unint64_t v32;
  char *v33;
  int *v34;
  void *v35;
  WTF::StringImpl *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  CFTypeRef v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  size_t v60;
  char *v61;
  void *v62;
  unint64_t v63;
  size_t v64;
  char *v65;
  void *v66;
  size_t v67;
  int v68;
  uint64_t v69;
  WTF::StringImpl *v70[2];
  char v71;
  char v72[8];
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  CFTypeRef cf;
  uint64_t v77;
  IPC::Encoder *v78[2];

  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      CFRetain(*(CFTypeRef *)(v4 - 8));
      v9 = *(_QWORD *)(v4 + 208);
      {
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
      }
      if (!WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v9 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, v8))goto LABEL_74;
      if (Inspector::FrontendRouter::hasLocalFrontend(**(Inspector::FrontendRouter ***)(v4 + 1056)))
      {
        WebKit::WebInspectorUIProxy::show((char *)this, (uint64_t)v10, v11);
LABEL_74:
        CFRelease(*(CFTypeRef *)(v4 - 8));
        return;
      }
      *((_BYTE *)this + 72) = a3;
      WebKit::WebInspectorUIProxy::createFrontendPage(this, v10);
      v12 = *((_QWORD *)this + 6);
      if (!v12)
        goto LABEL_74;
      v13 = *(_QWORD *)(v12 + 8);
      if (!v13)
        goto LABEL_74;
      CFRetain(*(CFTypeRef *)(v13 - 8));
      v69 = *(_QWORD *)(v13 + 192);
      WebKit::DebuggableInfoData::empty((uint64_t)v72);
      v14 = *((_BYTE *)this + 72);
      v15 = *((_QWORD *)this + 5);
      if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0)
      {
        CFRetain(*(CFTypeRef *)(v16 - 8));
        v68 = WebKit::inspectorLevelForPage((WebKit *)(v16 - 16), v17);
        CFRelease(*(CFTypeRef *)(v16 - 8));
      }
      else
      {
        v68 = 1;
      }
      v18 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
      if (v18)
        v19 = v18 - 16;
      else
        v19 = 0;
      v20 = *(_QWORD *)(*(_QWORD *)(v19 + 32) + 1896);
      v21 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v21 = 1797;
      *(_QWORD *)(v21 + 8) = v20;
      v22 = (void *)(v21 + 16);
      *(_QWORD *)(v21 + 528) = v21 + 16;
      *(_QWORD *)(v21 + 536) = v21 + 16;
      *(_OWORD *)(v21 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v21 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v21);
      v78[0] = (IPC::Encoder *)v21;
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v21, (uint64_t *)this + 8);
      IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::encode((IPC::Encoder *)v21, v72);
      v23 = *(_QWORD *)(v21 + 544);
      v24 = v23 + 1;
      v25 = *(_QWORD *)(v21 + 552);
      if (v25 < v23 + 1)
      {
        v59 = (2 * v25 + 4095) & 0xFFFFFFFFFFFFF000;
        do
        {
          v60 = v59;
          v59 *= 2;
        }
        while (v60 < v24);
        v67 = v60;
        v61 = (char *)mmap(0, v60, 3, 4098, -1, 0);
        if (v61 == (char *)-1)
          goto LABEL_88;
        v26 = v61;
        memcpy(v61, *(const void **)(v21 + 528), *(_QWORD *)(v21 + 544));
        v62 = *(void **)(v21 + 528);
        if (v62 != v22)
          munmap(v62, *(_QWORD *)(v21 + 552));
        *(_QWORD *)(v21 + 528) = v26;
        *(_QWORD *)(v21 + 552) = v67;
        v27 = *(_QWORD *)(v21 + 544);
      }
      else
      {
        v26 = *(char **)(v21 + 528);
        v27 = *(_QWORD *)(v21 + 544);
      }
      bzero(&v26[v27], v23 - v27);
      *(_QWORD *)(v21 + 544) = v24;
      v28 = (_BYTE *)(*(_QWORD *)(v21 + 528) + v23);
      *(_QWORD *)(v21 + 536) = v28 + 1;
      *v28 = v14;
      v29 = *(_QWORD *)(v21 + 544);
      v30 = (v29 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v31 = v30 + 4;
      v32 = *(_QWORD *)(v21 + 552);
      if (v32 >= v30 + 4)
      {
        v33 = *(char **)(v21 + 528);
LABEL_21:
        bzero(&v33[v29], v30 - v29);
        *(_QWORD *)(v21 + 544) = v31;
        v34 = (int *)(*(_QWORD *)(v21 + 528) + v30);
        *(_QWORD *)(v21 + 536) = v34 + 1;
        *v34 = v68;
        LOBYTE(v70[0]) = 0;
        v71 = 0;
        WebKit::AuxiliaryProcessProxy::sendMessage(v69, v78, 0, (uint64_t)v70, 1);
        if (v71)
        {
          v36 = v70[0];
          v70[0] = 0;
          if (v36)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v36 + 8))(v36);
        }
        v37 = v78[0];
        v78[0] = 0;
        if (v37)
        {
          IPC::Encoder::~Encoder(v37, v35);
          WTF::fastFree(v38, v39);
        }
        v40 = v75;
        v75 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2)
            WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v35);
          else
            *(_DWORD *)v40 -= 2;
        }
        v41 = v74;
        v74 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 2)
            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v35);
          else
            *(_DWORD *)v41 -= 2;
        }
        v42 = v73;
        v73 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v35);
          else
            *(_DWORD *)v42 -= 2;
        }
        *((_BYTE *)this + 81) = 1;
        WebKit::WebPageInspectorController::connectFrontend(*(Inspector::FrontendRouter ***)(v4 + 1056));
        if (!*((_BYTE *)this + 72))
        {
          *((_BYTE *)this + 75) = a2;
          v44 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
          if (v44)
            v45 = v44 - 16;
          else
            v45 = 0;
          v46 = *(_QWORD *)(*(_QWORD *)(v45 + 216) + 40);
          {
            WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::$_0::operator() const(void)::impl;
          }
          if (WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v46 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorStartsAttachedKey(void)::key, v43))v47 = *((_BYTE *)this + 75) != 0;
          else
            v47 = 0;
          *((_BYTE *)this + 74) = v47;
          v48 = *(_QWORD *)(*((_QWORD *)this + 6) + 8);
          if (v48)
            v49 = v48 - 16;
          else
            v49 = 0;
          v50 = *(_QWORD *)(*(_QWORD *)(v49 + 216) + 40);
          {
            WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl += 2;
            WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::$_0::operator() const(void)::impl;
          }
          *((_DWORD *)this + 21) = WebKit::valueForKey<unsigned int>(v50 + 40, v50 + 64, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inspectorAttachmentSideKey(void)::key);
          v51 = *(_QWORD *)(v4 + 192);
          v72[0] = *((_BYTE *)this + 74);
          WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(v51, v72, *(_QWORD *)(*(_QWORD *)(v4 + 16) + 1896), 0);
          if (*((_BYTE *)this + 74))
          {
            v52 = *((_DWORD *)this + 21);
            switch(v52)
            {
              case 2:
                WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedLeft>(*(_QWORD *)(v13 + 192), *(_QWORD *)(*(_QWORD *)(v13 + 16) + 1896));
                break;
              case 1:
                WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedRight>(*(_QWORD *)(v13 + 192), *(_QWORD *)(*(_QWORD *)(v13 + 16) + 1896));
                break;
              case 0:
                WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedBottom>(*(_QWORD *)(v13 + 192), *(_QWORD *)(*(_QWORD *)(v13 + 16) + 1896));
                break;
            }
          }
          else
          {
            v53 = *(_QWORD *)(v13 + 192);
            v72[0] = 0;
            WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::Detached>(v53, (uint64_t)v72, *(_QWORD *)(*(_QWORD *)(v13 + 16) + 1896), 0);
          }
          v54 = *(_QWORD *)(v13 + 192);
          v72[0] = *((_BYTE *)this + 75) ^ 1;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDockingUnavailable>(v54, v72, *(_QWORD *)(*(_QWORD *)(v13 + 16) + 1896), 0);
        }
        (*(void (**)(_QWORD, uint64_t, WebKit::WebInspectorUIProxy *))(**(_QWORD **)(v4 + 88) + 568))(*(_QWORD *)(v4 + 88), v4 - 16, this);
        v78[0] = 0;
        MEMORY[0x19AEABB0C](v70, v78, 0);
        WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v72, (const WTF::URL *)v70, 0);
        cf = 0;
        WebKit::WebPageProxy::loadRequest(v13 - 16, (WebCore::ResourceRequestBase *)v72, 1, 0, &v77);
        if (v77)
          CFRelease(*(CFTypeRef *)(v77 + 8));
        v55 = cf;
        cf = 0;
        if (v55)
          CFRelease(v55);
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v72);
        v57 = v70[0];
        v70[0] = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 2)
            WTF::StringImpl::destroy(v57, v56);
          else
            *(_DWORD *)v57 -= 2;
        }
        v58 = v78[0];
        v78[0] = 0;
        if (v58)
        {
          if (*(_DWORD *)v58 == 2)
            WTF::StringImpl::destroy(v58, v56);
          else
            *(_DWORD *)v58 -= 2;
        }
        CFRelease(*(CFTypeRef *)(v13 - 8));
        goto LABEL_74;
      }
      v63 = (2 * v32 + 4095) & 0xFFFFFFFFFFFFF000;
      do
      {
        v64 = v63;
        v63 *= 2;
      }
      while (v64 < v31);
      v65 = (char *)mmap(0, v64, 3, 4098, -1, 0);
      if (v65 != (char *)-1)
      {
        v33 = v65;
        memcpy(v65, *(const void **)(v21 + 528), *(_QWORD *)(v21 + 544));
        v66 = *(void **)(v21 + 528);
        if (v66 != v22)
          munmap(v66, *(_QWORD *)(v21 + 552));
        *(_QWORD *)(v21 + 528) = v33;
        *(_QWORD *)(v21 + 552) = v64;
        v29 = *(_QWORD *)(v21 + 544);
        goto LABEL_21;
      }
LABEL_88:
      __break(0xC471u);
      JUMPOUT(0x19743A614);
    }
  }
}

char *WebKit::WebInspectorUIProxy::open(char *this)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  if (!this[72])
  {
    v1 = this;
    v2 = *((_QWORD *)this + 6);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        v4 = this[82];
        this[82] = 1;
        this[73] = 1;
        v5 = *(_QWORD *)(v3 + 192);
        v6 = 1;
        this = WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetIsVisible>(v5, &v6, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 1896), 0);
        if (!v1[74] || !v1[75])
          v1[74] = 0;
        v1[82] = v4;
      }
    }
  }
  return this;
}

void WebKit::WebInspectorUIProxy::sendMessageToBackend(WebKit::WebInspectorUIProxy *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 5);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(*(_QWORD *)(v3 + 1056) + 8), a2);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

void WebKit::WebInspectorUIProxy::frontendLoaded(WebKit::WebInspectorUIProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  WebKit::WebAutomationSession *v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 5);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      CFRetain(*(CFTypeRef *)(v2 - 8));
      v4 = (WebKit::WebAutomationSession *)*((_QWORD *)API::PageConfiguration::Data::LazyInitializedRef<WebKit::WebProcessPool,&API::PageConfiguration::Data::createWebProcessPool>::get((WebKit::WebProcessPool **)(*(_QWORD *)(v2 + 32) + 24))
                                           + 40);
      if (v4)
        WebKit::WebAutomationSession::inspectorFrontendLoaded(v4, (const WebKit::WebPageProxy *)(v2 - 16));
      v5 = *((_QWORD *)this + 7);
      if (v5)
        (*(void (**)(uint64_t, WebKit::WebInspectorUIProxy *))(*(_QWORD *)v5 + 24))(v5, this);
      CFRelease(*(CFTypeRef *)(v2 - 8));
    }
  }
}

void WebKit::WebInspectorUIProxy::attachAvailabilityChanged(WebKit::WebInspectorUIProxy *this, int a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *((unsigned __int8 *)this + 75);
  if (*((_BYTE *)this + 74))
    a2 = 1;
  *((_BYTE *)this + 75) = a2;
  if (v2 != a2)
  {
    v5 = *((_QWORD *)this + 6);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        CFRetain(*(CFTypeRef *)(v6 - 8));
        if (!*((_BYTE *)this + 72))
        {
          v7 = *(_QWORD *)(v6 + 192);
          v8 = *((_BYTE *)this + 75) ^ 1;
          WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDockingUnavailable>(v7, &v8, *(_QWORD *)(*(_QWORD *)(v6 + 16) + 1896), 0);
        }
        CFRelease(*(CFTypeRef *)(v6 - 8));
      }
    }
  }
}

_QWORD *WebKit::WebInspectorUIProxy::setInspectorPageDeveloperExtrasEnabled(_QWORD *this, BOOL a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v4 = a2;
  v2 = this[6];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      return WebKit::WebPreferences::setDeveloperExtrasEnabled(*(WebKit::WebPreferences **)(v3 + 208), &v4);
  }
  return this;
}

void WebKit::WebInspectorUIProxy::elementSelectionChanged(WebKit::WebInspectorUIProxy *this, char a2)
{
  uint64_t v2;

  *((_BYTE *)this + 79) = a2;
  if (*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 80) = 0;
    if (!*((_BYTE *)this + 73))
      WebKit::WebInspectorUIProxy::close(this);
  }
  else if ((a2 & 1) == 0)
  {
    v2 = *((_QWORD *)this + 6);
    if (v2)
    {
      if (*(_QWORD *)(v2 + 8))
      {
        if (*((_BYTE *)this + 78))
        {
          *((_BYTE *)this + 78) = 0;
        }
        else if (!*((_BYTE *)this + 73))
        {
          WebKit::WebInspectorUIProxy::open((char *)this);
        }
      }
    }
  }
}

void WebKit::WebInspectorUIProxy::setDeveloperPreferenceOverride(uint64_t a1, int a2, __int16 a3)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  CFTypeRef *v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  WebKit::UserMediaPermissionRequestManagerProxy *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;

  if (a2 == 2)
  {
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v8 = (CFTypeRef *)(v12 - 16);
        CFRetain(*(CFTypeRef *)(v12 - 8));
        v13 = WebKit::WebPageProxy::userMediaPermissionRequestManager((WebKit::WebPageProxy *)v8);
        *((_WORD *)v13 + 136) = a3;
        WebKit::UserMediaPermissionRequestManagerProxy::syncWithWebCorePrefs(v13);
LABEL_25:
        CFRelease(v8[1]);
      }
    }
  }
  else
  {
    v4 = a3;
    v5 = HIBYTE(a3);
    if (a2 == 1)
    {
      v14 = *(_QWORD *)(a1 + 40);
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
        {
          v8 = (CFTypeRef *)(v15 - 16);
          CFRetain(*(CFTypeRef *)(v15 - 8));
          if (v5)
            v16 = v4 == 0;
          else
            v16 = 1;
          v17 = !v16;
          WebKit::WebsiteDataStore::setResourceLoadStatisticsDebugMode(*(WebKit::WebsiteDataStore **)(v15 + 248), v17);
          goto LABEL_25;
        }
      }
    }
    else if (!a2)
    {
      v6 = *(_QWORD *)(a1 + 40);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
        {
          v8 = (CFTypeRef *)(v7 - 16);
          CFRetain(*(CFTypeRef *)(v7 - 8));
          if (v5)
            v9 = v4 == 0;
          else
            v9 = 1;
          v10 = !v9;
          WebKit::WebsiteDataStore::setPrivateClickMeasurementDebugMode(*(WebKit::WebsiteDataStore **)(v7 + 248), v10);
          goto LABEL_25;
        }
      }
    }
  }
}

uint64_t WebKit::WebInspectorUIProxy::save(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  v5 = *(_QWORD *)(v4 + 224);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  return WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v5 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
}

uint64_t WebKit::WebInspectorUIProxy::load(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v5)
    v6 = v5 - 16;
  else
    v6 = 0;
  v7 = *(_QWORD *)(v6 + 224);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  result = WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v7 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
  if ((_DWORD)result && *(_QWORD *)a2)
  {
    if (*(_DWORD *)(*(_QWORD *)a2 + 4))
    {
      v9 = *(_QWORD *)a3;
      *(_QWORD *)a3 = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 16))(v9, MEMORY[0x1E0CBF6F0]);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  return result;
}

uint64_t WebKit::WebInspectorUIProxy::pickColorFromScreen(uint64_t a1, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v10[16];

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 224);
  {
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  WebKit::WebPreferencesStore::getBoolValueForKey((WebKit::WebPreferencesStore *)(v6 + 40), (WTF::StringImpl **)&WebKit::WebPreferencesKey::developerExtrasEnabledKey(void)::key, a3);
  v10[0] = 0;
  v10[8] = 0;
  v7 = *a2;
  *a2 = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v7 + 16))(v7, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return std::__optional_destruct_base<WebCore::Color,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v8);
}

void WebKit::WebInspectorUIProxy::evaluateInFrontendForTesting(WebKit::WebInspectorUIProxy *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      v5 = *(_QWORD *)(v3 + 192);
      v6 = (uint64_t *)a2;
      WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::EvaluateInFrontendForTesting>(v5, &v6, *(_QWORD *)(*(_QWORD *)(v3 + 16) + 1896), 0);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
}

const __CFString *WebKit::bundleIdentifierForSandboxBroker(WebKit *this)
{
  WTF::StringImpl *v1;
  char v2;
  WebCore *v3;
  WTF::StringImpl *v5;

  WebCore::applicationBundleIdentifier(this);
  v2 = MEMORY[0x19AEABBCC](v5, "com.apple.SafariTechnologyPreview", 33);
  v3 = v5;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
    {
      v3 = (WebCore *)WTF::StringImpl::destroy(v5, v1);
      if ((v2 & 1) != 0)
        return CFSTR("com.apple.SafariTechnologyPreview.SandboxBroker");
      goto LABEL_7;
    }
    *(_DWORD *)v5 -= 2;
  }
  if ((v2 & 1) != 0)
    return CFSTR("com.apple.SafariTechnologyPreview.SandboxBroker");
LABEL_7:
  WebCore::applicationBundleIdentifier(v3);
  if (MEMORY[0x19AEABBCC](0, "com.apple.Safari.automation", 27))
    return CFSTR("com.apple.Safari.automation.SandboxBroker");
  else
    return CFSTR("com.apple.Safari.SandboxBroker");
}

WebKit::WebPageDebuggable *WebKit::WebPageDebuggable::WebPageDebuggable(WebKit::WebPageDebuggable *this, WebKit::WebPageProxy *a2)
{
  uint64_t v4;
  char v5;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 8) = xmmword_1978CE9C0;
  *(_QWORD *)(v4 + 24) = this;
  *((_DWORD *)this + 4) = 0;
  *(_QWORD *)this = MEMORY[0x1E0CC10E8] + 16;
  *((_QWORD *)this + 1) = v4;
  if (JSRemoteInspectorGetInspectionFollowsInternalPolicies())
    v5 = 1;
  else
    v5 = 2;
  *((_BYTE *)this + 20) = v5;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 36) = 0;
  *(_QWORD *)this = off_1E34DCF30;
  *((_QWORD *)this + 5) = a2;
  *((_QWORD *)this + 6) = 0;
  return this;
}

uint64_t WebKit::WebPageDebuggable::connect(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  v8 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v8 = &off_1E34DD090;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_BYTE *)(v8 + 32) = a3;
  *(_BYTE *)(v8 + 33) = a4;
  v10 = v8;
  WTF::callOnMainRunLoopAndWait();
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

uint64_t WebKit::WebPageDebuggable::disconnect(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v4 = &off_1E34DD0B8;
  v4[1] = a1;
  v4[2] = a1;
  v4[3] = a2;
  v6 = v4;
  WTF::callOnMainRunLoopAndWait();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

uint64_t WebKit::WebPageDebuggable::dispatchMessageFromRemote(uint64_t a1)
{
  _QWORD *v2;
  WTF::StringImpl *v5;
  _QWORD *v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref((unsigned __int8 **)(a1 + 8));
  WTF::String::isolatedCopy();
  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v2 = &off_1E34DD0E0;
  v2[1] = a1;
  v2[2] = a1;
  v2[3] = v5;
  v6 = v2;
  WTF::callOnMainRunLoopAndWait();
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return 0;
}

uint64_t WebKit::WebPageDebuggable::setIndicating(unsigned __int8 **this, char a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebKit::RemoteAudioHardwareListener,(WTF::DestructionThread)0>::ref(this + 1);
  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v4 = &off_1E34DD108;
  *(_QWORD *)(v4 + 8) = this;
  *(_QWORD *)(v4 + 16) = this;
  *(_BYTE *)(v4 + 24) = a2;
  v6 = v4;
  WTF::callOnMainRunLoopAndWait();
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t WebKit::InspectorTargetProxy::type(WebKit::InspectorTargetProxy *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t API::ObjectImpl<(API::Object::Type)71>::type()
{
  return 71;
}

uint64_t WebKit::WebInspectorUIProxy::connectionType(WebKit::WebInspectorUIProxy *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebKit::WebInspectorUIProxy::connectionType(WebKit::WebInspectorUIProxy *this)
{
  return 1;
}

uint64_t Inspector::RemoteInspectionTarget::targetRunLoop(Inspector::RemoteInspectionTarget *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t WebKit::WebPageDebuggable::nameOverride(WebKit::WebPageDebuggable *this)
{
  return (uint64_t)this + 48;
}

uint64_t std::default_delete<WebKit::UIGamepad>::operator()[abi:sn180100](WTF *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  v3 = *((_QWORD *)a1 + 8);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 40, a2);
  WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, v4);
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return WTF::fastFree(a1, v5);
}

uint64_t WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
    WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(*(WTF **)a1, (void *)(*(_QWORD *)a1 + 8 * v3));
  v4 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF *WTF::VectorDestructor<true,WebCore::SharedGamepadValue>::destruct(WTF *result, void *a2)
{
  WTF **v3;

  if (result != a2)
  {
    v3 = (WTF **)result;
    do
    {
      result = *v3;
      *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1)
          result = (WTF *)WTF::fastFree(result, a2);
        else
          --*(_DWORD *)result;
      }
      ++v3;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::SharedGamepadValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a2;
  v3 = result;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = a2;
  if (!a2)
    return v3;
  if (!(a2 >> 29))
  {
    v4 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v4;
    v5 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v5)
    {
      v6 = (uint64_t *)v4;
      v7 = 8 * v5;
      do
      {
        v8 = WTF::fastMalloc((WTF *)0x10);
        *(_DWORD *)v8 = 1;
        *(_QWORD *)(v8 + 8) = 0;
        *v6++ = v8;
        v7 -= 8;
      }
      while (v7);
    }
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::UIGamepadProvider::*&)(void),WebKit::UIGamepadProvider*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::construct_at[abi:sn180100]<WebKit::GamepadData,WebKit::GamepadData,WebKit::GamepadData*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    *(_DWORD *)result = *(_DWORD *)a2;
    v2 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(result + 8) = v2;
    v3 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 16) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(result + 24) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_DWORD *)(result + 32) = v4;
    LODWORD(v4) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a2 + 36) = 0;
    *(_DWORD *)(result + 36) = v4;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    v5 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(result + 40) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a2 + 48) = 0;
    *(_DWORD *)(result + 48) = v5;
    LODWORD(v5) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(a2 + 52) = 0;
    *(_DWORD *)(result + 52) = v5;
    *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(result + 64) = 0;
    v6 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(result + 64) = v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Show>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1815;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::Close>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1812;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::UpdateConnection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1810;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetFrontendConnection>(uint64_t a1, unint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1814;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::Encoder::addAttachment(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowConsole>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1816;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::ShowResources>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1818;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::SetAttached>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  char *result;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1813;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v28 = (IPC::Encoder *)v8;
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v8 + 552);
  if (v12 < v10 + 1)
  {
    v23 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v11);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v13;
    *(_QWORD *)(v8 + 552) = v24;
    v14 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v13 = *(char **)(v8 + 528);
    v14 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v8 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  LOBYTE(v26) = 0;
  v27 = 0;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a4, (uint64_t)&v26, 1);
  if (v27)
  {
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  return (char *)v17;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedBottom>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1793;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedRight>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1795;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::AttachedLeft>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *result;
  WTF *v8;
  void *v9;
  uint64_t v10;
  char v11;
  IPC::Encoder *v12;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1794;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v12 = (IPC::Encoder *)v4;
  LOBYTE(v10) = 0;
  v11 = 0;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v12, 0, (uint64_t)&v10, 1);
  if (v11)
  {
    v6 = v10;
    v10 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  result = v12;
  v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::Detached>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1796;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopPageProfiling>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1822;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartPageProfiling>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1820;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StopElementSelection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1821;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspector::StartElementSelection>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 1819;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDockingUnavailable>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  char *result;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1801;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v28 = (IPC::Encoder *)v8;
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v8 + 552);
  if (v12 < v10 + 1)
  {
    v23 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v11);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v13;
    *(_QWORD *)(v8 + 552) = v24;
    v14 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v13 = *(char **)(v8 + 528);
    v14 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v8 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  LOBYTE(v26) = 0;
  v27 = 0;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a4, (uint64_t)&v26, 1);
  if (v27)
  {
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  return (char *)v17;
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetIsVisible>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  char *result;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1802;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v28 = (IPC::Encoder *)v8;
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v8 + 552);
  if (v12 < v10 + 1)
  {
    v23 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v11);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v13;
    *(_QWORD *)(v8 + 552) = v24;
    v14 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v13 = *(char **)(v8 + 528);
    v14 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v8 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  LOBYTE(v26) = 0;
  v27 = 0;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a4, (uint64_t)&v26, 1);
  if (v27)
  {
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  return (char *)v17;
}

char *WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::SetDiagnosticLoggingAvailable>(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  size_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  char *result;
  unint64_t v23;
  size_t v24;
  void *v25;
  uint64_t v26;
  char v27;
  IPC::Encoder *v28;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1800;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v28 = (IPC::Encoder *)v8;
  v9 = *a2;
  v10 = *(_QWORD *)(v8 + 544);
  v11 = v10 + 1;
  v12 = *(_QWORD *)(v8 + 552);
  if (v12 < v10 + 1)
  {
    v23 = (2 * v12 + 4095) & 0xFFFFFFFFFFFFF000;
    do
    {
      v24 = v23;
      v23 *= 2;
    }
    while (v24 < v11);
    result = (char *)mmap(0, v24, 3, 4098, -1, 0);
    if (result == (char *)-1)
    {
      __break(0xC471u);
      return result;
    }
    v13 = result;
    memcpy(result, *(const void **)(v8 + 528), *(_QWORD *)(v8 + 544));
    v25 = *(void **)(v8 + 528);
    if (v25 != (void *)(v8 + 16))
      munmap(v25, *(_QWORD *)(v8 + 552));
    *(_QWORD *)(v8 + 528) = v13;
    *(_QWORD *)(v8 + 552) = v24;
    v14 = *(_QWORD *)(v8 + 544);
  }
  else
  {
    v13 = *(char **)(v8 + 528);
    v14 = *(_QWORD *)(v8 + 544);
  }
  bzero(&v13[v14], v10 - v14);
  *(_QWORD *)(v8 + 544) = v11;
  v15 = (_BYTE *)(*(_QWORD *)(v8 + 528) + v10);
  *(_QWORD *)(v8 + 536) = v15 + 1;
  *v15 = v9;
  LOBYTE(v26) = 0;
  v27 = 0;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v28, a4, (uint64_t)&v26, 1);
  if (v27)
  {
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v28;
  v28 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  return (char *)v17;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::WebInspectorUI::EvaluateInFrontendForTesting>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 1798;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t *WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::inlineSet<WebKit::WebPageProxy * const&,unsigned int>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        *(_QWORD *)a4 = v16;
        *(_QWORD *)(a4 + 8) = v8 + 16 * v22;
        *(_BYTE *)(a4 + 16) = 0;
        *((_DWORD *)v16 + 2) = *a3;
        return result;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  *((_DWORD *)v16 + 2) = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      result = (uint64_t *)WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::expand(v6, v16);
      v16 = result;
      v23 = *v6;
      if (*v6)
        v26 = *(unsigned int *)(v23 - 4);
      else
        v26 = 0;
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v23 + 16 * v26;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

BOOL WTF::HashTable<WebKit::WebPageProxy *,WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageProxy *,unsigned int>>,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageProxy *>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebKit::WebPageProxy *,unsigned int,WTF::DefaultHash<WebKit::WebPageProxy *>,WTF::HashTraits<WebKit::WebPageProxy *>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebKit::WebPageProxy *>>,WebKit::WebPageProxy *>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  _BOOL8 result;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 8);
  v4 = ~(*a2 << 32) + *a2;
  v5 = (v4 ^ (v4 >> 22)) + ~((v4 ^ (v4 >> 22)) << 13);
  v6 = (9 * (v5 ^ (v5 >> 8))) ^ ((9 * (v5 ^ (v5 >> 8))) >> 15);
  v7 = v3 & (((v6 + ~(v6 << 27)) >> 31) ^ (v6 + ~((_DWORD)v6 << 27)));
  v8 = *(_QWORD *)(v2 + 16 * v7);
  if (v8 == *a2)
    return 1;
  v9 = 1;
  do
  {
    result = v8 != 0;
    if (!v8)
      break;
    v7 = (v7 + v9) & v3;
    v8 = *(_QWORD *)(v2 + 16 * v7);
    ++v9;
  }
  while (v8 != *a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::name(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34DD018;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::name(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DD018;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::name(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 40);
  if (v1 && *(_QWORD *)(v1 + 280))
  {
    v2 = result;
    WTF::String::isolatedCopy();
    v4 = *(WTF::StringImpl ***)(v2 + 24);
    v5 = *v4;
    *v4 = v6;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
    return 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::url(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34DD040;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::url(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DD040;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::url(void)::$_0,void>::call(WTF *result)
{
  WTF *v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v1 = result;
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 40);
  if (!v2 || !*(_QWORD *)(v2 + 280))
    goto LABEL_9;
  WTF::String::isolatedCopy();
  v4 = (WTF::StringImpl **)*((_QWORD *)v1 + 3);
  v5 = *v4;
  *v4 = v10;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = 0;
  v10 = 0;
  v6 = **((_QWORD **)v1 + 3);
  if (!v6 || !*(_DWORD *)(v6 + 4))
  {
LABEL_9:
    WTF::aboutBlankURL(result);
    WTF::String::isolatedCopy();
    v8 = (WTF::StringImpl **)*((_QWORD *)v1 + 3);
    v9 = *v8;
    *v8 = v10;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
    return 0;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::hasLocalDebugger(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34DD068;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::hasLocalDebugger(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DD068;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::hasLocalDebugger(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t result;

  result = Inspector::FrontendRouter::hasLocalFrontend(**(Inspector::FrontendRouter ***)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40)
                                                                                       + 1072));
  **(_BYTE **)(a1 + 24) = result;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34DD090;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DD090;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::connect(Inspector::FrontendChannel &,BOOL,BOOL)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPageInspectorController::connectFrontend(*(Inspector::FrontendRouter ***)(*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                 + 40)
                                                                                     + 1072));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34DD0B8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DD0B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::disconnect(Inspector::FrontendChannel &)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPageInspectorController::disconnectFrontend(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 1072));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E34DD0E0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DD0E0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::dispatchMessageFromRemote(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  return Inspector::BackendDispatcher::dispatch(*(Inspector::BackendDispatcher **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 1072) + 8), (const WTF::String *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::setIndicating(BOOL)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  *a1 = &off_1E34DD108;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::setIndicating(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E34DD108;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebPageDebuggable::setIndicating(BOOL)::$_0,void>::call(uint64_t a1)
{
  WebKit::WebPageInspectorController::setIndicating(*(WebKit::WebPageInspectorController **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 1072), *(unsigned __int8 *)(a1 + 24));
}

void WebKit::WebPageInspectorController::connectFrontend(Inspector::FrontendRouter **a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  Inspector::FrontendRouter *v5;
  Inspector::RemoteControllableTarget *v6;

  WebKit::WebPageInspectorController::createLazyAgents(a1);
  v2 = *((_DWORD *)*a1 + 5);
  Inspector::FrontendRouter::connectFrontend();
  if (!v2)
    Inspector::AgentRegistry::didCreateFrontendAndBackend();
  v3 = *((_QWORD *)a1[4] + 1);
  if (v3)
    v4 = v3 - 16;
  else
    v4 = 0;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  v5 = *a1;
  *(_DWORD *)(v4 + 828) = *((_DWORD *)*a1 + 5);
  if (Inspector::FrontendRouter::hasLocalFrontend(v5))
  {
    v6 = *(Inspector::RemoteControllableTarget **)(v4 + 1080);
    if (v6)
      Inspector::RemoteControllableTarget::update(v6);
  }
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

_QWORD *WebKit::WebPageInspectorController::createLazyAgents(_QWORD *this)
{
  unsigned int *v1;
  unsigned int v2;
  _QWORD *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  __int128 v8;
  unsigned int *v9;

  if (!*((_BYTE *)this + 64))
  {
    *((_BYTE *)this + 64) = 1;
    v8 = *(_OWORD *)this;
    v1 = (unsigned int *)this[4];
    do
      v2 = __ldaxr(v1);
    while (__stlxr(v2 + 1, v1));
    v9 = v1;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x30);
    v7 = WebKit::InspectorBrowserAgent::InspectorBrowserAgent(v3, (uint64_t *)&v8);
    Inspector::AgentRegistry::append();
    this = v7;
    if (v7)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
    v9 = 0;
    if (v1)
    {
      do
      {
        v5 = __ldaxr(v1);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v1));
      if (!v6)
      {
        atomic_store(1u, v1);
        return (_QWORD *)WTF::fastFree((WTF *)v1, v4);
      }
    }
  }
  return this;
}

void WebKit::WebPageInspectorController::disconnectFrontend(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Inspector::RemoteControllableTarget *v7;

  Inspector::FrontendRouter::disconnectFrontend();
  if (*(_DWORD *)(*a1 + 20))
  {
    v2 = *(_QWORD *)(a1[4] + 8);
    v3 = v2 - 16;
    if (v2)
      v4 = v2 - 16;
    else
      v4 = 0;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    *(_DWORD *)(v4 + 828) = *(_DWORD *)(*a1 + 20);
  }
  else
  {
    Inspector::AgentRegistry::willDestroyFrontendAndBackend();
    v5 = *(_QWORD *)(a1[4] + 8);
    v3 = v5 - 16;
    if (v5)
      v6 = v5 - 16;
    else
      v6 = 0;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    *(_DWORD *)(v6 + 828) = *(_DWORD *)(*a1 + 20);
    v7 = *(Inspector::RemoteControllableTarget **)(v6 + 1080);
    if (v7)
      Inspector::RemoteControllableTarget::update(v7);
  }
  CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WebKit::WebPageInspectorController::setIndicating(WebKit::WebPageInspectorController *this, int a2)
{
  uint64_t v3;
  CFTypeRef *v4;

  v3 = *(_QWORD *)(*((_QWORD *)this + 4) + 8);
  if (v3)
    v4 = (CFTypeRef *)(v3 - 16);
  else
    v4 = 0;
  CFRetain(v4[1]);
  if (a2)
  {
    WebKit::WebPageProxy::showInspectorIndication((WebKit::WebPageProxy *)v4);
    if (!v3)
      return;
    goto LABEL_6;
  }
  WebKit::WebPageProxy::hideInspectorIndication((WebKit::WebPageProxy *)v4);
  if (v3)
LABEL_6:
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

WTF::StringImpl **WebKit::WebPageInspectorController::destroyInspectorTarget(WebKit::WebPageInspectorController *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t *v4;
  WTF::StringImpl **result;
  WTF::StringImpl **v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;

  v4 = (uint64_t *)((char *)this + 48);
  result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this + 6, a2, a3);
  v6 = result;
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 6);
  if (v7)
    v7 += 2 * *((unsigned int *)v7 - 1);
  if (v7 != result)
  {
    result = (WTF::StringImpl **)Inspector::InspectorTargetAgent::targetDestroyed(*((Inspector::InspectorTargetAgent **)this + 5), result[1]);
    v8 = *((_QWORD *)this + 6);
    if (v8)
    {
      v9 = (WTF::StringImpl **)(v8 + 16 * *(unsigned int *)(v8 - 4));
      if (v9 == v6)
        return result;
    }
    else
    {
      if (!v6)
        return result;
      v9 = 0;
    }
    if (v9 != v6)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v4, v6);
  }
  return result;
}

BOOL WebKit::WebPageInspectorController::shouldPauseLoading(WebKit::WebPageInspectorController *this, const WebKit::ProvisionalPageProxy *a2)
{
  uint64_t *v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;

  if (!*(_DWORD *)(*(_QWORD *)this + 20))
    return 0;
  v2 = (uint64_t *)((char *)this + 48);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((_QWORD *)a2 + 4), &v8);
  v5 = WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v2, &v8, v3);
  v6 = v8;
  v8 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return *((_BYTE *)v5 + 24) != 0;
}

uint64_t WebKit::WebPageInspectorController::setContinueLoadingCallback(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v7;

  v2 = (uint64_t *)(a1 + 48);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *(_QWORD *)(a2 + 32), &v7);
  WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v2, &v7, v3);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  return Inspector::InspectorTarget::setResumeCallback();
}

WTF::StringImpl *WebKit::WebPageInspectorController::didCreateProvisionalPage(WebKit::WebPageInspectorController *this, WebKit::ProvisionalPageProxy *a2)
{
  void *v4;
  WebKit::InspectorTargetProxy *v5;
  WTF *v6;
  void *v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WebKit::InspectorTargetProxy *v10;

  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((_QWORD *)a2 + 4), &v9);
  WebKit::InspectorTargetProxy::create((uint64_t)a2, (_DWORD **)&v9, 0, (uint64_t *)&v10);
  WebKit::WebPageInspectorController::addTarget((uint64_t)this, &v10);
  v5 = v10;
  v10 = 0;
  if (v5)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(v5, v4);
    WTF::fastFree(v6, v7);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageInspectorController::willDestroyProvisionalPage(WebKit::WebPageInspectorController *this, const WebKit::ProvisionalPageProxy *a2)
{
  const WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;

  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, *((_QWORD *)a2 + 4), &v6);
  WebKit::WebPageInspectorController::destroyInspectorTarget(this, &v6, v3);
  result = v6;
  v6 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebKit::WebPageInspectorController::didCommitProvisionalPage(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  void *v8;
  WebKit::InspectorTargetProxy *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebKit::InspectorTargetProxy *v26;
  WTF *v27;
  void *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *result;
  char v31[24];
  WTF::StringImpl *v32;
  WebKit::InspectorTargetProxy *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;

  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, a2, &v35);
  WTF::makeString<WTF::ASCIILiteral,unsigned long long>((uint64_t)"page-", 6, a3, &v34);
  v5 = (uint64_t *)(a1 + 48);
  v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(a1 + 48), &v34, v6);
  v8 = (void *)v7;
  v9 = *(WebKit::InspectorTargetProxy **)(v7 + 8);
  *(_QWORD *)(v7 + 8) = 0;
  v33 = v9;
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
  {
    v11 = v10 + 16 * *(unsigned int *)(v10 - 4);
    if (v11 == v7)
      goto LABEL_8;
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    v11 = 0;
  }
  if (v11 != v7)
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)(a1 + 48), (WTF::StringImpl **)v7);
LABEL_8:
  v12 = (unsigned int *)*((_QWORD *)v9 + 7);
  *((_QWORD *)v9 + 7) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v8);
    }
  }
  Inspector::InspectorTargetAgent::didCommitProvisionalTarget(*(Inspector::InspectorTargetAgent **)(a1 + 40), (const WTF::String *)&v35, (const WTF::String *)&v34);
  v16 = *(_QWORD *)(a1 + 48);
  if (v16)
  {
    v17 = *(unsigned int *)(v16 - 4);
    v18 = v16 + 16 * v17;
    if (*(_DWORD *)(v16 - 12))
    {
      v19 = *(_QWORD *)(a1 + 48);
      if ((_DWORD)v17)
      {
        v20 = 16 * v17;
        v19 = *(_QWORD *)(a1 + 48);
        while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
        {
          v19 += 16;
          v20 -= 16;
          if (!v20)
          {
            v19 = v18;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v19 = v16 + 16 * v17;
  }
  else
  {
    v19 = 0;
    v17 = 0;
  }
  v18 = v16 + 16 * v17;
  if (v16)
  {
LABEL_19:
    v21 = v16 + 16 * *(unsigned int *)(v16 - 4);
    goto LABEL_24;
  }
  v21 = 0;
LABEL_24:
  if (v21 != v19)
  {
    do
    {
      Inspector::InspectorTargetAgent::targetDestroyed(*(Inspector::InspectorTargetAgent **)(a1 + 40), *(Inspector::InspectorTarget **)(v19 + 8));
      v22 = v19 + 16;
      v19 = v18;
      if (v22 != v18)
      {
        v19 = v22;
        while ((unint64_t)(*(_QWORD *)v19 + 1) <= 1)
        {
          v19 += 16;
          if (v19 == v18)
          {
            v19 = v18;
            break;
          }
        }
      }
    }
    while (v19 != v21);
    v16 = *v5;
  }
  if (v16)
  {
    *v5 = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v15);
  }
  v23 = (WTF::StringImpl *)*((_QWORD *)v33 + 5);
  if (v23)
    *(_DWORD *)v23 += 2;
  v32 = v23;
  WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::inlineSet<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>((uint64_t *)(a1 + 48), &v32, (const WTF::StringImpl *)&v33, (uint64_t)v31);
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v24);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v33;
  v33 = 0;
  if (v26)
  {
    WebKit::InspectorTargetProxy::~InspectorTargetProxy(v26, v24);
    WTF::fastFree(v27, v28);
  }
  v29 = v34;
  v34 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v24);
    else
      *(_DWORD *)v29 -= 2;
  }
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebKit::WebPageInspectorController::setEnabledBrowserAgent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 56) != a2)
  {
    *(_QWORD *)(a1 + 56) = a2;
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (v3)
      v4 = v3 - 16;
    else
      v4 = 0;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    v5 = 592;
    if (!*(_QWORD *)(a1 + 56))
      v5 = 600;
    (*(void (**)(void))(**(_QWORD **)(v4 + 104) + v5))();
    if (v3)
      CFRelease(*(CFTypeRef *)(v3 - 8));
  }
}

uint64_t WebKit::InspectorBrowserAgent::extensionsEnabled(uint64_t a1, _QWORD **a2)
{
  WTF::JSONImpl::ArrayBase *v3;
  WTF::JSONImpl::Object *v4;
  WTF::JSONImpl::Object *v5;
  WTF::JSONImpl::Object *v6;
  WTF::JSONImpl::Object *v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::String *v10;
  WTF::StringImpl *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  const WTF::String *v18;
  WTF::StringImpl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;
  WTF::StringImpl *v33;
  _DWORD *v34;
  _QWORD v35[2];
  char v36;

  v3 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v32 = WTF::JSONImpl::ArrayBase::ArrayBase(v3);
  v4 = (WTF::JSONImpl::Object *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a2);
  v5 = v4;
  v7 = v6;
  if (*a2)
    v8 = (uint64_t)&(*a2)[2 * *((unsigned int *)*a2 - 1)];
  else
    v8 = 0;
  if ((WTF::JSONImpl::Object *)v8 != v4)
  {
    do
    {
      WTF::JSONImpl::Object::create(v4);
      v9 = v35[0];
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create(v5, v10);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v9 + 16), &v33, (const WTF::StringImpl *)&v34, (uint64_t)v35);
      if (v36)
      {
        v12 = (uint64_t *)(v9 + 24);
        v13 = *(unsigned int *)(v9 + 36);
        if ((_DWORD)v13 == *(_DWORD *)(v9 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v12, (unint64_t)&v33);
        }
        else
        {
          v14 = *v12;
          v15 = v33;
          if (v33)
            *(_DWORD *)v33 += 2;
          *(_QWORD *)(v14 + 8 * v13) = v15;
          *(_DWORD *)(v9 + 36) = v13 + 1;
        }
      }
      v16 = v34;
      v34 = 0;
      if (v16)
      {
        if (*v16 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v16;
      }
      v17 = v33;
      v33 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, v11);
        else
          *(_DWORD *)v17 -= 2;
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Object *)((char *)v5 + 8), v18);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::ArrayBase,WTF::RawPtrTraits<WTF::JSONImpl::ArrayBase>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::ArrayBase>>>((uint64_t *)(v9 + 16), &v33, (const WTF::StringImpl *)&v34, (uint64_t)v35);
      if (v36)
      {
        v20 = (uint64_t *)(v9 + 24);
        v21 = *(unsigned int *)(v9 + 36);
        if ((_DWORD)v21 == *(_DWORD *)(v9 + 32))
        {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v20, (unint64_t)&v33);
        }
        else
        {
          v22 = *v20;
          v23 = v33;
          if (v33)
            *(_DWORD *)v33 += 2;
          *(_QWORD *)(v22 + 8 * v21) = v23;
          *(_DWORD *)(v9 + 36) = v21 + 1;
        }
      }
      v24 = v34;
      v34 = 0;
      if (v24)
      {
        if (*v24 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v24;
      }
      v25 = v33;
      v33 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
          WTF::StringImpl::destroy(v25, v19);
        else
          *(_DWORD *)v25 -= 2;
      }
      v4 = (WTF::JSONImpl::Object *)(v32 + 16);
      v26 = *(unsigned int *)(v32 + 28);
      if ((_DWORD)v26 == *(_DWORD *)(v32 + 24))
      {
        v27 = v26 + (v26 >> 2);
        if (v27 >= 0x10)
          v28 = v27 + 1;
        else
          v28 = 16;
        if (v28 <= v26 + 1)
          v29 = v26 + 1;
        else
          v29 = v28;
        v4 = (WTF::JSONImpl::Object *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v4, v29);
        v26 = *(unsigned int *)(v32 + 28);
        v30 = (_QWORD *)(*(_QWORD *)(v32 + 16) + 8 * v26);
      }
      else
      {
        v30 = (_QWORD *)(*(_QWORD *)v4 + 8 * v26);
      }
      *v30 = v9;
      *(_DWORD *)(v32 + 28) = v26 + 1;
      while (1)
      {
        v5 = (WTF::JSONImpl::Object *)((char *)v5 + 16);
        if (v5 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_47;
      }
      v5 = v7;
LABEL_47:
      ;
    }
    while (v5 != (WTF::JSONImpl::Object *)v8);
  }
  Inspector::BrowserFrontendDispatcher::extensionsEnabled();
  result = v32;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      return WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v32;
  }
  return result;
}

uint64_t WebKit::InspectorBrowserAgent::extensionsDisabled(uint64_t a1, _QWORD **a2)
{
  WTF::JSONImpl::ArrayBase *v3;
  WTF::JSONImpl::Value *v4;
  WTF::JSONImpl::Value *v5;
  WTF::JSONImpl::Value *v6;
  WTF::JSONImpl::Value *v7;
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;

  v3 = (WTF::JSONImpl::ArrayBase *)WTF::fastMalloc((WTF *)0x20);
  v10 = (_DWORD *)WTF::JSONImpl::ArrayBase::ArrayBase(v3);
  v4 = (WTF::JSONImpl::Value *)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin(a2);
  v5 = v4;
  v7 = v6;
  if (*a2)
    v8 = (uint64_t)&(*a2)[*((unsigned int *)*a2 - 1)];
  else
    v8 = 0;
  if ((WTF::JSONImpl::Value *)v8 != v4)
  {
    do
    {
      WTF::JSONImpl::ArrayOf<WTF::String>::addItem<WTF::String>((uint64_t)v3, v5);
      while (1)
      {
        v5 = (WTF::JSONImpl::Value *)((char *)v5 + 8);
        if (v5 == v7)
          break;
        if ((unint64_t)(*(_QWORD *)v5 + 1) > 1)
          goto LABEL_9;
      }
      v5 = v7;
LABEL_9:
      ;
    }
    while (v5 != (WTF::JSONImpl::Value *)v8);
  }
  Inspector::BrowserFrontendDispatcher::extensionsDisabled();
  result = (uint64_t)v10;
  if (v10)
  {
    if (*v10 == 1)
      return WTF::JSONImpl::Value::operator delete();
    else
      --*v10;
  }
  return result;
}

_QWORD *WebKit::InspectorBrowserAgent::InspectorBrowserAgent(_QWORD *a1, uint64_t *a2)
{
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  WTF::StringImpl *v11;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v11)
  {
    v5 = *(_DWORD *)v11;
    *(_DWORD *)v11 += 2;
    *a1 = off_1E34DD398;
    a1[1] = v11;
    if (v5)
      *(_DWORD *)v11 = v5;
    else
      WTF::StringImpl::destroy(v11, v4);
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = off_1E34DD130;
  a1[2] = &unk_1E34DD180;
  v6 = *a2;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v7 = v6;
  a1[3] = v7;
  Inspector::BrowserBackendDispatcher::create();
  a1[4] = v11;
  v8 = (unsigned int *)a2[2];
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  a1[5] = v8;
  return a1;
}

void WebKit::InspectorBrowserAgent::~InspectorBrowserAgent(WebKit::InspectorBrowserAgent *this, void *a2)
{
  unsigned int *v3;
  _DWORD *v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  v3 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    do
    {
      v5 = __ldaxr(v3);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v3));
    if (!v6)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  v7 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  Inspector::BrowserBackendDispatcherHandler::~BrowserBackendDispatcherHandler((WebKit::InspectorBrowserAgent *)((char *)this + 16));
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *(_QWORD *)this = off_1E34DD3D8;
  *((_QWORD *)this + 1) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
}

{
  WTF *v2;
  void *v3;

  WebKit::InspectorBrowserAgent::~InspectorBrowserAgent(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebKit::InspectorBrowserAgent::~InspectorBrowserAgent(WebKit::InspectorBrowserAgent *this, void *a2)
{
  WebKit::InspectorBrowserAgent::~InspectorBrowserAgent((WebKit::InspectorBrowserAgent *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebKit::InspectorBrowserAgent::~InspectorBrowserAgent((WebKit::InspectorBrowserAgent *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

void WebKit::InspectorBrowserAgent::willDestroyFrontendAndBackend(WebKit::InspectorBrowserAgent *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  char v4;

  WebKit::InspectorBrowserAgent::disable(a1, &v3);
  if (v4)
  {
    v2 = v3;
    v3 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2)
        WTF::StringImpl::destroy(v2, v1);
      else
        *(_DWORD *)v2 -= 2;
    }
  }
}

void WebKit::InspectorBrowserAgent::disable(WebKit::InspectorBrowserAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 1072);
  if (*(WebKit::InspectorBrowserAgent **)(v6 + 56) == this)
  {
    WebKit::WebPageInspectorController::setEnabledBrowserAgent(v6, 0);
    *a2 = 0;
    a2[8] = 0;
  }
  else
  {
    std::experimental::fundamentals_v3::expected<void,WTF::String>::expected<WTF::ASCIILiteral>((uint64_t)a2, (uint64_t)"Browser domain already disabled", 32);
  }
}

void WebKit::InspectorBrowserAgent::enable(WebKit::InspectorBrowserAgent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8);
  if (v4)
    v5 = v4 - 16;
  else
    v5 = 0;
  v6 = *(_QWORD *)(v5 + 1072);
  if (*(WebKit::InspectorBrowserAgent **)(v6 + 56) == this)
  {
    std::experimental::fundamentals_v3::expected<void,WTF::String>::expected<WTF::ASCIILiteral>((uint64_t)a2, (uint64_t)"Browser domain already enabled", 31);
  }
  else
  {
    WebKit::WebPageInspectorController::setEnabledBrowserAgent(v6, (uint64_t)this);
    *a2 = 0;
    a2[8] = 0;
  }
}

void `non-virtual thunk to'WebKit::InspectorBrowserAgent::enable(WebKit::InspectorBrowserAgent *this@<X0>, _BYTE *a2@<X8>)
{
  WebKit::InspectorBrowserAgent::enable((WebKit::InspectorBrowserAgent *)((char *)this - 16), a2);
}

void `non-virtual thunk to'WebKit::InspectorBrowserAgent::disable(WebKit::InspectorBrowserAgent *this@<X0>, _BYTE *a2@<X8>)
{
  WebKit::InspectorBrowserAgent::disable((WebKit::InspectorBrowserAgent *)((char *)this - 16), a2);
}

_DWORD *WTF::JSONImpl::ArrayOf<WTF::String>::addItem<WTF::String>(uint64_t a1, WTF::JSONImpl::Value *this)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *result;
  _DWORD *v9;

  v3 = (uint64_t *)(a1 + 16);
  WTF::JSONImpl::Value::create(this, this);
  v4 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 24))
  {
    v5 = (_QWORD *)WTF::Vector<WTF::Ref<WebKit::WebExtensionDataRecord,WTF::RawPtrTraits<WebKit::WebExtensionDataRecord>,WTF::DefaultRefDerefTraits<WebKit::WebExtensionDataRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v3, v4 + 1, (unint64_t)&v9);
    v4 = *(unsigned int *)(a1 + 28);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = (_DWORD *)*v5;
    *v5 = 0;
  }
  else
  {
    v6 = *v3;
    v7 = v9;
    v9 = 0;
  }
  *(_QWORD *)(v6 + 8 * v4) = v7;
  *(_DWORD *)(a1 + 28) = v4 + 1;
  result = v9;
  v9 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)WTF::JSONImpl::Value::operator delete();
    else
      --*result;
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::terminate(WebKit::NetworkProcessProxy *this)
{
  uint64_t result;

  WebKit::AuxiliaryProcessProxy::terminate(this);
  result = *((_QWORD *)this + 18);
  if (result)
    return IPC::Connection::invalidate(result);
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::networkProcessDidTerminate(uint64_t a1, void *a2)
{
  unsigned int v2;
  unsigned int *v4;
  unsigned int v5;
  WebKit::DownloadProxyMap *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  void *v10;
  void *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *result;
  void *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  WTF *v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  _QWORD *v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  v2 = a2;
  v4 = (unsigned int *)(a1 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(WebKit::DownloadProxyMap **)(a1 + 416);
  if (v6)
    WebKit::DownloadProxyMap::invalidate(v6, a2);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 448) + 8);
  v8 = (unsigned int *)(v7 + 16);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 424) + 32))(*(_QWORD *)(v7 + 424), a1 + 432);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(v8);
  std::__optional_destruct_base<WebKit::NetworkProcessProxy::UploadActivity,false>::reset[abi:sn180100](a1 + 496, v10);
  {
    v12 = (unsigned int *)WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
    if (WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess)
      v13 = *(_QWORD *)(WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess + 8);
    else
      v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
  }
  if (v13 == a1)
  {
    WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
    if (v12)
    {
      do
      {
        v14 = __ldaxr(v12);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v12));
      if (!v15)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, v11);
      }
    }
  }
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v62);
  if (HIDWORD(v63))
  {
    v17 = v62;
    v18 = 8 * HIDWORD(v63);
    do
    {
      v19 = *v17++;
      WebKit::WebProcessPool::networkProcessDidTerminate(v19, a1, v2);
      v18 -= 8;
    }
    while (v18);
  }
  result = (unsigned int *)WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v62, v16);
  v22 = (uint64_t *)(a1 + 536);
  v23 = *(_QWORD *)(a1 + 536);
  if (!v23)
    goto LABEL_43;
  v24 = *(_DWORD *)(v23 - 4);
  if (!v24)
    goto LABEL_42;
  v25 = 0;
  do
  {
    while (1)
    {
      result = *(unsigned int **)(v23 + 8 * --v24);
      if ((unint64_t)result + 1 >= 2 && !*((_QWORD *)result + 1))
        break;
      if (!v24)
        goto LABEL_31;
    }
    *(_QWORD *)(v23 + 8 * v24) = 0;
    do
    {
      v26 = __ldaxr(result);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, result));
    if (!v27)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v21);
    }
    *(_QWORD *)(v23 + 8 * v24) = -1;
    ++v25;
  }
  while (v24);
LABEL_31:
  v23 = *v22;
  if (v25)
  {
    *(_DWORD *)(v23 - 16) += v25;
    v28 = *v22;
    if (*v22)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    *(_DWORD *)(v28 - 12) = v29 - v25;
    v23 = *v22;
  }
  if (!v23)
  {
LABEL_43:
    *(_DWORD *)(a1 + 544) = 0;
    goto LABEL_44;
  }
  v30 = *(_DWORD *)(v23 - 4);
  if (v30 >= 9 && 6 * *(_DWORD *)(v23 - 12) < v30)
  {
    result = (unsigned int *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)(a1 + 536));
    v23 = *(_QWORD *)(a1 + 536);
    *(_DWORD *)(a1 + 544) = 0;
    if (v23)
      goto LABEL_46;
LABEL_44:
    v32 = 0;
    *(_DWORD *)(a1 + 548) = 0;
    goto LABEL_53;
  }
LABEL_42:
  *(_DWORD *)(a1 + 544) = 0;
LABEL_46:
  v33 = *(_DWORD *)(v23 - 12);
  if (v33 >= 0x7FFFFFFF)
    v34 = -2;
  else
    v34 = 2 * v33;
  *(_DWORD *)(a1 + 548) = v34;
  v35 = *(unsigned int *)(v23 - 12);
  if ((_DWORD)v35)
  {
    if (v35 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v32 = (WTF *)WTF::fastMalloc((WTF *)(8 * v35));
  }
  else
  {
    v32 = 0;
  }
LABEL_53:
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(a1 + 536), &v62);
  v36 = *v22;
  if (*v22)
  {
    v37 = *(unsigned int *)(v36 - 4);
    v38 = v36 + 8 * v37;
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  v57 = a1 + 536;
  v58 = v38;
  v59 = v38;
  v60 = v38;
  v61 = v36 + 8 * v37;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v57);
  v40 = v63;
  if (v63 == v58)
    goto LABEL_66;
  v41 = 0;
  do
  {
    v42 = v41;
    v43 = *(_QWORD *)(*(_QWORD *)v40 + 8);
    CFRetain(*(CFTypeRef *)(v43 + 8));
    ++v41;
    *((_QWORD *)v32 + v42) = v43;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v62);
    v40 = v63;
  }
  while (v63 != v58);
  if (v41)
  {
    v44 = 8 * v41;
    v45 = v32;
    do
    {
      v46 = *(_QWORD **)v45;
      v45 = (WTF *)((char *)v45 + 8);
      WebKit::WebsiteDataStore::networkProcessDidTerminate(v46, (WebKit::NetworkProcessProxy *)a1);
      v44 -= 8;
    }
    while (v44);
    v47 = 8 * v41;
    v48 = v32;
    do
    {
      v49 = *(_QWORD *)v48;
      *(_QWORD *)v48 = 0;
      if (v49)
        CFRelease(*(CFTypeRef *)(v49 + 8));
      v48 = (WTF *)((char *)v48 + 8);
      v47 -= 8;
    }
    while (v47);
LABEL_66:
    if (!v32)
      goto LABEL_68;
  }
  WTF::fastFree(v32, v39);
LABEL_68:
  v50 = *(_QWORD *)(a1 + 568);
  if (v50)
  {
    v51 = *(unsigned int *)(v50 - 4);
    v52 = v50 + 16 * v51;
    if (*(_DWORD *)(v50 - 12))
    {
      v53 = *(_QWORD *)(a1 + 568);
      if ((_DWORD)v51)
      {
        v54 = 16 * v51;
        v53 = *(_QWORD *)(a1 + 568);
        while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
        {
          v53 += 16;
          v54 -= 16;
          if (!v54)
          {
            v53 = v52;
            goto LABEL_75;
          }
        }
      }
      goto LABEL_75;
    }
    v53 = v50 + 16 * v51;
  }
  else
  {
    v53 = 0;
    v51 = 0;
  }
  v52 = v50 + 16 * v51;
  if (!v50)
  {
    v55 = 0;
    goto LABEL_80;
  }
LABEL_75:
  v55 = v50 + 16 * *(unsigned int *)(v50 - 4);
LABEL_80:
  if (v55 != v53)
  {
    do
    {
      API::DataTask::networkProcessCrashed(*(WebKit::ProcessThrottlerActivity ***)(v53 + 8));
      v56 = v53 + 16;
      v53 = v52;
      if (v56 != v52)
      {
        v53 = v56;
        while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
        {
          v53 += 16;
          if (v53 == v52)
          {
            v53 = v52;
            break;
          }
        }
      }
    }
    while (v53 != v55);
    v50 = *(_QWORD *)(a1 + 568);
  }
  if (v50)
  {
    *(_QWORD *)(a1 + 568) = 0;
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v50, v39);
  }
  return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
}

unsigned int *WebKit::NetworkProcessProxy::didBecomeUnresponsive(WebKit::NetworkProcessProxy *this)
{
  NSObject *v2;
  uint64_t v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v4 = *((_QWORD *)this + 17);
    if (v4)
      LODWORD(v4) = *(_DWORD *)(v4 + 108);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "NetworkProcessProxy::didBecomeUnresponsive: NetworkProcess with PID %d became unresponsive, terminating it", (uint8_t *)v5, 8u);
  }
  WebKit::NetworkProcessProxy::terminate(this);
  return WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)this, (void *)4);
}

void WebKit::NetworkProcessProxy::~NetworkProcessProxy(WebKit::NetworkProcessProxy *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WebKit::DownloadProxyMap *v9;
  void *v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = (uint64_t *)((char *)this + 472);
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)this + 59, &v34);
  v3 = *((_QWORD *)this + 59);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    v5 = v3 + 8 * v4;
  }
  else
  {
    v5 = 0;
    v4 = 0;
  }
  v29 = v2;
  v30 = v5;
  v31 = v5;
  v32 = v5;
  v33 = v3 + 8 * v4;
  WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v29);
  while (v35 != v30)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v35 + 8);
    if (v7)
      v8 = v7 - 16;
    else
      v8 = 0;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>(v8 + 88, this);
    if (v7)
      CFRelease(*(CFTypeRef *)(v7 - 8));
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v34);
  }
  v9 = (WebKit::DownloadProxyMap *)*((_QWORD *)this + 52);
  if (v9)
    WebKit::DownloadProxyMap::invalidate(v9, v6);
  {
    WebKit::networkProcessesSet(void)::set = 0;
    unk_1ECE73950 = 0;
  }
  WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::FrameLoadStateObserver>((uint64_t)&WebKit::networkProcessesSet(void)::set, this);
  WebKit::NetworkProcessProxy::removeBackgroundStateObservers(this);
  v11 = (const void *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v11)
    CFRelease(v11);
  v12 = (const void *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v12)
    CFRelease(v12);
  v13 = *((_QWORD *)this + 71);
  if (v13)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v13, v10);
  v14 = *((_QWORD *)this + 69);
  if (v14)
  {
    v15 = *(unsigned int *)(v14 - 4);
    if ((_DWORD)v15)
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = (unsigned int **)(v14 + 24 * i);
        v18 = *v17;
        if (*v17 != (unsigned int *)-1)
        {
          if (*(_QWORD *)(v14 + 24 * i + 16))
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)(v14 + 24 * i + 16), (WTF::StringImpl *)v10);
            v18 = *v17;
          }
          *v17 = 0;
          if (v18)
          {
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v10);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v14 - 16), v10);
  }
  v21 = *((_QWORD *)this + 67);
  if (v21)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v21, v10);
  v22 = (void *)*((_QWORD *)this + 66);
  if (v22)
    os_release(v22);
  if (*((_BYTE *)this + 520))
  {
    v23 = *((_QWORD *)this + 64);
    if (v23)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v23, v10);
    v24 = *((_QWORD *)this + 63);
    *((_QWORD *)this + 63) = 0;
    if (v24)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 8), v10);
    v25 = *((_QWORD *)this + 62);
    *((_QWORD *)this + 62) = 0;
    if (v25)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v25 + 8), v10);
  }
  v26 = *((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v26)
    WTF::RefCounted<WebKit::LinkDecorationFilteringDataObserver>::deref(v26, v10);
  if (*v2)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(*v2, v10);
  v27 = *((unsigned int *)this + 116);
  if ((_DWORD)v27 != -1)
    ((void (*)(uint64_t *, char *))off_1E34DD408[v27])(&v34, (char *)this + 456);
  *((_DWORD *)this + 116) = -1;
  WebKit::LegacyCustomProtocolManagerProxy::~LegacyCustomProtocolManagerProxy((WebKit::NetworkProcessProxy *)((char *)this + 432));
  v28 = *((_QWORD *)this + 53);
  *((_QWORD *)this + 53) = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  std::unique_ptr<WebKit::DownloadProxyMap>::reset[abi:sn180100]((WebKit::DownloadProxyMap **)this + 52, 0);
  WebKit::AuxiliaryProcessProxy::~AuxiliaryProcessProxy(this);
}

void `non-virtual thunk to'WebKit::NetworkProcessProxy::~NetworkProcessProxy(WebKit::NetworkProcessProxy *this)
{
  WebKit::NetworkProcessProxy::~NetworkProcessProxy((WebKit::NetworkProcessProxy *)((char *)this - 24));
}

{
  WebKit::NetworkProcessProxy::~NetworkProcessProxy((WebKit::NetworkProcessProxy *)((char *)this - 32));
}

{
  WebKit::NetworkProcessProxy::operator delete((WebKit::NetworkProcessProxy *)((char *)this - 24));
}

{
  WebKit::NetworkProcessProxy::operator delete((WebKit::NetworkProcessProxy *)((char *)this - 32));
}

void WebKit::NetworkProcessProxy::operator delete(WebKit::NetworkProcessProxy *a1)
{
  unsigned int *v1;
  void *v2;

  WebKit::NetworkProcessProxy::~NetworkProcessProxy(a1);
  if (atomic_load(v1 + 12))
    bzero(v1, 0x250uLL);
  else
    WTF::fastFree((WTF *)v1, v2);
}

uint64_t WebKit::NetworkProcessProxy::synthesizeAppIsBackground(WebKit::NetworkProcessProxy *this, int a2)
{
  char v3;
  char v4;

  if (a2)
  {
    v3 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationDidEnterBackground>((uint64_t)this, (uint64_t)&v3, 0, 0);
  }
  else
  {
    v4 = 0;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationWillEnterForeground>((uint64_t)this, (uint64_t)&v4, 0, 0);
  }
}

unsigned int *WebKit::NetworkProcessProxy::createDownloadProxy@<X0>(WebKit::DownloadProxyMap **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, const WebCore::ResourceRequest *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  WebKit::DownloadProxyMap *v15;

  v14 = (uint64_t)a1[52];
  if (!v14)
  {
    v15 = (WebKit::DownloadProxyMap *)WTF::fastMalloc((WTF *)0x30);
    WebKit::DownloadProxyMap::DownloadProxyMap(v15, (WebKit::NetworkProcessProxy *)a1);
    std::unique_ptr<WebKit::DownloadProxyMap>::reset[abi:sn180100](a1 + 52, v15);
    v14 = (uint64_t)a1[52];
  }
  return WebKit::DownloadProxyMap::createDownloadProxy(v14, a2, a3, a4, a5, a6, a7);
}

uint64_t WebKit::NetworkProcessProxy::dataTaskWithRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  __n128 v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  WebKit::ProcessThrottlerActivity *v30;
  WTF *v31;
  void *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  __int128 v44;
  WTF::RefCountedBase *v47;
  WTF::RefCountedBase *v48;
  IPC::Encoder *v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  WebKit::ProcessThrottlerActivity *v53;
  char v54;
  uint64_t v55;
  WTF::StringImpl *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v12 = a1 + 200;
  v13 = WTF::fastMalloc((WTF *)0x28);
  WebKit::ProcessThrottlerActivity::ProcessThrottlerActivity(v13, v12, "WKDataTask initialization", 26, a6, 0);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744);
  WebCore::ResourceRequestBase::httpBody(a4);
  v48 = v47;
  v15 = (unsigned int *)(a1 + 16);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  v17 = *(unsigned int **)(a2 + 24);
  if (v17)
  {
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v19 = *a7;
  *a7 = 0;
  v20 = WebCore::ResourceRequestBase::url(a4);
  v21 = *(WTF::StringImpl **)v20;
  if (*(_QWORD *)v20)
    *(_DWORD *)v21 += 2;
  v44 = *(_OWORD *)(v20 + 8);
  v22 = *(_QWORD *)(v20 + 24);
  v23 = *(_QWORD *)(v20 + 32);
  v24 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v24 = 375;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)(v24 + 528) = v24 + 16;
  *(_QWORD *)(v24 + 536) = v24 + 16;
  *(_OWORD *)(v24 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v24 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v24);
  v49 = (IPC::Encoder *)v24;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v24, 8uLL, 8) = v14;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v24, 8uLL, 8) = a3;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode((IPC::Encoder *)v24, a4);
  IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v24, a5);
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode((IPC::Encoder *)v24, (_DWORD **)&v48);
  v50 = a1;
  v54 = a6;
  v56 = v21;
  v57 = v44;
  v58 = v22;
  v59 = v23;
  v25 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v25 = off_1E34DD570;
  *(_QWORD *)(v25 + 8) = a1;
  *(_QWORD *)(v25 + 16) = a1;
  *(_QWORD *)(v25 + 24) = v17;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)(v25 + 32) = v13;
  *(_BYTE *)(v25 + 40) = a6;
  v53 = 0;
  v55 = 0;
  *(_QWORD *)(v25 + 48) = v19;
  v27.n128_f64[0] = WTF::URL::URL(v25 + 56, (uint64_t *)&v56);
  v28 = v56;
  v56 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v26);
    else
      *(_DWORD *)v28 -= 2;
  }
  v29 = v55;
  v55 = 0;
  if (v29)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v29 + 8))(v29, v27);
  v30 = v53;
  v53 = 0;
  if (v30)
  {
    WebKit::ProcessThrottlerActivity::~ProcessThrottlerActivity(v30, v26);
    WTF::fastFree(v31, v32);
  }
  v33 = (unsigned int *)v52;
  v52 = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v26);
    }
  }
  v36 = v51;
  v51 = 0;
  if (v36)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v36 + 16));
  v37 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v50 = v25;
  v51 = v37;
  LOBYTE(v52) = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v49, 0, (uint64_t)&v50, 0);
  if ((_BYTE)v52)
  {
    v39 = v50;
    v50 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  }
  v40 = v49;
  v49 = 0;
  if (v40)
  {
    IPC::Encoder::~Encoder(v40, v38);
    WTF::fastFree(v41, v42);
  }
  if (v48)
    WTF::RefCounted<WebCore::FormData>::deref(v48);
  return 0;
}

void WebKit::NetworkProcessProxy::dataTaskReceivedChallenge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  __int128 v14;
  CFTypeRef cf;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v13 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v14) = 136315138;
      *(_QWORD *)((char *)&v14 + 4) = "void WebKit::NetworkProcessProxy::dataTaskReceivedChallenge(DataTaskIdentifier, We"
                                      "bCore::AuthenticationChallenge &&, CompletionHandler<void (AuthenticationChallenge"
                                      "Disposition, WebCore::Credential &&)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v13, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 374: Invalid message dispatched %s", (uint8_t *)&v14, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 144) + 98) = 1;
  }
  else
  {
    v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 568), a2);
    if (v7)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v7 + 96) + 16))(*(_QWORD *)(v7 + 96), v7, a3, a4);
    }
    else
    {
      WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v14);
      cf = 0;
      v8 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v8 + 16))(v8, 3, &v14);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      v10 = cf;
      cf = 0;
      if (v10)
        CFRelease(v10);
      v11 = (WTF::StringImpl *)*((_QWORD *)&v14 + 1);
      *((_QWORD *)&v14 + 1) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, v9);
        else
          *(_DWORD *)v11 -= 2;
      }
      v12 = (WTF::StringImpl *)v14;
      *(_QWORD *)&v14 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v9);
        else
          *(_DWORD *)v12 -= 2;
      }
    }
  }
}

void WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  NSObject *v10;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v11 = 136315138;
      v12 = "void WebKit::NetworkProcessProxy::dataTaskWillPerformHTTPRedirection(DataTaskIdentifier, WebCore::ResourceRe"
            "sponse &&, WebCore::ResourceRequest &&, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v10, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 383: Invalid message dispatched %s", (uint8_t *)&v11, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 144) + 98) = 1;
  }
  else
  {
    v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 568), a2);
    if (v9)
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 + 96) + 24))(*(_QWORD *)(v9 + 96), v9, a3, a4, a5);
  }
}

void WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v9 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v10 = 136315138;
      v11 = "void WebKit::NetworkProcessProxy::dataTaskDidReceiveResponse(DataTaskIdentifier, WebCore::ResourceResponse &"
            "&, CompletionHandler<void (BOOL)> &&)";
      _os_log_fault_impl(&dword_196BCC000, v9, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 390: Invalid message dispatched %s", (uint8_t *)&v10, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 144) + 98) = 1;
  }
  else
  {
    v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 568), a2);
    if (v7)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v7 + 96) + 32))(*(_QWORD *)(v7 + 96), v7, a3, a4);
    }
    else
    {
      v8 = *a4;
      *a4 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
}

void WebKit::NetworkProcessProxy::dataTaskDidReceiveData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  int v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v8 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      v9 = 136315138;
      v10 = "void WebKit::NetworkProcessProxy::dataTaskDidReceiveData(DataTaskIdentifier, std::span<const uint8_t>)";
      _os_log_fault_impl(&dword_196BCC000, v8, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 399: Invalid message dispatched %s", (uint8_t *)&v9, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 144) + 98) = 1;
  }
  else
  {
    v7 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*(_QWORD *)(a1 + 568), a2);
    if (v7)
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v7 + 96) + 40))(*(_QWORD *)(v7 + 96), v7, a3, a4);
  }
}

void WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v11 = off_1ECE71C40;
    if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315138;
      v14 = "void WebKit::NetworkProcessProxy::dataTaskDidCompleteWithError(DataTaskIdentifier, WebCore::ResourceError &&)";
      _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 406: Invalid message dispatched %s", buf, 0xCu);
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 144) + 98) = 1;
  }
  else
  {
    v5 = (uint64_t *)(a1 + 568);
    v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 568), &v12);
    v7 = *(_QWORD *)(a1 + 568);
    if (v7)
      v8 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
    else
      v8 = 0;
    if (v8 != v6)
    {
      v9 = v6[1];
      if (v9)
      {
        v6[1] = 0;
        v7 = *v5;
      }
      if (v7)
      {
        v10 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
        if (v10 == v6)
        {
LABEL_15:
          if (v9)
          {
            std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(v9 + 104), 0);
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v9 + 96) + 48))(*(_QWORD *)(v9 + 96), v9, a3);
            CFRelease(*(CFTypeRef *)(v9 + 8));
          }
          return;
        }
      }
      else
      {
        if (!v6)
          goto LABEL_15;
        v10 = 0;
      }
      if (v10 != v6)
        WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v5, v6);
      goto LABEL_15;
    }
  }
}

IPC::Encoder *WebKit::NetworkProcessProxy::cancelDataTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  IPC::Encoder *result;
  WTF *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  IPC::Encoder *v21;

  v18 = a2;
  v5 = (uint64_t *)(a1 + 568);
  v6 = (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 568), &v18);
  v7 = *(_QWORD *)(a1 + 568);
  if (v7)
  {
    v8 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
    if (v8 == v6)
      goto LABEL_8;
  }
  else
  {
    if (!v6)
      goto LABEL_8;
    v8 = 0;
  }
  if (v8 != v6)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v5, v6);
LABEL_8:
  v9 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v9 = 359;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 528) = v9 + 16;
  *(_QWORD *)(v9 + 536) = v9 + 16;
  *(_OWORD *)(v9 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v9 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v9);
  v21 = (IPC::Encoder *)v9;
  v10 = v18;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = v10;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v9, 8uLL, 8) = a3;
  v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v11 = off_1E34DD598;
  v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v19[0] = v11;
  v19[1] = v12;
  v20 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v21, 0, (uint64_t)v19, 1);
  if (v20)
  {
    v14 = v19[0];
    v19[0] = 0;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  result = v21;
  v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 387;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD5C0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 377;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD5E8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 378;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD610;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 429;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD638;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 501;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD660;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void `non-virtual thunk to'WebKit::NetworkProcessProxy::didReceiveMessage(unsigned int **this, unsigned __int8 **a2, IPC::Decoder *a3)
{
  WebKit::NetworkProcessProxy::didReceiveMessage(this - 4, a2, a3);
}

BOOL WebKit::NetworkProcessProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return (IPC::MessageReceiverMap::dispatchSyncMessage((unsigned int **)(a1 + 152), (uint64_t)a2, a3, (uint64_t)a4) & 1) != 0
      || WebKit::NetworkProcessProxy::didReceiveSyncNetworkProcessProxyMessage(a1, a2, a3, a4);
}

BOOL `non-virtual thunk to'WebKit::NetworkProcessProxy::didReceiveSyncMessage(uint64_t a1, unsigned __int8 **a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::NetworkProcessProxy::didReceiveSyncMessage(a1 - 32, a2, a3, a4);
}

unsigned int *WebKit::NetworkProcessProxy::didClose(WebKit::NetworkProcessProxy *this, IPC::Connection *a2)
{
  NSObject *v4;
  _xpc_connection_s *v6;
  int v7;
  WebKit::NetworkProcessProxy *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
  {
    v6 = (_xpc_connection_s *)*((_QWORD *)a2 + 44);
    if (v6)
      LODWORD(v6) = xpc_connection_get_pid(v6);
    v7 = 134218240;
    v8 = this;
    v9 = 1024;
    v10 = (int)v6;
    _os_log_error_impl(&dword_196BCC000, v4, OS_LOG_TYPE_ERROR, "%p - NetworkProcessProxy::didClose (Network Process %d crash)", (uint8_t *)&v7, 0x12u);
  }
  return WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)this, (void *)5);
}

unsigned int *`non-virtual thunk to'WebKit::NetworkProcessProxy::didClose(WebKit::NetworkProcessProxy *this, IPC::Connection *a2)
{
  return WebKit::NetworkProcessProxy::didClose((WebKit::NetworkProcessProxy *)((char *)this - 32), a2);
}

unsigned int *WebKit::NetworkProcessProxy::didReceiveInvalidMessage(WebKit::NetworkProcessProxy *a1, uint64_t a2, unsigned int a3)
{
  WebKit::AuxiliaryProcessProxy::logInvalidMessage(a1, a2, a3);
  WebKit::NetworkProcessProxy::terminate(a1);
  return WebKit::NetworkProcessProxy::networkProcessDidTerminate((uint64_t)a1, (void *)5);
}

unsigned int *`non-virtual thunk to'WebKit::NetworkProcessProxy::didReceiveInvalidMessage(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return WebKit::NetworkProcessProxy::didReceiveInvalidMessage((WebKit::NetworkProcessProxy *)(a1 - 32), a2, a3);
}

unsigned int *WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, WebCore::AuthenticationChallengeBase *this, int a6, uint64_t a7)
{
  WebKit *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  void *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  CFTypeRef v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unsigned int *result;
  unsigned int v44;
  unsigned int v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  CFTypeRef cf;
  WebKit *v49;
  WTF *v50;

  v50 = 0;
  v14 = (WebKit *)WebCore::AuthenticationChallengeBase::protectionSpace(this);
  if (*((_BYTE *)v14 + 21) == 7)
  {
    v46 = a2;
    v15 = WebKit::allDataStores(v14);
    v16 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v15, &v46);
    if (v16)
    {
      v17 = v16;
      v18 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
      *v18 = 1;
      v18[1] = 0;
      v19 = v18 + 1;
      v18[2] = 0;
      v46 = (WTF::StringImpl *)v18;
      v20 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = v18;
      v22 = (unsigned int *)v18[1];
      v18[1] = v20;
      if (!v22)
        goto LABEL_47;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v21);
      }
      v20 = *v19;
      if (!*v19)
      {
        v50 = 0;
      }
      else
      {
LABEL_47:
        do
          v25 = __ldaxr((unsigned int *)v20);
        while (__stlxr(v25 + 1, (unsigned int *)v20));
        v26 = (unsigned int *)v50;
        v50 = (WTF *)v20;
        if (v26)
        {
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
          {
            atomic_store(1u, v26);
            WTF::fastFree((WTF *)v26, v21);
          }
        }
      }
      WebKit::WebsiteDataStore::addSecKeyProxyStore(v17, (unint64_t)&v46);
      v30 = v46;
      v46 = 0;
      if (v30)
        WTF::RefCounted<WebKit::SecKeyProxyStore>::deref((uint64_t)v30, v29);
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((unsigned __int8 ***)&v46, *(unsigned __int8 ***)(a1 + 144));
  v31 = API::Object::newObject(0x1D8uLL, 2);
  v49 = WebKit::AuthenticationChallengeProxy::AuthenticationChallengeProxy((WebKit *)v31, (uint64_t)this, a7, (uint64_t *)&v46, (uint64_t *)&v50);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v46);
  if (a3)
  {
    WebKit::WebProcessProxy::webPage(a3, (uint64_t *)&v46);
    v32 = v46;
    if (v46)
    {
      WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy((uint64_t)v46, (uint64_t *)&v49, a6);
      CFRelease(*((CFTypeRef *)v32 + 1));
      if (!v31)
        goto LABEL_38;
LABEL_37:
      CFRelease(*(CFTypeRef *)(v31 + 8));
      goto LABEL_38;
    }
  }
  if (!*(_BYTE *)(a4 + 32))
  {
    v37 = *(_QWORD *)(v31 + 464);
    WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v46);
    cf = 0;
    v39 = *(_QWORD *)(v37 + 16);
    if (v39)
    {
      *(_QWORD *)(v37 + 16) = 0;
      (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v39 + 16))(v39, 3, &v46);
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      v40 = cf;
      cf = 0;
      if (v40)
        CFRelease(v40);
    }
    v41 = v47;
    v47 = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v38);
      else
        *(_DWORD *)v41 -= 2;
    }
    v42 = v46;
    v46 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v38);
      else
        *(_DWORD *)v42 -= 2;
    }
    v49 = 0;
    goto LABEL_37;
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v34 = *(unsigned int **)(a1 + 8);
  if (v34)
  {
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 + 1, v34));
    v31 = (uint64_t)v49;
  }
  v36 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v36 = &off_1E34DD688;
  *(_QWORD *)(v36 + 8) = a1;
  *(_QWORD *)(v36 + 16) = v34;
  *(_QWORD *)(v36 + 24) = a2;
  *(_QWORD *)(v36 + 32) = v31;
  *(_BYTE *)(v36 + 40) = a6;
  v46 = (WTF::StringImpl *)v36;
  WebKit::WebPageProxy::forMostVisibleWebPageIfAny((uint64_t)a2, a4, (uint64_t *)&v46);
  if (v46)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
LABEL_38:
  result = (unsigned int *)v50;
  v50 = 0;
  if (result)
  {
    do
    {
      v44 = __ldaxr(result);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, result));
    if (!v45)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v33);
    }
  }
  return result;
}

void WebKit::NetworkProcessProxy::negotiatedLegacyTLS(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const WTF::StringImpl *v3;
  WebKit::WebPageProxy *v4;
  WebKit::WebPageProxy *v5;

  if (a2)
  {
    WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v5);
    v4 = v5;
    if (v5)
    {
      WebKit::WebPageProxy::negotiatedLegacyTLS(v5, v2, v3);
      CFRelease(*((CFTypeRef *)v4 + 1));
    }
  }
}

void WebKit::NetworkProcessProxy::didNegotiateModernTLS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    WebKit::WebProcessProxy::webPage(a2, &v5);
    v4 = v5;
    if (v5)
    {
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 72) + 232))(*(_QWORD *)(v5 + 72), a3);
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
}

void WebKit::NetworkProcessProxy::didBlockLoadToKnownTracker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    WebKit::WebProcessProxy::webPage(a2, &v5);
    v4 = v5;
    if (v5)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 72) + 120))(*(_QWORD *)(v5 + 72), v5, a3);
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
}

void WebKit::NetworkProcessProxy::triggerBrowsingContextGroupSwitchForNavigation(uint64_t a1, uint64_t a2, uint64_t a3, int a4, WTF::ASCIICaseInsensitiveHash **a5, uint64_t a6, uint64_t *a7)
{
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[12];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v14 = qword_1ECE71668;
  if (os_log_type_enabled((os_log_t)qword_1ECE71668, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v17 = 134219008;
    *(_QWORD *)&v17[4] = a1;
    v18 = 2048;
    v19 = a2;
    v20 = 2048;
    v21 = a3;
    v22 = 1024;
    v23 = a4;
    v24 = 2048;
    v25 = a6;
    _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::triggerBrowsingContextGroupSwitchForNavigation: pageID=%llu, navigationID=%llu, browsingContextGroupSwitchDecision=%u, existingNetworkResourceLoadIdentifierToResume=%llu", v17, 0x30u);
  }
  if (a2 && (WebKit::WebProcessProxy::webPage(a2, (uint64_t *)v17), (v15 = *(_QWORD *)v17) != 0))
  {
    WebKit::WebPageProxy::triggerBrowsingContextGroupSwitchForNavigation(*(uint64_t *)v17, a3, a4, a5, a6, a7);
    CFRelease(*(CFTypeRef *)(v15 + 8));
  }
  else
  {
    v16 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

void `non-virtual thunk to'WebKit::NetworkProcessProxy::didFinishLaunching(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::NetworkProcessProxy::didFinishLaunching(a1 - 24, a2, a3);
}

void WebKit::NetworkProcessProxy::logDiagnosticMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  WTF *v8;
  WTF *v9;

  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v9);
  v8 = v9;
  if (v9)
  {
    WebKit::WebPageProxy::logDiagnosticMessage(v9, a3, a4, a5);
    CFRelease(*((CFTypeRef *)v8 + 1));
  }
}

unsigned int *WebKit::NetworkProcessProxy::terminateWebProcess(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v5 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v5);
  if (result)
  {
    v3 = result + 4;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    WebKit::WebProcessProxy::requestTermination(result, 8);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::terminateUnresponsiveServiceWorkerProcesses(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;

  v6 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v6);
  if (result)
  {
    v3 = result;
    v4 = result + 4;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)result, 1);
    WebKit::WebProcessProxy::requestTermination(v3, 1);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v4);
  }
  return result;
}

void WebKit::NetworkProcessProxy::logDiagnosticMessageWithResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, int a6)
{
  WTF *v10;
  WTF *v11;

  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v11);
  v10 = v11;
  if (v11)
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithResult(v11, a3, a4, a5, a6);
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
}

void WebKit::NetworkProcessProxy::logDiagnosticMessageWithValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v11);
  v10 = v11;
  if (v11)
  {
    WebKit::WebPageProxy::logDiagnosticMessageWithValue(v11, a3, a4, a5, a6);
    CFRelease(*((CFTypeRef *)v10 + 1));
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidSendRequest(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  WTF::RefCountedBase *v9;
  WTF::RefCountedBase *v10;
  uint64_t v11;

  WebKit::WebProcessProxy::webPage(a2, &v11);
  v8 = v11;
  if (v11)
  {
    if (*(_BYTE *)(a5 + 8))
    {
      v9 = *(WTF::RefCountedBase **)a5;
      *(_QWORD *)a5 = 0;
      v10 = v9;
      WebCore::ResourceRequestBase::setHTTPBody();
      if (v10)
        WTF::RefCounted<WebCore::FormData>::deref(v10);
    }
    WebKit::WebPageProxy::resourceLoadDidSendRequest((_QWORD *)v8, a3, a4);
    CFRelease(*(CFTypeRef *)(v8 + 8));
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidPerformHTTPRedirection(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  _QWORD *v9;

  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v9);
  v8 = v9;
  if (v9)
  {
    WebKit::WebPageProxy::resourceLoadDidPerformHTTPRedirection(v9, a3, a4, a5);
    CFRelease((CFTypeRef)v8[1]);
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidReceiveChallenge(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, id *a4)
{
  _QWORD *v6;
  _QWORD *v7;

  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v7);
  v6 = v7;
  if (v7)
  {
    WebKit::WebPageProxy::resourceLoadDidReceiveChallenge(v7, a3, a4);
    CFRelease((CFTypeRef)v6[1]);
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidReceiveResponse(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;

  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v7);
  v6 = v7;
  if (v7)
  {
    WebKit::WebPageProxy::resourceLoadDidReceiveResponse(v7, a3, a4);
    CFRelease((CFTypeRef)v6[1]);
  }
}

void WebKit::NetworkProcessProxy::resourceLoadDidCompleteWithError(uint64_t a1, uint64_t a2, const WebKit::ResourceLoadInfo *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  _QWORD *v9;

  WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v9);
  v8 = v9;
  if (v9)
  {
    WebKit::WebPageProxy::resourceLoadDidCompleteWithError(v9, a3, a4, a5);
    CFRelease((CFTypeRef)v8[1]);
  }
}

uint64_t WebKit::NetworkProcessProxy::didAllowPrivateTokenUsageByThirdPartyForTesting(WebKit *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;

  v8 = a2;
  v6 = WebKit::allDataStores(a1);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6, &v8);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 392) + 120))(*(_QWORD *)(result + 392), a3, a4);
  return result;
}

WTF::StringImpl *WebKit::NetworkProcessProxy::dumpResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t *v6;
  WTF::StringImpl *v7;
  uint64_t v8;

  v8 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v8;
    return (WTF::StringImpl *)WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v7 = 0;
    WTF::CompletionHandler<void ()(WTF::String)>::operator()(a3, &v7);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 386;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD6B0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::isPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 403;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD6D8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::isVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 409;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD700;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 459;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD728;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setPrevalentResourceForDebugMode(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 460;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD750;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setVeryPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 491;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD778;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setLastSeen(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, double a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  double v9;
  uint64_t v10;

  v10 = a2;
  v9 = a5;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = a3;
    v8[2] = (uint64_t *)&v9;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(a1, v8, a4, 0, 0, 1);
  }
  else
  {
    v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 452;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD7A0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::domainIDExistsInDatabase(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  int v8;
  uint64_t v9;

  v9 = a2;
  v8 = a3;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v9;
    v7[1] = (uint64_t *)&v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 383;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  LODWORD(v13) = *(_DWORD *)a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 4uLL, 4) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD7C8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::mergeStatisticForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char a6, char a7, char a8, double a9, double a10, char a11, unsigned int a12, uint64_t *a13)
{
  uint64_t *v14[5];
  char v15;
  double *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;

  v23 = a2;
  v21 = a10;
  v22 = a9;
  v14[0] = &v23;
  v14[1] = a3;
  v14[2] = a4;
  v14[3] = a5;
  v14[4] = (uint64_t *)&v22;
  v15 = a6;
  v16 = &v21;
  v17 = a7;
  v18 = a8;
  v19 = a11;
  v20 = a12;
  return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(a1, v14, a13, 0, 0, 1);
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 414;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD7F0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 401;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,0ul,1ul,2ul,3ul,4ul,5ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD818;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::clearPrevalentResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 364;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD840;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::scheduleCookieBlockingUpdate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v7;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 438;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD868;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::scheduleClearInMemoryAndPersistent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9[2];
  char v10;
  _QWORD v11[2];
  uint64_t v12;

  v12 = a2;
  v11[0] = a3;
  v11[1] = a4;
  v6 = *(_QWORD *)(a1 + 136);
  if (v6 && *(_BYTE *)(v6 + 104) || *(_QWORD *)(a1 + 144))
  {
    v9[0] = &v12;
    v9[1] = v11;
    v10 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(a1, v9, a6, 0, 0, 1);
  }
  else
  {
    v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 437;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD890;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::scheduleStatisticsAndDataRecordsProcessing(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v7;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 439;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD8B8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::statisticsDatabaseHasAllTables(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v7;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 493;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD8E0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::logUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 411;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD908;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::hasHadUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 395;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD930;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 407;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DD958;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::clearUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 368;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD980;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::hasLocalStorage(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 398;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD9A8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setTimeToLiveUserInteraction(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a4;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v9;
    v7[1] = (uint64_t *)&v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 486;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DD9D0;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setNotifyPagesWhenDataRecordsWereScanned(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;

  v9 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7 = &v9;
    v8 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetNotifyPagesWhenDataRecordsWereScanned,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetNotifyPagesWhenDataRecordsWereScanned,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 456;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DD9F8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setResourceLoadStatisticsTimeAdvanceForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a4;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v9;
    v7[1] = (uint64_t *)&v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 473;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DDA20;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setIsRunningResourceLoadStatisticsTest(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;

  v9 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7 = &v9;
    v8 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 451;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDA48;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setSubframeUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 480;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDA70;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::isRegisteredAsRedirectingTo(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 404;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDA98;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::isRegisteredAsSubFrameUnder(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 405;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDAC0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setSubresourceUnderTopFrameDomain(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 481;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDAE8;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::isRegisteredAsSubresourceUnder(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 406;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDB10;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 483;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDB38;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setSubresourceUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 482;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDB60;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectTo(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 489;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDB88;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setTopFrameUniqueRedirectFrom(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v9;
    v8[1] = a3;
    v8[2] = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 488;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDBB0;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::isGrandfathered(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 402;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDBD8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setGrandfathered(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[2];
  char v9;
  uint64_t v10;

  v10 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = a3;
    v9 = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 448;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDC00;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

void WebKit::NetworkProcessProxy::requestStorageAccessConfirm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  WebKit::WebProcessProxy::webPage(a2, &v16);
  v14 = v16;
  if (v16)
  {
    WebKit::WebPageProxy::requestStorageAccessConfirm(v16, a5, a6, a3, a4, a7, (uint64_t)a8);
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  else
  {
    v15 = *a8;
    *a8 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 16))(v15, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
}

uint64_t WebKit::NetworkProcessProxy::getAllStorageAccessEntries(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t *v6;
  uint64_t v7[2];
  uint64_t v8;

  v8 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(a3, v7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 390;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDC28;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 393;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDC50;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a4;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v9;
    v7[1] = (uint64_t *)&v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 443;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DDC78;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setGrandfatheringTime(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a4;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v9;
    v7[1] = (uint64_t *)&v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 449;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DDCA0;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setMaxStatisticsEntries(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 454;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DDCC8;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setMinimumTimeBetweenDataRecordsRemoval(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  double v8;
  uint64_t v9;

  v9 = a2;
  v8 = a4;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v9;
    v7[1] = (uint64_t *)&v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 455;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DDCF0;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setPruneEntriesDownTo(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  int v19;
  uint64_t v20;
  IPC::Encoder *v21;
  WTF *v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  IPC::Encoder *v27;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 469;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v27 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = a2[1];
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v14;
  v15 = *a3;
  *a3 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v16 = &off_1E34DDD18;
  v16[1] = v15;
  v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v25[0] = v16;
  v25[1] = v17;
  v26 = 1;
  v19 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, a5, (uint64_t)v25, a6);
  if (v26)
  {
    v20 = v25[0];
    v25[0] = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = v27;
  v27 = 0;
  if (v21)
  {
    IPC::Encoder::~Encoder(v21, v18);
    WTF::fastFree(v22, v23);
  }
  if (v19)
    return v17;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setShouldClassifyResourcesBeforeDataRecordsRemoval(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;

  v9 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7 = &v9;
    v8 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 475;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDD40;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setResourceLoadStatisticsDebugMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;

  v9 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7 = &v9;
    v8 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 471;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDD68;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::isResourceLoadStatisticsEphemeral(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v7;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 408;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDD90;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

IPC::Encoder *WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = *a3;
    *a3 = 0;
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 430;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v17 = (IPC::Encoder *)v7;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34DDDB8;
    v8[1] = v6;
    v15[0] = v8;
    v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)v15, 1);
    if (v16)
    {
      v10 = v15[0];
      v15[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::resetParametersToDefaultValues(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = *a3;
    *a3 = 0;
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 432;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v17 = (IPC::Encoder *)v7;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34DDDE0;
    v8[1] = v6;
    v15[0] = v8;
    v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)v15, 1);
    if (v16)
    {
      v10 = v15[0];
      v15[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

_QWORD *WebKit::NetworkProcessProxy::logTestingEvent(WebKit *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *result;
  uint64_t v6;

  v6 = a2;
  v4 = WebKit::allDataStores(a1);
  result = (_QWORD *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, &v6);
  if (result)
  {
    result = (_QWORD *)result[34];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, a3);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransfer(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t *v9[6];
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = a2;
  v13 = a5;
  v11 = a7;
  v12 = a6;
  v8 = *(_QWORD *)(result + 136);
  if (v8 && *(_BYTE *)(v8 + 104) || *(_QWORD *)(result + 144))
  {
    v9[0] = &v14;
    v9[1] = a3;
    v9[2] = a4;
    v9[3] = (uint64_t *)&v13;
    v9[4] = &v12;
    v9[5] = &v11;
    v10 = a8;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::DidCommitCrossSiteLoadWithDataTransfer>(result, v9, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::DidCommitCrossSiteLoadWithDataTransfer>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 380;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::NetworkProcessProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  WebKit::WebPageProxy *v3;
  WebKit::WebPageProxy *v4;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2 && *(_BYTE *)(v2 + 104) || *(_QWORD *)(a1 + 144))
  {
    WebKit::WebProcessProxy::webPage(a2, (uint64_t *)&v4);
    v3 = v4;
    if (v4)
    {
      WebKit::WebPageProxy::didCommitCrossSiteLoadWithDataTransferFromPrevalentResource((uint64_t)v4);
      CFRelease(*((CFTypeRef *)v3 + 1));
    }
  }
}

uint64_t WebKit::NetworkProcessProxy::setCrossSiteLoadWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t *v9[3];
  char v10;
  uint64_t v11;

  v11 = a2;
  v6 = *(_QWORD *)(a1 + 136);
  if (v6 && *(_BYTE *)(v6 + 104) || *(_QWORD *)(a1 + 144))
  {
    v9[0] = &v11;
    v9[1] = a3;
    v9[2] = a4;
    v10 = a5;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(a1, v9, a6, 0, 0, 1);
  }
  else
  {
    v8 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 445;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDE08;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

IPC::Encoder *WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = *a3;
    *a3 = 0;
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 431;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v17 = (IPC::Encoder *)v7;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = a2;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34DDE30;
    v8[1] = v6;
    v15[0] = v8;
    v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)v15, 1);
    if (v16)
    {
      v10 = v15[0];
      v15[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::deleteCookiesForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8[2];
  char v9;
  uint64_t v10;

  v10 = a2;
  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8[0] = &v10;
    v8[1] = a3;
    v9 = a4;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(a1, v8, a5, 0, 0, 1);
  }
  else
  {
    v7 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 376;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DDE58;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

WTF::StringImpl **WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(WebKit *a1, WTF::StringImpl **a2, int a3, char a4, uint64_t a5, uint64_t *a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **result;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;

  v18 = a2;
  v10 = WebKit::allDataStores(a1);
  v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v10, &v18);
  if (v11 && a3 && *(_DWORD *)(a5 + 12))
  {
    v12 = v11;
    CFRetain(*(CFTypeRef *)(v11 + 8));
    v13 = *a6;
    *a6 = 0;
    v14 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v14 = &off_1E34DDE80;
    *(_DWORD *)(v14 + 8) = a3;
    *(_QWORD *)(v14 + 16) = v12;
    *(_QWORD *)(v14 + 24) = v13;
    v18 = (WTF::StringImpl **)v14;
    WebKit::WebsiteDataStore::fetchDataForRegistrableDomains(v12, a3, a4, (uint64_t *)a5, (uint64_t *)&v18);
    result = v18;
    if (v18)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*v18 + 1))(v18);
  }
  else
  {
    v18 = 0;
    v16 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v16 + 16))(v16, &v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    result = v18;
    if (v18)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v18, v17);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::hasIsolatedSession(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 397;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDED0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

IPC::Encoder *WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v7 = *a4;
  *a4 = 0;
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 440;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v8, a3);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34DDEF8;
  v9[1] = v7;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)v15, 1);
  if (v16)
  {
    v11 = v15[0];
    v15[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v7 = *a4;
  *a4 = 0;
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 453;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,void>::encode<IPC::Encoder>((IPC::Encoder *)v8, a3);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34DDF20;
  v9[1] = v7;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)v15, 1);
  if (v16)
  {
    v11 = v15[0];
    v15[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v5 = *(_QWORD *)(a1 + 136);
  if (v5 && *(_BYTE *)(v5 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = *a3;
    *a3 = 0;
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 476;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v17 = (IPC::Encoder *)v7;
    *IPC::Encoder::grow((IPC::Encoder *)v7, 1uLL, 1) = a2;
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v8 = &off_1E34DDF48;
    v8[1] = v6;
    v15[0] = v8;
    v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v16 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)v15, 1);
    if (v16)
    {
      v10 = v15[0];
      v15[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  return result;
}

IPC::Encoder *WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD v15[2];
  char v16;
  IPC::Encoder *v17;

  v7 = *a4;
  *a4 = 0;
  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 485;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v17 = (IPC::Encoder *)v8;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E34DDF70;
  v9[1] = v7;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v16 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, 0, (uint64_t)v15, 1);
  if (v16)
  {
    v11 = v15[0];
    v15[0] = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  result = v17;
  v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 477;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDF98;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setFirstPartyWebsiteDataRemovalModeForTesting(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;

  v9 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7 = &v9;
    v8 = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(a1, &v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 447;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  LOBYTE(v13) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDFC0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setToSameSiteStrictCookiesForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    v7[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(a1, v7, a4, 0, 0, 1);
  }
  else
  {
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 487;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DDFE8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 446;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DE010;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 484;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE038;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::setDomainsWithUserInteraction(uint64_t a1, uint64_t *a2)
{
  WTF::StringImpl *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl **v8;
  uint64_t *v9;
  unsigned int v10;

  WebKit::WebProcessPool::allProcessPools((uint64_t)&v9);
  if (v10)
  {
    v4 = v9;
    v5 = 8 * v10;
    do
    {
      v6 = *v4;
      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v8, a2);
      WebKit::WebProcessPool::setDomainsWithUserInteraction(v6, (uint64_t *)&v8);
      if (v8)
        WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v3);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, v3);
}

uint64_t WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;

  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *a3;
  *a3 = 0;
  *(_QWORD *)(v5 + 8) = v6;
  WebKit::WebProcessPool::allProcessPools((uint64_t)&v19);
  if (v20)
  {
    v8 = v19;
    v9 = &v19[v20];
    do
    {
      v10 = *v8;
      WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable(&v18, a2);
      do
        v11 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v11 + 1, (unsigned int *)v5));
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E34DE060;
      v12[1] = v5;
      v17 = v12;
      WebKit::WebProcessPool::setDomainsWithCrossPageStorageAccess(v10, &v18, (uint64_t *)&v17);
      v13 = (uint64_t)v17;
      v17 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v18)
        WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v18, v7);
      ++v8;
    }
    while (v8 != v9);
  }
  result = WTF::Vector<WTF::Ref<WebKit::WebProcessPool,WTF::RawPtrTraits<WebKit::WebProcessPool>,WTF::DefaultRefDerefTraits<WebKit::WebProcessPool>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v19, v7);
  do
  {
    v15 = __ldaxr((unsigned int *)v5);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v5));
  if (!v16)
  {
    atomic_store(1u, (unsigned int *)v5);
    v19 = (uint64_t *)v5;
    return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)&v19);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::setPrivateClickMeasurementDebugMode(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;

  v6 = a2;
  v3 = *(_QWORD *)(result + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(result + 144))
  {
    v4 = &v6;
    v5 = a3;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetPrivateClickMeasurementDebugMode>(result, &v4, 0, 0);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::SetPrivateClickMeasurementDebugMode>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 463;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v9) = *((_BYTE *)a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

WTF::ApproximateTime *WebKit::NetworkProcessProxy::sendProcessWillSuspendImminentlyForTesting(WTF::ApproximateTime *this)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  _BYTE v4[16];
  int v5;
  char v6;

  v1 = (uint64_t)this;
  v2 = *((_QWORD *)this + 17);
  if (v2 && *(_BYTE *)(v2 + 104) || *((_QWORD *)this + 18))
  {
    WTF::ApproximateTime::now(this);
    this = (WTF::ApproximateTime *)WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>(v1, 0, 0, (uint64_t)v4, v3 + 1.0);
    if (v5 != -1)
      return (WTF::ApproximateTime *)((uint64_t (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v6, v4);
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;

  if (*(_QWORD *)(result + 144))
  {
    v9 = result;
    kdebug_trace();
    IPC::Connection::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>(*(_QWORD *)(v9 + 144), a2, a3, a4, a5);
    return kdebug_trace();
  }
  else
  {
    *(_BYTE *)a4 = 1;
    *(_DWORD *)(a4 + 16) = 1;
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 418;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  LOBYTE(a4) = *(_BYTE *)a2;
  *IPC::Encoder::grow((IPC::Encoder *)v12, 1uLL, 1) = a4;
  v13 = **(_QWORD **)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE098;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::sendProcessDidResume(uint64_t result, char a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(result + 136);
  if (v2 && *(_BYTE *)(v2 + 104) || *(_QWORD *)(result + 144))
  {
    v3 = a2 ^ 1;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ProcessDidResume>(result, &v3, 0, 0);
  }
  return result;
}

unsigned int *WTF::WeakHashSet<WebKit::WebsiteDataStore,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebsiteDataStore>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v18;
  int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *v23;
  unsigned int *result;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  WTF *v29;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 <= v6)
    goto LABEL_31;
  v8 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_26;
  v9 = *(_DWORD *)(v8 - 4);
  if (!v9)
  {
LABEL_25:
    *(_DWORD *)(a1 + 8) = 0;
    goto LABEL_28;
  }
  v10 = 0;
  do
  {
    while (1)
    {
      v11 = *(_QWORD *)(v8 + 8 * --v9);
      if ((unint64_t)(v11 + 1) >= 2 && !*(_QWORD *)(v11 + 8))
        break;
      if (!v9)
        goto LABEL_14;
    }
    *(_QWORD *)(v8 + 8 * v9) = 0;
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      WTF::fastFree((WTF *)v11, a2);
    }
    *(_QWORD *)(v8 + 8 * v9) = -1;
    ++v10;
  }
  while (v9);
LABEL_14:
  v8 = *(_QWORD *)a1;
  if (v10)
  {
    *(_DWORD *)(v8 - 16) += v10;
    v14 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v10;
    v8 = *(_QWORD *)a1;
  }
  if (!v8)
  {
LABEL_26:
    v18 = 0;
    *(_DWORD *)(a1 + 8) = 0;
LABEL_29:
    v19 = v18;
    goto LABEL_30;
  }
  v16 = *(_DWORD *)(v8 - 4);
  if (v16 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v16)
    goto LABEL_25;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
  v8 = *(_QWORD *)a1;
  *(_DWORD *)(a1 + 8) = 0;
  if (!v8)
  {
    v18 = 0;
    goto LABEL_29;
  }
LABEL_28:
  v18 = *(_DWORD *)(v8 - 12);
  v19 = 0x7FFFFFFF;
  if (v18 < 0x7FFFFFFF)
    goto LABEL_29;
LABEL_30:
  *(_DWORD *)(a1 + 12) = 2 * v19;
LABEL_31:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 4, (uint64_t)a2);
  v20 = (unsigned int *)*((_QWORD *)a2 + 2);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 + 1, v20));
  do
    v22 = __ldaxr(v20);
  while (__stlxr(v22 + 1, v20));
  v29 = (WTF *)v20;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v29, a3);
  result = (unsigned int *)v29;
  v29 = 0;
  if (result)
  {
    do
    {
      v27 = __ldaxr(result);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, result));
    if (!v28)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v23);
    }
  }
  if (v20)
  {
    do
    {
      v25 = __ldaxr(v20);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v20));
    if (!v26)
    {
      atomic_store(1u, v20);
      return (unsigned int *)WTF::fastFree((WTF *)v20, v23);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::AddWebsiteDataStore>(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 354;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WebKit::WebsiteDataStoreParameters,void>::encode((IPC::Encoder *)v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::NetworkProcessProxy::removeSession(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  void *v12;
  WTF::StringImpl *v13;
  IPC::Encoder *v14;
  WTF *v15;
  void *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t result;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  WTF::StringImpl *v24[2];
  char v25;
  IPC::Encoder *v26;

  v6 = (_QWORD **)(a1 + 536);
  WTF::WeakHashSet<WebKit::WebEditCommandProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebEditCommandProxy>(a1 + 536, a2);
  v7 = *(_QWORD *)(a1 + 136);
  if (v7 && *(_BYTE *)(v7 + 104) || *(_QWORD *)(a1 + 144))
  {
    v8 = a2[3];
    v9 = *a3;
    *a3 = 0;
    v10 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v10 = 379;
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 528) = v10 + 16;
    *(_QWORD *)(v10 + 536) = v10 + 16;
    *(_OWORD *)(v10 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v10 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v10);
    v26 = (IPC::Encoder *)v10;
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v10, 8uLL, 8) = v8;
    v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v11 = &off_1E34DE0C0;
    *((_QWORD *)v11 + 1) = v9;
    v24[0] = v11;
    v24[1] = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v25 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, 0, (uint64_t)v24, 1);
    if (v25)
    {
      v13 = v24[0];
      v24[0] = 0;
      if (v13)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = v26;
    v26 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v12);
      WTF::fastFree(v15, v16);
    }
  }
  v17 = *a3;
  if (*a3)
  {
    v24[0] = 0;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v17 + 16))(v17, v24);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  result = WTF::WeakHashSet<WebKit::ProcessThrottlerActivity,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::isEmptyIgnoringNullReferences(v6);
  if ((_DWORD)result)
  {
    {
      result = WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess;
      WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
      if (result)
      {
        do
        {
          v22 = __ldaxr((unsigned int *)result);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, (unsigned int *)result));
        if (!v23)
        {
          atomic_store(1u, (unsigned int *)result);
          return WTF::fastFree((WTF *)result, v21);
        }
      }
    }
    else
    {
      WebKit::NetworkProcessProxy::defaultNetworkProcess(void)::networkProcess = 0;
    }
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::contentExtensionRules(unsigned int *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *result;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unsigned int *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  uint64_t *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  WTF::StringImpl *v45;
  __int128 v46;
  __int128 v47;

  v38 = a2;
  v39 = a2;
  {
    WebKit::webUserContentControllerProxies(void)::proxies = 0;
  }
  v3 = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::webUserContentControllerProxies(void)::proxies, &v39);
  if (!v3)
  {
    v36 = 0;
    v37 = 0;
LABEL_34:
    v39 = (WTF::StringImpl *)&v38;
    v40 = &v36;
    WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::AddContentRuleLists>((uint64_t)a1, (uint64_t **)&v39, 0, 0);
    return (unsigned int *)WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v35);
  }
  v4 = v3;
  WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::WebPageProxy>((uint64_t)(a1 + 118), v3, (uint64_t)&v39);
  result = WTF::WeakHashSet<WebKit::FrameLoadStateObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::FrameLoadStateObserver>((uint64_t)(v4 + 22), a1, (uint64_t)&v39);
  v8 = *((_QWORD *)v4 + 13);
  v7 = (_QWORD **)(v4 + 26);
  v6 = v8;
  v36 = 0;
  v37 = 0;
  if (!v8 || (v9 = *(unsigned int *)(v6 - 12), !(_DWORD)v9))
  {
LABEL_8:
    v10 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::AttributedString::AttributeValue>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::AttributedString::AttributeValue,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::AttributedString::AttributeValue>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v7);
    v11 = v10;
    v13 = v12;
    if (*v7)
      v14 = (uint64_t)&(*v7)[7 * *((unsigned int *)*v7 - 1)];
    else
      v14 = 0;
    if ((_QWORD *)v14 != v10)
    {
      do
      {
        v15 = *(_QWORD *)(v11[1] + 16);
        v16 = *(WTF::StringImpl **)(v15 + 16);
        if (v16)
          *(_DWORD *)v16 += 2;
        v39 = v16;
        v17 = *(unsigned int **)(v15 + 24);
        if (v17)
        {
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 + 1, v17));
        }
        v40 = (uint64_t *)v17;
        v20 = *(_OWORD *)(v15 + 32);
        v19 = *(_OWORD *)(v15 + 48);
        v21 = *(_OWORD *)(v15 + 80);
        v43 = *(_OWORD *)(v15 + 64);
        v44 = v21;
        v41 = v20;
        v42 = v19;
        v22 = (WTF::StringImpl *)v11[2];
        if (v22)
          *(_DWORD *)v22 += 2;
        v23 = v39;
        v45 = v22;
        v24 = *(_OWORD *)(v11 + 5);
        v46 = *(_OWORD *)(v11 + 3);
        v47 = v24;
        v25 = HIDWORD(v37);
        v26 = v36 + 120 * HIDWORD(v37);
        v39 = 0;
        *(_QWORD *)v26 = v23;
        v27 = v40;
        v40 = 0;
        *(_QWORD *)(v26 + 8) = v27;
        v28 = v41;
        v29 = v42;
        v30 = v44;
        *(_OWORD *)(v26 + 48) = v43;
        *(_OWORD *)(v26 + 64) = v30;
        *(_OWORD *)(v26 + 16) = v28;
        *(_OWORD *)(v26 + 32) = v29;
        WTF::URL::URL(v26 + 80, (uint64_t *)&v45);
        HIDWORD(v37) = v25 + 1;
        v32 = v45;
        v45 = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v31);
          else
            *(_DWORD *)v32 -= 2;
        }
        v33 = (unsigned int *)v40;
        v40 = 0;
        if (v33)
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v33);
        v34 = v39;
        v39 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v31);
          else
            *(_DWORD *)v34 -= 2;
        }
        while (1)
        {
          v11 += 7;
          if (v11 == v13)
            break;
          if ((unint64_t)(*v11 + 1) > 1)
            goto LABEL_33;
        }
        v11 = v13;
LABEL_33:
        ;
      }
      while (v11 != (_QWORD *)v14);
    }
    goto LABEL_34;
  }
  if (v9 < 0x2222223)
  {
    LODWORD(v37) = 120 * (int)v9 / 0x78u;
    v36 = WTF::fastMalloc((WTF *)(120 * v9));
    goto LABEL_8;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::AddContentRuleLists>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 281;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::VectorArgumentCoder<false,std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebKit::WebCompiledContentRuleListData,WTF::URL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v8, (uint64_t)a2[1]);
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::NetworkProcessProxy::didDestroyWebUserContentControllerProxy(WebKit::NetworkProcessProxy *this, WebKit::WebUserContentControllerProxy *a2)
{
  uint64_t v5;
  uint64_t *v6;

  v5 = *((_QWORD *)a2 + 4);
  v6 = &v5;
  WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::Remove>((uint64_t)this, &v6, 0, 0);
  return WTF::WeakHashSet<WebKit::WebPageProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::WebPageProxy>((uint64_t)this + 472, a2);
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkContentRuleListManager::Remove>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 282;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void WebKit::NetworkProcessProxy::registerRemoteWorkerClientProcess(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  NSObject *v17;
  _BYTE v18[12];
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE71B68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B68, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "shared";
    *(_DWORD *)v18 = 136446722;
    if (a2 == 1)
      v8 = "service";
    *(_QWORD *)&v18[4] = v8;
    v19 = 2048;
    v20 = a3;
    v21 = 2048;
    v22 = a4;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::registerRemoteWorkerClientProcess: workerType=%{public}s, clientProcessIdentifier=%llu, remoteWorkerProcessIdentifier=%llu", v18, 0x20u);
  }
  *(_QWORD *)v18 = a3;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v18);
  v10 = v9;
  if (v9)
  {
    v11 = (unsigned int *)(v9 + 16);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)v18 = a4;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v18);
  v14 = v13;
  if (v13)
  {
    v15 = (unsigned int *)(v13 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    if (v10)
    {
      WebKit::WebProcessProxy::registerRemoteWorkerClientProcess(v13, a2, v10);
      goto LABEL_19;
    }
  }
  v17 = qword_1ECE71B68;
  if (!os_log_type_enabled((os_log_t)qword_1ECE71B68, OS_LOG_TYPE_ERROR))
  {
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  *(_DWORD *)v18 = 134218240;
  *(_QWORD *)&v18[4] = v10;
  v19 = 2048;
  v20 = v14;
  _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "NetworkProcessProxy::registerRemoteWorkerClientProcess: Could not look up one of the processes (clientWebProcess=%p, remoteWorkerProcess=%p)", v18, 0x16u);
  if (v14)
LABEL_19:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
LABEL_20:
  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
}

void WebKit::NetworkProcessProxy::unregisterRemoteWorkerClientProcess(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  NSObject *v17;
  _BYTE v18[12];
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = qword_1ECE71B68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71B68, OS_LOG_TYPE_DEFAULT))
  {
    v8 = "shared";
    *(_DWORD *)v18 = 136446722;
    if (a2 == 1)
      v8 = "service";
    *(_QWORD *)&v18[4] = v8;
    v19 = 2048;
    v20 = a3;
    v21 = 2048;
    v22 = a4;
    _os_log_impl(&dword_196BCC000, v7, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::unregisterRemoteWorkerClientProcess: workerType=%{public}s, clientProcessIdentifier=%llu, remoteWorkerProcessIdentifier=%llu", v18, 0x20u);
  }
  *(_QWORD *)v18 = a3;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v18);
  v10 = v9;
  if (v9)
  {
    v11 = (unsigned int *)(v9 + 16);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  *(_QWORD *)v18 = a4;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  v13 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v18);
  v14 = v13;
  if (v13)
  {
    v15 = (unsigned int *)(v13 + 16);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    if (v10)
    {
      WebKit::WebProcessProxy::unregisterRemoteWorkerClientProcess(v13, a2, (_QWORD *)v10);
      goto LABEL_19;
    }
  }
  v17 = qword_1ECE71B68;
  if (!os_log_type_enabled((os_log_t)qword_1ECE71B68, OS_LOG_TYPE_ERROR))
  {
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  *(_DWORD *)v18 = 134218240;
  *(_QWORD *)&v18[4] = v10;
  v19 = 2048;
  v20 = v14;
  _os_log_error_impl(&dword_196BCC000, v17, OS_LOG_TYPE_ERROR, "NetworkProcessProxy::unregisterRemoteWorkerClientProcess: Could not look up one of the processes (clientWebProcess=%p, remoteWorkerProcess=%p)", v18, 0x16u);
  if (v14)
LABEL_19:
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 16));
LABEL_20:
  if (v10)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v10 + 16));
}

unsigned int *WebKit::NetworkProcessProxy::remoteWorkerContextConnectionNoLongerNeeded(uint64_t a1, char a2, uint64_t a3)
{
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v7 = a3;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v7);
  if (result)
  {
    v5 = result + 4;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    WebKit::WebProcessProxy::disableRemoteWorkers((uint64_t)result, a2);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5);
  }
  return result;
}

void WebKit::NetworkProcessProxy::establishRemoteWorkerContextConnectionToNetworkProcess(uint64_t a1, WebKit *a2, const WTF::StringImpl **a3, WebKit::WebsiteDataStore *a4, char a5, _OWORD *a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  _OWORD v9[3];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8 = a6[1];
  v9[0] = *a6;
  v9[1] = v8;
  v9[2] = a6[2];
  WebKit::WebProcessPool::establishRemoteWorkerContextConnectionToNetworkProcess(a2, a3, a4, a5, (uint64_t)v9, a7, a8);
}

unsigned int *WebKit::NetworkProcessProxy::startServiceWorkerBackgroundProcessing(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v5 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v5);
  if (result)
  {
    v3 = result + 4;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    WebKit::WebProcessProxy::startServiceWorkerBackgroundProcessing((WebKit::WebProcessProxy *)result);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::endServiceWorkerBackgroundProcessing(uint64_t a1, uint64_t a2)
{
  unsigned int *result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v5 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, &v5);
  if (result)
  {
    v3 = result + 4;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    WebKit::WebProcessProxy::endServiceWorkerBackgroundProcessing((WebKit::WebProcessProxy *)result);
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v3);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::requestBackgroundFetchPermission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  NSObject *v8;
  _BOOL8 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint8_t v14[24];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v8 = qword_1ECE71848;
  v9 = os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    *(_DWORD *)v14 = 134217984;
    *(_QWORD *)&v14[4] = a1;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::requestBackgroundFetchPermission", v14, 0xCu);
  }
  *(_QWORD *)v14 = a2;
  v10 = WebKit::allDataStores((WebKit *)v9);
  v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v10, v14);
  if (v11)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v11 + 392) + 96))(*(_QWORD *)(v11 + 392), a3, a3 + 32, a4);
  v13 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
}

uint64_t WebKit::NetworkProcessProxy::getAllBackgroundFetchIdentifiers(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v7[0] = &v8;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(a1, v7, a3, 0, 0, 1);
  }
  else
  {
    v7[0] = 0;
    v7[1] = 0;
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v5 + 16))(v5, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 389;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE0E8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::getBackgroundFetchState(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t *v9[19];
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v4 = *(_QWORD *)(a1 + 136);
  if (v4 && *(_BYTE *)(v4 + 104) || *(_QWORD *)(a1 + 144))
  {
    v9[0] = &v8;
    v9[1] = a3;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(a1, v9, a4, 0, 0, 1);
  }
  else
  {
    LOBYTE(v9[0]) = 0;
    v10 = 0;
    v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v6 + 16))(v6, v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v7);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 391;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE110;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 351;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE138;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 416;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE160;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 435;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE188;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 369;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE1B0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::notifyBackgroundFetchChange(WebKit *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;

  v8 = a2;
  v6 = WebKit::allDataStores(a1);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v6, &v8);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(result + 392) + 104))(*(_QWORD *)(result + 392), a3, a4);
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::increaseQuota(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  NSObject *v16;
  _BOOL8 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *result;
  unsigned int v28;
  unsigned int v29;
  uint64_t v32;
  char v33;
  uint64_t v34;
  WTF *v35;
  uint64_t v36;
  _BYTE v37[24];
  int v38;
  _BYTE v39[24];
  int v40;
  uint64_t v41;
  _BYTE buf[24];
  int v43;
  _BYTE v44[24];
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v34 = a1;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 8), a1);
  v12 = *(unsigned int **)(a1 + 8);
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v35 = (WTF *)v12;
  v36 = a2;
  v37[0] = 0;
  v38 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v37, a3);
  v39[0] = 0;
  v40 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v39, a3 + 32);
  v41 = a4;
  v14 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v14 = &off_1E34DE250;
  *(_QWORD *)(v14 + 8) = v34;
  v15 = v35;
  v35 = 0;
  *(_QWORD *)(v14 + 16) = v15;
  *(_QWORD *)(v14 + 24) = v36;
  *(_BYTE *)(v14 + 32) = 0;
  *(_DWORD *)(v14 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v14 + 32, (uint64_t)v37);
  *(_BYTE *)(v14 + 64) = 0;
  *(_DWORD *)(v14 + 88) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v14 + 64, (uint64_t)v39);
  *(_QWORD *)(v14 + 96) = v41;
  v16 = qword_1ECE718E8;
  v17 = os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT);
  if (v17)
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_196BCC000, v16, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::requestStorageSpace", buf, 0xCu);
  }
  *(_QWORD *)buf = a2;
  v18 = WebKit::allDataStores((WebKit *)v17);
  v19 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v18, buf);
  if (v19)
  {
    v20 = *(_QWORD *)(v19 + 392);
    *(_QWORD *)buf = a2;
    buf[8] = 0;
    v43 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)&buf[8], a3);
    v44[0] = 0;
    v45 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v44, a3 + 32);
    *(_QWORD *)&v46 = a5;
    *((_QWORD *)&v46 + 1) = a6;
    v47 = a7;
    v48 = v14;
    v21 = WTF::fastMalloc((WTF *)0x70);
    *(_QWORD *)v21 = &off_1E34DE1D8;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)buf;
    *(_BYTE *)(v21 + 16) = 0;
    *(_DWORD *)(v21 + 40) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v21 + 16, (uint64_t)&buf[8]);
    *(_BYTE *)(v21 + 48) = 0;
    *(_DWORD *)(v21 + 72) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v21 + 48, (uint64_t)v44);
    v22 = v46;
    *(_QWORD *)(v21 + 96) = v47;
    *(_OWORD *)(v21 + 80) = v22;
    v23 = v48;
    v48 = 0;
    *(_QWORD *)(v21 + 104) = v23;
    v32 = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v20 + 16))(v20, a3, a3 + 32, a5, a6, a7, &v32);
    v25 = v32;
    v32 = 0;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v26 = v48;
    v48 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (v45 != -1)
      ((void (*)(char *, _BYTE *))off_1E34DD428[v45])(&v33, v44);
    v45 = -1;
    if (v43 != -1)
      ((void (*)(char *, _BYTE *))off_1E34DD428[v43])(&v33, &buf[8]);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v14 + 16))(v14, 0, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (v40 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34DD428[v40])(buf, v39);
  v40 = -1;
  if (v38 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34DD428[v38])(buf, v37);
  v38 = -1;
  result = (unsigned int *)v35;
  v35 = 0;
  if (result)
  {
    do
    {
      v28 = __ldaxr(result);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, result));
    if (!v29)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v24);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::RegisterScheme>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 104;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::UnregisterScheme>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 105;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *WebKit::NetworkProcessProxy::setWebProcessHasUploads(unsigned int *result, uint64_t a2, char a3)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  NSObject *v8;
  pid_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unsigned int v62;
  unsigned int v63;
  NSObject *v65;
  void *v66;
  int v67;
  uint64_t v68;
  NSObject *v69;
  void *v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint8_t buf[8];
  uint64_t v75;

  v4 = result;
  v75 = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) != 0)
  {
    *(_QWORD *)buf = a2;
    {
      WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
    }
    result = (unsigned int *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, buf);
    if (result)
    {
      v5 = result;
      v6 = result + 4;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
      if (*((_BYTE *)v4 + 520))
        goto LABEL_38;
      v8 = qword_1ECE71640;
      if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: The number of uploads in progress is now greater than 0. Taking Networking and UI process assertions.", buf, 2u);
      }
      v9 = getpid();
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v10 = *(WTF::StringImpl **)buf;
      v72 = 0;
      v73 = *(WTF::StringImpl **)buf;
      v11 = WTF::fastMalloc((WTF *)0xB0);
      v12 = WebKit::ProcessAssertion::ProcessAssertion(v11, v9, (_DWORD **)&v73, 2, MEMORY[0x1E0CBF738]);
      WebKit::ProcessAssertion::acquireAsync(v12, &v72);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = *(WTF::StringImpl **)buf;
      v71 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      v14 = WTF::fastMalloc((WTF *)0xB0);
      v15 = WebKit::ProcessAssertion::ProcessAssertion(v14, v4, (_DWORD **)&v71, 2);
      WebKit::ProcessAssertion::acquireAsync(v15, (uint64_t *)buf);
      if (*((_BYTE *)v4 + 520))
      {
        v17 = *((_QWORD *)v4 + 62);
        *((_QWORD *)v4 + 62) = v11;
        if (v17)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v17 + 8), v16);
        v18 = *((_QWORD *)v4 + 63);
        *((_QWORD *)v4 + 63) = v14;
        if (v18)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v18 + 8), v16);
        v19 = *((_QWORD *)v4 + 64);
        *((_QWORD *)v4 + 64) = 0;
        if (v19)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v19, v16);
      }
      else
      {
        *((_QWORD *)v4 + 62) = v11;
        *((_QWORD *)v4 + 63) = v14;
        *((_QWORD *)v4 + 64) = 0;
        *((_BYTE *)v4 + 520) = 1;
      }
      v28 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v28)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v28 + 8))(v28);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v16);
        else
          *(_DWORD *)v13 -= 2;
      }
      v29 = v72;
      v72 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v16);
        else
          *(_DWORD *)v10 -= 2;
      }
      if (*((_BYTE *)v4 + 520))
      {
LABEL_38:
        v30 = (uint64_t *)(v4 + 128);
        v31 = *((_QWORD *)v4 + 64);
        if (v31
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand((uint64_t *)v4 + 64),
              (v31 = *v30) != 0))
        {
          v32 = *(_DWORD *)(v31 - 8);
        }
        else
        {
          v32 = 0;
        }
        v33 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
        v34 = 9 * ((v33 + ~(v33 << 13)) ^ ((v33 + ~(v33 << 13)) >> 8));
        v35 = (v34 ^ (v34 >> 15)) + ~((v34 ^ (v34 >> 15)) << 27);
        v36 = v32 & ((v35 >> 31) ^ v35);
        v37 = (_QWORD *)(v31 + 16 * v36);
        v38 = *v37;
        if (*v37)
        {
          v39 = 0;
          v40 = 1;
          while (v38 != a2)
          {
            if (v38 == -1)
              v39 = v37;
            v36 = (v36 + v40) & v32;
            v37 = (_QWORD *)(v31 + 16 * v36);
            v38 = *v37;
            ++v40;
            if (!*v37)
            {
              if (v39)
              {
                *v39 = 0;
                v39[1] = 0;
                --*(_DWORD *)(*v30 - 16);
                v37 = v39;
              }
              goto LABEL_49;
            }
          }
          return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
        }
LABEL_49:
        *v37 = a2;
        v41 = qword_1ECE71640;
        if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
        {
          v42 = *((_QWORD *)v5 + 17);
          if (v42)
            LODWORD(v42) = *(_DWORD *)(v42 + 108);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v42;
          _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: Taking upload assertion on behalf of WebProcess with PID %d", buf, 8u);
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v73 = 0;
        v43 = WTF::fastMalloc((WTF *)0xB0);
        v44 = WebKit::ProcessAssertion::ProcessAssertion(v43, v5, (_DWORD **)buf, 2);
        WebKit::ProcessAssertion::acquireAsync(v44, (uint64_t *)&v73);
        v46 = v73;
        v73 = 0;
        if (v46)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v46 + 8))(v46);
        v47 = *(WTF::StringImpl **)buf;
        *(_QWORD *)buf = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v45);
          else
            *(_DWORD *)v47 -= 2;
        }
        v48 = v37[1];
        v37[1] = v43;
        if (v48)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v48 + 8), v45);
        v49 = *v30;
        if (*v30)
          v50 = *(_DWORD *)(v49 - 12) + 1;
        else
          v50 = 1;
        *(_DWORD *)(v49 - 12) = v50;
        v51 = *v30;
        if (*v30)
          v52 = *(_DWORD *)(v51 - 12);
        else
          v52 = 0;
        v53 = (*(_DWORD *)(v51 - 16) + v52);
        v54 = *(unsigned int *)(v51 - 4);
        if (v54 > 0x400)
        {
          if (v54 > 2 * v53)
            return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
        }
        else if (3 * v54 > 4 * v53)
        {
          return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
        }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v30);
        return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v6);
      }
LABEL_100:
      __break(1u);
    }
  }
  else if (*((_BYTE *)result + 520))
  {
    v20 = *((_QWORD *)result + 64);
    if (v20)
    {
      v21 = *(_DWORD *)(v20 - 8);
      v22 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
      v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
      v25 = v21 & ((v24 >> 31) ^ v24);
      v26 = *(_QWORD *)(v20 + 16 * v25);
      if (v26 != a2)
      {
        v27 = 1;
        while (v26)
        {
          v25 = ((_DWORD)v25 + v27) & v21;
          v26 = *(_QWORD *)(v20 + 16 * v25);
          ++v27;
          if (v26 == a2)
            goto LABEL_74;
        }
        v25 = *(unsigned int *)(v20 - 4);
      }
LABEL_74:
      if (v25 != *(_DWORD *)(v20 - 4))
      {
        v55 = (uint64_t *)(result + 128);
        v56 = (_QWORD *)(v20 + 16 * v25);
        v57 = v56[1];
        v56[1] = 0;
        v58 = (_QWORD *)*((_QWORD *)result + 64);
        if (!v58 || (v58 += 2 * *((unsigned int *)v58 - 1), v58 != v56))
        {
          if (v58 != v56)
          {
            *v56 = -1;
            v56[1] = 0;
            ++*(_DWORD *)(*v55 - 16);
            v59 = *v55;
            v60 = *v55 ? *(_DWORD *)(v59 - 12) - 1 : -1;
            *(_DWORD *)(v59 - 12) = v60;
            v61 = *v55;
            if (*v55)
            {
              v62 = 6 * *(_DWORD *)(v61 - 12);
              v63 = *(_DWORD *)(v61 - 4);
              if (v62 < v63 && v63 >= 9)
                result = (unsigned int *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash((uint64_t *)result + 64, v63 >> 1);
            }
          }
        }
        if (v57)
        {
          v65 = qword_1ECE71640;
          if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
          {
            v67 = *(_DWORD *)(v57 + 20);
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v67;
            _os_log_impl(&dword_196BCC000, v65, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: Releasing upload assertion on behalf of WebProcess with PID %d", buf, 8u);
          }
          if (!*((_BYTE *)v4 + 520))
            goto LABEL_100;
          if (!*v55 || !*(_DWORD *)(*v55 - 12))
          {
            v68 = (uint64_t)(v4 + 124);
            v69 = qword_1ECE71640;
            if (os_log_type_enabled((os_log_t)qword_1ECE71640, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_196BCC000, v69, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::setWebProcessHasUploads: The number of uploads in progress is now zero. Releasing Networking and UI process assertions.", buf, 2u);
            }
            std::__optional_destruct_base<WebKit::NetworkProcessProxy::UploadActivity,false>::reset[abi:sn180100](v68, v70);
          }
          return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v57 + 8), v66);
        }
      }
    }
  }
  return result;
}

void WebKit::NetworkProcessProxy::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  void *v13;
  int v14;
  uint64_t *v15;
  IPC::Encoder *v16;
  WTF *v17;
  void *v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::ResourceRequestBase *v26;
  char v27;
  __int16 v28;
  uint64_t *v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  IPC::Encoder *v35;
  uint64_t v36;
  char v37;

  WebKit::WebProcessProxy::webPage(a2, &v32);
  v4 = v32;
  if (!v32)
  {
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    return;
  }
  v5 = *(_QWORD *)(v32 + 208);
  if (*(_QWORD *)(v5 + 144))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v32 + 32) + 1896);
    kdebug_trace();
    v7 = *(_QWORD *)(v5 + 144);
    v36 = 0;
    IPC::Connection::createSyncMessageEncoder(3701, v6, &v36, (uint64_t *)&v35);
    IPC::Connection::sendSyncMessage(v7, v36, (uint64_t *)&v35, 2, (uint64_t)&v33, INFINITY);
    v8 = v34;
    if (v34)
    {
      if (v34 == 1)
      {
        v9 = 0;
        LOBYTE(v29) = (_BYTE)v33;
LABEL_13:
        v31 = v8;
        v14 = v8;
LABEL_14:
        ((void (*)(char *, uint64_t **))off_1E34DE078[v14])(&v37, &v33);
        v11 = v9;
LABEL_15:
        v16 = v35;
        v35 = 0;
        if (v16)
        {
          IPC::Encoder::~Encoder(v16, v13);
          WTF::fastFree(v17, v18);
        }
        kdebug_trace();
        goto LABEL_18;
      }
    }
    else
    {
      v12 = IPC::Decoder::decode<std::tuple<BOOL>>(v33);
      if (v12 < 0x100u)
      {
        v9 = 0;
        v11 = 0;
        LOBYTE(v29) = 13;
        v8 = 1;
        v31 = 1;
        v14 = v34;
        if (v34 == -1)
          goto LABEL_15;
        goto LABEL_14;
      }
      if (!v34)
      {
        v9 = v12;
        v15 = v33;
        v33 = 0;
        v29 = v15;
        v30 = v12;
        goto LABEL_13;
      }
    }
    v22 = std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::NetworkProcessProxy::preconnectTo(v22, v23, v24, v25, v26, v27, v28);
    return;
  }
  v11 = 0;
  v8 = 1;
  LOBYTE(v29) = 1;
  v31 = 1;
LABEL_18:
  if (v8)
    v19 = 1;
  else
    v19 = v11 == 0;
  v20 = !v19;
  v21 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v20);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  ((void (*)(uint64_t **, uint64_t **))off_1E34DD438[v8])(&v33, &v29);
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

uint64_t WebKit::NetworkProcessProxy::preconnectTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::ResourceRequestBase *this, char a6, __int16 a7)
{
  uint64_t result;
  uint64_t *v11[4];
  char v12;
  __int16 *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = a3;
  v17 = a2;
  v15 = a4;
  v14 = a7;
  result = WebCore::ResourceRequestBase::url(this);
  if ((*(_BYTE *)(result + 8) & 1) != 0)
  {
    result = WebCore::ResourceRequestBase::url(this);
    if ((*(_BYTE *)(result + 8) & 2) != 0)
    {
      v11[0] = &v17;
      v11[1] = &v16;
      v11[2] = &v15;
      v11[3] = (uint64_t *)this;
      v12 = a6;
      v13 = &v14;
      return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::PreconnectTo>(a1, v11, 0, 0);
    }
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 433;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE278;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 434;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE2A0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::hasAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v7;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 16))(v5, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 396;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE2C8;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::NetworkProcessProxy::clearAppBoundSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v3 = *(_QWORD *)(a1 + 136);
  if (v3 && *(_BYTE *)(v3 + 104) || *(_QWORD *)(a1 + 144))
  {
    v6 = &v7;
    return WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(a1, &v6, a3, 0, 0, 1);
  }
  else
  {
    v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 361;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE2F0;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

WTF::StringImpl **WebKit::NetworkProcessProxy::getAppBoundDomains(WebKit *a1, WTF::StringImpl **a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **result;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;

  v12 = a2;
  v4 = WebKit::allDataStores(a1);
  v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, &v12);
  if (v5)
  {
    v6 = v5;
    v7 = *a3;
    *a3 = 0;
    v8 = WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v8 = &off_1E34DE318;
    *(_QWORD *)(v8 + 8) = v7;
    v12 = (WTF::StringImpl **)v8;
    WebKit::WebsiteDataStore::getAppBoundDomains(v6, (uint64_t *)&v12);
    result = v12;
    if (v12)
      return (WTF::StringImpl **)(*((uint64_t (**)(WTF::StringImpl **))*v12 + 1))(v12);
  }
  else
  {
    v12 = 0;
    v10 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v10 + 16))(v10, &v12);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    result = v12;
    if (v12)
      return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v12, v11);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 498;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, *a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DE340;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  IPC::Encoder *v18;
  WTF *v19;
  void *v20;
  _QWORD v22[2];
  char v23;
  IPC::Encoder *v24;

  v11 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v11 = 363;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 528) = v11 + 16;
  *(_QWORD *)(v11 + 536) = v11 + 16;
  *(_OWORD *)(v11 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v11 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v11);
  v24 = (IPC::Encoder *)v11;
  v12 = *a3;
  *a3 = 0;
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = &off_1E34DE368;
  v13[1] = v12;
  v14 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v22[0] = v13;
  v22[1] = v14;
  v23 = 1;
  v16 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v24, a5, (uint64_t)v22, a6);
  if (v23)
  {
    v17 = v22[0];
    v22[0] = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  v18 = v24;
  v24 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v19, v20);
  }
  if (v16)
    return v14;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 392;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE390;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

WTF::StringImpl **WebKit::NetworkProcessProxy::processPushMessage(WebKit *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  WebKit::WebNotificationManagerProxy *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  char v12;
  WebKit *v13;
  WTF::StringImpl **v14;
  const WTF::StringImpl *v15;
  WTF *v16;
  WTF::StringImpl **v17;
  char v18;
  pid_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  IPC::Encoder *v23;
  WTF::StringImpl *v24;
  WebCore::TimerBase *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  void *v31;
  WTF::StringImpl *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl **result;
  WTF::StringImpl *v38;
  WTF::StringImpl **v39;
  IPC::Encoder *v40;
  WTF::StringImpl *v41[2];
  char v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v41[0] = a2;
  v8 = WebKit::allDataStores(a1);
  v9 = (WebKit::WebNotificationManagerProxy *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, v41);
  if (!v9)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (WebKit::WebNotificationManagerProxy *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)v9 + 49) + 56))(v41);
  v11 = (WTF::StringImpl **)v41[0];
  v39 = (WTF::StringImpl **)v41[0];
  if (!v41[0])
  {
LABEL_6:
    v12 = 1;
    goto LABEL_7;
  }
  if (*((_DWORD *)v41[0] - 3))
    goto LABEL_8;
  v12 = 0;
LABEL_7:
  v13 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v9);
  (*(void (**)(WTF::StringImpl **__return_ptr))(**((_QWORD **)v13 + 4) + 64))(v41);
  v14 = (WTF::StringImpl **)v41[0];
  v41[0] = 0;
  v39 = v14;
  if ((v12 & 1) == 0)
  {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v11, v10);
    if (v41[0])
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v41[0], v10);
  }
LABEL_8:
  WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)(a3 + 32), v10);
  WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)v41);
  if (v43 != -1)
    ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34DD428[v43])(&v40, v41);
  v16 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)&v39, &v38, v15);
  v17 = v39;
  if (v39)
    v17 = &v39[2 * *((unsigned int *)v39 - 1)];
  if (v17 == (WTF::StringImpl **)v16)
    v18 = 2;
  else
    v18 = *((_BYTE *)v16 + 8);
  v19 = getpid();
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v40 = 0;
  v20 = WTF::fastMalloc((WTF *)0xB0);
  v21 = WebKit::ProcessAssertion::ProcessAssertion(v20, v19, (_DWORD **)v41, 2, MEMORY[0x1E0CBF738]);
  WebKit::ProcessAssertion::acquireAsync(v21, (uint64_t *)&v40);
  v23 = v40;
  v40 = 0;
  if (v23)
    (*(void (**)(IPC::Encoder *))(*(_QWORD *)v23 + 8))(v23);
  v24 = v41[0];
  v41[0] = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v26 = &off_1E34DD458;
  v26[1] = v20;
  WebCore::TimerBase::TimerBase(v25);
  *(_QWORD *)v25 = off_1E34B3740;
  *((_QWORD *)v25 + 6) = v26;
  WebCore::TimerBase::start();
  v27 = *a4;
  *a4 = 0;
  v28 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v28 = 421;
  *(_QWORD *)(v28 + 8) = 0;
  *(_QWORD *)(v28 + 528) = v28 + 16;
  *(_QWORD *)(v28 + 536) = v28 + 16;
  *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v28 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
  v40 = (IPC::Encoder *)v28;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v28, 8uLL, 8) = a2;
  IPC::ArgumentCoder<WebKit::WebPushMessage,void>::encode((IPC::Encoder *)v28, a3);
  *IPC::Encoder::grow((IPC::Encoder *)v28, 1uLL, 1) = v18;
  v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v29 = &off_1E34DE3B8;
  *((_QWORD *)v29 + 1) = v27;
  *((_QWORD *)v29 + 2) = v25;
  v30 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v41[0] = v29;
  v41[1] = v30;
  v42 = 1;
  WebKit::AuxiliaryProcessProxy::sendMessage((uint64_t)a1, &v40, 0, (uint64_t)v41, 1);
  if (v42)
  {
    v32 = v41[0];
    v41[0] = 0;
    if (v32)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v32 + 8))(v32);
  }
  v33 = v40;
  v40 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v31);
    WTF::fastFree(v34, v35);
  }
  v36 = v38;
  v38 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v31);
    else
      *(_DWORD *)v36 -= 2;
  }
  result = v39;
  if (v39)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v39, (WTF::StringImpl *)v31);
  return result;
}

uint64_t WebKit::NetworkProcessProxy::processNotificationEvent(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  pid_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  IPC::Encoder *v12;
  WTF::StringImpl *v13;
  WebCore::TimerBase *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  void *v20;
  WTF::StringImpl *v21;
  uint64_t result;
  WTF *v23;
  void *v24;
  WTF::StringImpl *v25[2];
  char v26;
  IPC::Encoder *v27;

  if (*a4)
  {
    v8 = getpid();
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v27 = 0;
    v9 = WTF::fastMalloc((WTF *)0xB0);
    v10 = WebKit::ProcessAssertion::ProcessAssertion(v9, v8, (_DWORD **)v25, 2, MEMORY[0x1E0CBF738]);
    WebKit::ProcessAssertion::acquireAsync(v10, (uint64_t *)&v27);
    v12 = v27;
    v27 = 0;
    if (v12)
      (*(void (**)(IPC::Encoder *))(*(_QWORD *)v12 + 8))(v12);
    v13 = v25[0];
    v25[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v11);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = (WebCore::TimerBase *)WTF::fastMalloc((WTF *)0x38);
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v15 = &off_1E34DD480;
    v15[1] = v9;
    WebCore::TimerBase::TimerBase(v14);
    *(_QWORD *)v14 = off_1E34B3740;
    *((_QWORD *)v14 + 6) = v15;
    WebCore::TimerBase::start();
    v16 = *a4;
    *a4 = 0;
    v17 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v17 = 420;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 528) = v17 + 16;
    *(_QWORD *)(v17 + 536) = v17 + 16;
    *(_OWORD *)(v17 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v17 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v17);
    v27 = (IPC::Encoder *)v17;
    IPC::ArgumentCoder<WebCore::NotificationData,void>::encode((IPC::Encoder *)v17, a2);
    *IPC::Encoder::grow((IPC::Encoder *)v17, 1uLL, 1) = a3;
    v18 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v18 = &off_1E34DE3E0;
    *((_QWORD *)v18 + 1) = v16;
    *((_QWORD *)v18 + 2) = v14;
    v19 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v25[0] = v18;
    v25[1] = v19;
    v26 = 1;
    WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v27, 0, (uint64_t)v25, 1);
    if (v26)
    {
      v21 = v25[0];
      v25[0] = 0;
      if (v21)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v21 + 8))(v21);
    }
    result = (uint64_t)v27;
    v27 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v20);
      return WTF::fastFree(v23, v24);
    }
  }
  else
  {
    result = 1845;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  int v17;
  uint64_t v18;
  IPC::Encoder *v19;
  WTF *v20;
  void *v21;
  _QWORD v23[2];
  char v24;
  IPC::Encoder *v25;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 470;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v25 = (IPC::Encoder *)v12;
  IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v12, a2);
  v13 = *a3;
  *a3 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v14 = &off_1E34DE408;
  v14[1] = v13;
  v15 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v23[0] = v14;
  v23[1] = v15;
  v24 = 1;
  v17 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v25, a5, (uint64_t)v23, a6);
  if (v24)
  {
    v18 = v23[0];
    v23[0] = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = v25;
  v25 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v16);
    WTF::fastFree(v20, v21);
  }
  if (v17)
    return v15;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 427;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode((IPC::Encoder *)v12, (uint64_t)a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE430;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::sendWithAsyncReply<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  IPC::Encoder *v20;
  WTF *v21;
  void *v22;
  _QWORD v24[2];
  char v25;
  IPC::Encoder *v26;

  v12 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v12 = 399;
  *(_QWORD *)(v12 + 8) = a4;
  *(_QWORD *)(v12 + 528) = v12 + 16;
  *(_QWORD *)(v12 + 536) = v12 + 16;
  *(_OWORD *)(v12 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v12 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v12);
  v26 = (IPC::Encoder *)v12;
  v13 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v12, 8uLL, 8) = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2[1]);
  v14 = *a3;
  *a3 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v15 = &off_1E34DE458;
  v15[1] = v14;
  v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v24[0] = v15;
  v24[1] = v16;
  v25 = 1;
  v18 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v26, a5, (uint64_t)v24, a6);
  if (v25)
  {
    v19 = v24[0];
    v24[0] = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  v20 = v26;
  v26 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v17);
    WTF::fastFree(v21, v22);
  }
  if (v18)
    return v16;
  else
    return 0;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::TerminateRemoteWorkerContextConnectionWhenPossible>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 497;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

uint64_t WebKit::NetworkProcessProxy::openWindowFromServiceWorker(WebKit *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t (*v14)(void);
  uint64_t v15;
  _QWORD *v16;
  char v17;

  v16 = (_QWORD *)a2;
  v8 = WebKit::allDataStores(a1);
  v9 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v8, &v16);
  if (v9)
  {
    v10 = v9;
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E34DE480;
    v12 = *a5;
    *a5 = 0;
    v11[1] = v12;
    v16 = v11;
    WebKit::WebsiteDataStore::openWindowFromServiceWorker(v10, a3, a4, (uint64_t *)&v16);
    result = (uint64_t)v16;
    if (!v16)
      return result;
    v14 = *(uint64_t (**)(void))(*v16 + 8);
  }
  else
  {
    LOBYTE(v16) = 0;
    v17 = 0;
    v15 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v15 + 16))(v15, &v16);
    v14 = *(uint64_t (**)(void))(*(_QWORD *)v15 + 8);
  }
  return v14();
}

uint64_t WebKit::NetworkProcessProxy::reportConsoleMessage(WebKit *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  uint64_t result;
  uint64_t v16;

  v16 = a2;
  v14 = WebKit::allDataStores(a1);
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v14, &v16);
  if (result)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(result + 392) + 40))(*(_QWORD *)(result + 392), a3, a4, a5, a6, a7, a8);
  return result;
}

unsigned int *WebKit::NetworkProcessProxy::navigateServiceWorkerClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[2];
  char v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19[0] = *(_QWORD *)(a4 + 16);
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  v11 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v19);
  if (v11)
  {
    v12 = (unsigned int *)(v11 + 16);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = WebKit::WebFrameProxy::webFrame(a2, a3);
    if (v14)
    {
      v15 = *(_OWORD *)(a4 + 16);
      v21[0] = *(_OWORD *)a4;
      v21[1] = v15;
      WebKit::WebFrameProxy::navigateServiceWorkerClient(v14, (uint64_t)v21, a5, a6);
    }
    else
    {
      v16 = *a6;
      *a6 = 0;
      LOBYTE(v19[0]) = 0;
      v20 = 0;
      (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)v16 + 16))(v16, 0, 0, v19);
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v12);
  }
  else
  {
    v18 = *a6;
    *a6 = 0;
    LOBYTE(v19[0]) = 0;
    v20 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD *))(*(_QWORD *)v18 + 16))(v18, 0, 0, v19);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationDidEnterBackground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 357;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::ApplicationWillEnterForeground>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v7 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v7 = 358;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 528) = v7 + 16;
  *(_QWORD *)(v7 + 536) = v7 + 16;
  *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v7 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
  v17 = (IPC::Encoder *)v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v9 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v17, a4, (uint64_t)&v15, 1);
  if (v16)
  {
    v10 = v15;
    v15 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = v17;
  v17 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v8);
    WTF::fastFree(v12, v13);
  }
  return v9;
}

WebKit::WebsiteDataStore *WebKit::NetworkProcessProxy::cookiesDidChange(WebKit *a1, uint64_t a2)
{
  uint64_t *v2;
  WebKit::WebsiteDataStore *result;
  API::HTTPCookieStore *v4;
  uint64_t v5;

  v5 = a2;
  v2 = WebKit::allDataStores(a1);
  result = (WebKit::WebsiteDataStore *)WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v2, &v5);
  if (result)
  {
    v4 = WebKit::WebsiteDataStore::cookieStore(result);
    return (WebKit::WebsiteDataStore *)API::HTTPCookieStore::cookiesDidChange(v4);
  }
  return result;
}

uint64_t WebKit::NetworkProcessProxy::notifyMediaStreamingActivity(uint64_t this, char a2)
{
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(this + 136);
  if (v2 && *(_BYTE *)(v2 + 104) || *(_QWORD *)(this + 144))
  {
    v3 = a2;
    return WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::NotifyMediaStreamingActivity>(this, &v3, 0, 0);
  }
  return this;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::NetworkProcess::NotifyMediaStreamingActivity>(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 415;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  LOBYTE(a3) = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v8, 1uLL, 1) = a3;
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

void WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(uint64_t a1, int a2, const WebCore::SecurityOriginData *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  NSObject *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  WebKit *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  const WTF::URL *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46[2];
  char v47;
  IPC::Encoder *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE buf[44];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v12 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a5;
    _os_log_impl(&dword_196BCC000, v12, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin - webPageProxyID=%llu - BEGIN", buf, 0x16u);
  }
  v13 = (unsigned int *)(a1 + 16);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v15 = *a6;
  *a6 = 0;
  v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v16 = &off_1E34DE4A8;
  v16[1] = a1;
  v16[2] = a5;
  v16[3] = v15;
  v17 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *((_QWORD *)v17 + 1) = v16;
  *(_QWORD *)buf = a4;
  v18 = WebKit::allDataStores(v17);
  v19 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v18, buf);
  if (v19)
  {
    v20 = v19;
    CFRetain(*(CFTypeRef *)(v19 + 8));
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v20 + 312), buf);
    v21 = *(_QWORD *)(v20 + 312);
    v45 = a5;
    if (v21)
    {
      v22 = *(unsigned int *)(v21 - 4);
      v23 = v21 + 8 * v22;
    }
    else
    {
      v23 = 0;
      v22 = 0;
    }
    v49 = v20 + 312;
    v50 = v23;
    v51 = v23;
    v52 = v23;
    v53 = v21 + 8 * v22;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v49);
    for (i = *(_QWORD *)&buf[8]; *(_QWORD *)&buf[8] != v50; i = *(_QWORD *)&buf[8])
    {
      v25 = *(_QWORD *)(*(_QWORD *)i + 8);
      v26 = (unsigned int *)(v25 + 16);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      v28 = *(_QWORD *)(v25 + 136);
      if ((v28 && *(_BYTE *)(v28 + 104) || *(_QWORD *)(v25 + 144))
        && !WebKit::WebProcessProxy::isDummyProcessProxy((WebKit::WebProcessProxy *)v25))
      {
        do
          v29 = __ldaxr((unsigned int *)v17);
        while (__stlxr(v29 + 1, (unsigned int *)v17));
        v30 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v30 = 2580;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 528) = v30 + 16;
        *(_QWORD *)(v30 + 536) = v30 + 16;
        *(_OWORD *)(v30 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v30 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v30);
        v48 = (IPC::Encoder *)v30;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v30, 4uLL, 4) = a2;
        IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v30, (uint64_t)a3);
        v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v31 = off_1E34DE4D0;
        v31[1] = v17;
        v32 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v46[0] = (uint64_t)v31;
        v46[1] = v32;
        v47 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v25, &v48, 0, (uint64_t)v46, 1);
        if (v47)
        {
          v34 = v46[0];
          v46[0] = 0;
          if (v34)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
        v35 = v48;
        v48 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v33);
          WTF::fastFree(v36, v37);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v25 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    if ((a2 & 4) == 0 || !WebCore::operator==())
      goto LABEL_36;
    {
      byte_1ECE738C8 = 0;
      WebKit::ViewSnapshotStore::singleton(void)::store = 0u;
      *(_OWORD *)&qword_1ECE738B8 = 0u;
    }
    WebKit::ViewSnapshotStore::discardSnapshotImagesForOrigin((uint64_t)&WebKit::ViewSnapshotStore::singleton(void)::store, a3);
    WebKit::WebProcessProxy::webPage(v45, v46);
    v38 = v46[0];
    if (!v46[0])
      goto LABEL_36;
    WTF::URL::URL((uint64_t)buf, (WTF::StringImpl **)(*(_QWORD *)(v46[0] + 32) + 1000));
    WebCore::SecurityOriginData::fromURL((WebCore::SecurityOriginData *)buf, v39);
    v41 = WebCore::operator==();
    if ((_DWORD)v52 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))off_1E34DD428[v52])(&v48, &v49);
    LODWORD(v52) = -1;
    v42 = *(WTF::StringImpl **)buf;
    *(_QWORD *)buf = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
      {
        WTF::StringImpl::destroy(v42, v40);
        if (!v41)
          goto LABEL_35;
        goto LABEL_34;
      }
      *(_DWORD *)v42 -= 2;
    }
    if (!v41)
    {
LABEL_35:
      CFRelease(*(CFTypeRef *)(v38 + 8));
LABEL_36:
      CFRelease(*(CFTypeRef *)(v20 + 8));
      goto LABEL_37;
    }
LABEL_34:
    *(_BYTE *)(v38 + 893) = 1;
    goto LABEL_35;
  }
  do
  {
LABEL_37:
    v43 = __ldaxr((unsigned int *)v17);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, (unsigned int *)v17));
  if (!v44)
  {
    atomic_store(1u, (unsigned int *)v17);
    *(_QWORD *)buf = v17;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
  }
}

void WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  NSObject *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  WebKit *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;
  IPC::Encoder *v45;
  _OWORD buf[2];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v10 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = a1;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::reloadExecutionContextsForOrigin BEGIN", (uint8_t *)buf, 0xCu);
  }
  v11 = (unsigned int *)(a1 + 16);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  v13 = *a5;
  *a5 = 0;
  v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v14 = &off_1E34DE4F8;
  v14[1] = a1;
  v14[2] = v13;
  v15 = (WebKit *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  *((_QWORD *)v15 + 1) = v14;
  *(_QWORD *)&buf[0] = a3;
  v16 = WebKit::allDataStores(v15);
  v17 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v16, buf);
  if (v17)
  {
    v18 = v17;
    CFRetain(*(CFTypeRef *)(v17 + 8));
    WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((_QWORD **)(v18 + 312), buf);
    v19 = *(_QWORD *)(v18 + 312);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 - 4);
      v21 = v19 + 8 * v20;
    }
    else
    {
      v21 = 0;
      v20 = 0;
    }
    v38 = v18 + 312;
    v39 = v21;
    v40 = v21;
    v41 = v21;
    v42 = v19 + 8 * v20;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v38);
    for (i = *((_QWORD *)&buf[0] + 1); *((_QWORD *)&buf[0] + 1) != v39; i = *((_QWORD *)&buf[0] + 1))
    {
      v23 = *(_QWORD *)(*(_QWORD *)i + 8);
      v24 = (unsigned int *)(v23 + 16);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 + 1, v24));
      v26 = *(_QWORD *)(v23 + 136);
      if ((v26 && *(_BYTE *)(v26 + 104) || *(_QWORD *)(v23 + 144))
        && !WebKit::WebProcessProxy::isDummyProcessProxy((WebKit::WebProcessProxy *)v23))
      {
        do
          v27 = __ldaxr((unsigned int *)v15);
        while (__stlxr(v27 + 1, (unsigned int *)v15));
        v28 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v28 = 2617;
        *(_QWORD *)(v28 + 8) = 0;
        *(_QWORD *)(v28 + 528) = v28 + 16;
        *(_QWORD *)(v28 + 536) = v28 + 16;
        *(_OWORD *)(v28 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v28 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v28);
        v45 = (IPC::Encoder *)v28;
        IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v28, a2);
        IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>> const&>((IPC::Encoder *)v28, a4);
        v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v29 = off_1E34DE520;
        v29[1] = v15;
        v30 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        v43[0] = v29;
        v43[1] = v30;
        v44 = 1;
        WebKit::AuxiliaryProcessProxy::sendMessage(v23, &v45, 0, (uint64_t)v43, 1);
        if (v44)
        {
          v32 = v43[0];
          v43[0] = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        }
        v33 = v45;
        v45 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v31);
          WTF::fastFree(v34, v35);
        }
      }
      WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v23 + 16));
      WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
    }
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  do
  {
    v36 = __ldaxr((unsigned int *)v15);
    v37 = v36 - 1;
  }
  while (__stlxr(v37, (unsigned int *)v15));
  if (!v37)
  {
    atomic_store(1u, (unsigned int *)v15);
    *(_QWORD *)&buf[0] = v15;
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((uint64_t *)buf);
  }
}

void WebKit::NetworkProcessProxy::wakeUpWebProcessForIPC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  NSObject *v8;
  _BYTE v9[12];
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unsigned int *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v9 = a2;
  {
    WebKit::WebProcessProxy::allProcessMap(void)::map = 0;
  }
  v4 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::UniqueRef<WebKit::RemoteAudioDestination>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::UniqueRef<WebKit::RemoteAudioDestination>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteAudioDestinationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(&WebKit::WebProcessProxy::allProcessMap(void)::map, v9);
  v5 = (unsigned int *)v4;
  if (v4)
  {
    v6 = (unsigned int *)(v4 + 16);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v9 = 134218496;
    *(_QWORD *)&v9[4] = a1;
    v10 = 2048;
    v11 = a2;
    v12 = 2048;
    v13 = v5;
    _os_log_impl(&dword_196BCC000, v8, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::wakeUpWebProcessForIPC processIdentifier=%llu, webProcess=%p", v9, 0x20u);
  }
  if (v5)
  {
    WebKit::AuxiliaryProcessProxy::wakeUpTemporarilyForIPC((WebKit::AuxiliaryProcessProxy *)v5);
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref(v5 + 4);
  }
}

void WebKit::NetworkProcessProxy::reportNetworkIssue(uint64_t a1, uint64_t a2, const WTF::URL *a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;

  WebKit::WebProcessProxy::webPage(a2, &v6);
  v4 = v6;
  if (v6)
  {
    v5 = *(WTF::StringImpl **)(v6 + 1328);
    if (v5)
      WebKit::NetworkIssueReporter::report(v5, a3);
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::LegacyCustomProtocolManagerProxy::~LegacyCustomProtocolManagerProxy(WebKit::LegacyCustomProtocolManagerProxy *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_1E34DD360;
  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(v2 + 152), 0x12u);
  v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  v6 = (unsigned int *)(v5 + 16);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  (*(void (**)(_QWORD, WebKit::LegacyCustomProtocolManagerProxy *))(**(_QWORD **)(v5 + 424) + 32))(*(_QWORD *)(v5 + 424), this);
  WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(v6);
  if (v2)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed((unsigned int *)(v2 + 16));
  v9 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v8);
}

{
  WebKit::LegacyCustomProtocolManagerProxy::~LegacyCustomProtocolManagerProxy(this);
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::wasRedirectedToRequest(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8[0] = &v9;
  v8[1] = a3;
  v8[2] = a4;
  result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::WasRedirectedToRequest>(v4, v8, 0, 0);
  if (v4)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::WasRedirectedToRequest>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 106;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  uint64_t *v8[2];
  char v9;
  uint64_t v10;

  v10 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8[0] = &v10;
  v8[1] = a3;
  v9 = a4;
  result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidReceiveResponse>(v4, v8, 0, 0);
  if (v4)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidReceiveResponse>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  IPC::Encoder *v12;
  WTF *v13;
  void *v14;
  uint64_t v16;
  char v17;
  IPC::Encoder *v18;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 103;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v18 = (IPC::Encoder *)v8;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,0ul,1ul,2ul>((IPC::Encoder *)v8, a2);
  LOBYTE(v16) = 0;
  v17 = 0;
  v10 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v18, a4, (uint64_t)&v16, 1);
  if (v17)
  {
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v9);
    WTF::fastFree(v13, v14);
  }
  return v10;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didLoadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *result;
  uint64_t *v8[2];
  _QWORD v9[2];
  uint64_t v10;

  v10 = a2;
  v9[0] = a3;
  v9[1] = a4;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = (unsigned int *)(v4 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v8[0] = &v10;
  v8[1] = v9;
  result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidLoadData>(v4, v8, 0, 0);
  if (v4)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidLoadData>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 102;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, (const void *)*a2[1], a2[1][1]);
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didFailWithError(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *result;
  uint64_t *v7[2];
  uint64_t v8;

  v8 = a2;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v4 = (unsigned int *)(v3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v7[0] = &v8;
  v7[1] = a3;
  result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFailWithError>(v3, v7, 0, 0);
  if (v3)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFailWithError>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 100;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode((IPC::Encoder *)v8, (WebCore::ResourceError *)a2[1]);
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

unsigned int *WebKit::LegacyCustomProtocolManagerProxy::didFinishLoading(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *result;
  uint64_t *v6;
  uint64_t v7;

  v7 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v3 = (unsigned int *)(v2 + 16);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v6 = &v7;
  result = (unsigned int *)WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFinishLoading>(v2, &v6, 0, 0);
  if (v2)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
  return result;
}

uint64_t WebKit::AuxiliaryProcessProxy::send<Messages::LegacyCustomProtocolManager::DidFinishLoading>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  IPC::Encoder *v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  char v18;
  IPC::Encoder *v19;

  v8 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v8 = 101;
  *(_QWORD *)(v8 + 8) = a3;
  *(_QWORD *)(v8 + 528) = v8 + 16;
  *(_QWORD *)(v8 + 536) = v8 + 16;
  *(_OWORD *)(v8 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v8 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v8);
  v19 = (IPC::Encoder *)v8;
  v9 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v8, 8uLL, 8) = v9;
  LOBYTE(v17) = 0;
  v18 = 0;
  v11 = WebKit::AuxiliaryProcessProxy::sendMessage(a1, &v19, a4, (uint64_t)&v17, 1);
  if (v18)
  {
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

uint64_t WebKit::NetworkProcessProxy::type(WebKit::NetworkProcessProxy *this)
{
  return 1;
}

const char *WebKit::NetworkProcessProxy::clientName(WebKit::NetworkProcessProxy *this)
{
  return "NetworkProcess";
}

const char *WebKit::NetworkProcessProxy::processName(WebKit::NetworkProcessProxy *this)
{
  return "Networking";
}

uint64_t std::experimental::fundamentals_v3::expected<void,WTF::String>::expected<WTF::ASCIILiteral>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  if (a3)
  {
    if (a3 == 1)
    {
      v4 = MEMORY[0x1E0CBEF70];
      *MEMORY[0x1E0CBEF70] += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = v6;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 1;
  return a1;
}

WebKit::DownloadProxyMap *std::unique_ptr<WebKit::DownloadProxyMap>::reset[abi:sn180100](WebKit::DownloadProxyMap **a1, WebKit::DownloadProxyMap *a2)
{
  WebKit::DownloadProxyMap *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::DownloadProxyMap::~DownloadProxyMap(result, a2);
    return (WebKit::DownloadProxyMap *)WTF::fastFree(v4, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::NetworkProcessProxy::UploadActivity,false>::reset[abi:sn180100](uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 24))
  {
    v2 = result;
    result = *(_QWORD *)(result + 16);
    if (result)
      result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(result, a2);
    v3 = *(_QWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v3)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
    v4 = *(_QWORD *)v2;
    *(_QWORD *)v2 = 0;
    if (v4)
      result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), a2);
    *(_BYTE *)(v2 + 24) = 0;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages14NetworkProcess42ProcessWillSuspendImminentlyForTestingSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        v5 = *v4;
        *v4 = 0;
        if (v5)
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v5 + 8), a2);
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages7WebPage54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34DD458;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD458;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint8_t v5[16];

  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "NetworkProcess is taking too much time to process a push message", v5, 2u);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;

  v3 = a1[1];
  *a1 = &off_1E34DD480;
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD480;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 8), a2);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint8_t v5[16];

  v2 = qword_1ECE71848;
  if (os_log_type_enabled((os_log_t)qword_1ECE71848, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_196BCC000, v2, OS_LOG_TYPE_ERROR, "NetworkProcess is taking too much time to process a notification event", v5, 2u);
  }
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v4 + 8), v3);
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  WTF::StringImpl **result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  result = (WTF::StringImpl **)std::unique_ptr<WebKit::InspectorTargetProxy>::reset[abi:sn180100](a2 + 1, 0);
  ++*(_DWORD *)(*a1 - 16);
  v5 = *a1;
  if (*a1)
    v6 = *(_DWORD *)(v5 - 12) - 1;
  else
    v6 = -1;
  *(_DWORD *)(v5 - 12) = v6;
  v7 = *a1;
  if (*a1)
  {
    v8 = 6 * *(_DWORD *)(v7 - 12);
    v9 = *(_DWORD *)(v7 - 4);
    if (v8 < v9 && v9 >= 9)
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::unique_ptr<WebKit::InspectorTargetProxy>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::unique_ptr<WebKit::InspectorTargetProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v9 >> 1, 0);
  }
  return result;
}

uint64_t WTF::RefCounted<WebKit::SecKeyProxyStore>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  const void *v3;
  void *v4;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(const void **)(result + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v3)
      CFRelease(v3);
    WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(v2 + 8), a2);
    return WTF::fastFree((WTF *)v2, v4);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_0,void>::call(uint64_t a1)
{
  WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(*(WebKit::NetworkProcessProxy **)(a1 + 8));
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_1,void,WebKit::WebsiteDataStore &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  result = (unsigned int *)WebKit::NetworkProcessProxy::addSession(v3, (unsigned int *)a2, 0);
  v5 = (unsigned int *)(v3 + 16);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  v7 = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a2 + 408) = v3;
  if (v7)
    return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v7 + 16));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2>(WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DD4F8;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2>(WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD4F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InitializeNetworkProcess,WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2>(WebKit::NetworkProcessProxy::sendCreationParametersToNewProcess(void)::$_2 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    result = *(_QWORD *)(v1 + 8);
    if (result)
      return WebKit::AuxiliaryProcessProxy::beginResponsivenessChecks(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::NetworkProcessProxy(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E34DD520;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::NetworkProcessProxy(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD520;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::NetworkProcessProxy(void)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;
  char v15;
  IPC::Encoder *v16;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (unsigned int *)(v2 + 16);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      {
        xmmword_1ECE73558 = 0u;
        unk_1ECE73568 = 0u;
        WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance = 0u;
      }
      v5 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v5 = 500;
      *(_QWORD *)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 528) = v5 + 16;
      *(_QWORD *)(v5 + 536) = v5 + 16;
      *(_OWORD *)(v5 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v5 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v5);
      v16 = (IPC::Encoder *)v5;
      v6 = DWORD1(xmmword_1ECE73558);
      *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v5, 8uLL, 8) = v6;
      if (DWORD1(xmmword_1ECE73558))
      {
        v7 = (uint64_t *)*((_QWORD *)&WebKit::StorageAccessPromptQuirkController::shared(void)::sharedInstance + 1);
        v8 = 32 * DWORD1(xmmword_1ECE73558);
        do
        {
          IPC::ArgumentCoder<WebCore::OrganizationStorageAccessPromptQuirk,void>::encode((IPC::Encoder *)v5, v7);
          v7 += 4;
          v8 -= 32;
        }
        while (v8);
      }
      LOBYTE(v14) = 0;
      v15 = 0;
      WebKit::AuxiliaryProcessProxy::sendMessage(v2, &v16, 0, (uint64_t)&v14, 1);
      if (v15)
      {
        v10 = v14;
        v14 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      v11 = v16;
      v16 = 0;
      if (v11)
      {
        IPC::Encoder::~Encoder(v11, v9);
        WTF::fastFree(v12, v13);
      }
      return WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 16));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34DD548;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34DD548;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  _QWORD *v2;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int16 v8;
  int v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[4];
  char v25;
  char v26;
  unsigned __int8 v27;
  _BYTE v28[4];
  char v29;
  char v30;
  _BYTE v31[4];
  char v32;

  v2 = (_QWORD *)(a1 + 8);
  if (!a2 || (v4 = *(_QWORD *)a2) == 0)
  {
    IPC::Connection::cancelReply<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>((_QWORD *)(a1 + 8));
    return;
  }
  v5 = *((_QWORD *)a2 + 1);
  if (v5 <= *((_QWORD *)a2 + 2) - v4)
  {
    v11 = 0;
    v12 = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v13 = *((_QWORD *)a2 + 3);
    if (v13)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v4, v5);
        v11 = 0;
        v21 = *(_QWORD *)a2;
        v22 = *((_QWORD *)a2 + 1);
        v23 = *((_QWORD *)a2 + 3);
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        v12 = 0;
        if (v23 && v22)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v21, v22);
          v12 = *(_QWORD *)a2;
          v11 = *((_QWORD *)a2 + 1);
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_23;
  }
  v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v6 + 1;
  v7 = *v6;
  if (v7 >= 2)
  {
    v11 = v5;
    v12 = v4;
LABEL_23:
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v14 = *((_QWORD *)a2 + 3);
    if (v14 && v11)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 16))(v14, v12);
    goto LABEL_24;
  }
  if (!v7)
  {
    v28[0] = 0;
    v29 = 0;
    v30 = 1;
    goto LABEL_11;
  }
  IPC::Decoder::decode<IPC::ConnectionHandle>(a2, v31);
  if (v32)
  {
    WTF::MachSendRight::MachSendRight();
    v29 = 1;
    v30 = 1;
    if (v32)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v31);
LABEL_11:
    v8 = IPC::Decoder::decode<WebCore::GenericCueData::Alignment>((uint64_t *)a2);
    if (v8 > 0xFFu)
    {
      v10 = v8;
      v24[0] = 0;
      v25 = 0;
      if (v29)
      {
        WTF::MachSendRight::MachSendRight();
        v25 = 1;
      }
      v26 = v10;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v24[0] = 0;
    }
    v27 = v9;
    if (v29)
    {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v28);
      v9 = v27;
    }
    if (v9)
      goto LABEL_19;
    goto LABEL_26;
  }
LABEL_24:
  v28[0] = 0;
  v30 = 0;
  v15 = *(_QWORD *)a2;
  v16 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v17 = *((_QWORD *)a2 + 3);
  if (v17)
  {
    if (v16)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15);
      if (v30)
        goto LABEL_11;
    }
  }
  v24[0] = 0;
  v27 = 0;
LABEL_26:
  v18 = *(_QWORD *)a2;
  v19 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v20 = *((_QWORD *)a2 + 3);
  if (!v20 || !v19 || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v18), !v27))
  {
    IPC::Connection::cancelReply<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(v2);
    return;
  }
LABEL_19:
  WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0::operator()<std::optional<IPC::ConnectionHandle>,WebCore::HTTPCookieAcceptPolicy>(v2, (uint64_t)v24, v26);
  if (v27)
  {
    if (v25)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v24);
  }
}

void IPC::Connection::cancelReply<Messages::NetworkProcess::CreateNetworkConnectionToWebProcess,WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0>(_QWORD *a1)
{
  _BYTE v1[4];
  char v2;

  v1[0] = 0;
  v2 = 0;
  WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0::operator()<std::optional<IPC::ConnectionHandle>,WebCore::HTTPCookieAcceptPolicy>(a1, (uint64_t)v1, 0);
  if (v2)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v1);
}

void WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebKit::WebProcessProxy &,WTF::CompletionHandler<void ()(WebKit::NetworkProcessConnectionInfo &&)> &&)::$_0::operator()<std::optional<IPC::ConnectionHandle>,WebCore::HTTPCookieAcceptPolicy>(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  char v12;
  _BYTE v13[31];
  uint8_t buf[4];
  _BYTE v15[36];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a1[1];
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    v8 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v10 = "NetworkProcessProxy::getNetworkProcessConnection: NetworkProcessProxy deallocated during connection establishment";
      goto LABEL_14;
    }
LABEL_8:
    *(_DWORD *)buf = 0;
    v15[0] = 0;
    goto LABEL_9;
  }
  v7 = *a1;
  WebKit::ResponsivenessTimer::stop((_BYTE *)(*a1 + 56));
  if (!*(_BYTE *)(a2 + 4))
  {
    v8 = qword_1ECE71C68;
    if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      v10 = "NetworkProcessProxy::getNetworkProcessConnection: connection identifier is empty";
LABEL_14:
      _os_log_error_impl(&dword_196BCC000, v8, OS_LOG_TYPE_ERROR, v10, buf, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if ((*(_DWORD *)a2 - 1) < 0xFFFFFFFE)
  {
    WTF::MachSendRight::MachSendRight();
    v15[0] = a3;
    if (*(_QWORD *)(*(_QWORD *)(v7 + 144) + 352))
    {
      xpc_connection_get_audit_token();
      *(_OWORD *)&v15[5] = *(_OWORD *)v13;
      *(_OWORD *)&v15[20] = *(_OWORD *)&v13[15];
      v15[4] = v12;
      v16 = 1;
LABEL_10:
      v9 = a1[2];
      a1[2] = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v9 + 16))(v9, buf);
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
      return;
    }
LABEL_9:
    v15[4] = 0;
    v16 = 0;
    goto LABEL_10;
  }
  v11 = off_1ECE71C40;
  if (os_log_type_enabled((os_log_t)off_1ECE71C40, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v15 = "auto WebKit::NetworkProcessProxy::getNetworkProcessConnection(WebProcessProxy &, CompletionHandler<"
                     "void (NetworkProcessConnectionInfo &&)> &&)::(anonymous class)::operator()(auto &&, auto) [identifi"
                     "er:auto = std::optional<IPC::ConnectionHandle>, cookieAcceptPolicy:auto = WebCore::HTTPCookieAcceptPolicy]";
    _os_log_fault_impl(&dword_196BCC000, v11, OS_LOG_TYPE_FAULT, "/Library/Caches/com.apple.xbs/Sources/WebKit/Source/WebKit/UIProcess/Network/NetworkProcessProxy.cpp 335: Invalid message dispatched %s", buf, 0xCu);
  }
  *(_BYTE *)(*(_QWORD *)(v7 + 144) + 98) = 1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::SecurityOriginData> const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34DD570;
  v3 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 32), 0);
  v6 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
  return a1;
}

{
  WTF::StringImpl *v3;
  uint64_t v4;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)a1 = off_1E34DD570;
  v3 = *(WTF::StringImpl **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::unique_ptr<WebKit::ProcessThrottlerActivity>::reset[abi:sn180100]((WebKit::ProcessThrottlerActivity **)(a1 + 32), 0);
  v6 = *(unsigned int **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v5);
    }
  }
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v9)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v9 + 16));
  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<std::optional<WebCore::SecurityOriginData> const&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = a1 + 8;
  if (!a2 || !*a2)
  {
LABEL_34:
    IPC::Connection::cancelReply<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(v2);
    return;
  }
  v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(a2);
  if (!v6)
  {
    v29 = *a2;
    v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v30)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
    goto LABEL_34;
  }
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = API::Object::newObject(0x70uLL, 54);
  API::DataTask::DataTask(v9, v7, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 56), *(unsigned __int8 *)(a1 + 40));
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if ((unint64_t)(v7 - 1) > 0xFFFFFFFFFFFFFFFDLL)
  {
    API::DataTask::networkProcessCrashed((WebKit::ProcessThrottlerActivity **)v9);
  }
  else
  {
    v11 = (uint64_t *)(v8 + 568);
    v12 = *(_QWORD *)(v8 + 568);
    if (v12
      || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)(v8 + 568), 0), (v12 = *v11) != 0))
    {
      v13 = *(_DWORD *)(v12 - 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
    v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
    v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
    v17 = v13 & ((v16 >> 31) ^ v16);
    v18 = (uint64_t *)(v12 + 16 * v17);
    v19 = *v18;
    if (!*v18)
    {
LABEL_16:
      v22 = v18[1];
      *v18 = v7;
      v18[1] = v9;
      if (v22)
        CFRelease(*(CFTypeRef *)(v22 + 8));
      v23 = *v11;
      if (*v11)
        v24 = *(_DWORD *)(v23 - 12) + 1;
      else
        v24 = 1;
      *(_DWORD *)(v23 - 12) = v24;
      v25 = *v11;
      if (*v11)
        v26 = *(_DWORD *)(v25 - 12);
      else
        v26 = 0;
      v27 = (*(_DWORD *)(v25 - 16) + v26);
      v28 = *(unsigned int *)(v25 - 4);
      if (v28 > 0x400)
      {
        if (v28 > 2 * v27)
          return;
      }
      else if (3 * v28 > 4 * v27)
      {
        return;
      }
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<API::Navigation,WTF::RawPtrTraits<API::Navigation>,WTF::DefaultRefDerefTraits<API::Navigation>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand((uint64_t *)(v8 + 568), v18);
      return;
    }
    v20 = 0;
    v21 = 1;
    while (v19 != v7)
    {
      if (v19 == -1)
        v20 = v18;
      v17 = (v17 + v21) & v13;
      v18 = (uint64_t *)(v12 + 16 * v17);
      v19 = *v18;
      ++v21;
      if (!*v18)
      {
        if (v20)
        {
          *v20 = 0;
          v20[1] = 0;
          --*(_DWORD *)(*v11 - 16);
          v18 = v20;
        }
        goto LABEL_16;
      }
    }
  }
  if (v9)
    CFRelease(*(CFTypeRef *)(v9 + 8));
}

void IPC::Connection::cancelReply<Messages::NetworkProcess::DataTaskWithRequest,WebKit::NetworkProcessProxy::dataTaskWithRequest(WebKit::WebPageProxy &,PAL::SessionID,WebCore::ResourceRequest &&,std::optional<WebCore::SecurityOriginData> const&,BOOL,WTF::CompletionHandler<void ()(API::DataTask &)> &&)::$_0>(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 16);
  v3 = (uint64_t *)(a1 + 48);
  v4 = API::Object::newObject(0x70uLL, 54);
  API::DataTask::DataTask(v4, 0, v2, v3, *(unsigned __int8 *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  API::DataTask::networkProcessCrashed((WebKit::ProcessThrottlerActivity **)v4);
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::OptionSet<WebKit::WebsiteDataFetchOption> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *(_DWORD *)v2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  LOBYTE(v2) = *(_BYTE *)v2[2];
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD5C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD5C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(WTF::CompletionHandler<void ()(WebKit::WebsiteData)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  __int128 v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  WTF::StringImpl **v13;
  char v14;
  _QWORD v15[2];
  __int128 v16;
  WTF::StringImpl **v17;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WebKit::WebsiteData>>(a2, (uint64_t)&v10);
  if (v14)
  {
    v15[0] = v10;
    v4 = v11;
    v10 = 0;
    v11 = 0;
    v15[1] = v4;
    v5 = v12;
    v12 = 0uLL;
    v16 = v5;
    v6 = v13;
    v13 = 0;
    v17 = v6;
    WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(v2, (uint64_t)v15);
    if (v17)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v7);
    if (*((_QWORD *)&v16 + 1))
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v16 + 1), v7);
    if ((_QWORD)v16)
      WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v16, v7);
    WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v15, v7);
    return std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v8);
  }
  else
  {
    std::__optional_destruct_base<WebKit::WebsiteData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v10, v3);
    return IPC::Connection::cancelReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(v2);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcess::FetchWebsiteData,WTF::CompletionHandler<void ()(WebKit::WebsiteData)>>(uint64_t *a1)
{
  WTF::StringImpl *v1;
  __int128 v3;
  __int128 v4;
  WTF::StringImpl **v5;

  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  WTF::CompletionHandler<void ()(WebKit::WebsiteData)>::operator()(a1, (uint64_t)&v3);
  if (v5)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, v1);
  if (*((_QWORD *)&v4 + 1))
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*((WTF::StringImpl ***)&v4 + 1), v1);
  if ((_QWORD)v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v4, v1);
  return WTF::Vector<WebKit::WebsiteData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v3, v1);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::WallTime const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *(_DWORD *)a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = *a2[2];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD5E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD5E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::OptionSet<WebKit::WebsiteDataType> const&,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  LODWORD(v4) = *(_DWORD *)a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  IPC::VectorArgumentCoder<false,WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(a1, (uint64_t)a2[2]);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2[3]);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2[4]);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)a2[5]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD610;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD610;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteWebsiteDataForOrigins,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,WebCore::SecurityOriginData const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, (uint64_t)v2[1]);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, (uint64_t)v2[2]);
  LODWORD(v2) = *(_DWORD *)v2[3];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD638;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD638;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RenameOriginInWebsiteData,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::ClientOrigin const&,WTF::OptionSet<WebKit::WebsiteDataType> const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, (uint64_t)v2[1]);
  LODWORD(v2) = *(_DWORD *)v2[2];
  result = IPC::Encoder::grow(a1, 4uLL, 4);
  *(_DWORD *)result = (_DWORD)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD660;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD660;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::WebsiteDataOriginDirectoryForTesting,WTF::CompletionHandler<void ()(WTF::String const&)>>(WTF::CompletionHandler<void ()(WTF::String const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::WebPage::GetRenderTreeExternalRepresentation,WTF::CompletionHandler<void ()(WTF::String const&)>>(v2);
  v3 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v3 + 16))(v3, &v6);
  result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::SecurityOriginData> const&,WebCore::AuthenticationChallenge &&,BOOL,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E34DD688;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::SecurityOriginData> const&,WebCore::AuthenticationChallenge &&,BOOL,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebKit::WebPageProxy *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E34DD688;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::didReceiveAuthenticationChallenge(PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::optional<WebCore::SecurityOriginData> const&,WebCore::AuthenticationChallenge &&,BOOL,WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>)::$_0,void,WebKit::WebPageProxy *>::call(WTF::StringImpl *result, WebKit *this)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  CFTypeRef v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  CFTypeRef cf;

  v2 = *((_QWORD *)result + 2);
  if (v2 && *(_QWORD *)(v2 + 8))
  {
    if (this)
    {
      return (WTF::StringImpl *)WebKit::WebPageProxy::didReceiveAuthenticationChallengeProxy((uint64_t)this, (uint64_t *)result + 4, *((unsigned __int8 *)result + 40));
    }
    else
    {
      v3 = (char *)result + 32;
      v12 = (WTF::StringImpl *)*((_QWORD *)result + 3);
      v4 = WebKit::allDataStores(result);
      v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v4, &v12);
      if (v5
        && (v6 = v5,
            *(_BYTE *)(WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(*(_QWORD *)v3 + 16))
                     + 21) == 8))
      {
        return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, char *))(**(_QWORD **)(v6 + 392) + 24))(*(_QWORD *)(v6 + 392), v3);
      }
      else
      {
        v7 = *(_QWORD *)(*(_QWORD *)v3 + 464);
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v12);
        cf = 0;
        v9 = *(_QWORD *)(v7 + 16);
        if (v9)
        {
          *(_QWORD *)(v7 + 16) = 0;
          (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 16))(v9, 1, &v12);
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          v10 = cf;
          cf = 0;
          if (v10)
            CFRelease(v10);
        }
        v11 = v13;
        v13 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v8);
          else
            *(_DWORD *)v11 -= 2;
        }
        result = v12;
        v12 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(WTF::CompletionHandler<void ()(WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD6B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(WTF::CompletionHandler<void ()(WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD6B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(WTF::CompletionHandler<void ()(WTF::String)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v6);
  if (!v7)
    return IPC::Connection::cancelReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(v2);
  v3 = v6;
  v6 = 0;
  v8 = v3;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(v2, &v8);
  result = v8;
  v8 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  if (v7)
  {
    result = v6;
    v6 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkProcess::DumpResourceLoadStatistics,WTF::CompletionHandler<void ()(WTF::String)>>(uint64_t *a1)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3;

  v3 = 0;
  WTF::CompletionHandler<void ()(WTF::String)>::operator()(a1, &v3);
  result = v3;
  v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD6D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD6D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD700;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD700;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsVeryPrevalentResource,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD728;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD728;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD750;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD750;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPrevalentResourceForDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD778;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD778;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetVeryPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::Seconds const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *result;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  v5 = *a2[2];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v5;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD7A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD7A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetLastSeen,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD7C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD7C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DomainIDExistsInDatabase,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::Seconds const&,BOOL,WTF::Seconds const&,BOOL,BOOL,BOOL,unsigned long long>,0ul,1ul,2ul,3ul,4ul,5ul,6ul,7ul,8ul,9ul,10ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char *result;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[3]);
  v5 = *a2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v6 = *a2[6];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  LOBYTE(v4) = *((_BYTE *)a2 + 56);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 57);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v4) = *((_BYTE *)a2 + 58);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v7 = a2[8];
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v7;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD7F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD7F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::MergeStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,unsigned long long,BOOL,BOOL,BOOL>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  v5 = v2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 24);
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v5;
  LOBYTE(v5) = *((_BYTE *)v2 + 25);
  *IPC::Encoder::grow(a1, 1uLL, 1) = (char)v5;
  LOBYTE(v2) = *((_BYTE *)v2 + 26);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD818;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD818;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::InsertExpiredStatisticForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD840;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD840;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearPrevalentResource,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD868;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD868;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleCookieBlockingUpdate,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,std::optional<WTF::WallTime> const&,WebKit::ShouldGrandfatherStatistics>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<std::optional<double>,void>::encode<IPC::Encoder,std::optional<double>>(a1, v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD890;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD890;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleClearInMemoryAndPersistent,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD8B8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD8B8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ScheduleStatisticsAndDataRecordsProcessing,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD8E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD8E0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::StatisticsDatabaseHasAllTables,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD908;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD908;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::LogUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD930;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD930;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HadUserInteraction,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, a2[2]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD958;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD958;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRelationshipOnlyInDatabaseOnce,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD980;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD980;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD9A8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD9A8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasLocalStorage,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD9D0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD9D0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTimeToLiveUserInteraction,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetNotifyPagesWhenDataRecordsWereScanned,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DD9F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetNotifyPagesWhenDataRecordsWereScanned,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DD9F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetNotifyPagesWhenDataRecordsWereScanned,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDA20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDA20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsTimeAdvanceForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDA48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDA48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetIsRunningResourceLoadStatisticsTest,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDA70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDA70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubframeUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDA98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDA98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsRedirectingTo,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDAC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDAC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubFrameUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDAE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDAE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUnderTopFrameDomain,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDB10;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDB10;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsRegisteredAsSubresourceUnder,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDB38;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDB38;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDB60;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDB60;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetSubresourceUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDB88;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDB88;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDBB0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDBB0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetTopFrameUniqueRedirectFrom,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDBD8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDBD8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsGrandfathered,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDC00;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDC00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfathered,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDC28;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDC28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllStorageAccessEntries,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10[2];

  v2 = (uint64_t *)(a1 + 8);
  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)&v7), !v9))
  {
    v7 = 0;
    v8 = 0;
    WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(v2, &v7);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
  }
  v10[0] = v7;
  v3 = v8;
  v7 = 0;
  v8 = 0;
  v10[1] = v3;
  WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>)>::operator()(v2, v10);
  result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v4);
  if (v9)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v7, v6);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDC50;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDC50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetResourceLoadStatisticsDataSummary,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  char v41;
  _QWORD v42[2];
  char v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;

  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_43:
    v44 = 0;
    v45 = 0;
    v35 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 16))(v35, &v44);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v20 = &v44;
    return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v19);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
        v22 = *a2;
        v23 = a2[1];
        v24 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v24)
        {
          if (v23)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, v22);
        }
      }
    }
LABEL_41:
    v32 = *a2;
    v33 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v34 = a2[3];
    if (v34 && v33)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
      v36 = *a2;
      v37 = a2[1];
      v38 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v38)
      {
        if (v37)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 16))(v38, v36);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_43;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (uint64_t)(v8 + 1);
  v49 = 0;
  v50 = 0;
  if (v9 >= 0xAAAA)
  {
    do
    {
      IPC::Decoder::decode<WebKit::ITPThirdPartyData>((uint64_t)&v44, a2);
      if (!v48)
        goto LABEL_40;
      if (HIDWORD(v50) == (_DWORD)v50)
      {
        WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>((uint64_t)&v49, (unint64_t)&v44);
      }
      else
      {
        v25 = v49 + 24 * HIDWORD(v50);
        v26 = v44;
        v44 = 0;
        *(_QWORD *)(v25 + 8) = 0;
        *(_QWORD *)(v25 + 16) = 0;
        *(_QWORD *)v25 = v26;
        v27 = v45;
        v45 = 0;
        *(_QWORD *)(v25 + 8) = v27;
        LODWORD(v27) = v46;
        v46 = 0;
        *(_DWORD *)(v25 + 16) = v27;
        LODWORD(v27) = v47;
        v47 = 0;
        *(_DWORD *)(v25 + 20) = v27;
        ++HIDWORD(v50);
      }
      result = std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      --v9;
    }
    while (v9);
    v28 = HIDWORD(v50);
    v14 = (WTF::StringImpl *)v49;
    if (v50 > HIDWORD(v50))
    {
      v29 = (WTF::StringImpl *)v49;
      if (HIDWORD(v50))
      {
        if (HIDWORD(v50) >= 0xAAAAAAB)
        {
          __break(0xC471u);
          return result;
        }
        v30 = WTF::fastMalloc((WTF *)(24 * HIDWORD(v50)));
        LODWORD(v50) = 24 * v28 / 0x18;
        v49 = v30;
        v29 = v14;
        if ((WTF::StringImpl *)v30 != v14)
        {
          WTF::VectorMover<false,WebKit::ITPThirdPartyData>::move(v14, (WTF::StringImpl *)((char *)v14 + 24 * v28), v30);
          v29 = (WTF::StringImpl *)v49;
        }
      }
      if (v14)
      {
        if (v29 == v14)
        {
          v49 = 0;
          LODWORD(v50) = 0;
        }
        WTF::fastFree(v14, v4);
        v14 = (WTF::StringImpl *)v49;
      }
      else
      {
        v14 = v29;
      }
    }
    v49 = 0;
    v39 = v50;
    goto LABEL_19;
  }
  if (v9)
  {
    LODWORD(v50) = 24 * (int)v9 / 0x18u;
    v49 = WTF::fastMalloc((WTF *)(24 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebKit::ITPThirdPartyData>((uint64_t)&v44, a2);
      if (!v48)
        break;
      if (HIDWORD(v50) == (_DWORD)v50)
      {
        WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::ITPThirdPartyData>((uint64_t)&v49, (unint64_t)&v44);
      }
      else
      {
        v11 = v49 + 24 * HIDWORD(v50);
        v12 = v44;
        v44 = 0;
        *(_QWORD *)(v11 + 8) = 0;
        *(_QWORD *)(v11 + 16) = 0;
        *(_QWORD *)v11 = v12;
        v13 = v45;
        v45 = 0;
        *(_QWORD *)(v11 + 8) = v13;
        LODWORD(v13) = v46;
        v46 = 0;
        *(_DWORD *)(v11 + 16) = v13;
        LODWORD(v13) = v47;
        v47 = 0;
        *(_DWORD *)(v11 + 20) = v13;
        ++HIDWORD(v50);
      }
      std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
      if (!--v9)
      {
        v14 = (WTF::StringImpl *)v49;
        v15 = v50;
        goto LABEL_18;
      }
    }
LABEL_40:
    std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v44, v10);
    WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v31);
    goto LABEL_41;
  }
  v14 = 0;
  v15 = 0;
LABEL_18:
  v39 = v15;
  v49 = 0;
LABEL_19:
  v50 = 0;
  v43 = 1;
  WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v4);
  v42[0] = 0;
  v42[1] = 0;
  v40[0] = v14;
  v40[1] = v39;
  WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v16);
  v41 = 1;
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v17 + 16))(v17, v40);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v41)
  {
    v20 = v40;
    return WTF::Vector<WebKit::ITPThirdPartyData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v19);
  }
  return result;
}

WTF *IPC::Decoder::decode<WebKit::ITPThirdPartyData>(uint64_t a1, uint64_t *a2)
{
  WTF *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebKit::ITPThirdPartyData,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 24))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::ITPThirdPartyData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 24))
  {
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    v4 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, v3);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDC78;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDC78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCacheMaxAgeCapForPrevalentResources,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDCA0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDCA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetGrandfatheringTime,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDCC8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDCC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMaxStatisticsEntries,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDCF0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDCF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetMinimumTimeBetweenDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDD18;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDD18;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPruneEntriesDownTo,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDD40;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDD40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldClassifyResourcesBeforeDataRecordsRemoval,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDD68;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDD68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetResourceLoadStatisticsDebugMode,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDD90;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDD90;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::IsResourceLoadStatisticsEphemeral,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCacheMaxAgeCapForPrevalentResources,WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDDB8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCacheMaxAgeCapForPrevalentResources,WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDDB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCacheMaxAgeCapForPrevalentResources,WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCacheMaxAgeCapForPrevalentResources(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetParametersToDefaultValues,WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDDE0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetParametersToDefaultValues,WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDDE0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetParametersToDefaultValues,WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetParametersToDefaultValues(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WTF::OptionSet<WebCore::CrossSiteNavigationDataTransferFlag> const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[2]);
  LOBYTE(v4) = *(_BYTE *)v2[3];
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = *v2[4];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *v2[5];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  LOBYTE(v2) = *((_BYTE *)v2 + 48);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::RegistrableDomain const&,WebCore::RegistrableDomain const&,WebKit::DidFilterKnownLinkDecoration>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[1]);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, v2[2]);
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDE08;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDE08;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetCrossSiteLoadWithLinkDecorationForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCrossSiteLoadsWithLinkDecorationForTesting,WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDE30;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCrossSiteLoadsWithLinkDecorationForTesting,WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDE30;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetCrossSiteLoadsWithLinkDecorationForTesting,WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::resetCrossSiteLoadsWithLinkDecorationForTesting(PAL::SessionID,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDE58;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDE58;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DeleteCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DDE80;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    CFRelease(*(CFTypeRef *)(v3 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DDE80;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    CFRelease(*(CFTypeRef *)(v4 + 8));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>::call(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *a3;
  *a3 = 0;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E34DDEA8;
  v8[1] = v6;
  v8[2] = v7;
  v10 = v8;
  WebKit::WebsiteDataStore::removeData(v4, v5, a2, (uint64_t *)&v10);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *a1 = &off_1E34DDEA8;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)a1[1];
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl **v4;

  *(_QWORD *)this = &off_1E34DDEA8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF::StringImpl **)*((_QWORD *)this + 1);
  if (v4)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v4, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInUIProcessForRegistrableDomains(PAL::SessionID,WTF::OptionSet<WebKit::WebsiteDataType>,WTF::OptionSet<WebKit::WebsiteDataFetchOption>,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0::operator()(WTF::Vector<WebKit::WebsiteDataRecord,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, a1 + 8);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDED0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDED0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasIsolatedSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetAppBoundDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDEF8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetAppBoundDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDEF8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetAppBoundDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setAppBoundDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetManagedDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDF20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetManagedDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDF20;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetManagedDomainsForResourceLoadStatistics,WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setManagedDomainsForResourceLoadStatistics(PAL::SessionID,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldDowngradeReferrerForTesting,WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDF48;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldDowngradeReferrerForTesting,WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDF48;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldDowngradeReferrerForTesting,WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setShouldDowngradeReferrerForTesting(BOOL,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCookieBlockingMode,WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDF70;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCookieBlockingMode,WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDF70;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCookieBlockingMode,WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkProcessProxy::setThirdPartyCookieBlockingMode(PAL::SessionID,WebCore::ThirdPartyCookieBlockingMode,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDF98;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDF98;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetShouldEnbleSameSiteStrictEnforcementForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDFC0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDFC0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyWebsiteDataRemovalModeForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DDFE8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DDFE8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetToSameSiteStrictCookiesForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE010;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE010;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetFirstPartyHostCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE038;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE038;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetThirdPartyCNAMEDomainForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DE060;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::setDomainsWithCrossPageStorageAccess(WTF::HashMap<WebCore::RegistrableDomain,WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DE060;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *IPC::Connection::sendSync<Messages::NetworkProcess::ProcessWillSuspendImminentlyForTestingSync>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  IPC::Encoder *v18;
  uint64_t v19;
  char v20;

  v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3529, a2, &v19, (uint64_t *)&v18);
  if ((a3 & 1) != 0)
  {
    **((_BYTE **)v18 + 66) |= 4u;
    *(_BYTE *)(a1 + 96) = 1;
  }
  IPC::Connection::sendSyncMessage(a1, v19, (uint64_t *)&v18, a3, (uint64_t)&v16, a5);
  v9 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      v15 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(v15);
    }
    *(_BYTE *)a4 = v16;
  }
  else
  {
    v10 = v16;
    v16 = 0;
    *(_QWORD *)a4 = v10;
  }
  *(_DWORD *)(a4 + 16) = v9;
  ((void (*)(char *, uint64_t *))off_1E34DE078[v9])(&v20, &v16);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE098;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE098;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PrepareToSuspend,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DestroySession,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE0C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DestroySession,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE0C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::DestroySession,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0)#1},void,WebKit::NetworkProcessProxy::removeSession(WebKit::WebsiteDataStore &,WTF::CompletionHandler<void ()(WTF::String &&)> &&)::$_0>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v3 = 0;
    *((_QWORD *)result + 1) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v1 + 16))(v1, &v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
    result = v3;
    v3 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE0E8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE0E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetAllBackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE110;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE110;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetBackgroundFetchState,WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebKit::BackgroundFetchState> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, WTF::StringImpl **a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t result;
  WTF::StringImpl *v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  _BYTE v30[152];
  char v31;
  char v32;
  _BYTE v33[152];
  char v34;
  char v35;
  _BYTE v36[152];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a2)
    goto LABEL_27;
  v4 = *a2;
  if (!*a2)
    goto LABEL_27;
  v5 = a2[1];
  if ((unint64_t)v5 <= a2[2] - v4)
  {
    v15 = 0;
    v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    v17 = a2[3];
    if (v17)
    {
      if (v5)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v17 + 16))(v17, v4, v5);
        v15 = 0;
        v27 = *a2;
        v28 = a2[1];
        v29 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        v16 = 0;
        if (v29 && v28)
        {
          (*(void (**)(WTF::StringImpl *, WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v29 + 16))(v29, v27, v28);
          v16 = *a2;
          v15 = a2[1];
        }
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
    }
    goto LABEL_20;
  }
  v6 = a2[2];
  a2[2] = (WTF::StringImpl *)((char *)v6 + 1);
  v7 = *(unsigned __int8 *)v6;
  if (v7 >= 2)
  {
    v15 = v5;
    v16 = v4;
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    v18 = a2[3];
    if (v18 && v15)
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v18 + 16))(v18, v16);
    v33[0] = 0;
    v35 = 0;
LABEL_22:
    v10 = *a2;
    v19 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20 && v19)
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v20 + 16))(v20, v10);
    goto LABEL_11;
  }
  if (!v7)
  {
    v36[0] = 0;
    v37 = 0;
    v33[0] = 0;
    v34 = 0;
    v35 = 1;
    std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, (WTF::StringImpl *)a2);
    goto LABEL_11;
  }
  IPC::ArgumentCoder<WebKit::BackgroundFetchState,void>::decode((uint64_t *)a2, (uint64_t)v36);
  if (v37
    || (v8 = *a2, v25 = a2[1], *a2 = 0, a2[1] = 0, (v26 = a2[3]) != 0)
    && v25
    && ((*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v26 + 16))(v26, v8), v37))
  {
    std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::__optional_destruct_base[abi:sn180100]<WebKit::BackgroundFetchState>((uint64_t)v33, (uint64_t)v36);
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v33[0] = 0;
  }
  v35 = v9;
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v8);
  if (!v35)
    goto LABEL_22;
LABEL_11:
  if (!v35)
  {
    v30[0] = 0;
    v32 = 0;
LABEL_26:
    v21 = *a2;
    v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v23 = a2[3];
    if (v23)
    {
      if (v22)
      {
        (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(_QWORD *)v23 + 16))(v23, v21);
        if (v32)
          goto LABEL_17;
      }
    }
LABEL_27:
    v33[0] = 0;
    v34 = 0;
    v24 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v24 + 16))(v24, v33);
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v14 = v33;
    return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v13);
  }
  v30[0] = 0;
  v31 = 0;
  if (v34)
  {
    std::construct_at[abi:sn180100]<WebKit::BackgroundFetchState,WebKit::BackgroundFetchState,WebKit::BackgroundFetchState*>((uint64_t)v30, (uint64_t)v33);
    v31 = 1;
    v32 = 1;
    if (!v35)
      goto LABEL_17;
  }
  else
  {
    v32 = 1;
  }
  std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v33, v10);
  if (!v32)
    goto LABEL_26;
LABEL_17:
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v11 + 16))(v11, v30);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (!v32)
    return result;
  v14 = v30;
  return std::__optional_destruct_base<WebKit::BackgroundFetchState,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14, v13);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE138;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE138;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AbortBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE160;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE160;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::PauseBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE188;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE188;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResumeBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE1B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE1B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClickBackgroundFetch,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::requestStorageSpace(PAL::SessionID,WebCore::ClientOrigin const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)a1 = &off_1E34DE1D8;
  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E34DD428[v3])(&v6, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v4 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34DD428[v4])(&v7, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::requestStorageSpace(PAL::SessionID,WebCore::ClientOrigin const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  *(_QWORD *)this = &off_1E34DE1D8;
  v3 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 18);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34DD428[v4])(&v7, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v5 = *((unsigned int *)this + 10);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))off_1E34DD428[v5])(&v8, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::requestStorageSpace(PAL::SessionID,WebCore::ClientOrigin const&,unsigned long long,unsigned long long,unsigned long long,WTF::CompletionHandler<void ()(std::optional<unsigned long long>)> &&)::$_0,void,std::optional<unsigned long long>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _BYTE v15[24];
  int v16;
  _BYTE v17[24];
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if ((_BYTE)a3)
  {
    v4 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, a2, a3);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v5 = a1 + 16;
  if ((WebCore::operator==() & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0, 0);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  v14 = v7;
  v15[0] = 0;
  v16 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v15, a1 + 16);
  v17[0] = 0;
  v18 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v17, a1 + 48);
  v19 = *(_OWORD *)(a1 + 80);
  v20 = *(_QWORD *)(a1 + 96);
  v8 = WTF::fastMalloc((WTF *)0x68);
  *(_QWORD *)v8 = &off_1E34DE200;
  v9 = v14;
  v14 = 0;
  *(_QWORD *)(v8 + 8) = v9;
  *(_BYTE *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v8 + 16, (uint64_t)v15);
  *(_BYTE *)(v8 + 48) = 0;
  *(_DWORD *)(v8 + 72) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,(std::__variant_detail::_Trait)1> const&>(v8 + 48, (uint64_t)v17);
  v10 = v19;
  *(_QWORD *)(v8 + 96) = v20;
  *(_OWORD *)(v8 + 80) = v10;
  v12 = v8;
  WebKit::WebPageProxy::forMostVisibleWebPageIfAny(v6, v5, &v12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v18 != -1)
    ((void (*)(char *, _BYTE *))off_1E34DD428[v18])(&v13, v17);
  v18 = -1;
  if (v16 != -1)
    ((void (*)(char *, _BYTE *))off_1E34DD428[v16])(&v13, v15);
  v16 = -1;
  result = v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_EUlPSK_E_vJPNS2_12WebPageProxyEEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  char v7;

  *(_QWORD *)a1 = &off_1E34DE200;
  v2 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E34DD428[v2])(&v6, a1 + 48);
  *(_DWORD *)(a1 + 72) = -1;
  v3 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E34DD428[v3])(&v7, a1 + 16);
  *(_DWORD *)(a1 + 40) = -1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_EUlPSK_E_vJPNS2_12WebPageProxyEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  *(_QWORD *)this = &off_1E34DE200;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34DD428[v3])(&v7, (char *)this + 48);
  *((_DWORD *)this + 18) = -1;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34DD428[v4])(&v8, (char *)this + 16);
  *((_DWORD *)this + 10) = -1;
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_EUlPSK_E_vJPNS2_12WebPageProxyEEE4callESO_(_QWORD *a1, uint64_t a2)
{
  NSObject *v4;
  WTF::FileSystemImpl *v5;
  const WTF::String *v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  _QWORD *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint8_t buf[8];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE718E8;
  if (os_log_type_enabled((os_log_t)qword_1ECE718E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2 != 0;
    _os_log_impl(&dword_196BCC000, v4, OS_LOG_TYPE_DEFAULT, "NetworkProcessProxy::requestStorageSpace trying to get a visible page: %d", buf, 8u);
  }
  if (a2)
  {
    v5 = (WTF::FileSystemImpl *)WebCore::SecurityOriginData::host((WebCore::SecurityOriginData *)(a1 + 2));
    WTF::FileSystemImpl::encodeForFileName(v5, v6);
    *(_QWORD *)buf = " content";
    v26 = 9;
    result = (WTF::StringImpl *)WTF::tryMakeString<WTF::String,WTF::ASCIILiteral>((uint64_t *)&v23, (uint64_t *)buf, &v24);
    if (v24)
    {
      v9 = v23;
      v23 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v8);
        else
          *(_DWORD *)v9 -= 2;
      }
      v11 = *(_QWORD *)(a2 + 280);
      v12 = *(WTF::StringImpl **)(v11 + 272);
      v13 = *(_QWORD *)(v11 + 280);
      WebCore::SecurityOriginData::databaseIdentifier((WebCore::SecurityOriginData *)(a1 + 2));
      v14 = a1[10];
      v15 = a1[11];
      v16 = a1[12];
      v17 = a1[1];
      a1[1] = 0;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = &off_1E34DE228;
      v18[1] = v17;
      v22 = v18;
      WebKit::WebPageProxy::requestStorageSpace(a2, v12, v13, (WTF::StringImpl **)buf, (_DWORD **)&v24, (_DWORD **)&v24, v14, v15, v15, v16, (uint64_t *)&v22);
      v20 = (uint64_t)v22;
      v22 = 0;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      v21 = *(WTF::StringImpl **)buf;
      *(_QWORD *)buf = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v19);
        else
          *(_DWORD *)v21 -= 2;
      }
      result = v24;
      v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    v10 = a1[1];
    a1[1] = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0, 0);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_ENUlPSK_E_clINS2_12WebPageProxyEEESJ_SL_EUlSK_E_vJyEED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE228;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_ENUlPSK_E_clINS2_12WebPageProxyEEESJ_SL_EUlSK_E_vJyEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE228;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit19NetworkProcessProxy19requestStorageSpaceEN3PAL9SessionIDERKN7WebCore12ClientOriginEyyyONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEN3__0clISD_EEDaT_ENUlPSK_E_clINS2_12WebPageProxyEEESJ_SL_EUlSK_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a2, 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::increaseQuota(PAL::SessionID,WebCore::ClientOrigin const&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v9;
  char v10;

  *(_QWORD *)a1 = &off_1E34DE250;
  v3 = *(unsigned int *)(a1 + 88);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E34DD428[v3])(&v9, a1 + 64);
  *(_DWORD *)(a1 + 88) = -1;
  v4 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E34DD428[v4])(&v10, a1 + 32);
  *(_DWORD *)(a1 + 56) = -1;
  v5 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::increaseQuota(PAL::SessionID,WebCore::ClientOrigin const&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long)::$_0,void,std::optional<unsigned long long>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v9;
  char v10;

  *(_QWORD *)this = &off_1E34DE250;
  v3 = *((unsigned int *)this + 22);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34DD428[v3])(&v9, (char *)this + 64);
  *((_DWORD *)this + 22) = -1;
  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))off_1E34DD428[v4])(&v10, (char *)this + 32);
  *((_DWORD *)this + 14) = -1;
  v5 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::increaseQuota(PAL::SessionID,WebCore::ClientOrigin const&,WTF::ObjectIdentifierGeneric<WebKit::QuotaIncreaseRequestIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,unsigned long long,unsigned long long)::$_0,void,std::optional<unsigned long long>>::call(IPC::Encoder *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  IPC::Encoder *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  void *v13;
  uint64_t v14[2];
  uint64_t v15;
  char v16;
  IPC::Encoder *v17;

  v14[0] = a2;
  v14[1] = a3;
  v3 = *((_QWORD *)result + 2);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    v4 = result;
    v5 = *((_QWORD *)result + 1);
    v6 = (uint64_t)result + 32;
    v7 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v7 = 381;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 528) = v7 + 16;
    *(_QWORD *)(v7 + 536) = v7 + 16;
    *(_OWORD *)(v7 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v7 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v7);
    v17 = (IPC::Encoder *)v7;
    v8 = *((_QWORD *)v4 + 3);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v8;
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode((IPC::Encoder *)v7, v6);
    v9 = *((_QWORD *)v4 + 12);
    *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v7, 8uLL, 8) = v9;
    IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>((IPC::Encoder *)v7, v14);
    LOBYTE(v15) = 0;
    v16 = 0;
    WebKit::AuxiliaryProcessProxy::sendMessage(v5, &v17, 0, (uint64_t)&v15, 1);
    if (v16)
    {
      v11 = v15;
      v15 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    result = v17;
    v17 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    while (1)
    {
      v10 = (uint64_t *)(v4 + 16 * v9);
      v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = *(_QWORD *)(v14 + 16 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (v22);
          v23 = (uint64_t *)(v14 + 16 * v21);
          v24 = v23[1];
          v23[1] = 0;
          if (v24)
            WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v24 + 8), v8);
          *v23 = *v10;
          v25 = v4 + 16 * v9;
          v26 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          v23[1] = v26;
          v13 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(v25 + 8) = 0;
          if (!v13)
            goto LABEL_19;
LABEL_18:
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaSessionHelper,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v13 + 8), v8);
          goto LABEL_19;
        }
        v12 = v4 + 16 * v9;
        v13 = *(_QWORD *)(v12 + 8);
        *(_QWORD *)(v12 + 8) = 0;
        if (v13)
          goto LABEL_18;
      }
LABEL_19:
      if (++v9 == v5)
        return WTF::fastFree((WTF *)(v4 - 16), v8);
    }
  }
  if (v4)
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;

  v1 = *a1;
  if (*a1 && (v2 = *(_DWORD *)(v1 - 4)) != 0)
    v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  else
    v3 = 8;
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::RefPtr<WebKit::ProcessAssertion,WTF::RawPtrTraits<WebKit::ProcessAssertion>,WTF::DefaultRefDerefTraits<WebKit::ProcessAssertion>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(a1, v3);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::StoredCredentialsPolicy,std::optional<WebKit::NavigatingToAppBoundDomain> const&>,0ul,1ul,2ul,3ul,4ul,5ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = *a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v6;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)a2[3]);
  LOBYTE(v6) = *((_BYTE *)a2 + 32);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v6;
  return IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL> const&>(a1, (char *)a2[5]);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE278;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE278;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetQuota,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE2A0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE2A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ResetStoragePersistedState,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE2C8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE2C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasAppBoundSession,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE2F0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE2F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearAppBoundSession,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::getAppBoundDomains(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE318;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::getAppBoundDomains(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE318;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl **WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::getAppBoundDomains(PAL::SessionID,WTF::CompletionHandler<void ()(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> &&)> &&)::$_0,void,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl **result;
  WTF::StringImpl **v6;

  WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::HashTable((uint64_t *)&v6, a2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl ***))(*(_QWORD *)v3 + 16))(v3, &v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  result = v6;
  if (v6)
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v6, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE340;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE340;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::UpdateBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE368;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE368;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ClearBundleIdentifier,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE390;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE390;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::GetPendingPushMessages,WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7), !v8))
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(v6, v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  }
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v7);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (v8)
    return WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1)#1},void,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DE3B8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1)#1},void,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DE3B8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1)#1},void,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  WTF::StringImpl *v6;
  _BYTE v7[8];
  _BYTE v8[144];
  char v9;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>>(a2, v7);
  if (!v9)
    return IPC::Connection::cancelReply<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(v2);
  v3 = v7[0];
  v4 = *v2;
  *v2 = 0;
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v4 + 16))(v4, v3, v8);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (v9)
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v6);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkProcess::ProcessPushMessage,WebKit::NetworkProcessProxy::processPushMessage(PAL::SessionID,WebKit::WebPushMessage const&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &&)> &&)::$_1>(uint64_t *a1)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _BYTE v4[144];

  v4[0] = 0;
  v4[136] = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _QWORD, _BYTE *))(*(_QWORD *)v1 + 16))(v1, 0, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[152])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  __int16 v17;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v8 = 0;
    v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    v10 = a1[3];
    if (v10)
    {
      v13 = a1;
      v16 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        a1 = v13;
        a2 = v16;
        v9 = *v13;
        v8 = v13[1];
      }
      else
      {
        v8 = 0;
        v9 = 0;
      }
    }
    goto LABEL_7;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    v8 = v2;
    v9 = 0;
LABEL_7:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v12 = a1;
      v15 = a2;
      if (v8)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v9, v8);
        a1 = v12;
        a2 = v15;
        v3 = *v12;
        v2 = v12[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_8;
  }
  v6 = *v5;
  if (v6 < 2)
  {
    v17 = (v6 != 0) | 0x100;
    return IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder,BOOL>(a1, &v17, a2);
  }
LABEL_8:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v2)
    {
      v14 = a2;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v3);
      a2 = v14;
    }
  }
  *a2 = 0;
  a2[152] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<BOOL,std::optional<WebCore::NotificationPayload>>,void>::decode<IPC::Decoder,BOOL>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v6;
  _BYTE v7[144];
  char v8;

  result = IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>(a1, v7);
  if (v8)
  {
    if (a2[1])
    {
      *a3 = *a2;
      result = std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)(a3 + 8), (uint64_t)v7);
      a3[152] = 1;
      if (v8)
        return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v6);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *a3 = 0;
    a3[152] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::NotificationPayload>>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[144])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::NotificationPayload>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  WTF::StringImpl *v8;
  char v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  _BYTE v17[136];
  char v18;

  v3 = a1[1];
  v4 = *a1;
  v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    v11 = 0;
    v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13)
    {
      v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
        a1 = v16;
        v12 = *v16;
        v11 = v16[1];
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
    }
    goto LABEL_13;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v11 = v3;
    v12 = 0;
LABEL_13:
    v3 = 0;
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      v15 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v14 + 16))(v14, v12, v11);
        a1 = v15;
        v4 = *v15;
        v3 = v15[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_14;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::NotificationPayload>(a1, v17);
      v9 = v18;
      if (!v18)
      {
        *a2 = 0;
        goto LABEL_10;
      }
      std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>((uint64_t)a2, (uint64_t)v17);
    }
    else
    {
      v17[0] = 0;
      v18 = 0;
      std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)a2, (uint64_t)v17);
    }
    v9 = 1;
LABEL_10:
    a2[144] = v9;
    return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v17, v8);
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  result = a1[3];
  if (result)
  {
    if (v3)
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v4);
  }
  *a2 = 0;
  a2[144] = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::NotificationPayload>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  WTF::StringImpl *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::NotificationPayload,void>::decode(a1, a2);
  if (!a2[136])
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (WTF::StringImpl *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  WTF::URL::URL(a1, (uint64_t *)a2);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(a2 + 48);
  std::__optional_copy_assign_base<WebCore::NotificationOptionsPayload,false>::__optional_copy_assign_base[abi:sn180100](v5 + 64, a2 + 64);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = 1;
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessNotificationEvent,WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DE3E0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessNotificationEvent,WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DE3E0;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::ProcessNotificationEvent,WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1>(WebKit::NetworkProcessProxy::processNotificationEvent(WebCore::NotificationData const&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

char *IPC::ArgumentCoder<std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<PAL::SessionID const&,WebCore::SecurityOriginData const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(a1, (uint64_t)v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE408;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE408;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::SetPushAndNotificationsEnabledForOrigin,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(WTF::CompletionHandler<void ()(unsigned int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE430;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(WTF::CompletionHandler<void ()(unsigned int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE430;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::RemovePushSubscriptionsForOrigin,WTF::CompletionHandler<void ()(unsigned int)>>(WTF::CompletionHandler<void ()(unsigned int)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<float>>(a2), (v3 & 0xFF00000000) != 0))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE458;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE458;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::HasPushSubscriptionForTesting,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  unsigned __int16 v3;
  uint64_t v4;

  if (a2 && *a2 && (v3 = IPC::Decoder::decode<std::tuple<BOOL>>(a2), v3 >= 0x100u))
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v4 + 16))(v4, v3 != 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 16))(v4, 0);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

char *IPC::ArgumentCoder<std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,void>::encode<IPC::Encoder,std::tuple<WebKit::RemoteWorkerType,PAL::SessionID const&,WebCore::RegistrableDomain const&,WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char *result;

  v4 = *(_BYTE *)a2;
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  v5 = **(_QWORD **)(a2 + 8);
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *(uint64_t **)(a2 + 16));
  v6 = **(_QWORD **)(a2 + 24);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)>,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE480;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)>,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE480;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>> &&)>,void,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::call(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 16))(v3, v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DE4A8;
  v2 = a1[3];
  a1[3] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DE4A8;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[1];
    v4 = a1[2];
    v7 = 134218240;
    v8 = v3;
    v9 = 2048;
    v10 = v4;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin - webPageProxyID=%llu - END", (uint8_t *)&v7, 0x16u);
  }
  v5 = a1[3];
  a1[3] = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigin,WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DE4D0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::DeleteWebsiteDataForOrigin,WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::deleteWebsiteDataInWebProcessesForOrigin(WTF::OptionSet<WebKit::WebsiteDataType>,WebCore::ClientOrigin const&,PAL::SessionID,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DE4D0;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E34DE4F8;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E34DE4F8;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 16));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = qword_1ECE71C68;
  if (os_log_type_enabled((os_log_t)qword_1ECE71C68, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 8);
    v6 = 134217984;
    v7 = v3;
    _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "%p - NetworkProcessProxy::reloadExecutionContextsForOrigin END", (uint8_t *)&v6, 0xCu);
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReloadExecutionContextsForOrigin,WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E34DE520;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref((unsigned int **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcess::ReloadExecutionContextsForOrigin,WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1>(WebKit::NetworkProcessProxy::reloadExecutionContextsForOrigin(WebCore::ClientOrigin const&,PAL::SessionID,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::CompletionHandler<void ()(void)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(unsigned int **a1)
{
  void *v2;

  *a1 = (unsigned int *)off_1E34DE520;
  WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>,WTF::DefaultRefDerefTraits<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>>>::~Ref(a1 + 1);
  return WTF::fastFree((WTF *)a1, v2);
}

unsigned int **WTF::WeakHashMap<WebKit::WebProcessProxy,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultWeakPtrImpl>::removeNullReferences(unsigned int **result, void *a2)
{
  unsigned int **v2;
  unsigned int *v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  unsigned int v21;

  v2 = result;
  v3 = *result;
  if (*result)
  {
    v4 = *(v3 - 1);
    if (!v4)
      goto LABEL_21;
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      v7 = v6;
      result = (unsigned int **)&v3[6 * v6];
      if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
      {
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(result, a2);
        result = *(unsigned int ***)&v3[6 * v6 + 4];
        if (result)
          result = (unsigned int **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)result, (WTF::StringImpl *)a2);
        ++v5;
      }
      --v6;
    }
    while (v7);
    v3 = *v2;
    if (v5)
    {
      *(v3 - 4) += v5;
      v8 = *v2;
      if (*v2)
        v9 = *(v8 - 3);
      else
        v9 = 0;
      *(v8 - 3) = v9 - v5;
      v3 = *v2;
    }
    if (v3)
    {
      v10 = *(v3 - 1);
      v11 = *(v3 - 3);
      if (v10 >= 9 && 6 * (int)v11 < v10)
      {
        v15 = (v11 - 1) | ((v11 - 1) >> 1) | ((((_DWORD)v11 - 1) | ((v11 - 1) >> 1)) >> 2);
        v16 = v15 | (v15 >> 4) | ((v15 | (v15 >> 4)) >> 8);
        v17 = (v16 | HIWORD(v16)) + 1;
        if (v17 > 0x400)
        {
          if (v17 > 2 * v11)
            goto LABEL_32;
        }
        else if (3 * v17 > 4 * v11)
        {
LABEL_30:
          v18 = (double)v11;
          v19 = (double)v17;
          v20 = 0.604166667;
          goto LABEL_33;
        }
        LODWORD(v17) = 2 * v17;
        if (v17 <= 0x400)
          goto LABEL_30;
LABEL_32:
        v18 = (double)v11;
        v19 = (double)v17;
        v20 = 0.416666667;
LABEL_33:
        if (v19 * v20 <= v18)
          LODWORD(v17) = 2 * v17;
        if (v17 <= 8)
          v21 = 8;
        else
          v21 = v17;
        result = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash((uint64_t *)v2, v21, 0);
        v3 = *v2;
        *((_DWORD *)v2 + 2) = 0;
        if (!v3)
        {
          v13 = 0;
          goto LABEL_25;
        }
LABEL_22:
        v13 = *(v3 - 3);
        v14 = 0x7FFFFFFF;
        if (v13 >= 0x7FFFFFFF)
          goto LABEL_26;
        goto LABEL_25;
      }
LABEL_21:
      *((_DWORD *)v2 + 2) = 0;
      goto LABEL_22;
    }
  }
  v13 = 0;
  *((_DWORD *)v2 + 2) = 0;
LABEL_25:
  v14 = v13;
LABEL_26:
  *((_DWORD *)v2 + 3) = 2 * v14;
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(uint64_t *a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  unsigned int **v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  _QWORD *v26;
  WTF::StringImpl **v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_QWORD *)(v7 + 32);
    do
    {
      *(v10 - 2) = 0;
      *((_BYTE *)v10 - 8) = 0;
      *v10 = 0;
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (unsigned int **)(v4 + 24 * v11);
      v15 = *v14;
      if (*v14 != (unsigned int *)-1)
      {
        if (v15)
        {
          v18 = *a1;
          if (*a1)
            v19 = *(_DWORD *)(v18 - 8);
          else
            v19 = 0;
          v20 = WTF::PtrHashBase<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,true>::hash((_QWORD *)(v4 + 24 * v11));
          v21 = 0;
          do
          {
            v22 = v20 & v19;
            v23 = (unsigned int **)(v18 + 24 * (v20 & v19));
            v20 = ++v21 + (v20 & v19);
          }
          while (*v23);
          v24 = v18 + 24 * v22;
          v27 = *(WTF::StringImpl ***)(v24 + 16);
          v26 = (_QWORD *)(v24 + 16);
          v25 = v27;
          if (v27)
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v8);
            v35 = *v23;
            *v23 = 0;
            if (v35)
            {
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                atomic_store(1u, v35);
                WTF::fastFree((WTF *)v35, v8);
              }
            }
          }
          else
          {
            *v23 = 0;
          }
          v28 = *v14;
          *v14 = 0;
          *v23 = v28;
          v29 = v4 + 24 * v11;
          *(_BYTE *)(v18 + 24 * v22 + 8) = *(_BYTE *)(v29 + 8);
          *v26 = 0;
          v30 = *(_QWORD *)(v29 + 16);
          *(_QWORD *)(v29 + 16) = 0;
          *v26 = v30;
          v31 = *(WTF::StringImpl ***)(v29 + 16);
          if (v31)
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v8);
          v32 = *v14;
          *v14 = 0;
          if (v32)
          {
            do
            {
              v33 = __ldaxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
            {
              atomic_store(1u, v32);
              WTF::fastFree((WTF *)v32, v8);
            }
          }
          if (v14 == a3)
            v12 = v18 + 24 * v22;
        }
        else
        {
          if (*(_QWORD *)(v4 + 24 * v11 + 16))
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*(WTF::StringImpl ***)(v4 + 24 * v11 + 16), v8);
            v15 = *v14;
          }
          *v14 = 0;
          if (v15)
          {
            do
            {
              v16 = __ldaxr(v15);
              v17 = v16 - 1;
            }
            while (__stlxr(v17, v15));
            if (!v17)
            {
              atomic_store(1u, v15);
              WTF::fastFree((WTF *)v15, v8);
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

uint64_t WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::expand(uint64_t *a1, unsigned int **a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<std::pair<WebKit::LoadedWebArchive,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::rehash(a1, v5, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34DE548;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34DE548;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcess::AddAllowedFirstPartyForCookies,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34DE570;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::AuxiliaryProcessProxy,(WTF::DestructionThread)2>::derefAllowingPartiallyDestroyed(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 16) + 8))(*(_QWORD *)(a1 + 8) - 16);
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(a1, (WebCore::ResourceRequest *)a2[1]);
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)a2[2]);
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::ResourceResponse const&,WebKit::CacheStoragePolicy>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  uint64_t v4;
  char *result;

  v2 = a2;
  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(a1, (WebCore::ResourceResponseBase *)v2[1]);
  LOBYTE(v2) = *((_BYTE *)v2 + 16);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

_QWORD *WebKit::ServiceWorkerNotificationHandler::singleton(WebKit::ServiceWorkerNotificationHandler *this)
{
  _QWORD *result;

    return (_QWORD *)WebKit::ServiceWorkerNotificationHandler::singleton(void)::handler;
  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E34DEB08;
  WebKit::ServiceWorkerNotificationHandler::singleton(void)::handler = (uint64_t)result;
  return result;
}

uint64_t WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(WebKit::ServiceWorkerNotificationHandler *this, const WTF::UUID *a2)
{
  uint64_t v2;
  unsigned int v5;
  WebKit *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v21;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v5 = *(_DWORD *)(v2 - 8);
  LODWORD(v21) = -1640531527;
  WORD2(v21) = 0;
  BYTE6(v21) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(&v21, a2);
  v6 = (WebKit *)WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v21);
  v7 = *(_QWORD *)a2;
  v8 = *((_QWORD *)a2 + 1);
  v9 = v6 & v5;
  v10 = (uint64_t *)(v2 + 32 * v9);
  v11 = *v10;
  v12 = v10[1];
  if (v12 != v8 || v11 != v7)
  {
    v14 = 1;
    while (v11 | v12)
    {
      v9 = ((_DWORD)v9 + v14) & v5;
      v15 = (uint64_t *)(v2 + 32 * v9);
      v11 = *v15;
      v12 = v15[1];
      v16 = v12 == v8 && v11 == v7;
      ++v14;
      if (v16)
        goto LABEL_13;
    }
    v18 = *((_QWORD *)this + 2);
    if (!v18)
      return 0;
    v17 = v18 + 32 * *(unsigned int *)(v18 - 4);
    goto LABEL_17;
  }
LABEL_13:
  v17 = v2 + 32 * v9;
  v18 = *((_QWORD *)this + 2);
  if (v18)
LABEL_17:
    v18 += 32 * *(unsigned int *)(v18 - 4);
  if (v18 != v17)
  {
    v21 = *(_QWORD *)(v17 + 16);
    v19 = WebKit::allDataStores(v6);
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v19, &v21);
  }
  return 0;
}

uint64_t WebKit::ServiceWorkerNotificationHandler::showNotification(uint64_t a1, WTF::ThreadSafeWeakPtrControlBlock **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v9;
  _BOOL8 v10;
  uint64_t *v11;
  uint64_t v12;
  WebKit::WebsiteDataStore *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v34[2];

  v9 = qword_1ECE716B8;
  v10 = os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    LOWORD(v34[0]) = 0;
    _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "ServiceWorkerNotificationHandler showNotification called", (uint8_t *)v34, 2u);
  }
  v34[0] = *(_QWORD *)(a3 + 192);
  v11 = WebKit::allDataStores((WebKit *)v10);
  v12 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>(v11, v34);
  if (v12)
  {
    v13 = (WebKit::WebsiteDataStore *)v12;
    v16 = *(_QWORD *)(a1 + 16);
    v14 = (uint64_t *)(a1 + 16);
    v15 = v16;
    v17 = (_QWORD *)(a3 + 144);
    if (v16
      || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v14),
          (v15 = *v14) != 0))
    {
      v18 = *(_DWORD *)(v15 - 8);
    }
    else
    {
      v18 = 0;
    }
    LODWORD(v34[0]) = -1640531527;
    WORD2(v34[0]) = 0;
    BYTE6(v34[0]) = 0;
    WTF::addArgs<WebCore::ProcessQualified<WTF::UUID>>(v34, (_QWORD *)(a3 + 144));
    v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v34) & v18;
    v20 = (_QWORD *)(v15 + 32 * v19);
    v22 = *v20;
    v21 = v20[1];
    if (*(_OWORD *)v20 != 0)
    {
      v23 = 0;
      v24 = 1;
      while (v21 != *(_QWORD *)(a3 + 152) || v22 != *v17)
      {
        if (!(v22 ^ 1 | v21))
          v23 = v20;
        v19 = ((_DWORD)v19 + v24) & v18;
        v20 = (_QWORD *)(v15 + 32 * v19);
        v22 = *v20;
        v21 = v20[1];
        ++v24;
        if (*(_OWORD *)v20 == 0)
        {
          if (v23)
          {
            *v23 = 0;
            v23[1] = 0;
            v23[2] = 0;
            --*(_DWORD *)(*v14 - 16);
            v20 = v23;
          }
          goto LABEL_18;
        }
      }
      goto LABEL_27;
    }
LABEL_18:
    *(_OWORD *)v20 = *(_OWORD *)v17;
    v20[2] = *(_QWORD *)(a3 + 192);
    v26 = *v14;
    if (*v14)
      v27 = *(_DWORD *)(v26 - 12) + 1;
    else
      v27 = 1;
    *(_DWORD *)(v26 - 12) = v27;
    v28 = *v14;
    if (*v14)
      v29 = *(_DWORD *)(v28 - 12);
    else
      v29 = 0;
    v30 = (*(_DWORD *)(v28 - 16) + v29);
    v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30)
        goto LABEL_27;
    }
    else if (3 * v31 > 4 * v30)
    {
LABEL_27:
      WebKit::WebsiteDataStore::showPersistentNotification(v13, a2, (WTF::StringImpl **)a3);
      goto LABEL_28;
    }
    WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(v14);
    goto LABEL_27;
  }
LABEL_28:
  v32 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
}

void WebKit::ServiceWorkerNotificationHandler::cancelNotification(WebKit::ServiceWorkerNotificationHandler *this, const WTF::UUID *a2)
{
  WebKit::WebNotificationManagerProxy *v3;
  WebKit *v4;
  WebKit::WebPageProxy *v5;

  v3 = (WebKit::WebNotificationManagerProxy *)WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(this, a2);
  if (v3)
  {
    v4 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v3);
    WebKit::WebNotificationManagerProxy::cancel(v4, v5, a2);
  }
}

WTF *WebKit::ServiceWorkerNotificationHandler::clearNotifications(WTF *this, uint64_t a2)
{
  uint64_t v2;
  WebKit::ServiceWorkerNotificationHandler *v3;
  const WTF::UUID *v4;
  uint64_t v5;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = this;
    v4 = *(const WTF::UUID **)a2;
    v5 = 16 * v2;
    do
    {
      this = (WTF *)WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(v3, v4);
      if (this)
        this = WebKit::WebsiteDataStore::clearServiceWorkerNotification(this, v4);
      v4 = (const WTF::UUID *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
  }
  return this;
}

void WebKit::ServiceWorkerNotificationHandler::didDestroyNotification(WebKit::ServiceWorkerNotificationHandler *this, const WTF::UUID *a2)
{
  WebKit::WebNotificationManagerProxy *v3;
  WebKit *v4;
  WebKit::WebPageProxy *v5;

  v3 = (WebKit::WebNotificationManagerProxy *)WebKit::ServiceWorkerNotificationHandler::dataStoreForNotificationID(this, a2);
  if (v3)
  {
    v4 = WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(v3);
    WebKit::WebNotificationManagerProxy::didDestroyNotification(v4, v5, a2);
  }
}

uint64_t WebKit::WebNotification::WebNotification(uint64_t a1, WTF::StringImpl **a2, uint64_t a3, _OWORD *a4, WTF::ThreadSafeWeakPtrControlBlock **a5)
{
  __int128 v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  uint64_t v13;

  *(_QWORD *)a1 = off_1E34CC2A8;
  WebKit::InitializeWebKit2((WebKit *)a1);
  *(_QWORD *)a1 = &off_1E34DEB68;
  *(_QWORD *)(a1 + 16) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)a1 = &off_1E34DE598;
  WebCore::NotificationData::NotificationData((WebCore::NotificationData *)(a1 + 32), (const WebCore::NotificationData *)a2);
  API::SecurityOrigin::createFromString(a2 + 11, &v13);
  *(_QWORD *)(a1 + 272) = v13;
  *(_QWORD *)(a1 + 280) = a3;
  v10 = a4[1];
  *(_OWORD *)(a1 + 288) = *a4;
  *(_OWORD *)(a1 + 304) = v10;
  if (a5)
  {
    v11 = *a5;
    if (*a5)
      v11 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v11);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(a1 + 320) = v11;
  *(_QWORD *)(a1 + 328) = a5;
  return a1;
}

uint64_t WebKit::WebNotificationManagerMessageHandler::showNotification(uint64_t a1, WTF::ThreadSafeWeakPtrControlBlock **a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  NSObject *v10;
  _BOOL8 v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;
  uint8_t v17[16];

  v10 = qword_1ECE716B8;
  v11 = os_log_type_enabled((os_log_t)qword_1ECE716B8, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "WebNotificationManagerMessageHandler showNotification called", v17, 2u);
  }
  v12 = *(_QWORD *)(a3 + 96);
  if (v12 && *(_DWORD *)(v12 + 4))
  {
    v13 = WebKit::ServiceWorkerNotificationHandler::singleton((WebKit::ServiceWorkerNotificationHandler *)v11);
    return WebKit::ServiceWorkerNotificationHandler::showNotification((uint64_t)v13, a2, a3, v14, a5);
  }
  else
  {
    WebKit::WebPageProxy::showNotification(*(_QWORD *)(a1 + 16), a2, (WTF::StringImpl **)a3, a4);
    v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

void WebKit::WebNotificationManagerMessageHandler::cancelNotification(WebKit::WebPageProxy **this, const WTF::UUID *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6[2];

  v4 = WebKit::ServiceWorkerNotificationHandler::singleton((WebKit::ServiceWorkerNotificationHandler *)this);
  v5 = *((_QWORD *)a2 + 1);
  v6[0] = *(_QWORD *)a2;
  v6[1] = v5;
  if (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v4[2], v6))WebKit::ServiceWorkerNotificationHandler::cancelNotification((WebKit::ServiceWorkerNotificationHandler *)v4, a2);
  else
    WebKit::WebPageProxy::cancelNotification(this[2], a2);
}

WTF *WebKit::WebNotificationManagerMessageHandler::clearNotifications(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  WTF *v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  WTF *v19;
  __int128 v20;
  char *v21;
  WTF *v22;
  WTF *result;
  WTF *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28[2];

  v4 = WebKit::ServiceWorkerNotificationHandler::singleton((WebKit::ServiceWorkerNotificationHandler *)a1);
  v26 = 0;
  v27 = 0;
  v24 = 0;
  v25 = 0;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    if (v6 >> 28)
      goto LABEL_26;
    v7 = v4;
    LODWORD(v27) = *(_DWORD *)(a2 + 12);
    v26 = (WTF *)WTF::fastMalloc((WTF *)(16 * v6));
    v8 = *(unsigned int *)(a2 + 12);
    if (!(_DWORD)v8)
      goto LABEL_19;
    if (v8 >> 28)
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x1974558D8);
    }
    LODWORD(v25) = *(_DWORD *)(a2 + 12);
    v24 = (WTF *)WTF::fastMalloc((WTF *)(16 * v8));
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)a2;
      v11 = 16 * v9;
      do
      {
        v12 = v10[1];
        v28[0] = *v10;
        v28[1] = v12;
        if (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v7[2], v28))
        {
          v13 = HIDWORD(v27);
          if (HIDWORD(v27) == (_DWORD)v27)
          {
            v14 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, HIDWORD(v27) + 1, (unint64_t)v10);
            v13 = HIDWORD(v27);
            v15 = v26;
            v16 = *v14;
          }
          else
          {
            v15 = v26;
            v16 = *(_OWORD *)v10;
          }
          *((_OWORD *)v15 + v13) = v16;
          v21 = (char *)&v27 + 4;
        }
        else
        {
          v17 = HIDWORD(v25);
          if (HIDWORD(v25) == (_DWORD)v25)
          {
            v18 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v24, HIDWORD(v25) + 1, (unint64_t)v10);
            v17 = HIDWORD(v25);
            v19 = v24;
            v20 = *v18;
          }
          else
          {
            v19 = v24;
            v20 = *(_OWORD *)v10;
          }
          *((_OWORD *)v19 + v17) = v20;
          v21 = (char *)&v25 + 4;
        }
        ++*(_DWORD *)v21;
        v10 += 2;
        v11 -= 16;
      }
      while (v11);
      if (HIDWORD(v27))
        WebKit::ServiceWorkerNotificationHandler::clearNotifications((WTF *)v7, (uint64_t)&v26);
    }
  }
LABEL_19:
  if (HIDWORD(v25))
    WebKit::WebPageProxy::clearNotifications(a1[2], (uint64_t)&v24);
  v22 = v24;
  if (v24)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v22, v5);
  }
  result = v26;
  if (v26)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return (WTF *)WTF::fastFree(result, v5);
  }
  return result;
}

void WebKit::WebNotificationManagerMessageHandler::didDestroyNotification(WebKit::WebPageProxy **this, const WTF::UUID *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6[2];

  v4 = WebKit::ServiceWorkerNotificationHandler::singleton((WebKit::ServiceWorkerNotificationHandler *)this);
  v5 = *((_QWORD *)a2 + 1);
  v6[0] = *(_QWORD *)a2;
  v6[1] = v5;
  if (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,PAL::SessionID>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,PAL::SessionID>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,PAL::SessionID,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v4[2], v6))WebKit::ServiceWorkerNotificationHandler::didDestroyNotification((WebKit::ServiceWorkerNotificationHandler *)v4, a2);
  else
    WebKit::WebPageProxy::didDestroyNotification(this[2], a2);
}

void WebKit::WebNotificationManagerMessageHandler::pageWasNotifiedOfNotificationPermission(WebKit::WebPageProxy **this)
{
  WebKit::WebPageProxy::pageWillLikelyUseNotifications(this[2]);
}

_QWORD *WebKit::WebNotificationManagerProxy::create@<X0>(WebKit::WebNotificationManagerProxy *this@<X0>, WebKit **a2@<X8>)
{
  WebKit *v5;
  _QWORD *result;

  v5 = (WebKit *)API::Object::newObject(0x38uLL, 81);
  *(_QWORD *)v5 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v5);
  *(_QWORD *)v5 = &off_1E34DE620;
  *((_QWORD *)v5 + 2) = &unk_1E34DE660;
  *((_QWORD *)v5 + 3) = this;
  result = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *result = off_1E34DEC68;
  *((_QWORD *)v5 + 4) = result;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *a2 = v5;
  return result;
}

WebKit *WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(WebKit::WebNotificationManagerProxy *this)
{
  WebKit *result;
  WebKit *v2;
  _QWORD *v3;

    return (WebKit *)WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(void)::sharedManager;
  v2 = (WebKit *)API::Object::newObject(0x38uLL, 81);
  *(_QWORD *)v2 = off_1E34CC2A8;
  WebKit::InitializeWebKit2(v2);
  *(_QWORD *)v2 = &off_1E34DE620;
  *((_QWORD *)v2 + 2) = &unk_1E34DE660;
  *((_QWORD *)v2 + 3) = 0;
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  result = v2;
  *v3 = off_1E34DEC68;
  *((_QWORD *)v2 + 4) = v3;
  *((_QWORD *)v2 + 5) = 0;
  *((_QWORD *)v2 + 6) = 0;
  WebKit::WebNotificationManagerProxy::sharedServiceWorkerManager(void)::sharedManager = (uint64_t)v2;
  return result;
}

uint64_t WebKit::WebNotificationManagerProxy::setProvider(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v3 = *a2;
  if (*a2)
  {
    *a2 = 0;
    v4 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v3;
    if (v4)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      v3 = *(_QWORD *)(a1 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 48))(v3, a1);
  }
  else
  {
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    *v6 = off_1E34DEC68;
    result = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v6;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

uint64_t WebKit::WebNotificationManagerProxy::processPoolDestroyed(WebKit::WebNotificationManagerProxy *this)
{
  return (*(uint64_t (**)(_QWORD, WebKit::WebNotificationManagerProxy *))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4), this);
}

CFTypeRef WebKit::WebNotificationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(this[1]);
}

CFTypeRef `non-virtual thunk to'WebKit::WebNotificationManagerProxy::refWebContextSupplement(CFTypeRef *this)
{
  return CFRetain(*(this - 1));
}

void WebKit::WebNotificationManagerProxy::derefWebContextSupplement(CFTypeRef *this)
{
  CFRelease(this[1]);
}

void WebKit::WebNotificationManagerProxy::show(uint64_t a1, uint64_t a2, WTF::ThreadSafeWeakPtrControlBlock **a3, WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 744);
  else
    v10 = 0;
  v11 = API::Object::newObject(0x150uLL, 80);
  LOBYTE(v14) = 0;
  v15 = 0;
  v13 = WebKit::WebNotification::WebNotification(v11, a4, v10, &v14, a3);
  WebKit::WebNotificationManagerProxy::showImpl(a1, a2, &v13, a5);
  v12 = v13;
  v13 = 0;
  if (v12)
    CFRelease(*(CFTypeRef *)(v12 + 8));
}

