_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordDrawEllipse(_QWORD *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  int v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v74;
  IPC::StreamClientConnection *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  _BYTE buf[24];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = this[481];
  if (!v2)
    return this;
  v3 = this;
  this = *(_QWORD **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v75);
  if (!v75)
    return this;
  v5 = v3[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v3[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_113;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v5);
LABEL_113:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v74 = __ldxr((unsigned __int8 *)v5);
  if (v74 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_119:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v7 = 0;
LABEL_7:
  v8 = v75;
  v9 = v3[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v77, v11);
      if (!v79)
        break;
      *(_QWORD *)buf = v77;
      *(_QWORD *)&buf[8] = v78;
      *(_QWORD *)&buf[16] = 0;
      v12 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= v77;
      v14 = v12 - v77;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v78)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v77 + v14) = 812;
          *(_QWORD *)&buf[16] = v14 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a2);
      if (*(_QWORD *)&buf[8])
      {
        v18 = *(_QWORD *)&buf[16];
        v19 = *((_QWORD *)v8 + 8);
        v20 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v8 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v8 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_79;
      }
      v26 = v79;
      if (v79)
      {
        v27 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = v27 - v77;
        if (v27 < v77)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v78)
          {
            *(_WORD *)(v77 + v28) = 2821;
            v29 = v28 + 2;
          }
        }
        v30 = *((_QWORD *)v8 + 8);
        v31 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *((_QWORD *)v8 + 7);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v29 <= 0x10)
          v29 = 16;
        v33 = v31 + v29;
        if (v32 <= v33)
          v33 = 0;
        *((_QWORD *)v8 + 9) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          __ldaxr(v34);
        while (__stlxr(v33, v34));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)v8 + 1);
        v35 = v76;
        v36 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v36 = 812;
        *(_QWORD *)(v36 + 8) = v9;
        *(_QWORD *)(v36 + 528) = v36 + 16;
        *(_QWORD *)(v36 + 536) = v36 + 16;
        *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v36 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
        *(_QWORD *)buf = v36;
        IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v36, (int *)a2);
        v38 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)buf, 1, 0);
        v39 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v40, v41);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76);
        if (!v38)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v45 = v17;
LABEL_53:
      v46 = (_QWORD *)((v26 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v46 >= v26 + v45)
      {
        v47 = (char *)v46 - v26;
        v38 = 17;
        if ((unint64_t)v46 - v26 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v45 = (unint64_t)(v47 + 8);
        if ((unint64_t)(v47 + 8) > v17)
          goto LABEL_74;
        *v46 = v9;
      }
      if (!v17)
      {
        v38 = 17;
        goto LABEL_74;
      }
      v48 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v8 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v50 = v48 + v45;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v8 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *((_DWORD *)v8 + 27);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v69 = v54 + 1;
        *((_DWORD *)v8 + 27) = v69;
        if (v69 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (buf[16])
    {
      v26 = *(_QWORD *)buf;
      v42 = *(_QWORD *)&buf[8];
      v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - *(_QWORD *)buf;
      if (v43 < *(_QWORD *)buf)
      {
        v45 = 0;
        v17 = *(_QWORD *)&buf[8];
      }
      else
      {
        v17 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v45 = 0;
        if (v44 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
          v17 = v42;
          v45 = v44 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v38 = 15;
LABEL_74:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v38);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawEllipse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = v3[481];
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_79:
  if ((v7 & 1) != 0)
    goto LABEL_96;
  v60 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v60))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v60))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v60);
LABEL_84:
  v62 = *(_QWORD *)(v60 + 8);
  v63 = v62 - 1;
  *(_QWORD *)(v60 + 8) = v62 - 1;
  if (v62 == 1)
  {
    v72 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v60 + 24) = 0;
    v65 = v72 != 0;
  }
  else
  {
    v64 = 0;
    v65 = 1;
  }
  v66 = __ldxr((unsigned __int8 *)v60);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v60))
    {
      if (!v63)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v60);
  if (!v63)
  {
LABEL_92:
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    if (!v65)
      WTF::fastFree((WTF *)v60, v16);
  }
LABEL_96:
  this = v75;
  v75 = 0;
  if (this)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)this);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)this));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordDrawPath(_QWORD *this, const WebCore::Path *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  int v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v74;
  IPC::StreamClientConnection *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  _BYTE buf[24];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = this[481];
  if (!v2)
    return this;
  v3 = this;
  this = *(_QWORD **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v75);
  if (!v75)
    return this;
  v5 = v3[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v3[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_113;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v5);
LABEL_113:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v74 = __ldxr((unsigned __int8 *)v5);
  if (v74 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_119:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v7 = 0;
LABEL_7:
  v8 = v75;
  v9 = v3[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v77, v11);
      if (!v79)
        break;
      *(_QWORD *)buf = v77;
      *(_QWORD *)&buf[8] = v78;
      *(_QWORD *)&buf[16] = 0;
      v12 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= v77;
      v14 = v12 - v77;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v78)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v77 + v14) = 821;
          *(_QWORD *)&buf[16] = v14 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
      if (*(_QWORD *)&buf[8])
      {
        v18 = *(_QWORD *)&buf[16];
        v19 = *((_QWORD *)v8 + 8);
        v20 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v8 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v8 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_79;
      }
      v26 = v79;
      if (v79)
      {
        v27 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = v27 - v77;
        if (v27 < v77)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v78)
          {
            *(_WORD *)(v77 + v28) = 2821;
            v29 = v28 + 2;
          }
        }
        v30 = *((_QWORD *)v8 + 8);
        v31 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *((_QWORD *)v8 + 7);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v29 <= 0x10)
          v29 = 16;
        v33 = v31 + v29;
        if (v32 <= v33)
          v33 = 0;
        *((_QWORD *)v8 + 9) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          __ldaxr(v34);
        while (__stlxr(v33, v34));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)v8 + 1);
        v35 = v76;
        v36 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v36 = 821;
        *(_QWORD *)(v36 + 8) = v9;
        *(_QWORD *)(v36 + 528) = v36 + 16;
        *(_QWORD *)(v36 + 536) = v36 + 16;
        *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v36 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
        *(_QWORD *)buf = v36;
        IPC::ArgumentCoder<WebCore::Path,void>::encode((IPC::Encoder *)v36, a2);
        v38 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)buf, 1, 0);
        v39 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v40, v41);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76);
        if (!v38)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v45 = v17;
LABEL_53:
      v46 = (_QWORD *)((v26 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v46 >= v26 + v45)
      {
        v47 = (char *)v46 - v26;
        v38 = 17;
        if ((unint64_t)v46 - v26 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v45 = (unint64_t)(v47 + 8);
        if ((unint64_t)(v47 + 8) > v17)
          goto LABEL_74;
        *v46 = v9;
      }
      if (!v17)
      {
        v38 = 17;
        goto LABEL_74;
      }
      v48 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v8 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v50 = v48 + v45;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v8 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *((_DWORD *)v8 + 27);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v69 = v54 + 1;
        *((_DWORD *)v8 + 27) = v69;
        if (v69 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (buf[16])
    {
      v26 = *(_QWORD *)buf;
      v42 = *(_QWORD *)&buf[8];
      v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - *(_QWORD *)buf;
      if (v43 < *(_QWORD *)buf)
      {
        v45 = 0;
        v17 = *(_QWORD *)&buf[8];
      }
      else
      {
        v17 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v45 = 0;
        if (v44 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
          v17 = v42;
          v45 = v44 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v38 = 15;
LABEL_74:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v38);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawPath";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = v3[481];
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_79:
  if ((v7 & 1) != 0)
    goto LABEL_96;
  v60 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v60))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v60))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v60);
LABEL_84:
  v62 = *(_QWORD *)(v60 + 8);
  v63 = v62 - 1;
  *(_QWORD *)(v60 + 8) = v62 - 1;
  if (v62 == 1)
  {
    v72 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v60 + 24) = 0;
    v65 = v72 != 0;
  }
  else
  {
    v64 = 0;
    v65 = 1;
  }
  v66 = __ldxr((unsigned __int8 *)v60);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v60))
    {
      if (!v63)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v60);
  if (!v63)
  {
LABEL_92:
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    if (!v65)
      WTF::fastFree((WTF *)v60, v16);
  }
LABEL_96:
  this = v75;
  v75 = 0;
  if (this)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)this);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)this));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordDrawFocusRingPath(_QWORD *this, const WebCore::Path *a2, float a3, const WebCore::Color *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  char v11;
  IPC::StreamClientConnection *v12;
  uint64_t v13;
  double v14;
  double v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  float *v20;
  char *v21;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  int v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  int v81;
  IPC::StreamClientConnection *v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned __int8 v86;
  _BYTE buf[24];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = this[481];
  if (!v4)
    return this;
  v5 = this;
  this = *(_QWORD **)(v4 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v82);
  if (!v82)
    return this;
  v9 = v5[479];
  if (!v9)
  {
    v10 = 0;
LABEL_6:
    v11 = 1;
    goto LABEL_7;
  }
  v10 = v5[480];
  if (__ldaxr((unsigned __int8 *)v9))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v9))
  {
    goto LABEL_120;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v9);
LABEL_120:
  if (*(_QWORD *)(v9 + 24))
    ++*(_QWORD *)(v9 + 8);
  else
    v10 = 0;
  v81 = __ldxr((unsigned __int8 *)v9);
  if (v81 != 1)
  {
    __clrex();
    goto LABEL_126;
  }
  if (__stlxr(0, (unsigned __int8 *)v9))
LABEL_126:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v9);
  if (!v10)
    goto LABEL_6;
  if (!*(_BYTE *)(v10 + 4016))
  {
    *(_BYTE *)(v10 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v10);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v11 = 0;
LABEL_7:
  v12 = v82;
  v13 = v5[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v15 = v14 + 15.0;
  if (*((_QWORD *)v12 + 6) == v13)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 56, &v84, v15);
      if (!v86)
        break;
      *(_QWORD *)buf = v84;
      *(_QWORD *)&buf[8] = v85;
      *(_QWORD *)&buf[16] = 0;
      v16 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v17 = v16 >= v84;
      v18 = v16 - v84;
      if (v17)
      {
        if (v18 > 0xFFFFFFFFFFFFFFFDLL || v18 + 2 > v85)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v84 + v18) = 814;
          *(_QWORD *)&buf[16] = v18 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
      v20 = (float *)((*(_QWORD *)buf + *(_QWORD *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v20 >= *(_QWORD *)buf + *(_QWORD *)&buf[16])
      {
        v21 = (char *)v20 - *(_QWORD *)buf;
        if ((unint64_t)v20 - *(_QWORD *)buf > 0xFFFFFFFFFFFFFFFBLL
          || (unint64_t)v20 - *(_QWORD *)buf + 4 > *(_QWORD *)&buf[8])
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *v20 = a3;
          *(_QWORD *)&buf[16] = v21 + 4;
        }
      }
      IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, a4);
      if (*(_QWORD *)&buf[8])
      {
        v25 = *(_QWORD *)&buf[16];
        v26 = *((_QWORD *)v12 + 8);
        v27 = (*((_QWORD *)v12 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *((_QWORD *)v12 + 7);
        if (v27 + 16 >= v28)
          v27 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v25 = 16;
        v29 = v27 + v25;
        if (v28 <= v29)
          v30 = 0;
        else
          v30 = v29;
        *((_QWORD *)v12 + 9) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v30, v31));
        if (v32 == 0x80000000 || *((_DWORD *)v12 + 27))
        {
          if (*((_BYTE *)v12 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v12 + 21));
          *((_DWORD *)v12 + 27) = 0;
        }
        goto LABEL_85;
      }
      v33 = v86;
      if (v86)
      {
        v34 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = v34 - v84;
        if (v34 < v84)
        {
          v36 = 0;
        }
        else
        {
          v36 = 0;
          if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v85)
          {
            *(_WORD *)(v84 + v35) = 2821;
            v36 = v35 + 2;
          }
        }
        v37 = *((_QWORD *)v12 + 8);
        v38 = (*((_QWORD *)v12 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = *((_QWORD *)v12 + 7);
        if (v38 + 16 >= v39)
          v38 = 0;
        if (v36 <= 0x10)
          v36 = 16;
        v40 = v38 + v36;
        if (v39 <= v40)
          v40 = 0;
        *((_QWORD *)v12 + 9) = v40;
        v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
        do
          __ldaxr(v41);
        while (__stlxr(v40, v41));
        *((_DWORD *)v12 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)v12 + 1);
        v42 = v83;
        v43 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v43 = 814;
        *(_QWORD *)(v43 + 8) = v13;
        *(_QWORD *)(v43 + 528) = v43 + 16;
        *(_QWORD *)(v43 + 536) = v43 + 16;
        *(_OWORD *)(v43 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v43 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v43);
        *(_QWORD *)buf = v43;
        IPC::ArgumentCoder<WebCore::Path,void>::encode((IPC::Encoder *)v43, a2);
        *(float *)IPC::Encoder::grow((IPC::Encoder *)v43, 4uLL, 4) = a3;
        IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v43, a4);
        v45 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)buf, 1, 0);
        v46 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v46)
        {
          IPC::Encoder::~Encoder(v46, v44);
          WTF::fastFree(v47, v48);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v83);
        if (!v45)
          goto LABEL_85;
        goto LABEL_80;
      }
      __break(1u);
LABEL_115:
      v52 = v24;
LABEL_59:
      v53 = (_QWORD *)((v33 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v53 >= v33 + v52)
      {
        v54 = (char *)v53 - v33;
        v45 = 17;
        if ((unint64_t)v53 - v33 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_80;
        v52 = (unint64_t)(v54 + 8);
        if ((unint64_t)(v54 + 8) > v24)
          goto LABEL_80;
        *v53 = v13;
      }
      if (!v24)
      {
        v45 = 17;
        goto LABEL_80;
      }
      v55 = (*((_QWORD *)v12 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = *((_QWORD *)v12 + 7);
      if (v55 + 16 >= v56)
        v55 = 0;
      if (v52 <= 0x10)
        v52 = 16;
      v57 = v55 + v52;
      if (v56 <= v57)
        v58 = 0;
      else
        v58 = v57;
      *((_QWORD *)v12 + 9) = v58;
      v59 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v12 + 8) + 16) + 128);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v58, v59));
      v61 = *((_DWORD *)v12 + 27);
      if (v60 == 0x80000000 || v61 != 0)
      {
        v76 = v61 + 1;
        *((_DWORD *)v12 + 27) = v76;
        if (v76 >= *((_DWORD *)v12 + 26))
        {
          if (*((_BYTE *)v12 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v12 + 21));
          *((_DWORD *)v12 + 27) = 0;
        }
      }
      *((_QWORD *)v12 + 6) = v13;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v12 + 56, buf, v14 + 15.0);
    if (buf[16])
    {
      v33 = *(_QWORD *)buf;
      v49 = *(_QWORD *)&buf[8];
      v50 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = v50 - *(_QWORD *)buf;
      if (v50 < *(_QWORD *)buf)
      {
        v52 = 0;
        v24 = *(_QWORD *)&buf[8];
      }
      else
      {
        v24 = 0;
        if (v51 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_115;
        v52 = 0;
        if (v51 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v51) = 2822;
          v24 = v49;
          v52 = v51 + 2;
        }
      }
      goto LABEL_59;
    }
  }
  v45 = 15;
LABEL_80:
  v63 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v64 = IPC::errorAsString(v45);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawFocusRingPath";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v64;
    _os_log_impl(&dword_196BCC000, v63, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v65 = v5[481];
  if (v65)
  {
    v66 = *(_BYTE **)(v65 + 8);
    if (v66)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v66);
  }
LABEL_85:
  if ((v11 & 1) != 0)
    goto LABEL_102;
  v67 = *(_QWORD *)(v10 + 8);
  if (__ldaxr((unsigned __int8 *)v67))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v67))
  {
    goto LABEL_90;
  }
  MEMORY[0x19AEABB3C](v67);
LABEL_90:
  v69 = *(_QWORD *)(v67 + 8);
  v70 = v69 - 1;
  *(_QWORD *)(v67 + 8) = v69 - 1;
  if (v69 == 1)
  {
    v79 = *(_QWORD *)(v67 + 16);
    v71 = *(_QWORD *)(v67 + 24);
    *(_QWORD *)(v67 + 24) = 0;
    v72 = v79 != 0;
  }
  else
  {
    v71 = 0;
    v72 = 1;
  }
  v73 = __ldxr((unsigned __int8 *)v67);
  if (v73 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v67))
    {
      if (!v70)
        goto LABEL_98;
      goto LABEL_102;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v67);
  if (!v70)
  {
LABEL_98:
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    if (!v72)
      WTF::fastFree((WTF *)v67, v23);
  }
LABEL_102:
  this = v82;
  v82 = 0;
  if (this)
  {
    do
    {
      v74 = __ldaxr((unsigned int *)this);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, (unsigned int *)this));
    if (!v75)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v77, v78);
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::recordDrawFocusRingRects(_QWORD *a1, uint64_t a2, WebCore::Color *a3, float a4, float a5)
{
  uint64_t v5;
  WebKit::RemoteRenderingBackendProxy *v7;
  unsigned __int8 *v8;
  unsigned int *v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float *v24;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  WebKit::RemoteImageBufferProxy *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  NSObject *v61;
  const char *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  WebCore::Color *v69;
  WebKit::RemoteImageBufferProxy *v70;
  unsigned int *v71;
  unint64_t v72;
  unint64_t v73;
  char v74;
  _BYTE buf[24];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v66 = a2;
  v67 = a4;
  v68 = a5;
  v69 = a3;
  v5 = a1[481];
  if (!v5)
    return;
  v7 = *(WebKit::RemoteRenderingBackendProxy **)(v5 + 8);
  if (!v7)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v7, &v71);
  if (!v71)
    return;
  v8 = (unsigned __int8 *)a1[479];
  if (v8)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v8, a1[480], &v70);
    v8 = (unsigned __int8 *)v70;
    if (v70)
      v8 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v70);
  }
  else
  {
    v70 = 0;
  }
  v9 = v71;
  v10 = a1[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v8);
  v12 = v11 + 15.0;
  if (*((_QWORD *)v9 + 6) != v10)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), buf, v11 + 15.0);
    if (!buf[16])
      goto LABEL_84;
    v46 = *(_QWORD *)buf;
    v47 = *(_QWORD *)&buf[8];
    v48 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v49 = v48 - *(_QWORD *)buf;
    if (v48 < *(_QWORD *)buf)
    {
      v51 = 0;
      v50 = *(_QWORD *)&buf[8];
    }
    else
    {
      v50 = 0;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        if (v49 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v49) = 2822;
          v50 = v47;
          v51 = v49 + 2;
        }
      }
    }
    v52 = (_QWORD *)((v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v52 >= v46 + v51)
    {
      v53 = (char *)v52 - v46;
      v54 = 17;
      if ((unint64_t)v52 - v46 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_85;
      v51 = (unint64_t)(v53 + 8);
      if ((unint64_t)(v53 + 8) > v50)
        goto LABEL_85;
      *v52 = v10;
    }
    if (!v50)
    {
      v54 = 17;
      goto LABEL_85;
    }
    v55 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v56 = *((_QWORD *)v9 + 7);
    if (v55 + 16 >= v56)
      v55 = 0;
    if (v51 <= 0x10)
      v51 = 16;
    v57 = v55 + v51;
    if (v56 <= v57)
      v58 = 0;
    else
      v58 = v57;
    *((_QWORD *)v9 + 9) = v58;
    v59 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v9 + 8) + 16) + 128);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v58, v59));
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v9, v60 == 0x80000000);
    *((_QWORD *)v9 + 6) = v10;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), &v72, v12);
  if (!v74)
  {
LABEL_84:
    v54 = 15;
LABEL_85:
    v61 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v62 = IPC::errorAsString(v54);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawFocusRingRects";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v62;
      _os_log_impl(&dword_196BCC000, v61, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v63 = a1[481];
    if (v63)
    {
      v64 = *(_BYTE **)(v63 + 8);
      if (v64)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v64);
    }
    goto LABEL_39;
  }
  *(_QWORD *)buf = v72;
  *(_QWORD *)&buf[8] = v73;
  *(_QWORD *)&buf[16] = 0;
  v13 = (v72 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 >= v72;
  v15 = v13 - v72;
  if (v14)
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v73)
    {
      *(_QWORD *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v72 + v15) = 815;
      *(_QWORD *)&buf[16] = v15 + 2;
    }
  }
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t *)buf, v66);
  v17 = *(_QWORD *)buf;
  v18 = *(_QWORD *)&buf[16];
  v19 = (*(_QWORD *)buf + *(_QWORD *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (*(_QWORD *)buf + *(_QWORD *)&buf[16]);
  if (v19 >= *(_QWORD *)buf + *(_QWORD *)&buf[16])
  {
    v21 = v19 - *(_QWORD *)buf;
    v22 = v20 + *(_QWORD *)&buf[16] + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > *(_QWORD *)&buf[8])
    {
      *(_QWORD *)&buf[8] = 0;
    }
    else
    {
      *(float *)(*(_QWORD *)buf + v21) = v67;
      *(_QWORD *)&buf[16] = v22;
      v17 = *(_QWORD *)buf;
      v18 = v22;
    }
  }
  v24 = (float *)((v17 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v24 >= v17 + v18)
  {
    if ((unint64_t)v24 - v17 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v24 - v17 + 4 > *(_QWORD *)&buf[8])
    {
      *(_QWORD *)&buf[8] = 0;
    }
    else
    {
      *v24 = v68;
      *(_QWORD *)&buf[16] = (char *)v24 - v17 + 4;
    }
  }
  IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v69);
  if (*(_QWORD *)&buf[8])
  {
    v27 = *(_QWORD *)&buf[16];
    v28 = *((_QWORD *)v9 + 8);
    v29 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v30 = *((_QWORD *)v9 + 7);
    if (v29 + 16 >= v30)
      v29 = 0;
    if (*(_QWORD *)&buf[16] <= 0x10uLL)
      v27 = 16;
    v31 = v29 + v27;
    if (v30 <= v31)
      v32 = 0;
    else
      v32 = v31;
    *((_QWORD *)v9 + 9) = v32;
    v33 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v32, v33));
    if (v34 == 0x80000000 || v9[27])
    {
      if (*((_BYTE *)v9 + 96))
        MEMORY[0x19AEBA1A0](v9[21]);
      v9[27] = 0;
    }
    goto LABEL_39;
  }
  if (!v74)
    __break(1u);
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v9, v72, v73);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v9 + 1);
  v54 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFocusRingRects>(*(uint64_t *)buf, (uint64_t)&v66, v10);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (v54)
    goto LABEL_85;
LABEL_39:
  v35 = v70;
  v70 = 0;
  if (v35)
  {
    v36 = *((_QWORD *)v35 + 1);
    if (__ldaxr((unsigned __int8 *)v36))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v36))
    {
LABEL_43:
      v38 = *(_QWORD *)(v36 + 8);
      v39 = v38 - 1;
      *(_QWORD *)(v36 + 8) = v38 - 1;
      if (v38 == 1)
      {
        v65 = *(_QWORD *)(v36 + 16);
        v40 = *(_QWORD *)(v36 + 24);
        *(_QWORD *)(v36 + 24) = 0;
        v41 = v65 != 0;
      }
      else
      {
        v40 = 0;
        v41 = 1;
      }
      v42 = __ldxr((unsigned __int8 *)v36);
      if (v42 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v36))
          goto LABEL_47;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v36);
LABEL_47:
      if (!v39)
      {
        if (v40)
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
        if (!v41)
          WTF::fastFree((WTF *)v36, v26);
      }
      goto LABEL_48;
    }
    MEMORY[0x19AEABB3C](v36);
    goto LABEL_43;
  }
LABEL_48:
  v43 = v71;
  v71 = 0;
  if (v43)
  {
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      atomic_store(1u, v43);
      *(_QWORD *)buf = v43;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordFillRect(_QWORD *result, int *a2, char a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  char i;
  IPC::StreamClientConnection *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  uint64_t v65;
  void *v66;
  IPC::Encoder *v67;
  WTF *v68;
  void *v69;
  NSObject *v70;
  const char *v71;
  uint64_t v72;
  _BYTE *v73;
  int v75;
  IPC::StreamClientConnection *v76;
  uint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  _BYTE buf[24];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v3 = result[481];
  if (!v3)
    return result;
  v4 = result;
  result = *(_QWORD **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, (unsigned int **)&v76);
  if (!v76)
    return result;
  v7 = v4[479];
  if (v7)
    goto LABEL_108;
  v8 = 0;
LABEL_6:
  for (i = 1; ; i = 0)
  {
    v10 = v76;
    v11 = v4[478];
    WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
    v13 = v12 + 15.0;
    if (*((_QWORD *)v10 + 6) != v11)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, buf, v12 + 15.0);
      if (!buf[16])
      {
LABEL_106:
        LODWORD(v7) = 15;
LABEL_99:
        v70 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v71 = IPC::errorAsString(v7);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillRect";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v71;
          _os_log_impl(&dword_196BCC000, v70, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v72 = v4[481];
        if (v72)
        {
          v73 = *(_BYTE **)(v72 + 8);
          if (v73)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v73);
        }
        goto LABEL_28;
      }
      v37 = *(_QWORD *)buf;
      v38 = *(_QWORD *)&buf[8];
      v39 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - *(_QWORD *)buf;
      if (v39 < *(_QWORD *)buf)
      {
        v42 = 0;
        v41 = *(_QWORD *)&buf[8];
      }
      else
      {
        v41 = 0;
        if (v40 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v42 = 0;
        }
        else
        {
          v42 = 0;
          if (v40 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v40) = 2822;
            v41 = v38;
            v42 = v40 + 2;
          }
        }
      }
      v43 = (_QWORD *)((v37 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v43 >= v37 + v42)
      {
        v44 = (char *)v43 - v37;
        v7 = 17;
        if ((unint64_t)v43 - v37 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_99;
        v42 = (unint64_t)(v44 + 8);
        if ((unint64_t)(v44 + 8) > v41)
          goto LABEL_99;
        *v43 = v11;
      }
      if (!v41)
      {
        LODWORD(v7) = 17;
        goto LABEL_99;
      }
      v45 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *((_QWORD *)v10 + 7);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v47 = v45 + v42;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *((_QWORD *)v10 + 9) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v10 + 8) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *((_DWORD *)v10 + 27);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v53 = v51 + 1;
        *((_DWORD *)v10 + 27) = v53;
        if (v53 >= *((_DWORD *)v10 + 26))
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
          *((_DWORD *)v10 + 27) = 0;
        }
      }
      *((_QWORD *)v10 + 6) = v11;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v10 + 56, &v78, v13);
    if (!v80)
      goto LABEL_106;
    *(_QWORD *)buf = v78;
    *(_QWORD *)&buf[8] = v79;
    *(_QWORD *)&buf[16] = 0;
    v14 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v15 = v14 >= v78;
    v16 = v14 - v78;
    if (v15)
    {
      if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v79)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v78 + v16) = 835;
        *(_QWORD *)&buf[16] = v16 + 2;
      }
    }
    result = IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a2);
    v19 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16] < *(_QWORD *)&buf[8])
    {
      v20 = *(_QWORD *)&buf[16] + 1;
      *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = a3;
      *(_QWORD *)&buf[16] = v19 + 1;
      v21 = *((_QWORD *)v10 + 8);
      v22 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v23 = *((_QWORD *)v10 + 7);
      if (v22 + 16 >= v23)
        v22 = 0;
      if (v20 <= 0x10)
        v20 = 16;
      v24 = v22 + v20;
      if (v23 <= v24)
        v25 = 0;
      else
        v25 = v24;
      *((_QWORD *)v10 + 9) = v25;
      v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v25, v26));
      if (v27 == 0x80000000 || *((_DWORD *)v10 + 27))
      {
        if (*((_BYTE *)v10 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v10 + 21));
        *((_DWORD *)v10 + 27) = 0;
      }
      goto LABEL_28;
    }
    if (v80)
      break;
    __break(1u);
LABEL_108:
    v8 = v4[480];
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
      goto LABEL_112;
    }
    result = (_QWORD *)MEMORY[0x19AEABB3C](v7);
LABEL_112:
    if (*(_QWORD *)(v7 + 24))
      ++*(_QWORD *)(v7 + 8);
    else
      v8 = 0;
    v75 = __ldxr((unsigned __int8 *)v7);
    if (v75 != 1)
    {
      __clrex();
LABEL_118:
      result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
      goto LABEL_119;
    }
    if (__stlxr(0, (unsigned __int8 *)v7))
      goto LABEL_118;
LABEL_119:
    if (!v8)
      goto LABEL_6;
    if (!*(_BYTE *)(v8 + 4016))
    {
      *(_BYTE *)(v8 + 4016) = 1;
      result = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v8);
      if (result)
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 160))(result);
    }
  }
  v57 = (v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v58 = v57 - v78;
  if (v57 < v78)
  {
    v59 = 0;
  }
  else
  {
    v59 = 0;
    if (v58 <= 0xFFFFFFFFFFFFFFFDLL && v58 + 2 <= v79)
    {
      *(_WORD *)(v78 + v58) = 2821;
      v59 = v58 + 2;
    }
  }
  v60 = *((_QWORD *)v10 + 8);
  v61 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *((_QWORD *)v10 + 7);
  if (v61 + 16 >= v62)
    v61 = 0;
  if (v59 <= 0x10)
    v59 = 16;
  v63 = v61 + v59;
  if (v62 <= v63)
    v63 = 0;
  *((_QWORD *)v10 + 9) = v63;
  v64 = (unint64_t *)(*(_QWORD *)(v60 + 16) + 128);
  do
    __ldaxr(v64);
  while (__stlxr(v63, v64));
  *((_DWORD *)v10 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v77, (uint64_t **)v10 + 1);
  v7 = (uint64_t)v77;
  v65 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v65 = 835;
  *(_QWORD *)(v65 + 8) = v11;
  *(_QWORD *)(v65 + 528) = v65 + 16;
  *(_QWORD *)(v65 + 536) = v65 + 16;
  *(_OWORD *)(v65 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v65 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v65);
  *(_QWORD *)buf = v65;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v65, a2);
  *IPC::Encoder::grow((IPC::Encoder *)v65, 1uLL, 1) = a3;
  LODWORD(v7) = IPC::Connection::sendMessageImpl(v7, (uint64_t *)buf, 1, 0);
  v67 = *(IPC::Encoder **)buf;
  *(_QWORD *)buf = 0;
  if (v67)
  {
    IPC::Encoder::~Encoder(v67, v66);
    WTF::fastFree(v68, v69);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v77);
  if ((_DWORD)v7)
    goto LABEL_99;
LABEL_28:
  if ((i & 1) != 0)
    goto LABEL_45;
  v28 = *(_QWORD *)(v8 + 8);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
    goto LABEL_32;
  }
  if (__stxr(1u, (unsigned __int8 *)v28))
LABEL_32:
    MEMORY[0x19AEABB3C](v28);
  v30 = *(_QWORD *)(v28 + 8);
  v31 = v30 - 1;
  *(_QWORD *)(v28 + 8) = v30 - 1;
  if (v30 == 1)
  {
    v56 = *(_QWORD *)(v28 + 16);
    v32 = *(_QWORD *)(v28 + 24);
    *(_QWORD *)(v28 + 24) = 0;
    v33 = v56 != 0;
  }
  else
  {
    v32 = 0;
    v33 = 1;
  }
  v34 = __ldxr((unsigned __int8 *)v28);
  if (v34 != 1)
  {
    __clrex();
LABEL_40:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
    if (!v31)
      goto LABEL_41;
    goto LABEL_45;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
    goto LABEL_40;
  if (!v31)
  {
LABEL_41:
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    if (!v33)
      WTF::fastFree((WTF *)v28, v18);
  }
LABEL_45:
  result = v76;
  v76 = 0;
  if (result)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)result);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)result));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)result);
      return (_QWORD *)WTF::fastFree(v54, v55);
    }
  }
  return result;
}

uint64_t *WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithGradientAndSpaceTransform(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  IPC::StreamClientConnection *v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  int v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  int v76;
  int v77[4];
  uint64_t v78[8];
  IPC::StreamClientConnection *v79;
  uint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unsigned __int8 v83;
  _BYTE buf[24];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  WebCore::DisplayList::FillRectWithGradientAndSpaceTransform::FillRectWithGradientAndSpaceTransform();
  v3 = a1[481];
  if (!v3)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v78, v2);
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!v4)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v78, v2);
  v5 = WebKit::RemoteRenderingBackendProxy::connection(v4, (unsigned int **)&v79);
  if (!v79)
    return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v78, v2);
  v6 = a1[479];
  if (!v6)
  {
    v7 = 0;
LABEL_6:
    v8 = 1;
    goto LABEL_7;
  }
  v7 = a1[480];
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_113;
  }
  v5 = (WTF::ApproximateTime *)MEMORY[0x19AEABB3C](v6);
LABEL_113:
  if (*(_QWORD *)(v6 + 24))
    ++*(_QWORD *)(v6 + 8);
  else
    v7 = 0;
  v76 = __ldxr((unsigned __int8 *)v6);
  if (v76 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
LABEL_119:
    v5 = (WTF::ApproximateTime *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  if (!v7)
    goto LABEL_6;
  if (!*(_BYTE *)(v7 + 4016))
  {
    *(_BYTE *)(v7 + 4016) = 1;
    v5 = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v7);
    if (v5)
      v5 = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(_QWORD *)v5 + 160))(v5);
  }
  v8 = 0;
LABEL_7:
  v9 = v79;
  v10 = a1[478];
  WTF::ApproximateTime::now(v5);
  v12 = v11 + 15.0;
  if (*((_QWORD *)v9 + 6) == v10)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 56, &v81, v12);
      if (!v83)
        break;
      *(_QWORD *)buf = v81;
      *(_QWORD *)&buf[8] = v82;
      *(_QWORD *)&buf[16] = 0;
      v13 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = v13 >= v81;
      v15 = v13 - v81;
      if (v14)
      {
        if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v82)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v81 + v15) = 838;
          *(_QWORD *)&buf[16] = v15 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode((uint64_t *)buf, (uint64_t)v77);
      if (*(_QWORD *)&buf[8])
      {
        v18 = *(_QWORD *)&buf[16];
        v19 = *((_QWORD *)v9 + 8);
        v20 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v9 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v9 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v9 + 27))
        {
          if (*((_BYTE *)v9 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v9 + 21));
          *((_DWORD *)v9 + 27) = 0;
        }
        goto LABEL_79;
      }
      v26 = v83;
      if (v83)
      {
        v27 = (v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = v27 - v81;
        if (v27 < v81)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v82)
          {
            *(_WORD *)(v81 + v28) = 2821;
            v29 = v28 + 2;
          }
        }
        v30 = *((_QWORD *)v9 + 8);
        v31 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *((_QWORD *)v9 + 7);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v29 <= 0x10)
          v29 = 16;
        v33 = v31 + v29;
        if (v32 <= v33)
          v33 = 0;
        *((_QWORD *)v9 + 9) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          __ldaxr(v34);
        while (__stlxr(v33, v34));
        *((_DWORD *)v9 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, (uint64_t **)v9 + 1);
        v35 = v80;
        v36 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v36 = 838;
        *(_QWORD *)(v36 + 8) = v10;
        *(_QWORD *)(v36 + 528) = v36 + 16;
        *(_QWORD *)(v36 + 536) = v36 + 16;
        *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v36 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
        *(_QWORD *)buf = v36;
        IPC::ArgumentCoder<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform,void>::encode((IPC::Encoder *)v36, v77);
        v38 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)buf, 1, 0);
        v39 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v40, v41);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v80);
        if (!v38)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v45 = v17;
LABEL_53:
      v46 = (_QWORD *)((v26 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v46 >= v26 + v45)
      {
        v47 = (char *)v46 - v26;
        v38 = 17;
        if ((unint64_t)v46 - v26 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v45 = (unint64_t)(v47 + 8);
        if ((unint64_t)(v47 + 8) > v17)
          goto LABEL_74;
        *v46 = v10;
      }
      if (!v17)
      {
        v38 = 17;
        goto LABEL_74;
      }
      v48 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v9 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v50 = v48 + v45;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v9 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v9 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *((_DWORD *)v9 + 27);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v71 = v54 + 1;
        *((_DWORD *)v9 + 27) = v71;
        if (v71 >= *((_DWORD *)v9 + 26))
        {
          if (*((_BYTE *)v9 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v9 + 21));
          *((_DWORD *)v9 + 27) = 0;
        }
      }
      *((_QWORD *)v9 + 6) = v10;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v9 + 56, buf, v11 + 15.0);
    if (buf[16])
    {
      v26 = *(_QWORD *)buf;
      v42 = *(_QWORD *)&buf[8];
      v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - *(_QWORD *)buf;
      if (v43 < *(_QWORD *)buf)
      {
        v45 = 0;
        v17 = *(_QWORD *)&buf[8];
      }
      else
      {
        v17 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v45 = 0;
        if (v44 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
          v17 = v42;
          v45 = v44 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v38 = 15;
LABEL_74:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v38);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillRectWithGradientAndSpaceTransform";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = a1[481];
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_79:
  if ((v8 & 1) != 0)
    goto LABEL_96;
  v60 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v60))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v60))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v60);
LABEL_84:
  v62 = *(_QWORD *)(v60 + 8);
  v63 = v62 - 1;
  *(_QWORD *)(v60 + 8) = v62 - 1;
  if (v62 == 1)
  {
    v74 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v60 + 24) = 0;
    v65 = v74 != 0;
  }
  else
  {
    v64 = 0;
    v65 = 1;
  }
  v66 = __ldxr((unsigned __int8 *)v60);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v60))
    {
      if (!v63)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v60);
  if (!v63)
  {
LABEL_92:
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    if (!v65)
      WTF::fastFree((WTF *)v60, v2);
  }
LABEL_96:
  v67 = (unsigned int *)v79;
  v79 = 0;
  if (v67)
  {
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, v67));
    if (!v69)
    {
      atomic_store(1u, v67);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v67);
      WTF::fastFree(v72, v73);
    }
  }
  return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(v78, v2);
}

void WebKit::RemoteDisplayListRecorderProxy::recordFillRectWithRoundedHole(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRect *a2, const WebCore::FloatRoundedRect *a3, const WebCore::Color *a4)
{
  uint64_t v4;
  WebKit::RemoteRenderingBackendProxy *v6;
  unsigned __int8 *v7;
  unsigned int *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  WebKit::RemoteImageBufferProxy *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  char *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v51;
  const char *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  WebCore::Color *v58;
  WebKit::RemoteImageBufferProxy *v59;
  unsigned int *v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  _BYTE buf[24];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v56 = a2;
  v57 = a3;
  v58 = a4;
  v4 = *((_QWORD *)this + 481);
  if (!v4)
    return;
  v6 = *(WebKit::RemoteRenderingBackendProxy **)(v4 + 8);
  if (!v6)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v6, &v60);
  if (!v60)
    return;
  v7 = (unsigned __int8 *)*((_QWORD *)this + 479);
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *((_QWORD *)this + 480), &v59);
    v7 = (unsigned __int8 *)v59;
    if (v59)
      v7 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v59);
  }
  else
  {
    v59 = 0;
  }
  v8 = v60;
  v9 = *((_QWORD *)this + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v7);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 14), buf, v10 + 15.0);
    if (!buf[16])
      goto LABEL_72;
    v36 = *(_QWORD *)buf;
    v37 = *(_QWORD *)&buf[8];
    v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v39 = v38 - *(_QWORD *)buf;
    if (v38 < *(_QWORD *)buf)
    {
      v41 = 0;
      v40 = *(_QWORD *)&buf[8];
    }
    else
    {
      v40 = 0;
      if (v39 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v41 = 0;
      }
      else
      {
        v41 = 0;
        if (v39 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v39) = 2822;
          v40 = v37;
          v41 = v39 + 2;
        }
      }
    }
    v42 = (_QWORD *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v42 >= v36 + v41)
    {
      v43 = (char *)v42 - v36;
      v44 = 17;
      if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_73;
      v41 = (unint64_t)(v43 + 8);
      if ((unint64_t)(v43 + 8) > v40)
        goto LABEL_73;
      *v42 = v9;
    }
    if (!v40)
    {
      v44 = 17;
      goto LABEL_73;
    }
    v45 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = *((_QWORD *)v8 + 7);
    if (v45 + 16 >= v46)
      v45 = 0;
    if (v41 <= 0x10)
      v41 = 16;
    v47 = v45 + v41;
    if (v46 <= v47)
      v48 = 0;
    else
      v48 = v47;
    *((_QWORD *)v8 + 9) = v48;
    v49 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v48, v49));
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v8, v50 == 0x80000000);
    *((_QWORD *)v8 + 6) = v9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 14), &v61, v11);
  if (!v63)
  {
LABEL_72:
    v44 = 15;
LABEL_73:
    v51 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v52 = IPC::errorAsString(v44);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillRectWithRoundedHole";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v52;
      _os_log_impl(&dword_196BCC000, v51, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v53 = *((_QWORD *)this + 481);
    if (v53)
    {
      v54 = *(_BYTE **)(v53 + 8);
      if (v54)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v54);
    }
    goto LABEL_27;
  }
  *(_QWORD *)buf = v61;
  *(_QWORD *)&buf[8] = v62;
  *(_QWORD *)&buf[16] = 0;
  v12 = (v61 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v13 = v12 >= v61;
  v14 = v12 - v61;
  if (v13)
  {
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v62)
    {
      *(_QWORD *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v61 + v14) = 839;
      *(_QWORD *)&buf[16] = v14 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v56);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v57);
  IPC::ArgumentCoder<WebCore::Color,void>::encode((uint64_t *)buf, v58);
  if (*(_QWORD *)&buf[8])
  {
    v17 = *(_QWORD *)&buf[16];
    v18 = *((_QWORD *)v8 + 8);
    v19 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v20 = *((_QWORD *)v8 + 7);
    if (v19 + 16 >= v20)
      v19 = 0;
    if (*(_QWORD *)&buf[16] <= 0x10uLL)
      v17 = 16;
    v21 = v19 + v17;
    if (v20 <= v21)
      v22 = 0;
    else
      v22 = v21;
    *((_QWORD *)v8 + 9) = v22;
    v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v22, v23));
    if (v24 == 0x80000000 || v8[27])
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](v8[21]);
      v8[27] = 0;
    }
    goto LABEL_27;
  }
  if (!v63)
    __break(1u);
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v8, v61, v62);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v8 + 1);
  v44 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithRoundedHole>(*(uint64_t *)buf, (uint64_t)&v56, v9);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (v44)
    goto LABEL_73;
LABEL_27:
  v25 = v59;
  v59 = 0;
  if (v25)
  {
    v26 = *((_QWORD *)v25 + 1);
    if (__ldaxr((unsigned __int8 *)v26))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v26))
    {
LABEL_31:
      v28 = *(_QWORD *)(v26 + 8);
      v29 = v28 - 1;
      *(_QWORD *)(v26 + 8) = v28 - 1;
      if (v28 == 1)
      {
        v55 = *(_QWORD *)(v26 + 16);
        v30 = *(_QWORD *)(v26 + 24);
        *(_QWORD *)(v26 + 24) = 0;
        v31 = v55 != 0;
      }
      else
      {
        v30 = 0;
        v31 = 1;
      }
      v32 = __ldxr((unsigned __int8 *)v26);
      if (v32 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v26))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_35:
      if (!v29)
      {
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        if (!v31)
          WTF::fastFree((WTF *)v26, v16);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v26);
    goto LABEL_31;
  }
LABEL_36:
  v33 = v60;
  v60 = 0;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      *(_QWORD *)buf = v33;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

void WebKit::RemoteDisplayListRecorderProxy::recordFillLine(WebKit::RemoteDisplayListRecorderProxy *this, const PathDataLine *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  _BYTE *v56;
  int *v57;
  WebKit::RemoteImageBufferProxy *v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  _BYTE buf[24];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v59);
  if (!v59)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_93;
  v58 = 0;
  while (1)
  {
    v6 = v59;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_83:
        v42 = 15;
        goto LABEL_86;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v34 + v39)
      {
        v41 = (char *)v40 - v34;
        v42 = 17;
        if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v39 = (unint64_t)(v41 + 8);
        if ((unint64_t)(v41 + 8) > v38)
          goto LABEL_86;
        *v40 = v7;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_86;
      }
      v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v6 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v6 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = v6[27];
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        v6[27] = v51;
        if (v51 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v60, v9);
    if (!v62)
      goto LABEL_83;
    *(_QWORD *)buf = v60;
    *(_QWORD *)&buf[8] = v61;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v60;
    v12 = v10 - v60;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v61)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v60 + v12) = 831;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)buf, v57);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v20 = 0;
      else
        v20 = v19;
      *((_QWORD *)v6 + 9) = v20;
      v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v20, v21));
      if (v22 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_27;
    }
    if (v62)
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v58);
    v5 = v58;
    if (v58)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v58);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v60, v61);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillLine>(*(uint64_t *)buf, &v57, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v42)
    goto LABEL_27;
LABEL_86:
  v53 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v54 = IPC::errorAsString(v42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillLine";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v54;
    _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v55 = *((_QWORD *)this + 481);
  if (v55)
  {
    v56 = *(_BYTE **)(v55 + 8);
    if (v56)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
  }
LABEL_27:
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_31:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v52 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v52 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_35:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v14);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_31;
  }
LABEL_36:
  v31 = v59;
  v59 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      *(_QWORD *)buf = v31;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordFillArc(WTF::ApproximateTime *this, PathArc *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  float *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  WebKit::RemoteImageBufferProxy *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  void *v81;
  IPC::Encoder *v82;
  WTF *v83;
  void *v84;
  NSObject *v85;
  const char *v86;
  uint64_t v87;
  _BYTE *v88;
  WTF *v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  WebKit::RemoteImageBufferProxy *v94;
  IPC::StreamClientConnection *v95;
  uint64_t *v96;
  IPC::Encoder *v97;
  _BYTE buf[22];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v95);
  if (!v95)
    return this;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v5)
    goto LABEL_135;
  v94 = 0;
  while (1)
  {
    v6 = v95;
    v7 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_132:
        v61 = 15;
LABEL_122:
        v85 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v86 = IPC::errorAsString(v61);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillArc";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v86;
          _os_log_impl(&dword_196BCC000, v85, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v87 = *((_QWORD *)v3 + 481);
        if (v87)
        {
          v88 = *(_BYTE **)(v87 + 8);
          if (v88)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v88);
        }
        goto LABEL_52;
      }
      v53 = *(_QWORD *)buf;
      v54 = *(_QWORD *)&buf[8];
      v55 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = v55 - *(_QWORD *)buf;
      if (v55 < *(_QWORD *)buf)
      {
        v58 = 0;
        v57 = *(_QWORD *)&buf[8];
      }
      else
      {
        v57 = 0;
        if (v56 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v58 = 0;
        }
        else
        {
          v58 = 0;
          if (v56 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v56) = 2822;
            v57 = v54;
            v58 = v56 + 2;
          }
        }
      }
      v59 = (_QWORD *)((v53 + v58 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v59 >= v53 + v58)
      {
        v60 = (char *)v59 - v53;
        v61 = 17;
        if ((unint64_t)v59 - v53 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_122;
        v58 = (unint64_t)(v60 + 8);
        if ((unint64_t)(v60 + 8) > v57)
          goto LABEL_122;
        *v59 = v7;
      }
      if (!v57)
      {
        v61 = 17;
        goto LABEL_122;
      }
      v62 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v63 = *((_QWORD *)v6 + 7);
      if (v62 + 16 >= v63)
        v62 = 0;
      if (v58 <= 0x10)
        v58 = 16;
      v64 = v62 + v58;
      if (v63 <= v64)
        v65 = 0;
      else
        v65 = v64;
      *((_QWORD *)v6 + 9) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *((_DWORD *)v6 + 27);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v70 = v68 + 1;
        *((_DWORD *)v6 + 27) = v70;
        if (v70 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
    if (!buf[16])
      goto LABEL_132;
    v11 = *(_QWORD *)buf;
    v12 = *(_QWORD *)&buf[8];
    v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 - *(_QWORD *)buf;
    if (v13 >= *(_QWORD *)buf)
    {
      v15 = v14 + 2;
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v14) = 826;
        goto LABEL_14;
      }
      v12 = 0;
    }
    v15 = 0;
LABEL_14:
    v17 = (v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v18 = v17 - (v11 + v15);
    if (v17 >= v11 + v15)
    {
      v19 = v17 - v11;
      v20 = v18 + v15 + 4;
      if (v19 > 0xFFFFFFFFFFFFFFFBLL || v20 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(float *)(v11 + v19) = a2->center.m_x;
        v15 = v20;
      }
    }
    v22 = (v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v23 = v22 - (v11 + v15);
    if (v22 >= v11 + v15)
    {
      v24 = v22 - v11;
      v25 = v23 + v15 + 4;
      if (v24 > 0xFFFFFFFFFFFFFFFBLL || v25 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(float *)(v11 + v24) = a2->center.m_y;
        v15 = v25;
      }
    }
    v27 = (v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = v27 >= v11 + v15;
    v29 = v27 - (v11 + v15);
    if (v28)
    {
      v92 = 0;
      v30 = v29 + v15;
      if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v12)
      {
        *(float *)(v11 + v30) = a2->radius;
        v92 = v12;
        v15 = v30 + 4;
      }
    }
    else
    {
      v92 = v12;
    }
    v31 = (v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = v31 >= v11 + v15;
    v32 = v31 - (v11 + v15);
    if (v28)
    {
      v93 = 0;
      v33 = v32 + v15;
      if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v92)
      {
        *(float *)(v11 + v33) = a2->startAngle;
        v93 = v92;
        v15 = v33 + 4;
      }
    }
    else
    {
      v93 = v92;
    }
    v34 = (float *)((v11 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v34 >= v11 + v15)
    {
      v35 = (char *)v34 - v11;
      if ((unint64_t)v34 - v11 > 0xFFFFFFFFFFFFFFFBLL)
        goto LABEL_106;
      v15 = (unint64_t)(v35 + 4);
      if ((unint64_t)(v35 + 4) > v93)
        goto LABEL_106;
      *v34 = a2->endAngle;
    }
    if (v15 < v93)
    {
      *(_BYTE *)(v11 + v15) = a2->direction;
      v36 = *((_QWORD *)v6 + 8);
      v37 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = *((_QWORD *)v6 + 7);
      if (v37 + 16 >= v38)
        v37 = 0;
      if (v15 <= 0xF)
        v15 = 15;
      v39 = v15 + v37;
      if (v38 > v39 + 1)
        v40 = v39 + 1;
      else
        v40 = 0;
      *((_QWORD *)v6 + 9) = v40;
      v41 = (unint64_t *)(*(_QWORD *)(v36 + 16) + 128);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v40, v41));
      if (v42 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_52;
    }
LABEL_106:
    if (buf[16])
      break;
    __break(1u);
LABEL_135:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)v3 + 480), &v94);
    v5 = v94;
    if (v94)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v94);
  }
  v71 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v71 - *(_QWORD *)buf;
  if (v71 < *(_QWORD *)buf)
  {
    v73 = 0;
  }
  else
  {
    v73 = 0;
    if (v72 <= 0xFFFFFFFFFFFFFFFDLL && v72 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v72) = 2821;
      v73 = v72 + 2;
    }
  }
  v74 = *((_QWORD *)v6 + 8);
  v75 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v76 = *((_QWORD *)v6 + 7);
  if (v75 + 16 >= v76)
    v75 = 0;
  if (v73 <= 0x10)
    v73 = 16;
  v77 = v75 + v73;
  if (v76 <= v77)
    v77 = 0;
  *((_QWORD *)v6 + 9) = v77;
  v78 = (unint64_t *)(*(_QWORD *)(v74 + 16) + 128);
  do
    __ldaxr(v78);
  while (__stlxr(v77, v78));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v96, (uint64_t **)v6 + 1);
  v79 = v96;
  v80 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v80 = 826;
  *(_QWORD *)(v80 + 8) = v7;
  *(_QWORD *)(v80 + 528) = v80 + 16;
  *(_QWORD *)(v80 + 536) = v80 + 16;
  *(_OWORD *)(v80 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v80 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v80);
  v97 = (IPC::Encoder *)v80;
  IPC::ArgumentCoder<WebCore::PathArc,void>::encode((IPC::Encoder *)v80, a2);
  v61 = IPC::Connection::sendMessageImpl((uint64_t)v79, (uint64_t *)&v97, 1, 0);
  v82 = v97;
  v97 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v81);
    WTF::fastFree(v83, v84);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v96);
  if (v61)
    goto LABEL_122;
LABEL_52:
  v43 = v94;
  v94 = 0;
  if (v43)
  {
    v44 = *((_QWORD *)v43 + 1);
    if (__ldaxr((unsigned __int8 *)v44))
    {
      __clrex();
      goto LABEL_55;
    }
    if (__stxr(1u, (unsigned __int8 *)v44))
LABEL_55:
      MEMORY[0x19AEABB3C](v44);
    v46 = *(_QWORD *)(v44 + 8);
    v47 = v46 - 1;
    *(_QWORD *)(v44 + 8) = v46 - 1;
    if (v46 == 1)
    {
      v91 = *(_QWORD *)(v44 + 16);
      v48 = *(_QWORD *)(v44 + 24);
      *(_QWORD *)(v44 + 24) = 0;
      v49 = v91 != 0;
    }
    else
    {
      v48 = 0;
      v49 = 1;
    }
    v50 = __ldxr((unsigned __int8 *)v44);
    if (v50 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v44))
      {
LABEL_60:
        if (!v47)
        {
          if (v48)
            (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
          if (!v49)
            WTF::fastFree((WTF *)v44, v10);
        }
        goto LABEL_61;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
    goto LABEL_60;
  }
LABEL_61:
  this = v95;
  v95 = 0;
  if (this)
  {
    do
    {
      v51 = __ldaxr((unsigned int *)this);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, (unsigned int *)this));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v89, v90);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordFillClosedArc(WTF::ApproximateTime *this, const PathClosedArc *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  BOOL v17;
  unint64_t v18;
  const PathClosedArc *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  BOOL v46;
  unint64_t v47;
  _DWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  WebKit::RemoteImageBufferProxy *v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  BOOL v73;
  unint64_t v74;
  _QWORD *v75;
  char *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  NSObject *v94;
  const char *v95;
  uint64_t v96;
  _BYTE *v97;
  WTF *v98;
  void *v99;
  uint64_t v100;
  const PathClosedArc *v101;
  WebKit::RemoteImageBufferProxy *v102;
  IPC::StreamClientConnection *v103;
  uint64_t *v104;
  _BYTE buf[22];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v101 = a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v103);
  if (!v103)
    return this;
  v4 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v4)
    goto LABEL_160;
  v102 = 0;
  while (1)
  {
    v5 = v103;
    v6 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v4);
    v8 = v7 + 15.0;
    if (*((_QWORD *)v5 + 6) == v6)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
    if (!buf[16])
    {
LABEL_158:
      v77 = 15;
LABEL_152:
      v94 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v95 = IPC::errorAsString(v77);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillClosedArc";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v95;
        _os_log_impl(&dword_196BCC000, v94, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v96 = *((_QWORD *)v3 + 481);
      if (v96)
      {
        v97 = *(_BYTE **)(v96 + 8);
        if (v97)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v97);
      }
      goto LABEL_78;
    }
    v66 = *(_QWORD *)buf;
    v67 = *(_QWORD *)&buf[8];
    v68 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v69 = v68 - *(_QWORD *)buf;
    v70 = v68 >= *(_QWORD *)buf;
    v71 = v68 - *(_QWORD *)buf + 2;
    v73 = v69 < 0xFFFFFFFFFFFFFFFELL && v71 <= *(_QWORD *)&buf[8];
    if (v70 && v73)
      goto LABEL_112;
    if (!v70)
    {
      v71 = 0;
      goto LABEL_113;
    }
    v74 = 0;
    if (v69 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v71 = 0;
      goto LABEL_114;
    }
    v71 = 0;
    if (v69 + 2 <= *(_QWORD *)&buf[8])
    {
      v71 = v69 + 2;
LABEL_112:
      *(_WORD *)(*(_QWORD *)buf + v69) = 2822;
LABEL_113:
      v74 = v67;
    }
LABEL_114:
    v75 = (_QWORD *)((v66 + v71 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v75 >= v66 + v71)
    {
      v76 = (char *)v75 - v66;
      v77 = 17;
      if ((unint64_t)v75 - v66 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_152;
      v71 = (unint64_t)(v76 + 8);
      if ((unint64_t)(v76 + 8) > v74)
        goto LABEL_152;
      *v75 = v6;
    }
    if (!v74)
    {
      v77 = 17;
      goto LABEL_152;
    }
    v78 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v79 = *((_QWORD *)v5 + 7);
    if (v78 + 16 >= v79)
      v78 = 0;
    if (v71 <= 0x10)
      v71 = 16;
    v80 = v78 + v71;
    if (v79 <= v80)
      v81 = 0;
    else
      v81 = v80;
    *((_QWORD *)v5 + 9) = v81;
    v82 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v81, v82));
    v84 = *((_DWORD *)v5 + 27);
    if (v83 == 0x80000000 || v84 != 0)
    {
      v86 = v84 + 1;
      *((_DWORD *)v5 + 27) = v86;
      if (v86 >= *((_DWORD *)v5 + 26))
      {
        if (*((_BYTE *)v5 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
        *((_DWORD *)v5 + 27) = 0;
      }
    }
    *((_QWORD *)v5 + 6) = v6;
LABEL_7:
    v4 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v8);
    if (!buf[16])
      goto LABEL_158;
    v10 = *(_QWORD *)buf;
    v11 = *(_QWORD *)&buf[8];
    v12 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v13 = v12 - *(_QWORD *)buf;
    v14 = v12 >= *(_QWORD *)buf;
    v15 = v12 - *(_QWORD *)buf + 2;
    v17 = v13 < 0xFFFFFFFFFFFFFFFELL && v15 <= *(_QWORD *)&buf[8];
    if (v14 && v17)
      goto LABEL_16;
    if (!v14)
    {
      v15 = 0;
      goto LABEL_17;
    }
    v18 = 0;
    if (v13 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 = 0;
    }
    else
    {
      v15 = 0;
      if (v13 + 2 <= *(_QWORD *)&buf[8])
      {
        v15 = v13 + 2;
LABEL_16:
        *(_WORD *)(*(_QWORD *)buf + v13) = 828;
LABEL_17:
        v18 = v11;
      }
    }
    v19 = v101;
    v20 = (v10 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v21 = v20 - (v10 + v15);
    v22 = v20 >= v10 + v15;
    v23 = v20 - v10;
    v24 = v21 + v15 >= 0xFFFFFFFFFFFFFFFCLL || v21 + v15 + 4 > v18;
    v25 = !v24;
    if (v22 && v25)
    {
      v15 += v21 + 4;
    }
    else
    {
      if (!v22)
        goto LABEL_28;
      v26 = 0;
      v23 = v21 + v15;
      if (v21 + v15 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > v18)
        goto LABEL_29;
      v15 = v23 + 4;
    }
    *(float *)(v10 + v23) = v101->arc.center.m_x;
LABEL_28:
    v26 = v18;
LABEL_29:
    v27 = (v10 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = v27 - (v10 + v15);
    v29 = v27 >= v10 + v15;
    v30 = v27 - v10;
    v31 = v28 + v15 >= 0xFFFFFFFFFFFFFFFCLL || v28 + v15 + 4 > v26;
    v32 = !v31;
    if (v29 && v32)
    {
      v15 += v28 + 4;
    }
    else
    {
      if (!v29)
        goto LABEL_39;
      v33 = 0;
      v30 = v28 + v15;
      if (v28 + v15 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > v26)
        goto LABEL_40;
      v15 = v30 + 4;
    }
    *(float *)(v10 + v30) = v19->arc.center.m_y;
LABEL_39:
    v33 = v26;
LABEL_40:
    v34 = (v10 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = v34 - (v10 + v15);
    v36 = v34 >= v10 + v15;
    v37 = v34 - v10;
    v38 = v35 + v15 >= 0xFFFFFFFFFFFFFFFCLL || v35 + v15 + 4 > v33;
    v39 = !v38;
    if (v36 && v39)
    {
      v15 += v35 + 4;
    }
    else
    {
      if (!v36)
        goto LABEL_50;
      v40 = 0;
      v37 = v35 + v15;
      if (v35 + v15 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > v33)
        goto LABEL_51;
      v15 = v37 + 4;
    }
    *(float *)(v10 + v37) = v19->arc.radius;
LABEL_50:
    v40 = v33;
LABEL_51:
    v41 = (v10 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v42 = v41 - (v10 + v15);
    v43 = v41 >= v10 + v15;
    v44 = v41 - v10;
    v46 = v42 + v15 < 0xFFFFFFFFFFFFFFFCLL && v42 + v15 + 4 <= v40;
    if (v43 && v46)
    {
      v15 += v42 + 4;
LABEL_60:
      *(float *)(v10 + v44) = v19->arc.startAngle;
LABEL_61:
      v47 = v40;
      goto LABEL_62;
    }
    if (!v43)
      goto LABEL_61;
    v47 = 0;
    v44 = v42 + v15;
    if (v42 + v15 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= v40)
    {
      v15 = v44 + 4;
      goto LABEL_60;
    }
LABEL_62:
    v48 = (_DWORD *)((v10 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v48 >= v10 + v15)
    {
      v49 = (char *)v48 - v10;
      if ((unint64_t)v48 - v10 > 0xFFFFFFFFFFFFFFFBLL)
        goto LABEL_138;
      v15 = (unint64_t)(v49 + 4);
      if ((unint64_t)(v49 + 4) > v47)
        goto LABEL_138;
      *v48 = LODWORD(v19->arc.endAngle);
    }
    if (v15 < v47)
    {
      *(_BYTE *)(v10 + v15) = v19->arc.direction;
      v50 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = *((_QWORD *)v5 + 7);
      if (v50 + 16 >= v51)
        v50 = 0;
      if (v15 <= 0xF)
        v15 = 15;
      v52 = v15 + v50;
      if (v51 > v52 + 1)
        v53 = v52 + 1;
      else
        v53 = 0;
      *((_QWORD *)v5 + 9) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      if (v55 == 0x80000000 || *((_DWORD *)v5 + 27))
      {
        if (*((_BYTE *)v5 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
        *((_DWORD *)v5 + 27) = 0;
      }
      goto LABEL_78;
    }
LABEL_138:
    if (buf[16])
      break;
    __break(1u);
LABEL_160:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v4, *((_QWORD *)v3 + 480), &v102);
    v4 = v102;
    if (v102)
      v4 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v102);
  }
  v87 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v88 = v87 - *(_QWORD *)buf;
  if (v87 < *(_QWORD *)buf)
  {
    v89 = 0;
  }
  else
  {
    v89 = 0;
    if (v88 <= 0xFFFFFFFFFFFFFFFDLL && v88 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v88) = 2821;
      v89 = v88 + 2;
    }
  }
  v90 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v91 = *((_QWORD *)v5 + 7);
  if (v90 + 16 >= v91)
    v90 = 0;
  if (v89 <= 0x10)
    v89 = 16;
  v92 = v90 + v89;
  if (v91 <= v92)
    v92 = 0;
  *((_QWORD *)v5 + 9) = v92;
  v93 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
  do
    __ldaxr(v93);
  while (__stlxr(v92, v93));
  *((_DWORD *)v5 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v104, (uint64_t **)v5 + 1);
  v77 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillClosedArc>((uint64_t)v104, (_DWORD **)&v101, v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v104);
  if (v77)
    goto LABEL_152;
LABEL_78:
  v56 = v102;
  v102 = 0;
  if (v56)
  {
    v57 = *((_QWORD *)v56 + 1);
    if (__ldaxr((unsigned __int8 *)v57))
    {
      __clrex();
      goto LABEL_81;
    }
    if (__stxr(1u, (unsigned __int8 *)v57))
LABEL_81:
      MEMORY[0x19AEABB3C](v57);
    v59 = *(_QWORD *)(v57 + 8);
    v60 = v59 - 1;
    *(_QWORD *)(v57 + 8) = v59 - 1;
    if (v59 == 1)
    {
      v100 = *(_QWORD *)(v57 + 16);
      v61 = *(_QWORD *)(v57 + 24);
      *(_QWORD *)(v57 + 24) = 0;
      v62 = v100 != 0;
    }
    else
    {
      v61 = 0;
      v62 = 1;
    }
    v63 = __ldxr((unsigned __int8 *)v57);
    if (v63 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v57))
      {
LABEL_86:
        if (!v60)
        {
          if (v61)
            (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
          if (!v62)
            WTF::fastFree((WTF *)v57, v9);
        }
        goto LABEL_87;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v57);
    goto LABEL_86;
  }
LABEL_87:
  this = v103;
  v103 = 0;
  if (this)
  {
    do
    {
      v64 = __ldaxr((unsigned int *)this);
      v65 = v64 - 1;
    }
    while (__stlxr(v65, (unsigned int *)this));
    if (!v65)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v98, v99);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordFillQuadCurve(_QWORD *this, PathDataQuadCurve *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  int v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v74;
  IPC::StreamClientConnection *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  _BYTE buf[24];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = this[481];
  if (!v2)
    return this;
  v3 = this;
  this = *(_QWORD **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v75);
  if (!v75)
    return this;
  v5 = v3[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v3[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_113;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v5);
LABEL_113:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v74 = __ldxr((unsigned __int8 *)v5);
  if (v74 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_119:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v7 = 0;
LABEL_7:
  v8 = v75;
  v9 = v3[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v77, v11);
      if (!v79)
        break;
      *(_QWORD *)buf = v77;
      *(_QWORD *)&buf[8] = v78;
      *(_QWORD *)&buf[16] = 0;
      v12 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= v77;
      v14 = v12 - v77;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v78)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v77 + v14) = 834;
          *(_QWORD *)&buf[16] = v14 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode((uint64_t *)buf, a2);
      if (*(_QWORD *)&buf[8])
      {
        v18 = *(_QWORD *)&buf[16];
        v19 = *((_QWORD *)v8 + 8);
        v20 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v8 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v8 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_79;
      }
      v26 = v79;
      if (v79)
      {
        v27 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = v27 - v77;
        if (v27 < v77)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v78)
          {
            *(_WORD *)(v77 + v28) = 2821;
            v29 = v28 + 2;
          }
        }
        v30 = *((_QWORD *)v8 + 8);
        v31 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *((_QWORD *)v8 + 7);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v29 <= 0x10)
          v29 = 16;
        v33 = v31 + v29;
        if (v32 <= v33)
          v33 = 0;
        *((_QWORD *)v8 + 9) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          __ldaxr(v34);
        while (__stlxr(v33, v34));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)v8 + 1);
        v35 = v76;
        v36 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v36 = 834;
        *(_QWORD *)(v36 + 8) = v9;
        *(_QWORD *)(v36 + 528) = v36 + 16;
        *(_QWORD *)(v36 + 536) = v36 + 16;
        *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v36 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
        *(_QWORD *)buf = v36;
        IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode((IPC::Encoder *)v36, (int *)a2);
        v38 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)buf, 1, 0);
        v39 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v40, v41);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76);
        if (!v38)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v45 = v17;
LABEL_53:
      v46 = (_QWORD *)((v26 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v46 >= v26 + v45)
      {
        v47 = (char *)v46 - v26;
        v38 = 17;
        if ((unint64_t)v46 - v26 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v45 = (unint64_t)(v47 + 8);
        if ((unint64_t)(v47 + 8) > v17)
          goto LABEL_74;
        *v46 = v9;
      }
      if (!v17)
      {
        v38 = 17;
        goto LABEL_74;
      }
      v48 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v8 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v50 = v48 + v45;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v8 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *((_DWORD *)v8 + 27);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v69 = v54 + 1;
        *((_DWORD *)v8 + 27) = v69;
        if (v69 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (buf[16])
    {
      v26 = *(_QWORD *)buf;
      v42 = *(_QWORD *)&buf[8];
      v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - *(_QWORD *)buf;
      if (v43 < *(_QWORD *)buf)
      {
        v45 = 0;
        v17 = *(_QWORD *)&buf[8];
      }
      else
      {
        v17 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v45 = 0;
        if (v44 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
          v17 = v42;
          v45 = v44 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v38 = 15;
LABEL_74:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v38);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillQuadCurve";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = v3[481];
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_79:
  if ((v7 & 1) != 0)
    goto LABEL_96;
  v60 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v60))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v60))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v60);
LABEL_84:
  v62 = *(_QWORD *)(v60 + 8);
  v63 = v62 - 1;
  *(_QWORD *)(v60 + 8) = v62 - 1;
  if (v62 == 1)
  {
    v72 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v60 + 24) = 0;
    v65 = v72 != 0;
  }
  else
  {
    v64 = 0;
    v65 = 1;
  }
  v66 = __ldxr((unsigned __int8 *)v60);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v60))
    {
      if (!v63)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v60);
  if (!v63)
  {
LABEL_92:
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    if (!v65)
      WTF::fastFree((WTF *)v60, v16);
  }
LABEL_96:
  this = v75;
  v75 = 0;
  if (this)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)this);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)this));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordFillBezierCurve(_QWORD *this, PathDataBezierCurve *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  int v38;
  IPC::Encoder *v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  int v54;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v74;
  IPC::StreamClientConnection *v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  _BYTE buf[24];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = this[481];
  if (!v2)
    return this;
  v3 = this;
  this = *(_QWORD **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v75);
  if (!v75)
    return this;
  v5 = v3[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v3[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_113;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v5);
LABEL_113:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v74 = __ldxr((unsigned __int8 *)v5);
  if (v74 != 1)
  {
    __clrex();
    goto LABEL_119;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_119:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v7 = 0;
LABEL_7:
  v8 = v75;
  v9 = v3[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v77, v11);
      if (!v79)
        break;
      *(_QWORD *)buf = v77;
      *(_QWORD *)&buf[8] = v78;
      *(_QWORD *)&buf[16] = 0;
      v12 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= v77;
      v14 = v12 - v77;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v78)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v77 + v14) = 827;
          *(_QWORD *)&buf[16] = v14 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode((uint64_t *)buf, a2);
      if (*(_QWORD *)&buf[8])
      {
        v18 = *(_QWORD *)&buf[16];
        v19 = *((_QWORD *)v8 + 8);
        v20 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v8 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v23 = 0;
        else
          v23 = v22;
        *((_QWORD *)v8 + 9) = v23;
        v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v23, v24));
        if (v25 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_79;
      }
      v26 = v79;
      if (v79)
      {
        v27 = (v77 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = v27 - v77;
        if (v27 < v77)
        {
          v29 = 0;
        }
        else
        {
          v29 = 0;
          if (v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v78)
          {
            *(_WORD *)(v77 + v28) = 2821;
            v29 = v28 + 2;
          }
        }
        v30 = *((_QWORD *)v8 + 8);
        v31 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *((_QWORD *)v8 + 7);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v29 <= 0x10)
          v29 = 16;
        v33 = v31 + v29;
        if (v32 <= v33)
          v33 = 0;
        *((_QWORD *)v8 + 9) = v33;
        v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          __ldaxr(v34);
        while (__stlxr(v33, v34));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v76, (uint64_t **)v8 + 1);
        v35 = v76;
        v36 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v36 = 827;
        *(_QWORD *)(v36 + 8) = v9;
        *(_QWORD *)(v36 + 528) = v36 + 16;
        *(_QWORD *)(v36 + 536) = v36 + 16;
        *(_OWORD *)(v36 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v36 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v36);
        *(_QWORD *)buf = v36;
        IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode((IPC::Encoder *)v36, (int *)a2);
        v38 = IPC::Connection::sendMessageImpl((uint64_t)v35, (uint64_t *)buf, 1, 0);
        v39 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v39)
        {
          IPC::Encoder::~Encoder(v39, v37);
          WTF::fastFree(v40, v41);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v76);
        if (!v38)
          goto LABEL_79;
        goto LABEL_74;
      }
      __break(1u);
LABEL_108:
      v45 = v17;
LABEL_53:
      v46 = (_QWORD *)((v26 + v45 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v46 >= v26 + v45)
      {
        v47 = (char *)v46 - v26;
        v38 = 17;
        if ((unint64_t)v46 - v26 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_74;
        v45 = (unint64_t)(v47 + 8);
        if ((unint64_t)(v47 + 8) > v17)
          goto LABEL_74;
        *v46 = v9;
      }
      if (!v17)
      {
        v38 = 17;
        goto LABEL_74;
      }
      v48 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = *((_QWORD *)v8 + 7);
      if (v48 + 16 >= v49)
        v48 = 0;
      if (v45 <= 0x10)
        v45 = 16;
      v50 = v48 + v45;
      if (v49 <= v50)
        v51 = 0;
      else
        v51 = v50;
      *((_QWORD *)v8 + 9) = v51;
      v52 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v51, v52));
      v54 = *((_DWORD *)v8 + 27);
      if (v53 == 0x80000000 || v54 != 0)
      {
        v69 = v54 + 1;
        *((_DWORD *)v8 + 27) = v69;
        if (v69 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (buf[16])
    {
      v26 = *(_QWORD *)buf;
      v42 = *(_QWORD *)&buf[8];
      v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - *(_QWORD *)buf;
      if (v43 < *(_QWORD *)buf)
      {
        v45 = 0;
        v17 = *(_QWORD *)&buf[8];
      }
      else
      {
        v17 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_108;
        v45 = 0;
        if (v44 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
          v17 = v42;
          v45 = v44 + 2;
        }
      }
      goto LABEL_53;
    }
  }
  v38 = 15;
LABEL_74:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v38);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillBezierCurve";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = v3[481];
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_79:
  if ((v7 & 1) != 0)
    goto LABEL_96;
  v60 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v60))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v60))
  {
    goto LABEL_84;
  }
  MEMORY[0x19AEABB3C](v60);
LABEL_84:
  v62 = *(_QWORD *)(v60 + 8);
  v63 = v62 - 1;
  *(_QWORD *)(v60 + 8) = v62 - 1;
  if (v62 == 1)
  {
    v72 = *(_QWORD *)(v60 + 16);
    v64 = *(_QWORD *)(v60 + 24);
    *(_QWORD *)(v60 + 24) = 0;
    v65 = v72 != 0;
  }
  else
  {
    v64 = 0;
    v65 = 1;
  }
  v66 = __ldxr((unsigned __int8 *)v60);
  if (v66 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v60))
    {
      if (!v63)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v60);
  if (!v63)
  {
LABEL_92:
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
    if (!v65)
      WTF::fastFree((WTF *)v60, v16);
  }
LABEL_96:
  this = v75;
  v75 = 0;
  if (this)
  {
    do
    {
      v67 = __ldaxr((unsigned int *)this);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, (unsigned int *)this));
    if (!v68)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::recordFillPathSegment(WebKit::RemoteDisplayListRecorderProxy *this, PathSegment *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  WebKit::RemoteImageBufferProxy *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v53;
  uint64_t v54;
  int v55;
  int v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  _BYTE *v60;
  __alt<0UL, WebCore::PathMoveTo> *v61;
  WebKit::RemoteImageBufferProxy *v62;
  unsigned int *v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  _BYTE buf[24];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v61 = (__alt<0UL, WebCore::PathMoveTo> *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v63);
  if (!v63)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_96;
  v62 = 0;
  while (1)
  {
    v6 = v63;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
        v44 = 15;
LABEL_99:
        v55 = v44;
        goto LABEL_89;
      }
      v36 = *(_QWORD *)buf;
      v37 = *(_QWORD *)&buf[8];
      v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - *(_QWORD *)buf;
      if (v38 < *(_QWORD *)buf)
      {
        v41 = 0;
        v40 = *(_QWORD *)&buf[8];
      }
      else
      {
        v40 = 0;
        if (v39 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v41 = 0;
        }
        else
        {
          v41 = 0;
          if (v39 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v39) = 2822;
            v40 = v37;
            v41 = v39 + 2;
          }
        }
      }
      v42 = (v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v42 >= v36 + v41)
      {
        v43 = v42 - v36;
        v44 = 17;
        if (v43 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_99;
        v41 = v43 + 8;
        if (v43 + 8 > v40)
          goto LABEL_99;
        *(_QWORD *)(v36 + v43) = v7;
      }
      if (!v40)
      {
        v44 = 17;
        goto LABEL_99;
      }
      v45 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *((_QWORD *)v6 + 7);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *((_QWORD *)v6 + 9) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = v6[27];
      if (v50 == 0x80000000 || v51 != 0)
      {
        v53 = v51 + 1;
        v6[27] = v53;
        if (v53 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v64, v9);
    if (!v66)
    {
      v55 = 15;
      goto LABEL_89;
    }
    *(_QWORD *)buf = v64;
    *(_QWORD *)&buf[8] = v65;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v64;
    v12 = v10 - v64;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v65)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v64 + v12) = 833;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathSegment,void>::encode((uint64_t *)buf, (uint64_t)v61);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v19 = 0;
      *((_QWORD *)v6 + 9) = v19;
      v20 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v19, v20));
      v22 = v6[27];
      if (v21 == 0x80000000 || v22 != 0)
      {
        v35 = v22 + 1;
        v6[27] = v35;
        if (v35 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      goto LABEL_29;
    }
    if (v66)
      break;
    __break(1u);
LABEL_96:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v62);
    v5 = v62;
    if (v62)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v62);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v64, v65);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v56 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillPathSegment>(*(uint64_t *)buf, (int **)&v61, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  v55 = v56;
  if (!v56)
    goto LABEL_29;
LABEL_89:
  v57 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v58 = IPC::errorAsString(v55);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillPathSegment";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v58;
    _os_log_impl(&dword_196BCC000, v57, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v59 = *((_QWORD *)this + 481);
  if (v59)
  {
    v60 = *(_BYTE **)(v59 + 8);
    if (v60)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v60);
  }
LABEL_29:
  v24 = v62;
  v62 = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_33:
      v27 = *(_QWORD *)(v25 + 8);
      v28 = v27 - 1;
      *(_QWORD *)(v25 + 8) = v27 - 1;
      if (v27 == 1)
      {
        v54 = *(_QWORD *)(v25 + 16);
        v29 = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 24) = 0;
        v30 = v54 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr((unsigned __int8 *)v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_37:
      if (!v28)
      {
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v30)
          WTF::fastFree((WTF *)v25, v14);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v25);
    goto LABEL_33;
  }
LABEL_38:
  v32 = v63;
  v63 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      *(_QWORD *)buf = v32;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

void WebKit::RemoteDisplayListRecorderProxy::recordFillEllipse(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  unsigned __int8 *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  const char *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  int *v54;
  WebKit::RemoteImageBufferProxy *v55;
  unsigned int *v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  _BYTE buf[24];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v54 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v56);
  if (!v56)
    return;
  v5 = (unsigned __int8 *)*((_QWORD *)this + 479);
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)this + 480), &v55);
    v5 = (unsigned __int8 *)v55;
    if (v55)
      v5 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v55);
  }
  else
  {
    v55 = 0;
  }
  v6 = v56;
  v7 = *((_QWORD *)this + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v5);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v6 + 6) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_72;
    v34 = *(_QWORD *)buf;
    v35 = *(_QWORD *)&buf[8];
    v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v37 = v36 - *(_QWORD *)buf;
    if (v36 < *(_QWORD *)buf)
    {
      v39 = 0;
      v38 = *(_QWORD *)&buf[8];
    }
    else
    {
      v38 = 0;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = 0;
      }
      else
      {
        v39 = 0;
        if (v37 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
          v38 = v35;
          v39 = v37 + 2;
        }
      }
    }
    v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v40 >= v34 + v39)
    {
      v41 = (char *)v40 - v34;
      v42 = 17;
      if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_73;
      v39 = (unint64_t)(v41 + 8);
      if ((unint64_t)(v41 + 8) > v38)
        goto LABEL_73;
      *v40 = v7;
    }
    if (!v38)
    {
      v42 = 17;
      goto LABEL_73;
    }
    v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v44 = *((_QWORD *)v6 + 7);
    if (v43 + 16 >= v44)
      v43 = 0;
    if (v39 <= 0x10)
      v39 = 16;
    v45 = v43 + v39;
    if (v44 <= v45)
      v46 = 0;
    else
      v46 = v45;
    *((_QWORD *)v6 + 9) = v46;
    v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v46, v47));
    IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v6, v48 == 0x80000000);
    *((_QWORD *)v6 + 6) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v57, v9);
  if (!v59)
  {
LABEL_72:
    v42 = 15;
LABEL_73:
    v49 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v50 = IPC::errorAsString(v42);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_FillEllipse";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v50;
      _os_log_impl(&dword_196BCC000, v49, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v51 = *((_QWORD *)this + 481);
    if (v51)
    {
      v52 = *(_BYTE **)(v51 + 8);
      if (v52)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v52);
    }
    goto LABEL_27;
  }
  *(_QWORD *)buf = v57;
  *(_QWORD *)&buf[8] = v58;
  *(_QWORD *)&buf[16] = 0;
  v10 = (v57 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 >= v57;
  v12 = v10 - v57;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v58)
    {
      *(_QWORD *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v57 + v12) = 830;
      *(_QWORD *)&buf[16] = v12 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v54);
  if (*(_QWORD *)&buf[8])
  {
    v15 = *(_QWORD *)&buf[16];
    v16 = *((_QWORD *)v6 + 8);
    v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v18 = *((_QWORD *)v6 + 7);
    if (v17 + 16 >= v18)
      v17 = 0;
    if (*(_QWORD *)&buf[16] <= 0x10uLL)
      v15 = 16;
    v19 = v17 + v15;
    if (v18 <= v19)
      v20 = 0;
    else
      v20 = v19;
    *((_QWORD *)v6 + 9) = v20;
    v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v20, v21));
    if (v22 == 0x80000000 || v6[27])
    {
      if (*((_BYTE *)v6 + 96))
        MEMORY[0x19AEBA1A0](v6[21]);
      v6[27] = 0;
    }
    goto LABEL_27;
  }
  if (!v59)
    __break(1u);
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v57, v58);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillEllipse>(*(uint64_t *)buf, &v54, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (v42)
    goto LABEL_73;
LABEL_27:
  v23 = v55;
  v55 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_31:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v53 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v53 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_35:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v14);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_31;
  }
LABEL_36:
  v31 = v56;
  v56 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      *(_QWORD *)buf = v31;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteDisplayListRecorderProxy::recordPaintFrameForMedia(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::MediaPlayer *a2, const WebCore::FloatRect *a3)
{
  WebKit::RemoteRenderingBackendProxy *result;
  uint64_t v6;
  WebKit::RemoteRenderingBackendProxy *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  IPC::StreamClientConnection *v11;
  uint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v21;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  int v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  char *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  int v61;
  NSObject *v63;
  const char *v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  WTF *v77;
  void *v78;
  uint64_t v79;
  int v81;
  IPC::StreamClientConnection *v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned __int8 v86;
  _BYTE buf[24];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  result = (WebKit::RemoteRenderingBackendProxy *)WebCore::MediaPlayer::identifier(a2);
  v6 = *((_QWORD *)this + 481);
  if (!v6)
    return result;
  v7 = result;
  result = *(WebKit::RemoteRenderingBackendProxy **)(v6 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v82);
  if (!v82)
    return result;
  v8 = *((_QWORD *)this + 479);
  if (!v8)
  {
    v9 = 0;
LABEL_6:
    v10 = 1;
    goto LABEL_7;
  }
  v9 = *((_QWORD *)this + 480);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_120;
  }
  result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19AEABB3C](v8);
LABEL_120:
  if (*(_QWORD *)(v8 + 24))
    ++*(_QWORD *)(v8 + 8);
  else
    v9 = 0;
  v81 = __ldxr((unsigned __int8 *)v8);
  if (v81 != 1)
  {
    __clrex();
    goto LABEL_126;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_126:
    result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v9)
    goto LABEL_6;
  if (!*(_BYTE *)(v9 + 4016))
  {
    *(_BYTE *)(v9 + 4016) = 1;
    result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v9);
    if (result)
      result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(_QWORD *)result + 160))(result);
  }
  v10 = 0;
LABEL_7:
  v11 = v82;
  v12 = *((_QWORD *)this + 478);
  WTF::ApproximateTime::now(result);
  v14 = v13 + 15.0;
  if (*((_QWORD *)v11 + 6) == v12)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v11 + 56, &v84, v14);
      if (!v86)
        break;
      v15 = v84;
      v16 = v85;
      *(_QWORD *)buf = v84;
      *(_QWORD *)&buf[8] = v85;
      *(_QWORD *)&buf[16] = 0;
      v17 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = v17 - v84;
      if (v17 < v84)
      {
        v19 = 0;
      }
      else
      {
        v19 = v18 + 2;
        if (v18 > 0xFFFFFFFFFFFFFFFDLL || v19 > v85)
        {
          v16 = 0;
          v19 = 0;
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v84 + v18) = 841;
          *(_QWORD *)&buf[16] = v18 + 2;
        }
      }
      v21 = (_QWORD *)((v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v21 >= v15 + v19)
      {
        if ((unint64_t)v21 - v15 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v21 - v15 + 8 > v16)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *v21 = v7;
          *(_QWORD *)&buf[16] = (char *)v21 - v15 + 8;
        }
      }
      IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, a3);
      if (*(_QWORD *)&buf[8])
      {
        v25 = *(_QWORD *)&buf[16];
        v26 = *((_QWORD *)v11 + 8);
        v27 = (*((_QWORD *)v11 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *((_QWORD *)v11 + 7);
        if (v27 + 16 >= v28)
          v27 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v25 = 16;
        v29 = v27 + v25;
        if (v28 <= v29)
          v30 = 0;
        else
          v30 = v29;
        *((_QWORD *)v11 + 9) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v30, v31));
        if (v32 == 0x80000000 || *((_DWORD *)v11 + 27))
        {
          if (*((_BYTE *)v11 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
          *((_DWORD *)v11 + 27) = 0;
        }
        goto LABEL_84;
      }
      v33 = v86;
      if (v86)
      {
        v34 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = v34 - v84;
        if (v34 < v84)
        {
          v36 = 0;
        }
        else
        {
          v36 = 0;
          if (v35 <= 0xFFFFFFFFFFFFFFFDLL && v35 + 2 <= v85)
          {
            *(_WORD *)(v84 + v35) = 2821;
            v36 = v35 + 2;
          }
        }
        v37 = *((_QWORD *)v11 + 8);
        v38 = (*((_QWORD *)v11 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = *((_QWORD *)v11 + 7);
        if (v38 + 16 >= v39)
          v38 = 0;
        if (v36 <= 0x10)
          v36 = 16;
        v40 = v38 + v36;
        if (v39 <= v40)
          v40 = 0;
        *((_QWORD *)v11 + 9) = v40;
        v41 = (unint64_t *)(*(_QWORD *)(v37 + 16) + 128);
        do
          __ldaxr(v41);
        while (__stlxr(v40, v41));
        *((_DWORD *)v11 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)v11 + 1);
        v42 = v83;
        v43 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v43 = 841;
        *(_QWORD *)(v43 + 8) = v12;
        *(_QWORD *)(v43 + 528) = v43 + 16;
        *(_QWORD *)(v43 + 536) = v43 + 16;
        *(_OWORD *)(v43 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v43 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v43);
        *(_QWORD *)buf = v43;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v43, 8uLL, 8) = v7;
        IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v43, (int *)a3);
        v45 = IPC::Connection::sendMessageImpl((uint64_t)v42, (uint64_t *)buf, 1, 0);
        v46 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v46)
        {
          IPC::Encoder::~Encoder(v46, v44);
          WTF::fastFree(v47, v48);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v83);
        if (!v45)
          goto LABEL_84;
        goto LABEL_79;
      }
      __break(1u);
LABEL_114:
      v52 = v24;
LABEL_58:
      v53 = (_QWORD *)((v33 + v52 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v53 >= v33 + v52)
      {
        v54 = (char *)v53 - v33;
        v45 = 17;
        if ((unint64_t)v53 - v33 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_79;
        v52 = (unint64_t)(v54 + 8);
        if ((unint64_t)(v54 + 8) > v24)
          goto LABEL_79;
        *v53 = v12;
      }
      if (!v24)
      {
        v45 = 17;
        goto LABEL_79;
      }
      v55 = (*((_QWORD *)v11 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v56 = *((_QWORD *)v11 + 7);
      if (v55 + 16 >= v56)
        v55 = 0;
      if (v52 <= 0x10)
        v52 = 16;
      v57 = v55 + v52;
      if (v56 <= v57)
        v58 = 0;
      else
        v58 = v57;
      *((_QWORD *)v11 + 9) = v58;
      v59 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v11 + 8) + 16) + 128);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v58, v59));
      v61 = *((_DWORD *)v11 + 27);
      if (v60 == 0x80000000 || v61 != 0)
      {
        v76 = v61 + 1;
        *((_DWORD *)v11 + 27) = v76;
        if (v76 >= *((_DWORD *)v11 + 26))
        {
          if (*((_BYTE *)v11 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v11 + 21));
          *((_DWORD *)v11 + 27) = 0;
        }
      }
      *((_QWORD *)v11 + 6) = v12;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v11 + 56, buf, v13 + 15.0);
    if (buf[16])
    {
      v33 = *(_QWORD *)buf;
      v49 = *(_QWORD *)&buf[8];
      v50 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = v50 - *(_QWORD *)buf;
      if (v50 < *(_QWORD *)buf)
      {
        v52 = 0;
        v24 = *(_QWORD *)&buf[8];
      }
      else
      {
        v24 = 0;
        if (v51 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_114;
        v52 = 0;
        if (v51 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v51) = 2822;
          v24 = v49;
          v52 = v51 + 2;
        }
      }
      goto LABEL_58;
    }
  }
  v45 = 15;
LABEL_79:
  v63 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v64 = IPC::errorAsString(v45);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_PaintFrameForMedia";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v64;
    _os_log_impl(&dword_196BCC000, v63, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v65 = *((_QWORD *)this + 481);
  if (v65)
  {
    v66 = *(_BYTE **)(v65 + 8);
    if (v66)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v66);
  }
LABEL_84:
  if ((v10 & 1) != 0)
    goto LABEL_101;
  v67 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v67))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v67))
  {
    goto LABEL_89;
  }
  MEMORY[0x19AEABB3C](v67);
LABEL_89:
  v69 = *(_QWORD *)(v67 + 8);
  v70 = v69 - 1;
  *(_QWORD *)(v67 + 8) = v69 - 1;
  if (v69 == 1)
  {
    v79 = *(_QWORD *)(v67 + 16);
    v71 = *(_QWORD *)(v67 + 24);
    *(_QWORD *)(v67 + 24) = 0;
    v72 = v79 != 0;
  }
  else
  {
    v71 = 0;
    v72 = 1;
  }
  v73 = __ldxr((unsigned __int8 *)v67);
  if (v73 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v67))
    {
      if (!v70)
        goto LABEL_97;
      goto LABEL_101;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v67);
  if (!v70)
  {
LABEL_97:
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
    if (!v72)
      WTF::fastFree((WTF *)v67, v23);
  }
LABEL_101:
  result = v82;
  v82 = 0;
  if (result)
  {
    do
    {
      v74 = __ldaxr((unsigned int *)result);
      v75 = v74 - 1;
    }
    while (__stlxr(v75, (unsigned int *)result));
    if (!v75)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v77, v78);
    }
  }
  return result;
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteDisplayListRecorderProxy::recordPaintVideoFrame(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::VideoFrame *a2, const WebCore::FloatRect *a3, char a4)
{
  unsigned __int8 *v8;
  WebKit::SharedVideoFrameWriter *v10;
  WebKit::SharedVideoFrameWriter *v11;
  uint64_t v12;
  _QWORD *v13;
  IPC::Encoder *v14;
  WebKit::RemoteRenderingBackendProxy *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  IPC::StreamClientConnection *v20;
  uint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  int v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  int v70;
  unsigned int v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  int v76;
  _BYTE v77[24];
  uint64_t v78;
  int v79;
  char v80;
  IPC::StreamClientConnection *v81;
  uint64_t *v82;
  IPC::Encoder *v83;
  _BYTE buf[22];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v8 = (unsigned __int8 *)this + 3857;
  if (__ldaxr((unsigned __int8 *)this + 3857))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C]((char *)this + 3857);
    goto LABEL_5;
  }
  if (__stxr(1u, v8))
    goto LABEL_4;
LABEL_5:
  v10 = (WebKit::SharedVideoFrameWriter *)*((_QWORD *)this + 483);
  if (!v10)
  {
    v10 = (WebKit::SharedVideoFrameWriter *)WTF::fastMalloc((WTF *)0x18);
    v11 = WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter(v10);
    v12 = *((_QWORD *)this + 483);
    *((_QWORD *)this + 483) = v11;
    if (v12)
    {
      std::default_delete<WebKit::SharedVideoFrameWriter>::operator()[abi:sn180100]((uint64_t)this + 3864, v12);
      v10 = (WebKit::SharedVideoFrameWriter *)*((_QWORD *)this + 483);
    }
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v13 = off_1E34E1560;
  v13[1] = this;
  *(_QWORD *)buf = v13;
  v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v14 = off_1E34E1588;
  *((_QWORD *)v14 + 1) = this;
  v83 = v14;
  WebKit::SharedVideoFrameWriter::write(v10, (uint64_t)a2, (uint64_t *)buf, &v83, (uint64_t)v77);
  (*(void (**)(IPC::Encoder *))(*(_QWORD *)v14 + 8))(v14);
  result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  if (v80)
  {
    v16 = *((_QWORD *)this + 481);
    if (!v16
      || (result = *(WebKit::RemoteRenderingBackendProxy **)(v16 + 8)) == 0
      || (result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v81), !v81))
    {
LABEL_87:
      if (v80)
      {
        if (v79 != -1)
          result = (WebKit::RemoteRenderingBackendProxy *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E34E13D0[v79])(buf, &v78);
      }
      goto LABEL_90;
    }
    v17 = *((_QWORD *)this + 479);
    if (!v17)
    {
      v18 = 0;
      goto LABEL_14;
    }
    v18 = *((_QWORD *)this + 480);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_106;
    }
    result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19AEABB3C](v17);
LABEL_106:
    if (*(_QWORD *)(v17 + 24))
      ++*(_QWORD *)(v17 + 8);
    else
      v18 = 0;
    v76 = __ldxr((unsigned __int8 *)v17);
    if (v76 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
LABEL_113:
        if (v18)
        {
          if (!*(_BYTE *)(v18 + 4016))
          {
            *(_BYTE *)(v18 + 4016) = 1;
            result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v18);
            if (result)
              result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(_QWORD *)result + 160))(result);
          }
          v19 = 0;
LABEL_15:
          v20 = v81;
          v21 = *((_QWORD *)this + 478);
          WTF::ApproximateTime::now(result);
          v23 = v22 + 15.0;
          if (*((_QWORD *)v20 + 6) != v21)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v20 + 56, buf, v22 + 15.0);
            if (!buf[16])
              goto LABEL_60;
            v41 = *(_QWORD *)buf;
            v42 = *(_QWORD *)&buf[8];
            v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v44 = v43 - *(_QWORD *)buf;
            if (v43 < *(_QWORD *)buf)
            {
              v46 = 0;
              v45 = *(_QWORD *)&buf[8];
            }
            else
            {
              v45 = 0;
              if (v44 > 0xFFFFFFFFFFFFFFFDLL)
              {
                v46 = 0;
              }
              else
              {
                v46 = 0;
                if (v44 + 2 <= *(_QWORD *)&buf[8])
                {
                  *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
                  v45 = v42;
                  v46 = v44 + 2;
                }
              }
            }
            v47 = (_QWORD *)((v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v47 >= v41 + v46)
            {
              v48 = (char *)v47 - v41;
              v36 = 17;
              if ((unint64_t)v47 - v41 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_61;
              v46 = (unint64_t)(v48 + 8);
              if ((unint64_t)(v48 + 8) > v45)
                goto LABEL_61;
              *v47 = v21;
            }
            if (!v45)
            {
              v36 = 17;
              goto LABEL_61;
            }
            v49 = (*((_QWORD *)v20 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v50 = *((_QWORD *)v20 + 7);
            if (v49 + 16 >= v50)
              v49 = 0;
            if (v46 <= 0x10)
              v46 = 16;
            v51 = v49 + v46;
            if (v50 <= v51)
              v52 = 0;
            else
              v52 = v51;
            *((_QWORD *)v20 + 9) = v52;
            v53 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v20 + 8) + 16) + 128);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v52, v53));
            v55 = *((_DWORD *)v20 + 27);
            if (v54 == 0x80000000 || v55 != 0)
            {
              v71 = v55 + 1;
              *((_DWORD *)v20 + 27) = v71;
              if (v71 >= *((_DWORD *)v20 + 26))
              {
                if (*((_BYTE *)v20 + 96))
                  MEMORY[0x19AEBA1A0](*((unsigned int *)v20 + 21));
                *((_DWORD *)v20 + 27) = 0;
              }
            }
            *((_QWORD *)v20 + 6) = v21;
          }
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v20 + 56, buf, v23);
          if (buf[16])
          {
            v24 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v25 = v24 - *(_QWORD *)buf;
            if (v24 < *(_QWORD *)buf
              || ((v26 = v25 + 2, v25 <= 0xFFFFFFFFFFFFFFFDLL) ? (v27 = v26 > *(_QWORD *)&buf[8]) : (v27 = 1), v27))
            {
              v26 = 0;
            }
            else
            {
              *(_WORD *)(*(_QWORD *)buf + v25) = 2821;
            }
            v28 = *((_QWORD *)v20 + 8);
            v29 = (*((_QWORD *)v20 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v30 = *((_QWORD *)v20 + 7);
            if (v29 + 16 >= v30)
              v29 = 0;
            if (v26 <= 0x10)
              v26 = 16;
            v31 = v29 + v26;
            if (v30 <= v31)
              v31 = 0;
            *((_QWORD *)v20 + 9) = v31;
            v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
            do
              __ldaxr(v32);
            while (__stlxr(v31, v32));
            *((_DWORD *)v20 + 27) = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v82, (uint64_t **)v20 + 1);
            v33 = v82;
            v34 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v34 = 842;
            *(_QWORD *)(v34 + 8) = v21;
            *(_QWORD *)(v34 + 528) = v34 + 16;
            *(_QWORD *)(v34 + 536) = v34 + 16;
            *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v34 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
            v83 = (IPC::Encoder *)v34;
            IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode((IPC::Encoder *)v34, (uint64_t)v77);
            IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v34, (int *)a3);
            *IPC::Encoder::grow((IPC::Encoder *)v34, 1uLL, 1) = a4;
            v36 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)&v83, 1, 0);
            v37 = v83;
            v83 = 0;
            if (v37)
            {
              IPC::Encoder::~Encoder(v37, v35);
              WTF::fastFree(v38, v39);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v82);
            if (!v36)
            {
LABEL_66:
              if ((v19 & 1) != 0)
                goto LABEL_83;
              v61 = *(_QWORD *)(v18 + 8);
              if (__ldaxr((unsigned __int8 *)v61))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v61))
              {
                goto LABEL_71;
              }
              MEMORY[0x19AEABB3C](v61);
LABEL_71:
              v63 = *(_QWORD *)(v61 + 8);
              v64 = v63 - 1;
              *(_QWORD *)(v61 + 8) = v63 - 1;
              if (v63 == 1)
              {
                v74 = *(_QWORD *)(v61 + 16);
                v65 = *(_QWORD *)(v61 + 24);
                *(_QWORD *)(v61 + 24) = 0;
                v66 = v74 != 0;
              }
              else
              {
                v65 = 0;
                v66 = 1;
              }
              v67 = __ldxr((unsigned __int8 *)v61);
              if (v67 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v61))
                {
                  if (!v64)
                    goto LABEL_79;
                  goto LABEL_83;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v61);
              if (!v64)
              {
LABEL_79:
                if (v65)
                  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
                if (!v66)
                  WTF::fastFree((WTF *)v61, v40);
              }
LABEL_83:
              result = v81;
              v81 = 0;
              if (result)
              {
                do
                {
                  v68 = __ldaxr((unsigned int *)result);
                  v69 = v68 - 1;
                }
                while (__stlxr(v69, (unsigned int *)result));
                if (!v69)
                {
                  atomic_store(1u, (unsigned int *)result);
                  IPC::StreamClientConnection::~StreamClientConnection(result);
                  result = (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v72, v73);
                }
              }
              goto LABEL_87;
            }
LABEL_61:
            v57 = qword_1ECE716E0;
            if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
            {
              v58 = IPC::errorAsString(v36);
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_PaintVideoFrame";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v58;
              _os_log_impl(&dword_196BCC000, v57, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
            }
            v59 = *((_QWORD *)this + 481);
            if (v59)
            {
              v60 = *(_BYTE **)(v59 + 8);
              if (v60)
                WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v60);
            }
            goto LABEL_66;
          }
LABEL_60:
          v36 = 15;
          goto LABEL_61;
        }
LABEL_14:
        v19 = 1;
        goto LABEL_15;
      }
    }
    else
    {
      __clrex();
    }
    result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v17);
    goto LABEL_113;
  }
LABEL_90:
  v70 = __ldxr(v8);
  if (v70 != 1)
  {
    __clrex();
    return (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  }
  if (__stlxr(0, v8))
    return (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  return result;
}

void WebKit::RemoteDisplayListRecorderProxy::recordStrokeRect(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRect *a2, float a3)
{
  uint64_t v3;
  WebKit::RemoteRenderingBackendProxy *v5;
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  WebKit::RemoteImageBufferProxy *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  NSObject *v56;
  const char *v57;
  uint64_t v58;
  _BYTE *v59;
  const WebCore::FloatRect *v60;
  float v61;
  WebKit::RemoteImageBufferProxy *v62;
  unsigned int *v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  _BYTE buf[24];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v60 = a2;
  v61 = a3;
  v3 = *((_QWORD *)this + 481);
  if (!v3)
    return;
  v5 = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!v5)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v5, &v63);
  if (!v63)
    return;
  v6 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v6)
    goto LABEL_93;
  v62 = 0;
  while (1)
  {
    v7 = v63;
    v8 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v6);
    v10 = v9 + 15.0;
    if (*((_QWORD *)v7 + 6) != v8)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9 + 15.0);
      if (!buf[16])
      {
        v43 = 15;
LABEL_96:
        v54 = v43;
        goto LABEL_86;
      }
      v35 = *(_QWORD *)buf;
      v36 = *(_QWORD *)&buf[8];
      v37 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - *(_QWORD *)buf;
      if (v37 < *(_QWORD *)buf)
      {
        v40 = 0;
        v39 = *(_QWORD *)&buf[8];
      }
      else
      {
        v39 = 0;
        if (v38 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v38 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v38) = 2822;
            v39 = v36;
            v40 = v38 + 2;
          }
        }
      }
      v41 = (v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v41 >= v35 + v40)
      {
        v42 = v41 - v35;
        v43 = 17;
        if (v42 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_96;
        v40 = v42 + 8;
        if (v42 + 8 > v39)
          goto LABEL_96;
        *(_QWORD *)(v35 + v42) = v8;
      }
      if (!v39)
      {
        v43 = 17;
        goto LABEL_96;
      }
      v44 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v45 = *((_QWORD *)v7 + 7);
      if (v44 + 16 >= v45)
        v44 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v46 = v44 + v40;
      if (v45 <= v46)
        v47 = 0;
      else
        v47 = v46;
      *((_QWORD *)v7 + 9) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = v7[27];
      if (v49 == 0x80000000 || v50 != 0)
      {
        v52 = v50 + 1;
        v7[27] = v52;
        if (v52 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = v8;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), &v64, v10);
    if (!v66)
    {
      v54 = 15;
      goto LABEL_86;
    }
    *(_QWORD *)buf = v64;
    *(_QWORD *)&buf[8] = v65;
    *(_QWORD *)&buf[16] = 0;
    v11 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v12 = v11 >= v64;
    v13 = v11 - v64;
    if (v12)
    {
      if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v65)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v64 + v13) = 867;
        *(_QWORD *)&buf[16] = v13 + 2;
      }
    }
    v6 = (WTF::ApproximateTime *)IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,float>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WebCore::FloatRect const&,float>,0ul,1ul>((uint64_t *)buf, (uint64_t)&v60);
    if (*(_QWORD *)&buf[8])
    {
      v16 = *(_QWORD *)&buf[16];
      v17 = *((_QWORD *)v7 + 8);
      v18 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v7 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v16 = 16;
      v20 = v18 + v16;
      if (v19 <= v20)
        v21 = 0;
      else
        v21 = v20;
      *((_QWORD *)v7 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      if (v23 == 0x80000000 || v7[27])
      {
        if (*((_BYTE *)v7 + 96))
          MEMORY[0x19AEBA1A0](v7[21]);
        v7[27] = 0;
      }
      goto LABEL_27;
    }
    if (v66)
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v6, *((_QWORD *)this + 480), &v62);
    v6 = v62;
    if (v62)
      v6 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v62);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, v64, v65);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v7 + 1);
  v55 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeRect>(*(uint64_t *)buf, (uint64_t)&v60, v8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  v54 = v55;
  if (!v55)
    goto LABEL_27;
LABEL_86:
  v56 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v57 = IPC::errorAsString(v54);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeRect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v57;
    _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v58 = *((_QWORD *)this + 481);
  if (v58)
  {
    v59 = *(_BYTE **)(v58 + 8);
    if (v59)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v59);
  }
LABEL_27:
  v24 = v62;
  v62 = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_31:
      v27 = *(_QWORD *)(v25 + 8);
      v28 = v27 - 1;
      *(_QWORD *)(v25 + 8) = v27 - 1;
      if (v27 == 1)
      {
        v53 = *(_QWORD *)(v25 + 16);
        v29 = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 24) = 0;
        v30 = v53 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr((unsigned __int8 *)v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_35:
      if (!v28)
      {
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v30)
          WTF::fastFree((WTF *)v25, v15);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v25);
    goto LABEL_31;
  }
LABEL_36:
  v32 = v63;
  v63 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      *(_QWORD *)buf = v32;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokeLine(WTF::ApproximateTime *this, const PathDataLine *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  WebKit::RemoteImageBufferProxy *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  int v55;
  int v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  _BYTE *v60;
  int *v61;
  WebKit::RemoteImageBufferProxy *v62;
  IPC::StreamClientConnection *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned __int8 v66;
  _BYTE buf[24];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v61 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v63);
  if (!v63)
    return this;
  v4 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *((_QWORD *)v3 + 480), &v62);
    v4 = (unsigned __int8 *)v62;
    if (v62)
      v4 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v62);
  }
  else
  {
    v62 = 0;
  }
  v5 = v63;
  v6 = *((_QWORD *)v3 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v4);
  v8 = v7 + 15.0;
  if (*((_QWORD *)v5 + 6) == v6)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v64, v8);
      if (!v66)
      {
        v55 = 15;
        goto LABEL_89;
      }
      *(_QWORD *)buf = v64;
      *(_QWORD *)&buf[8] = v65;
      *(_QWORD *)&buf[16] = 0;
      v9 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= v64;
      v11 = v9 - v64;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v65)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v64 + v11) = 862;
          *(_QWORD *)&buf[16] = v11 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)buf, v61);
      if (*(_QWORD *)&buf[8])
      {
        v15 = *(_QWORD *)&buf[16];
        v16 = *((_QWORD *)v5 + 8);
        v17 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *((_QWORD *)v5 + 7);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v15 = 16;
        v19 = v17 + v15;
        if (v18 <= v19)
          v19 = 0;
        *((_QWORD *)v5 + 9) = v19;
        v20 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v19, v20));
        v22 = *((_DWORD *)v5 + 27);
        if (v21 == 0x80000000 || v22 != 0)
        {
          v34 = v22 + 1;
          *((_DWORD *)v5 + 27) = v34;
          if (v34 >= *((_DWORD *)v5 + 26))
          {
            if (*((_BYTE *)v5 + 96))
              MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
            *((_DWORD *)v5 + 27) = 0;
          }
        }
        goto LABEL_29;
      }
      v35 = v66;
      if (v66)
        break;
      __break(1u);
LABEL_100:
      v39 = 0;
      v38 = v14;
LABEL_60:
      v40 = (v35 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v40 >= v35 + v39)
      {
        v41 = v40 - v35;
        v42 = 17;
        if (v41 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_98;
        v39 = v41 + 8;
        if (v41 + 8 > v38)
          goto LABEL_98;
        *(_QWORD *)(v35 + v41) = v6;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_98;
      }
      v43 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v5 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v5 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = *((_DWORD *)v5 + 27);
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        *((_DWORD *)v5 + 27) = v51;
        if (v51 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      *((_QWORD *)v5 + 6) = v6;
    }
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v64, v65);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
    v56 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeLine>(*(uint64_t *)buf, &v61, v6);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
    v55 = v56;
    if (!v56)
      goto LABEL_29;
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
    if (buf[16])
    {
      v35 = *(_QWORD *)buf;
      v14 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
        goto LABEL_100;
      v38 = 0;
      if (v37 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = 0;
      }
      else
      {
        v39 = 0;
        if (v37 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
          v38 = v14;
          v39 = v37 + 2;
        }
      }
      goto LABEL_60;
    }
    v42 = 15;
LABEL_98:
    v55 = v42;
  }
LABEL_89:
  v57 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v58 = IPC::errorAsString(v55);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeLine";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v58;
    _os_log_impl(&dword_196BCC000, v57, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v59 = *((_QWORD *)v3 + 481);
  if (v59)
  {
    v60 = *(_BYTE **)(v59 + 8);
    if (v60)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v60);
  }
LABEL_29:
  v24 = v62;
  v62 = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_33:
      v27 = *(_QWORD *)(v25 + 8);
      v28 = v27 - 1;
      *(_QWORD *)(v25 + 8) = v27 - 1;
      if (v27 == 1)
      {
        v54 = *(_QWORD *)(v25 + 16);
        v29 = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 24) = 0;
        v30 = v54 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr((unsigned __int8 *)v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_37:
      if (!v28)
      {
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v30)
          WTF::fastFree((WTF *)v25, v13);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v25);
    goto LABEL_33;
  }
LABEL_38:
  this = v63;
  v63 = 0;
  if (this)
  {
    do
    {
      v32 = __ldaxr((unsigned int *)this);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, (unsigned int *)this));
    if (!v33)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v52, v53);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokeLineWithColorAndThickness(WTF::ApproximateTime *result, int *a2, uint64_t *a3)
{
  uint64_t v3;
  WTF::ApproximateTime *v4;
  unsigned __int8 *v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  void *v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  WebKit::RemoteImageBufferProxy *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  unsigned int v57;
  WTF *v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  void *v71;
  int v72;
  IPC::Encoder *v73;
  WTF *v74;
  void *v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  WebKit::RemoteImageBufferProxy *v81;
  IPC::StreamClientConnection *v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  unsigned __int8 v86;
  _BYTE buf[24];
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 481);
  if (!v3)
    return result;
  v4 = result;
  result = *(WTF::ApproximateTime **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v82);
  if (!v82)
    return result;
  v7 = (unsigned __int8 *)*((_QWORD *)v4 + 479);
  if (v7)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v7, *((_QWORD *)v4 + 480), &v81);
    v7 = (unsigned __int8 *)v81;
    if (v81)
      v7 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v81);
  }
  else
  {
    v81 = 0;
  }
  v8 = v82;
  v9 = *((_QWORD *)v4 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v7);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, &v84, v11);
      if (!v86)
      {
        v72 = 15;
        goto LABEL_108;
      }
      *(_QWORD *)buf = v84;
      *(_QWORD *)&buf[8] = v85;
      *(_QWORD *)&buf[16] = 0;
      v12 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= v84;
      v14 = v12 - v84;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v85)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v84 + v14) = 863;
          *(_QWORD *)&buf[16] = v14 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)buf, a2);
      IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode(buf, a3);
      if (*(_QWORD *)&buf[8])
      {
        v20 = *(_QWORD *)&buf[16];
        v21 = *((_QWORD *)v8 + 8);
        v22 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *((_QWORD *)v8 + 7);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v20 = 16;
        v24 = v22 + v20;
        if (v23 <= v24)
          v24 = 0;
        *((_QWORD *)v8 + 9) = v24;
        v25 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v24, v25));
        v27 = *((_DWORD *)v8 + 27);
        if (v26 == 0x80000000 || v27 != 0)
        {
          v39 = v27 + 1;
          *((_DWORD *)v8 + 27) = v39;
          if (v39 >= *((_DWORD *)v8 + 26))
          {
            if (*((_BYTE *)v8 + 96))
              MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
            *((_DWORD *)v8 + 27) = 0;
          }
        }
        goto LABEL_29;
      }
      v80 = v9;
      v40 = v86;
      if (v86)
      {
        v61 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v62 = v61 - v84;
        if (v61 < v84)
        {
          v63 = 0;
        }
        else
        {
          v63 = 0;
          if (v62 <= 0xFFFFFFFFFFFFFFFDLL && v62 + 2 <= v85)
          {
            *(_WORD *)(v84 + v62) = 2821;
            v63 = v62 + 2;
          }
        }
        v64 = *((_QWORD *)v8 + 8);
        v65 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v66 = *((_QWORD *)v8 + 7);
        if (v65 + 16 >= v66)
          v65 = 0;
        if (v63 <= 0x10)
          v63 = 16;
        v67 = v65 + v63;
        if (v66 <= v67)
          v67 = 0;
        *((_QWORD *)v8 + 9) = v67;
        v68 = (unint64_t *)(*(_QWORD *)(v64 + 16) + 128);
        do
          __ldaxr(v68);
        while (__stlxr(v67, v68));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)v8 + 1);
        v69 = v83;
        v70 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v70 = 863;
        *(_QWORD *)(v70 + 8) = v80;
        *(_QWORD *)(v70 + 528) = v70 + 16;
        *(_QWORD *)(v70 + 536) = v70 + 16;
        *(_OWORD *)(v70 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v70 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v70);
        *(_QWORD *)buf = v70;
        IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v70, a2);
        IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode((IPC::Encoder *)v70, a3);
        v72 = IPC::Connection::sendMessageImpl((uint64_t)v69, (uint64_t *)buf, 1, 0);
        v73 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v73)
        {
          IPC::Encoder::~Encoder(v73, v71);
          WTF::fastFree(v74, v75);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v83);
        if (v72)
          goto LABEL_108;
        goto LABEL_29;
      }
      __break(1u);
LABEL_119:
      if (!v17)
        break;
      v45 = 0;
      if (v19 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v42 = 0;
      }
      else
      {
        v42 = 0;
        if (v19 + 2 <= v18)
        {
          v42 = v19 + 2;
LABEL_64:
          *(_WORD *)(v40 + v19) = 2822;
          goto LABEL_65;
        }
      }
LABEL_66:
      v46 = (v40 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v46 >= v40 + v42)
      {
        v47 = v46 - v40;
        v48 = 17;
        if (v47 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_117;
        v42 = v47 + 8;
        if (v47 + 8 > v45)
          goto LABEL_117;
        *(_QWORD *)(v40 + v47) = v9;
      }
      if (!v45)
      {
        v48 = 17;
        goto LABEL_117;
      }
      v49 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v50 = *((_QWORD *)v8 + 7);
      if (v49 + 16 >= v50)
        v49 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v51 = v49 + v42;
      if (v50 <= v51)
        v52 = 0;
      else
        v52 = v51;
      *((_QWORD *)v8 + 9) = v52;
      v53 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v52, v53));
      v55 = *((_DWORD *)v8 + 27);
      if (v54 == 0x80000000 || v55 != 0)
      {
        v57 = v55 + 1;
        *((_DWORD *)v8 + 27) = v57;
        if (v57 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
    v42 = 0;
LABEL_65:
    v45 = v18;
    goto LABEL_66;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
  if (buf[16])
  {
    v40 = *(_QWORD *)buf;
    v18 = *(_QWORD *)&buf[8];
    v41 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v19 = v41 - *(_QWORD *)buf;
    v17 = v41 >= *(_QWORD *)buf;
    v42 = v41 - *(_QWORD *)buf + 2;
    v44 = v19 < 0xFFFFFFFFFFFFFFFELL && v42 <= *(_QWORD *)&buf[8];
    if (!v17 || !v44)
      goto LABEL_119;
    goto LABEL_64;
  }
  v48 = 15;
LABEL_117:
  v72 = v48;
LABEL_108:
  v76 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v77 = IPC::errorAsString(v72);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeLineWithColorAndThickness";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v77;
    _os_log_impl(&dword_196BCC000, v76, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v78 = *((_QWORD *)v4 + 481);
  if (v78)
  {
    v79 = *(_BYTE **)(v78 + 8);
    if (v79)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v79);
  }
LABEL_29:
  v29 = v81;
  v81 = 0;
  if (v29)
  {
    v30 = *((_QWORD *)v29 + 1);
    if (__ldaxr((unsigned __int8 *)v30))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v30))
    {
LABEL_33:
      v32 = *(_QWORD *)(v30 + 8);
      v33 = v32 - 1;
      *(_QWORD *)(v30 + 8) = v32 - 1;
      if (v32 == 1)
      {
        v60 = *(_QWORD *)(v30 + 16);
        v34 = *(_QWORD *)(v30 + 24);
        *(_QWORD *)(v30 + 24) = 0;
        v35 = v60 != 0;
      }
      else
      {
        v34 = 0;
        v35 = 1;
      }
      v36 = __ldxr((unsigned __int8 *)v30);
      if (v36 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v30))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v30);
LABEL_37:
      if (!v33)
      {
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        if (!v35)
          WTF::fastFree((WTF *)v30, v16);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v30);
    goto LABEL_33;
  }
LABEL_38:
  result = v82;
  v82 = 0;
  if (result)
  {
    do
    {
      v37 = __ldaxr((unsigned int *)result);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, (unsigned int *)result));
    if (!v38)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WTF::ApproximateTime *)WTF::fastFree(v58, v59);
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokeArc(WTF::ApproximateTime *this, PathArc *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  BOOL v46;
  unint64_t v47;
  float *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  WebKit::RemoteImageBufferProxy *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  BOOL v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  void *v99;
  IPC::Encoder *v100;
  WTF *v101;
  void *v102;
  NSObject *v103;
  const char *v104;
  uint64_t v105;
  _BYTE *v106;
  WTF *v107;
  void *v108;
  uint64_t v109;
  WebKit::RemoteImageBufferProxy *v110;
  IPC::StreamClientConnection *v111;
  uint64_t *v112;
  IPC::Encoder *v113;
  _BYTE buf[22];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v111);
  if (!v111)
    return this;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v5)
    goto LABEL_166;
  v110 = 0;
  while (1)
  {
    v6 = v111;
    v7 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) == v7)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (!buf[16])
    {
LABEL_164:
      v80 = 15;
LABEL_158:
      v103 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v104 = IPC::errorAsString(v80);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeArc";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v104;
        _os_log_impl(&dword_196BCC000, v103, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v105 = *((_QWORD *)v3 + 481);
      if (v105)
      {
        v106 = *(_BYTE **)(v105 + 8);
        if (v106)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v106);
      }
      goto LABEL_81;
    }
    v69 = *(_QWORD *)buf;
    v70 = *(_QWORD *)&buf[8];
    v71 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v72 = v71 - *(_QWORD *)buf;
    v73 = v71 >= *(_QWORD *)buf;
    v74 = v71 - *(_QWORD *)buf + 2;
    v76 = v72 < 0xFFFFFFFFFFFFFFFELL && v74 <= *(_QWORD *)&buf[8];
    if (v73 && v76)
      goto LABEL_116;
    if (!v73)
    {
      v74 = 0;
      goto LABEL_117;
    }
    v77 = 0;
    if (v72 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v74 = 0;
      goto LABEL_118;
    }
    v74 = 0;
    if (v72 + 2 <= *(_QWORD *)&buf[8])
    {
      v74 = v72 + 2;
LABEL_116:
      *(_WORD *)(*(_QWORD *)buf + v72) = 2822;
LABEL_117:
      v77 = v70;
    }
LABEL_118:
    v78 = (_QWORD *)((v69 + v74 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v78 >= v69 + v74)
    {
      v79 = (char *)v78 - v69;
      v80 = 17;
      if ((unint64_t)v78 - v69 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_158;
      v74 = (unint64_t)(v79 + 8);
      if ((unint64_t)(v79 + 8) > v77)
        goto LABEL_158;
      *v78 = v7;
    }
    if (!v77)
    {
      v80 = 17;
      goto LABEL_158;
    }
    v81 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v82 = *((_QWORD *)v6 + 7);
    if (v81 + 16 >= v82)
      v81 = 0;
    if (v74 <= 0x10)
      v74 = 16;
    v83 = v81 + v74;
    if (v82 <= v83)
      v84 = 0;
    else
      v84 = v83;
    *((_QWORD *)v6 + 9) = v84;
    v85 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v84, v85));
    v87 = *((_DWORD *)v6 + 27);
    if (v86 == 0x80000000 || v87 != 0)
    {
      v89 = v87 + 1;
      *((_DWORD *)v6 + 27) = v89;
      if (v89 >= *((_DWORD *)v6 + 26))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
    }
    *((_QWORD *)v6 + 6) = v7;
LABEL_7:
    v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
    if (!buf[16])
      goto LABEL_164;
    v11 = *(_QWORD *)buf;
    v12 = *(_QWORD *)&buf[8];
    v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 - *(_QWORD *)buf;
    v15 = v13 >= *(_QWORD *)buf;
    v16 = v13 - *(_QWORD *)buf + 2;
    v18 = v14 < 0xFFFFFFFFFFFFFFFELL && v16 <= *(_QWORD *)&buf[8];
    if (v15 && v18)
      goto LABEL_16;
    if (!v15)
    {
      v16 = 0;
      goto LABEL_17;
    }
    v19 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      if (v14 + 2 <= *(_QWORD *)&buf[8])
      {
        v16 = v14 + 2;
LABEL_16:
        *(_WORD *)(*(_QWORD *)buf + v14) = 858;
LABEL_17:
        v19 = v12;
      }
    }
    v20 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v21 = v20 - (v11 + v16);
    v22 = v20 >= v11 + v16;
    v23 = v20 - v11;
    v24 = v21 + v16 >= 0xFFFFFFFFFFFFFFFCLL || v21 + v16 + 4 > v19;
    v25 = !v24;
    if (v22 && v25)
    {
      v16 += v21 + 4;
    }
    else
    {
      if (!v22)
        goto LABEL_28;
      v26 = 0;
      v23 = v21 + v16;
      if (v21 + v16 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > v19)
        goto LABEL_29;
      v16 = v23 + 4;
    }
    *(float *)(v11 + v23) = a2->center.m_x;
LABEL_28:
    v26 = v19;
LABEL_29:
    v27 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = v27 - (v11 + v16);
    v29 = v27 >= v11 + v16;
    v30 = v27 - v11;
    v31 = v28 + v16 >= 0xFFFFFFFFFFFFFFFCLL || v28 + v16 + 4 > v26;
    v32 = !v31;
    if (v29 && v32)
    {
      v16 += v28 + 4;
    }
    else
    {
      if (!v29)
        goto LABEL_39;
      v33 = 0;
      v30 = v28 + v16;
      if (v28 + v16 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > v26)
        goto LABEL_40;
      v16 = v30 + 4;
    }
    *(float *)(v11 + v30) = a2->center.m_y;
LABEL_39:
    v33 = v26;
LABEL_40:
    v34 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = v34 - (v11 + v16);
    v36 = v34 >= v11 + v16;
    v37 = v34 - v11;
    v38 = v35 + v16 >= 0xFFFFFFFFFFFFFFFCLL || v35 + v16 + 4 > v33;
    v39 = !v38;
    if (v36 && v39)
    {
      v16 += v35 + 4;
    }
    else
    {
      if (!v36)
        goto LABEL_50;
      v40 = 0;
      v37 = v35 + v16;
      if (v35 + v16 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > v33)
        goto LABEL_51;
      v16 = v37 + 4;
    }
    *(float *)(v11 + v37) = a2->radius;
LABEL_50:
    v40 = v33;
LABEL_51:
    v41 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v42 = v41 - (v11 + v16);
    v43 = v41 >= v11 + v16;
    v44 = v41 - v11;
    v46 = v42 + v16 < 0xFFFFFFFFFFFFFFFCLL && v42 + v16 + 4 <= v40;
    if (v43 && v46)
    {
      v16 += v42 + 4;
LABEL_60:
      *(float *)(v11 + v44) = a2->startAngle;
LABEL_61:
      v47 = v40;
      goto LABEL_62;
    }
    if (!v43)
      goto LABEL_61;
    v47 = 0;
    v44 = v42 + v16;
    if (v42 + v16 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= v40)
    {
      v16 = v44 + 4;
      goto LABEL_60;
    }
LABEL_62:
    v48 = (float *)((v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v48 >= v11 + v16)
    {
      v49 = (char *)v48 - v11;
      if ((unint64_t)v48 - v11 > 0xFFFFFFFFFFFFFFFBLL)
        goto LABEL_142;
      v16 = (unint64_t)(v49 + 4);
      if ((unint64_t)(v49 + 4) > v47)
        goto LABEL_142;
      *v48 = a2->endAngle;
    }
    if (v16 < v47)
    {
      *(_BYTE *)(v11 + v16) = a2->direction;
      v50 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = *((_QWORD *)v6 + 7);
      if (v50 + 16 >= v51)
        v50 = 0;
      if (v16 <= 0xF)
        v16 = 15;
      v52 = v16 + v50;
      if (v51 > v52 + 1)
        v53 = v52 + 1;
      else
        v53 = 0;
      *((_QWORD *)v6 + 9) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = *((_DWORD *)v6 + 27);
      if (v55 == 0x80000000 || v56 != 0)
      {
        v68 = v56 + 1;
        *((_DWORD *)v6 + 27) = v68;
        if (v68 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      goto LABEL_81;
    }
LABEL_142:
    if (buf[16])
      break;
    __break(1u);
LABEL_166:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)v3 + 480), &v110);
    v5 = v110;
    if (v110)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v110);
  }
  v90 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v91 = v90 - *(_QWORD *)buf;
  if (v90 < *(_QWORD *)buf)
  {
    v92 = 0;
  }
  else
  {
    v92 = 0;
    if (v91 <= 0xFFFFFFFFFFFFFFFDLL && v91 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v91) = 2821;
      v92 = v91 + 2;
    }
  }
  v93 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v94 = *((_QWORD *)v6 + 7);
  if (v93 + 16 >= v94)
    v93 = 0;
  if (v92 <= 0x10)
    v92 = 16;
  v95 = v93 + v92;
  if (v94 <= v95)
    v95 = 0;
  *((_QWORD *)v6 + 9) = v95;
  v96 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
  do
    __ldaxr(v96);
  while (__stlxr(v95, v96));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v112, (uint64_t **)v6 + 1);
  v97 = v112;
  v98 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v98 = 858;
  *(_QWORD *)(v98 + 8) = v7;
  *(_QWORD *)(v98 + 528) = v98 + 16;
  *(_QWORD *)(v98 + 536) = v98 + 16;
  *(_OWORD *)(v98 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v98 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v98);
  v113 = (IPC::Encoder *)v98;
  IPC::ArgumentCoder<WebCore::PathArc,void>::encode((IPC::Encoder *)v98, a2);
  v80 = IPC::Connection::sendMessageImpl((uint64_t)v97, (uint64_t *)&v113, 1, 0);
  v100 = v113;
  v113 = 0;
  if (v100)
  {
    IPC::Encoder::~Encoder(v100, v99);
    WTF::fastFree(v101, v102);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v112);
  if (v80)
    goto LABEL_158;
LABEL_81:
  v58 = v110;
  v110 = 0;
  if (v58)
  {
    v59 = *((_QWORD *)v58 + 1);
    if (__ldaxr((unsigned __int8 *)v59))
    {
      __clrex();
      goto LABEL_84;
    }
    if (__stxr(1u, (unsigned __int8 *)v59))
LABEL_84:
      MEMORY[0x19AEABB3C](v59);
    v61 = *(_QWORD *)(v59 + 8);
    v62 = v61 - 1;
    *(_QWORD *)(v59 + 8) = v61 - 1;
    if (v61 == 1)
    {
      v109 = *(_QWORD *)(v59 + 16);
      v63 = *(_QWORD *)(v59 + 24);
      *(_QWORD *)(v59 + 24) = 0;
      v64 = v109 != 0;
    }
    else
    {
      v63 = 0;
      v64 = 1;
    }
    v65 = __ldxr((unsigned __int8 *)v59);
    if (v65 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v59))
      {
LABEL_89:
        if (!v62)
        {
          if (v63)
            (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
          if (!v64)
            WTF::fastFree((WTF *)v59, v10);
        }
        goto LABEL_90;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v59);
    goto LABEL_89;
  }
LABEL_90:
  this = v111;
  v111 = 0;
  if (this)
  {
    do
    {
      v66 = __ldaxr((unsigned int *)this);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, (unsigned int *)this));
    if (!v67)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v107, v108);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokeClosedArc(WTF::ApproximateTime *this, PathClosedArc *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  BOOL v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  BOOL v46;
  unint64_t v47;
  float *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  WebKit::RemoteImageBufferProxy *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  unint64_t v74;
  BOOL v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  unsigned int v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  void *v99;
  IPC::Encoder *v100;
  WTF *v101;
  void *v102;
  NSObject *v103;
  const char *v104;
  uint64_t v105;
  _BYTE *v106;
  WTF *v107;
  void *v108;
  uint64_t v109;
  WebKit::RemoteImageBufferProxy *v110;
  IPC::StreamClientConnection *v111;
  uint64_t *v112;
  IPC::Encoder *v113;
  _BYTE buf[22];
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v111);
  if (!v111)
    return this;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v5)
    goto LABEL_166;
  v110 = 0;
  while (1)
  {
    v6 = v111;
    v7 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) == v7)
      goto LABEL_7;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (!buf[16])
    {
LABEL_164:
      v80 = 15;
LABEL_158:
      v103 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v104 = IPC::errorAsString(v80);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeClosedArc";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v104;
        _os_log_impl(&dword_196BCC000, v103, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      }
      v105 = *((_QWORD *)v3 + 481);
      if (v105)
      {
        v106 = *(_BYTE **)(v105 + 8);
        if (v106)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v106);
      }
      goto LABEL_81;
    }
    v69 = *(_QWORD *)buf;
    v70 = *(_QWORD *)&buf[8];
    v71 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v72 = v71 - *(_QWORD *)buf;
    v73 = v71 >= *(_QWORD *)buf;
    v74 = v71 - *(_QWORD *)buf + 2;
    v76 = v72 < 0xFFFFFFFFFFFFFFFELL && v74 <= *(_QWORD *)&buf[8];
    if (v73 && v76)
      goto LABEL_116;
    if (!v73)
    {
      v74 = 0;
      goto LABEL_117;
    }
    v77 = 0;
    if (v72 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v74 = 0;
      goto LABEL_118;
    }
    v74 = 0;
    if (v72 + 2 <= *(_QWORD *)&buf[8])
    {
      v74 = v72 + 2;
LABEL_116:
      *(_WORD *)(*(_QWORD *)buf + v72) = 2822;
LABEL_117:
      v77 = v70;
    }
LABEL_118:
    v78 = (_QWORD *)((v69 + v74 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v78 >= v69 + v74)
    {
      v79 = (char *)v78 - v69;
      v80 = 17;
      if ((unint64_t)v78 - v69 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_158;
      v74 = (unint64_t)(v79 + 8);
      if ((unint64_t)(v79 + 8) > v77)
        goto LABEL_158;
      *v78 = v7;
    }
    if (!v77)
    {
      v80 = 17;
      goto LABEL_158;
    }
    v81 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v82 = *((_QWORD *)v6 + 7);
    if (v81 + 16 >= v82)
      v81 = 0;
    if (v74 <= 0x10)
      v74 = 16;
    v83 = v81 + v74;
    if (v82 <= v83)
      v84 = 0;
    else
      v84 = v83;
    *((_QWORD *)v6 + 9) = v84;
    v85 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v84, v85));
    v87 = *((_DWORD *)v6 + 27);
    if (v86 == 0x80000000 || v87 != 0)
    {
      v89 = v87 + 1;
      *((_DWORD *)v6 + 27) = v89;
      if (v89 >= *((_DWORD *)v6 + 26))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
    }
    *((_QWORD *)v6 + 6) = v7;
LABEL_7:
    v5 = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
    if (!buf[16])
      goto LABEL_164;
    v11 = *(_QWORD *)buf;
    v12 = *(_QWORD *)&buf[8];
    v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 - *(_QWORD *)buf;
    v15 = v13 >= *(_QWORD *)buf;
    v16 = v13 - *(_QWORD *)buf + 2;
    v18 = v14 < 0xFFFFFFFFFFFFFFFELL && v16 <= *(_QWORD *)&buf[8];
    if (v15 && v18)
      goto LABEL_16;
    if (!v15)
    {
      v16 = 0;
      goto LABEL_17;
    }
    v19 = 0;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v16 = 0;
    }
    else
    {
      v16 = 0;
      if (v14 + 2 <= *(_QWORD *)&buf[8])
      {
        v16 = v14 + 2;
LABEL_16:
        *(_WORD *)(*(_QWORD *)buf + v14) = 860;
LABEL_17:
        v19 = v12;
      }
    }
    v20 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v21 = v20 - (v11 + v16);
    v22 = v20 >= v11 + v16;
    v23 = v20 - v11;
    v24 = v21 + v16 >= 0xFFFFFFFFFFFFFFFCLL || v21 + v16 + 4 > v19;
    v25 = !v24;
    if (v22 && v25)
    {
      v16 += v21 + 4;
    }
    else
    {
      if (!v22)
        goto LABEL_28;
      v26 = 0;
      v23 = v21 + v16;
      if (v21 + v16 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > v19)
        goto LABEL_29;
      v16 = v23 + 4;
    }
    *(float *)(v11 + v23) = a2->arc.center.m_x;
LABEL_28:
    v26 = v19;
LABEL_29:
    v27 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v28 = v27 - (v11 + v16);
    v29 = v27 >= v11 + v16;
    v30 = v27 - v11;
    v31 = v28 + v16 >= 0xFFFFFFFFFFFFFFFCLL || v28 + v16 + 4 > v26;
    v32 = !v31;
    if (v29 && v32)
    {
      v16 += v28 + 4;
    }
    else
    {
      if (!v29)
        goto LABEL_39;
      v33 = 0;
      v30 = v28 + v16;
      if (v28 + v16 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > v26)
        goto LABEL_40;
      v16 = v30 + 4;
    }
    *(float *)(v11 + v30) = a2->arc.center.m_y;
LABEL_39:
    v33 = v26;
LABEL_40:
    v34 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v35 = v34 - (v11 + v16);
    v36 = v34 >= v11 + v16;
    v37 = v34 - v11;
    v38 = v35 + v16 >= 0xFFFFFFFFFFFFFFFCLL || v35 + v16 + 4 > v33;
    v39 = !v38;
    if (v36 && v39)
    {
      v16 += v35 + 4;
    }
    else
    {
      if (!v36)
        goto LABEL_50;
      v40 = 0;
      v37 = v35 + v16;
      if (v35 + v16 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > v33)
        goto LABEL_51;
      v16 = v37 + 4;
    }
    *(float *)(v11 + v37) = a2->arc.radius;
LABEL_50:
    v40 = v33;
LABEL_51:
    v41 = (v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    v42 = v41 - (v11 + v16);
    v43 = v41 >= v11 + v16;
    v44 = v41 - v11;
    v46 = v42 + v16 < 0xFFFFFFFFFFFFFFFCLL && v42 + v16 + 4 <= v40;
    if (v43 && v46)
    {
      v16 += v42 + 4;
LABEL_60:
      *(float *)(v11 + v44) = a2->arc.startAngle;
LABEL_61:
      v47 = v40;
      goto LABEL_62;
    }
    if (!v43)
      goto LABEL_61;
    v47 = 0;
    v44 = v42 + v16;
    if (v42 + v16 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= v40)
    {
      v16 = v44 + 4;
      goto LABEL_60;
    }
LABEL_62:
    v48 = (float *)((v11 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v48 >= v11 + v16)
    {
      v49 = (char *)v48 - v11;
      if ((unint64_t)v48 - v11 > 0xFFFFFFFFFFFFFFFBLL)
        goto LABEL_142;
      v16 = (unint64_t)(v49 + 4);
      if ((unint64_t)(v49 + 4) > v47)
        goto LABEL_142;
      *v48 = a2->arc.endAngle;
    }
    if (v16 < v47)
    {
      *(_BYTE *)(v11 + v16) = a2->arc.direction;
      v50 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = *((_QWORD *)v6 + 7);
      if (v50 + 16 >= v51)
        v50 = 0;
      if (v16 <= 0xF)
        v16 = 15;
      v52 = v16 + v50;
      if (v51 > v52 + 1)
        v53 = v52 + 1;
      else
        v53 = 0;
      *((_QWORD *)v6 + 9) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = *((_DWORD *)v6 + 27);
      if (v55 == 0x80000000 || v56 != 0)
      {
        v68 = v56 + 1;
        *((_DWORD *)v6 + 27) = v68;
        if (v68 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      goto LABEL_81;
    }
LABEL_142:
    if (buf[16])
      break;
    __break(1u);
LABEL_166:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)v3 + 480), &v110);
    v5 = v110;
    if (v110)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v110);
  }
  v90 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v91 = v90 - *(_QWORD *)buf;
  if (v90 < *(_QWORD *)buf)
  {
    v92 = 0;
  }
  else
  {
    v92 = 0;
    if (v91 <= 0xFFFFFFFFFFFFFFFDLL && v91 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v91) = 2821;
      v92 = v91 + 2;
    }
  }
  v93 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v94 = *((_QWORD *)v6 + 7);
  if (v93 + 16 >= v94)
    v93 = 0;
  if (v92 <= 0x10)
    v92 = 16;
  v95 = v93 + v92;
  if (v94 <= v95)
    v95 = 0;
  *((_QWORD *)v6 + 9) = v95;
  v96 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
  do
    __ldaxr(v96);
  while (__stlxr(v95, v96));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v112, (uint64_t **)v6 + 1);
  v97 = v112;
  v98 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v98 = 860;
  *(_QWORD *)(v98 + 8) = v7;
  *(_QWORD *)(v98 + 528) = v98 + 16;
  *(_QWORD *)(v98 + 536) = v98 + 16;
  *(_OWORD *)(v98 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v98 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v98);
  v113 = (IPC::Encoder *)v98;
  IPC::ArgumentCoder<WebCore::PathArc,void>::encode((IPC::Encoder *)v98, a2);
  v80 = IPC::Connection::sendMessageImpl((uint64_t)v97, (uint64_t *)&v113, 1, 0);
  v100 = v113;
  v113 = 0;
  if (v100)
  {
    IPC::Encoder::~Encoder(v100, v99);
    WTF::fastFree(v101, v102);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v112);
  if (v80)
    goto LABEL_158;
LABEL_81:
  v58 = v110;
  v110 = 0;
  if (v58)
  {
    v59 = *((_QWORD *)v58 + 1);
    if (__ldaxr((unsigned __int8 *)v59))
    {
      __clrex();
      goto LABEL_84;
    }
    if (__stxr(1u, (unsigned __int8 *)v59))
LABEL_84:
      MEMORY[0x19AEABB3C](v59);
    v61 = *(_QWORD *)(v59 + 8);
    v62 = v61 - 1;
    *(_QWORD *)(v59 + 8) = v61 - 1;
    if (v61 == 1)
    {
      v109 = *(_QWORD *)(v59 + 16);
      v63 = *(_QWORD *)(v59 + 24);
      *(_QWORD *)(v59 + 24) = 0;
      v64 = v109 != 0;
    }
    else
    {
      v63 = 0;
      v64 = 1;
    }
    v65 = __ldxr((unsigned __int8 *)v59);
    if (v65 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v59))
      {
LABEL_89:
        if (!v62)
        {
          if (v63)
            (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
          if (!v64)
            WTF::fastFree((WTF *)v59, v10);
        }
        goto LABEL_90;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v59);
    goto LABEL_89;
  }
LABEL_90:
  this = v111;
  v111 = 0;
  if (this)
  {
    do
    {
      v66 = __ldaxr((unsigned int *)this);
      v67 = v66 - 1;
    }
    while (__stlxr(v67, (unsigned int *)this));
    if (!v67)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v107, v108);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokeQuadCurve(WTF::ApproximateTime *this, const PathDataQuadCurve *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  int v58;
  int v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  _BYTE *v63;
  int *v64;
  WebKit::RemoteImageBufferProxy *v65;
  IPC::StreamClientConnection *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned __int8 v69;
  _BYTE buf[24];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v64 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v66);
  if (!v66)
    return this;
  v4 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *((_QWORD *)v3 + 480), &v65);
    v4 = (unsigned __int8 *)v65;
    if (v65)
      v4 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v65);
  }
  else
  {
    v65 = 0;
  }
  v5 = v66;
  v6 = *((_QWORD *)v3 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v4);
  v8 = v7 + 15.0;
  if (*((_QWORD *)v5 + 6) == v6)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v67, v8);
      if (!v69)
      {
        v59 = 15;
        goto LABEL_100;
      }
      *(_QWORD *)buf = v67;
      *(_QWORD *)&buf[8] = v68;
      *(_QWORD *)&buf[16] = 0;
      v9 = (v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= v67;
      v11 = v9 - v67;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v68)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v67 + v11) = 866;
          *(_QWORD *)&buf[16] = v11 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode((uint64_t *)buf, v64);
      if (*(_QWORD *)&buf[8])
      {
        v17 = *(_QWORD *)&buf[16];
        v18 = *((_QWORD *)v5 + 8);
        v19 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = *((_QWORD *)v5 + 7);
        if (v19 + 16 >= v20)
          v19 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v17 = 16;
        v21 = v19 + v17;
        if (v20 <= v21)
          v21 = 0;
        *((_QWORD *)v5 + 9) = v21;
        v22 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v21, v22));
        v24 = *((_DWORD *)v5 + 27);
        if (v23 == 0x80000000 || v24 != 0)
        {
          v36 = v24 + 1;
          *((_DWORD *)v5 + 27) = v36;
          if (v36 >= *((_DWORD *)v5 + 26))
          {
            if (*((_BYTE *)v5 + 96))
              MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
            *((_DWORD *)v5 + 27) = 0;
          }
        }
        goto LABEL_29;
      }
      v37 = v69;
      if (v69)
      {
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v67, v68);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        v58 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeQuadCurve>(*(uint64_t *)buf, &v64, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
        v59 = v58;
        if (v58)
          goto LABEL_100;
        goto LABEL_29;
      }
      __break(1u);
LABEL_106:
      if (!v14)
        break;
      v42 = 0;
      if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = 0;
      }
      else
      {
        v39 = 0;
        if (v16 + 2 <= v15)
        {
          v39 = v16 + 2;
LABEL_64:
          *(_WORD *)(v37 + v16) = 2822;
          goto LABEL_65;
        }
      }
LABEL_66:
      v43 = (v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v43 >= v37 + v39)
      {
        v44 = v43 - v37;
        v45 = 17;
        if (v44 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_99;
        v39 = v44 + 8;
        if (v44 + 8 > v42)
          goto LABEL_99;
        *(_QWORD *)(v37 + v44) = v6;
      }
      if (!v42)
      {
        v45 = 17;
        goto LABEL_99;
      }
      v46 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *((_QWORD *)v5 + 7);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v48 = v46 + v39;
      if (v47 <= v48)
        v49 = 0;
      else
        v49 = v48;
      *((_QWORD *)v5 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = *((_DWORD *)v5 + 27);
      if (v51 == 0x80000000 || v52 != 0)
      {
        v54 = v52 + 1;
        *((_DWORD *)v5 + 27) = v54;
        if (v54 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      *((_QWORD *)v5 + 6) = v6;
    }
    v39 = 0;
LABEL_65:
    v42 = v15;
    goto LABEL_66;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
  if (buf[16])
  {
    v37 = *(_QWORD *)buf;
    v15 = *(_QWORD *)&buf[8];
    v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = v38 - *(_QWORD *)buf;
    v14 = v38 >= *(_QWORD *)buf;
    v39 = v38 - *(_QWORD *)buf + 2;
    v41 = v16 < 0xFFFFFFFFFFFFFFFELL && v39 <= *(_QWORD *)&buf[8];
    if (!v14 || !v41)
      goto LABEL_106;
    goto LABEL_64;
  }
  v45 = 15;
LABEL_99:
  v59 = v45;
LABEL_100:
  v60 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v61 = IPC::errorAsString(v59);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeQuadCurve";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v61;
    _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v62 = *((_QWORD *)v3 + 481);
  if (v62)
  {
    v63 = *(_BYTE **)(v62 + 8);
    if (v63)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v63);
  }
LABEL_29:
  v26 = v65;
  v65 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
LABEL_33:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v57 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v57 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_37:
      if (!v30)
      {
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v27, v13);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v27);
    goto LABEL_33;
  }
LABEL_38:
  this = v66;
  v66 = 0;
  if (this)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)this);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)this));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v55, v56);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokeBezierCurve(WTF::ApproximateTime *this, const PathDataBezierCurve *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  WebKit::RemoteImageBufferProxy *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  unsigned int v54;
  WTF *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  int v66;
  NSObject *v67;
  const char *v68;
  uint64_t v69;
  _BYTE *v70;
  int v71;
  int *v72;
  WebKit::RemoteImageBufferProxy *v73;
  IPC::StreamClientConnection *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 v77;
  _BYTE buf[24];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v72 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v74);
  if (!v74)
    return this;
  v4 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
  if (v4)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v4, *((_QWORD *)v3 + 480), &v73);
    v4 = (unsigned __int8 *)v73;
    if (v73)
      v4 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v73);
  }
  else
  {
    v73 = 0;
  }
  v5 = v74;
  v6 = *((_QWORD *)v3 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v4);
  v8 = v7 + 15.0;
  if (*((_QWORD *)v5 + 6) == v6)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v75, v8);
      if (!v77)
      {
        v71 = 15;
        goto LABEL_106;
      }
      *(_QWORD *)buf = v75;
      *(_QWORD *)&buf[8] = v76;
      *(_QWORD *)&buf[16] = 0;
      v9 = (v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v10 = v9 >= v75;
      v11 = v9 - v75;
      if (v10)
      {
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v76)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v75 + v11) = 859;
          *(_QWORD *)&buf[16] = v11 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode((uint64_t *)buf, v72);
      if (*(_QWORD *)&buf[8])
      {
        v17 = *(_QWORD *)&buf[16];
        v18 = *((_QWORD *)v5 + 8);
        v19 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = *((_QWORD *)v5 + 7);
        if (v19 + 16 >= v20)
          v19 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v17 = 16;
        v21 = v19 + v17;
        if (v20 <= v21)
          v21 = 0;
        *((_QWORD *)v5 + 9) = v21;
        v22 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v21, v22));
        v24 = *((_DWORD *)v5 + 27);
        if (v23 == 0x80000000 || v24 != 0)
        {
          v36 = v24 + 1;
          *((_DWORD *)v5 + 27) = v36;
          if (v36 >= *((_DWORD *)v5 + 26))
          {
            if (*((_BYTE *)v5 + 96))
              MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
            *((_DWORD *)v5 + 27) = 0;
          }
        }
        goto LABEL_29;
      }
      v37 = v77;
      if (v77)
      {
        v58 = (v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v59 = v58 - v75;
        if (v58 < v75)
        {
          v60 = 0;
        }
        else
        {
          v60 = 0;
          if (v59 <= 0xFFFFFFFFFFFFFFFDLL && v59 + 2 <= v76)
          {
            *(_WORD *)(v75 + v59) = 2821;
            v60 = v59 + 2;
          }
        }
        v61 = *((_QWORD *)v5 + 8);
        v62 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v63 = *((_QWORD *)v5 + 7);
        if (v62 + 16 >= v63)
          v62 = 0;
        if (v60 <= 0x10)
          v60 = 16;
        v64 = v62 + v60;
        if (v63 <= v64)
          v64 = 0;
        *((_QWORD *)v5 + 9) = v64;
        v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
        do
          __ldaxr(v65);
        while (__stlxr(v64, v65));
        *((_DWORD *)v5 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
        v66 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeBezierCurve>(*(uint64_t *)buf, &v72, v6);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
        v71 = v66;
        if (v66)
          goto LABEL_106;
        goto LABEL_29;
      }
      __break(1u);
LABEL_117:
      if (!v14)
        break;
      v42 = 0;
      if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v39 = 0;
      }
      else
      {
        v39 = 0;
        if (v16 + 2 <= v15)
        {
          v39 = v16 + 2;
LABEL_64:
          *(_WORD *)(v37 + v16) = 2822;
          goto LABEL_65;
        }
      }
LABEL_66:
      v43 = (v37 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v43 >= v37 + v39)
      {
        v44 = v43 - v37;
        v45 = 17;
        if (v44 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_115;
        v39 = v44 + 8;
        if (v44 + 8 > v42)
          goto LABEL_115;
        *(_QWORD *)(v37 + v44) = v6;
      }
      if (!v42)
      {
        v45 = 17;
        goto LABEL_115;
      }
      v46 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *((_QWORD *)v5 + 7);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v48 = v46 + v39;
      if (v47 <= v48)
        v49 = 0;
      else
        v49 = v48;
      *((_QWORD *)v5 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = *((_DWORD *)v5 + 27);
      if (v51 == 0x80000000 || v52 != 0)
      {
        v54 = v52 + 1;
        *((_DWORD *)v5 + 27) = v54;
        if (v54 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      *((_QWORD *)v5 + 6) = v6;
    }
    v39 = 0;
LABEL_65:
    v42 = v15;
    goto LABEL_66;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
  if (buf[16])
  {
    v37 = *(_QWORD *)buf;
    v15 = *(_QWORD *)&buf[8];
    v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = v38 - *(_QWORD *)buf;
    v14 = v38 >= *(_QWORD *)buf;
    v39 = v38 - *(_QWORD *)buf + 2;
    v41 = v16 < 0xFFFFFFFFFFFFFFFELL && v39 <= *(_QWORD *)&buf[8];
    if (!v14 || !v41)
      goto LABEL_117;
    goto LABEL_64;
  }
  v45 = 15;
LABEL_115:
  v71 = v45;
LABEL_106:
  v67 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v68 = IPC::errorAsString(v71);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeBezierCurve";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v68;
    _os_log_impl(&dword_196BCC000, v67, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v69 = *((_QWORD *)v3 + 481);
  if (v69)
  {
    v70 = *(_BYTE **)(v69 + 8);
    if (v70)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v70);
  }
LABEL_29:
  v26 = v73;
  v73 = 0;
  if (v26)
  {
    v27 = *((_QWORD *)v26 + 1);
    if (__ldaxr((unsigned __int8 *)v27))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v27))
    {
LABEL_33:
      v29 = *(_QWORD *)(v27 + 8);
      v30 = v29 - 1;
      *(_QWORD *)(v27 + 8) = v29 - 1;
      if (v29 == 1)
      {
        v57 = *(_QWORD *)(v27 + 16);
        v31 = *(_QWORD *)(v27 + 24);
        *(_QWORD *)(v27 + 24) = 0;
        v32 = v57 != 0;
      }
      else
      {
        v31 = 0;
        v32 = 1;
      }
      v33 = __ldxr((unsigned __int8 *)v27);
      if (v33 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v27))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_37:
      if (!v30)
      {
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (!v32)
          WTF::fastFree((WTF *)v27, v13);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v27);
    goto LABEL_33;
  }
LABEL_38:
  this = v74;
  v74 = 0;
  if (this)
  {
    do
    {
      v34 = __ldaxr((unsigned int *)this);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, (unsigned int *)this));
    if (!v35)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v55, v56);
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::recordStrokePathSegment(WebKit::RemoteDisplayListRecorderProxy *this, PathSegment *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  WebKit::RemoteImageBufferProxy *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  char *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v53;
  uint64_t v54;
  NSObject *v55;
  const char *v56;
  uint64_t v57;
  _BYTE *v58;
  __alt<0UL, WebCore::PathMoveTo> *v59;
  WebKit::RemoteImageBufferProxy *v60;
  unsigned int *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  _BYTE buf[24];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v59 = (__alt<0UL, WebCore::PathMoveTo> *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v61);
  if (!v61)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_97;
  v60 = 0;
  while (1)
  {
    v6 = v61;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_85:
        v44 = 15;
        goto LABEL_86;
      }
      v36 = *(_QWORD *)buf;
      v37 = *(_QWORD *)&buf[8];
      v38 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v39 = v38 - *(_QWORD *)buf;
      if (v38 < *(_QWORD *)buf)
      {
        v41 = 0;
        v40 = *(_QWORD *)&buf[8];
      }
      else
      {
        v40 = 0;
        if (v39 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v41 = 0;
        }
        else
        {
          v41 = 0;
          if (v39 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v39) = 2822;
            v40 = v37;
            v41 = v39 + 2;
          }
        }
      }
      v42 = (_QWORD *)((v36 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v42 >= v36 + v41)
      {
        v43 = (char *)v42 - v36;
        v44 = 17;
        if ((unint64_t)v42 - v36 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v41 = (unint64_t)(v43 + 8);
        if ((unint64_t)(v43 + 8) > v40)
          goto LABEL_86;
        *v42 = v7;
      }
      if (!v40)
      {
        v44 = 17;
        goto LABEL_86;
      }
      v45 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *((_QWORD *)v6 + 7);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v48 = 0;
      else
        v48 = v47;
      *((_QWORD *)v6 + 9) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = v6[27];
      if (v50 == 0x80000000 || v51 != 0)
      {
        v53 = v51 + 1;
        v6[27] = v53;
        if (v53 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v62, v9);
    if (!v64)
      goto LABEL_85;
    *(_QWORD *)buf = v62;
    *(_QWORD *)&buf[8] = v63;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v62 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v62;
    v12 = v10 - v62;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v63)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v62 + v12) = 865;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathSegment,void>::encode((uint64_t *)buf, (uint64_t)v59);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v19 = 0;
      *((_QWORD *)v6 + 9) = v19;
      v20 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v19, v20));
      v22 = v6[27];
      if (v21 == 0x80000000 || v22 != 0)
      {
        v35 = v22 + 1;
        v6[27] = v35;
        if (v35 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      goto LABEL_29;
    }
    if (v64)
      break;
    __break(1u);
LABEL_97:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v60);
    v5 = v60;
    if (v60)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v60);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v62, v63);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v44 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokePathSegment>(*(uint64_t *)buf, (int **)&v59, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v44)
    goto LABEL_29;
LABEL_86:
  v55 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v56 = IPC::errorAsString(v44);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokePathSegment";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v56;
    _os_log_impl(&dword_196BCC000, v55, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v57 = *((_QWORD *)this + 481);
  if (v57)
  {
    v58 = *(_BYTE **)(v57 + 8);
    if (v58)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v58);
  }
LABEL_29:
  v24 = v60;
  v60 = 0;
  if (v24)
  {
    v25 = *((_QWORD *)v24 + 1);
    if (__ldaxr((unsigned __int8 *)v25))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v25))
    {
LABEL_33:
      v27 = *(_QWORD *)(v25 + 8);
      v28 = v27 - 1;
      *(_QWORD *)(v25 + 8) = v27 - 1;
      if (v27 == 1)
      {
        v54 = *(_QWORD *)(v25 + 16);
        v29 = *(_QWORD *)(v25 + 24);
        *(_QWORD *)(v25 + 24) = 0;
        v30 = v54 != 0;
      }
      else
      {
        v29 = 0;
        v30 = 1;
      }
      v31 = __ldxr((unsigned __int8 *)v25);
      if (v31 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_37:
      if (!v28)
      {
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        if (!v30)
          WTF::fastFree((WTF *)v25, v14);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v25);
    goto LABEL_33;
  }
LABEL_38:
  v32 = v61;
  v61 = 0;
  if (v32)
  {
    do
    {
      v33 = __ldaxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
    {
      atomic_store(1u, v32);
      *(_QWORD *)buf = v32;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokePath(WTF::ApproximateTime *this, const WebCore::Path *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  unsigned __int8 *v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  WebKit::RemoteImageBufferProxy *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  unsigned int v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  void *v69;
  int v70;
  IPC::Encoder *v71;
  WTF *v72;
  void *v73;
  NSObject *v74;
  const char *v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  WebKit::RemoteImageBufferProxy *v79;
  IPC::StreamClientConnection *v80;
  uint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  unsigned __int8 v84;
  _BYTE buf[24];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v80);
  if (!v80)
    return this;
  v5 = (unsigned __int8 *)*((_QWORD *)v3 + 479);
  if (v5)
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>(v5, *((_QWORD *)v3 + 480), &v79);
    v5 = (unsigned __int8 *)v79;
    if (v79)
      v5 = (unsigned __int8 *)WebKit::RemoteImageBufferProxy::backingStoreWillChange(v79);
  }
  else
  {
    v79 = 0;
  }
  v6 = v80;
  v7 = *((_QWORD *)v3 + 478);
  WTF::ApproximateTime::now((WTF::ApproximateTime *)v5);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v6 + 6) == v7)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, &v82, v9);
      if (!v84)
      {
        v70 = 15;
        goto LABEL_108;
      }
      *(_QWORD *)buf = v82;
      *(_QWORD *)&buf[8] = v83;
      *(_QWORD *)&buf[16] = 0;
      v10 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 >= v82;
      v12 = v10 - v82;
      if (v11)
      {
        if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v83)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v82 + v12) = 864;
          *(_QWORD *)&buf[16] = v12 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::Path,void>::encode((uint64_t *)buf, a2);
      if (*(_QWORD *)&buf[8])
      {
        v18 = *(_QWORD *)&buf[16];
        v19 = *((_QWORD *)v6 + 8);
        v20 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v21 = *((_QWORD *)v6 + 7);
        if (v20 + 16 >= v21)
          v20 = 0;
        if (*(_QWORD *)&buf[16] <= 0x10uLL)
          v18 = 16;
        v22 = v20 + v18;
        if (v21 <= v22)
          v22 = 0;
        *((_QWORD *)v6 + 9) = v22;
        v23 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v22, v23));
        v25 = *((_DWORD *)v6 + 27);
        if (v24 == 0x80000000 || v25 != 0)
        {
          v37 = v25 + 1;
          *((_DWORD *)v6 + 27) = v37;
          if (v37 >= *((_DWORD *)v6 + 26))
          {
            if (*((_BYTE *)v6 + 96))
              MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
            *((_DWORD *)v6 + 27) = 0;
          }
        }
        goto LABEL_29;
      }
      v78 = v7;
      v38 = v84;
      if (v84)
      {
        v59 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v60 = v59 - v82;
        if (v59 < v82)
        {
          v61 = 0;
        }
        else
        {
          v61 = 0;
          if (v60 <= 0xFFFFFFFFFFFFFFFDLL && v60 + 2 <= v83)
          {
            *(_WORD *)(v82 + v60) = 2821;
            v61 = v60 + 2;
          }
        }
        v62 = *((_QWORD *)v6 + 8);
        v63 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v64 = *((_QWORD *)v6 + 7);
        if (v63 + 16 >= v64)
          v63 = 0;
        if (v61 <= 0x10)
          v61 = 16;
        v65 = v63 + v61;
        if (v64 <= v65)
          v65 = 0;
        *((_QWORD *)v6 + 9) = v65;
        v66 = (unint64_t *)(*(_QWORD *)(v62 + 16) + 128);
        do
          __ldaxr(v66);
        while (__stlxr(v65, v66));
        *((_DWORD *)v6 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v81, (uint64_t **)v6 + 1);
        v67 = v81;
        v68 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v68 = 864;
        *(_QWORD *)(v68 + 8) = v78;
        *(_QWORD *)(v68 + 528) = v68 + 16;
        *(_QWORD *)(v68 + 536) = v68 + 16;
        *(_OWORD *)(v68 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v68 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v68);
        *(_QWORD *)buf = v68;
        IPC::ArgumentCoder<WebCore::Path,void>::encode((IPC::Encoder *)v68, a2);
        v70 = IPC::Connection::sendMessageImpl((uint64_t)v67, (uint64_t *)buf, 1, 0);
        v71 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v71)
        {
          IPC::Encoder::~Encoder(v71, v69);
          WTF::fastFree(v72, v73);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v81);
        if (v70)
          goto LABEL_108;
        goto LABEL_29;
      }
      __break(1u);
LABEL_119:
      if (!v15)
        break;
      v43 = 0;
      if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v40 = 0;
      }
      else
      {
        v40 = 0;
        if (v17 + 2 <= v16)
        {
          v40 = v17 + 2;
LABEL_64:
          *(_WORD *)(v38 + v17) = 2822;
          goto LABEL_65;
        }
      }
LABEL_66:
      v44 = (v38 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v44 >= v38 + v40)
      {
        v45 = v44 - v38;
        v46 = 17;
        if (v45 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_117;
        v40 = v45 + 8;
        if (v45 + 8 > v43)
          goto LABEL_117;
        *(_QWORD *)(v38 + v45) = v7;
      }
      if (!v43)
      {
        v46 = 17;
        goto LABEL_117;
      }
      v47 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v48 = *((_QWORD *)v6 + 7);
      if (v47 + 16 >= v48)
        v47 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v49 = v47 + v40;
      if (v48 <= v49)
        v50 = 0;
      else
        v50 = v49;
      *((_QWORD *)v6 + 9) = v50;
      v51 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v50, v51));
      v53 = *((_DWORD *)v6 + 27);
      if (v52 == 0x80000000 || v53 != 0)
      {
        v55 = v53 + 1;
        *((_DWORD *)v6 + 27) = v55;
        if (v55 >= *((_DWORD *)v6 + 26))
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
          *((_DWORD *)v6 + 27) = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    v40 = 0;
LABEL_65:
    v43 = v16;
    goto LABEL_66;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
  if (buf[16])
  {
    v38 = *(_QWORD *)buf;
    v16 = *(_QWORD *)&buf[8];
    v39 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v17 = v39 - *(_QWORD *)buf;
    v15 = v39 >= *(_QWORD *)buf;
    v40 = v39 - *(_QWORD *)buf + 2;
    v42 = v17 < 0xFFFFFFFFFFFFFFFELL && v40 <= *(_QWORD *)&buf[8];
    if (!v15 || !v42)
      goto LABEL_119;
    goto LABEL_64;
  }
  v46 = 15;
LABEL_117:
  v70 = v46;
LABEL_108:
  v74 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v75 = IPC::errorAsString(v70);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokePath";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v75;
    _os_log_impl(&dword_196BCC000, v74, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v76 = *((_QWORD *)v3 + 481);
  if (v76)
  {
    v77 = *(_BYTE **)(v76 + 8);
    if (v77)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v77);
  }
LABEL_29:
  v27 = v79;
  v79 = 0;
  if (v27)
  {
    v28 = *((_QWORD *)v27 + 1);
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v28))
    {
LABEL_33:
      v30 = *(_QWORD *)(v28 + 8);
      v31 = v30 - 1;
      *(_QWORD *)(v28 + 8) = v30 - 1;
      if (v30 == 1)
      {
        v58 = *(_QWORD *)(v28 + 16);
        v32 = *(_QWORD *)(v28 + 24);
        *(_QWORD *)(v28 + 24) = 0;
        v33 = v58 != 0;
      }
      else
      {
        v32 = 0;
        v33 = 1;
      }
      v34 = __ldxr((unsigned __int8 *)v28);
      if (v34 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v28))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_37:
      if (!v31)
      {
        if (v32)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if (!v33)
          WTF::fastFree((WTF *)v28, v14);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v28);
    goto LABEL_33;
  }
LABEL_38:
  this = v80;
  v80 = 0;
  if (this)
  {
    do
    {
      v35 = __ldaxr((unsigned int *)this);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)this));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v56, v57);
    }
  }
  return this;
}

WTF::ApproximateTime *WebKit::RemoteDisplayListRecorderProxy::recordStrokeEllipse(WTF::ApproximateTime *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v4;
  IPC::StreamClientConnection *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unsigned int v51;
  WTF *v52;
  void *v53;
  uint64_t v54;
  int v55;
  int v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  _BYTE *v60;
  int *v61;
  WebKit::RemoteImageBufferProxy *v62;
  IPC::StreamClientConnection *v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  _BYTE buf[24];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v61 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return this;
  v3 = this;
  this = *(WTF::ApproximateTime **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection(this, (unsigned int **)&v63);
  if (!v63)
    return this;
  v4 = (WTF::ApproximateTime *)*((_QWORD *)v3 + 479);
  if (v4)
    goto LABEL_96;
  v62 = 0;
  while (1)
  {
    v5 = v63;
    v6 = *((_QWORD *)v3 + 478);
    WTF::ApproximateTime::now(v4);
    v8 = v7 + 15.0;
    if (*((_QWORD *)v5 + 6) != v6)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, buf, v7 + 15.0);
      if (!buf[16])
      {
        v42 = 15;
LABEL_99:
        v55 = v42;
        goto LABEL_89;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v40 >= v34 + v39)
      {
        v41 = v40 - v34;
        v42 = 17;
        if (v41 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_99;
        v39 = v41 + 8;
        if (v41 + 8 > v38)
          goto LABEL_99;
        *(_QWORD *)(v34 + v41) = v6;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_99;
      }
      v43 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v5 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v5 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = *((_DWORD *)v5 + 27);
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        *((_DWORD *)v5 + 27) = v51;
        if (v51 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      *((_QWORD *)v5 + 6) = v6;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v5 + 56, &v64, v8);
    if (!v66)
    {
      v55 = 15;
      goto LABEL_89;
    }
    *(_QWORD *)buf = v64;
    *(_QWORD *)&buf[8] = v65;
    *(_QWORD *)&buf[16] = 0;
    v9 = (v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v10 = v9 >= v64;
    v11 = v9 - v64;
    if (v10)
    {
      if (v11 > 0xFFFFFFFFFFFFFFFDLL || v11 + 2 > v65)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v64 + v11) = 861;
        *(_QWORD *)&buf[16] = v11 + 2;
      }
    }
    v4 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v61);
    if (*(_QWORD *)&buf[8])
    {
      v14 = *(_QWORD *)&buf[16];
      v15 = *((_QWORD *)v5 + 8);
      v16 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v17 = *((_QWORD *)v5 + 7);
      if (v16 + 16 >= v17)
        v16 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v14 = 16;
      v18 = v16 + v14;
      if (v17 <= v18)
        v18 = 0;
      *((_QWORD *)v5 + 9) = v18;
      v19 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v18, v19));
      v21 = *((_DWORD *)v5 + 27);
      if (v20 == 0x80000000 || v21 != 0)
      {
        v33 = v21 + 1;
        *((_DWORD *)v5 + 27) = v33;
        if (v33 >= *((_DWORD *)v5 + 26))
        {
          if (*((_BYTE *)v5 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v5 + 21));
          *((_DWORD *)v5 + 27) = 0;
        }
      }
      goto LABEL_29;
    }
    if (v66)
      break;
    __break(1u);
LABEL_96:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v4, *((_QWORD *)v3 + 480), &v62);
    v4 = v62;
    if (v62)
      v4 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v62);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v5, v64, v65);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v5 + 1);
  v56 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeEllipse>(*(uint64_t *)buf, &v61, v6);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  v55 = v56;
  if (!v56)
    goto LABEL_29;
LABEL_89:
  v57 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v58 = IPC::errorAsString(v55);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_StrokeEllipse";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v58;
    _os_log_impl(&dword_196BCC000, v57, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v59 = *((_QWORD *)v3 + 481);
  if (v59)
  {
    v60 = *(_BYTE **)(v59 + 8);
    if (v60)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v60);
  }
LABEL_29:
  v23 = v62;
  v62 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_33:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v54 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v54 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_37;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_37:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v13);
      }
      goto LABEL_38;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_33;
  }
LABEL_38:
  this = v63;
  v63 = 0;
  if (this)
  {
    do
    {
      v31 = __ldaxr((unsigned int *)this);
      v32 = v31 - 1;
    }
    while (__stlxr(v32, (unsigned int *)this));
    if (!v32)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection(this);
      return (WTF::ApproximateTime *)WTF::fastFree(v52, v53);
    }
  }
  return this;
}

void WebKit::RemoteDisplayListRecorderProxy::recordClearRect(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  uint64_t v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  WebKit::RemoteImageBufferProxy *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  char *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v51;
  uint64_t v52;
  NSObject *v53;
  const char *v54;
  uint64_t v55;
  _BYTE *v56;
  int *v57;
  WebKit::RemoteImageBufferProxy *v58;
  unsigned int *v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  _BYTE buf[24];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = (int *)a2;
  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return;
  v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
  if (!v4)
    return;
  WebKit::RemoteRenderingBackendProxy::connection(v4, &v59);
  if (!v59)
    return;
  v5 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v5)
    goto LABEL_93;
  v58 = 0;
  while (1)
  {
    v6 = v59;
    v7 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v5);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v6 + 6) != v7)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8 + 15.0);
      if (!buf[16])
      {
LABEL_83:
        v42 = 15;
        goto LABEL_86;
      }
      v34 = *(_QWORD *)buf;
      v35 = *(_QWORD *)&buf[8];
      v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v37 = v36 - *(_QWORD *)buf;
      if (v36 < *(_QWORD *)buf)
      {
        v39 = 0;
        v38 = *(_QWORD *)&buf[8];
      }
      else
      {
        v38 = 0;
        if (v37 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v39 = 0;
        }
        else
        {
          v39 = 0;
          if (v37 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
            v38 = v35;
            v39 = v37 + 2;
          }
        }
      }
      v40 = (_QWORD *)((v34 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v40 >= v34 + v39)
      {
        v41 = (char *)v40 - v34;
        v42 = 17;
        if ((unint64_t)v40 - v34 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_86;
        v39 = (unint64_t)(v41 + 8);
        if ((unint64_t)(v41 + 8) > v38)
          goto LABEL_86;
        *v40 = v7;
      }
      if (!v38)
      {
        v42 = 17;
        goto LABEL_86;
      }
      v43 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *((_QWORD *)v6 + 7);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *((_QWORD *)v6 + 9) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      v49 = v6[27];
      if (v48 == 0x80000000 || v49 != 0)
      {
        v51 = v49 + 1;
        v6[27] = v51;
        if (v51 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = v7;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), &v60, v9);
    if (!v62)
      goto LABEL_83;
    *(_QWORD *)buf = v60;
    *(_QWORD *)&buf[8] = v61;
    *(_QWORD *)&buf[16] = 0;
    v10 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v11 = v10 >= v60;
    v12 = v10 - v60;
    if (v11)
    {
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v61)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v60 + v12) = 799;
        *(_QWORD *)&buf[16] = v12 + 2;
      }
    }
    v5 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode((uint64_t *)buf, v57);
    if (*(_QWORD *)&buf[8])
    {
      v15 = *(_QWORD *)&buf[16];
      v16 = *((_QWORD *)v6 + 8);
      v17 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v18 = *((_QWORD *)v6 + 7);
      if (v17 + 16 >= v18)
        v17 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v15 = 16;
      v19 = v17 + v15;
      if (v18 <= v19)
        v20 = 0;
      else
        v20 = v19;
      *((_QWORD *)v6 + 9) = v20;
      v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v20, v21));
      if (v22 == 0x80000000 || v6[27])
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](v6[21]);
        v6[27] = 0;
      }
      goto LABEL_27;
    }
    if (v62)
      break;
    __break(1u);
LABEL_93:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v5, *((_QWORD *)this + 480), &v58);
    v5 = v58;
    if (v58)
      v5 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v58);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v6, v60, v61);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v6 + 1);
  v42 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClearRect>(*(uint64_t *)buf, &v57, v7);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v42)
    goto LABEL_27;
LABEL_86:
  v53 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v54 = IPC::errorAsString(v42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ClearRect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v54;
    _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v55 = *((_QWORD *)this + 481);
  if (v55)
  {
    v56 = *(_BYTE **)(v55 + 8);
    if (v56)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v56);
  }
LABEL_27:
  v23 = v58;
  v58 = 0;
  if (v23)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (__ldaxr((unsigned __int8 *)v24))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v24))
    {
LABEL_31:
      v26 = *(_QWORD *)(v24 + 8);
      v27 = v26 - 1;
      *(_QWORD *)(v24 + 8) = v26 - 1;
      if (v26 == 1)
      {
        v52 = *(_QWORD *)(v24 + 16);
        v28 = *(_QWORD *)(v24 + 24);
        *(_QWORD *)(v24 + 24) = 0;
        v29 = v52 != 0;
      }
      else
      {
        v28 = 0;
        v29 = 1;
      }
      v30 = __ldxr((unsigned __int8 *)v24);
      if (v30 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v24))
          goto LABEL_35;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_35:
      if (!v27)
      {
        if (v28)
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        if (!v29)
          WTF::fastFree((WTF *)v24, v14);
      }
      goto LABEL_36;
    }
    MEMORY[0x19AEABB3C](v24);
    goto LABEL_31;
  }
LABEL_36:
  v31 = v59;
  v59 = 0;
  if (v31)
  {
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v31);
      *(_QWORD *)buf = v31;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
}

WebCore::ControlPart *WebKit::RemoteDisplayListRecorderProxy::recordDrawControlPart(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::ControlPart *a2, const WebCore::FloatRoundedRect *a3, float a4, const WebCore::ControlStyle *a5)
{
  uint64_t v5;
  WebKit::RemoteRenderingBackendProxy *v7;
  WTF::ApproximateTime *v8;
  unsigned int *v9;
  uint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  float *v17;
  char *v18;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  WebKit::RemoteImageBufferProxy *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  WebCore::ControlPart *result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  char *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v58;
  uint64_t v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  _BYTE *v63;
  WebCore::ControlPart *v64;
  uint64_t *v65;
  _DWORD *v66;
  float v67;
  _DWORD *v68;
  WebKit::RemoteImageBufferProxy *v69;
  unsigned int *v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  _BYTE buf[24];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  ++*((_DWORD *)a2 + 2);
  v64 = a2;
  v65 = (uint64_t *)&v64;
  v66 = a3;
  v67 = a4;
  v68 = a5;
  v5 = *((_QWORD *)this + 481);
  if (!v5)
    goto LABEL_46;
  v7 = *(WebKit::RemoteRenderingBackendProxy **)(v5 + 8);
  if (!v7)
    goto LABEL_46;
  WebKit::RemoteRenderingBackendProxy::connection(v7, &v70);
  if (!v70)
    goto LABEL_46;
  v8 = (WTF::ApproximateTime *)*((_QWORD *)this + 479);
  if (v8)
    goto LABEL_105;
  v69 = 0;
  while (1)
  {
    v9 = v70;
    v10 = *((_QWORD *)this + 478);
    WTF::ApproximateTime::now(v8);
    v12 = v11 + 15.0;
    if (*((_QWORD *)v9 + 6) != v10)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), buf, v11 + 15.0);
      if (!buf[16])
      {
LABEL_92:
        v49 = 15;
        goto LABEL_93;
      }
      v41 = *(_QWORD *)buf;
      v42 = *(_QWORD *)&buf[8];
      v43 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = v43 - *(_QWORD *)buf;
      if (v43 < *(_QWORD *)buf)
      {
        v46 = 0;
        v45 = *(_QWORD *)&buf[8];
      }
      else
      {
        v45 = 0;
        if (v44 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v46 = 0;
        }
        else
        {
          v46 = 0;
          if (v44 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v44) = 2822;
            v45 = v42;
            v46 = v44 + 2;
          }
        }
      }
      v47 = (_QWORD *)((v41 + v46 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v47 >= v41 + v46)
      {
        v48 = (char *)v47 - v41;
        v49 = 17;
        if ((unint64_t)v47 - v41 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_93;
        v46 = (unint64_t)(v48 + 8);
        if ((unint64_t)(v48 + 8) > v45)
          goto LABEL_93;
        *v47 = v10;
      }
      if (!v45)
      {
        v49 = 17;
        goto LABEL_93;
      }
      v50 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = *((_QWORD *)v9 + 7);
      if (v50 + 16 >= v51)
        v50 = 0;
      if (v46 <= 0x10)
        v46 = 16;
      v52 = v50 + v46;
      if (v51 <= v52)
        v53 = 0;
      else
        v53 = v52;
      *((_QWORD *)v9 + 9) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v9 + 8) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = v9[27];
      if (v55 == 0x80000000 || v56 != 0)
      {
        v58 = v56 + 1;
        v9[27] = v58;
        if (v58 >= v9[26])
        {
          if (*((_BYTE *)v9 + 96))
            MEMORY[0x19AEBA1A0](v9[21]);
          v9[27] = 0;
        }
      }
      *((_QWORD *)v9 + 6) = v10;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), &v71, v12);
    if (!v73)
      goto LABEL_92;
    *(_QWORD *)buf = v71;
    *(_QWORD *)&buf[8] = v72;
    *(_QWORD *)&buf[16] = 0;
    v13 = (v71 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v14 = v13 >= v71;
    v15 = v13 - v71;
    if (v14)
    {
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v72)
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *(_WORD *)(v71 + v15) = 808;
        *(_QWORD *)&buf[16] = v15 + 2;
      }
    }
    IPC::ArgumentCoder<WebCore::ControlPart,void>::encode((WTF::StringImpl *)buf, *v65);
    IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((uint64_t *)buf, v66);
    v17 = (float *)((*(_QWORD *)buf + *(_QWORD *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v17 >= *(_QWORD *)buf + *(_QWORD *)&buf[16])
    {
      v18 = (char *)v17 - *(_QWORD *)buf;
      if ((unint64_t)v17 - *(_QWORD *)buf > 0xFFFFFFFFFFFFFFFBLL
        || (unint64_t)v17 - *(_QWORD *)buf + 4 > *(_QWORD *)&buf[8])
      {
        *(_QWORD *)&buf[8] = 0;
      }
      else
      {
        *v17 = v67;
        *(_QWORD *)&buf[16] = v18 + 4;
      }
    }
    v8 = (WTF::ApproximateTime *)IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode((uint64_t *)buf, v68);
    if (*(_QWORD *)&buf[8])
    {
      v21 = *(_QWORD *)&buf[16];
      v22 = *((_QWORD *)v9 + 8);
      v23 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *((_QWORD *)v9 + 7);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (*(_QWORD *)&buf[16] <= 0x10uLL)
        v21 = 16;
      v25 = v23 + v21;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *((_QWORD *)v9 + 9) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || v9[27])
      {
        if (*((_BYTE *)v9 + 96))
          MEMORY[0x19AEBA1A0](v9[21]);
        v9[27] = 0;
      }
      goto LABEL_33;
    }
    if (v73)
      break;
    __break(1u);
LABEL_105:
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v8, *((_QWORD *)this + 480), &v69);
    v8 = v69;
    if (v69)
      v8 = WebKit::RemoteImageBufferProxy::backingStoreWillChange(v69);
  }
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v9, v71, v72);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v9 + 1);
  v49 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawControlPart>(*(uint64_t *)buf, (uint64_t)&v65, v10);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
  if (!v49)
    goto LABEL_33;
LABEL_93:
  v60 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v61 = IPC::errorAsString(v49);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_DrawControlPart";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v61;
    _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v62 = *((_QWORD *)this + 481);
  if (v62)
  {
    v63 = *(_BYTE **)(v62 + 8);
    if (v63)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v63);
  }
LABEL_33:
  v29 = v69;
  v69 = 0;
  if (v29)
  {
    v30 = *((_QWORD *)v29 + 1);
    if (__ldaxr((unsigned __int8 *)v30))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v30))
    {
LABEL_37:
      v32 = *(_QWORD *)(v30 + 8);
      v33 = v32 - 1;
      *(_QWORD *)(v30 + 8) = v32 - 1;
      if (v32 == 1)
      {
        v59 = *(_QWORD *)(v30 + 16);
        v34 = *(_QWORD *)(v30 + 24);
        *(_QWORD *)(v30 + 24) = 0;
        v35 = v59 != 0;
      }
      else
      {
        v34 = 0;
        v35 = 1;
      }
      v36 = __ldxr((unsigned __int8 *)v30);
      if (v36 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v30))
          goto LABEL_41;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v30);
LABEL_41:
      if (!v33)
      {
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        if (!v35)
          WTF::fastFree((WTF *)v30, v20);
      }
      goto LABEL_42;
    }
    MEMORY[0x19AEABB3C](v30);
    goto LABEL_37;
  }
LABEL_42:
  v37 = v70;
  v70 = 0;
  if (v37)
  {
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      atomic_store(1u, v37);
      *(_QWORD *)buf = v37;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
LABEL_46:
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (WebCore::ControlPart *)(*(uint64_t (**)(WebCore::ControlPart *))(*(_QWORD *)result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordApplyStrokePattern(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v73;
  IPC::StreamClientConnection *v74;
  uint64_t *v75;
  IPC::Encoder *v76;
  _BYTE buf[22];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v1 = this[481];
  if (!v1)
    return this;
  v2 = this;
  this = *(_QWORD **)(v1 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v74);
  if (!v74)
    return this;
  v3 = v2[479];
  if (!v3)
  {
    v4 = 0;
LABEL_6:
    v5 = 1;
    goto LABEL_7;
  }
  v4 = v2[480];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_112;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v3);
LABEL_112:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v73 = __ldxr((unsigned __int8 *)v3);
  if (v73 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_118:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    goto LABEL_6;
  if (!*(_BYTE *)(v4 + 4016))
  {
    *(_BYTE *)(v4 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v4);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v5 = 0;
LABEL_7:
  v6 = v74;
  v7 = v2[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v6 + 6) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_54;
    v24 = *(_QWORD *)buf;
    v25 = *(_QWORD *)&buf[8];
    v26 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v27 = v26 - *(_QWORD *)buf;
    if (v26 < *(_QWORD *)buf)
    {
      v29 = 0;
      v28 = *(_QWORD *)&buf[8];
    }
    else
    {
      v28 = 0;
      if (v27 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        if (v27 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v27) = 2822;
          v28 = v25;
          v29 = v27 + 2;
        }
      }
    }
    v30 = (_QWORD *)((v24 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v30 >= v24 + v29)
    {
      v31 = (char *)v30 - v24;
      v32 = 17;
      if ((unint64_t)v30 - v24 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_55;
      v29 = (unint64_t)(v31 + 8);
      if ((unint64_t)(v31 + 8) > v28)
        goto LABEL_55;
      *v30 = v7;
    }
    if (!v28)
    {
      v32 = 17;
      goto LABEL_55;
    }
    v33 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = *((_QWORD *)v6 + 7);
    if (v33 + 16 >= v34)
      v33 = 0;
    if (v29 <= 0x10)
      v29 = 16;
    v35 = v33 + v29;
    if (v34 <= v35)
      v36 = 0;
    else
      v36 = v35;
    *((_QWORD *)v6 + 9) = v36;
    v37 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v36, v37));
    v39 = *((_DWORD *)v6 + 27);
    if (v38 == 0x80000000 || v39 != 0)
    {
      v45 = v39 + 1;
      *((_DWORD *)v6 + 27) = v45;
      if (v45 >= *((_DWORD *)v6 + 26))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
    }
    *((_QWORD *)v6 + 6) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
  if (!buf[16])
  {
LABEL_54:
    v32 = 15;
LABEL_55:
    v41 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v42 = IPC::errorAsString(v32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ApplyStrokePattern";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v42;
      _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v43 = v2[481];
    if (v43)
    {
      v44 = *(_BYTE **)(v43 + 8);
      if (v44)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v44);
    }
    goto LABEL_86;
  }
  v11 = *(_QWORD *)buf;
  v12 = *(_QWORD *)&buf[8];
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  v14 = (unint64_t)v13 - *(_QWORD *)buf;
  if ((unint64_t)v13 < *(_QWORD *)buf)
  {
    v15 = 0;
    if (*(_QWORD *)&buf[8])
      goto LABEL_15;
  }
  else
  {
    v15 = v14 + 2;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(_QWORD *)&buf[8])
      goto LABEL_70;
    *v13 = 795;
    if (v12)
    {
LABEL_15:
      v17 = *((_QWORD *)v6 + 8);
      v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v6 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v20 = v18 + v15;
      if (v19 <= v20)
        v21 = 0;
      else
        v21 = v20;
      *((_QWORD *)v6 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      if (v23 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_86;
    }
  }
  if (!buf[16])
    __break(1u);
  v11 = *(_QWORD *)buf;
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  v47 = 0;
  v48 = (unint64_t)v13 >= v11;
  v49 = (unint64_t)v13 - v11;
  if (v48 && v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= *(_QWORD *)&buf[8])
  {
    *(_WORD *)(v11 + v49) = 2821;
    v47 = v49 + 2;
  }
  v50 = *((_QWORD *)v6 + 8);
  v51 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *((_QWORD *)v6 + 7);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v47 <= 0x10)
    v47 = 16;
  v53 = v51 + v47;
  if (v52 <= v53)
    v53 = 0;
  *((_QWORD *)v6 + 9) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v75, (uint64_t **)v6 + 1);
  v55 = v75;
  v56 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v56 = 795;
  *(_QWORD *)(v56 + 8) = v7;
  *(_QWORD *)(v56 + 528) = v56 + 16;
  *(_QWORD *)(v56 + 536) = v56 + 16;
  *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v56 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
  v76 = (IPC::Encoder *)v56;
  v32 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v76, 1, 0);
  v58 = v76;
  v76 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v57);
    WTF::fastFree(v59, v60);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v75);
  if (v32)
    goto LABEL_55;
LABEL_86:
  if ((v5 & 1) != 0)
    goto LABEL_103;
  v61 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v61))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v61))
  {
    goto LABEL_91;
  }
  MEMORY[0x19AEABB3C](v61);
LABEL_91:
  v63 = *(_QWORD *)(v61 + 8);
  v64 = v63 - 1;
  *(_QWORD *)(v61 + 8) = v63 - 1;
  if (v63 == 1)
  {
    v72 = *(_QWORD *)(v61 + 16);
    v65 = *(_QWORD *)(v61 + 24);
    *(_QWORD *)(v61 + 24) = 0;
    v66 = v72 != 0;
  }
  else
  {
    v65 = 0;
    v66 = 1;
  }
  v67 = __ldxr((unsigned __int8 *)v61);
  if (v67 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v61))
    {
      if (!v64)
        goto LABEL_99;
      goto LABEL_103;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v61);
  if (!v64)
  {
LABEL_99:
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    if (!v66)
      WTF::fastFree((WTF *)v61, v10);
  }
LABEL_103:
  this = v74;
  v74 = 0;
  if (this)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)this);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)this));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordApplyFillPattern(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  IPC::StreamClientConnection *v6;
  uint64_t v7;
  double v8;
  double v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  _WORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  _BYTE *v44;
  unsigned int v45;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  WTF *v70;
  void *v71;
  uint64_t v72;
  int v73;
  IPC::StreamClientConnection *v74;
  uint64_t *v75;
  IPC::Encoder *v76;
  _BYTE buf[22];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v1 = this[481];
  if (!v1)
    return this;
  v2 = this;
  this = *(_QWORD **)(v1 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v74);
  if (!v74)
    return this;
  v3 = v2[479];
  if (!v3)
  {
    v4 = 0;
LABEL_6:
    v5 = 1;
    goto LABEL_7;
  }
  v4 = v2[480];
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_112;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v3);
LABEL_112:
  if (*(_QWORD *)(v3 + 24))
    ++*(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  v73 = __ldxr((unsigned __int8 *)v3);
  if (v73 != 1)
  {
    __clrex();
    goto LABEL_118;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_118:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v4)
    goto LABEL_6;
  if (!*(_BYTE *)(v4 + 4016))
  {
    *(_BYTE *)(v4 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v4);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v5 = 0;
LABEL_7:
  v6 = v74;
  v7 = v2[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v6 + 6) != v7)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_54;
    v24 = *(_QWORD *)buf;
    v25 = *(_QWORD *)&buf[8];
    v26 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v27 = v26 - *(_QWORD *)buf;
    if (v26 < *(_QWORD *)buf)
    {
      v29 = 0;
      v28 = *(_QWORD *)&buf[8];
    }
    else
    {
      v28 = 0;
      if (v27 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v29 = 0;
      }
      else
      {
        v29 = 0;
        if (v27 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v27) = 2822;
          v28 = v25;
          v29 = v27 + 2;
        }
      }
    }
    v30 = (_QWORD *)((v24 + v29 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v30 >= v24 + v29)
    {
      v31 = (char *)v30 - v24;
      v32 = 17;
      if ((unint64_t)v30 - v24 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_55;
      v29 = (unint64_t)(v31 + 8);
      if ((unint64_t)(v31 + 8) > v28)
        goto LABEL_55;
      *v30 = v7;
    }
    if (!v28)
    {
      v32 = 17;
      goto LABEL_55;
    }
    v33 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v34 = *((_QWORD *)v6 + 7);
    if (v33 + 16 >= v34)
      v33 = 0;
    if (v29 <= 0x10)
      v29 = 16;
    v35 = v33 + v29;
    if (v34 <= v35)
      v36 = 0;
    else
      v36 = v35;
    *((_QWORD *)v6 + 9) = v36;
    v37 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v36, v37));
    v39 = *((_DWORD *)v6 + 27);
    if (v38 == 0x80000000 || v39 != 0)
    {
      v45 = v39 + 1;
      *((_DWORD *)v6 + 27) = v45;
      if (v45 >= *((_DWORD *)v6 + 26))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
    }
    *((_QWORD *)v6 + 6) = v7;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v6 + 56, buf, v9);
  if (!buf[16])
  {
LABEL_54:
    v32 = 15;
LABEL_55:
    v41 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v42 = IPC::errorAsString(v32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ApplyFillPattern";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v42;
      _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v43 = v2[481];
    if (v43)
    {
      v44 = *(_BYTE **)(v43 + 8);
      if (v44)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v44);
    }
    goto LABEL_86;
  }
  v11 = *(_QWORD *)buf;
  v12 = *(_QWORD *)&buf[8];
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  v14 = (unint64_t)v13 - *(_QWORD *)buf;
  if ((unint64_t)v13 < *(_QWORD *)buf)
  {
    v15 = 0;
    if (*(_QWORD *)&buf[8])
      goto LABEL_15;
  }
  else
  {
    v15 = v14 + 2;
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > *(_QWORD *)&buf[8])
      goto LABEL_70;
    *v13 = 794;
    if (v12)
    {
LABEL_15:
      v17 = *((_QWORD *)v6 + 8);
      v18 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v19 = *((_QWORD *)v6 + 7);
      if (v18 + 16 >= v19)
        v18 = 0;
      if (v15 <= 0x10)
        v15 = 16;
      v20 = v18 + v15;
      if (v19 <= v20)
        v21 = 0;
      else
        v21 = v20;
      *((_QWORD *)v6 + 9) = v21;
      v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v21, v22));
      if (v23 == 0x80000000 || *((_DWORD *)v6 + 27))
      {
        if (*((_BYTE *)v6 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v6 + 21));
        *((_DWORD *)v6 + 27) = 0;
      }
      goto LABEL_86;
    }
  }
  if (!buf[16])
    __break(1u);
  v11 = *(_QWORD *)buf;
  v13 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_70:
  v47 = 0;
  v48 = (unint64_t)v13 >= v11;
  v49 = (unint64_t)v13 - v11;
  if (v48 && v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= *(_QWORD *)&buf[8])
  {
    *(_WORD *)(v11 + v49) = 2821;
    v47 = v49 + 2;
  }
  v50 = *((_QWORD *)v6 + 8);
  v51 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *((_QWORD *)v6 + 7);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v47 <= 0x10)
    v47 = 16;
  v53 = v51 + v47;
  if (v52 <= v53)
    v53 = 0;
  *((_QWORD *)v6 + 9) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *((_DWORD *)v6 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v75, (uint64_t **)v6 + 1);
  v55 = v75;
  v56 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v56 = 794;
  *(_QWORD *)(v56 + 8) = v7;
  *(_QWORD *)(v56 + 528) = v56 + 16;
  *(_QWORD *)(v56 + 536) = v56 + 16;
  *(_OWORD *)(v56 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v56 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v56);
  v76 = (IPC::Encoder *)v56;
  v32 = IPC::Connection::sendMessageImpl((uint64_t)v55, (uint64_t *)&v76, 1, 0);
  v58 = v76;
  v76 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v57);
    WTF::fastFree(v59, v60);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v75);
  if (v32)
    goto LABEL_55;
LABEL_86:
  if ((v5 & 1) != 0)
    goto LABEL_103;
  v61 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v61))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v61))
  {
    goto LABEL_91;
  }
  MEMORY[0x19AEABB3C](v61);
LABEL_91:
  v63 = *(_QWORD *)(v61 + 8);
  v64 = v63 - 1;
  *(_QWORD *)(v61 + 8) = v63 - 1;
  if (v63 == 1)
  {
    v72 = *(_QWORD *)(v61 + 16);
    v65 = *(_QWORD *)(v61 + 24);
    *(_QWORD *)(v61 + 24) = 0;
    v66 = v72 != 0;
  }
  else
  {
    v65 = 0;
    v66 = 1;
  }
  v67 = __ldxr((unsigned __int8 *)v61);
  if (v67 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v61))
    {
      if (!v64)
        goto LABEL_99;
      goto LABEL_103;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v61);
  if (!v64)
  {
LABEL_99:
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    if (!v66)
      WTF::fastFree((WTF *)v61, v10);
  }
LABEL_103:
  this = v74;
  v74 = 0;
  if (this)
  {
    do
    {
      v68 = __ldaxr((unsigned int *)this);
      v69 = v68 - 1;
    }
    while (__stlxr(v69, (unsigned int *)this));
    if (!v69)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v70, v71);
    }
  }
  return this;
}

_QWORD *WebKit::RemoteDisplayListRecorderProxy::recordApplyDeviceScaleFactor(_QWORD *this, float a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float *v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  int v40;
  IPC::Encoder *v41;
  WTF *v42;
  void *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  NSObject *v58;
  const char *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  WTF *v72;
  void *v73;
  uint64_t v74;
  int v76;
  IPC::StreamClientConnection *v77;
  uint64_t *v78;
  IPC::Encoder *v79;
  _BYTE buf[22];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = this[481];
  if (!v2)
    return this;
  v3 = this;
  this = *(_QWORD **)(v2 + 8);
  if (!this)
    return this;
  this = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)this, (unsigned int **)&v77);
  if (!v77)
    return this;
  v5 = v3[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v3[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_119;
  }
  this = (_QWORD *)MEMORY[0x19AEABB3C](v5);
LABEL_119:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v76 = __ldxr((unsigned __int8 *)v5);
  if (v76 != 1)
  {
    __clrex();
    goto LABEL_125;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_125:
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    this = (_QWORD *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (this)
      this = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*this + 160))(this);
  }
  v7 = 0;
LABEL_7:
  v8 = v77;
  v9 = v3[478];
  WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) == v9)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v11);
      if (!buf[16])
        goto LABEL_78;
      v14 = *(_QWORD *)buf;
      v13 = *(_QWORD *)&buf[8];
      v15 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v16 = v15 - *(_QWORD *)buf;
      if (v15 >= *(_QWORD *)buf)
      {
        v17 = v16 + 2;
        if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v16) = 793;
          goto LABEL_15;
        }
        v13 = 0;
      }
      v17 = 0;
LABEL_15:
      v19 = (float *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v19 >= v14 + v17)
      {
        v17 = (unint64_t)v19 - v14 + 4;
        if ((unint64_t)v19 - v14 > 0xFFFFFFFFFFFFFFFBLL || v17 > v13)
          goto LABEL_36;
        *v19 = a2;
      }
      if (v13)
      {
        v21 = *((_QWORD *)v8 + 8);
        v22 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = *((_QWORD *)v8 + 7);
        if (v22 + 16 >= v23)
          v22 = 0;
        if (v17 <= 0x10)
          v17 = 16;
        v24 = v22 + v17;
        if (v23 <= v24)
          v25 = 0;
        else
          v25 = v24;
        *((_QWORD *)v8 + 9) = v25;
        v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v25, v26));
        if (v27 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        goto LABEL_84;
      }
LABEL_36:
      v28 = buf[16];
      if (buf[16])
      {
        v29 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - *(_QWORD *)buf;
        if (v29 < *(_QWORD *)buf)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *((_QWORD *)v8 + 8);
        v33 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *((_QWORD *)v8 + 7);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *((_QWORD *)v8 + 9) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        *((_DWORD *)v8 + 27) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)v8 + 1);
        v37 = v78;
        v38 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v38 = 793;
        *(_QWORD *)(v38 + 8) = v9;
        *(_QWORD *)(v38 + 528) = v38 + 16;
        *(_QWORD *)(v38 + 536) = v38 + 16;
        *(_OWORD *)(v38 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v38 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v38);
        v79 = (IPC::Encoder *)v38;
        *(float *)IPC::Encoder::grow((IPC::Encoder *)v38, 4uLL, 4) = a2;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v37, (uint64_t *)&v79, 1, 0);
        v41 = v79;
        v79 = 0;
        if (v41)
        {
          IPC::Encoder::~Encoder(v41, v39);
          WTF::fastFree(v42, v43);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        if (!v40)
          goto LABEL_84;
        goto LABEL_79;
      }
      __break(1u);
LABEL_114:
      v47 = v14;
LABEL_58:
      v48 = (_QWORD *)((v28 + v47 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v48 >= v28 + v47)
      {
        v49 = (char *)v48 - v28;
        v40 = 17;
        if ((unint64_t)v48 - v28 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_79;
        v47 = (unint64_t)(v49 + 8);
        if ((unint64_t)(v49 + 8) > v14)
          goto LABEL_79;
        *v48 = v9;
      }
      if (!v14)
      {
        v40 = 17;
        goto LABEL_79;
      }
      v50 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = *((_QWORD *)v8 + 7);
      if (v50 + 16 >= v51)
        v50 = 0;
      if (v47 <= 0x10)
        v47 = 16;
      v52 = v50 + v47;
      if (v51 <= v52)
        v53 = 0;
      else
        v53 = v52;
      *((_QWORD *)v8 + 9) = v53;
      v54 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v53, v54));
      v56 = *((_DWORD *)v8 + 27);
      if (v55 == 0x80000000 || v56 != 0)
      {
        v71 = v56 + 1;
        *((_DWORD *)v8 + 27) = v71;
        if (v71 >= *((_DWORD *)v8 + 26))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
      }
      *((_QWORD *)v8 + 6) = v9;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
  if (buf[16])
  {
    v28 = *(_QWORD *)buf;
    v44 = *(_QWORD *)&buf[8];
    v45 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - *(_QWORD *)buf;
    if (v45 < *(_QWORD *)buf)
    {
      v47 = 0;
      v14 = *(_QWORD *)&buf[8];
    }
    else
    {
      v14 = 0;
      if (v46 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_114;
      v47 = 0;
      if (v46 + 2 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v46) = 2822;
        v14 = v44;
        v47 = v46 + 2;
      }
    }
    goto LABEL_58;
  }
LABEL_78:
  v40 = 15;
LABEL_79:
  v58 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v59 = IPC::errorAsString(v40);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_ApplyDeviceScaleFactor";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v59;
    _os_log_impl(&dword_196BCC000, v58, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
  }
  v60 = v3[481];
  if (v60)
  {
    v61 = *(_BYTE **)(v60 + 8);
    if (v61)
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v61);
  }
LABEL_84:
  if ((v7 & 1) != 0)
    goto LABEL_101;
  v62 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v62))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v62))
  {
    goto LABEL_89;
  }
  MEMORY[0x19AEABB3C](v62);
LABEL_89:
  v64 = *(_QWORD *)(v62 + 8);
  v65 = v64 - 1;
  *(_QWORD *)(v62 + 8) = v64 - 1;
  if (v64 == 1)
  {
    v74 = *(_QWORD *)(v62 + 16);
    v66 = *(_QWORD *)(v62 + 24);
    *(_QWORD *)(v62 + 24) = 0;
    v67 = v74 != 0;
  }
  else
  {
    v66 = 0;
    v67 = 1;
  }
  v68 = __ldxr((unsigned __int8 *)v62);
  if (v68 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v62))
    {
      if (!v65)
        goto LABEL_97;
      goto LABEL_101;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v62);
  if (!v65)
  {
LABEL_97:
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
    if (!v67)
      WTF::fastFree((WTF *)v62, v12);
  }
LABEL_101:
  this = v77;
  v77 = 0;
  if (this)
  {
    do
    {
      v69 = __ldaxr((unsigned int *)this);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, (unsigned int *)this));
    if (!v70)
    {
      atomic_store(1u, (unsigned int *)this);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)this);
      return (_QWORD *)WTF::fastFree(v72, v73);
    }
  }
  return this;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, WebCore::ImageBuffer *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 481);
  if (!v2)
    return 0;
  result = *(_QWORD *)(v2 + 8);
  if (result)
  {
    result = WebKit::RemoteRenderingBackendProxy::isCached((WebKit::RemoteRenderingBackendProxy *)result, a2);
    if ((_DWORD)result)
    {
      v6 = *((_QWORD *)this + 481);
      if (v6)
        v6 = *(_QWORD *)(v6 + 8);
      v7 = *((_QWORD *)a2 + 15);
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(v6 + 80), &v7);
      return 1;
    }
  }
  return result;
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(WebKit::RemoteDisplayListRecorderProxy *this, const WebCore::SourceImage *a2)
{
  WebCore::ImageBuffer *v4;
  uint64_t v6;
  WebCore::NativeImage *v7;

  v4 = (WebCore::ImageBuffer *)WebCore::SourceImage::imageBufferIfExists(a2);
  if (v4)
    return WebKit::RemoteDisplayListRecorderProxy::recordResourceUse(this, v4);
  v7 = (WebCore::NativeImage *)WebCore::SourceImage::nativeImageIfExists(a2);
  if (v7)
  {
    v6 = *((_QWORD *)this + 481);
    if (v6)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (v6)
      {
        WebKit::RemoteResourceCacheProxy::recordNativeImageUse((WebKit::RemoteResourceCacheProxy *)(v6 + 64), v7);
        LOBYTE(v6) = 1;
      }
    }
  }
  return (v7 == 0) | (v6 & 1);
}

void WebKit::RemoteDisplayListRecorderProxy::createImageBuffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, const void **a3@<X2>, __int16 a4@<W3>, __int16 a5@<W4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t v7;
  unsigned int *v8;
  char v9;

  v7 = *(_QWORD *)(a1 + 3848);
  if (v7 && (v8 = *(unsigned int **)(v7 + 8)) != 0)
  {
    if ((a5 & 0xFF00) != 0)
    {
      WebCore::GraphicsContext::createImageBuffer();
    }
    else
    {
      v9 = *(_BYTE *)(a1 + 3856);
      if ((a4 & 0xFF00) != 0)
        v9 = a4;
      WebKit::RemoteRenderingBackendProxy::createImageBuffer(v8, a2, 0, a3, 1, v9 != 0, a6, a7);
    }
  }
  else
  {
    *a6 = 0;
  }
}

uint64_t WebKit::RemoteDisplayListRecorderProxy::createAlignedImageBuffer(WebCore::GraphicsContext *this)
{
  WebCore::GraphicsContext::scaleFactor(this);
  return WebCore::GraphicsContext::createScaledImageBuffer();
}

{
  WebCore::GraphicsContext::scaleFactor(this);
  return WebCore::GraphicsContext::createScaledImageBuffer();
}

unsigned int *WebKit::RemoteDisplayListRecorderProxy::disconnect(WebKit::RemoteDisplayListRecorderProxy *this, void *a2)
{
  unsigned int *result;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  _BYTE *v8;
  int v9;

  result = (unsigned int *)*((_QWORD *)this + 481);
  *((_QWORD *)this + 481) = 0;
  if (result)
  {
    do
    {
      v4 = __ldaxr(result);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, result));
    if (!v5)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v6 = (unsigned __int8 *)this + 3857;
  if (__ldaxr((unsigned __int8 *)this + 3857))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_9;
  }
  result = (unsigned int *)MEMORY[0x19AEABB3C]((char *)this + 3857);
LABEL_9:
  v8 = (_BYTE *)*((_QWORD *)this + 483);
  if (v8)
  {
    v8[17] = 1;
    result = (unsigned int *)MEMORY[0x19AEBA1A0](*(unsigned int *)(*(_QWORD *)v8 + 4));
  }
  v9 = __ldxr(v6);
  if (v9 != 1)
  {
    __clrex();
    return (unsigned int *)WTF::Lock::unlockSlow((WebKit::RemoteDisplayListRecorderProxy *)((char *)this + 3857));
  }
  if (__stlxr(0, v6))
    return (unsigned int *)WTF::Lock::unlockSlow((WebKit::RemoteDisplayListRecorderProxy *)((char *)this + 3857));
  return result;
}

void WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(WebKit::ImageBufferShareableBitmapBackend *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v4, a2);
  WebCore::ImageBufferCGBackend::~ImageBufferCGBackend(this);
}

{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  v3 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v4, a2);
  WebCore::ImageBufferCGBackend::~ImageBufferCGBackend(this);
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::context(WebKit::ImageBufferShareableBitmapBackend *this)
{
  return *((_QWORD *)this + 8);
}

uint64_t WebCore::ImageBufferBackend::surface(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::isInUse(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::setVolatile(WebCore::ImageBufferBackend *this)
{
  return 1;
}

uint64_t WebCore::ImageBufferBackend::setNonVolatile(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebCore::ImageBufferBackend::volatilityState(WebCore::ImageBufferBackend *this)
{
  return 0;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::toBackendSharing(WebKit::ImageBufferShareableBitmapBackend *this)
{
  return (uint64_t)this + 48;
}

void WebCore::ImageBufferBackend::layerContentsDisplayDelegate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::ImageBufferShareableBitmapBackend::bitmap@<X0>(uint64_t this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(this + 56);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *a2 = v2;
  return this;
}

void `non-virtual thunk to'WebKit::ImageBufferShareableBitmapBackend::~ImageBufferShareableBitmapBackend(WebKit::ImageBufferShareableBitmapBackend *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v4, a2);
  WebCore::ImageBufferCGBackend::~ImageBufferCGBackend((WebKit::ImageBufferShareableBitmapBackend *)((char *)this - 48));
}

{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v4, a2);
  WebCore::ImageBufferCGBackend::~ImageBufferCGBackend((WebKit::ImageBufferShareableBitmapBackend *)((char *)this - 48));
  bmalloc::api::isoDeallocate(v5, v6);
}

uint64_t WebKit::ImageBufferBackendHandleSharing::takeBackendHandle(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t `non-virtual thunk to'WebKit::ImageBufferShareableBitmapBackend::bitmap@<X0>(uint64_t this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;

  v2 = *(unsigned int **)(this + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  *a2 = v2;
  return this;
}

uint64_t WebCore::DisplayList::Recorder::platformContext(WebCore::DisplayList::Recorder *this)
{
  return 0;
}

uint64_t WebCore::DisplayList::Recorder::colorSpace(WebCore::DisplayList::Recorder *this)
{
  return (uint64_t)this + 3792;
}

uint64_t WebCore::GraphicsContext::invalidatingControlTints(WebCore::GraphicsContext *this)
{
  return 0;
}

uint64_t WebCore::DisplayList::Recorder::isCALayerContext(WebCore::DisplayList::Recorder *this)
{
  return 0;
}

uint64_t WebCore::GraphicsContext::supportsInternalLinks(WebCore::GraphicsContext *this)
{
  return 0;
}

WebKit::SampleBufferDisplayLayerManager *std::unique_ptr<WebKit::SampleBufferDisplayLayerManager>::reset[abi:sn180100](WebKit::SampleBufferDisplayLayerManager **a1, WebKit::SampleBufferDisplayLayerManager *a2)
{
  WebKit::SampleBufferDisplayLayerManager *result;
  WTF *v4;
  void *v5;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    WebKit::SampleBufferDisplayLayerManager::~SampleBufferDisplayLayerManager(result, a2);
    return (WebKit::SampleBufferDisplayLayerManager *)WTF::fastFree(v4, v5);
  }
  return result;
}

void WebKit::SampleBufferDisplayLayerManager::~SampleBufferDisplayLayerManager(WebKit::SampleBufferDisplayLayerManager *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  WTF::WeakPtrFactory<WebKit::WebExtensionTab,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this, a2);
}

void std::default_delete<WebKit::SharedVideoFrameWriter>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  void *v4;

  if (a2)
  {
    v3 = *(unsigned int **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v3)
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)a2, 0);
    WTF::fastFree((WTF *)a2, v4);
  }
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;

  v1 = result;
  do
  {
    v2 = __ldaxr(result);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, result));
  if (!v3)
  {
    atomic_store(1u, result);
    v4 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = off_1E34E1B20;
    *((_QWORD *)v4 + 1) = v1;
    v5 = v4;
    WTF::ensureOnMainRunLoop();
    result = v5;
    if (v5)
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, void *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *(WTF **)(result + 8);
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v3)
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingStateNode,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v3 + 16), a2);
    return WTF::fastFree(v2, a2);
  }
  return result;
}

_QWORD *WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::shrinkToBestSize(uint64_t *a1)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  if (*a1)
    v2 = *(_DWORD *)(*a1 - 12);
  else
    v2 = 0;
  v3 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(v2);
  if (v3 <= 8)
    v4 = 8;
  else
    v4 = v3;
  return WTF::HashTable<WebKit::GPUProcessConnection::Client const*,WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashMap<WebKit::GPUProcessConnection::Client const*,WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>,WTF::DefaultHash<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>,WTF::HashTraits<WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::GPUProcessConnection::Client const*>>::rehash(a1, v4, 0);
}

uint64_t WTF::Vector<WTF::Ref<WebKit::GPUProcessConnection::Client,WTF::RawPtrTraits<WebKit::GPUProcessConnection::Client>,WTF::DefaultRefDerefTraits<WebKit::GPUProcessConnection::Client>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = 8 * v3;
    do
    {
      v6 = *(_QWORD *)v4;
      *(_QWORD *)v4 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,BOOL>,0ul,1ul,2ul>(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE *v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  void *v14;

  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)a1, *(uint64_t **)(a2 + 8));
  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 544);
  v6 = v5 + 1;
  v7 = *(_QWORD *)(a1 + 552);
  if (v7 >= v5 + 1)
  {
    v8 = *(char **)(a1 + 528);
    v9 = *(_QWORD *)(a1 + 544);
LABEL_3:
    bzero(&v8[v9], v5 - v9);
    *(_QWORD *)(a1 + 544) = v6;
    v10 = (_BYTE *)(*(_QWORD *)(a1 + 528) + v5);
    *(_QWORD *)(a1 + 536) = v10 + 1;
    *v10 = v4;
    return;
  }
  v11 = (2 * v7 + 4095) & 0xFFFFFFFFFFFFF000;
  do
  {
    v12 = v11;
    v11 *= 2;
  }
  while (v12 < v6);
  v13 = (char *)mmap(0, v12, 3, 4098, -1, 0);
  if (v13 != (char *)-1)
  {
    v8 = v13;
    memcpy(v13, *(const void **)(a1 + 528), *(_QWORD *)(a1 + 544));
    v14 = *(void **)(a1 + 528);
    if (v14 != (void *)(a1 + 16))
      munmap(v14, *(_QWORD *)(a1 + 552));
    *(_QWORD *)(a1 + 528) = v8;
    *(_QWORD *)(a1 + 552) = v12;
    v9 = *(_QWORD *)(a1 + 544);
    goto LABEL_3;
  }
  __break(0xC471u);
}

char *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTFLogChannelState,WTFLogLevel>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t **v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)a1, *a2);
  v4 = *((_BYTE *)v2 + 8);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 9);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

IPC::Encoder *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = a2[1];
  IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, v5);
  return IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(a1, (unint64_t)(v5 + 1));
}

IPC::Encoder *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::GraphicsContextGLAttributes const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::GraphicsContextGLAttributes,void>::encode(a1, (char *)a2[1]);
  v5 = *a2[2];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[3];
  IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, v6);
  return IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(a1, (unint64_t)(v6 + 1));
}

IPC::Encoder *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,IPC::StreamServerConnectionHandle &&>,void>::encode<IPC::Encoder,IPC::StreamServerConnectionHandle &&,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  v5 = *a2[1];
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v5;
  v6 = a2[2];
  IPC::ArgumentCoder<IPC::ConnectionHandle,void>::encode(a1, v6);
  return IPC::Encoder::operator<<<WebCore::SharedMemoryHandle>(a1, (unint64_t)(v6 + 1));
}

uint64_t IPC::StreamClientConnection::sendProcessOutOfStreamMessage(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  v3 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v4 = v3 - a2;
  if (v3 < a2 || ((v5 = v4 + 2, v4 <= 0xFFFFFFFFFFFFFFFDLL) ? (v6 = v5 > a3) : (v6 = 1), v6))
    v5 = 0;
  else
    *(_WORD *)(a2 + v4) = 2821;
  v7 = *(_QWORD *)(result + 64);
  v8 = (*(_QWORD *)(result + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(_QWORD *)(result + 56);
  if (v8 + 16 >= v9)
    v8 = 0;
  if (v5 <= 0x10)
    v5 = 16;
  v10 = v8 + v5;
  if (v9 <= v10)
    v10 = 0;
  *(_QWORD *)(result + 72) = v10;
  v11 = (unint64_t *)(*(_QWORD *)(v7 + 16) + 128);
  do
    __ldaxr(v11);
  while (__stlxr(v10, v11));
  *(_DWORD *)(result + 108) = 0;
  return result;
}

unsigned int **WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref(unsigned int **result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int **v4;
  IPC::StreamClientConnection *v5;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
    {
      atomic_store(1u, v1);
      v4 = result;
      v5 = (IPC::StreamClientConnection *)v1;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v5);
      return v4;
    }
  }
  return result;
}

IPC::StreamClientConnection *WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(IPC::StreamClientConnection **a1)
{
  IPC::StreamClientConnection *result;
  WTF *v2;
  void *v3;

  result = *a1;
  if (result)
  {
    IPC::StreamClientConnection::~StreamClientConnection(result);
    return (IPC::StreamClientConnection *)WTF::fastFree(v2, v3);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E1410;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E1410;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  WTF *result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];
  char v14;

  v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
    return IPC::Connection::cancelReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>((uint64_t *)(a1 + 8));
  IPC::Decoder::decode<WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, (uint64_t)v13);
  if (v14)
  {
    v10 = (WTF *)v13[0];
    v11 = v13[1];
    v12 = 1;
    v4 = *v2;
    *v2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v4 + 16))(v4, &v10);
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (v12)
    {
      result = v10;
      if (v10)
      {
        v10 = 0;
        LODWORD(v11) = 0;
        return (WTF *)WTF::fastFree(result, v6);
      }
    }
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = a2[3];
    if (v9 && v8)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v7);
    return IPC::Connection::cancelReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
  }
  return result;
}

WTF *IPC::Connection::cancelReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  WTF *result;
  WTF *v4;
  uint64_t v5;

  v4 = 0;
  v5 = 0;
  v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v1 + 16))(v1, &v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  result = v4;
  if (v4)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    return (WTF *)WTF::fastFree(result, v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E1438;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E1438;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long><WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E1460;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E1460;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  WTF::StringImpl **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  int v42;
  unsigned int v43;
  char v44;
  _QWORD v45[2];
  char v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  int v51;
  int v52;
  char v53;
  uint64_t v54;
  uint64_t v55;

  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_38:
    v47 = 0uLL;
    v36 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v36 + 16))(v36, &v47);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v21 = (WTF::StringImpl **)&v47;
    return WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v20);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v22 + 16))(v22);
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v25)
        {
          if (v24)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
        }
      }
    }
    goto LABEL_36;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (unint64_t)(v8 + 1);
  v54 = 0;
  v55 = 0;
  if (v9 >= 0x5555)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ShapeDetection::DetectedBarcode>((uint64_t)&v47, a2);
      if (!v53)
        goto LABEL_35;
      v26 = HIDWORD(v55);
      if (HIDWORD(v55) == (_DWORD)v55)
      {
        WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedBarcode>((unsigned int *)&v54, (unint64_t)&v47);
      }
      else
      {
        v27 = v54 + 48 * HIDWORD(v55);
        *(_OWORD *)v27 = v47;
        v28 = v48;
        v48 = 0;
        *(_QWORD *)(v27 + 16) = v28;
        *(_BYTE *)(v27 + 24) = v49;
        *(_QWORD *)(v27 + 32) = 0;
        *(_QWORD *)(v27 + 40) = 0;
        v29 = v50;
        v50 = 0;
        *(_QWORD *)(v27 + 32) = v29;
        LODWORD(v29) = v51;
        v51 = 0;
        *(_DWORD *)(v27 + 40) = v29;
        LODWORD(v29) = v52;
        v52 = 0;
        *(_DWORD *)(v27 + 44) = v29;
        HIDWORD(v55) = v26 + 1;
      }
      result = std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v10);
      if (!--v9)
      {
        LODWORD(v9) = v55;
        v15 = (WTF::StringImpl *)v54;
        if (v55 <= HIDWORD(v55))
        {
          v16 = HIDWORD(v55);
          goto LABEL_18;
        }
        v30 = (WTF::StringImpl *)v54;
        v40 = HIDWORD(v55);
        if (HIDWORD(v55))
        {
          if (HIDWORD(v55) >= 0x5555556)
          {
            __break(0xC471u);
            return result;
          }
          v31 = WTF::fastMalloc((WTF *)(48 * HIDWORD(v55)));
          LODWORD(v9) = 48 * v40 / 0x30;
          if ((WTF::StringImpl *)v31 == v15)
          {
            v30 = v15;
          }
          else
          {
            v30 = (WTF::StringImpl *)v31;
            WTF::VectorMover<false,WebCore::ShapeDetection::DetectedBarcode>::move(v15, (WTF::StringImpl *)((char *)v15 + 48 * v40), v31);
          }
        }
        if (v15)
        {
          if (v30 == v15)
          {
            LODWORD(v9) = 0;
            v30 = 0;
            v54 = 0;
            LODWORD(v55) = 0;
          }
          WTF::fastFree(v15, v4);
        }
        v15 = v30;
        v16 = v40;
        goto LABEL_18;
      }
    }
  }
  if (v9)
  {
    LODWORD(v55) = 48 * (int)v9 / 0x30u;
    v54 = WTF::fastMalloc((WTF *)(48 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ShapeDetection::DetectedBarcode>((uint64_t)&v47, a2);
      if (!v53)
        break;
      v11 = HIDWORD(v55);
      if (HIDWORD(v55) == (_DWORD)v55)
      {
        WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedBarcode>((unsigned int *)&v54, (unint64_t)&v47);
      }
      else
      {
        v12 = v54 + 48 * HIDWORD(v55);
        *(_OWORD *)v12 = v47;
        v13 = v48;
        v48 = 0;
        *(_QWORD *)(v12 + 16) = v13;
        *(_BYTE *)(v12 + 24) = v49;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 40) = 0;
        v14 = v50;
        v50 = 0;
        *(_QWORD *)(v12 + 32) = v14;
        LODWORD(v14) = v51;
        v51 = 0;
        *(_DWORD *)(v12 + 40) = v14;
        LODWORD(v14) = v52;
        v52 = 0;
        *(_DWORD *)(v12 + 44) = v14;
        HIDWORD(v55) = v11 + 1;
      }
      std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v10);
      if (!--v9)
      {
        v15 = (WTF::StringImpl *)v54;
        LODWORD(v9) = v55;
        v16 = HIDWORD(v55);
        goto LABEL_18;
      }
    }
LABEL_35:
    std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v10);
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v32);
LABEL_36:
    v33 = *a2;
    v34 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35 && v34)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
      v37 = *a2;
      v38 = a2[1];
      v39 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v39)
      {
        if (v38)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_38;
  }
  v16 = 0;
  v15 = 0;
LABEL_18:
  v54 = 0;
  v55 = 0;
  v46 = 1;
  WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v54, v4);
  v45[0] = 0;
  v45[1] = 0;
  v41 = v15;
  v42 = v9;
  v43 = v16;
  WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v17);
  v44 = 1;
  v18 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v41);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v44)
  {
    v21 = &v41;
    return WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v20);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ShapeDetection::DetectedBarcode>(uint64_t a1, unint64_t *a2)
{
  WTF::StringImpl *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 48))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedBarcode>(unsigned int *a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 result;
  unint64_t v6;
  unint64_t v7;

  v3 = (__n128 *)WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 48 * a1[3];
  result = *v3;
  *(__n128 *)v4 = *v3;
  v6 = v3[1].n128_u64[0];
  v3[1].n128_u64[0] = 0;
  *(_QWORD *)(v4 + 16) = v6;
  *(_BYTE *)(v4 + 24) = v3[1].n128_u8[8];
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v7 = v3[2].n128_u64[0];
  v3[2].n128_u64[0] = 0;
  *(_QWORD *)(v4 + 32) = v7;
  LODWORD(v7) = v3[2].n128_u32[2];
  v3[2].n128_u32[2] = 0;
  *(_DWORD *)(v4 + 40) = v7;
  LODWORD(v7) = v3[2].n128_u32[3];
  v3[2].n128_u32[3] = 0;
  *(_DWORD *)(v4 + 44) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 48 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x5555556)
    {
      __break(0xC471u);
      JUMPOUT(0x1974BC460);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 48 * *((unsigned int *)result + 3));
    v5 = 48 * a2;
    v6 = WTF::fastMalloc((WTF *)(48 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF0) / 0x30;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::ShapeDetection::DetectedBarcode>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ShapeDetection::DetectedBarcode>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 16) = v6;
      *(_BYTE *)(a3 + 24) = *((_BYTE *)v5 + 24);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      *(_QWORD *)(a3 + 32) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 10);
      *((_DWORD *)v5 + 10) = 0;
      *(_DWORD *)(a3 + 40) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 11);
      *((_DWORD *)v5 + 11) = 0;
      *(_DWORD *)(a3 + 44) = v7;
      v8 = (WTF *)*((_QWORD *)v5 + 4);
      if (v8)
      {
        *((_QWORD *)v5 + 4) = 0;
        *((_DWORD *)v5 + 10) = 0;
        WTF::fastFree(v8, a2);
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 48);
      a3 += 48;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ShapeDetection::DetectedBarcode,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(WTF **)(a1 + 32);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBarcodeDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E1488;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBarcodeDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E1488;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteBarcodeDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteBarcodeDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedBarcode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E14B0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E14B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  WTF *v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  WTF **v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  WTF *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  WTF *v52;
  int v53;
  unsigned int v54;
  char v55;
  _QWORD v56[2];
  char v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  int v61;
  char v62;
  unsigned __int8 v63;
  uint64_t v64;
  uint64_t v65;

  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_31:
    v58 = 0uLL;
    v32 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v32 + 16))(v32, &v58);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v27 = (WTF **)&v58;
    return WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v26);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v28 = a2[3];
    if (v28)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v28 + 16))(v28);
        v49 = *a2;
        v50 = a2[1];
        v51 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v51)
        {
          if (v50)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v51 + 16))(v51, v49);
        }
      }
    }
    goto LABEL_29;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (unint64_t)(v8 + 1);
  v64 = 0;
  v65 = 0;
  if (v9 >= 0x6666)
  {
    while (1)
    {
      result = IPC::Decoder::decode<WebCore::ShapeDetection::DetectedFace>((uint64_t)&v58, a2);
      v33 = v63;
      if (v63)
      {
        v34 = HIDWORD(v65);
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          result = WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedFace>((uint64_t)&v64, (unint64_t)&v58);
        }
        else
        {
          v35 = v64;
          v36 = v64 + 40 * HIDWORD(v65);
          *(_OWORD *)v36 = v58;
          *(_BYTE *)(v36 + 16) = 0;
          v37 = (_QWORD *)(v36 + 16);
          *(_BYTE *)(v36 + 32) = 0;
          v38 = (_BYTE *)(v36 + 32);
          if (v62)
          {
            *v37 = 0;
            v37[1] = 0;
            v39 = v59;
            v59 = 0;
            *v37 = v39;
            v40 = v60;
            v60 = 0;
            v41 = v35 + 40 * v34;
            *(_DWORD *)(v41 + 24) = v40;
            v42 = v61;
            v61 = 0;
            *(_DWORD *)(v41 + 28) = v42;
            *v38 = 1;
          }
          HIDWORD(v65) = v34 + 1;
        }
      }
      if (v63)
        v43 = v62 == 0;
      else
        v43 = 1;
      if (!v43)
        result = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v4);
      if (!v33)
        goto LABEL_66;
      if (!--v9)
      {
        LODWORD(v9) = v65;
        v22 = HIDWORD(v65);
        v21 = (WTF *)v64;
        if (v65 <= HIDWORD(v65))
          goto LABEL_26;
        v44 = (WTF *)v64;
        if (HIDWORD(v65))
        {
          if (HIDWORD(v65) >= 0x6666667)
          {
            __break(0xC471u);
            return result;
          }
          v45 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v65)));
          LODWORD(v9) = 40 * v22 / 0x28;
          if ((WTF *)v45 == v21)
          {
            v44 = v21;
          }
          else
          {
            v44 = (WTF *)v45;
            WTF::VectorMover<false,WebCore::ShapeDetection::DetectedFace>::move((uint64_t)v21, (char *)v21 + 40 * v22, v45);
          }
        }
        if (v21)
        {
          if (v44 == v21)
          {
            LODWORD(v9) = 0;
            v44 = 0;
          }
          WTF::fastFree(v21, v4);
        }
        v21 = v44;
        goto LABEL_26;
      }
    }
  }
  if (v9)
  {
    LODWORD(v65) = 40 * (int)v9 / 0x28u;
    v64 = WTF::fastMalloc((WTF *)(40 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ShapeDetection::DetectedFace>((uint64_t)&v58, a2);
      v10 = v63;
      if (v63)
      {
        v11 = HIDWORD(v65);
        if (HIDWORD(v65) == (_DWORD)v65)
        {
          WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedFace>((uint64_t)&v64, (unint64_t)&v58);
        }
        else
        {
          v12 = v64;
          v13 = v64 + 40 * HIDWORD(v65);
          *(_OWORD *)v13 = v58;
          *(_BYTE *)(v13 + 16) = 0;
          v14 = (_QWORD *)(v13 + 16);
          *(_BYTE *)(v13 + 32) = 0;
          v15 = (_BYTE *)(v13 + 32);
          if (v62)
          {
            *v14 = 0;
            v14[1] = 0;
            v16 = v59;
            v59 = 0;
            *v14 = v16;
            v17 = v60;
            v60 = 0;
            v18 = v12 + 40 * v11;
            *(_DWORD *)(v18 + 24) = v17;
            v19 = v61;
            v61 = 0;
            *(_DWORD *)(v18 + 28) = v19;
            *v15 = 1;
          }
          HIDWORD(v65) = v11 + 1;
        }
      }
      if (v63)
        v20 = v62 == 0;
      else
        v20 = 1;
      if (!v20)
        WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v59, v4);
      if (!v10)
        break;
      if (!--v9)
      {
        v21 = (WTF *)v64;
        LODWORD(v9) = v65;
        v22 = HIDWORD(v65);
        goto LABEL_26;
      }
    }
LABEL_66:
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v4);
LABEL_29:
    v29 = *a2;
    v30 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v31 = a2[3];
    if (v31 && v30)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v29);
      v46 = *a2;
      v47 = a2[1];
      v48 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v48)
      {
        if (v47)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v48 + 16))(v48, v46);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_31;
  }
  v22 = 0;
  v21 = 0;
LABEL_26:
  v64 = 0;
  v65 = 0;
  v57 = 1;
  WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v4);
  v56[0] = 0;
  v56[1] = 0;
  v52 = v21;
  v53 = v9;
  v54 = v22;
  WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v56, v23);
  v55 = 1;
  v24 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v24 + 16))(v24, &v52);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v55)
  {
    v27 = &v52;
    return WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v26);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ShapeDetection::DetectedFace>(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedFace,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 40))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedFace>(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  result = WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)a1 + 40 * v4;
  *(_OWORD *)v6 = *(_OWORD *)result;
  *(_BYTE *)(v6 + 16) = 0;
  v7 = (_QWORD *)(v6 + 16);
  *(_BYTE *)(v6 + 32) = 0;
  v8 = (_BYTE *)(v6 + 32);
  if (*(_BYTE *)(result + 32))
  {
    *v7 = 0;
    v7[1] = 0;
    v9 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = 0;
    *v7 = v9;
    v10 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = 0;
    v11 = v5 + 40 * v4;
    *(_DWORD *)(v11 + 24) = v10;
    v12 = *(_DWORD *)(result + 28);
    *(_DWORD *)(result + 28) = 0;
    *(_DWORD *)(v11 + 28) = v12;
    *v8 = 1;
  }
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1974BCD4CLL);
    }
    v2 = result;
    v3 = *(WTF **)result;
    v4 = (void *)(*(_QWORD *)result + 40 * *(unsigned int *)(result + 12));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::ShapeDetection::DetectedFace>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v7);
    }
  }
  return result;
}

uint64_t WTF::VectorMover<false,WebCore::ShapeDetection::DetectedFace>::move(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;

  if ((void *)result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      result = v5 + v6;
      *(_OWORD *)v7 = *(_OWORD *)(v5 + v6);
      *(_BYTE *)(a3 + v6 + 16) = 0;
      v8 = (_QWORD *)(a3 + v6 + 16);
      *(_BYTE *)(v7 + 32) = 0;
      if (*(_BYTE *)(v5 + v6 + 32))
      {
        *v8 = 0;
        *(_QWORD *)(a3 + v6 + 24) = 0;
        v9 = *(_QWORD *)(result + 16);
        result += 16;
        *(_QWORD *)result = 0;
        *v8 = v9;
        v10 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = 0;
        *(_DWORD *)(v7 + 24) = v10;
        v11 = *(_DWORD *)(result + 12);
        *(_DWORD *)(result + 12) = 0;
        *(_DWORD *)(v7 + 28) = v11;
        *(_BYTE *)(v7 + 32) = 1;
        if (*(_BYTE *)(v5 + v6 + 32))
          result = WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
      }
      v6 += 40;
    }
    while ((void *)(v5 + v6) != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteFaceDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E14D8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteFaceDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E14D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteFaceDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteFaceDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedFace,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E1500;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E1500;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, unint64_t *a2)
{
  void *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  WTF::StringImpl **v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  WTF::StringImpl *v41;
  int v42;
  unsigned int v43;
  char v44;
  _QWORD v45[2];
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  if (!a2 || (v4 = (void *)*a2) == 0)
  {
LABEL_38:
    v47 = 0uLL;
    v36 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v36 + 16))(v36, &v47);
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v21 = (WTF::StringImpl **)&v47;
    return WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v20);
  }
  v5 = a2[1];
  v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (_QWORD)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *a2 = 0;
    a2[1] = 0;
    v22 = a2[3];
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v22 + 16))(v22);
        v23 = *a2;
        v24 = a2[1];
        v25 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v25)
        {
          if (v24)
            (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v25 + 16))(v25, v23);
        }
      }
    }
    goto LABEL_36;
  }
  v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  a2[2] = (unint64_t)(v8 + 1);
  v53 = 0;
  v54 = 0;
  if (v9 >= 0x6666)
  {
    while (1)
    {
      IPC::Decoder::decode<WebCore::ShapeDetection::DetectedText>((uint64_t)&v47, a2);
      if (!v52)
        goto LABEL_35;
      v26 = HIDWORD(v54);
      if (HIDWORD(v54) == (_DWORD)v54)
      {
        WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedText>((unsigned int *)&v53, (unint64_t)&v47);
      }
      else
      {
        v27 = v53 + 40 * HIDWORD(v54);
        *(_OWORD *)v27 = v47;
        v28 = v48;
        v48 = 0;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0;
        *(_QWORD *)(v27 + 16) = v28;
        v29 = v49;
        v49 = 0;
        *(_QWORD *)(v27 + 24) = v29;
        LODWORD(v29) = v50;
        v50 = 0;
        *(_DWORD *)(v27 + 32) = v29;
        LODWORD(v29) = v51;
        v51 = 0;
        *(_DWORD *)(v27 + 36) = v29;
        HIDWORD(v54) = v26 + 1;
      }
      result = std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v10);
      if (!--v9)
      {
        LODWORD(v9) = v54;
        v15 = (WTF::StringImpl *)v53;
        if (v54 <= HIDWORD(v54))
        {
          v16 = HIDWORD(v54);
          goto LABEL_18;
        }
        v30 = (WTF::StringImpl *)v53;
        v40 = HIDWORD(v54);
        if (HIDWORD(v54))
        {
          if (HIDWORD(v54) >= 0x6666667)
          {
            __break(0xC471u);
            return result;
          }
          v31 = WTF::fastMalloc((WTF *)(40 * HIDWORD(v54)));
          LODWORD(v9) = 40 * v40 / 0x28;
          if ((WTF::StringImpl *)v31 == v15)
          {
            v30 = v15;
          }
          else
          {
            v30 = (WTF::StringImpl *)v31;
            WTF::VectorMover<false,WebCore::ShapeDetection::DetectedText>::move(v15, (WTF::StringImpl *)((char *)v15 + 40 * v40), v31);
          }
        }
        if (v15)
        {
          if (v30 == v15)
          {
            LODWORD(v9) = 0;
            v30 = 0;
            v53 = 0;
            LODWORD(v54) = 0;
          }
          WTF::fastFree(v15, v4);
        }
        v15 = v30;
        v16 = v40;
        goto LABEL_18;
      }
    }
  }
  if (v9)
  {
    LODWORD(v54) = 40 * (int)v9 / 0x28u;
    v53 = WTF::fastMalloc((WTF *)(40 * v9));
    while (1)
    {
      IPC::Decoder::decode<WebCore::ShapeDetection::DetectedText>((uint64_t)&v47, a2);
      if (!v52)
        break;
      v11 = HIDWORD(v54);
      if (HIDWORD(v54) == (_DWORD)v54)
      {
        WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedText>((unsigned int *)&v53, (unint64_t)&v47);
      }
      else
      {
        v12 = v53 + 40 * HIDWORD(v54);
        *(_OWORD *)v12 = v47;
        v13 = v48;
        v48 = 0;
        *(_QWORD *)(v12 + 24) = 0;
        *(_QWORD *)(v12 + 32) = 0;
        *(_QWORD *)(v12 + 16) = v13;
        v14 = v49;
        v49 = 0;
        *(_QWORD *)(v12 + 24) = v14;
        LODWORD(v14) = v50;
        v50 = 0;
        *(_DWORD *)(v12 + 32) = v14;
        LODWORD(v14) = v51;
        v51 = 0;
        *(_DWORD *)(v12 + 36) = v14;
        HIDWORD(v54) = v11 + 1;
      }
      std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v10);
      if (!--v9)
      {
        v15 = (WTF::StringImpl *)v53;
        LODWORD(v9) = v54;
        v16 = HIDWORD(v54);
        goto LABEL_18;
      }
    }
LABEL_35:
    std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v10);
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v32);
LABEL_36:
    v33 = *a2;
    v34 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v35 = a2[3];
    if (v35 && v34)
    {
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v35 + 16))(v35, v33);
      v37 = *a2;
      v38 = a2[1];
      v39 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v39)
      {
        if (v38)
          (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v37);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_38;
  }
  v16 = 0;
  v15 = 0;
LABEL_18:
  v53 = 0;
  v54 = 0;
  v46 = 1;
  WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v4);
  v45[0] = 0;
  v45[1] = 0;
  v41 = v15;
  v42 = v9;
  v43 = v16;
  WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v17);
  v44 = 1;
  v18 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v18 + 16))(v18, &v41);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v44)
  {
    v21 = &v41;
    return WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v21, v20);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ShapeDetection::DetectedText>(uint64_t a1, unint64_t *a2)
{
  WTF::StringImpl *result;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedText,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 40))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (WTF::StringImpl *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, unint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

__n128 WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ShapeDetection::DetectedText>(unsigned int *a1, unint64_t a2)
{
  __n128 *v3;
  uint64_t v4;
  __n128 result;
  unint64_t v6;
  unint64_t v7;

  v3 = (__n128 *)WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  v4 = *(_QWORD *)a1 + 40 * a1[3];
  result = *v3;
  *(__n128 *)v4 = *v3;
  v6 = v3[1].n128_u64[0];
  v3[1].n128_u64[0] = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = v6;
  v7 = v3[1].n128_u64[1];
  v3[1].n128_u64[1] = 0;
  *(_QWORD *)(v4 + 24) = v7;
  LODWORD(v7) = v3[2].n128_u32[0];
  v3[2].n128_u32[0] = 0;
  *(_DWORD *)(v4 + 32) = v7;
  LODWORD(v7) = v3[2].n128_u32[1];
  v3[2].n128_u32[1] = 0;
  *(_DWORD *)(v4 + 36) = v7;
  ++a1[3];
  return result;
}

unint64_t WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 40 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  int v5;
  uint64_t v6;
  void *v7;

  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x6666667)
    {
      __break(0xC471u);
      JUMPOUT(0x1974BD560);
    }
    v2 = result;
    v3 = *(WTF::StringImpl **)result;
    v4 = (WTF::StringImpl *)(*(_QWORD *)result + 40 * *((unsigned int *)result + 3));
    v5 = 40 * a2;
    v6 = WTF::fastMalloc((WTF *)(40 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x28;
    *(_QWORD *)v2 = v6;
    result = WTF::VectorMover<false,WebCore::ShapeDetection::DetectedText>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ShapeDetection::DetectedText>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;

  if (result != a2)
  {
    v5 = result;
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      v6 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 16) = v6;
      v7 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      *(_QWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 8);
      *((_DWORD *)v5 + 8) = 0;
      *(_DWORD *)(a3 + 32) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 9);
      *((_DWORD *)v5 + 9) = 0;
      *(_DWORD *)(a3 + 36) = v7;
      v8 = (WTF *)*((_QWORD *)v5 + 3);
      if (v8)
      {
        *((_QWORD *)v5 + 3) = 0;
        *((_DWORD *)v5 + 8) = 0;
        WTF::fastFree(v8, a2);
      }
      result = (WTF::StringImpl *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 40);
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::ShapeDetection::DetectedText,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(WTF **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 32) = 0;
      WTF::fastFree(v3, a2);
    }
    v4 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteTextDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E1528;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteTextDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E1528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteTextDetector::Detect,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteTextDetector::Detect &&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::DetectedText,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long><WebKit::ShapeDetectionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Translate>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v15;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 868;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v15 = (IPC::Encoder *)v6;
  v7 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  v8 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v8;
  v10 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 1, 0);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  return v10;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Rotate>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 845;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Scale>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 847;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineFillColor>(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 849;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  LODWORD(a3) = **a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = a3;
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetInlineStroke>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 850;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::SetInlineStroke,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::SetLineDash>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 852;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::SetLineDash,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::Clip>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 800;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipRoundedRect>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 805;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOut>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 801;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClipOutRoundedRect>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 802;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFilteredImageBuffer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 813;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v6, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *(int **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Filter,void>::encode((char *)v6, **(_QWORD **)(a2 + 16));
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawGlyphs>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 816;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawGlyphs,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawImageBuffer>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 817;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v6, a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

char *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t **a2)
{
  uint64_t v4;

  v4 = **a2;
  *(_QWORD *)IPC::Encoder::grow(a1, 8uLL, 8) = v4;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2[1]);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, (int *)a2[2]);
  return IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode(a1, (unsigned __int8 *)a2[3]);
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteDisplayListRecorder::DrawPattern,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  v8 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded(a1, a3, a4);
  if ((_DWORD)v8)
    return v8;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v12, a4);
  if (!v14)
    return 15;
  result = IPC::StreamClientConnection::trySendStream<Messages::RemoteDisplayListRecorder::DrawPattern>(a1, v12, v13, (uint64_t)a2);
  if ((result & 1) != 0)
    return 0;
  if (v14)
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v12, v13);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, (uint64_t **)(a1 + 8));
    v10 = IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawPattern>((uint64_t)v11, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v11);
    return v10;
  }
  __break(1u);
  return result;
}

BOOL IPC::StreamClientConnection::trySendStream<Messages::RemoteDisplayListRecorder::DrawPattern>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v19 = a2;
  v20 = a3;
  v21 = 0;
  v5 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v6 = v5 >= a2;
  v7 = v5 - a2;
  if (v6)
  {
    if (v7 > 0xFFFFFFFFFFFFFFFDLL || v7 + 2 > a3)
    {
      v20 = 0;
    }
    else
    {
      *(_WORD *)(a2 + v7) = 822;
      v21 = v7 + 2;
    }
  }
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>((uint64_t *)&v19, a4);
  v9 = v20;
  if (v20)
  {
    v10 = v21;
    v11 = *(_QWORD *)(a1 + 64);
    v12 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(_QWORD *)(a1 + 56);
    if (v12 + 16 >= v13)
      v12 = 0;
    if (v21 <= 0x10)
      v10 = 16;
    v14 = v12 + v10;
    if (v13 <= v14)
      v15 = 0;
    else
      v15 = v14;
    *(_QWORD *)(a1 + 72) = v15;
    v16 = (unint64_t *)(*(_QWORD *)(v11 + 16) + 128);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v15, v16));
    if (v17 == 0x80000000 || *(_DWORD *)(a1 + 108))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  return v9 != 0;
}

_QWORD *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> const&,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions const&>,0ul,1ul,2ul,3ul,4ul,5ul,6ul>(uint64_t *a1, uint64_t a2)
{
  IPC::StreamConnectionEncoder::operator<<<unsigned long long const&>(a1, *(_QWORD **)a2);
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, *(_DWORD **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::PathEllipseInRect,void>::encode(a1, *(_DWORD **)(a2 + 16));
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode(a1, *(_QWORD **)(a2 + 24));
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, *(_DWORD **)(a2 + 32));
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode(a1, *(_DWORD **)(a2 + 40));
  return IPC::StreamConnectionEncoder::operator<<<WebCore::ImagePaintingOptions>(a1, *(_BYTE **)(a2 + 48));
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawPattern>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 822;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, (int *)a2[1]);
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, (int *)a2[2]);
  IPC::ArgumentCoder<WebCore::AffineTransform,void>::encode((IPC::Encoder *)v6, a2[3]);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v6, (int *)a2[4]);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v6, (int *)a2[5]);
  IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::encode((IPC::Encoder *)v6, (unsigned __int8 *)a2[6]);
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::BeginTransparencyLayer>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 796;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::EndTransparencyLayer>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v11;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 825;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  v6 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 1, 0);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v5);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawRect>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 823;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *(int **)a2);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawLinesForText>(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 819;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLinesForText,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawFocusRingRects>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  IPC::Encoder *v11;
  WTF *v12;
  void *v13;
  IPC::Encoder *v15;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 815;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v15 = (IPC::Encoder *)v6;
  IPC::VectorArgumentCoder<false,WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v6, *(_QWORD *)a2);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  v8 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v8;
  IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v6, *(WebCore::Color **)(a2 + 16));
  v10 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 1, 0);
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v9);
    WTF::fastFree(v12, v13);
  }
  return v10;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithColor>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 836;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *(int **)a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v6, *(WebCore::Color **)(a2 + 8));
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithGradient>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 837;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = *a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  IPC::ArgumentCoder<WebCore::Gradient,void>::encode((IPC::Encoder *)v6, *((_QWORD *)v7 + 2));
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillCompositedRect>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 829;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,0ul,1ul,2ul,3ul>((IPC::Encoder *)v6, a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,void>::encode<IPC::Encoder,std::tuple<WebCore::FloatRect const&,WebCore::Color const&,WebCore::CompositeOperator,WebCore::BlendMode>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, int **a2)
{
  int **v2;
  char v4;
  char *result;

  v2 = a2;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(a1, (WebCore::Color *)v2[1]);
  v4 = *((_BYTE *)v2 + 16);
  *IPC::Encoder::grow(a1, 1uLL, 1) = v4;
  LOBYTE(v2) = *((_BYTE *)v2 + 17);
  result = IPC::Encoder::grow(a1, 1uLL, 1);
  *result = (char)v2;
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillRectWithRoundedHole>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 839;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *(int **)a2);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((IPC::Encoder *)v6, *(int **)(a2 + 8));
  IPC::ArgumentCoder<WebCore::Color,void>::encode((IPC::Encoder *)v6, *(WebCore::Color **)(a2 + 16));
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillLine>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 831;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillClosedArc>(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 828;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::PathArc,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillPathSegment>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 833;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::PathSegment,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::FillEllipse>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 830;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

WebKit::RemoteRenderingBackendProxy *WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorderProxy::recordPaintVideoFrame(WebCore::VideoFrame &,WebCore::FloatRect const&,BOOL)::$_0,void,IPC::Semaphore &>::call(WebKit::RemoteRenderingBackendProxy *result, IPC::Semaphore *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  int v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  int v63;
  IPC::StreamClientConnection *v64;
  uint64_t *v65;
  IPC::Encoder *v66;
  _BYTE buf[22];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)result + 1);
  v3 = v2[481];
  if (!v3)
    return result;
  result = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v64);
  if (!v64)
    return result;
  v5 = v2[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v2[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_91;
  }
  result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19AEABB3C](v5);
LABEL_91:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v63 = __ldxr((unsigned __int8 *)v5);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_97;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_97:
    result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (result)
      result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(_QWORD *)result + 160))(result);
  }
  v7 = 0;
LABEL_7:
  v8 = v64;
  v9 = v2[478];
  WTF::ApproximateTime::now(result);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (!buf[16])
      goto LABEL_52;
    v29 = *(_QWORD *)buf;
    v30 = *(_QWORD *)&buf[8];
    v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = v31 - *(_QWORD *)buf;
    if (v31 < *(_QWORD *)buf)
    {
      v34 = 0;
      v33 = *(_QWORD *)&buf[8];
    }
    else
    {
      v33 = 0;
      if (v32 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v34 = 0;
      }
      else
      {
        v34 = 0;
        if (v32 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v32) = 2822;
          v33 = v30;
          v34 = v32 + 2;
        }
      }
    }
    v35 = (_QWORD *)((v29 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v35 >= v29 + v34)
    {
      v36 = (char *)v35 - v29;
      v24 = 17;
      if ((unint64_t)v35 - v29 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_53;
      v34 = (unint64_t)(v36 + 8);
      if ((unint64_t)(v36 + 8) > v33)
        goto LABEL_53;
      *v35 = v9;
    }
    if (!v33)
    {
      v24 = 17;
      goto LABEL_53;
    }
    v37 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v38 = *((_QWORD *)v8 + 7);
    if (v37 + 16 >= v38)
      v37 = 0;
    if (v34 <= 0x10)
      v34 = 16;
    v39 = v37 + v34;
    if (v38 <= v39)
      v40 = 0;
    else
      v40 = v39;
    *((_QWORD *)v8 + 9) = v40;
    v41 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v40, v41));
    v43 = *((_DWORD *)v8 + 27);
    if (v42 == 0x80000000 || v43 != 0)
    {
      v58 = v43 + 1;
      *((_DWORD *)v8 + 27) = v58;
      if (v58 >= *((_DWORD *)v8 + 26))
      {
        if (*((_BYTE *)v8 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
        *((_DWORD *)v8 + 27) = 0;
      }
    }
    *((_QWORD *)v8 + 6) = v9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v11);
  if (!buf[16])
  {
LABEL_52:
    v24 = 15;
LABEL_53:
    v45 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v46 = IPC::errorAsString(v24);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetSharedVideoFrameSemaphore";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v46;
      _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v47 = v2[481];
    if (v47)
    {
      v48 = *(_BYTE **)(v47 + 8);
      if (v48)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v48);
    }
    goto LABEL_58;
  }
  v12 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v13 = v12 - *(_QWORD *)buf;
  if (v12 < *(_QWORD *)buf
    || ((v14 = v13 + 2, v13 <= 0xFFFFFFFFFFFFFFFDLL) ? (v15 = v14 > *(_QWORD *)&buf[8]) : (v15 = 1), v15))
  {
    v14 = 0;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)buf + v13) = 2821;
  }
  v16 = *((_QWORD *)v8 + 8);
  v17 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v18 = *((_QWORD *)v8 + 7);
  if (v17 + 16 >= v18)
    v17 = 0;
  if (v14 <= 0x10)
    v14 = 16;
  v19 = v17 + v14;
  if (v18 <= v19)
    v19 = 0;
  *((_QWORD *)v8 + 9) = v19;
  v20 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
  do
    __ldaxr(v20);
  while (__stlxr(v19, v20));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)v8 + 1);
  v21 = v65;
  v22 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v22 = 856;
  *(_QWORD *)(v22 + 8) = v9;
  *(_QWORD *)(v22 + 528) = v22 + 16;
  *(_QWORD *)(v22 + 536) = v22 + 16;
  *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v22 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
  v66 = (IPC::Encoder *)v22;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v22, a2);
  v24 = IPC::Connection::sendMessageImpl((uint64_t)v21, (uint64_t *)&v66, 1, 0);
  v25 = v66;
  v66 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v23);
    WTF::fastFree(v26, v27);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65);
  if (v24)
    goto LABEL_53;
LABEL_58:
  if ((v7 & 1) != 0)
    goto LABEL_75;
  v49 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v49))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v49))
  {
    goto LABEL_63;
  }
  MEMORY[0x19AEABB3C](v49);
LABEL_63:
  v51 = *(_QWORD *)(v49 + 8);
  v52 = v51 - 1;
  *(_QWORD *)(v49 + 8) = v51 - 1;
  if (v51 == 1)
  {
    v61 = *(_QWORD *)(v49 + 16);
    v53 = *(_QWORD *)(v49 + 24);
    *(_QWORD *)(v49 + 24) = 0;
    v54 = v61 != 0;
  }
  else
  {
    v53 = 0;
    v54 = 1;
  }
  v55 = __ldxr((unsigned __int8 *)v49);
  if (v55 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v49))
    {
      if (!v52)
        goto LABEL_71;
      goto LABEL_75;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v49);
  if (!v52)
  {
LABEL_71:
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    if (!v54)
      WTF::fastFree((WTF *)v49, v28);
  }
LABEL_75:
  result = v64;
  v64 = 0;
  if (result)
  {
    do
    {
      v56 = __ldaxr((unsigned int *)result);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, (unsigned int *)result));
    if (!v57)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v59, v60);
    }
  }
  return result;
}

WebKit::RemoteRenderingBackendProxy *WTF::Detail::CallableWrapper<WebKit::RemoteDisplayListRecorderProxy::recordPaintVideoFrame(WebCore::VideoFrame &,WebCore::FloatRect const&,BOOL)::$_1,void,WebCore::SharedMemoryHandle &&>::call(WebKit::RemoteRenderingBackendProxy *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  IPC::StreamClientConnection *v8;
  uint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  void *v23;
  int v24;
  IPC::Encoder *v25;
  WTF *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  NSObject *v45;
  const char *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  int v63;
  IPC::StreamClientConnection *v64;
  uint64_t *v65;
  IPC::Encoder *v66;
  _BYTE buf[22];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*((_QWORD *)result + 1);
  v3 = v2[481];
  if (!v3)
    return result;
  result = *(WebKit::RemoteRenderingBackendProxy **)(v3 + 8);
  if (!result)
    return result;
  result = WebKit::RemoteRenderingBackendProxy::connection(result, (unsigned int **)&v64);
  if (!v64)
    return result;
  v5 = v2[479];
  if (!v5)
  {
    v6 = 0;
LABEL_6:
    v7 = 1;
    goto LABEL_7;
  }
  v6 = v2[480];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_91;
  }
  result = (WebKit::RemoteRenderingBackendProxy *)MEMORY[0x19AEABB3C](v5);
LABEL_91:
  if (*(_QWORD *)(v5 + 24))
    ++*(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v63 = __ldxr((unsigned __int8 *)v5);
  if (v63 != 1)
  {
    __clrex();
    goto LABEL_97;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_97:
    result = (WebKit::RemoteRenderingBackendProxy *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (!v6)
    goto LABEL_6;
  if (!*(_BYTE *)(v6 + 4016))
  {
    *(_BYTE *)(v6 + 4016) = 1;
    result = (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)v6);
    if (result)
      result = (WebKit::RemoteRenderingBackendProxy *)(*(uint64_t (**)(WebKit::RemoteRenderingBackendProxy *))(*(_QWORD *)result + 160))(result);
  }
  v7 = 0;
LABEL_7:
  v8 = v64;
  v9 = v2[478];
  WTF::ApproximateTime::now(result);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v8 + 6) != v9)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v10 + 15.0);
    if (!buf[16])
      goto LABEL_52;
    v29 = *(_QWORD *)buf;
    v30 = *(_QWORD *)&buf[8];
    v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = v31 - *(_QWORD *)buf;
    if (v31 < *(_QWORD *)buf)
    {
      v34 = 0;
      v33 = *(_QWORD *)&buf[8];
    }
    else
    {
      v33 = 0;
      if (v32 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v34 = 0;
      }
      else
      {
        v34 = 0;
        if (v32 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v32) = 2822;
          v33 = v30;
          v34 = v32 + 2;
        }
      }
    }
    v35 = (_QWORD *)((v29 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v35 >= v29 + v34)
    {
      v36 = (char *)v35 - v29;
      v24 = 17;
      if ((unint64_t)v35 - v29 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_53;
      v34 = (unint64_t)(v36 + 8);
      if ((unint64_t)(v36 + 8) > v33)
        goto LABEL_53;
      *v35 = v9;
    }
    if (!v33)
    {
      v24 = 17;
      goto LABEL_53;
    }
    v37 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v38 = *((_QWORD *)v8 + 7);
    if (v37 + 16 >= v38)
      v37 = 0;
    if (v34 <= 0x10)
      v34 = 16;
    v39 = v37 + v34;
    if (v38 <= v39)
      v40 = 0;
    else
      v40 = v39;
    *((_QWORD *)v8 + 9) = v40;
    v41 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v40, v41));
    v43 = *((_DWORD *)v8 + 27);
    if (v42 == 0x80000000 || v43 != 0)
    {
      v58 = v43 + 1;
      *((_DWORD *)v8 + 27) = v58;
      if (v58 >= *((_DWORD *)v8 + 26))
      {
        if (*((_BYTE *)v8 + 96))
          MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
        *((_DWORD *)v8 + 27) = 0;
      }
    }
    *((_QWORD *)v8 + 6) = v9;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)v8 + 56, buf, v11);
  if (!buf[16])
  {
LABEL_52:
    v24 = 15;
LABEL_53:
    v45 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v46 = IPC::errorAsString(v24);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteDisplayListRecorder_SetSharedVideoFrameMemory";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v46;
      _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v47 = v2[481];
    if (v47)
    {
      v48 = *(_BYTE **)(v47 + 8);
      if (v48)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v48);
    }
    goto LABEL_58;
  }
  v12 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v13 = v12 - *(_QWORD *)buf;
  if (v12 < *(_QWORD *)buf
    || ((v14 = v13 + 2, v13 <= 0xFFFFFFFFFFFFFFFDLL) ? (v15 = v14 > *(_QWORD *)&buf[8]) : (v15 = 1), v15))
  {
    v14 = 0;
  }
  else
  {
    *(_WORD *)(*(_QWORD *)buf + v13) = 2821;
  }
  v16 = *((_QWORD *)v8 + 8);
  v17 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v18 = *((_QWORD *)v8 + 7);
  if (v17 + 16 >= v18)
    v17 = 0;
  if (v14 <= 0x10)
    v14 = 16;
  v19 = v17 + v14;
  if (v18 <= v19)
    v19 = 0;
  *((_QWORD *)v8 + 9) = v19;
  v20 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
  do
    __ldaxr(v20);
  while (__stlxr(v19, v20));
  *((_DWORD *)v8 + 27) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)v8 + 1);
  v21 = v65;
  v22 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v22 = 855;
  *(_QWORD *)(v22 + 8) = v9;
  *(_QWORD *)(v22 + 528) = v22 + 16;
  *(_QWORD *)(v22 + 536) = v22 + 16;
  *(_OWORD *)(v22 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v22 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v22);
  v66 = (IPC::Encoder *)v22;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v22, a2);
  v24 = IPC::Connection::sendMessageImpl((uint64_t)v21, (uint64_t *)&v66, 1, 0);
  v25 = v66;
  v66 = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v23);
    WTF::fastFree(v26, v27);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65);
  if (v24)
    goto LABEL_53;
LABEL_58:
  if ((v7 & 1) != 0)
    goto LABEL_75;
  v49 = *(_QWORD *)(v6 + 8);
  if (__ldaxr((unsigned __int8 *)v49))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v49))
  {
    goto LABEL_63;
  }
  MEMORY[0x19AEABB3C](v49);
LABEL_63:
  v51 = *(_QWORD *)(v49 + 8);
  v52 = v51 - 1;
  *(_QWORD *)(v49 + 8) = v51 - 1;
  if (v51 == 1)
  {
    v61 = *(_QWORD *)(v49 + 16);
    v53 = *(_QWORD *)(v49 + 24);
    *(_QWORD *)(v49 + 24) = 0;
    v54 = v61 != 0;
  }
  else
  {
    v53 = 0;
    v54 = 1;
  }
  v55 = __ldxr((unsigned __int8 *)v49);
  if (v55 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v49))
    {
      if (!v52)
        goto LABEL_71;
      goto LABEL_75;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v49);
  if (!v52)
  {
LABEL_71:
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
    if (!v54)
      WTF::fastFree((WTF *)v49, v28);
  }
LABEL_75:
  result = v64;
  v64 = 0;
  if (result)
  {
    do
    {
      v56 = __ldaxr((unsigned int *)result);
      v57 = v56 - 1;
    }
    while (__stlxr(v57, (unsigned int *)result));
    if (!v57)
    {
      atomic_store(1u, (unsigned int *)result);
      IPC::StreamClientConnection::~StreamClientConnection(result);
      return (WebKit::RemoteRenderingBackendProxy *)WTF::fastFree(v59, v60);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeRect>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 867;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *(int **)a2);
  v7 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeLine>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 862;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeQuadCurve>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 866;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeBezierCurve>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 859;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokePathSegment>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 865;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::PathSegment,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::StrokeEllipse>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 861;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::ClearRect>(uint64_t a1, int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 799;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteDisplayListRecorder::DrawControlPart>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 808;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::ControlPart,void>::encode((IPC::Encoder *)v6, **(_QWORD **)a2);
  IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::encode((IPC::Encoder *)v6, *(int **)(a2 + 8));
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  IPC::ArgumentCoder<WebCore::ControlStyle,void>::encode((IPC::Encoder *)v6, *(int **)(a2 + 24));
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  IPC::StreamClientConnection *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  void *v15;
  uint64_t v17;
  IPC::StreamClientConnection *v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[4];
  char v22;

  if (*(_BYTE *)(a1 + 9) == 1)
    v8 = 50;
  else
    v8 = 21;
  IPC::StreamClientConnection::create((IPC::StreamClientConnection *)v8, v21);
  if (v22)
  {
    v9 = (IPC::StreamClientConnection *)v21[0];
    v21[0] = 0;
    v18 = v9;
    WTF::MachSendRight::MachSendRight();
    WTF::MachSendRight::MachSendRight();
    v20[1] = v21[3];
    WebKit::RemoteGraphicsContextGLProxy::platformCreate(a1, a3, &v17);
    v10 = v17;
    WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection((unsigned int *)a2);
    WebKit::RemoteGraphicsContextGLProxy::initializeIPC((unsigned int **)v10, (unsigned int **)&v18, *(_QWORD *)(a2 + 56), (uint64_t)&v19);
    if (*(_BYTE *)(a1 + 9) == 2)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)v10);
      (*(void (**)(uint64_t))(*(_QWORD *)(v10 + 16) + 2312))(v10 + 16);
    }
    WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized(v10);
    *a4 = v10;
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v20);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v19);
    v11 = (unsigned int *)v18;
    v18 = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v11);
        WTF::fastFree(v14, v15);
      }
    }
  }
  else
  {
    *a4 = 0;
  }
  return std::__optional_destruct_base<IPC::StreamClientConnection::StreamConnectionPair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::initializeIPC(unsigned int **a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;

  v9 = a3;
  WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=<IPC::StreamClientConnection>(a1 + 12, a2);
  IPC::StreamClientConnection::open((uint64_t)a1[12], a1, (uint64_t)(a1 + 8));
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = off_1E34E3620;
  v6[1] = a1;
  v6[2] = &v9;
  v6[3] = a4;
  v8 = v6;
  WTF::callOnMainRunLoopAndWait();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized(uint64_t this)
{
  uint64_t v1;
  WebKit::RemoteGraphicsContextGLProxy *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(this + 96);
  if (v1)
  {
    v2 = (WebKit::RemoteGraphicsContextGLProxy *)this;
    if (!*(_BYTE *)(this + 104))
    {
      v3 = *(_QWORD *)(this + 72);
      v4 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
      v5 = INFINITY;
      if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
      {
        WTF::ApproximateTime::now((WTF::ApproximateTime *)this);
        v5 = v4 + v6;
      }
      this = IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v1, v3, 0, v5);
      if ((_DWORD)this)
      {
        WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
        return (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::RemoteGraphicsContextGLProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E34E3BA8;
  *(_QWORD *)(a1 + 8) = 0;
  WebCore::GraphicsContextGL::GraphicsContextGL();
  WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)(a1 + 64));
  *(_QWORD *)a1 = off_1E34E1B48;
  *(_QWORD *)(a1 + 16) = &unk_1E34E2480;
  *(_QWORD *)(a1 + 64) = &off_1E34E1B48[587];
  *(_QWORD *)(a1 + 72) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  WebKit::SharedVideoFrameWriter::SharedVideoFrameWriter((WebKit::SharedVideoFrameWriter *)(a1 + 136));
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  return a1;
}

void WebKit::RemoteGraphicsContextGLProxy::~RemoteGraphicsContextGLProxy(WebKit::RemoteGraphicsContextGLProxy *this)
{
  WebCore::GraphicsContextGL *v2;
  WTF::FunctionDispatcher *v3;
  unsigned int *v4;
  unsigned int *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl **v7;
  WTF::StringImpl **v8;
  WTF::StringImpl **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  WTF *v17;
  void *v18;

  *((_QWORD *)this + 2) = &unk_1E34E2480;
  v2 = (WebKit::RemoteGraphicsContextGLProxy *)((char *)this + 16);
  *(_QWORD *)this = off_1E34E1B48;
  *((_QWORD *)this + 8) = &off_1E34E1B48[587];
  v3 = (WebKit::RemoteGraphicsContextGLProxy *)((char *)this + 64);
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  v4 = (unsigned int *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v4)
    WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v5)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v5);
  std::unique_ptr<IPC::Semaphore>::reset[abi:sn180100]((IPC::Semaphore **)this + 17, 0);
  v7 = (WTF::StringImpl **)*((_QWORD *)this + 16);
  if (v7)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v7, v6);
  v8 = (WTF::StringImpl **)*((_QWORD *)this + 15);
  if (v8)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v6);
  v9 = (WTF::StringImpl **)*((_QWORD *)this + 14);
  if (v9)
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v6);
  v10 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v10);
      WTF::fastFree(v17, v18);
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v6);
    }
  }
  WTF::FunctionDispatcher::~FunctionDispatcher(v3);
  WebCore::GraphicsContextGL::~GraphicsContextGL(v2);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v16);
}

uint64_t **WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t **result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  WTF *v9;
  void *v10;
  uint64_t **v11;

  *((_BYTE *)this + 153) = 1;
  MEMORY[0x19AEBA1A0](*(unsigned int *)(*((_QWORD *)this + 17) + 4));
  result = (uint64_t **)*((_QWORD *)this + 12);
  if (result)
  {
    IPC::StreamClientConnection::invalidate(result);
    v3 = (unsigned int *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v3);
        WTF::fastFree(v9, v10);
      }
    }
    v6 = (uint64_t *)*((_QWORD *)this + 9);
    v7 = (uint64_t *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    v8 = (uint64_t **)WTF::fastMalloc((WTF *)0x18);
    *v8 = (uint64_t *)&off_1E34E3710;
    v8[1] = v6;
    v8[2] = v7;
    v11 = v8;
    WTF::ensureOnMainRunLoop();
    result = v11;
    if (v11)
      return (uint64_t **)((uint64_t (*)(uint64_t **))(*v11)[1])(v11);
  }
  return result;
}

unsigned int **WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=<IPC::StreamClientConnection>(unsigned int **a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  IPC::StreamClientConnection *v8;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (IPC::StreamClientConnection *)v4;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v8);
    }
  }
  return a1;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::supportsExtension(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  int v15;
  WTF *v16;
  int j;
  int v18;

  WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized((uint64_t)this);
  v5 = *((_QWORD *)this + 14);
  if (v5)
  {
    v8 = *(_DWORD *)(v5 - 8);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 >= 0x100)
      v10 = v9 >> 8;
    else
      v10 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v10 = i + v15)
    {
      v15 = v10 & v8;
      v16 = *(WTF **)(v5 + 8 * (v10 & v8));
      if (v16 != (WTF *)-1)
      {
        if (!v16)
          goto LABEL_2;
        if ((WTF::equal(v16, *a2, v4) & 1) != 0)
          break;
      }
      ++i;
    }
    return 1;
  }
LABEL_2:
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v11 = *(_DWORD *)(v6 - 8);
    v12 = *((_DWORD *)*a2 + 4);
    if (v12 >= 0x100)
      v13 = v12 >> 8;
    else
      v13 = WTF::StringImpl::hashSlowCase(*a2);
    for (j = 0; ; v13 = j + v18)
    {
      v18 = v13 & v11;
      result = *(_QWORD *)(v6 + 8 * (v13 & v11));
      if (result != -1)
      {
        if (!result)
          return result;
        if ((WTF::equal((WTF *)result, *a2, v4) & 1) != 0)
          break;
      }
      ++j;
    }
    return 1;
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::supportsExtension(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::supportsExtension((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::ensureExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  uint64_t result;
  const WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int i;
  int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int j;
  int v17;
  WTF *v18;
  uint64_t *v19[3];

  result = WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized((uint64_t)this);
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = *((_DWORD *)*a2 + 4);
    if (v8 >= 0x100)
      v9 = v8 >> 8;
    else
      v9 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v9 = i + v11)
    {
      v11 = v9 & v7;
      result = *(_QWORD *)(v6 + 8 * (v9 & v7));
      if (result != -1)
      {
        if (!result)
          return result;
        if ((WTF::equal((WTF *)result, *a2, v5) & 1) != 0)
          break;
      }
      ++i;
    }
    v12 = *((_QWORD *)this + 16);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 - 8);
      v14 = *((_DWORD *)*a2 + 4);
      if (v14 >= 0x100)
        v15 = v14 >> 8;
      else
        v15 = WTF::StringImpl::hashSlowCase(*a2);
      for (j = 0; ; v15 = j + v17)
      {
        v17 = v15 & v13;
        v18 = *(WTF **)(v12 + 8 * (v15 & v13));
        if (v18 != (WTF *)-1)
        {
          if (!v18)
            goto LABEL_12;
          result = WTF::equal(v18, *a2, v5);
          if ((result & 1) != 0)
            break;
        }
        ++j;
      }
    }
    else
    {
LABEL_12:
      result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 16, a2, v5, (uint64_t)v19);
      if (*((_QWORD *)this + 12))
      {
        v19[0] = (uint64_t *)a2;
        result = WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EnsureExtensionEnabled>(this, v19);
        if ((_DWORD)result)
        {
          WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
          return (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EnsureExtensionEnabled>(WTF::ApproximateTime *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnsureExtensionEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::ensureExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::ensureExtensionEnabled((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  const WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int i;
  int v15;
  WTF *v16;
  int j;
  int v18;

  WebKit::RemoteGraphicsContextGLProxy::waitUntilInitialized((uint64_t)this);
  v5 = *((_QWORD *)this + 14);
  if (v5)
  {
    v8 = *(_DWORD *)(v5 - 8);
    v9 = *((_DWORD *)*a2 + 4);
    if (v9 >= 0x100)
      v10 = v9 >> 8;
    else
      v10 = WTF::StringImpl::hashSlowCase(*a2);
    for (i = 0; ; v10 = i + v15)
    {
      v15 = v10 & v8;
      v16 = *(WTF **)(v5 + 8 * (v10 & v8));
      if (v16 != (WTF *)-1)
      {
        if (!v16)
          goto LABEL_2;
        if ((WTF::equal(v16, *a2, v4) & 1) != 0)
          break;
      }
      ++i;
    }
    return 1;
  }
LABEL_2:
  v6 = *((_QWORD *)this + 16);
  if (v6)
  {
    v11 = *(_DWORD *)(v6 - 8);
    v12 = *((_DWORD *)*a2 + 4);
    if (v12 >= 0x100)
      v13 = v12 >> 8;
    else
      v13 = WTF::StringImpl::hashSlowCase(*a2);
    for (j = 0; ; v13 = j + v18)
    {
      v18 = v13 & v11;
      result = *(_QWORD *)(v6 + 8 * (v13 & v11));
      if (result != -1)
      {
        if (!result)
          return result;
        if ((WTF::equal((WTF *)result, *a2, v4) & 1) != 0)
          break;
      }
      ++j;
    }
    return 1;
  }
  return 0;
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isExtensionEnabled(WebKit::RemoteGraphicsContextGLProxy *this, WTF::StringImpl **a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isExtensionEnabled((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

double WebKit::RemoteGraphicsContextGLProxy::initialize(uint64_t a1, double *a2)
{
  double v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int j;
  double result;
  uint64_t v15;
  const WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _BYTE v23[24];
  WTF::StringImpl *v24;
  WTF::StringView *v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  __int16 v31;
  char v32;

  v4 = *a2;
  if (*(_QWORD *)a2)
  {
    v5 = *(_QWORD *)(*(_QWORD *)&v4 + 8);
    v6 = *(unsigned int *)(*(_QWORD *)&v4 + 4) | ((unint64_t)((*(_DWORD *)(*(_QWORD *)&v4 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v5 = 0;
    v6 = 0x100000000;
  }
  v29 = v5;
  v30 = v6;
  v31 = 32;
  v32 = 0;
  v25 = (WTF::StringView *)&v29;
  v26 = 0;
  v28 = (_DWORD)v6 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v25);
  v7 = v30;
  for (i = v26; v26 != v7 || !v28; i = v26)
  {
    WTF::StringView::substring((const char *)v25, i, v27);
    if ((v15 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 112), &v24, v16, (uint64_t)v23);
    v18 = v24;
    v24 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    WTF::StringView::SplitResult::Iterator::operator++();
  }
  v9 = *((_QWORD *)a2 + 1);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 4) | ((unint64_t)((*(_DWORD *)(v9 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v10 = 0;
    v11 = 0x100000000;
  }
  v29 = v10;
  v30 = v11;
  v31 = 32;
  v32 = 0;
  v25 = (WTF::StringView *)&v29;
  v26 = 0;
  v28 = (_DWORD)v11 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v25);
  v12 = v30;
  for (j = v26; v26 != v12 || !v28; j = v26)
  {
    WTF::StringView::substring((const char *)v25, j, v27);
    if ((v19 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 120), &v24, v20, (uint64_t)v23);
    v22 = v24;
    v24 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    WTF::StringView::SplitResult::Iterator::operator++();
  }
  result = a2[2];
  *(double *)(a1 + 168) = result;
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::externalImageTextureBindingPoint(WebKit::RemoteGraphicsContextGLProxy *this)
{
  if (*((_QWORD *)this + 12))
    return *((_QWORD *)this + 21);
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::externalImageTextureBindingPoint(WebKit::RemoteGraphicsContextGLProxy *this)
{
  if (*((_QWORD *)this + 10))
    return *((_QWORD *)this + 19);
  else
    return 0;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::reshape(uint64_t this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*(_QWORD *)(this + 96))
  {
    v3 = (WebKit::RemoteGraphicsContextGLProxy *)this;
    *(_DWORD *)(this + 28) = a2;
    *(_DWORD *)(this + 32) = a3;
    v4[0] = a2;
    v4[1] = a3;
    this = WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Reshape>((WTF::ApproximateTime *)this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Reshape>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Reshape,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::reshape(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::reshape((uint64_t)this - 16, a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::drawSurfaceBufferToImageBuffer(uint64_t result, unsigned __int8 a2, _QWORD *a3)
{
  WTF::ApproximateTime *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8[8];
  uint64_t *v9;
  _BYTE v10[16];
  int v11;

  if (*(_QWORD *)(result + 96))
  {
    v5 = (WTF::ApproximateTime *)result;
    (*(void (**)(_QWORD *))(*a3 + 24))(a3);
    v7 = a3[15];
    v8[0] = a2;
    v9 = &v7;
    WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>(v5, v8, (uint64_t)v10);
    v6 = v11;
    if (!v11)
      return ((uint64_t (*)(unsigned __int8 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v6])(v8, v10);
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
    result = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    v6 = v11;
    if (v11 != -1)
      return ((uint64_t (*)(unsigned __int8 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v6])(v8, v10);
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>@<X0>(WTF::ApproximateTime *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawSurfaceBufferToImageBuffer(uint64_t a1, unsigned __int8 a2, _QWORD *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawSurfaceBufferToImageBuffer(a1 - 16, a2, a3);
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::surfaceBufferToVideoFrame@<X0>(unsigned __int8 ***result@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  unsigned __int8 ***v4;
  WebKit::WebProcess *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  WebKit::WebProcess *v8;
  WebKit::GPUProcessConnection *v9;
  unsigned int *v10;
  uint64_t v11;
  WebKit::WebProcess *v12;
  WebKit::WebProcess *v13;
  unsigned __int8 **v14;
  _OWORD v15[4];
  _BYTE v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;

  if (!result[12])
  {
    *a3 = 0;
    return result;
  }
  v4 = result;
  LOBYTE(v15[0]) = a2;
  result = WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>((WTF::ApproximateTime *)result, v15, (uint64_t)v16);
  if (v21)
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)v4);
    result = (unsigned __int8 ***)((uint64_t (*)(unsigned __int8 ***))v4[2][289])(v4 + 2);
  }
  else
  {
    v15[0] = v17;
    v15[1] = v18;
    v15[2] = v19;
    v15[3] = v20;
    if (BYTE8(v20))
    {
      {
        v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v5 = WebKit::WebProcess::WebProcess(v12);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
      }
      v6 = WebKit::WebProcess::ensureGPUProcessConnection(v5);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, (uint64_t **)(v6 + 24));
      v7 = v14;
      {
        v8 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
      }
      else
      {
        v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        v8 = WebKit::WebProcess::WebProcess(v13);
        WebKit::WebProcess::singleton(void)::process = (uint64_t)v8;
      }
      v9 = (WebKit::GPUProcessConnection *)WebKit::WebProcess::ensureGPUProcessConnection(v8);
      v10 = (unsigned int *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy(v9);
      v11 = WTF::fastMalloc((WTF *)0x88);
      *a3 = WebKit::RemoteVideoFrameProxy::RemoteVideoFrameProxy(v11, v7, v10, (uint64_t)v15);
      result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
      goto LABEL_12;
    }
  }
  *a3 = 0;
LABEL_12:
  if (v21 != -1)
    return (unsigned __int8 ***)((uint64_t (*)(_OWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v21])(v15, v16);
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>@<X0>(WTF::ApproximateTime *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

unsigned __int8 ***`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::surfaceBufferToVideoFrame@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::surfaceBufferToVideoFrame((unsigned __int8 ***)(a1 - 16), a2, a3);
}

BOOL WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::MediaPlayer *a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v22;

  WebCore::MediaPlayer::videoFrameForCurrentTime(a2);
  if (!v22)
    return 0;
  v17 = WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(this, (WebCore::VideoFrame *)v22, a3, a4, a5, a6, a7, a8, a9, a10);
  v18 = v22 + 2;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v22 + 2);
    (*(void (**)())(*(_QWORD *)v22 + 8))();
  }
  return v17;
}

BOOL WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::VideoFrame *a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  WTF::ApproximateTime *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  uint64_t *v35;
  IPC::Encoder *v36;
  int v37;
  _BOOL8 v38;
  unsigned __int16 v39;
  void *v40;
  int v41;
  uint64_t *v42;
  IPC::Encoder *v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  unsigned int v65;
  uint64_t *v67;
  char v68;
  int v69;
  _BYTE v70[24];
  uint64_t v71;
  int v72;
  char v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  char v77;
  uint64_t *v78;
  int v79;
  IPC::Encoder *v80;
  uint64_t v81;
  char v82[9];

  if (!*((_QWORD *)this + 12))
    return 0;
  v17 = (_QWORD *)((char *)this + 136);
  v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v18 = off_1E34E3668;
  v18[1] = this;
  v75 = (unint64_t)v18;
  v19 = (uint64_t *)WTF::fastMalloc((WTF *)0x10);
  *v19 = (uint64_t)off_1E34E3690;
  v19[1] = (uint64_t)this;
  v67 = v19;
  WebKit::SharedVideoFrameWriter::write(v17, (uint64_t)a2, (uint64_t *)&v75, &v67, (uint64_t)v70);
  (*(void (**)(uint64_t *))(*v19 + 8))(v19);
  v20 = (WTF::ApproximateTime *)(*(uint64_t (**)(_QWORD *))(*v18 + 8))(v18);
  if (!v73)
    return 0;
  v21 = *((_QWORD *)this + 12);
  if (v21)
  {
    v22 = *((_QWORD *)this + 9);
    v23 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v24 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(v20);
      v24 = v23 + v25;
    }
    if (*(_QWORD *)(v21 + 48) != v22)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v21 + 56, &v75, v24);
      if (!v77)
      {
LABEL_76:
        v56 = 15;
LABEL_77:
        LOBYTE(v67) = v56;
        goto LABEL_28;
      }
      v48 = v75;
      v49 = v76;
      v50 = (v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v51 = v50 - v75;
      if (v50 < v75)
      {
        v53 = 0;
        v52 = v76;
      }
      else
      {
        v52 = 0;
        if (v51 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v53 = 0;
        }
        else
        {
          v53 = 0;
          if (v51 + 2 <= v76)
          {
            *(_WORD *)(v75 + v51) = 2822;
            v52 = v49;
            v53 = v51 + 2;
          }
        }
      }
      v54 = (v48 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v54 >= v48 + v53)
      {
        v55 = v54 - v48;
        v56 = 17;
        if (v55 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_77;
        v53 = v55 + 8;
        if (v55 + 8 > v52)
          goto LABEL_77;
        *(_QWORD *)(v48 + v55) = v22;
      }
      if (!v52)
      {
        v56 = 17;
        goto LABEL_77;
      }
      v57 = *(_QWORD *)(v21 + 64);
      v58 = (*(_QWORD *)(v21 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v59 = *(_QWORD *)(v21 + 56);
      if (v58 + 16 >= v59)
        v58 = 0;
      if (v53 <= 0x10)
        v53 = 16;
      v60 = v58 + v53;
      if (v59 <= v60)
        v60 = 0;
      *(_QWORD *)(v21 + 72) = v60;
      v61 = (unint64_t *)(*(_QWORD *)(v57 + 16) + 128);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v60, v61));
      v63 = *(_DWORD *)(v21 + 108);
      if (v62 == 0x80000000 || v63 != 0)
      {
        v65 = v63 + 1;
        *(_DWORD *)(v21 + 108) = v65;
        if (v65 >= *(_DWORD *)(v21 + 104))
        {
          if (*(_BYTE *)(v21 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v21 + 84));
          *(_DWORD *)(v21 + 108) = 0;
        }
      }
      *(_QWORD *)(v21 + 48) = v22;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v21 + 56, &v75, v24);
    if (!v77)
    {
      LOBYTE(v67) = 15;
LABEL_28:
      v69 = 1;
      goto LABEL_39;
    }
    v26 = (v75 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v27 = v26 - v75;
    if (v26 < v75 || ((v28 = v27 + 2, v27 <= 0xFFFFFFFFFFFFFFFDLL) ? (v29 = v28 > v76) : (v29 = 1), v29))
      v28 = 0;
    else
      *(_WORD *)(v75 + v27) = 2821;
    v30 = *(_QWORD *)(v21 + 64);
    v31 = (*(_QWORD *)(v21 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = *(_QWORD *)(v21 + 56);
    if (v31 + 16 >= v32)
      v31 = 0;
    if (v28 <= 0x10)
      v28 = 16;
    v33 = v31 + v28;
    if (v32 <= v33)
      v33 = 0;
    *(_QWORD *)(v21 + 72) = v33;
    v34 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
    do
      __ldaxr(v34);
    while (__stlxr(v33, v34));
    *(_DWORD *)(v21 + 108) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v74, (uint64_t **)(v21 + 8));
    v35 = v74;
    v81 = 0;
    IPC::Connection::createSyncMessageEncoder(3548, v22, &v81, (uint64_t *)&v80);
    v36 = v80;
    IPC::ArgumentCoder<WebKit::SharedVideoFrame,void>::encode(v80, (uint64_t)v70);
    *(_DWORD *)IPC::Encoder::grow(v36, 4uLL, 4) = a3;
    *(_DWORD *)IPC::Encoder::grow(v36, 4uLL, 4) = a4;
    *(_DWORD *)IPC::Encoder::grow(v36, 4uLL, 4) = a5;
    *(_DWORD *)IPC::Encoder::grow(v36, 4uLL, 4) = a6;
    *(_DWORD *)IPC::Encoder::grow(v36, 4uLL, 4) = a7;
    *(_DWORD *)IPC::Encoder::grow(v36, 4uLL, 4) = a8;
    *IPC::Encoder::grow(v36, 1uLL, 1) = a9;
    *IPC::Encoder::grow(v36, 1uLL, 1) = a10;
    IPC::Connection::sendSyncMessage((uint64_t)v35, v81, (uint64_t *)&v80, 0, (uint64_t)&v78, v24);
    v37 = v79;
    if (v79)
    {
      if (v79 == 1)
      {
        LOBYTE(v67) = (_BYTE)v78;
LABEL_34:
        v69 = v37;
        v41 = v37;
        goto LABEL_35;
      }
    }
    else
    {
      v39 = IPC::Decoder::decode<std::tuple<BOOL>>(v78);
      if (v39 < 0x100u)
      {
        LOBYTE(v67) = 13;
        v37 = 1;
        v69 = 1;
        v41 = v79;
        if (v79 == -1)
        {
LABEL_36:
          v43 = v80;
          v80 = 0;
          if (v43)
          {
            IPC::Encoder::~Encoder(v43, v40);
            WTF::fastFree(v44, v45);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v74);
          if (!v37)
          {
            v46 = 0;
            v38 = v68 != 0;
LABEL_41:
            ((void (*)(unint64_t *, uint64_t **))off_1E34E3030[v46])(&v75, &v67);
            if (!v73)
              return v38;
            goto LABEL_42;
          }
LABEL_39:
          WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
          (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
          v38 = 0;
          v46 = 1;
          goto LABEL_41;
        }
LABEL_35:
        ((void (*)(char *, uint64_t **))off_1E34E3480[v41])(v82, &v78);
        goto LABEL_36;
      }
      if (!v79)
      {
        v42 = v78;
        v78 = 0;
        v67 = v42;
        v68 = v39;
        goto LABEL_34;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_76;
  }
  v38 = 0;
LABEL_42:
  if (v72 != -1)
    ((void (*)(unint64_t *, uint64_t *))off_1E34E3040[v72])(&v75, &v71);
  return v38;
}

BOOL `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::MediaPlayer *a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTextureFromMedia((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

BOOL `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebKit::RemoteGraphicsContextGLProxy *this, WebCore::VideoFrame *a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, char a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage@<X0>(uint64_t this@<X0>, WebCore::VideoFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  if (!*(_QWORD *)(this + 96))
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  v17 = 0;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v5 = off_1E34E36B8;
  v5[1] = &v17;
  v5[2] = v4;
  v5[3] = a2;
  v16 = v5;
  WTF::callOnMainRunLoopAndWait();
  if (v16)
    (*(void (**)(_QWORD *))(*v16 + 8))(v16);
  this = WebCore::BitmapImage::create();
  v7 = v17;
  v17 = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_10;
    }
    this = MEMORY[0x19AEABB3C](v8);
LABEL_10:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v15 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v15 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return this;
LABEL_18:
        if (v12)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          return WTF::fastFree((WTF *)v8, v6);
        return this;
      }
    }
    else
    {
      __clrex();
    }
    this = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return this;
    goto LABEL_18;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, WebCore::VideoFrame *a2@<X1>, _QWORD *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage((uint64_t)this - 16, a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getErrors(WebKit::RemoteGraphicsContextGLProxy *this)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _BOOL8 v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (**v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  unsigned __int16 v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  unsigned int v50;
  unsigned __int16 v51;
  void *v52;
  char *v53;
  IPC::Encoder *v54;
  WTF *v55;
  void *v56;
  unsigned int v57;
  _QWORD *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v66;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  unsigned int v76;
  char v77;
  uint64_t *v78;
  char *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  _QWORD *v86;
  int v87;
  int v88;
  _QWORD *v89;
  unsigned int v90;
  unsigned int v91;
  IPC::Decoder *v92;
  char v93;

  v1 = *((_QWORD *)this + 12);
  if (!v1)
    return 0;
  v3 = *((_QWORD *)this + 9);
  v4 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v5 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(this);
    v5 = v4 + v6;
  }
  if (*(_QWORD *)(v1 + 48) == v3)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 56, &v79, v5);
  if (!(_BYTE)v81)
  {
LABEL_147:
    v77 = 15;
    goto LABEL_145;
  }
  v61 = v79;
  v60 = v80;
  v62 = (unint64_t)(v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v62 - (_QWORD)v79;
  if (v62 >= (unint64_t)v79)
  {
    v64 = v63 + 2;
    if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v80)
    {
      *(_WORD *)&v79[v63] = 2822;
      goto LABEL_115;
    }
    v60 = 0;
  }
  v64 = 0;
LABEL_115:
  v66 = (char *)((unint64_t)&v61[v64 + 7] & 0xFFFFFFFFFFFFFFF8);
  if (v66 >= &v61[v64])
  {
    v64 = v66 - v61 + 8;
    if ((unint64_t)(v66 - v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60)
      goto LABEL_144;
    *(_QWORD *)v66 = v3;
  }
  if (!v60)
  {
LABEL_144:
    v77 = 17;
LABEL_145:
    LOBYTE(v89) = v77;
    v91 = 1;
    goto LABEL_93;
  }
  v68 = *(_QWORD *)(v1 + 64);
  v69 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = *(_QWORD *)(v1 + 56);
  if (v69 + 16 >= v70)
    v69 = 0;
  if (v64 <= 0x10)
    v64 = 16;
  v71 = v69 + v64;
  if (v70 <= v71)
    v71 = 0;
  *(_QWORD *)(v1 + 72) = v71;
  v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v71, v72));
  v74 = *(_DWORD *)(v1 + 108);
  if (v73 == 0x80000000 || v74 != 0)
  {
    v76 = v74 + 1;
    *(_DWORD *)(v1 + 108) = v76;
    if (v76 >= *(_DWORD *)(v1 + 104))
    {
      if (*(_BYTE *)(v1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v1 + 84));
      *(_DWORD *)(v1 + 108) = 0;
    }
  }
  *(_QWORD *)(v1 + 48) = v3;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v1 + 56, &v83, v5);
  if (!v85)
  {
    LOBYTE(v89) = 15;
    v91 = 1;
    goto LABEL_92;
  }
  v7 = v83;
  v8 = v84;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v92, (uint64_t **)(v1 + 8));
  v9 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v92, v9))
  {
    LOBYTE(v89) = 11;
    v9 = 1;
    v91 = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v89);
    v82 = 1;
    v29 = v91;
    if (v91 == -1)
      goto LABEL_62;
    v30 = off_1E34E3060;
    goto LABEL_61;
  }
  v10 = (v7 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v7;
  if (v10 < v7)
  {
    v13 = 0;
    v12 = v8;
  }
  else
  {
    v12 = 0;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_141;
    v13 = 0;
    if (v11 + 2 <= v8)
    {
      *(_WORD *)(v7 + v11) = 3561;
      v12 = v8;
      v13 = v11 + 2;
    }
  }
  while (1)
  {
    v14 = (_QWORD *)((v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v14 >= v7 + v13)
    {
      v15 = (char *)v14 - v7;
      if ((unint64_t)v14 - v7 > 0xFFFFFFFFFFFFFFF7
        || (v13 = (unint64_t)(v15 + 8), (unint64_t)(v15 + 8) > v12))
      {
LABEL_43:
        LOBYTE(v89) = 0;
        LOBYTE(v91) = 0;
        goto LABEL_50;
      }
      *v14 = v9;
    }
    if (!v12)
      goto LABEL_43;
    v16 = *(_QWORD *)(v1 + 64);
    v17 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v18 = *(_QWORD *)(v1 + 56);
    if (v17 + 16 >= v18)
      v17 = 0;
    if (v13 <= 0x10)
      v13 = 16;
    v19 = v17 + v13;
    if (v18 <= v19)
      v20 = 0;
    else
      v20 = v19;
    *(_QWORD *)(v1 + 72) = v20;
    v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v20, v21));
    if (v22 == 0x80000000 || *(_DWORD *)(v1 + 108))
    {
      if (*(_BYTE *)(v1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v1 + 84));
      *(_DWORD *)(v1 + 108) = 0;
    }
    v7 = v1 + 88;
    while (1)
    {
      v23 = *(unint64_t **)(*(_QWORD *)(v1 + 64) + 16);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(0x80000000uLL, v23));
      v25 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 16) + 128));
      if (!(v24 | v25 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*(_BYTE *)(v1 + 96))
      {
        v26 = IPC::Semaphore::waitFor((semaphore_t *)(v1 + 88), v5);
        if (v26)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v26);
          if (v27 < v5)
            continue;
        }
      }
      LOBYTE(v89) = 16;
      v90 = 1;
LABEL_49:
      LOBYTE(v91) = 1;
      goto LABEL_50;
    }
    atomic_store(0, *(unint64_t **)(*(_QWORD *)(v1 + 64) + 16));
    *(_QWORD *)(v1 + 72) = 0;
    v31 = *(_QWORD *)(v1 + 64);
    v12 = *(_QWORD *)(v31 + 8);
    if (v12 <= 0xFF)
      goto LABEL_140;
    v32 = *(_QWORD *)(v1 + 56);
    v33 = *(_QWORD *)(v31 + 16);
    v12 -= 256;
    if (v32)
    {
      v7 = v32 - 1;
      if (v12 < v32 - 1)
        goto LABEL_140;
    }
    else
    {
      v7 = v12;
    }
    v34 = v33 + 256;
    v35 = WTF::fastMalloc((WTF *)0x48);
    v36 = IPC::Decoder::Decoder(v35, v34, v7, *(_QWORD *)(v1 + 48));
    if (*(_WORD *)(v36 + 50) != 2821)
    {
      v89 = (_QWORD *)v36;
      v90 = 0;
      goto LABEL_49;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v36);
    WTF::fastFree(v37, v38);
    IPC::Connection::waitForSyncReply((uint64_t)v92, v9, 0xDE9u, (uint64_t)&v86, v5);
    LOBYTE(v89) = 0;
    v90 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v89, (uint64_t)&v86);
    LOBYTE(v91) = 1;
    if (v87 != -1)
      ((void (*)(uint64_t **, _QWORD **))off_1E34E3480[v87])(&v78, &v86);
LABEL_50:
    IPC::Connection::popPendingSyncRequestID(v92);
    if ((_BYTE)v91)
    {
      if (v90 == 1)
      {
        v40 = (char)v89;
        goto LABEL_57;
      }
      if (v90)
        goto LABEL_146;
      v39 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<GCGLErrorCode>>>(v89);
      if (v39 < 0x100u)
      {
        v40 = 13;
LABEL_57:
        LOBYTE(v79) = v40;
        v81 = 1;
        v82 = 1;
        goto LABEL_58;
      }
      if (!(_BYTE)v91)
        goto LABEL_140;
      if (v90)
        goto LABEL_146;
      v59 = v89;
      v89 = 0;
      v86 = v59;
      LOBYTE(v87) = v39;
      v88 = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v86);
      v82 = 1;
      if (v88 != -1)
        ((void (*)(uint64_t **, _QWORD **))off_1E34E3060[v88])(&v78, &v86);
    }
    else
    {
      LOBYTE(v79) = 0;
      v82 = 0;
    }
LABEL_58:
    if ((_BYTE)v91)
    {
      v29 = v90;
      if (v90 != -1)
      {
        v30 = off_1E34E3480;
LABEL_61:
        ((void (*)(_QWORD **, _QWORD **))v30[v29])(&v86, &v89);
      }
    }
LABEL_62:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v92);
    if (v82)
    {
      LOBYTE(v89) = 0;
      v91 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v89, (uint64_t)&v79);
      if (v82 && v81 != -1)
        ((void (*)(_QWORD **, char **))off_1E34E3060[v81])(&v86, &v79);
      goto LABEL_92;
    }
    if (v85)
      break;
LABEL_140:
    __break(1u);
LABEL_141:
    v13 = v12;
  }
  v41 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = v41 - v83;
  if (v41 < v83)
  {
    v43 = 0;
  }
  else
  {
    v43 = 0;
    if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v84)
    {
      *(_WORD *)(v83 + v42) = 2821;
      v43 = v42 + 2;
    }
  }
  v44 = *(_QWORD *)(v1 + 64);
  v45 = (*(_QWORD *)(v1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v46 = *(_QWORD *)(v1 + 56);
  if (v45 + 16 >= v46)
    v45 = 0;
  if (v43 <= 0x10)
    v43 = 16;
  v47 = v45 + v43;
  if (v46 <= v47)
    v47 = 0;
  *(_QWORD *)(v1 + 72) = v47;
  v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
  do
    __ldaxr(v48);
  while (__stlxr(v47, v48));
  *(_DWORD *)(v1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(v1 + 8));
  v49 = v78;
  v86 = 0;
  IPC::Connection::createSyncMessageEncoder(3561, v3, (uint64_t *)&v86, (uint64_t *)&v92);
  IPC::Connection::sendSyncMessage((uint64_t)v49, (uint64_t)v86, (uint64_t *)&v92, 0, (uint64_t)&v79, v5);
  v50 = v80;
  if ((_DWORD)v80)
  {
    if ((_DWORD)v80 == 1)
    {
      LOBYTE(v89) = (_BYTE)v79;
      goto LABEL_87;
    }
LABEL_146:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_147;
  }
  v51 = IPC::Decoder::decode<std::tuple<WTF::OptionSet<GCGLErrorCode>>>(v79);
  if (v51 >= 0x100u)
  {
    if ((_DWORD)v80)
      goto LABEL_146;
    v53 = v79;
    v79 = 0;
    v89 = v53;
    LOBYTE(v90) = v51;
LABEL_87:
    v91 = v50;
  }
  else
  {
    LOBYTE(v89) = 13;
    v91 = 1;
    v50 = v80;
    if ((_DWORD)v80 == -1)
      goto LABEL_89;
  }
  ((void (*)(char *, char **))off_1E34E3480[v50])(&v93, &v79);
LABEL_89:
  v54 = v92;
  v92 = 0;
  if (v54)
  {
    IPC::Encoder::~Encoder(v54, v52);
    WTF::fastFree(v55, v56);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
LABEL_92:
  v57 = v91;
  if (!v91)
  {
    v28 = v90;
LABEL_99:
    ((void (*)(char **, _QWORD **))off_1E34E3060[v57])(&v79, &v89);
    return v28;
  }
LABEL_93:
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v57 = v91;
  if (v91)
    v28 = 0;
  else
    v28 = v90;
  if (v91 != -1)
    goto LABEL_99;
  return v28;
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getErrors(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::getErrors((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::simulateEventForTesting(WebKit::RemoteGraphicsContextGLProxy *result, char a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  char v3;

  if (*((_QWORD *)result + 12))
  {
    v2 = result;
    v3 = a2;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SimulateEventForTesting>(result, &v3);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SimulateEventForTesting>(WTF::ApproximateTime *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SimulateEventForTesting,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::simulateEventForTesting(uint64_t a1, char a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::simulateEventForTesting((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2);
}

uint64_t *WebKit::RemoteGraphicsContextGLProxy::getBufferSubData(uint64_t *result, int a2, uint64_t a3, char *a4, unint64_t a5)
{
  BOOL v5;
  unint64_t v6;
  uint64_t *v7;
  WebCore::SharedMemory *v8;
  WTF::ApproximateTime *Handle;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t *v25;
  IPC::Encoder *v26;
  uint64_t v27;
  unsigned __int16 v28;
  void *v29;
  uint64_t v30;
  IPC::Encoder *v31;
  WTF *v32;
  void *v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v52;
  char v53;
  size_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  _BOOL8 v88;
  double v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  IPC::Decoder *v98;
  WTF *v99;
  void *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t *v112;
  IPC::Encoder *v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  IPC::Encoder *v117;
  WTF *v118;
  void *v119;
  char v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v127;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  char v137;
  unsigned int v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v145;
  __int128 __src;
  int v147;
  char v148;
  uint64_t *v149;
  __int128 v150;
  char v151;
  int v152;
  char v153;
  unint64_t v154;
  unint64_t v155;
  char v156;
  _BYTE v157[24];
  int v158;
  IPC::Decoder *v159;
  _BYTE v160[15];
  _BYTE v161[15];
  char v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (result[12])
    v5 = a5 == 0;
  else
    v5 = 1;
  if (v5)
    return result;
  v6 = a5;
  v7 = result;
  if (a5 <= 0x10000)
    goto LABEL_100;
  v8 = (WebCore::SharedMemory *)(a5 >= 0x6400000 ? 104857600 : a5);
  result = (uint64_t *)WebCore::SharedMemory::allocate(v8);
  if (!v149)
    goto LABEL_100;
  while (1)
  {
    if (!v6)
    {
LABEL_95:
      v53 = 1;
      goto LABEL_97;
    }
    Handle = (WTF::ApproximateTime *)WebCore::SharedMemory::createHandle();
    if (!v157[16])
      break;
    if (v6 >= 0x6400000)
      v10 = 104857600;
    else
      v10 = v6;
    v11 = v7[9];
    v12 = v7[12];
    v13 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v14 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(Handle);
      v14 = v13 + v15;
    }
    if (*(_QWORD *)(v12 + 48) != v11)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 56, &v150, v14);
      if (!v151)
      {
        v43 = 15;
        goto LABEL_92;
      }
      v36 = v150;
      v37 = (v150 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - v150;
      if (v37 < (unint64_t)v150)
      {
        v40 = 0;
        v39 = *((_QWORD *)&v150 + 1);
      }
      else
      {
        v39 = 0;
        if (v38 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v38 + 2 <= *((_QWORD *)&v150 + 1))
          {
            *(_WORD *)(v150 + v38) = 2822;
            v39 = *((_QWORD *)&v36 + 1);
            v40 = v38 + 2;
          }
        }
      }
      v41 = (v36 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v41 >= (unint64_t)v36 + v40)
      {
        v42 = v41 - v36;
        v43 = 17;
        if (v42 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_92;
        v40 = v42 + 8;
        if (v42 + 8 > v39)
          goto LABEL_92;
        *(_QWORD *)(v36 + v42) = v11;
      }
      if (!v39)
      {
        v43 = 17;
LABEL_92:
        LOBYTE(v145) = v43;
LABEL_39:
        DWORD2(__src) = 1;
LABEL_50:
        WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)v7);
        (*(void (**)(uint64_t *))(v7[2] + 2312))(v7 + 2);
        v34 = 0;
        goto LABEL_51;
      }
      v44 = *(_QWORD *)(v12 + 64);
      v45 = (*(_QWORD *)(v12 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(v12 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v40 <= 0x10)
        v40 = 16;
      v47 = v45 + v40;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(v12 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(v12 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v52 = v50 + 1;
        *(_DWORD *)(v12 + 108) = v52;
        if (v52 >= *(_DWORD *)(v12 + 104))
        {
          if (*(_BYTE *)(v12 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(v12 + 84));
          *(_DWORD *)(v12 + 108) = 0;
        }
      }
      *(_QWORD *)(v12 + 48) = v11;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v12 + 56, &v150, v14);
    if (!v151)
    {
      LOBYTE(v145) = 15;
      goto LABEL_39;
    }
    v16 = (v150 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v17 = v16 - v150;
    if (v16 < (unint64_t)v150
      || ((v18 = v17 + 2, v17 <= 0xFFFFFFFFFFFFFFFDLL) ? (v19 = v18 > *((_QWORD *)&v150 + 1)) : (v19 = 1), v19))
    {
      v18 = 0;
    }
    else
    {
      *(_WORD *)(v150 + v17) = 2821;
    }
    v20 = *(_QWORD *)(v12 + 64);
    v21 = (*(_QWORD *)(v12 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v22 = *(_QWORD *)(v12 + 56);
    if (v21 + 16 >= v22)
      v21 = 0;
    if (v18 <= 0x10)
      v18 = 16;
    v23 = v21 + v18;
    if (v22 <= v23)
      v23 = 0;
    *(_QWORD *)(v12 + 72) = v23;
    v24 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
    do
      __ldaxr(v24);
    while (__stlxr(v23, v24));
    *(_DWORD *)(v12 + 108) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v159, (uint64_t **)(v12 + 8));
    v25 = (uint64_t *)v159;
    v154 = 0;
    IPC::Connection::createSyncMessageEncoder(3560, v11, (uint64_t *)&v154, (uint64_t *)v160);
    v26 = *(IPC::Encoder **)v160;
    *(_DWORD *)IPC::Encoder::grow(*(IPC::Encoder **)v160, 4uLL, 4) = a2;
    *(_QWORD *)IPC::Encoder::grow(v26, 8uLL, 8) = a3;
    *(_QWORD *)IPC::Encoder::grow(v26, 8uLL, 8) = v10;
    IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v26, (unint64_t)v157);
    IPC::Connection::sendSyncMessage((uint64_t)v25, v154, (uint64_t *)v160, 0, (uint64_t)v161, v14);
    v27 = *(unsigned int *)&v161[8];
    if (*(_DWORD *)&v161[8])
    {
      if (*(unsigned int *)&v161[8] != 1)
        goto LABEL_260;
      LOBYTE(v145) = v161[0];
LABEL_45:
      DWORD2(__src) = v27;
LABEL_46:
      ((void (*)(char *, _BYTE *))off_1E34E3480[v27])(&v148, v161);
      goto LABEL_47;
    }
    v28 = IPC::Decoder::decode<std::tuple<BOOL>>(*(uint64_t **)v161);
    if (v28 >= 0x100u)
    {
      if (*(_DWORD *)&v161[8])
LABEL_260:
        std::__throw_bad_variant_access[abi:sn180100]();
      v30 = *(_QWORD *)v161;
      *(_QWORD *)v161 = 0;
      v145 = v30;
      LOBYTE(__src) = v28;
      goto LABEL_45;
    }
    LOBYTE(v145) = 13;
    DWORD2(__src) = 1;
    v27 = *(unsigned int *)&v161[8];
    if (*(_DWORD *)&v161[8] != -1)
      goto LABEL_46;
LABEL_47:
    v31 = *(IPC::Encoder **)v160;
    *(_QWORD *)v160 = 0;
    if (v31)
    {
      IPC::Encoder::~Encoder(v31, v29);
      WTF::fastFree(v32, v33);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v159);
    if (DWORD2(__src))
      goto LABEL_50;
    if (!(_BYTE)__src)
    {
      v34 = 0;
      v35 = 0;
LABEL_52:
      ((void (*)(__int128 *, uint64_t *))off_1E34E3070[v35])(&v150, &v145);
      goto LABEL_53;
    }
    if (v149[1] < v10)
    {
LABEL_258:
      __break(1u);
LABEL_259:
      __break(0xC471u);
      JUMPOUT(0x1974C2CB0);
    }
    memmove(a4, (const void *)v149[2], v10);
    v6 -= v10;
    a4 += v10;
    a3 += v10;
    v34 = 1;
LABEL_51:
    v35 = DWORD2(__src);
    if (DWORD2(__src) != -1)
      goto LABEL_52;
LABEL_53:
    if (v157[16])
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v157);
    if ((v34 & 1) == 0)
      goto LABEL_95;
  }
  v53 = 0;
LABEL_97:
  result = v149;
  v149 = 0;
  if (result)
    result = (uint64_t *)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)result);
  if ((v53 & 1) == 0)
  {
LABEL_100:
    while (2)
    {
      if (!v6)
        return result;
      if (v6 >= 0x10000)
        v54 = 0x10000;
      else
        v54 = v6;
      v55 = v7[9];
      v56 = v7[12];
      v57 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
      v58 = INFINITY;
      if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
      {
        WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
        v58 = v57 + v59;
      }
      if (*(_QWORD *)(v56 + 48) == v55)
      {
LABEL_107:
        IPC::StreamClientConnectionBuffer::tryAcquire(v56 + 56, &v154, v58);
        if (v156)
        {
          v60 = v154;
          v61 = v155;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v159, (uint64_t **)(v56 + 8));
          v62 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v159, v62))
          {
            v63 = (v60 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v64 = v63 - v60;
            if (v63 < v60)
            {
              v66 = 0;
              v65 = v61;
            }
            else
            {
              v65 = 0;
              if (v64 > 0xFFFFFFFFFFFFFFFDLL)
              {
                v66 = 0;
              }
              else
              {
                v66 = 0;
                if (v64 + 2 <= v61)
                {
                  *(_WORD *)(v60 + v64) = 3559;
                  v65 = v61;
                  v66 = v64 + 2;
                }
              }
            }
            v67 = (v60 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
            v68 = v67 >= v60 + v66;
            v69 = v67 - (v60 + v66);
            if (v68)
            {
              v139 = 0;
              v70 = v69 + v66;
              if (v70 <= 0xFFFFFFFFFFFFFFF7 && v70 + 8 <= v65)
              {
                *(_QWORD *)(v60 + v70) = v62;
                v139 = v65;
                v66 = v70 + 8;
              }
            }
            else
            {
              v139 = v65;
            }
            v71 = (v60 + v66 + 3) & 0xFFFFFFFFFFFFFFFCLL;
            v68 = v71 >= v60 + v66;
            v72 = v71 - (v60 + v66);
            if (v68)
            {
              v141 = 0;
              v73 = v72 + v66;
              if (v73 <= 0xFFFFFFFFFFFFFFFBLL && v73 + 4 <= v139)
              {
                *(_DWORD *)(v60 + v73) = a2;
                v141 = v139;
                v66 = v73 + 4;
              }
            }
            else
            {
              v141 = v139;
            }
            v74 = (v60 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
            v68 = v74 >= v60 + v66;
            v75 = v74 - (v60 + v66);
            if (v68)
            {
              v140 = 0;
              v76 = v75 + v66;
              if (v76 <= 0xFFFFFFFFFFFFFFF7 && v76 + 8 <= v141)
              {
                *(_QWORD *)(v60 + v76) = a3;
                v140 = v141;
                v66 = v76 + 8;
              }
            }
            else
            {
              v140 = v141;
            }
            v77 = (_QWORD *)((v60 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v77 < v60 + v66)
            {
LABEL_132:
              if (!v140)
                goto LABEL_156;
              v79 = *(_QWORD *)(v56 + 64);
              v80 = (*(_QWORD *)(v56 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v81 = *(_QWORD *)(v56 + 56);
              if (v80 + 16 >= v81)
                v80 = 0;
              if (v66 <= 0x10)
                v66 = 16;
              v82 = v80 + v66;
              if (v81 <= v82)
                v82 = 0;
              *(_QWORD *)(v56 + 72) = v82;
              v83 = (unint64_t *)(*(_QWORD *)(v79 + 16) + 128);
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v82, v83));
              if (v84 == 0x80000000 || *(_DWORD *)(v56 + 108))
              {
                if (*(_BYTE *)(v56 + 96))
                  MEMORY[0x19AEBA1A0](*(unsigned int *)(v56 + 84));
                *(_DWORD *)(v56 + 108) = 0;
              }
              while (1)
              {
                v85 = *(unint64_t **)(*(_QWORD *)(v56 + 64) + 16);
                do
                  v86 = __ldaxr(v85);
                while (__stlxr(0x80000000uLL, v85));
                v87 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v56 + 64) + 16) + 128));
                if (!(v86 | v87 & 0xFFFFFFFF7FFFFFFFLL))
                  break;
                if (*(_BYTE *)(v56 + 96))
                {
                  v88 = IPC::Semaphore::waitFor((semaphore_t *)(v56 + 88), v58);
                  if (v88)
                  {
                    WTF::ApproximateTime::now((WTF::ApproximateTime *)v88);
                    if (v89 < v58)
                      continue;
                  }
                }
                v161[0] = 16;
                *(_DWORD *)&v161[8] = 1;
                goto LABEL_162;
              }
              atomic_store(0, *(unint64_t **)(*(_QWORD *)(v56 + 64) + 16));
              *(_QWORD *)(v56 + 72) = 0;
              v90 = *(_QWORD *)(v56 + 64);
              v91 = *(_QWORD *)(v90 + 8);
              if (v91 <= 0xFF)
                goto LABEL_258;
              v92 = *(_QWORD *)(v56 + 56);
              v93 = *(_QWORD *)(v90 + 16);
              v94 = v91 - 256;
              if (v92)
              {
                v95 = v92 - 1;
                if (v94 < v92 - 1)
                  goto LABEL_258;
              }
              else
              {
                v95 = v94;
              }
              v96 = v93 + 256;
              v97 = WTF::fastMalloc((WTF *)0x48);
              v98 = (IPC::Decoder *)IPC::Decoder::Decoder(v97, v96, v95, *(_QWORD *)(v56 + 48));
              if (*((_WORD *)v98 + 25) == 2821)
              {
                IPC::Decoder::~Decoder(v98);
                WTF::fastFree(v99, v100);
                IPC::Connection::waitForSyncReply((uint64_t)v159, v62, 0xDE7u, (uint64_t)v157, v58);
                v161[0] = 0;
                *(_DWORD *)&v161[8] = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v161, (uint64_t)v157);
                v162 = 1;
                if (*(_DWORD *)&v157[8] != -1)
                  ((void (*)(_BYTE *, _BYTE *))off_1E34E3480[*(unsigned int *)&v157[8]])(v160, v157);
              }
              else
              {
                *(_QWORD *)v161 = v98;
                *(_DWORD *)&v161[8] = 0;
LABEL_162:
                v162 = 1;
              }
            }
            else
            {
              v78 = (char *)v77 - v60;
              if ((unint64_t)v77 - v60 <= 0xFFFFFFFFFFFFFFF7)
              {
                v66 = (unint64_t)(v78 + 8);
                if ((unint64_t)(v78 + 8) <= v140)
                {
                  *v77 = v54;
                  goto LABEL_132;
                }
              }
LABEL_156:
              v161[0] = 0;
              v162 = 0;
            }
            IPC::Connection::popPendingSyncRequestID(v159);
            if (v162)
            {
              if (*(_DWORD *)&v161[8] == 1)
              {
                LOBYTE(v150) = v161[0];
                v152 = 1;
                v153 = 1;
                v103 = 1;
                goto LABEL_179;
              }
              if (*(_DWORD *)&v161[8])
                goto LABEL_260;
              IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(*(uint64_t **)v161, (uint64_t)v157);
              if (v157[16])
              {
                v101 = v157[0];
                *(_QWORD *)v160 = *(_QWORD *)&v157[1];
                *(_QWORD *)&v160[7] = *(_QWORD *)&v157[8];
                if (!v162)
                  goto LABEL_258;
                if (*(_DWORD *)&v161[8])
                  goto LABEL_260;
                v102 = *(_QWORD *)v161;
                *(_QWORD *)v161 = 0;
                *(_QWORD *)&v157[9] = *(_QWORD *)v160;
                *(_QWORD *)&v157[16] = *(_QWORD *)&v160[7];
                *(_QWORD *)v157 = v102;
                v157[8] = v101;
                v158 = 0;
                LOBYTE(v150) = 0;
                v152 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v150, (uint64_t)v157);
                v153 = 1;
                if (v158 != -1)
                  ((void (*)(uint64_t **, _BYTE *))off_1E34E3080[v158])(&v149, v157);
              }
              else
              {
                LOBYTE(v150) = 13;
                v152 = 1;
                v153 = 1;
              }
              if (v162)
              {
                v103 = *(unsigned int *)&v161[8];
                if (*(unsigned int *)&v161[8] != 0xFFFFFFFFLL)
LABEL_179:
                  ((void (*)(_BYTE *, _BYTE *))off_1E34E3480[v103])(v157, v161);
              }
            }
            else
            {
              LOBYTE(v150) = 0;
              v153 = 0;
            }
          }
          else
          {
            v157[0] = 11;
            v158 = 1;
            LOBYTE(v150) = 0;
            v152 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v150, (uint64_t)v157);
            v153 = 1;
            if (v158 != -1)
              ((void (*)(_BYTE *, _BYTE *))off_1E34E3080[v158])(v161, v157);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v159);
          if (v153)
          {
            LOBYTE(v145) = 0;
            v147 = -1;
            result = (uint64_t *)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v145, (uint64_t)&v150);
            if (v153 && v152 != -1)
              result = (uint64_t *)((uint64_t (*)(_BYTE *, __int128 *))off_1E34E3080[v152])(v157, &v150);
            goto LABEL_208;
          }
          if (!v156)
            goto LABEL_258;
          v104 = (v154 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v105 = v104 - v154;
          if (v104 < v154)
          {
            v106 = 0;
          }
          else
          {
            v106 = 0;
            if (v105 <= 0xFFFFFFFFFFFFFFFDLL && v105 + 2 <= v155)
            {
              *(_WORD *)(v154 + v105) = 2821;
              v106 = v105 + 2;
            }
          }
          v107 = *(_QWORD *)(v56 + 64);
          v108 = (*(_QWORD *)(v56 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v109 = *(_QWORD *)(v56 + 56);
          if (v108 + 16 >= v109)
            v108 = 0;
          if (v106 <= 0x10)
            v106 = 16;
          v110 = v108 + v106;
          if (v109 <= v110)
            v110 = 0;
          *(_QWORD *)(v56 + 72) = v110;
          v111 = (unint64_t *)(*(_QWORD *)(v107 + 16) + 128);
          do
            __ldaxr(v111);
          while (__stlxr(v110, v111));
          *(_DWORD *)(v56 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v149, (uint64_t **)(v56 + 8));
          v112 = v149;
          *(_QWORD *)v160 = 0;
          IPC::Connection::createSyncMessageEncoder(3559, v55, (uint64_t *)v160, (uint64_t *)&v159);
          v113 = v159;
          *(_DWORD *)IPC::Encoder::grow(v159, 4uLL, 4) = a2;
          *(_QWORD *)IPC::Encoder::grow(v113, 8uLL, 8) = a3;
          *(_QWORD *)IPC::Encoder::grow(v113, 8uLL, 8) = v54;
          IPC::Connection::sendSyncMessage((uint64_t)v112, *(uint64_t *)v160, (uint64_t *)&v159, 0, (uint64_t)v157, v58);
          if (*(_DWORD *)&v157[8])
          {
            if (*(_DWORD *)&v157[8] != 1)
              goto LABEL_260;
            LOBYTE(v145) = v157[0];
            v147 = 1;
            v114 = 1;
            goto LABEL_204;
          }
          IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>(*(uint64_t **)v157, (uint64_t)&v150);
          if (v151)
          {
            *(_QWORD *)v161 = *(_QWORD *)((char *)&v150 + 1);
            *(_QWORD *)&v161[7] = *((_QWORD *)&v150 + 1);
            if (*(_DWORD *)&v157[8])
              goto LABEL_260;
            v114 = 0;
            v116 = *(_QWORD *)v157;
            *(_QWORD *)v157 = 0;
            *(_QWORD *)((char *)&__src + 1) = *(_QWORD *)v161;
            *((_QWORD *)&__src + 1) = *(_QWORD *)&v161[7];
            v145 = v116;
            LOBYTE(__src) = v150;
            v147 = 0;
LABEL_204:
            ((void (*)(__int128 *, _BYTE *))off_1E34E3480[v114])(&v150, v157);
          }
          else
          {
            LOBYTE(v145) = 13;
            v147 = 1;
            v114 = *(unsigned int *)&v157[8];
            if (*(_DWORD *)&v157[8] != -1)
              goto LABEL_204;
          }
          v117 = v159;
          v159 = 0;
          if (v117)
          {
            IPC::Encoder::~Encoder(v117, v115);
            WTF::fastFree(v118, v119);
          }
          result = (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v149);
LABEL_208:
          if (!v147)
          {
            if (*((_QWORD *)&__src + 1))
            {
              if (v54 != *((_QWORD *)&__src + 1))
                goto LABEL_259;
              result = (uint64_t *)memmove(a4, (const void *)__src, v54);
              v6 -= v54;
              a4 += v54;
              a3 += v54;
              v120 = 1;
LABEL_244:
              if (v147 != -1)
                result = (uint64_t *)((uint64_t (*)(__int128 *, uint64_t *))off_1E34E3080[v147])(&v150, &v145);
              if ((v120 & 1) == 0)
                return result;
              continue;
            }
LABEL_243:
            v120 = 0;
            goto LABEL_244;
          }
LABEL_242:
          WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded((WebKit::RemoteGraphicsContextGLProxy *)v7);
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(v7[2] + 2312))(v7 + 2);
          goto LABEL_243;
        }
LABEL_240:
        v137 = 15;
LABEL_241:
        LOBYTE(v145) = v137;
        v147 = 1;
        goto LABEL_242;
      }
      break;
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v56 + 56, &v150, v58);
    if (!v151)
      goto LABEL_240;
    v121 = *((_QWORD *)&v150 + 1);
    v122 = v150;
    v123 = (v150 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v124 = v123 - v150;
    if (v123 >= (unint64_t)v150)
    {
      v125 = v124 + 2;
      if (v124 <= 0xFFFFFFFFFFFFFFFDLL && v125 <= *((_QWORD *)&v150 + 1))
      {
        *(_WORD *)(v150 + v124) = 2822;
        goto LABEL_219;
      }
      v121 = 0;
    }
    v125 = 0;
LABEL_219:
    v127 = (_QWORD *)((v122 + v125 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v127 < v122 + v125)
    {
LABEL_225:
      if (v121)
      {
        v129 = *(_QWORD *)(v56 + 64);
        v130 = (*(_QWORD *)(v56 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v131 = *(_QWORD *)(v56 + 56);
        if (v130 + 16 >= v131)
          v130 = 0;
        if (v125 <= 0x10)
          v125 = 16;
        v132 = v130 + v125;
        if (v131 <= v132)
          v132 = 0;
        *(_QWORD *)(v56 + 72) = v132;
        v133 = (unint64_t *)(*(_QWORD *)(v129 + 16) + 128);
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v132, v133));
        v135 = *(_DWORD *)(v56 + 108);
        if (v134 == 0x80000000 || v135 != 0)
        {
          v138 = v135 + 1;
          *(_DWORD *)(v56 + 108) = v138;
          if (v138 >= *(_DWORD *)(v56 + 104))
          {
            if (*(_BYTE *)(v56 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v56 + 84));
            *(_DWORD *)(v56 + 108) = 0;
          }
        }
        *(_QWORD *)(v56 + 48) = v55;
        goto LABEL_107;
      }
    }
    else
    {
      v125 = (unint64_t)v127 - v122 + 8;
      if ((unint64_t)v127 - v122 <= 0xFFFFFFFFFFFFFFF7 && v125 <= v121)
      {
        *v127 = v55;
        goto LABEL_225;
      }
    }
    v137 = 17;
    goto LABEL_241;
  }
  return result;
}

uint64_t *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getBufferSubData(uint64_t a1, int a2, uint64_t a3, char *a4, unint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getBufferSubData((uint64_t *)(a1 - 16), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::readPixels(uint64_t result, uint64_t a2, unint64_t a3, WebCore::GraphicsContextGL *this, int a5, uint64_t **a6, unint64_t a7, uint64_t a8, int a9, unsigned __int8 a10)
{
  double v10;
  int v14;
  uint64_t v15;
  uint64_t v16;
  WebKit::RemoteGraphicsContextGLProxy *v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unint64_t v28;
  BOOL v29;
  IPC::Encoder *v30;
  WTF::ApproximateTime *Handle;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  IPC::Encoder *v47;
  int v48;
  unint64_t *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  unsigned __int8 *v52;
  void *v53;
  IPC::Encoder *v54;
  WTF *v55;
  void *v56;
  double v57;
  double v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _DWORD *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  _BOOL8 v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  WTF *v92;
  void *v93;
  unint64_t *v94;
  int v95;
  int v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t *v105;
  uint64_t *v106;
  int v107;
  void *v108;
  unint64_t v109;
  IPC::Encoder *v110;
  WTF *v111;
  void *v112;
  int v113;
  unsigned int v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unint64_t v118;
  unsigned __int8 *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  int v130;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unint64_t v135;
  unsigned __int8 *v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  int v147;
  unsigned int v149;
  unsigned int v150;
  unint64_t v151;
  uint64_t v152;
  unsigned int v153;
  unsigned int v154;
  char v155;
  uint64_t **v156;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  uint64_t *v162;
  unsigned __int8 *v163[2];
  __int128 v164;
  char v165;
  int v166;
  char v167;
  unint64_t v168;
  unint64_t v169;
  char v170;
  __int128 v171;
  __int128 v172;
  char v173;
  unint64_t *v174;
  int v175;
  char v176;
  unint64_t v177;
  __int128 v178;
  __int128 v179;
  int v180;
  uint64_t *v181[2];

  v159 = a2;
  v160 = a3;
  if (*(_QWORD *)(result + 96))
  {
    v14 = (int)this;
    v15 = a3;
    v16 = a2;
    v17 = (WebKit::RemoteGraphicsContextGLProxy *)result;
    v18 = HIDWORD(a3);
    v19 = WebCore::GraphicsContextGL::computeBytesPerGroup(this);
    v20 = v19;
    if (a9 <= 0)
      v21 = v15;
    else
      v21 = a9;
    v22 = a8 + v19 * v21;
    if ((v16 & 0x80000000) != 0)
    {
      v23 = -(int)v16;
      v24 = v15 + v16;
      v15 = v24 & ~(v24 >> 31);
      LODWORD(v159) = 0;
      LODWORD(v160) = v24 & ~(v24 >> 31);
    }
    else
    {
      v23 = 0;
    }
    v25 = v22 - 1;
    if (v16 < 0)
    {
      v26 = -HIDWORD(v16);
      v27 = v18 + HIDWORD(v16);
      v18 = v27 & ~(v27 >> 31);
      HIDWORD(v159) = 0;
      HIDWORD(v160) = v27 & ~(v27 >> 31);
    }
    else
    {
      v26 = 0;
    }
    v154 = v25 & -(int)a8;
    if ((int)v15 >= 1 && (int)v18 >= 1 && v23 | v26)
    {
      v28 = v23 * v19 + v26 * v154;
      v29 = a7 >= v28;
      a7 -= v28;
      if (!v29)
        goto LABEL_243;
      a6 = (uint64_t **)((char *)a6 + v28);
    }
    LODWORD(v30) = a10;
    v153 = v15 * v19;
    result = (v18 * v15 * v19);
    if (result <= 0x10000)
      goto LABEL_59;
    WebCore::SharedMemory::allocate((WebCore::SharedMemory *)result);
    result = v158;
    if (!v158)
      goto LABEL_59;
    Handle = (WTF::ApproximateTime *)WebCore::SharedMemory::createHandle();
    LODWORD(a8) = v172;
    if (!(_BYTE)v172)
      goto LABEL_56;
    v156 = a6;
    v32 = *((_QWORD *)v17 + 9);
    v33 = *((_QWORD *)v17 + 12);
    v34 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v35 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(Handle);
      v35 = v34 + v36;
    }
    if (*(_QWORD *)(v33 + 48) == v32)
      goto LABEL_23;
    IPC::StreamClientConnectionBuffer::tryAcquire(v33 + 56, v163, v35);
    if ((_BYTE)v164)
    {
      v132 = v163[0];
      v133 = v163[1];
      v134 = (unsigned __int8 *)((unint64_t)(v163[0] + 1) & 0xFFFFFFFFFFFFFFFELL);
      v135 = v134 - v163[0];
      if (v134 < v163[0])
      {
        v137 = 0;
        v136 = v163[1];
      }
      else
      {
        v136 = 0;
        if (v135 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v137 = 0;
        }
        else
        {
          v137 = 0;
          if ((unsigned __int8 *)(v135 + 2) <= v163[1])
          {
            *(_WORD *)&v163[0][v135] = 2822;
            v136 = v133;
            v137 = v135 + 2;
          }
        }
      }
      v138 = (unint64_t)&v132[v137 + 7] & 0xFFFFFFFFFFFFFFF8;
      if (v138 >= (unint64_t)&v132[v137])
      {
        v139 = v138 - (_QWORD)v132;
        v140 = 17;
        if (v139 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_261;
        v137 = v139 + 8;
        if (v139 + 8 > (unint64_t)v136)
          goto LABEL_261;
        *(_QWORD *)&v132[v139] = v32;
      }
      if (v136)
      {
        v141 = (*(_QWORD *)(v33 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v142 = *(_QWORD *)(v33 + 56);
        if (v141 + 16 >= v142)
          v141 = 0;
        if (v137 <= 0x10)
          v137 = 16;
        v143 = v141 + v137;
        if (v142 <= v143)
          v144 = 0;
        else
          v144 = v143;
        *(_QWORD *)(v33 + 72) = v144;
        v145 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v33 + 64) + 16) + 128);
        do
          v146 = __ldaxr(v145);
        while (__stlxr(v144, v145));
        v147 = *(_DWORD *)(v33 + 108);
        if (v146 == 0x80000000 || v147 != 0)
        {
          v150 = v147 + 1;
          *(_DWORD *)(v33 + 108) = v150;
          if (v150 >= *(_DWORD *)(v33 + 104))
          {
            if (*(_BYTE *)(v33 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v33 + 84));
            *(_DWORD *)(v33 + 108) = 0;
          }
        }
        *(_QWORD *)(v33 + 48) = v32;
LABEL_23:
        IPC::StreamClientConnectionBuffer::tryAcquire(v33 + 56, &v177, v35);
        if (BYTE8(v178))
        {
          v37 = (v177 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v38 = v37 - v177;
          if (v37 < v177
            || ((v39 = v38 + 2, v38 <= 0xFFFFFFFFFFFFFFFDLL) ? (v40 = v39 > (unint64_t)v178) : (v40 = 1), v40))
          {
            v39 = 0;
          }
          else
          {
            *(_WORD *)(v177 + v38) = 2821;
          }
          v41 = *(_QWORD *)(v33 + 64);
          v42 = (*(_QWORD *)(v33 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v43 = *(_QWORD *)(v33 + 56);
          if (v42 + 16 >= v43)
            v42 = 0;
          if (v39 <= 0x10)
            v39 = 16;
          v44 = v42 + v39;
          if (v43 <= v44)
            v44 = 0;
          *(_QWORD *)(v33 + 72) = v44;
          v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
          do
            __ldaxr(v45);
          while (__stlxr(v44, v45));
          *(_DWORD *)(v33 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, (uint64_t **)(v33 + 8));
          v46 = v162;
          v168 = 0;
          IPC::Connection::createSyncMessageEncoder(3613, v32, (uint64_t *)&v168, (uint64_t *)v181);
          v47 = (IPC::Encoder *)v181[0];
          IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v181[0], &v159);
          *(_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4) = v14;
          *(_DWORD *)IPC::Encoder::grow(v47, 4uLL, 4) = a5;
          *IPC::Encoder::grow(v47, 1uLL, 1) = a10 != 0;
          IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(v47, (unint64_t)&v171);
          IPC::Connection::sendSyncMessage((uint64_t)v46, v168, (uint64_t *)v181, 0, (uint64_t)&v174, v35);
          v48 = v175;
          if (v175)
          {
            if (v175 != 1)
              goto LABEL_254;
            LOBYTE(v163[0]) = (_BYTE)v174;
          }
          else
          {
            v49 = v174;
            v50 = (unsigned __int8 *)IPC::Decoder::decode<std::optional<WebCore::IntSize>>(v174);
            if ((v51 & 0xFF00000000) == 0)
            {
              v53 = (void *)*v49;
              v151 = v49[1];
              *v49 = 0;
              v49[1] = 0;
              v152 = v49[3];
              if (v152)
                goto LABEL_255;
              goto LABEL_250;
            }
            if (v175)
              goto LABEL_254;
            v52 = (unsigned __int8 *)v174;
            v174 = 0;
            v163[0] = v52;
            v163[1] = v50;
            LODWORD(v164) = v51;
          }
          DWORD2(v164) = v48;
LABEL_47:
          ((void (*)(char *, unint64_t **))off_1E34E3480[v48])(&v161, &v174);
          while (1)
          {
            v54 = (IPC::Encoder *)v181[0];
            v181[0] = 0;
            if (v54)
            {
              IPC::Encoder::~Encoder(v54, v53);
              WTF::fastFree(v55, v56);
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v162);
            if (DWORD2(v164))
            {
LABEL_51:
              WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v17);
              (*(void (**)(_QWORD *))(*((_QWORD *)v17 + 2) + 2312))((_QWORD *)v17 + 2);
            }
            else if ((_BYTE)v164)
            {
              if (SLODWORD(v163[1]) >= 1)
              {
                v96 = HIDWORD(v163[1]) - 1;
                if (SHIDWORD(v163[1]) >= 1)
                {
                  v97 = v20 * LODWORD(v163[1]);
                  if (v20 * LODWORD(v163[1]))
                  {
                    if (*(_QWORD *)(v158 + 8) >= (unint64_t)(v97 + v96 * v153)
                      && a7 >= v97 + v96 * v154
                      && (HIDWORD(v163[1]) < 2 || v153 >= v97 && v154 >= v97))
                    {
                      WebCore::copyRows((WebCore *)v153, *(_QWORD *)(v158 + 16), (const unsigned __int8 *)v154, (uint64_t)a6, (unsigned __int8 *)HIDWORD(v163[1]));
                    }
                  }
                }
              }
            }
            if (DWORD2(v164) != -1)
              ((void (*)(unint64_t *, unsigned __int8 **))off_1E34E3090[DWORD2(v164)])(&v177, v163);
            if ((_BYTE)v172)
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v171);
LABEL_56:
            result = v158;
            v158 = 0;
            if (result)
              result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref((unsigned int *)result);
            if ((_DWORD)a8)
              return result;
LABEL_59:
            v155 = (_DWORD)v30 != 0;
            v16 = *((_QWORD *)v17 + 9);
            a8 = *((_QWORD *)v17 + 12);
            v57 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
            v10 = INFINITY;
            if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
              v10 = v57 + v58;
            }
            if (*(_QWORD *)(a8 + 48) != v16)
            {
              IPC::StreamClientConnectionBuffer::tryAcquire(a8 + 56, v163, v10);
              if (!(_BYTE)v164)
              {
                v123 = 15;
                goto LABEL_258;
              }
              v115 = v163[0];
              v116 = v163[1];
              v117 = (unsigned __int8 *)((unint64_t)(v163[0] + 1) & 0xFFFFFFFFFFFFFFFELL);
              v118 = v117 - v163[0];
              if (v117 < v163[0])
              {
                v120 = 0;
                v119 = v163[1];
              }
              else
              {
                v119 = 0;
                if (v118 > 0xFFFFFFFFFFFFFFFDLL)
                {
                  v120 = 0;
                }
                else
                {
                  v120 = 0;
                  if ((unsigned __int8 *)(v118 + 2) <= v163[1])
                  {
                    *(_WORD *)&v163[0][v118] = 2822;
                    v119 = v116;
                    v120 = v118 + 2;
                  }
                }
              }
              v121 = (unint64_t)&v115[v120 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (v121 >= (unint64_t)&v115[v120])
              {
                v122 = v121 - (_QWORD)v115;
                v123 = 17;
                if (v122 > 0xFFFFFFFFFFFFFFF7)
                  goto LABEL_258;
                v120 = v122 + 8;
                if (v122 + 8 > (unint64_t)v119)
                  goto LABEL_258;
                *(_QWORD *)&v115[v122] = v16;
              }
              if (!v119)
              {
                v123 = 17;
LABEL_258:
                LOBYTE(v177) = v123;
                v180 = 1;
LABEL_172:
                WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v17);
                result = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)v17 + 2) + 2312))((_QWORD *)v17 + 2);
LABEL_173:
                if (v180 != -1)
                  return ((uint64_t (*)(unsigned __int8 **, unint64_t *))off_1E34E30A0[v180])(v163, &v177);
                return result;
              }
              v124 = *(_QWORD *)(a8 + 64);
              v125 = (*(_QWORD *)(a8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v126 = *(_QWORD *)(a8 + 56);
              if (v125 + 16 >= v126)
                v125 = 0;
              if (v120 <= 0x10)
                v120 = 16;
              v127 = v125 + v120;
              if (v126 <= v127)
                v127 = 0;
              *(_QWORD *)(a8 + 72) = v127;
              v128 = (unint64_t *)(*(_QWORD *)(v124 + 16) + 128);
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v127, v128));
              v130 = *(_DWORD *)(a8 + 108);
              if (v129 == 0x80000000 || v130 != 0)
              {
                v149 = v130 + 1;
                *(_DWORD *)(a8 + 108) = v149;
                if (v149 >= *(_DWORD *)(a8 + 104))
                {
                  if (*(_BYTE *)(a8 + 96))
                    MEMORY[0x19AEBA1A0](*(unsigned int *)(a8 + 84));
                  *(_DWORD *)(a8 + 108) = 0;
                }
              }
              *(_QWORD *)(a8 + 48) = v16;
            }
            result = IPC::StreamClientConnectionBuffer::tryAcquire(a8 + 56, &v168, v10);
            if (!v170)
              break;
            v156 = a6;
            v18 = v168;
            v30 = (IPC::Encoder *)v169;
            a6 = (uint64_t **)(a8 + 8);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v181, (uint64_t **)(a8 + 8));
            v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
            if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v181[0], v15))
            {
              v177 = v18;
              v178 = (unint64_t)v30;
              v59 = (v18 + 1) & 0xFFFFFFFFFFFFFFFELL;
              v60 = v59 - v18;
              if (v59 >= v18)
              {
                if (v60 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v61 = v60 + 2;
                  if (v60 + 2 <= (unint64_t)v30)
                  {
                    *(_WORD *)(v18 + v60) = 3612;
                    *((_QWORD *)&v178 + 1) = v60 + 2;
                    goto LABEL_68;
                  }
                }
                goto LABEL_244;
              }
              v61 = 0;
              goto LABEL_68;
            }
            LOBYTE(v177) = 11;
            v18 = 1;
            v180 = 1;
            LOBYTE(v163[0]) = 0;
            v166 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v163, (uint64_t)&v177);
            v167 = 1;
            if (v180 != -1)
              ((void (*)(__int128 *, unint64_t *))off_1E34E30A0[v180])(&v171, &v177);
            while (1)
            {
LABEL_142:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v181);
              if (v167)
              {
                LOBYTE(v177) = 0;
                v180 = -1;
                result = std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v177, (uint64_t)v163);
                if (v167 && v166 != -1)
                  result = ((uint64_t (*)(__int128 *, unsigned __int8 **))off_1E34E30A0[v166])(&v171, v163);
                a6 = v156;
                goto LABEL_171;
              }
              if (v170)
                break;
              do
              {
LABEL_243:
                while (2)
                {
                  __break(1u);
LABEL_244:
                  v30 = 0;
                  v61 = 0;
                  *(_QWORD *)&v178 = 0;
LABEL_68:
                  v62 = (_QWORD *)((v18 + v61 + 7) & 0xFFFFFFFFFFFFFFF8);
                  if ((unint64_t)v62 >= v18 + v61)
                  {
                    v63 = (char *)v62 - v18;
                    if ((unint64_t)v62 - v18 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > (char *)v30)
                    {
                      *(_QWORD *)&v178 = 0;
                    }
                    else
                    {
                      *v62 = v15;
                      *((_QWORD *)&v178 + 1) = v63 + 8;
                    }
                  }
                  IPC::ArgumentCoder<WebCore::IntRect,void>::encode((uint64_t *)&v177, &v159);
                  v64 = *((_QWORD *)&v178 + 1);
                  v65 = v178;
                  v66 = v177;
                  v67 = (v177 + *((_QWORD *)&v178 + 1) + 3) & 0xFFFFFFFFFFFFFFFCLL;
                  v68 = v67 - (v177 + *((_QWORD *)&v178 + 1));
                  if (v67 >= v177 + *((_QWORD *)&v178 + 1))
                  {
                    v69 = v67 - v177;
                    if (v68 + *((_QWORD *)&v178 + 1) > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > (unint64_t)v178)
                    {
                      v65 = 0;
                      *(_QWORD *)&v178 = 0;
                    }
                    else
                    {
                      *(_DWORD *)(v177 + v69) = v14;
                      v66 = v177;
                      v65 = v178;
                      v64 = v69 + 4;
                    }
                  }
                  v70 = (_DWORD *)((v66 + v64 + 3) & 0xFFFFFFFFFFFFFFFCLL);
                  if ((unint64_t)v70 >= v66 + v64)
                  {
                    v71 = (char *)v70 - v66;
                    if ((unint64_t)v70 - v66 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v71 + 4) > v65)
                    {
                      v65 = 0;
                      *(_QWORD *)&v178 = 0;
                    }
                    else
                    {
                      *v70 = a5;
                      v65 = v178;
                      v64 = (unint64_t)(v71 + 4);
                    }
                  }
                  if (v64 < v65
                    && (v72 = v64 + 1, *(_BYTE *)(v177 + v64) = v155, *((_QWORD *)&v178 + 1) = v64 + 1, (_QWORD)v178))
                  {
                    v73 = *(_QWORD *)(a8 + 64);
                    v74 = (*(_QWORD *)(a8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
                    v75 = *(_QWORD *)(a8 + 56);
                    if (v74 + 16 >= v75)
                      v74 = 0;
                    if (v72 <= 0x10)
                      v72 = 16;
                    v76 = v74 + v72;
                    if (v75 <= v76)
                      v77 = 0;
                    else
                      v77 = v76;
                    *(_QWORD *)(a8 + 72) = v77;
                    v78 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
                    do
                      v79 = __ldaxr(v78);
                    while (__stlxr(v77, v78));
                    if (v79 == 0x80000000 || *(_DWORD *)(a8 + 108))
                    {
                      if (*(_BYTE *)(a8 + 96))
                        MEMORY[0x19AEBA1A0](*(unsigned int *)(a8 + 84));
                      *(_DWORD *)(a8 + 108) = 0;
                    }
                    v18 = a8 + 88;
                    LODWORD(v30) = 0x80000000;
                    while (1)
                    {
                      v80 = *(unint64_t **)(*(_QWORD *)(a8 + 64) + 16);
                      do
                        v81 = __ldaxr(v80);
                      while (__stlxr(0x80000000uLL, v80));
                      v82 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(a8 + 64) + 16) + 128));
                      if (!(v81 | v82 & 0xFFFFFFFF7FFFFFFFLL))
                        break;
                      if (*(_BYTE *)(a8 + 96))
                      {
                        v83 = IPC::Semaphore::waitFor((semaphore_t *)(a8 + 88), v10);
                        if (v83)
                        {
                          WTF::ApproximateTime::now((WTF::ApproximateTime *)v83);
                          if (v84 < v10)
                            continue;
                        }
                      }
                      LOBYTE(v174) = 16;
                      v175 = 1;
LABEL_114:
                      v176 = 1;
                      goto LABEL_115;
                    }
                    atomic_store(0, *(unint64_t **)(*(_QWORD *)(a8 + 64) + 16));
                    *(_QWORD *)(a8 + 72) = 0;
                    v85 = *(_QWORD *)(a8 + 64);
                    v86 = *(_QWORD *)(v85 + 8);
                    if (v86 <= 0xFF)
                      continue;
                    v87 = *(_QWORD *)(a8 + 56);
                    v88 = *(_QWORD *)(v85 + 16);
                    v89 = v86 - 256;
                    if (v87)
                    {
                      v18 = v87 - 1;
                      if (v89 < v87 - 1)
                        continue;
                    }
                    else
                    {
                      v18 = v89;
                    }
                    v30 = (IPC::Encoder *)(v88 + 256);
                    v90 = WTF::fastMalloc((WTF *)0x48);
                    v91 = IPC::Decoder::Decoder(v90, (uint64_t)v30, v18, *(_QWORD *)(a8 + 48));
                    if (*(_WORD *)(v91 + 50) != 2821)
                    {
                      v174 = (unint64_t *)v91;
                      v175 = 0;
                      goto LABEL_114;
                    }
                    IPC::Decoder::~Decoder((IPC::Decoder *)v91);
                    WTF::fastFree(v92, v93);
                    IPC::Connection::waitForSyncReply((uint64_t)v181[0], v15, 0xE1Cu, (uint64_t)&v171, v10);
                    LOBYTE(v174) = 0;
                    v175 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v174, (uint64_t)&v171);
                    v176 = 1;
                    if (DWORD2(v171) != -1)
                      ((void (*)(uint64_t **, __int128 *))off_1E34E3480[DWORD2(v171)])(&v162, &v171);
                  }
                  else
                  {
                    LOBYTE(v174) = 0;
                    v176 = 0;
                  }
                  break;
                }
LABEL_115:
                IPC::Connection::popPendingSyncRequestID((IPC::Decoder *)v181[0]);
                if (!v176)
                {
                  LOBYTE(v163[0]) = 0;
                  v167 = 0;
                  goto LABEL_142;
                }
                if (v175 == 1)
                {
                  LOBYTE(v163[0]) = (_BYTE)v174;
                  v95 = 1;
                  v166 = 1;
                  v167 = 1;
                  goto LABEL_141;
                }
                if (v175)
                  goto LABEL_254;
                LOBYTE(v171) = 0;
                v173 = 0;
                IPC::Decoder::operator>><std::tuple<std::optional<WebCore::IntSize>,std::span<unsigned char const,18446744073709551615ul>>>(v174, (uint64_t)&v171);
                if (!v173)
                {
                  LOBYTE(v163[0]) = 13;
                  v166 = 1;
                  v167 = 1;
                  goto LABEL_139;
                }
              }
              while (!v176);
              if (v175)
                goto LABEL_254;
              v94 = v174;
              v174 = 0;
              v178 = v171;
              v179 = v172;
              v177 = (unint64_t)v94;
              v180 = 0;
              LOBYTE(v163[0]) = 0;
              v166 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v163, (uint64_t)&v177);
              v167 = 1;
              if (v180 != -1)
                ((void (*)(uint64_t **, unint64_t *))off_1E34E30A0[v180])(&v162, &v177);
LABEL_139:
              if (v176)
              {
                v95 = v175;
                if (v175 != -1)
                {
LABEL_141:
                  ((void (*)(unint64_t *, unint64_t **))off_1E34E3480[v95])(&v177, &v174);
                  continue;
                }
              }
            }
            v98 = (v168 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v99 = v98 - v168;
            if (v98 < v168)
            {
              v100 = 0;
            }
            else
            {
              v100 = 0;
              if (v99 <= 0xFFFFFFFFFFFFFFFDLL && v99 + 2 <= v169)
              {
                *(_WORD *)(v168 + v99) = 2821;
                v100 = v99 + 2;
              }
            }
            v101 = *(_QWORD *)(a8 + 64);
            v102 = (*(_QWORD *)(a8 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v103 = *(_QWORD *)(a8 + 56);
            if (v102 + 16 >= v103)
              v102 = 0;
            if (v100 <= 0x10)
              v100 = 16;
            v104 = v102 + v100;
            if (v103 <= v104)
              v104 = 0;
            *(_QWORD *)(a8 + 72) = v104;
            v105 = (unint64_t *)(*(_QWORD *)(v101 + 16) + 128);
            do
              __ldaxr(v105);
            while (__stlxr(v104, v105));
            *(_DWORD *)(a8 + 108) = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a6);
            v106 = v162;
            v174 = 0;
            IPC::Connection::createSyncMessageEncoder(3612, v16, (uint64_t *)&v174, (uint64_t *)v181);
            v30 = (IPC::Encoder *)v181[0];
            IPC::ArgumentCoder<WebCore::IntRect,void>::encode((IPC::Encoder *)v181[0], &v159);
            *(_DWORD *)IPC::Encoder::grow(v30, 4uLL, 4) = v14;
            *(_DWORD *)IPC::Encoder::grow(v30, 4uLL, 4) = a5;
            *IPC::Encoder::grow(v30, 1uLL, 1) = v155;
            IPC::Connection::sendSyncMessage((uint64_t)v106, (uint64_t)v174, (uint64_t *)v181, 0, (uint64_t)&v171, v10);
            if (DWORD2(v171))
            {
              a6 = v156;
              if (DWORD2(v171) == 1)
              {
                LOBYTE(v177) = v171;
                v107 = 1;
                v180 = 1;
                goto LABEL_167;
              }
            }
            else
            {
              LOBYTE(v163[0]) = 0;
              v165 = 0;
              IPC::Decoder::operator>><std::tuple<std::optional<WebCore::IntSize>,std::span<unsigned char const,18446744073709551615ul>>>((unint64_t *)v171, (uint64_t)v163);
              a6 = v156;
              if (!v165)
              {
                LOBYTE(v177) = 13;
                v180 = 1;
                v107 = DWORD2(v171);
                if (DWORD2(v171) != -1)
LABEL_167:
                  ((void (*)(unsigned __int8 **, __int128 *))off_1E34E3480[v107])(v163, &v171);
                v110 = (IPC::Encoder *)v181[0];
                v181[0] = 0;
                if (v110)
                {
                  IPC::Encoder::~Encoder(v110, v108);
                  WTF::fastFree(v111, v112);
                }
                result = (uint64_t)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v162);
LABEL_171:
                if (v180)
                  goto LABEL_172;
                if (BYTE8(v178))
                {
                  if ((int)v178 >= 1)
                  {
                    v113 = DWORD1(v178) - 1;
                    if (SDWORD1(v178) >= 1)
                    {
                      v114 = v20 * v178;
                      if (v20 * (_DWORD)v178)
                      {
                        if (*((_QWORD *)&v179 + 1) >= (unint64_t)(v114 + v113 * v153)
                          && a7 >= v114 + v113 * v154
                          && (DWORD1(v178) < 2 || v153 >= v114 && v154 >= v114))
                        {
                          result = WebCore::copyRows((WebCore *)v153, v179, (const unsigned __int8 *)v154, (uint64_t)a6, (unsigned __int8 *)DWORD1(v178));
                        }
                      }
                    }
                  }
                }
                goto LABEL_173;
              }
              v107 = DWORD2(v171);
              if (!DWORD2(v171))
              {
                v109 = v171;
                *(_QWORD *)&v171 = 0;
                v178 = *(_OWORD *)v163;
                v179 = v164;
                v177 = v109;
                v180 = 0;
                goto LABEL_167;
              }
            }
LABEL_254:
            v152 = std::__throw_bad_variant_access[abi:sn180100]();
LABEL_255:
            if (v151)
              (*(void (**)(uint64_t, void *))(*(_QWORD *)v152 + 16))(v152, v53);
LABEL_250:
            LOBYTE(v163[0]) = 13;
            DWORD2(v164) = 1;
            v48 = v175;
            a6 = v156;
            if (v175 != -1)
              goto LABEL_47;
          }
          LOBYTE(v177) = 15;
          v180 = 1;
          goto LABEL_171;
        }
        LOBYTE(v163[0]) = 15;
LABEL_42:
        DWORD2(v164) = 1;
        goto LABEL_51;
      }
      v140 = 17;
    }
    else
    {
      v140 = 15;
    }
LABEL_261:
    LOBYTE(v163[0]) = v140;
    goto LABEL_42;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::readPixels(uint64_t a1, uint64_t a2, unint64_t a3, WebCore::GraphicsContextGL *a4, int a5, uint64_t **a6, unint64_t a7, uint64_t a8, int a9, char a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::readPixels(a1 - 16, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  uint64_t v3;
  WebKit::RemoteGraphicsContextGLProxy *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  IPC::Encoder *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  IPC::Encoder *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  int v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t *v62;
  IPC::Encoder *v63;
  unint64_t v64;
  unsigned __int8 v65;
  IPC::Encoder *v66;
  unint64_t v67;
  unint64_t v68;

  v3 = *((_QWORD *)result + 12);
  if (v3)
  {
    v5 = result;
    v6 = *(_OWORD *)(a3 + 8);
    v7 = *(_QWORD *)a3;
    v61 = 0uLL;
    v60 = v7;
    if (v7)
      v61 = v6;
    v8 = *((_QWORD *)result + 9);
    v9 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v10 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      v10 = v9 + v11;
    }
    if (*(_QWORD *)(v3 + 48) == v8)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v63, v10);
        if (!v65)
          break;
        v12 = v63;
        v13 = v64;
        v66 = v63;
        v67 = v64;
        v68 = 0;
        v14 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v15 = v14 - (_QWORD)v63;
        if (v14 < (unint64_t)v63)
        {
          v16 = 0;
        }
        else
        {
          v16 = v15 + 2;
          if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v64)
          {
            v13 = 0;
            v16 = 0;
            v67 = 0;
          }
          else
          {
            *(_WORD *)((char *)v63 + v15) = 992;
            v68 = v15 + 2;
          }
        }
        v18 = (char *)(((unint64_t)v12 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if (v18 >= (char *)v12 + v16)
        {
          if ((unint64_t)(v18 - (char *)v12) > 0xFFFFFFFFFFFFFFFBLL || v18 - (char *)v12 + 4 > v13)
          {
            v67 = 0;
          }
          else
          {
            *(_DWORD *)v18 = a2;
            v68 = v18 - (char *)v12 + 4;
          }
        }
        result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul>(&v66, (uint64_t)&v60);
        if (v67)
        {
          v21 = v68;
          v22 = *(_QWORD *)(v3 + 64);
          v23 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v24 = *(_QWORD *)(v3 + 56);
          if (v23 + 16 >= v24)
            v23 = 0;
          if (v68 <= 0x10)
            v21 = 16;
          v25 = v23 + v21;
          if (v24 <= v25)
            v26 = 0;
          else
            v26 = v25;
          *(_QWORD *)(v3 + 72) = v26;
          v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v26, v27));
          if (v28 == 0x80000000 || *(_DWORD *)(v3 + 108))
          {
            if (*(_BYTE *)(v3 + 96))
              result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
          return result;
        }
        v29 = (IPC::Encoder *)v65;
        if (v65)
        {
          v30 = ((unint64_t)v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v31 = v30 - (_QWORD)v63;
          if (v30 < (unint64_t)v63)
          {
            v32 = 0;
          }
          else
          {
            v32 = 0;
            if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v64)
            {
              *(_WORD *)((char *)v63 + v31) = 2821;
              v32 = v31 + 2;
            }
          }
          v33 = *(_QWORD *)(v3 + 64);
          v34 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v35 = *(_QWORD *)(v3 + 56);
          if (v34 + 16 >= v35)
            v34 = 0;
          if (v32 <= 0x10)
            v32 = 16;
          v36 = v34 + v32;
          if (v35 <= v36)
            v36 = 0;
          *(_QWORD *)(v3 + 72) = v36;
          v37 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
          do
            __ldaxr(v37);
          while (__stlxr(v36, v37));
          *(_DWORD *)(v3 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)(v3 + 8));
          v38 = v62;
          v39 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v39 = 992;
          *(_QWORD *)(v39 + 8) = v8;
          *(_QWORD *)(v39 + 528) = v39 + 16;
          *(_QWORD *)(v39 + 536) = v39 + 16;
          *(_OWORD *)(v39 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v39 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v39);
          v66 = (IPC::Encoder *)v39;
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 4uLL, 4) = a2;
          IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::Encoder,0ul,1ul>((IPC::Encoder *)v39, &v60);
          v41 = IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v66, 1, 0);
          v42 = v66;
          v66 = 0;
          if (v42)
          {
            IPC::Encoder::~Encoder(v42, v40);
            WTF::fastFree(v43, v44);
          }
          result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v62);
          if (!v41)
            return result;
          break;
        }
        __break(1u);
LABEL_87:
        v48 = v20;
LABEL_58:
        v49 = (char *)(((unint64_t)v29 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v49 >= (char *)v29 + v48)
        {
          v48 = v49 - (char *)v29 + 8;
          if ((unint64_t)(v49 - (char *)v29) > 0xFFFFFFFFFFFFFFF7 || v48 > v20)
            break;
          *(_QWORD *)v49 = v8;
        }
        if (!v20)
          break;
        v51 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v52 = *(_QWORD *)(v3 + 56);
        if (v51 + 16 >= v52)
          v51 = 0;
        if (v48 <= 0x10)
          v48 = 16;
        v53 = v51 + v48;
        if (v52 <= v53)
          v54 = 0;
        else
          v54 = v53;
        *(_QWORD *)(v3 + 72) = v54;
        v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v54, v55));
        v57 = *(_DWORD *)(v3 + 108);
        if (v56 == 0x80000000 || v57 != 0)
        {
          v59 = v57 + 1;
          *(_DWORD *)(v3 + 108) = v59;
          if (v59 >= *(_DWORD *)(v3 + 104))
          {
            if (*(_BYTE *)(v3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
        }
        *(_QWORD *)(v3 + 48) = v8;
      }
    }
    else
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v66, v10);
      if ((_BYTE)v68)
      {
        v29 = v66;
        v45 = v67;
        v46 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v47 = v46 - (_QWORD)v66;
        if (v46 < (unint64_t)v66)
        {
          v48 = 0;
          v20 = v67;
        }
        else
        {
          v20 = 0;
          if (v47 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_87;
          v48 = 0;
          if (v47 + 2 <= v67)
          {
            *(_WORD *)((char *)v66 + v47) = 2822;
            v20 = v45;
            v48 = v47 + 2;
          }
        }
        goto LABEL_58;
      }
    }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
    return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
  }
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  uint64_t v3;
  WebKit::RemoteGraphicsContextGLProxy *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  IPC::Encoder *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  IPC::Encoder *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  int v41;
  IPC::Encoder *v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  unsigned __int8 v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unint64_t v69;

  v3 = *((_QWORD *)result + 12);
  if (v3)
  {
    v5 = result;
    v6 = *(_OWORD *)(a3 + 8);
    v7 = *(_QWORD *)(a3 + 24);
    v60 = *(_QWORD *)a3;
    v61 = 0uLL;
    v62 = 0;
    if (v60)
    {
      v61 = v6;
      v62 = v7;
    }
    v8 = *((_QWORD *)result + 9);
    v9 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v10 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      v10 = v9 + v11;
    }
    if (*(_QWORD *)(v3 + 48) == v8)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v64, v10);
        if (!v66)
          break;
        v12 = v64;
        v13 = v65;
        v67 = v64;
        v68 = v65;
        v69 = 0;
        v14 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v15 = v14 - (_QWORD)v64;
        if (v14 < (unint64_t)v64)
        {
          v16 = 0;
        }
        else
        {
          v16 = v15 + 2;
          if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v65)
          {
            v13 = 0;
            v16 = 0;
            v68 = 0;
          }
          else
          {
            *(_WORD *)((char *)v64 + v15) = 993;
            v69 = v15 + 2;
          }
        }
        v18 = (char *)(((unint64_t)v12 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if (v18 >= (char *)v12 + v16)
        {
          if ((unint64_t)(v18 - (char *)v12) > 0xFFFFFFFFFFFFFFFBLL || v18 - (char *)v12 + 4 > v13)
          {
            v68 = 0;
          }
          else
          {
            *(_DWORD *)v18 = a2;
            v69 = v18 - (char *)v12 + 4;
          }
        }
        result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul,2ul>(&v67, (uint64_t)&v60);
        if (v68)
        {
          v21 = v69;
          v22 = *(_QWORD *)(v3 + 64);
          v23 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v24 = *(_QWORD *)(v3 + 56);
          if (v23 + 16 >= v24)
            v23 = 0;
          if (v69 <= 0x10)
            v21 = 16;
          v25 = v23 + v21;
          if (v24 <= v25)
            v26 = 0;
          else
            v26 = v25;
          *(_QWORD *)(v3 + 72) = v26;
          v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v26, v27));
          if (v28 == 0x80000000 || *(_DWORD *)(v3 + 108))
          {
            if (*(_BYTE *)(v3 + 96))
              result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
          return result;
        }
        v29 = (IPC::Encoder *)v66;
        if (v66)
        {
          v30 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v31 = v30 - (_QWORD)v64;
          if (v30 < (unint64_t)v64)
          {
            v32 = 0;
          }
          else
          {
            v32 = 0;
            if (v31 <= 0xFFFFFFFFFFFFFFFDLL && v31 + 2 <= v65)
            {
              *(_WORD *)((char *)v64 + v31) = 2821;
              v32 = v31 + 2;
            }
          }
          v33 = *(_QWORD *)(v3 + 64);
          v34 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v35 = *(_QWORD *)(v3 + 56);
          if (v34 + 16 >= v35)
            v34 = 0;
          if (v32 <= 0x10)
            v32 = 16;
          v36 = v34 + v32;
          if (v35 <= v36)
            v36 = 0;
          *(_QWORD *)(v3 + 72) = v36;
          v37 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
          do
            __ldaxr(v37);
          while (__stlxr(v36, v37));
          *(_DWORD *)(v3 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(v3 + 8));
          v38 = v63;
          v39 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v39 = 993;
          *(_QWORD *)(v39 + 8) = v8;
          *(_QWORD *)(v39 + 528) = v39 + 16;
          *(_QWORD *)(v39 + 536) = v39 + 16;
          *(_OWORD *)(v39 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v39 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v39);
          v67 = (IPC::Encoder *)v39;
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v39, 4uLL, 4) = a2;
          IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::Encoder,0ul,1ul,2ul>((IPC::Encoder *)v39, &v60);
          v41 = IPC::Connection::sendMessageImpl((uint64_t)v38, (uint64_t *)&v67, 1, 0);
          v42 = v67;
          v67 = 0;
          if (v42)
          {
            IPC::Encoder::~Encoder(v42, v40);
            WTF::fastFree(v43, v44);
          }
          result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
          if (!v41)
            return result;
          break;
        }
        __break(1u);
LABEL_87:
        v48 = v20;
LABEL_58:
        v49 = (char *)(((unint64_t)v29 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v49 >= (char *)v29 + v48)
        {
          v48 = v49 - (char *)v29 + 8;
          if ((unint64_t)(v49 - (char *)v29) > 0xFFFFFFFFFFFFFFF7 || v48 > v20)
            break;
          *(_QWORD *)v49 = v8;
        }
        if (!v20)
          break;
        v51 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v52 = *(_QWORD *)(v3 + 56);
        if (v51 + 16 >= v52)
          v51 = 0;
        if (v48 <= 0x10)
          v48 = 16;
        v53 = v51 + v48;
        if (v52 <= v53)
          v54 = 0;
        else
          v54 = v53;
        *(_QWORD *)(v3 + 72) = v54;
        v55 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v54, v55));
        v57 = *(_DWORD *)(v3 + 108);
        if (v56 == 0x80000000 || v57 != 0)
        {
          v59 = v57 + 1;
          *(_DWORD *)(v3 + 108) = v59;
          if (v59 >= *(_DWORD *)(v3 + 104))
          {
            if (*(_BYTE *)(v3 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
            *(_DWORD *)(v3 + 108) = 0;
          }
        }
        *(_QWORD *)(v3 + 48) = v8;
      }
    }
    else
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v67, v10);
      if ((_BYTE)v69)
      {
        v29 = v67;
        v45 = v68;
        v46 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v47 = v46 - (_QWORD)v67;
        if (v46 < (unint64_t)v67)
        {
          v48 = 0;
          v20 = v68;
        }
        else
        {
          v20 = 0;
          if (v47 > 0xFFFFFFFFFFFFFFFDLL)
            goto LABEL_87;
          v48 = 0;
          if (v47 + 2 <= v68)
          {
            *(_WORD *)((char *)v67 + v47) = 2822;
            v20 = v45;
            v48 = v47 + 2;
          }
        }
        goto LABEL_58;
      }
    }
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
    return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
  }
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  WebKit::RemoteGraphicsContextGLProxy *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  IPC::Encoder *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v20;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  IPC::Encoder *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  int v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t *v65;
  IPC::Encoder *v66;
  unint64_t v67;
  unsigned __int8 v68;
  IPC::Encoder *v69;
  unint64_t v70;
  uint64_t v71;

  v4 = *((_QWORD *)result + 12);
  if (v4)
  {
    v7 = result;
    v8 = *(_OWORD *)(a3 + 8);
    v9 = *(_QWORD *)a3;
    v64 = 0uLL;
    v63 = v9;
    if (v9)
      v64 = v8;
    v10 = *((_QWORD *)result + 9);
    v11 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v12 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      v12 = v11 + v13;
    }
    if (*(_QWORD *)(v4 + 48) == v10)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v66, v12);
        if (!v68)
          goto LABEL_55;
        v14 = v66;
        v15 = v67;
        v69 = v66;
        v70 = v67;
        v71 = 0;
        v16 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = v16 - (_QWORD)v66;
        if (v16 < (unint64_t)v66)
        {
          v18 = 0;
        }
        else
        {
          v18 = v17 + 2;
          if (v17 > 0xFFFFFFFFFFFFFFFDLL || v18 > v67)
          {
            v15 = 0;
            v18 = 0;
            v70 = 0;
          }
          else
          {
            *(_WORD *)((char *)v66 + v17) = 995;
            v71 = v17 + 2;
          }
        }
        v20 = (char *)(((unint64_t)v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if (v20 >= (char *)v14 + v18)
        {
          if ((unint64_t)(v20 - (char *)v14) > 0xFFFFFFFFFFFFFFFBLL || v20 - (char *)v14 + 4 > v15)
          {
            v70 = 0;
          }
          else
          {
            *(_DWORD *)v20 = a2;
            v71 = v20 - (char *)v14 + 4;
          }
        }
        result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul>(&v69, (uint64_t)&v63);
        v22 = v71;
        v23 = (char *)(((unint64_t)v69 + v71 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v24 = v23 - ((char *)v69 + v71);
        if (v23 >= (char *)v69 + v71)
        {
          v24 = v23 - (char *)v69;
          if ((unint64_t)(v23 - (char *)v69) > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_39;
          v22 = v24 + 4;
          if (v24 + 4 > v70)
            goto LABEL_39;
          *(_DWORD *)v23 = a4;
          v71 = v24 + 4;
        }
        if (v70)
        {
          v25 = *(_QWORD *)(v4 + 64);
          v26 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v27 = *(_QWORD *)(v4 + 56);
          if (v26 + 16 >= v27)
            v26 = 0;
          if (v22 <= 0x10)
            v22 = 16;
          v28 = v26 + v22;
          if (v27 <= v28)
            v29 = 0;
          else
            v29 = v28;
          *(_QWORD *)(v4 + 72) = v29;
          v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v29, v30));
          if (v31 == 0x80000000 || *(_DWORD *)(v4 + 108))
          {
            if (*(_BYTE *)(v4 + 96))
              result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
            *(_DWORD *)(v4 + 108) = 0;
          }
          return result;
        }
LABEL_39:
        v32 = (IPC::Encoder *)v68;
        if (v68)
        {
          v33 = ((unint64_t)v66 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v34 = v33 - (_QWORD)v66;
          if (v33 < (unint64_t)v66)
          {
            v35 = 0;
          }
          else
          {
            v35 = 0;
            if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v67)
            {
              *(_WORD *)((char *)v66 + v34) = 2821;
              v35 = v34 + 2;
            }
          }
          v36 = *(_QWORD *)(v4 + 64);
          v37 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v38 = *(_QWORD *)(v4 + 56);
          if (v37 + 16 >= v38)
            v37 = 0;
          if (v35 <= 0x10)
            v35 = 16;
          v39 = v37 + v35;
          if (v38 <= v39)
            v39 = 0;
          *(_QWORD *)(v4 + 72) = v39;
          v40 = (unint64_t *)(*(_QWORD *)(v36 + 16) + 128);
          do
            __ldaxr(v40);
          while (__stlxr(v39, v40));
          *(_DWORD *)(v4 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v65, (uint64_t **)(v4 + 8));
          v41 = v65;
          v42 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v42 = 995;
          *(_QWORD *)(v42 + 8) = v10;
          *(_QWORD *)(v42 + 528) = v42 + 16;
          *(_QWORD *)(v42 + 536) = v42 + 16;
          *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v42 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
          v69 = (IPC::Encoder *)v42;
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 4uLL, 4) = a2;
          IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::Encoder,0ul,1ul>((IPC::Encoder *)v42, &v63);
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 4uLL, 4) = a4;
          v44 = IPC::Connection::sendMessageImpl((uint64_t)v41, (uint64_t *)&v69, 1, 0);
          v45 = v69;
          v69 = 0;
          if (v45)
          {
            IPC::Encoder::~Encoder(v45, v43);
            WTF::fastFree(v46, v47);
          }
          result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v65);
          if (!v44)
            return result;
          goto LABEL_55;
        }
        __break(1u);
LABEL_91:
        v51 = v24;
LABEL_62:
        v52 = (char *)(((unint64_t)v32 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v52 >= (char *)v32 + v51)
        {
          v51 = v52 - (char *)v32 + 8;
          if ((unint64_t)(v52 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v51 > v24)
            goto LABEL_55;
          *(_QWORD *)v52 = v10;
        }
        if (!v24)
          goto LABEL_55;
        v54 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v55 = *(_QWORD *)(v4 + 56);
        if (v54 + 16 >= v55)
          v54 = 0;
        if (v51 <= 0x10)
          v51 = 16;
        v56 = v54 + v51;
        if (v55 <= v56)
          v57 = 0;
        else
          v57 = v56;
        *(_QWORD *)(v4 + 72) = v57;
        v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v57, v58));
        v60 = *(_DWORD *)(v4 + 108);
        if (v59 == 0x80000000 || v60 != 0)
        {
          v62 = v60 + 1;
          *(_DWORD *)(v4 + 108) = v62;
          if (v62 >= *(_DWORD *)(v4 + 104))
          {
            if (*(_BYTE *)(v4 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
            *(_DWORD *)(v4 + 108) = 0;
          }
        }
        *(_QWORD *)(v4 + 48) = v10;
      }
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v69, v12);
    if ((_BYTE)v71)
    {
      v32 = v69;
      v48 = v70;
      v49 = ((unint64_t)v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v50 = v49 - (_QWORD)v69;
      if (v49 < (unint64_t)v69)
      {
        v51 = 0;
        v24 = v70;
      }
      else
      {
        v24 = 0;
        if (v50 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_91;
        v51 = 0;
        if (v50 + 2 <= v70)
        {
          *(_WORD *)((char *)v69 + v50) = 2822;
          v24 = v48;
          v51 = v50 + 2;
        }
      }
      goto LABEL_62;
    }
LABEL_55:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
    return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
  }
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  WebKit::RemoteGraphicsContextGLProxy *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  IPC::Encoder *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v20;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  IPC::Encoder *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  int v44;
  IPC::Encoder *v45;
  WTF *v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int v60;
  unsigned int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unsigned __int8 v69;
  IPC::Encoder *v70;
  unint64_t v71;
  uint64_t v72;

  v4 = *((_QWORD *)result + 12);
  if (v4)
  {
    v7 = result;
    v8 = *(_OWORD *)(a3 + 8);
    v9 = *(_QWORD *)(a3 + 24);
    v63 = *(_QWORD *)a3;
    v64 = 0uLL;
    v65 = 0;
    if (v63)
    {
      v64 = v8;
      v65 = v9;
    }
    v10 = *((_QWORD *)result + 9);
    v11 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v12 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      v12 = v11 + v13;
    }
    if (*(_QWORD *)(v4 + 48) == v10)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v67, v12);
        if (!v69)
          goto LABEL_55;
        v14 = v67;
        v15 = v68;
        v70 = v67;
        v71 = v68;
        v72 = 0;
        v16 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v17 = v16 - (_QWORD)v67;
        if (v16 < (unint64_t)v67)
        {
          v18 = 0;
        }
        else
        {
          v18 = v17 + 2;
          if (v17 > 0xFFFFFFFFFFFFFFFDLL || v18 > v68)
          {
            v15 = 0;
            v18 = 0;
            v71 = 0;
          }
          else
          {
            *(_WORD *)((char *)v67 + v17) = 996;
            v72 = v17 + 2;
          }
        }
        v20 = (char *)(((unint64_t)v14 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if (v20 >= (char *)v14 + v18)
        {
          if ((unint64_t)(v20 - (char *)v14) > 0xFFFFFFFFFFFFFFFBLL || v20 - (char *)v14 + 4 > v15)
          {
            v71 = 0;
          }
          else
          {
            *(_DWORD *)v20 = a2;
            v72 = v20 - (char *)v14 + 4;
          }
        }
        result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul,2ul>(&v70, (uint64_t)&v63);
        v22 = v72;
        v23 = (char *)(((unint64_t)v70 + v72 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        v24 = v23 - ((char *)v70 + v72);
        if (v23 >= (char *)v70 + v72)
        {
          v24 = v23 - (char *)v70;
          if ((unint64_t)(v23 - (char *)v70) > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_39;
          v22 = v24 + 4;
          if (v24 + 4 > v71)
            goto LABEL_39;
          *(_DWORD *)v23 = a4;
          v72 = v24 + 4;
        }
        if (v71)
        {
          v25 = *(_QWORD *)(v4 + 64);
          v26 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v27 = *(_QWORD *)(v4 + 56);
          if (v26 + 16 >= v27)
            v26 = 0;
          if (v22 <= 0x10)
            v22 = 16;
          v28 = v26 + v22;
          if (v27 <= v28)
            v29 = 0;
          else
            v29 = v28;
          *(_QWORD *)(v4 + 72) = v29;
          v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v29, v30));
          if (v31 == 0x80000000 || *(_DWORD *)(v4 + 108))
          {
            if (*(_BYTE *)(v4 + 96))
              result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
            *(_DWORD *)(v4 + 108) = 0;
          }
          return result;
        }
LABEL_39:
        v32 = (IPC::Encoder *)v69;
        if (v69)
        {
          v33 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v34 = v33 - (_QWORD)v67;
          if (v33 < (unint64_t)v67)
          {
            v35 = 0;
          }
          else
          {
            v35 = 0;
            if (v34 <= 0xFFFFFFFFFFFFFFFDLL && v34 + 2 <= v68)
            {
              *(_WORD *)((char *)v67 + v34) = 2821;
              v35 = v34 + 2;
            }
          }
          v36 = *(_QWORD *)(v4 + 64);
          v37 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v38 = *(_QWORD *)(v4 + 56);
          if (v37 + 16 >= v38)
            v37 = 0;
          if (v35 <= 0x10)
            v35 = 16;
          v39 = v37 + v35;
          if (v38 <= v39)
            v39 = 0;
          *(_QWORD *)(v4 + 72) = v39;
          v40 = (unint64_t *)(*(_QWORD *)(v36 + 16) + 128);
          do
            __ldaxr(v40);
          while (__stlxr(v39, v40));
          *(_DWORD *)(v4 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v66, (uint64_t **)(v4 + 8));
          v41 = v66;
          v42 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v42 = 996;
          *(_QWORD *)(v42 + 8) = v10;
          *(_QWORD *)(v42 + 528) = v42 + 16;
          *(_QWORD *)(v42 + 536) = v42 + 16;
          *(_OWORD *)(v42 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v42 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v42);
          v70 = (IPC::Encoder *)v42;
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 4uLL, 4) = a2;
          IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::Encoder,0ul,1ul,2ul>((IPC::Encoder *)v42, &v63);
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v42, 4uLL, 4) = a4;
          v44 = IPC::Connection::sendMessageImpl((uint64_t)v41, (uint64_t *)&v70, 1, 0);
          v45 = v70;
          v70 = 0;
          if (v45)
          {
            IPC::Encoder::~Encoder(v45, v43);
            WTF::fastFree(v46, v47);
          }
          result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v66);
          if (!v44)
            return result;
          goto LABEL_55;
        }
        __break(1u);
LABEL_91:
        v51 = v24;
LABEL_62:
        v52 = (char *)(((unint64_t)v32 + v51 + 7) & 0xFFFFFFFFFFFFFFF8);
        if (v52 >= (char *)v32 + v51)
        {
          v51 = v52 - (char *)v32 + 8;
          if ((unint64_t)(v52 - (char *)v32) > 0xFFFFFFFFFFFFFFF7 || v51 > v24)
            goto LABEL_55;
          *(_QWORD *)v52 = v10;
        }
        if (!v24)
          goto LABEL_55;
        v54 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v55 = *(_QWORD *)(v4 + 56);
        if (v54 + 16 >= v55)
          v54 = 0;
        if (v51 <= 0x10)
          v51 = 16;
        v56 = v54 + v51;
        if (v55 <= v56)
          v57 = 0;
        else
          v57 = v56;
        *(_QWORD *)(v4 + 72) = v57;
        v58 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v57, v58));
        v60 = *(_DWORD *)(v4 + 108);
        if (v59 == 0x80000000 || v60 != 0)
        {
          v62 = v60 + 1;
          *(_DWORD *)(v4 + 108) = v62;
          if (v62 >= *(_DWORD *)(v4 + 104))
          {
            if (*(_BYTE *)(v4 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
            *(_DWORD *)(v4 + 108) = 0;
          }
        }
        *(_QWORD *)(v4 + 48) = v10;
      }
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v70, v12);
    if ((_BYTE)v72)
    {
      v32 = v70;
      v48 = v71;
      v49 = ((unint64_t)v70 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v50 = v49 - (_QWORD)v70;
      if (v49 < (unint64_t)v70)
      {
        v51 = 0;
        v24 = v71;
      }
      else
      {
        v24 = 0;
        if (v50 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_91;
        v51 = 0;
        if (v50 + 2 <= v71)
        {
          *(_WORD *)((char *)v70 + v50) = 2822;
          v24 = v48;
          v51 = v50 + 2;
        }
      }
      goto LABEL_62;
    }
LABEL_55:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
    return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
  }
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t *a3)
{
  uint64_t v3;
  WebKit::RemoteGraphicsContextGLProxy *v5;
  uint64_t v6;
  const void *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  const void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  void *v79;
  int v80;
  IPC::Encoder *v81;
  WTF *v82;
  void *v83;
  uint64_t v84;
  int v85;
  void *__src;
  void *v87;
  void *v88;
  uint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;

  v3 = *((_QWORD *)result + 12);
  if (!v3)
    return result;
  v5 = result;
  v6 = *a3;
  if (*a3)
  {
    v7 = (const void *)a3[4];
    v87 = (void *)a3[2];
    v88 = (void *)a3[3];
    __src = (void *)a3[1];
  }
  else
  {
    v87 = 0;
    v88 = 0;
    v7 = 0;
    __src = 0;
  }
  v8 = *((_QWORD *)result + 9);
  v9 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v10 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v10 = v9 + v11;
  }
  if (*(_QWORD *)(v3 + 48) != v8)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v90, v10);
    if (!v92)
      goto LABEL_118;
    v48 = v90;
    v49 = v91;
    v50 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v50 - v90;
    if (v50 < v90)
    {
      v53 = 0;
      v52 = v91;
    }
    else
    {
      v52 = 0;
      if (v51 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v53 = 0;
      }
      else
      {
        v53 = 0;
        if (v51 + 2 <= v91)
        {
          *(_WORD *)(v90 + v51) = 2822;
          v52 = v49;
          v53 = v51 + 2;
        }
      }
    }
    v54 = (_QWORD *)((v48 + v53 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v54 >= v48 + v53)
    {
      v53 = (unint64_t)v54 - v48 + 8;
      if ((unint64_t)v54 - v48 > 0xFFFFFFFFFFFFFFF7 || v53 > v52)
        goto LABEL_118;
      *v54 = v8;
    }
    if (!v52)
    {
LABEL_118:
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
    v56 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = *(_QWORD *)(v3 + 56);
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v53 <= 0x10)
      v53 = 16;
    v58 = v56 + v53;
    if (v57 <= v58)
      v59 = 0;
    else
      v59 = v58;
    *(_QWORD *)(v3 + 72) = v59;
    v60 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 16) + 128);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v59, v60));
    v62 = *(_DWORD *)(v3 + 108);
    if (v61 == 0x80000000 || v62 != 0)
    {
      v64 = v62 + 1;
      *(_DWORD *)(v3 + 108) = v64;
      if (v64 >= *(_DWORD *)(v3 + 104))
      {
        if (*(_BYTE *)(v3 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
        *(_DWORD *)(v3 + 108) = 0;
      }
    }
    *(_QWORD *)(v3 + 48) = v8;
  }
  result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::StreamClientConnectionBuffer::tryAcquire(v3 + 56, &v90, v10);
  if (!v92)
    goto LABEL_118;
  v13 = v90;
  v12 = v91;
  v14 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 >= v90;
  v16 = v14 - v90;
  if (v15)
  {
    v17 = v16 + 2;
    if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= v91)
    {
      *(_WORD *)(v90 + v16) = 994;
      goto LABEL_16;
    }
    v12 = 0;
  }
  v17 = 0;
LABEL_16:
  v19 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v13 + v17);
  if (v19 >= v13 + v17)
  {
    v21 = v19 - v13;
    v22 = v20 + v17 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v12)
    {
      v12 = 0;
    }
    else
    {
      *(_DWORD *)(v13 + v21) = a2;
      v17 = v22;
    }
  }
  v24 = (v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = v24 - (v13 + v17);
  v85 = a2;
  v84 = v8;
  if (v24 >= v13 + v17)
  {
    v26 = v24 - v13;
    v27 = v25 + v17 + 8;
    if (v26 > 0xFFFFFFFFFFFFFFF7 || v27 > v12)
    {
      v12 = 0;
    }
    else
    {
      *(_QWORD *)(v13 + v26) = v6;
      v17 = v27;
    }
  }
  v29 = 4 * v6;
  if (v6)
  {
    v30 = v7;
    v31 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v31 < v13 + v17)
    {
      v32 = v12;
    }
    else
    {
      v32 = 0;
      v33 = v31 - v13 + v29;
      if (!__CFADD__(v31 - v13, v29) && v33 <= v12)
      {
        result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), __src, 4 * v6);
        v32 = v12;
        v17 = v33;
      }
    }
    v34 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v34 < v13 + v17)
    {
      v35 = v32;
    }
    else
    {
      v35 = 0;
      v36 = v34 - v13 + v29;
      if (!__CFADD__(v34 - v13, v29) && v36 <= v32)
      {
        result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v87, 4 * v6);
        v35 = v32;
        v17 = v36;
      }
    }
    v37 = (v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v37 < v13 + v17)
    {
      v12 = v35;
    }
    else
    {
      v12 = 0;
      v38 = v37 - v13 + v29;
      if (!__CFADD__(v37 - v13, v29) && v38 <= v35)
      {
        result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v88, 4 * v6);
        v12 = v35;
        v17 = v38;
      }
    }
    v39 = (char *)((v13 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v39 < v13 + v17)
    {
      v7 = v30;
      if (v12)
        goto LABEL_46;
      goto LABEL_100;
    }
    v17 = (unint64_t)&v39[v29 - v13];
    v7 = v30;
    if (__CFADD__(&v39[-v13], v29) || v17 > v12)
      goto LABEL_100;
    result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy(v39, v30, 4 * v6);
  }
  if (v12)
  {
LABEL_46:
    v40 = *(_QWORD *)(v3 + 64);
    v41 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v42 = *(_QWORD *)(v3 + 56);
    if (v41 + 16 >= v42)
      v41 = 0;
    v43 = 16;
    if (v17 > 0x10)
      v43 = v17;
    v44 = v41 + v43;
    if (v42 <= v44)
      v45 = 0;
    else
      v45 = v44;
    *(_QWORD *)(v3 + 72) = v45;
    v46 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v45, v46));
    if (v47 == 0x80000000 || *(_DWORD *)(v3 + 108))
    {
      if (*(_BYTE *)(v3 + 96))
        result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x19AEBA1A0](*(unsigned int *)(v3 + 84));
      *(_DWORD *)(v3 + 108) = 0;
    }
    return result;
  }
LABEL_100:
  if (!v92)
  {
    __break(1u);
    goto LABEL_121;
  }
  v65 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v66 = v65 - v90;
  if (v65 < v90)
  {
LABEL_121:
    v67 = 0;
    goto LABEL_105;
  }
  v67 = 0;
  if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v66 + 2 <= v91)
  {
    *(_WORD *)(v90 + v66) = 2821;
    v67 = v66 + 2;
  }
LABEL_105:
  v68 = *(_QWORD *)(v3 + 64);
  v69 = (*(_QWORD *)(v3 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = *(_QWORD *)(v3 + 56);
  if (v69 + 16 >= v70)
    v69 = 0;
  if (v67 <= 0x10)
    v67 = 16;
  v71 = v69 + v67;
  if (v70 <= v71)
    v71 = 0;
  *(_QWORD *)(v3 + 72) = v71;
  v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
  do
    __ldaxr(v72);
  while (__stlxr(v71, v72));
  *(_DWORD *)(v3 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v89, (uint64_t **)(v3 + 8));
  v73 = v89;
  v74 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v74 = 994;
  *(_QWORD *)(v74 + 8) = v84;
  *(_QWORD *)(v74 + 528) = v74 + 16;
  *(_QWORD *)(v74 + 536) = v74 + 16;
  *(_OWORD *)(v74 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v74 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v74);
  v93 = (IPC::Encoder *)v74;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v74, 4uLL, 4) = v85;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v74, 8uLL, 8) = v6;
  if (v6)
  {
    v75 = IPC::Encoder::grow((IPC::Encoder *)v74, 4uLL, 4 * v6);
    memcpy(v75, __src, 4 * v6);
    v76 = IPC::Encoder::grow((IPC::Encoder *)v74, 4uLL, 4 * v6);
    memcpy(v76, v87, 4 * v6);
    v77 = IPC::Encoder::grow((IPC::Encoder *)v74, 4uLL, 4 * v6);
    memcpy(v77, v88, 4 * v6);
    v78 = IPC::Encoder::grow((IPC::Encoder *)v74, 4uLL, 4 * v6);
    memcpy(v78, v7, 4 * v6);
  }
  v80 = IPC::Connection::sendMessageImpl((uint64_t)v73, (uint64_t *)&v93, 1, 0);
  v81 = v93;
  v93 = 0;
  if (v81)
  {
    IPC::Encoder::~Encoder(v81, v79);
    WTF::fastFree(v82, v83);
  }
  result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
  if (v80)
    goto LABEL_118;
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedBaseInstanceANGLE(uint64_t a1, int a2, uint64_t *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawArraysInstancedBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  unint64_t v6;
  WebKit::RemoteGraphicsContextGLProxy *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  void *v68;
  int v69;
  IPC::Encoder *v70;
  WTF *v71;
  void *v72;
  _DWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  int v85;
  unsigned int v87;
  int v88;
  void *__src;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t *v94;
  unint64_t v95;
  unint64_t v96;
  unsigned __int8 v97;
  IPC::Encoder *v98;

  v4 = *((_QWORD *)result + 12);
  if (v4)
  {
    LODWORD(v6) = a2;
    v7 = result;
    v8 = *a3;
    if (*a3)
    {
      v92 = (void *)a3[4];
      v93 = (void *)a3[5];
      v90 = (void *)a3[2];
      v91 = (void *)a3[3];
      __src = (void *)a3[1];
    }
    else
    {
      v90 = 0;
      v91 = 0;
      v92 = 0;
      v93 = 0;
      __src = 0;
    }
    v9 = *((_QWORD *)result + 9);
    v10 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
    v11 = INFINITY;
    if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
    {
      WTF::ApproximateTime::now(result);
      v11 = v10 + v12;
    }
    if (*(_QWORD *)(v4 + 48) == v9)
    {
      while (1)
      {
        result = (WebKit::RemoteGraphicsContextGLProxy *)IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v95, v11);
        if (!v97)
          goto LABEL_85;
        v14 = v95;
        v13 = v96;
        v15 = (v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = v15 - v95;
        if (v15 >= v95)
        {
          v17 = v16 + 2;
          if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= v96)
          {
            *(_WORD *)(v95 + v16) = 997;
            goto LABEL_15;
          }
          v13 = 0;
        }
        v17 = 0;
LABEL_15:
        v19 = (v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        v20 = v19 - (v14 + v17);
        if (v19 >= v14 + v17)
        {
          v21 = v19 - v14;
          v22 = v20 + v17 + 4;
          if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v13)
          {
            v13 = 0;
          }
          else
          {
            *(_DWORD *)(v14 + v21) = v6;
            v17 = v22;
          }
        }
        v24 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
        v25 = v24 - (v14 + v17);
        v88 = v6;
        if (v24 >= v14 + v17)
        {
          v26 = v24 - v14;
          v27 = v25 + v17 + 8;
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v27 > v13)
          {
            v13 = 0;
          }
          else
          {
            *(_QWORD *)(v14 + v26) = v8;
            v17 = v27;
          }
        }
        v29 = 4 * v8;
        if (v8)
        {
          v30 = (v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          if (v30 < v14 + v17)
          {
            v31 = v13;
          }
          else
          {
            v31 = 0;
            v32 = v30 - v14 + v29;
            if (!__CFADD__(v30 - v14, v29) && v32 <= v13)
            {
              result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), __src, 4 * v8);
              v31 = v13;
              v17 = v32;
            }
          }
          v33 = (v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          if (v33 < v14 + v17)
          {
            v34 = v31;
          }
          else
          {
            v34 = 0;
            v35 = v33 - v14 + v29;
            if (!__CFADD__(v33 - v14, v29) && v35 <= v31)
            {
              result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v90, 4 * v8);
              v34 = v31;
              v17 = v35;
            }
          }
          v36 = (v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          if (v36 < v14 + v17)
          {
            v37 = v34;
          }
          else
          {
            v37 = 0;
            v38 = v36 - v14 + v29;
            if (!__CFADD__(v36 - v14, v29) && v38 <= v34)
            {
              result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v91, 4 * v8);
              v37 = v34;
              v17 = v38;
            }
          }
          v39 = (v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          if (v39 < v14 + v17)
          {
            v6 = v37;
          }
          else
          {
            v6 = 0;
            v40 = v39 - v14 + v29;
            if (!__CFADD__(v39 - v14, v29) && v40 <= v37)
            {
              result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v92, 4 * v8);
              v6 = v37;
              v17 = v40;
            }
          }
          v41 = (v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          if (v41 < v14 + v17)
          {
            v13 = v6;
          }
          else
          {
            v13 = 0;
            v42 = v41 - v14 + v29;
            if (!__CFADD__(v41 - v14, v29) && v42 <= v6)
            {
              result = (WebKit::RemoteGraphicsContextGLProxy *)memcpy((void *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL), v93, 4 * v8);
              v13 = v6;
              v17 = v42;
            }
          }
        }
        v43 = (_DWORD *)((v14 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v43 >= v14 + v17)
        {
          v44 = (char *)v43 - v14;
          if ((unint64_t)v43 - v14 > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_67;
          v17 = (unint64_t)(v44 + 4);
          if ((unint64_t)(v44 + 4) > v13)
            goto LABEL_67;
          *v43 = a4;
        }
        if (v13)
        {
          v45 = *(_QWORD *)(v4 + 64);
          v46 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v47 = *(_QWORD *)(v4 + 56);
          if (v46 + 16 >= v47)
            v46 = 0;
          if (v17 <= 0x10)
            v17 = 16;
          v48 = v46 + v17;
          if (v47 <= v48)
            v49 = 0;
          else
            v49 = v48;
          *(_QWORD *)(v4 + 72) = v49;
          v50 = (unint64_t *)(*(_QWORD *)(v45 + 16) + 128);
          do
            v51 = __ldaxr(v50);
          while (__stlxr(v49, v50));
          if (v51 == 0x80000000 || *(_DWORD *)(v4 + 108))
          {
            if (*(_BYTE *)(v4 + 96))
              result = (WebKit::RemoteGraphicsContextGLProxy *)MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
            *(_DWORD *)(v4 + 108) = 0;
          }
          return result;
        }
LABEL_67:
        v52 = v97;
        if (v97)
        {
          v53 = (v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v54 = v53 - v95;
          if (v53 < v95)
          {
            v55 = 0;
          }
          else
          {
            v55 = 0;
            if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v54 + 2 <= v96)
            {
              *(_WORD *)(v95 + v54) = 2821;
              v55 = v54 + 2;
            }
          }
          v56 = *(_QWORD *)(v4 + 64);
          v57 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v58 = *(_QWORD *)(v4 + 56);
          if (v57 + 16 >= v58)
            v57 = 0;
          if (v55 <= 0x10)
            v55 = 16;
          v59 = v57 + v55;
          if (v58 <= v59)
            v59 = 0;
          *(_QWORD *)(v4 + 72) = v59;
          v60 = (unint64_t *)(*(_QWORD *)(v56 + 16) + 128);
          do
            __ldaxr(v60);
          while (__stlxr(v59, v60));
          *(_DWORD *)(v4 + 108) = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v94, (uint64_t **)(v4 + 8));
          v61 = v94;
          v62 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v62 = 997;
          *(_QWORD *)(v62 + 8) = v9;
          *(_QWORD *)(v62 + 528) = v62 + 16;
          *(_QWORD *)(v62 + 536) = v62 + 16;
          *(_OWORD *)(v62 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v62 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v62);
          v98 = (IPC::Encoder *)v62;
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v62, 4uLL, 4) = v88;
          *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v62, 8uLL, 8) = v8;
          if (v8)
          {
            v63 = IPC::Encoder::grow((IPC::Encoder *)v62, 4uLL, 4 * v8);
            memcpy(v63, __src, 4 * v8);
            v64 = IPC::Encoder::grow((IPC::Encoder *)v62, 4uLL, 4 * v8);
            memcpy(v64, v90, 4 * v8);
            v65 = IPC::Encoder::grow((IPC::Encoder *)v62, 4uLL, 4 * v8);
            memcpy(v65, v91, 4 * v8);
            v66 = IPC::Encoder::grow((IPC::Encoder *)v62, 4uLL, 4 * v8);
            memcpy(v66, v92, 4 * v8);
            v67 = IPC::Encoder::grow((IPC::Encoder *)v62, 4uLL, 4 * v8);
            memcpy(v67, v93, 4 * v8);
          }
          *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v62, 4uLL, 4) = a4;
          v69 = IPC::Connection::sendMessageImpl((uint64_t)v61, (uint64_t *)&v98, 1, 0);
          v70 = v98;
          v98 = 0;
          if (v70)
          {
            IPC::Encoder::~Encoder(v70, v68);
            WTF::fastFree(v71, v72);
          }
          result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v94);
          if (!v69)
            return result;
          goto LABEL_85;
        }
        __break(1u);
LABEL_123:
        v76 = (unint64_t)v43;
LABEL_92:
        v77 = (_QWORD *)((v52 + v76 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v77 >= v52 + v76)
        {
          v76 = (unint64_t)v77 - v52 + 8;
          if ((unint64_t)v77 - v52 > 0xFFFFFFFFFFFFFFF7 || v76 > (unint64_t)v43)
            goto LABEL_85;
          *v77 = v9;
        }
        if (!v43)
          goto LABEL_85;
        v79 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v80 = *(_QWORD *)(v4 + 56);
        if (v79 + 16 >= v80)
          v79 = 0;
        if (v76 <= 0x10)
          v76 = 16;
        v81 = v79 + v76;
        if (v80 <= v81)
          v82 = 0;
        else
          v82 = v81;
        *(_QWORD *)(v4 + 72) = v82;
        v83 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v82, v83));
        v85 = *(_DWORD *)(v4 + 108);
        if (v84 == 0x80000000 || v85 != 0)
        {
          v87 = v85 + 1;
          *(_DWORD *)(v4 + 108) = v87;
          if (v87 >= *(_DWORD *)(v4 + 104))
          {
            if (*(_BYTE *)(v4 + 96))
              MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
            *(_DWORD *)(v4 + 108) = 0;
          }
        }
        *(_QWORD *)(v4 + 48) = v9;
      }
    }
    IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v95, v11);
    if (v97)
    {
      v52 = v95;
      v73 = (_DWORD *)v96;
      v74 = (v95 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v75 = v74 - v95;
      if (v74 < v95)
      {
        v76 = 0;
        v43 = (_DWORD *)v96;
      }
      else
      {
        v43 = 0;
        if (v75 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_123;
        v76 = 0;
        if (v75 + 2 <= v96)
        {
          *(_WORD *)(v95 + v75) = 2822;
          v43 = v73;
          v76 = v75 + 2;
        }
      }
      goto LABEL_92;
    }
LABEL_85:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
    return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
  }
  return result;
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

void WebKit::RemoteGraphicsContextGLProxy::wasCreated(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v7;

  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    if (*(_BYTE *)(a4 + 24))
    {
      IPC::StreamClientConnectionBuffer::setSemaphores(v4 + 56, a2, a3);
      *((_BYTE *)this + 104) = 1;
      if (*(_BYTE *)(a4 + 24))
      {
        WebKit::RemoteGraphicsContextGLProxy::initialize((uint64_t)this, (double *)a4);
      }
      else
      {
        v7 = std::__throw_bad_optional_access[abi:sn180100]();
        IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v7);
      }
    }
    else
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
      (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    }
  }
}

uint64_t IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  uint64_t v7;
  uint64_t *v9;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (uint64_t **)(a1 + 8));
  v7 = IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated>((uint64_t)v9, a2, a3, a4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v9);
  return v7;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::didClose(WebKit::RemoteGraphicsContextGLProxy *this, IPC::Connection *a2)
{
  uint64_t **v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  WTF *v12;
  void *v13;

  v3 = (uint64_t **)*((_QWORD *)this + 12);
  if (v3)
  {
    IPC::StreamClientConnection::invalidate(v3);
    v5 = (unsigned int *)*((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5);
        WTF::fastFree(v12, v13);
      }
    }
    v8 = (unsigned int *)*((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v4);
      }
    }
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  return (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
}

unsigned int **WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  IPC::StreamClientConnection *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (IPC::StreamClientConnection *)v2;
      WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(&v6);
    }
  }
  return a1;
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::activeTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ActiveTexture>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ActiveTexture>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ActiveTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::activeTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::activeTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::attachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::AttachShader>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::AttachShader>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::AttachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::attachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::attachShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, unsigned int a2, unsigned int a3, const WTF::String *a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  uint64_t *v5[2];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = (uint64_t *)__PAIR64__(a3, a2);
    v5[1] = (uint64_t *)a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindAttribLocation>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindAttribLocation>(WTF::ApproximateTime *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, unsigned int a2, unsigned int a3, const WTF::String *a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindAttribLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindBuffer>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindBuffer>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindFramebuffer>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindFramebuffer>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindRenderbuffer>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindRenderbuffer>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindTexture>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindTexture>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    *(float *)v6 = a2;
    *(float *)&v6[1] = a3;
    *(float *)&v6[2] = a4;
    *(float *)&v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendColor>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendColor>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendColor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendEquation(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquation>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquation>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquation(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparate>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparate>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFunc>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFunc>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFunc((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparate>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparate>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::checkFramebufferStatus(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[8];
  unsigned int v8;
  int v9;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v9;
  if (!v9)
  {
    v4 = v8;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v9;
  if (v9 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::checkFramebufferStatus(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::checkFramebufferStatus((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clear(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Clear>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Clear>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Clear,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clear(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::clear((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clearColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    *(float *)v6 = a2;
    *(float *)&v6[1] = a3;
    *(float *)&v6[2] = a4;
    *(float *)&v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearColor>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearColor>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearColor(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearColor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clearDepth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  float v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearDepth>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearDepth>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearDepth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearDepth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearDepth((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clearStencil(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearStencil>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearStencil>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearStencil,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearStencil(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearStencil((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::colorMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  char v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2 != 0;
    v6[1] = a3 != 0;
    v6[2] = a4 != 0;
    v6[3] = a5 != 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ColorMask>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ColorMask>(WTF::ApproximateTime *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::colorMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::colorMask((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compileShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompileShader>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompileShader>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompileShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compileShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::compileShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::copyTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  WebKit::RemoteGraphicsContextGLProxy *v9;
  _DWORD v10[8];

  if (*((_QWORD *)this + 12))
  {
    v9 = this;
    v10[0] = a2;
    v10[1] = a3;
    v10[2] = a4;
    v10[3] = a5;
    v10[4] = a6;
    v10[5] = a7;
    v10[6] = a8;
    v10[7] = a9;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyTexImage2D>(this, v10);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v9);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v9 + 2) + 2312))((_QWORD *)v9 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyTexImage2D>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTexImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  WebKit::RemoteGraphicsContextGLProxy *v9;
  _DWORD v10[8];

  if (*((_QWORD *)this + 12))
  {
    v9 = this;
    v10[0] = a2;
    v10[1] = a3;
    v10[2] = a4;
    v10[3] = a5;
    v10[4] = a6;
    v10[5] = a7;
    v10[6] = a8;
    v10[7] = a9;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage2D>(this, v10);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v9);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v9 + 2) + 2312))((_QWORD *)v9 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage2D>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createBuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateBuffer>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateBuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createBuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateFramebuffer>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateFramebuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createProgram(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateProgram>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateProgram>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createProgram(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateRenderbuffer>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateRenderbuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  int v6[2];

  if (!*((_QWORD *)this + 12))
    return 0;
  v3 = *((_DWORD *)this + 44);
  v4 = (v3 + 1);
  *((_DWORD *)this + 44) = v4;
  v6[0] = v3 + 1;
  v6[1] = a2;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateShader>(this, v6))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v4;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateShader>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::createShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createTexture(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateTexture>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateTexture>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createTexture(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::cullFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CullFace>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CullFace>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CullFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::cullFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::cullFace((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteBuffer>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteBuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteFramebuffer>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteFramebuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteProgram>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteProgram>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteRenderbuffer>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteRenderbuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteShader>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteShader>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteTexture>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteTexture>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::depthFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DepthFunc>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DepthFunc>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::depthFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::depthFunc((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::depthMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  BOOL v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2 != 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DepthMask>(this, (char *)&v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DepthMask>(WTF::ApproximateTime *a1, char *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::depthMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::depthMask((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::depthRange(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    *(float *)v4 = a2;
    *(float *)&v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DepthRange>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DepthRange>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::depthRange(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::depthRange((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::detachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DetachShader>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DetachShader>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DetachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::detachShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::detachShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::disable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Disable>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Disable>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Disable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::disable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::disable((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::disableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DisableVertexAttribArray>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DisableVertexAttribArray>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::disableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::disableVertexAttribArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawArrays(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawArrays>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawArrays>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArrays,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawArrays(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawArrays((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6[4];
  uint64_t v7;

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v7 = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawElements>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawElements>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawElements((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::enable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Enable>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Enable>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Enable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::enable(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::enable((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::enableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EnableVertexAttribArray>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EnableVertexAttribArray>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::enableVertexAttribArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::enableVertexAttribArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::finish(WebKit::RemoteGraphicsContextGLProxy *this)
{
  WebKit::RemoteGraphicsContextGLProxy *v1;
  char v2;

  if (*((_QWORD *)this + 12))
  {
    v1 = this;
    v2 = 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Finish>(this, (uint64_t)&v2);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v1);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v1 + 2) + 2312))((_QWORD *)v1 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Finish>(WTF::ApproximateTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Finish,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, v6, a2, v4);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::finish(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::finish((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::flush(WebKit::RemoteGraphicsContextGLProxy *this)
{
  WebKit::RemoteGraphicsContextGLProxy *v1;
  char v2;

  if (*((_QWORD *)this + 12))
  {
    v1 = this;
    v2 = 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Flush>(this, (uint64_t)&v2);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v1);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v1 + 2) + 2312))((_QWORD *)v1 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Flush>(WTF::ApproximateTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Flush,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, v6, a2, v4);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::flush(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::flush((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::framebufferRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FramebufferRenderbuffer>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FramebufferRenderbuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::framebufferRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::framebufferRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::framebufferTexture2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FramebufferTexture2D>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FramebufferTexture2D>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTexture2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::framebufferTexture2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::framebufferTexture2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::frontFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FrontFace>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FrontFace>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FrontFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::frontFace(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::frontFace((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::generateMipmap(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::GenerateMipmap>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::GenerateMipmap>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::GenerateMipmap,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::generateMipmap(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::generateMipmap((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

BOOL WebKit::RemoteGraphicsContextGLProxy::getActiveAttrib(WTF::ApproximateTime *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  _BOOL8 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v11[2];
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (!*((_QWORD *)a1 + 12))
    return 0;
  v11[0] = a2;
  v11[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveAttrib>(a1, v11, (uint64_t)v12);
  if (v15)
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(a1);
    (*(void (**)(_QWORD *))(*((_QWORD *)a1 + 2) + 2312))((_QWORD *)a1 + 2);
    v7 = 0;
  }
  else
  {
    v8 = v13;
    v13 = 0;
    v9 = *(WTF::StringImpl **)a4;
    *(_QWORD *)a4 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    *(_QWORD *)(a4 + 8) = v14;
    v7 = v12[8] != 0;
  }
  if (v15 != -1)
    ((void (*)(unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(v11, v12);
  return v7;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveAttrib>@<X0>(WTF::ApproximateTime *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveAttrib,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

BOOL `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveAttrib(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveAttrib((WTF::ApproximateTime *)(a1 - 16), a2, a3, a4);
}

BOOL WebKit::RemoteGraphicsContextGLProxy::getActiveUniform(WTF::ApproximateTime *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  WTF::StringImpl *v6;
  _BOOL8 v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  unsigned int v11[2];
  _BYTE v12[16];
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (!*((_QWORD *)a1 + 12))
    return 0;
  v11[0] = a2;
  v11[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniform>(a1, v11, (uint64_t)v12);
  if (v15)
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(a1);
    (*(void (**)(_QWORD *))(*((_QWORD *)a1 + 2) + 2312))((_QWORD *)a1 + 2);
    v7 = 0;
  }
  else
  {
    v8 = v13;
    v13 = 0;
    v9 = *(WTF::StringImpl **)a4;
    *(_QWORD *)a4 = v8;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
    *(_QWORD *)(a4 + 8) = v14;
    v7 = v12[8] != 0;
  }
  if (v15 != -1)
    ((void (*)(unsigned int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v15])(v11, v12);
  return v7;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniform>@<X0>(WTF::ApproximateTime *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniform,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

BOOL `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniform(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniform((WTF::ApproximateTime *)(a1 - 16), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  const WTF::String *v8;
  _BYTE v9[8];
  unsigned int v10;
  int v11;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7 = a2;
  v8 = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetAttribLocation>(this, (uint64_t)&v7, (uint64_t)v9);
  v4 = v11;
  if (!v11)
  {
    v5 = v10;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v11;
  if (v11 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, v9);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetAttribLocation>@<X0>(WTF::ApproximateTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getAttribLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getAttribLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getBufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetBufferParameteri>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetBufferParameteri>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getBufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getBufferParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getString@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5;
  _DWORD *v6;
  int v7;
  char v8[8];
  _DWORD *v9;
  int v10;

  if (!*((_QWORD *)this + 12))
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  v7 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetString>(this, &v7, (uint64_t)v8);
  if (!v10)
  {
    v6 = v9;
    if (v9)
      *v9 += 2;
    v5 = 0;
    *a3 = v6;
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
  this = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
  v5 = v10;
  *a3 = 0;
  if (v5 != -1)
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  return this;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetString>@<X0>(WTF::ApproximateTime *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetString,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getString@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getString((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getFloatv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  WebKit::RemoteGraphicsContextGLProxy *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL8 v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  char v43;
  uint64_t *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  int v56;
  uint64_t v57;
  int v58;
  void *v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  unsigned int v81;
  char v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  __int128 v86;
  char v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t *v93;
  int v94;
  char v95;
  _BYTE v96[24];
  int v97;
  IPC::Encoder *v98;
  IPC::Decoder *v99;
  _BYTE v100[15];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 12);
  if (!v4)
    return result;
  v7 = result;
  v83 = a2;
  v84 = a4;
  v8 = *((_QWORD *)result + 9);
  v9 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v10 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v10 = v9 + v11;
  }
  if (*(_QWORD *)(v4 + 48) == v8)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v86, v10);
  if (!v87)
  {
LABEL_140:
    v82 = 15;
    goto LABEL_138;
  }
  v65 = *((_QWORD *)&v86 + 1);
  v66 = v86;
  v67 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v68 = v67 - v86;
  if (v67 >= (unint64_t)v86)
  {
    v69 = v68 + 2;
    if (v68 <= 0xFFFFFFFFFFFFFFFDLL && v69 <= *((_QWORD *)&v86 + 1))
    {
      *(_WORD *)(v86 + v68) = 2822;
      goto LABEL_107;
    }
    v65 = 0;
  }
  v69 = 0;
LABEL_107:
  v71 = (_QWORD *)((v66 + v69 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v71 >= v66 + v69)
  {
    v69 = (unint64_t)v71 - v66 + 8;
    if ((unint64_t)v71 - v66 > 0xFFFFFFFFFFFFFFF7 || v69 > v65)
      goto LABEL_137;
    *v71 = v8;
  }
  if (!v65)
  {
LABEL_137:
    v82 = 17;
LABEL_138:
    v96[0] = v82;
    v97 = 1;
    goto LABEL_95;
  }
  v73 = *(_QWORD *)(v4 + 64);
  v74 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v75 = *(_QWORD *)(v4 + 56);
  if (v74 + 16 >= v75)
    v74 = 0;
  if (v69 <= 0x10)
    v69 = 16;
  v76 = v74 + v69;
  if (v75 <= v76)
    v76 = 0;
  *(_QWORD *)(v4 + 72) = v76;
  v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v76, v77));
  v79 = *(_DWORD *)(v4 + 108);
  if (v78 == 0x80000000 || v79 != 0)
  {
    v81 = v79 + 1;
    *(_DWORD *)(v4 + 108) = v81;
    if (v81 >= *(_DWORD *)(v4 + 104))
    {
      if (*(_BYTE *)(v4 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
      *(_DWORD *)(v4 + 108) = 0;
    }
  }
  *(_QWORD *)(v4 + 48) = v8;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v90, v10);
  if (!v92)
  {
    v96[0] = 15;
    v97 = 1;
    goto LABEL_94;
  }
  v12 = v90;
  v13 = v91;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)(v4 + 8));
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    v96[0] = 11;
    v14 = 1;
    v97 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)v96);
    v89 = 1;
    if (v97 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34E3110[v97])(&v93, v96);
    goto LABEL_66;
  }
  *(_QWORD *)v96 = v12;
  *(_QWORD *)&v96[8] = v13;
  *(_QWORD *)&v96[16] = 0;
  v15 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v12;
  if (v15 < v12)
  {
    v17 = 0;
  }
  else
  {
    if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_133;
    v17 = v16 + 2;
    if (v16 + 2 > v13)
      goto LABEL_133;
    *(_WORD *)(v12 + v16) = 3562;
    *(_QWORD *)&v96[16] = v16 + 2;
  }
  while (1)
  {
    v18 = (_QWORD *)((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v12 + v17)
    {
      v19 = (char *)v18 - v12;
      if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v19 + 8) > v13)
      {
        *(_QWORD *)&v96[8] = 0;
      }
      else
      {
        *v18 = v14;
        *(_QWORD *)&v96[16] = v19 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>((uint64_t *)v96, (uint64_t)&v83);
    if (*(_QWORD *)&v96[8])
    {
      v20 = *(_QWORD *)&v96[16];
      v21 = *(_QWORD *)(v4 + 64);
      v22 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v23 = *(_QWORD *)(v4 + 56);
      if (v22 + 16 >= v23)
        v22 = 0;
      if (*(_QWORD *)&v96[16] <= 0x10uLL)
        v20 = 16;
      v24 = v22 + v20;
      if (v23 <= v24)
        v25 = 0;
      else
        v25 = v24;
      *(_QWORD *)(v4 + 72) = v25;
      v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v25, v26));
      if (v27 == 0x80000000 || *(_DWORD *)(v4 + 108))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
      v12 = v4 + 88;
      while (1)
      {
        v28 = *(unint64_t **)(*(_QWORD *)(v4 + 64) + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(0x80000000uLL, v28));
        v30 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128));
        if (!(v29 | v30 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v4 + 96))
        {
          v31 = IPC::Semaphore::waitFor((semaphore_t *)(v4 + 88), v10);
          if (v31)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v31);
            if (v32 < v10)
              continue;
          }
        }
        LOBYTE(v93) = 16;
        v94 = 1;
LABEL_48:
        v95 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v4 + 64) + 16));
      *(_QWORD *)(v4 + 72) = 0;
      v33 = *(_QWORD *)(v4 + 64);
      v34 = *(_QWORD *)(v33 + 8);
      if (v34 <= 0xFF)
        goto LABEL_132;
      v35 = *(_QWORD *)(v4 + 56);
      v36 = *(_QWORD *)(v33 + 16);
      v37 = v34 - 256;
      if (v35)
      {
        v12 = v35 - 1;
        if (v37 < v35 - 1)
          goto LABEL_132;
      }
      else
      {
        v12 = v37;
      }
      v38 = v36 + 256;
      v39 = WTF::fastMalloc((WTF *)0x48);
      v40 = IPC::Decoder::Decoder(v39, v38, v12, *(_QWORD *)(v4 + 48));
      if (*(_WORD *)(v40 + 50) != 2821)
      {
        v93 = (uint64_t *)v40;
        v94 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v40);
      WTF::fastFree(v41, v42);
      IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xDEAu, (uint64_t)v100, v10);
      LOBYTE(v93) = 0;
      v94 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v93, (uint64_t)v100);
      v95 = 1;
      if (*(_DWORD *)&v100[8] != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3480[*(unsigned int *)&v100[8]])(&v98, v100);
    }
    else
    {
      LOBYTE(v93) = 0;
      v95 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v99);
    if (!v95)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_66;
    }
    if (v94 == 1)
    {
      LOBYTE(v86) = (_BYTE)v93;
      v45 = 1;
      v88 = 1;
      v89 = 1;
LABEL_65:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v45])(v96, &v93);
      goto LABEL_66;
    }
    if (v94)
      goto LABEL_139;
    IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)v96, v93);
    if (v96[16])
    {
      v43 = v96[0];
      *(_QWORD *)v100 = *(_QWORD *)&v96[1];
      *(_QWORD *)&v100[7] = *(_QWORD *)&v96[8];
      if (!v95)
        goto LABEL_132;
      if (v94)
        goto LABEL_139;
      v44 = v93;
      v93 = 0;
      *(_QWORD *)&v96[9] = *(_QWORD *)v100;
      *(_QWORD *)&v96[16] = *(_QWORD *)&v100[7];
      *(_QWORD *)v96 = v44;
      v96[8] = v43;
      v97 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)v96);
      v89 = 1;
      if (v97 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3110[v97])(&v98, v96);
    }
    else
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
    }
    if (v95)
    {
      v45 = v94;
      if (v94 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      v96[0] = 0;
      v97 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v96, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E34E3110[v88])(&v93, &v86);
      }
      goto LABEL_94;
    }
    if (v92)
      break;
LABEL_132:
    __break(1u);
LABEL_133:
    v13 = 0;
    v17 = 0;
    *(_QWORD *)&v96[8] = 0;
  }
  v46 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v46 - v90;
  if (v46 < v90)
  {
    v48 = 0;
  }
  else
  {
    v48 = 0;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v91)
    {
      *(_WORD *)(v90 + v47) = 2821;
      v48 = v47 + 2;
    }
  }
  v49 = *(_QWORD *)(v4 + 64);
  v50 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = *(_QWORD *)(v4 + 56);
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v48 <= 0x10)
    v48 = 16;
  v52 = v50 + v48;
  if (v51 <= v52)
    v52 = 0;
  *(_QWORD *)(v4 + 72) = v52;
  v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
  do
    __ldaxr(v53);
  while (__stlxr(v52, v53));
  *(_DWORD *)(v4 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, (uint64_t **)(v4 + 8));
  v54 = v85;
  v99 = 0;
  IPC::Connection::createSyncMessageEncoder(3562, v8, (uint64_t *)&v99, (uint64_t *)&v98);
  v55 = v98;
  v56 = v83;
  *(_DWORD *)IPC::Encoder::grow(v98, 4uLL, 4) = v56;
  v57 = v84;
  *(_QWORD *)IPC::Encoder::grow(v55, 8uLL, 8) = v57;
  IPC::Connection::sendSyncMessage((uint64_t)v54, (uint64_t)v99, (uint64_t *)&v98, 0, (uint64_t)&v93, v10);
  if (v94)
  {
    if (v94 == 1)
    {
      v96[0] = (_BYTE)v93;
      v58 = 1;
      v97 = 1;
      goto LABEL_90;
    }
LABEL_139:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)&v86, v93);
  if (v87)
  {
    *(_QWORD *)v100 = *(_QWORD *)((char *)&v86 + 1);
    *(_QWORD *)&v100[7] = *((_QWORD *)&v86 + 1);
    v58 = v94;
    if (v94)
      goto LABEL_139;
    v60 = v93;
    v93 = 0;
    *(_QWORD *)&v96[9] = *(_QWORD *)v100;
    *(_QWORD *)&v96[16] = *(_QWORD *)&v100[7];
    *(_QWORD *)v96 = v60;
    v96[8] = v86;
    v97 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v58])(&v86, &v93);
  }
  else
  {
    v96[0] = 13;
    v97 = 1;
    v58 = v94;
    if (v94 != -1)
      goto LABEL_90;
  }
  v61 = v98;
  v98 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v59);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v85);
LABEL_94:
  if (v97)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
    v64 = v97;
    if (v97 == -1)
      return result;
  }
  else
  {
    memcpy(a3, *(const void **)&v96[8], 4 * a4);
    v64 = 0;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34E3110[v64])(&v86, v96);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getFloatv(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getFloatv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getIntegerv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  WebKit::RemoteGraphicsContextGLProxy *v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  _BOOL8 v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  char v43;
  uint64_t *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  int v56;
  uint64_t v57;
  int v58;
  void *v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  unsigned int v81;
  char v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  __int128 v86;
  char v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t *v93;
  int v94;
  char v95;
  _BYTE v96[24];
  int v97;
  IPC::Encoder *v98;
  IPC::Decoder *v99;
  _BYTE v100[15];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 12);
  if (!v4)
    return result;
  v7 = result;
  v83 = a2;
  v84 = a4;
  v8 = *((_QWORD *)result + 9);
  v9 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v10 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v10 = v9 + v11;
  }
  if (*(_QWORD *)(v4 + 48) == v8)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v86, v10);
  if (!v87)
  {
LABEL_140:
    v82 = 15;
    goto LABEL_138;
  }
  v65 = *((_QWORD *)&v86 + 1);
  v66 = v86;
  v67 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v68 = v67 - v86;
  if (v67 >= (unint64_t)v86)
  {
    v69 = v68 + 2;
    if (v68 <= 0xFFFFFFFFFFFFFFFDLL && v69 <= *((_QWORD *)&v86 + 1))
    {
      *(_WORD *)(v86 + v68) = 2822;
      goto LABEL_107;
    }
    v65 = 0;
  }
  v69 = 0;
LABEL_107:
  v71 = (_QWORD *)((v66 + v69 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v71 >= v66 + v69)
  {
    v69 = (unint64_t)v71 - v66 + 8;
    if ((unint64_t)v71 - v66 > 0xFFFFFFFFFFFFFFF7 || v69 > v65)
      goto LABEL_137;
    *v71 = v8;
  }
  if (!v65)
  {
LABEL_137:
    v82 = 17;
LABEL_138:
    v96[0] = v82;
    v97 = 1;
    goto LABEL_95;
  }
  v73 = *(_QWORD *)(v4 + 64);
  v74 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v75 = *(_QWORD *)(v4 + 56);
  if (v74 + 16 >= v75)
    v74 = 0;
  if (v69 <= 0x10)
    v69 = 16;
  v76 = v74 + v69;
  if (v75 <= v76)
    v76 = 0;
  *(_QWORD *)(v4 + 72) = v76;
  v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v76, v77));
  v79 = *(_DWORD *)(v4 + 108);
  if (v78 == 0x80000000 || v79 != 0)
  {
    v81 = v79 + 1;
    *(_DWORD *)(v4 + 108) = v81;
    if (v81 >= *(_DWORD *)(v4 + 104))
    {
      if (*(_BYTE *)(v4 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
      *(_DWORD *)(v4 + 108) = 0;
    }
  }
  *(_QWORD *)(v4 + 48) = v8;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v90, v10);
  if (!v92)
  {
    v96[0] = 15;
    v97 = 1;
    goto LABEL_94;
  }
  v12 = v90;
  v13 = v91;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)(v4 + 8));
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    v96[0] = 11;
    v14 = 1;
    v97 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)v96);
    v89 = 1;
    if (v97 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34E3120[v97])(&v93, v96);
    goto LABEL_66;
  }
  *(_QWORD *)v96 = v12;
  *(_QWORD *)&v96[8] = v13;
  *(_QWORD *)&v96[16] = 0;
  v15 = (v12 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v12;
  if (v15 < v12)
  {
    v17 = 0;
  }
  else
  {
    if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_133;
    v17 = v16 + 2;
    if (v16 + 2 > v13)
      goto LABEL_133;
    *(_WORD *)(v12 + v16) = 3569;
    *(_QWORD *)&v96[16] = v16 + 2;
  }
  while (1)
  {
    v18 = (_QWORD *)((v12 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v12 + v17)
    {
      v19 = (char *)v18 - v12;
      if ((unint64_t)v18 - v12 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v19 + 8) > v13)
      {
        *(_QWORD *)&v96[8] = 0;
      }
      else
      {
        *v18 = v14;
        *(_QWORD *)&v96[16] = v19 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>((uint64_t *)v96, (uint64_t)&v83);
    if (*(_QWORD *)&v96[8])
    {
      v20 = *(_QWORD *)&v96[16];
      v21 = *(_QWORD *)(v4 + 64);
      v22 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v23 = *(_QWORD *)(v4 + 56);
      if (v22 + 16 >= v23)
        v22 = 0;
      if (*(_QWORD *)&v96[16] <= 0x10uLL)
        v20 = 16;
      v24 = v22 + v20;
      if (v23 <= v24)
        v25 = 0;
      else
        v25 = v24;
      *(_QWORD *)(v4 + 72) = v25;
      v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v25, v26));
      if (v27 == 0x80000000 || *(_DWORD *)(v4 + 108))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
      v12 = v4 + 88;
      while (1)
      {
        v28 = *(unint64_t **)(*(_QWORD *)(v4 + 64) + 16);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(0x80000000uLL, v28));
        v30 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128));
        if (!(v29 | v30 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v4 + 96))
        {
          v31 = IPC::Semaphore::waitFor((semaphore_t *)(v4 + 88), v10);
          if (v31)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v31);
            if (v32 < v10)
              continue;
          }
        }
        LOBYTE(v93) = 16;
        v94 = 1;
LABEL_48:
        v95 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v4 + 64) + 16));
      *(_QWORD *)(v4 + 72) = 0;
      v33 = *(_QWORD *)(v4 + 64);
      v34 = *(_QWORD *)(v33 + 8);
      if (v34 <= 0xFF)
        goto LABEL_132;
      v35 = *(_QWORD *)(v4 + 56);
      v36 = *(_QWORD *)(v33 + 16);
      v37 = v34 - 256;
      if (v35)
      {
        v12 = v35 - 1;
        if (v37 < v35 - 1)
          goto LABEL_132;
      }
      else
      {
        v12 = v37;
      }
      v38 = v36 + 256;
      v39 = WTF::fastMalloc((WTF *)0x48);
      v40 = IPC::Decoder::Decoder(v39, v38, v12, *(_QWORD *)(v4 + 48));
      if (*(_WORD *)(v40 + 50) != 2821)
      {
        v93 = (uint64_t *)v40;
        v94 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v40);
      WTF::fastFree(v41, v42);
      IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xDF1u, (uint64_t)v100, v10);
      LOBYTE(v93) = 0;
      v94 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v93, (uint64_t)v100);
      v95 = 1;
      if (*(_DWORD *)&v100[8] != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3480[*(unsigned int *)&v100[8]])(&v98, v100);
    }
    else
    {
      LOBYTE(v93) = 0;
      v95 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v99);
    if (!v95)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_66;
    }
    if (v94 == 1)
    {
      LOBYTE(v86) = (_BYTE)v93;
      v45 = 1;
      v88 = 1;
      v89 = 1;
LABEL_65:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v45])(v96, &v93);
      goto LABEL_66;
    }
    if (v94)
      goto LABEL_139;
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v96, v93);
    if (v96[16])
    {
      v43 = v96[0];
      *(_QWORD *)v100 = *(_QWORD *)&v96[1];
      *(_QWORD *)&v100[7] = *(_QWORD *)&v96[8];
      if (!v95)
        goto LABEL_132;
      if (v94)
        goto LABEL_139;
      v44 = v93;
      v93 = 0;
      *(_QWORD *)&v96[9] = *(_QWORD *)v100;
      *(_QWORD *)&v96[16] = *(_QWORD *)&v100[7];
      *(_QWORD *)v96 = v44;
      v96[8] = v43;
      v97 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)v96);
      v89 = 1;
      if (v97 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3120[v97])(&v98, v96);
    }
    else
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
    }
    if (v95)
    {
      v45 = v94;
      if (v94 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      v96[0] = 0;
      v97 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v96, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E34E3120[v88])(&v93, &v86);
      }
      goto LABEL_94;
    }
    if (v92)
      break;
LABEL_132:
    __break(1u);
LABEL_133:
    v13 = 0;
    v17 = 0;
    *(_QWORD *)&v96[8] = 0;
  }
  v46 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v46 - v90;
  if (v46 < v90)
  {
    v48 = 0;
  }
  else
  {
    v48 = 0;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v91)
    {
      *(_WORD *)(v90 + v47) = 2821;
      v48 = v47 + 2;
    }
  }
  v49 = *(_QWORD *)(v4 + 64);
  v50 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = *(_QWORD *)(v4 + 56);
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v48 <= 0x10)
    v48 = 16;
  v52 = v50 + v48;
  if (v51 <= v52)
    v52 = 0;
  *(_QWORD *)(v4 + 72) = v52;
  v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
  do
    __ldaxr(v53);
  while (__stlxr(v52, v53));
  *(_DWORD *)(v4 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, (uint64_t **)(v4 + 8));
  v54 = v85;
  v99 = 0;
  IPC::Connection::createSyncMessageEncoder(3569, v8, (uint64_t *)&v99, (uint64_t *)&v98);
  v55 = v98;
  v56 = v83;
  *(_DWORD *)IPC::Encoder::grow(v98, 4uLL, 4) = v56;
  v57 = v84;
  *(_QWORD *)IPC::Encoder::grow(v55, 8uLL, 8) = v57;
  IPC::Connection::sendSyncMessage((uint64_t)v54, (uint64_t)v99, (uint64_t *)&v98, 0, (uint64_t)&v93, v10);
  if (v94)
  {
    if (v94 == 1)
    {
      v96[0] = (_BYTE)v93;
      v58 = 1;
      v97 = 1;
      goto LABEL_90;
    }
LABEL_139:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v86, v93);
  if (v87)
  {
    *(_QWORD *)v100 = *(_QWORD *)((char *)&v86 + 1);
    *(_QWORD *)&v100[7] = *((_QWORD *)&v86 + 1);
    v58 = v94;
    if (v94)
      goto LABEL_139;
    v60 = v93;
    v93 = 0;
    *(_QWORD *)&v96[9] = *(_QWORD *)v100;
    *(_QWORD *)&v96[16] = *(_QWORD *)&v100[7];
    *(_QWORD *)v96 = v60;
    v96[8] = v86;
    v97 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v58])(&v86, &v93);
  }
  else
  {
    v96[0] = 13;
    v97 = 1;
    v58 = v94;
    if (v94 != -1)
      goto LABEL_90;
  }
  v61 = v98;
  v98 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v59);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v85);
LABEL_94:
  if (v97)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
    v64 = v97;
    if (v97 == -1)
      return result;
  }
  else
  {
    memcpy(a3, *(const void **)&v96[8], 4 * a4);
    v64 = 0;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34E3120[v64])(&v86, v96);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getIntegerv(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getIntegerv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getIntegeri_v(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, _OWORD *a4)
{
  uint64_t v4;
  WebKit::RemoteGraphicsContextGLProxy *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _BOOL8 v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  void *v41;
  unint64_t v42;
  char v43;
  uint64_t *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  int v56;
  int v57;
  int v58;
  unint64_t v59;
  void *v60;
  uint64_t *v61;
  IPC::Encoder *v62;
  WTF *v63;
  void *v64;
  int v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v72;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  unsigned int v82;
  char v83;
  int v84;
  int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t *v93;
  int v94;
  char v95;
  IPC::Decoder *v96;
  IPC::Encoder *v97;
  int v98;
  unint64_t v99;
  _OWORD *v100;
  unint64_t v101;
  char v102;

  v4 = *((_QWORD *)result + 12);
  if (!v4)
    return result;
  v6 = result;
  v84 = a2;
  v85 = a3;
  v7 = *((_QWORD *)result + 9);
  v8 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v9 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v9 = v8 + v10;
  }
  if (*(_QWORD *)(v4 + 48) == v7)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v86, v9);
  if (!(_BYTE)v88)
  {
LABEL_143:
    v83 = 15;
    goto LABEL_141;
  }
  v67 = v86;
  v66 = v87;
  v68 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v69 = v68 - (_QWORD)v86;
  if (v68 >= (unint64_t)v86)
  {
    v70 = v69 + 2;
    if (v69 <= 0xFFFFFFFFFFFFFFFDLL && v70 <= v87)
    {
      *(_WORD *)((char *)v86 + v69) = 2822;
      goto LABEL_110;
    }
    v66 = 0;
  }
  v70 = 0;
LABEL_110:
  v72 = (char *)(((unint64_t)v67 + v70 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v72 >= (char *)v67 + v70)
  {
    v70 = v72 - (char *)v67 + 8;
    if ((unint64_t)(v72 - (char *)v67) > 0xFFFFFFFFFFFFFFF7 || v70 > v66)
      goto LABEL_140;
    *(_QWORD *)v72 = v7;
  }
  if (!v66)
  {
LABEL_140:
    v83 = 17;
LABEL_141:
    LOBYTE(v99) = v83;
    LODWORD(v101) = 1;
    goto LABEL_96;
  }
  v74 = *(_QWORD *)(v4 + 64);
  v75 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v76 = *(_QWORD *)(v4 + 56);
  if (v75 + 16 >= v76)
    v75 = 0;
  if (v70 <= 0x10)
    v70 = 16;
  v77 = v75 + v70;
  if (v76 <= v77)
    v77 = 0;
  *(_QWORD *)(v4 + 72) = v77;
  v78 = (unint64_t *)(*(_QWORD *)(v74 + 16) + 128);
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v77, v78));
  v80 = *(_DWORD *)(v4 + 108);
  if (v79 == 0x80000000 || v80 != 0)
  {
    v82 = v80 + 1;
    *(_DWORD *)(v4 + 108) = v82;
    if (v82 >= *(_DWORD *)(v4 + 104))
    {
      if (*(_BYTE *)(v4 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
      *(_DWORD *)(v4 + 108) = 0;
    }
  }
  *(_QWORD *)(v4 + 48) = v7;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v4 + 56, &v90, v9);
  if (!v92)
  {
    LOBYTE(v99) = 15;
    LODWORD(v101) = 1;
    goto LABEL_95;
  }
  v11 = v90;
  v12 = v91;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v96, (uint64_t **)(v4 + 8));
  v13 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v96, v13))
  {
    LOBYTE(v99) = 11;
    v13 = 1;
    LODWORD(v101) = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v99);
    v89 = 1;
    if ((_DWORD)v101 != -1)
      ((void (*)(uint64_t **, unint64_t *))off_1E34E3130[v101])(&v93, &v99);
    goto LABEL_67;
  }
  v99 = v11;
  v100 = (_OWORD *)v12;
  v101 = 0;
  v14 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = v14 - v11;
  if (v14 < v11)
  {
    v16 = 0;
  }
  else
  {
    if (v15 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_136;
    v16 = v15 + 2;
    if (v15 + 2 > v12)
      goto LABEL_136;
    *(_WORD *)(v11 + v15) = 3568;
    v101 = v15 + 2;
  }
  while (1)
  {
    v17 = (_QWORD *)((v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v17 >= v11 + v16)
    {
      v18 = (char *)v17 - v11;
      if ((unint64_t)v17 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v18 + 8) > v12)
      {
        v100 = 0;
      }
      else
      {
        *v17 = v13;
        v101 = (unint64_t)(v18 + 8);
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v99, &v84);
    if (v100)
    {
      v19 = v101;
      v20 = *(_QWORD *)(v4 + 64);
      v21 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v22 = *(_QWORD *)(v4 + 56);
      if (v21 + 16 >= v22)
        v21 = 0;
      if (v101 <= 0x10)
        v19 = 16;
      v23 = v21 + v19;
      if (v22 <= v23)
        v24 = 0;
      else
        v24 = v23;
      *(_QWORD *)(v4 + 72) = v24;
      v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v24, v25));
      if (v26 == 0x80000000 || *(_DWORD *)(v4 + 108))
      {
        if (*(_BYTE *)(v4 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v4 + 84));
        *(_DWORD *)(v4 + 108) = 0;
      }
      v11 = v4 + 88;
      while (1)
      {
        v27 = *(unint64_t **)(*(_QWORD *)(v4 + 64) + 16);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(0x80000000uLL, v27));
        v29 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 16) + 128));
        if (!(v28 | v29 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v4 + 96))
        {
          v30 = IPC::Semaphore::waitFor((semaphore_t *)(v4 + 88), v9);
          if (v30)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v30);
            if (v31 < v9)
              continue;
          }
        }
        LOBYTE(v93) = 16;
        v94 = 1;
LABEL_48:
        v95 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v4 + 64) + 16));
      *(_QWORD *)(v4 + 72) = 0;
      v32 = *(_QWORD *)(v4 + 64);
      v33 = *(_QWORD *)(v32 + 8);
      if (v33 <= 0xFF)
        goto LABEL_135;
      v34 = *(_QWORD *)(v4 + 56);
      v35 = *(_QWORD *)(v32 + 16);
      v36 = v33 - 256;
      if (v34)
      {
        v11 = v34 - 1;
        if (v36 < v34 - 1)
          goto LABEL_135;
      }
      else
      {
        v11 = v36;
      }
      v37 = v35 + 256;
      v38 = WTF::fastMalloc((WTF *)0x48);
      v39 = IPC::Decoder::Decoder(v38, v37, v11, *(_QWORD *)(v4 + 48));
      if (*(_WORD *)(v39 + 50) != 2821)
      {
        v93 = (uint64_t *)v39;
        v94 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v39);
      WTF::fastFree(v40, v41);
      IPC::Connection::waitForSyncReply((uint64_t)v96, v13, 0xDF0u, (uint64_t)&v97, v9);
      LOBYTE(v93) = 0;
      v94 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v93, (uint64_t)&v97);
      v95 = 1;
      if (v98 != -1)
        ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v98])(&v102, &v97);
    }
    else
    {
      LOBYTE(v93) = 0;
      v95 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v96);
    if (!v95)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_64;
    }
    if (v94 == 1)
    {
      v45 = (char)v93;
LABEL_63:
      LOBYTE(v86) = v45;
      v88 = 1;
      v89 = 1;
      goto LABEL_64;
    }
    if (v94)
      goto LABEL_142;
    v42 = IPC::Decoder::decode<std::tuple<std::span<int const,4ul>>>(v93);
    if (!v43)
    {
      v45 = 13;
      goto LABEL_63;
    }
    if (!v95)
      goto LABEL_135;
    if (v94)
      goto LABEL_142;
    v44 = v93;
    v93 = 0;
    v99 = (unint64_t)v44;
    v100 = (_OWORD *)v42;
    LODWORD(v101) = 0;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v99);
    v89 = 1;
    if ((_DWORD)v101 != -1)
      ((void (*)(IPC::Encoder **, unint64_t *))off_1E34E3130[v101])(&v97, &v99);
LABEL_64:
    if (v95 && v94 != -1)
      ((void (*)(unint64_t *, uint64_t **))off_1E34E3480[v94])(&v99, &v93);
LABEL_67:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v96);
    if (v89)
    {
      LOBYTE(v99) = 0;
      LODWORD(v101) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v99, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          ((void (*)(uint64_t **, uint64_t **))off_1E34E3130[v88])(&v93, &v86);
      }
      goto LABEL_95;
    }
    if (v92)
      break;
LABEL_135:
    __break(1u);
LABEL_136:
    v12 = 0;
    v16 = 0;
    v100 = 0;
  }
  v46 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v46 - v90;
  if (v46 < v90)
  {
    v48 = 0;
  }
  else
  {
    v48 = 0;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v91)
    {
      *(_WORD *)(v90 + v47) = 2821;
      v48 = v47 + 2;
    }
  }
  v49 = *(_QWORD *)(v4 + 64);
  v50 = (*(_QWORD *)(v4 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = *(_QWORD *)(v4 + 56);
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v48 <= 0x10)
    v48 = 16;
  v52 = v50 + v48;
  if (v51 <= v52)
    v52 = 0;
  *(_QWORD *)(v4 + 72) = v52;
  v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
  do
    __ldaxr(v53);
  while (__stlxr(v52, v53));
  *(_DWORD *)(v4 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v96, (uint64_t **)(v4 + 8));
  v54 = (uint64_t *)v96;
  v93 = 0;
  IPC::Connection::createSyncMessageEncoder(3568, v7, (uint64_t *)&v93, (uint64_t *)&v97);
  v55 = v97;
  v56 = v84;
  *(_DWORD *)IPC::Encoder::grow(v97, 4uLL, 4) = v56;
  v57 = v85;
  *(_DWORD *)IPC::Encoder::grow(v55, 4uLL, 4) = v57;
  IPC::Connection::sendSyncMessage((uint64_t)v54, (uint64_t)v93, (uint64_t *)&v97, 0, (uint64_t)&v86, v9);
  v58 = v87;
  if ((_DWORD)v87)
  {
    if ((_DWORD)v87 == 1)
    {
      LOBYTE(v99) = (_BYTE)v86;
      goto LABEL_90;
    }
LABEL_142:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_143;
  }
  v59 = IPC::Decoder::decode<std::tuple<std::span<int const,4ul>>>(v86);
  if ((_BYTE)v60)
  {
    if ((_DWORD)v87)
      goto LABEL_142;
    v61 = v86;
    v86 = 0;
    v99 = (unint64_t)v61;
    v100 = (_OWORD *)v59;
LABEL_90:
    LODWORD(v101) = v58;
LABEL_91:
    ((void (*)(char *, uint64_t **))off_1E34E3480[v58])(&v102, &v86);
  }
  else
  {
    LOBYTE(v99) = 13;
    LODWORD(v101) = 1;
    v58 = v87;
    if ((_DWORD)v87 != -1)
      goto LABEL_91;
  }
  v62 = v97;
  v97 = 0;
  if (v62)
  {
    IPC::Encoder::~Encoder(v62, v60);
    WTF::fastFree(v63, v64);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v96);
LABEL_95:
  v65 = v101;
  if ((_DWORD)v101)
  {
LABEL_96:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    v65 = v101;
    if ((_DWORD)v101 == -1)
      return result;
  }
  else
  {
    *a4 = *v100;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(uint64_t **, unint64_t *))off_1E34E3130[v65])(&v86, &v99);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getIntegeri_v(uint64_t a1, int a2, int a3, _OWORD *a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getIntegeri_v((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getInteger64(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[8];
  uint64_t v8;
  int v9;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v9;
  if (!v9)
  {
    v4 = v8;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v9;
  if (v9 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInteger64(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInteger64((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getInteger64i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  uint64_t v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64i>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64i>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInteger64i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInteger64i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getProgrami(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetProgrami>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetProgrami>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgrami,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getProgrami(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getProgrami((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getBooleanv(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, void *a3, size_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  int v7;
  unsigned int v8;
  size_t v9;
  char v10[8];
  void *__src;
  int v12;

  if (*((_QWORD *)result + 12))
  {
    v6 = result;
    v8 = a2;
    v9 = a4;
    WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetBooleanv>(result, &v8, (uint64_t)v10);
    if (v12)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
      v7 = v12;
      if (v12 == -1)
        return result;
    }
    else
    {
      memcpy(a3, __src, a4);
      v7 = 0;
    }
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(unsigned int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v7])(&v8, v10);
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetBooleanv>@<X0>(WTF::ApproximateTime *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBooleanv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getBooleanv(uint64_t a1, unsigned int a2, void *a3, size_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getBooleanv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getFramebufferAttachmentParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  int v5;
  uint64_t v6;
  uint64_t result;
  _DWORD v8[3];
  _BYTE v9[8];
  unsigned int v10;
  int v11;

  if (!*((_QWORD *)this + 12))
    return 0;
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = a4;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>(this, (unint64_t)v8, (uint64_t)v9);
  v5 = v11;
  if (!v11)
  {
    v6 = v10;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v6 = 0;
  result = 0;
  v5 = v11;
  if (v11 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(v8, v9);
    return v6;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getFramebufferAttachmentParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getFramebufferAttachmentParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getProgramInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5;
  _DWORD *v6;
  int v7;
  char v8[8];
  _DWORD *v9;
  int v10;

  if (!*((_QWORD *)this + 12))
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  v7 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>(this, &v7, (uint64_t)v8);
  if (!v10)
  {
    v6 = v9;
    if (v9)
      *v9 += 2;
    v5 = 0;
    *a3 = v6;
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
  this = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
  v5 = v10;
  *a3 = 0;
  if (v5 != -1)
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  return this;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>@<X0>(WTF::ApproximateTime *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgramInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getProgramInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getProgramInfoLog((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getRenderbufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getRenderbufferParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getRenderbufferParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getShaderi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetShaderi>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetShaderi>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderi((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getShaderInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5;
  _DWORD *v6;
  int v7;
  char v8[8];
  _DWORD *v9;
  int v10;

  if (!*((_QWORD *)this + 12))
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  v7 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>(this, &v7, (uint64_t)v8);
  if (!v10)
  {
    v6 = v9;
    if (v9)
      *v9 += 2;
    v5 = 0;
    *a3 = v6;
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
  this = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
  v5 = v10;
  *a3 = 0;
  if (v5 != -1)
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  return this;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>@<X0>(WTF::ApproximateTime *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderInfoLog@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderInfoLog((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  WebKit::RemoteGraphicsContextGLProxy *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  uint64_t *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  int v56;
  int v57;
  int v58;
  void *v59;
  uint64_t *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v71;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  unsigned int v81;
  char v82;
  int v83;
  int v84;
  uint64_t *v85;
  __int128 v86;
  char v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  __int128 v93;
  char v94;
  uint64_t *v95;
  int v96;
  char v97;
  unint64_t v98;
  __int128 v99;
  int v100;
  uint64_t *v101[2];

  v5 = *((_QWORD *)result + 12);
  if (!v5)
    return result;
  v8 = result;
  v83 = a2;
  v84 = a3;
  v9 = *((_QWORD *)result + 9);
  v10 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v11 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v11 = v10 + v12;
  }
  if (*(_QWORD *)(v5 + 48) == v9)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v86, v11);
  if (!v87)
  {
LABEL_141:
    v82 = 15;
    goto LABEL_139;
  }
  v65 = *((_QWORD *)&v86 + 1);
  v66 = v86;
  v67 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v68 = v67 - v86;
  if (v67 >= (unint64_t)v86)
  {
    v69 = v68 + 2;
    if (v68 <= 0xFFFFFFFFFFFFFFFDLL && v69 <= *((_QWORD *)&v86 + 1))
    {
      *(_WORD *)(v86 + v68) = 2822;
      goto LABEL_108;
    }
    v65 = 0;
  }
  v69 = 0;
LABEL_108:
  v71 = (_QWORD *)((v66 + v69 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v71 >= v66 + v69)
  {
    v69 = (unint64_t)v71 - v66 + 8;
    if ((unint64_t)v71 - v66 > 0xFFFFFFFFFFFFFFF7 || v69 > v65)
      goto LABEL_138;
    *v71 = v9;
  }
  if (!v65)
  {
LABEL_138:
    v82 = 17;
LABEL_139:
    LOBYTE(v98) = v82;
    v100 = 1;
    goto LABEL_95;
  }
  v73 = *(_QWORD *)(v5 + 64);
  v74 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v75 = *(_QWORD *)(v5 + 56);
  if (v74 + 16 >= v75)
    v74 = 0;
  if (v69 <= 0x10)
    v69 = 16;
  v76 = v74 + v69;
  if (v75 <= v76)
    v76 = 0;
  *(_QWORD *)(v5 + 72) = v76;
  v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v76, v77));
  v79 = *(_DWORD *)(v5 + 108);
  if (v78 == 0x80000000 || v79 != 0)
  {
    v81 = v79 + 1;
    *(_DWORD *)(v5 + 108) = v81;
    if (v81 >= *(_DWORD *)(v5 + 104))
    {
      if (*(_BYTE *)(v5 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
      *(_DWORD *)(v5 + 108) = 0;
    }
  }
  *(_QWORD *)(v5 + 48) = v9;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v90, v11);
  if (!v92)
  {
    LOBYTE(v98) = 15;
    v100 = 1;
    goto LABEL_94;
  }
  v13 = v90;
  v14 = v91;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v101, (uint64_t **)(v5 + 8));
  v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101[0], v15))
  {
    LOBYTE(v98) = 11;
    v15 = 1;
    v100 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v98);
    v89 = 1;
    if (v100 != -1)
      ((void (*)(uint64_t **, unint64_t *))off_1E34E31D0[v100])(&v95, &v98);
    goto LABEL_66;
  }
  v98 = v13;
  v99 = v14;
  v16 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v13;
  if (v16 < v13)
  {
    v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_134;
    v18 = v17 + 2;
    if (v17 + 2 > v14)
      goto LABEL_134;
    *(_WORD *)(v13 + v17) = 3582;
    *((_QWORD *)&v99 + 1) = v17 + 2;
  }
  while (1)
  {
    v19 = (_QWORD *)((v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v13 + v18)
    {
      v20 = (char *)v19 - v13;
      if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v14)
      {
        *(_QWORD *)&v99 = 0;
      }
      else
      {
        *v19 = v15;
        *((_QWORD *)&v99 + 1) = v20 + 8;
      }
    }
    IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v98, &v83);
    if ((_QWORD)v99)
    {
      v21 = *((_QWORD *)&v99 + 1);
      v22 = *(_QWORD *)(v5 + 64);
      v23 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(v5 + 56);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (*((_QWORD *)&v99 + 1) <= 0x10uLL)
        v21 = 16;
      v25 = v23 + v21;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *(_QWORD *)(v5 + 72) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      v13 = v5 + 88;
      while (1)
      {
        v29 = *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(0x80000000uLL, v29));
        v31 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128));
        if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v5 + 96))
        {
          v32 = IPC::Semaphore::waitFor((semaphore_t *)(v5 + 88), v11);
          if (v32)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
            if (v33 < v11)
              continue;
          }
        }
        LOBYTE(v95) = 16;
        v96 = 1;
LABEL_48:
        v97 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16));
      *(_QWORD *)(v5 + 72) = 0;
      v34 = *(_QWORD *)(v5 + 64);
      v35 = *(_QWORD *)(v34 + 8);
      if (v35 <= 0xFF)
        goto LABEL_133;
      v36 = *(_QWORD *)(v5 + 56);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = v35 - 256;
      if (v36)
      {
        v13 = v36 - 1;
        if (v38 < v36 - 1)
          goto LABEL_133;
      }
      else
      {
        v13 = v38;
      }
      v39 = v37 + 256;
      v40 = WTF::fastMalloc((WTF *)0x48);
      v41 = IPC::Decoder::Decoder(v40, v39, v13, *(_QWORD *)(v5 + 48));
      if (*(_WORD *)(v41 + 50) != 2821)
      {
        v95 = (uint64_t *)v41;
        v96 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v41);
      WTF::fastFree(v42, v43);
      IPC::Connection::waitForSyncReply((uint64_t)v101[0], v15, 0xDFEu, (uint64_t)&v93, v11);
      LOBYTE(v95) = 0;
      v96 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v95, (uint64_t)&v93);
      v97 = 1;
      if (DWORD2(v93) != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E34E3480[DWORD2(v93)])(&v85, &v93);
    }
    else
    {
      LOBYTE(v95) = 0;
      v97 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID((IPC::Decoder *)v101[0]);
    if (!v97)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_66;
    }
    if (v96 == 1)
    {
      LOBYTE(v86) = (_BYTE)v95;
      v45 = 1;
      v88 = 1;
      v89 = 1;
LABEL_65:
      ((void (*)(unint64_t *, uint64_t **))off_1E34E3480[v45])(&v98, &v95);
      goto LABEL_66;
    }
    if (v96)
      goto LABEL_140;
    LOBYTE(v93) = 0;
    v94 = 0;
    IPC::Decoder::operator>><std::tuple<std::span<int const,2ul>,int>>(v95, (uint64_t)&v93);
    if (v94)
    {
      if (!v97)
        goto LABEL_133;
      if (v96)
        goto LABEL_140;
      v44 = v95;
      v95 = 0;
      v99 = v93;
      v98 = (unint64_t)v44;
      v100 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v98);
      v89 = 1;
      if (v100 != -1)
        ((void (*)(uint64_t **, unint64_t *))off_1E34E31D0[v100])(&v85, &v98);
    }
    else
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
    }
    if (v97)
    {
      v45 = v96;
      if (v96 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v101);
    if (v89)
    {
      LOBYTE(v98) = 0;
      v100 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v86);
      if (v89 && v88 != -1)
        ((void (*)(uint64_t **, __int128 *))off_1E34E31D0[v88])(&v95, &v86);
      goto LABEL_94;
    }
    if (v92)
      break;
LABEL_133:
    __break(1u);
LABEL_134:
    v14 = 0;
    v18 = 0;
    *(_QWORD *)&v99 = 0;
  }
  v46 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v46 - v90;
  if (v46 < v90)
  {
    v48 = 0;
  }
  else
  {
    v48 = 0;
    if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v91)
    {
      *(_WORD *)(v90 + v47) = 2821;
      v48 = v47 + 2;
    }
  }
  v49 = *(_QWORD *)(v5 + 64);
  v50 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = *(_QWORD *)(v5 + 56);
  if (v50 + 16 >= v51)
    v50 = 0;
  if (v48 <= 0x10)
    v48 = 16;
  v52 = v50 + v48;
  if (v51 <= v52)
    v52 = 0;
  *(_QWORD *)(v5 + 72) = v52;
  v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
  do
    __ldaxr(v53);
  while (__stlxr(v52, v53));
  *(_DWORD *)(v5 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, (uint64_t **)(v5 + 8));
  v54 = v85;
  *(_QWORD *)&v93 = 0;
  IPC::Connection::createSyncMessageEncoder(3582, v9, (uint64_t *)&v93, (uint64_t *)v101);
  v55 = (IPC::Encoder *)v101[0];
  v56 = v83;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v101[0], 4uLL, 4) = v56;
  v57 = v84;
  *(_DWORD *)IPC::Encoder::grow(v55, 4uLL, 4) = v57;
  IPC::Connection::sendSyncMessage((uint64_t)v54, v93, (uint64_t *)v101, 0, (uint64_t)&v95, v11);
  if (v96)
  {
    if (v96 == 1)
    {
      LOBYTE(v98) = (_BYTE)v95;
      v58 = 1;
      v100 = 1;
      goto LABEL_90;
    }
LABEL_140:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_141;
  }
  LOBYTE(v86) = 0;
  v87 = 0;
  IPC::Decoder::operator>><std::tuple<std::span<int const,2ul>,int>>(v95, (uint64_t)&v86);
  if (v87)
  {
    v58 = v96;
    if (v96)
      goto LABEL_140;
    v60 = v95;
    v95 = 0;
    v99 = v86;
    v98 = (unint64_t)v60;
    v100 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v58])(&v86, &v95);
  }
  else
  {
    LOBYTE(v98) = 13;
    v100 = 1;
    v58 = v96;
    if (v96 != -1)
      goto LABEL_90;
  }
  v61 = (IPC::Encoder *)v101[0];
  v101[0] = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v59);
    WTF::fastFree(v62, v63);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v85);
LABEL_94:
  if (v100)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 2312))((_QWORD *)v8 + 2);
    v64 = v100;
    if (v100 == -1)
      return result;
  }
  else
  {
    *a4 = *(_QWORD *)v99;
    v64 = 0;
    if (a5)
      *a5 = DWORD2(v99);
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, unint64_t *))off_1E34E31D0[v64])(&v86, &v98);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat(uint64_t a1, int a2, int a3, _QWORD *a4, _DWORD *a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderPrecisionFormat((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getShaderSource@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5;
  _DWORD *v6;
  int v7;
  char v8[8];
  _DWORD *v9;
  int v10;

  if (!*((_QWORD *)this + 12))
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  v7 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetShaderSource>(this, &v7, (uint64_t)v8);
  if (!v10)
  {
    v6 = v9;
    if (v9)
      *v9 += 2;
    v5 = 0;
    *a3 = v6;
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
  this = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
  v5 = v10;
  *a3 = 0;
  if (v5 != -1)
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  return this;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetShaderSource>@<X0>(WTF::ApproximateTime *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getShaderSource@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getShaderSource((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

float WebKit::RemoteGraphicsContextGLProxy::getTexParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  float v5;
  _DWORD v7[2];
  _BYTE v8[8];
  float v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0.0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameterf>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (v10)
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    v4 = v10;
    v5 = 0.0;
    if (v10 == -1)
      return v5;
  }
  else
  {
    v5 = v9;
  }
  ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
  return v5;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameterf>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

float `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTexParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTexParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getTexParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameteri>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameteri>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTexParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTexParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getUniformfv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::RemoteGraphicsContextGLProxy *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  char v44;
  uint64_t *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  int v56;
  void *v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v69;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v79;
  char v80;
  int v81[2];
  uint64_t v82;
  uint64_t *v83;
  __int128 v84;
  char v85;
  int v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  int v92;
  char v93;
  _BYTE v94[24];
  int v95;
  IPC::Encoder *v96;
  IPC::Decoder *v97;
  _BYTE v98[15];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 12);
  if (!v5)
    return result;
  v8 = result;
  v81[0] = a2;
  v81[1] = a3;
  v82 = a5;
  v9 = *((_QWORD *)result + 9);
  v10 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v11 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v11 = v10 + v12;
  }
  if (*(_QWORD *)(v5 + 48) == v9)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v84, v11);
  if (!v85)
  {
LABEL_140:
    v80 = 15;
    goto LABEL_138;
  }
  v63 = *((_QWORD *)&v84 + 1);
  v64 = v84;
  v65 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v66 = v65 - v84;
  if (v65 >= (unint64_t)v84)
  {
    v67 = v66 + 2;
    if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v67 <= *((_QWORD *)&v84 + 1))
    {
      *(_WORD *)(v84 + v66) = 2822;
      goto LABEL_107;
    }
    v63 = 0;
  }
  v67 = 0;
LABEL_107:
  v69 = (_QWORD *)((v64 + v67 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v69 >= v64 + v67)
  {
    v67 = (unint64_t)v69 - v64 + 8;
    if ((unint64_t)v69 - v64 > 0xFFFFFFFFFFFFFFF7 || v67 > v63)
      goto LABEL_137;
    *v69 = v9;
  }
  if (!v63)
  {
LABEL_137:
    v80 = 17;
LABEL_138:
    v94[0] = v80;
    v95 = 1;
    goto LABEL_95;
  }
  v71 = *(_QWORD *)(v5 + 64);
  v72 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(v5 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v67 <= 0x10)
    v67 = 16;
  v74 = v72 + v67;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(v5 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(v71 + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(v5 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v79 = v77 + 1;
    *(_DWORD *)(v5 + 108) = v79;
    if (v79 >= *(_DWORD *)(v5 + 104))
    {
      if (*(_BYTE *)(v5 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
      *(_DWORD *)(v5 + 108) = 0;
    }
  }
  *(_QWORD *)(v5 + 48) = v9;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v88, v11);
  if (!v90)
  {
    v94[0] = 15;
    v95 = 1;
    goto LABEL_94;
  }
  v13 = v88;
  v14 = v89;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v97, (uint64_t **)(v5 + 8));
  v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v97, v15))
  {
    v94[0] = 11;
    v15 = 1;
    v95 = 1;
    LOBYTE(v84) = 0;
    v86 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)v94);
    v87 = 1;
    if (v95 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34E3210[v95])(&v91, v94);
    goto LABEL_66;
  }
  *(_QWORD *)v94 = v13;
  *(_QWORD *)&v94[8] = v14;
  *(_QWORD *)&v94[16] = 0;
  v16 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v13;
  if (v16 < v13)
  {
    v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_133;
    v18 = v17 + 2;
    if (v17 + 2 > v14)
      goto LABEL_133;
    *(_WORD *)(v13 + v17) = 3594;
    *(_QWORD *)&v94[16] = v17 + 2;
  }
  while (1)
  {
    v19 = (_QWORD *)((v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v13 + v18)
    {
      v20 = (char *)v19 - v13;
      if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v14)
      {
        *(_QWORD *)&v94[8] = 0;
      }
      else
      {
        *v19 = v15;
        *(_QWORD *)&v94[16] = v20 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>((uint64_t *)v94, (uint64_t)v81);
    if (*(_QWORD *)&v94[8])
    {
      v21 = *(_QWORD *)&v94[16];
      v22 = *(_QWORD *)(v5 + 64);
      v23 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(v5 + 56);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (*(_QWORD *)&v94[16] <= 0x10uLL)
        v21 = 16;
      v25 = v23 + v21;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *(_QWORD *)(v5 + 72) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      v13 = v5 + 88;
      while (1)
      {
        v29 = *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(0x80000000uLL, v29));
        v31 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128));
        if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v5 + 96))
        {
          v32 = IPC::Semaphore::waitFor((semaphore_t *)(v5 + 88), v11);
          if (v32)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
            if (v33 < v11)
              continue;
          }
        }
        LOBYTE(v91) = 16;
        v92 = 1;
LABEL_48:
        v93 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16));
      *(_QWORD *)(v5 + 72) = 0;
      v34 = *(_QWORD *)(v5 + 64);
      v35 = *(_QWORD *)(v34 + 8);
      if (v35 <= 0xFF)
        goto LABEL_132;
      v36 = *(_QWORD *)(v5 + 56);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = v35 - 256;
      if (v36)
      {
        v13 = v36 - 1;
        if (v38 < v36 - 1)
          goto LABEL_132;
      }
      else
      {
        v13 = v38;
      }
      v39 = v37 + 256;
      v40 = WTF::fastMalloc((WTF *)0x48);
      v41 = IPC::Decoder::Decoder(v40, v39, v13, *(_QWORD *)(v5 + 48));
      if (*(_WORD *)(v41 + 50) != 2821)
      {
        v91 = (uint64_t *)v41;
        v92 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v41);
      WTF::fastFree(v42, v43);
      IPC::Connection::waitForSyncReply((uint64_t)v97, v15, 0xE0Au, (uint64_t)v98, v11);
      LOBYTE(v91) = 0;
      v92 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v91, (uint64_t)v98);
      v93 = 1;
      if (*(_DWORD *)&v98[8] != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3480[*(unsigned int *)&v98[8]])(&v96, v98);
    }
    else
    {
      LOBYTE(v91) = 0;
      v93 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v97);
    if (!v93)
    {
      LOBYTE(v84) = 0;
      v87 = 0;
      goto LABEL_66;
    }
    if (v92 == 1)
    {
      LOBYTE(v84) = (_BYTE)v91;
      v46 = 1;
      v86 = 1;
      v87 = 1;
LABEL_65:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v46])(v94, &v91);
      goto LABEL_66;
    }
    if (v92)
      goto LABEL_139;
    IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)v94, v91);
    if (v94[16])
    {
      v44 = v94[0];
      *(_QWORD *)v98 = *(_QWORD *)&v94[1];
      *(_QWORD *)&v98[7] = *(_QWORD *)&v94[8];
      if (!v93)
        goto LABEL_132;
      if (v92)
        goto LABEL_139;
      v45 = v91;
      v91 = 0;
      *(_QWORD *)&v94[9] = *(_QWORD *)v98;
      *(_QWORD *)&v94[16] = *(_QWORD *)&v98[7];
      *(_QWORD *)v94 = v45;
      v94[8] = v44;
      v95 = 0;
      LOBYTE(v84) = 0;
      v86 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)v94);
      v87 = 1;
      if (v95 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3210[v95])(&v96, v94);
    }
    else
    {
      LOBYTE(v84) = 13;
      v86 = 1;
      v87 = 1;
    }
    if (v93)
    {
      v46 = v92;
      if (v92 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
    if (v87)
    {
      v94[0] = 0;
      v95 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v94, (uint64_t)&v84);
      if (v87)
      {
        if (v86 != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E34E3210[v86])(&v91, &v84);
      }
      goto LABEL_94;
    }
    if (v90)
      break;
LABEL_132:
    __break(1u);
LABEL_133:
    v14 = 0;
    v18 = 0;
    *(_QWORD *)&v94[8] = 0;
  }
  v47 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - v88;
  if (v47 < v88)
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v89)
    {
      *(_WORD *)(v88 + v48) = 2821;
      v49 = v48 + 2;
    }
  }
  v50 = *(_QWORD *)(v5 + 64);
  v51 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *(_QWORD *)(v5 + 56);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v49 <= 0x10)
    v49 = 16;
  v53 = v51 + v49;
  if (v52 <= v53)
    v53 = 0;
  *(_QWORD *)(v5 + 72) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *(_DWORD *)(v5 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)(v5 + 8));
  v55 = v83;
  v97 = 0;
  IPC::Connection::createSyncMessageEncoder(3594, v9, (uint64_t *)&v97, (uint64_t *)&v96);
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(v96, v81);
  IPC::Connection::sendSyncMessage((uint64_t)v55, (uint64_t)v97, (uint64_t *)&v96, 0, (uint64_t)&v91, v11);
  if (v92)
  {
    if (v92 == 1)
    {
      v94[0] = (_BYTE)v91;
      v56 = 1;
      v95 = 1;
      goto LABEL_90;
    }
LABEL_139:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>((uint64_t)&v84, v91);
  if (v85)
  {
    *(_QWORD *)v98 = *(_QWORD *)((char *)&v84 + 1);
    *(_QWORD *)&v98[7] = *((_QWORD *)&v84 + 1);
    v56 = v92;
    if (v92)
      goto LABEL_139;
    v58 = v91;
    v91 = 0;
    *(_QWORD *)&v94[9] = *(_QWORD *)v98;
    *(_QWORD *)&v94[16] = *(_QWORD *)&v98[7];
    *(_QWORD *)v94 = v58;
    v94[8] = v84;
    v95 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v56])(&v84, &v91);
  }
  else
  {
    v94[0] = 13;
    v95 = 1;
    v56 = v92;
    if (v92 != -1)
      goto LABEL_90;
  }
  v59 = v96;
  v96 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v83);
LABEL_94:
  if (v95)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 2312))((_QWORD *)v8 + 2);
    v62 = v95;
    if (v95 == -1)
      return result;
  }
  else
  {
    memcpy(a4, *(const void **)&v94[8], 4 * a5);
    v62 = 0;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34E3210[v62])(&v84, v94);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformfv(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformfv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getUniformiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::RemoteGraphicsContextGLProxy *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  char v44;
  uint64_t *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  int v56;
  void *v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v69;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v79;
  char v80;
  int v81[2];
  uint64_t v82;
  uint64_t *v83;
  __int128 v84;
  char v85;
  int v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  int v92;
  char v93;
  _BYTE v94[24];
  int v95;
  IPC::Encoder *v96;
  IPC::Decoder *v97;
  _BYTE v98[15];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 12);
  if (!v5)
    return result;
  v8 = result;
  v81[0] = a2;
  v81[1] = a3;
  v82 = a5;
  v9 = *((_QWORD *)result + 9);
  v10 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v11 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v11 = v10 + v12;
  }
  if (*(_QWORD *)(v5 + 48) == v9)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v84, v11);
  if (!v85)
  {
LABEL_140:
    v80 = 15;
    goto LABEL_138;
  }
  v63 = *((_QWORD *)&v84 + 1);
  v64 = v84;
  v65 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v66 = v65 - v84;
  if (v65 >= (unint64_t)v84)
  {
    v67 = v66 + 2;
    if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v67 <= *((_QWORD *)&v84 + 1))
    {
      *(_WORD *)(v84 + v66) = 2822;
      goto LABEL_107;
    }
    v63 = 0;
  }
  v67 = 0;
LABEL_107:
  v69 = (_QWORD *)((v64 + v67 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v69 >= v64 + v67)
  {
    v67 = (unint64_t)v69 - v64 + 8;
    if ((unint64_t)v69 - v64 > 0xFFFFFFFFFFFFFFF7 || v67 > v63)
      goto LABEL_137;
    *v69 = v9;
  }
  if (!v63)
  {
LABEL_137:
    v80 = 17;
LABEL_138:
    v94[0] = v80;
    v95 = 1;
    goto LABEL_95;
  }
  v71 = *(_QWORD *)(v5 + 64);
  v72 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(v5 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v67 <= 0x10)
    v67 = 16;
  v74 = v72 + v67;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(v5 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(v71 + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(v5 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v79 = v77 + 1;
    *(_DWORD *)(v5 + 108) = v79;
    if (v79 >= *(_DWORD *)(v5 + 104))
    {
      if (*(_BYTE *)(v5 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
      *(_DWORD *)(v5 + 108) = 0;
    }
  }
  *(_QWORD *)(v5 + 48) = v9;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v88, v11);
  if (!v90)
  {
    v94[0] = 15;
    v95 = 1;
    goto LABEL_94;
  }
  v13 = v88;
  v14 = v89;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v97, (uint64_t **)(v5 + 8));
  v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v97, v15))
  {
    v94[0] = 11;
    v15 = 1;
    v95 = 1;
    LOBYTE(v84) = 0;
    v86 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)v94);
    v87 = 1;
    if (v95 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34E3220[v95])(&v91, v94);
    goto LABEL_66;
  }
  *(_QWORD *)v94 = v13;
  *(_QWORD *)&v94[8] = v14;
  *(_QWORD *)&v94[16] = 0;
  v16 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v13;
  if (v16 < v13)
  {
    v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_133;
    v18 = v17 + 2;
    if (v17 + 2 > v14)
      goto LABEL_133;
    *(_WORD *)(v13 + v17) = 3595;
    *(_QWORD *)&v94[16] = v17 + 2;
  }
  while (1)
  {
    v19 = (_QWORD *)((v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v13 + v18)
    {
      v20 = (char *)v19 - v13;
      if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v14)
      {
        *(_QWORD *)&v94[8] = 0;
      }
      else
      {
        *v19 = v15;
        *(_QWORD *)&v94[16] = v20 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>((uint64_t *)v94, (uint64_t)v81);
    if (*(_QWORD *)&v94[8])
    {
      v21 = *(_QWORD *)&v94[16];
      v22 = *(_QWORD *)(v5 + 64);
      v23 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(v5 + 56);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (*(_QWORD *)&v94[16] <= 0x10uLL)
        v21 = 16;
      v25 = v23 + v21;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *(_QWORD *)(v5 + 72) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      v13 = v5 + 88;
      while (1)
      {
        v29 = *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(0x80000000uLL, v29));
        v31 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128));
        if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v5 + 96))
        {
          v32 = IPC::Semaphore::waitFor((semaphore_t *)(v5 + 88), v11);
          if (v32)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
            if (v33 < v11)
              continue;
          }
        }
        LOBYTE(v91) = 16;
        v92 = 1;
LABEL_48:
        v93 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16));
      *(_QWORD *)(v5 + 72) = 0;
      v34 = *(_QWORD *)(v5 + 64);
      v35 = *(_QWORD *)(v34 + 8);
      if (v35 <= 0xFF)
        goto LABEL_132;
      v36 = *(_QWORD *)(v5 + 56);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = v35 - 256;
      if (v36)
      {
        v13 = v36 - 1;
        if (v38 < v36 - 1)
          goto LABEL_132;
      }
      else
      {
        v13 = v38;
      }
      v39 = v37 + 256;
      v40 = WTF::fastMalloc((WTF *)0x48);
      v41 = IPC::Decoder::Decoder(v40, v39, v13, *(_QWORD *)(v5 + 48));
      if (*(_WORD *)(v41 + 50) != 2821)
      {
        v91 = (uint64_t *)v41;
        v92 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v41);
      WTF::fastFree(v42, v43);
      IPC::Connection::waitForSyncReply((uint64_t)v97, v15, 0xE0Bu, (uint64_t)v98, v11);
      LOBYTE(v91) = 0;
      v92 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v91, (uint64_t)v98);
      v93 = 1;
      if (*(_DWORD *)&v98[8] != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3480[*(unsigned int *)&v98[8]])(&v96, v98);
    }
    else
    {
      LOBYTE(v91) = 0;
      v93 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v97);
    if (!v93)
    {
      LOBYTE(v84) = 0;
      v87 = 0;
      goto LABEL_66;
    }
    if (v92 == 1)
    {
      LOBYTE(v84) = (_BYTE)v91;
      v46 = 1;
      v86 = 1;
      v87 = 1;
LABEL_65:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v46])(v94, &v91);
      goto LABEL_66;
    }
    if (v92)
      goto LABEL_139;
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v94, v91);
    if (v94[16])
    {
      v44 = v94[0];
      *(_QWORD *)v98 = *(_QWORD *)&v94[1];
      *(_QWORD *)&v98[7] = *(_QWORD *)&v94[8];
      if (!v93)
        goto LABEL_132;
      if (v92)
        goto LABEL_139;
      v45 = v91;
      v91 = 0;
      *(_QWORD *)&v94[9] = *(_QWORD *)v98;
      *(_QWORD *)&v94[16] = *(_QWORD *)&v98[7];
      *(_QWORD *)v94 = v45;
      v94[8] = v44;
      v95 = 0;
      LOBYTE(v84) = 0;
      v86 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)v94);
      v87 = 1;
      if (v95 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3220[v95])(&v96, v94);
    }
    else
    {
      LOBYTE(v84) = 13;
      v86 = 1;
      v87 = 1;
    }
    if (v93)
    {
      v46 = v92;
      if (v92 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
    if (v87)
    {
      v94[0] = 0;
      v95 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v94, (uint64_t)&v84);
      if (v87)
      {
        if (v86 != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E34E3220[v86])(&v91, &v84);
      }
      goto LABEL_94;
    }
    if (v90)
      break;
LABEL_132:
    __break(1u);
LABEL_133:
    v14 = 0;
    v18 = 0;
    *(_QWORD *)&v94[8] = 0;
  }
  v47 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - v88;
  if (v47 < v88)
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v89)
    {
      *(_WORD *)(v88 + v48) = 2821;
      v49 = v48 + 2;
    }
  }
  v50 = *(_QWORD *)(v5 + 64);
  v51 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *(_QWORD *)(v5 + 56);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v49 <= 0x10)
    v49 = 16;
  v53 = v51 + v49;
  if (v52 <= v53)
    v53 = 0;
  *(_QWORD *)(v5 + 72) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *(_DWORD *)(v5 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)(v5 + 8));
  v55 = v83;
  v97 = 0;
  IPC::Connection::createSyncMessageEncoder(3595, v9, (uint64_t *)&v97, (uint64_t *)&v96);
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(v96, v81);
  IPC::Connection::sendSyncMessage((uint64_t)v55, (uint64_t)v97, (uint64_t *)&v96, 0, (uint64_t)&v91, v11);
  if (v92)
  {
    if (v92 == 1)
    {
      v94[0] = (_BYTE)v91;
      v56 = 1;
      v95 = 1;
      goto LABEL_90;
    }
LABEL_139:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v84, v91);
  if (v85)
  {
    *(_QWORD *)v98 = *(_QWORD *)((char *)&v84 + 1);
    *(_QWORD *)&v98[7] = *((_QWORD *)&v84 + 1);
    v56 = v92;
    if (v92)
      goto LABEL_139;
    v58 = v91;
    v91 = 0;
    *(_QWORD *)&v94[9] = *(_QWORD *)v98;
    *(_QWORD *)&v94[16] = *(_QWORD *)&v98[7];
    *(_QWORD *)v94 = v58;
    v94[8] = v84;
    v95 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v56])(&v84, &v91);
  }
  else
  {
    v94[0] = 13;
    v95 = 1;
    v56 = v92;
    if (v92 != -1)
      goto LABEL_90;
  }
  v59 = v96;
  v96 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v83);
LABEL_94:
  if (v95)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 2312))((_QWORD *)v8 + 2);
    v62 = v95;
    if (v95 == -1)
      return result;
  }
  else
  {
    memcpy(a4, *(const void **)&v94[8], 4 * a5);
    v62 = 0;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34E3220[v62])(&v84, v94);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformiv(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getUniformuiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, void *a4, uint64_t a5)
{
  uint64_t v5;
  WebKit::RemoteGraphicsContextGLProxy *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  char v44;
  uint64_t *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t *v55;
  int v56;
  void *v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v69;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  int v77;
  unsigned int v79;
  char v80;
  int v81[2];
  uint64_t v82;
  uint64_t *v83;
  __int128 v84;
  char v85;
  int v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t *v91;
  int v92;
  char v93;
  _BYTE v94[24];
  int v95;
  IPC::Encoder *v96;
  IPC::Decoder *v97;
  _BYTE v98[15];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)result + 12);
  if (!v5)
    return result;
  v8 = result;
  v81[0] = a2;
  v81[1] = a3;
  v82 = a5;
  v9 = *((_QWORD *)result + 9);
  v10 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v11 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v11 = v10 + v12;
  }
  if (*(_QWORD *)(v5 + 48) == v9)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v84, v11);
  if (!v85)
  {
LABEL_140:
    v80 = 15;
    goto LABEL_138;
  }
  v63 = *((_QWORD *)&v84 + 1);
  v64 = v84;
  v65 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v66 = v65 - v84;
  if (v65 >= (unint64_t)v84)
  {
    v67 = v66 + 2;
    if (v66 <= 0xFFFFFFFFFFFFFFFDLL && v67 <= *((_QWORD *)&v84 + 1))
    {
      *(_WORD *)(v84 + v66) = 2822;
      goto LABEL_107;
    }
    v63 = 0;
  }
  v67 = 0;
LABEL_107:
  v69 = (_QWORD *)((v64 + v67 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v69 >= v64 + v67)
  {
    v67 = (unint64_t)v69 - v64 + 8;
    if ((unint64_t)v69 - v64 > 0xFFFFFFFFFFFFFFF7 || v67 > v63)
      goto LABEL_137;
    *v69 = v9;
  }
  if (!v63)
  {
LABEL_137:
    v80 = 17;
LABEL_138:
    v94[0] = v80;
    v95 = 1;
    goto LABEL_95;
  }
  v71 = *(_QWORD *)(v5 + 64);
  v72 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v73 = *(_QWORD *)(v5 + 56);
  if (v72 + 16 >= v73)
    v72 = 0;
  if (v67 <= 0x10)
    v67 = 16;
  v74 = v72 + v67;
  if (v73 <= v74)
    v74 = 0;
  *(_QWORD *)(v5 + 72) = v74;
  v75 = (unint64_t *)(*(_QWORD *)(v71 + 16) + 128);
  do
    v76 = __ldaxr(v75);
  while (__stlxr(v74, v75));
  v77 = *(_DWORD *)(v5 + 108);
  if (v76 == 0x80000000 || v77 != 0)
  {
    v79 = v77 + 1;
    *(_DWORD *)(v5 + 108) = v79;
    if (v79 >= *(_DWORD *)(v5 + 104))
    {
      if (*(_BYTE *)(v5 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
      *(_DWORD *)(v5 + 108) = 0;
    }
  }
  *(_QWORD *)(v5 + 48) = v9;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v88, v11);
  if (!v90)
  {
    v94[0] = 15;
    v95 = 1;
    goto LABEL_94;
  }
  v13 = v88;
  v14 = v89;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v97, (uint64_t **)(v5 + 8));
  v15 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v97, v15))
  {
    v94[0] = 11;
    v15 = 1;
    v95 = 1;
    LOBYTE(v84) = 0;
    v86 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)v94);
    v87 = 1;
    if (v95 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34E3230[v95])(&v91, v94);
    goto LABEL_66;
  }
  *(_QWORD *)v94 = v13;
  *(_QWORD *)&v94[8] = v14;
  *(_QWORD *)&v94[16] = 0;
  v16 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v13;
  if (v16 < v13)
  {
    v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_133;
    v18 = v17 + 2;
    if (v17 + 2 > v14)
      goto LABEL_133;
    *(_WORD *)(v13 + v17) = 3596;
    *(_QWORD *)&v94[16] = v17 + 2;
  }
  while (1)
  {
    v19 = (_QWORD *)((v13 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v13 + v18)
    {
      v20 = (char *)v19 - v13;
      if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v14)
      {
        *(_QWORD *)&v94[8] = 0;
      }
      else
      {
        *v19 = v15;
        *(_QWORD *)&v94[16] = v20 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>((uint64_t *)v94, (uint64_t)v81);
    if (*(_QWORD *)&v94[8])
    {
      v21 = *(_QWORD *)&v94[16];
      v22 = *(_QWORD *)(v5 + 64);
      v23 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v24 = *(_QWORD *)(v5 + 56);
      if (v23 + 16 >= v24)
        v23 = 0;
      if (*(_QWORD *)&v94[16] <= 0x10uLL)
        v21 = 16;
      v25 = v23 + v21;
      if (v24 <= v25)
        v26 = 0;
      else
        v26 = v25;
      *(_QWORD *)(v5 + 72) = v26;
      v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v26, v27));
      if (v28 == 0x80000000 || *(_DWORD *)(v5 + 108))
      {
        if (*(_BYTE *)(v5 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
        *(_DWORD *)(v5 + 108) = 0;
      }
      v13 = v5 + 88;
      while (1)
      {
        v29 = *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(0x80000000uLL, v29));
        v31 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128));
        if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v5 + 96))
        {
          v32 = IPC::Semaphore::waitFor((semaphore_t *)(v5 + 88), v11);
          if (v32)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
            if (v33 < v11)
              continue;
          }
        }
        LOBYTE(v91) = 16;
        v92 = 1;
LABEL_48:
        v93 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v5 + 64) + 16));
      *(_QWORD *)(v5 + 72) = 0;
      v34 = *(_QWORD *)(v5 + 64);
      v35 = *(_QWORD *)(v34 + 8);
      if (v35 <= 0xFF)
        goto LABEL_132;
      v36 = *(_QWORD *)(v5 + 56);
      v37 = *(_QWORD *)(v34 + 16);
      v38 = v35 - 256;
      if (v36)
      {
        v13 = v36 - 1;
        if (v38 < v36 - 1)
          goto LABEL_132;
      }
      else
      {
        v13 = v38;
      }
      v39 = v37 + 256;
      v40 = WTF::fastMalloc((WTF *)0x48);
      v41 = IPC::Decoder::Decoder(v40, v39, v13, *(_QWORD *)(v5 + 48));
      if (*(_WORD *)(v41 + 50) != 2821)
      {
        v91 = (uint64_t *)v41;
        v92 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v41);
      WTF::fastFree(v42, v43);
      IPC::Connection::waitForSyncReply((uint64_t)v97, v15, 0xE0Cu, (uint64_t)v98, v11);
      LOBYTE(v91) = 0;
      v92 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v91, (uint64_t)v98);
      v93 = 1;
      if (*(_DWORD *)&v98[8] != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3480[*(unsigned int *)&v98[8]])(&v96, v98);
    }
    else
    {
      LOBYTE(v91) = 0;
      v93 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v97);
    if (!v93)
    {
      LOBYTE(v84) = 0;
      v87 = 0;
      goto LABEL_66;
    }
    if (v92 == 1)
    {
      LOBYTE(v84) = (_BYTE)v91;
      v46 = 1;
      v86 = 1;
      v87 = 1;
LABEL_65:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v46])(v94, &v91);
      goto LABEL_66;
    }
    if (v92)
      goto LABEL_139;
    IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>(v91, (uint64_t)v94);
    if (v94[16])
    {
      v44 = v94[0];
      *(_QWORD *)v98 = *(_QWORD *)&v94[1];
      *(_QWORD *)&v98[7] = *(_QWORD *)&v94[8];
      if (!v93)
        goto LABEL_132;
      if (v92)
        goto LABEL_139;
      v45 = v91;
      v91 = 0;
      *(_QWORD *)&v94[9] = *(_QWORD *)v98;
      *(_QWORD *)&v94[16] = *(_QWORD *)&v98[7];
      *(_QWORD *)v94 = v45;
      v94[8] = v44;
      v95 = 0;
      LOBYTE(v84) = 0;
      v86 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v84, (uint64_t)v94);
      v87 = 1;
      if (v95 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3230[v95])(&v96, v94);
    }
    else
    {
      LOBYTE(v84) = 13;
      v86 = 1;
      v87 = 1;
    }
    if (v93)
    {
      v46 = v92;
      if (v92 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v97);
    if (v87)
    {
      v94[0] = 0;
      v95 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v94, (uint64_t)&v84);
      if (v87)
      {
        if (v86 != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E34E3230[v86])(&v91, &v84);
      }
      goto LABEL_94;
    }
    if (v90)
      break;
LABEL_132:
    __break(1u);
LABEL_133:
    v14 = 0;
    v18 = 0;
    *(_QWORD *)&v94[8] = 0;
  }
  v47 = (v88 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = v47 - v88;
  if (v47 < v88)
  {
    v49 = 0;
  }
  else
  {
    v49 = 0;
    if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v89)
    {
      *(_WORD *)(v88 + v48) = 2821;
      v49 = v48 + 2;
    }
  }
  v50 = *(_QWORD *)(v5 + 64);
  v51 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v52 = *(_QWORD *)(v5 + 56);
  if (v51 + 16 >= v52)
    v51 = 0;
  if (v49 <= 0x10)
    v49 = 16;
  v53 = v51 + v49;
  if (v52 <= v53)
    v53 = 0;
  *(_QWORD *)(v5 + 72) = v53;
  v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
  do
    __ldaxr(v54);
  while (__stlxr(v53, v54));
  *(_DWORD *)(v5 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v83, (uint64_t **)(v5 + 8));
  v55 = v83;
  v97 = 0;
  IPC::Connection::createSyncMessageEncoder(3596, v9, (uint64_t *)&v97, (uint64_t *)&v96);
  IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(v96, v81);
  IPC::Connection::sendSyncMessage((uint64_t)v55, (uint64_t)v97, (uint64_t *)&v96, 0, (uint64_t)&v91, v11);
  if (v92)
  {
    if (v92 == 1)
    {
      v94[0] = (_BYTE)v91;
      v56 = 1;
      v95 = 1;
      goto LABEL_90;
    }
LABEL_139:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>(v91, (uint64_t)&v84);
  if (v85)
  {
    *(_QWORD *)v98 = *(_QWORD *)((char *)&v84 + 1);
    *(_QWORD *)&v98[7] = *((_QWORD *)&v84 + 1);
    v56 = v92;
    if (v92)
      goto LABEL_139;
    v58 = v91;
    v91 = 0;
    *(_QWORD *)&v94[9] = *(_QWORD *)v98;
    *(_QWORD *)&v94[16] = *(_QWORD *)&v98[7];
    *(_QWORD *)v94 = v58;
    v94[8] = v84;
    v95 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v56])(&v84, &v91);
  }
  else
  {
    v94[0] = 13;
    v95 = 1;
    v56 = v92;
    if (v92 != -1)
      goto LABEL_90;
  }
  v59 = v96;
  v96 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v83);
LABEL_94:
  if (v95)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 2312))((_QWORD *)v8 + 2);
    v62 = v95;
    if (v95 == -1)
      return result;
  }
  else
  {
    memcpy(a4, *(const void **)&v94[8], 4 * a5);
    v62 = 0;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34E3230[v62])(&v84, v94);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformuiv(uint64_t a1, int a2, int a3, void *a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformuiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getUniformLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  const WTF::String *v8;
  _BYTE v9[8];
  unsigned int v10;
  int v11;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7 = a2;
  v8 = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetUniformLocation>(this, (uint64_t)&v7, (uint64_t)v9);
  v4 = v11;
  if (!v11)
  {
    v5 = v10;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v11;
  if (v11 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, v9);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetUniformLocation>@<X0>(WTF::ApproximateTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getVertexAttribOffset(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  uint64_t v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getVertexAttribOffset(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getVertexAttribOffset((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::hint(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Hint>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Hint>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Hint,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::hint(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::hint((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsBuffer>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsBuffer>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isEnabled(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsEnabled>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsEnabled>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isEnabled(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isEnabled((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsFramebuffer>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsFramebuffer>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsProgram>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsProgram>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsRenderbuffer>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsRenderbuffer>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isRenderbuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isRenderbuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsShader>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsShader>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isShader(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isShader((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsTexture>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsTexture>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isTexture(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isTexture((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::lineWidth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  float v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::LineWidth>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::LineWidth>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LineWidth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::lineWidth(WebKit::RemoteGraphicsContextGLProxy *this, float a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::lineWidth((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::linkProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::LinkProgram>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::LinkProgram>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::LinkProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::linkProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::linkProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::pixelStorei(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  _DWORD v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PixelStorei>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PixelStorei>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PixelStorei,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::pixelStorei(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::pixelStorei((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::polygonOffset(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    *(float *)v4 = a2;
    *(float *)&v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PolygonOffset>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PolygonOffset>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::polygonOffset(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::polygonOffset((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::renderbufferStorage(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::RenderbufferStorage>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::RenderbufferStorage>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::renderbufferStorage(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::renderbufferStorage((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::sampleCoverage(WebKit::RemoteGraphicsContextGLProxy *this, float a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  float v4;
  BOOL v5;

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4 = a2;
    v5 = a3 != 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SampleCoverage>(this, (int *)&v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SampleCoverage>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SampleCoverage,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::sampleCoverage(WebKit::RemoteGraphicsContextGLProxy *this, float a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::sampleCoverage((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::scissor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Scissor>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Scissor>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Scissor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::scissor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::scissor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::shaderSource(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4;
  const WTF::String *v5;

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4 = a2;
    v5 = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ShaderSource>(this, (uint64_t)&v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ShaderSource>(WTF::ApproximateTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::shaderSource(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::shaderSource((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::stencilFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilFunc>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilFunc>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilFunc(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilFunc((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::stencilFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilFuncSeparate>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilFuncSeparate>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilFuncSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilFuncSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::stencilMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilMask>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilMask>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilMask(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilMask((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::stencilMaskSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilMaskSeparate>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilMaskSeparate>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilMaskSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilMaskSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilMaskSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::stencilOp(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilOp>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilOp>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOp,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilOp(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilOp((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::stencilOpSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilOpSeparate>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::StencilOpSeparate>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::StencilOpSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::stencilOpSeparate(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::stencilOpSeparate((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    *(float *)&v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexParameterf>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexParameterf>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::texParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexParameteri>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexParameteri>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::texParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  _DWORD v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    *(float *)&v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1f>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform1fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1fv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1fv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform1i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1i>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1i>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform1iv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1iv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1iv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1iv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    *(float *)&v5[1] = a3;
    *(float *)&v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2f>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform2fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2fv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2fv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform2i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2i>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2i>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform2iv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2iv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2iv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2iv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    *(float *)&v6[1] = a3;
    *(float *)&v6[2] = a4;
    *(float *)&v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3f>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform3fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3fv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3fv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform3i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3i>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3i>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform3iv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3iv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3iv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3iv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    *(float *)&v7[1] = a3;
    *(float *)&v7[2] = a4;
    *(float *)&v7[3] = a5;
    *(float *)&v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4f>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform4fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4fv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4fv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4fv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4i>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4i>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform4iv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4iv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4iv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4iv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4iv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix2fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix2fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix3fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix3fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix4fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix4fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::useProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UseProgram>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UseProgram>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UseProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::useProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::useProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::validateProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ValidateProgram>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ValidateProgram>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ValidateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::validateProgram(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::validateProgram((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  _DWORD v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    *(float *)&v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib1f>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib1f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = a2;
    v5 = &v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib1fv>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib1fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib1fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib1fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    *(float *)&v5[1] = a3;
    *(float *)&v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib2f>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib2f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = a2;
    v5 = &v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib2fv>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib2fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib2fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    *(float *)&v6[1] = a3;
    *(float *)&v6[2] = a4;
    *(float *)&v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib3f>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib3f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = a2;
    v5 = &v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib3fv>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib3fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib3fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    *(float *)&v7[1] = a3;
    *(float *)&v7[2] = a4;
    *(float *)&v7[3] = a5;
    *(float *)&v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib4f>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib4f>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4f,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4f(WebKit::RemoteGraphicsContextGLProxy *this, int a2, float a3, float a4, float a5, float a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4f((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = a2;
    v5 = &v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib4fv>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttrib4fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttrib4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4fv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttrib4fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttribPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  WebKit::RemoteGraphicsContextGLProxy *v7;
  int v8[3];
  BOOL v9;
  int v10;
  uint64_t v11;

  if (*((_QWORD *)this + 12))
  {
    v7 = this;
    v8[0] = a2;
    v8[1] = a3;
    v8[2] = a4;
    v9 = a5 != 0;
    v10 = a6;
    v11 = a7;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribPointer>(this, v8);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribPointer>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribPointer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::viewport(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Viewport>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Viewport>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Viewport,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::viewport(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::viewport((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bufferData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, uint64_t a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5;
  uint64_t v6;
  int v7;

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5 = a2;
    v6 = a3;
    v7 = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BufferData0>(this, &v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BufferData0>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bufferData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::bufferData((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bufferData(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  const void **v6[2];
  int v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    LODWORD(v6[0]) = a2;
    v6[1] = (const void **)v8;
    v7 = a5;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BufferData1>(result, v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BufferData1>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferData1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bufferData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::bufferData((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bufferSubData(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BufferSubData>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BufferSubData>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bufferSubData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::bufferSubData((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::readPixelsBufferObject(WebKit::RemoteGraphicsContextGLProxy *result, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  WebKit::RemoteGraphicsContextGLProxy *v8;
  _QWORD *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  if (*((_QWORD *)result + 12))
  {
    v8 = result;
    v9 = v15;
    v10 = a4;
    v11 = a5;
    v12 = a6;
    v13 = a7;
    v14 = a8;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ReadPixelsBufferObject>(result, (uint64_t)&v9);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 2312))((_QWORD *)v8 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ReadPixelsBufferObject>(WTF::ApproximateTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadPixelsBufferObject,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::readPixelsBufferObject(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, int a7, int a8)
{
  return WebKit::RemoteGraphicsContextGLProxy::readPixelsBufferObject((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texImage2D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  WebKit::RemoteGraphicsContextGLProxy *v11;
  const void **v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];

  v20[0] = a10;
  v20[1] = a11;
  if (*((_QWORD *)result + 12))
  {
    v11 = result;
    v12 = (const void **)__PAIR64__(a3, a2);
    v13 = a4;
    v14 = a5;
    v15 = a6;
    v16 = a7;
    v17 = a8;
    v18 = a9;
    v19 = v20;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage2D0>(result, &v12);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v11);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v11 + 2) + 2312))((_QWORD *)v11 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage2D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage2D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  WebKit::RemoteGraphicsContextGLProxy *v10;
  int v11[8];
  uint64_t v12;

  if (*((_QWORD *)this + 12))
  {
    v10 = this;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = a4;
    v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    v11[7] = a9;
    v12 = a10;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage2D1>(this, v11);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v10);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v10 + 2) + 2312))((_QWORD *)v10 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage2D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  WebKit::RemoteGraphicsContextGLProxy *v11;
  const void **v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];

  v20[0] = a10;
  v20[1] = a11;
  if (*((_QWORD *)result + 12))
  {
    v11 = result;
    v12 = (const void **)__PAIR64__(a3, a2);
    v13 = a4;
    v14 = a5;
    v15 = a6;
    v16 = a7;
    v17 = a8;
    v18 = a9;
    v19 = v20;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage2D0>(result, &v12);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v11);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v11 + 2) + 2312))((_QWORD *)v11 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage2D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  WebKit::RemoteGraphicsContextGLProxy *v10;
  int v11[8];
  uint64_t v12;

  if (*((_QWORD *)this + 12))
  {
    v10 = this;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = a4;
    v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    v11[7] = a9;
    v12 = a10;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage2D1>(this, v11);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v10);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v10 + 2) + 2312))((_QWORD *)v10 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage2D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  WebKit::RemoteGraphicsContextGLProxy *v10;
  const void **v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD v18[2];

  v18[0] = a9;
  v18[1] = a10;
  if (*((_QWORD *)result + 12))
  {
    v10 = result;
    v11 = (const void **)__PAIR64__(a3, a2);
    v12 = a4;
    v13 = a5;
    v14 = a6;
    v15 = a7;
    v16 = a8;
    v17 = v18;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D0>(result, &v11);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v10);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v10 + 2) + 2312))((_QWORD *)v10 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  WebKit::RemoteGraphicsContextGLProxy *v9;
  int v10[8];
  uint64_t v11;

  if (*((_QWORD *)this + 12))
  {
    v9 = this;
    v10[0] = a2;
    v10[1] = a3;
    v10[2] = a4;
    v10[3] = a5;
    v10[4] = a6;
    v10[5] = a7;
    v10[6] = a8;
    v11 = a9;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D1>(this, v10);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v9);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v9 + 2) + 2312))((_QWORD *)v9 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  WebKit::RemoteGraphicsContextGLProxy *v11;
  const void **v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];

  v20[0] = a10;
  v20[1] = a11;
  if (*((_QWORD *)result + 12))
  {
    v11 = result;
    v12 = (const void **)__PAIR64__(a3, a2);
    v13 = a4;
    v14 = a5;
    v15 = a6;
    v16 = a7;
    v17 = a8;
    v18 = a9;
    v19 = v20;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D0>(result, &v12);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v11);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v11 + 2) + 2312))((_QWORD *)v11 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  WebKit::RemoteGraphicsContextGLProxy *v10;
  int v11[8];
  uint64_t v12;

  if (*((_QWORD *)this + 12))
  {
    v10 = this;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = a4;
    v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    v11[7] = a9;
    v12 = a10;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D1>(this, v11);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v10);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v10 + 2) + 2312))((_QWORD *)v10 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage2D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawArraysInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawArraysInstanced>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawArraysInstanced>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawArraysInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawArraysInstanced((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawElementsInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  int v7[4];
  uint64_t v8;
  int v9;

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v8 = a5;
    v9 = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawElementsInstanced>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawElementsInstanced>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstanced,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawElementsInstanced(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawElementsInstanced((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttribDivisor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribDivisor>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribDivisor>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribDivisor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribDivisor(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribDivisor((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createVertexArray(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateVertexArray>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateVertexArray>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createVertexArray(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteVertexArray>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteVertexArray>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsVertexArray>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsVertexArray>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindVertexArray>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindVertexArray>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindVertexArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindVertexArray(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindVertexArray((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::copyBufferSubData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  int v7[2];
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v8 = a4;
    v9 = a5;
    v10 = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyBufferSubData>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyBufferSubData>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyBufferSubData,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyBufferSubData(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyBufferSubData((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blitFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11)
{
  WebKit::RemoteGraphicsContextGLProxy *v11;
  _DWORD v12[10];

  if (*((_QWORD *)this + 12))
  {
    v11 = this;
    v12[0] = a2;
    v12[1] = a3;
    v12[2] = a4;
    v12[3] = a5;
    v12[4] = a6;
    v12[5] = a7;
    v12[6] = a8;
    v12[7] = a9;
    v12[8] = a10;
    v12[9] = a11;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlitFramebuffer>(this, v12);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v11);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v11 + 2) + 2312))((_QWORD *)v11 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlitFramebuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlitFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blitFramebuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::blitFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::framebufferTextureLayer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FramebufferTextureLayer>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::FramebufferTextureLayer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTextureLayer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::framebufferTextureLayer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::framebufferTextureLayer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::invalidateFramebuffer(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::InvalidateFramebuffer>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::InvalidateFramebuffer>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::invalidateFramebuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::invalidateFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::invalidateSubFramebuffer(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  WebKit::RemoteGraphicsContextGLProxy *v8;
  const void **v9[2];
  int v10;
  int v11;
  int v12;
  int v13;
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v8 = result;
    LODWORD(v9[0]) = a2;
    v9[1] = (const void **)v14;
    v10 = a5;
    v11 = a6;
    v12 = a7;
    v13 = a8;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::InvalidateSubFramebuffer>(result, v9);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 2312))((_QWORD *)v8 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::InvalidateSubFramebuffer>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::InvalidateSubFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::invalidateSubFramebuffer(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  return WebKit::RemoteGraphicsContextGLProxy::invalidateSubFramebuffer((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::readBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ReadBuffer>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ReadBuffer>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ReadBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::readBuffer(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::readBuffer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisample(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisample>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisample>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisample,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisample(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisample((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texStorage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexStorage2D>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexStorage2D>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texStorage2D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::texStorage2D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texStorage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  WebKit::RemoteGraphicsContextGLProxy *v7;
  _DWORD v8[6];

  if (*((_QWORD *)this + 12))
  {
    v7 = this;
    v8[0] = a2;
    v8[1] = a3;
    v8[2] = a4;
    v8[3] = a5;
    v8[4] = a6;
    v8[5] = a7;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexStorage3D>(this, v8);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexStorage3D>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexStorage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texStorage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  return WebKit::RemoteGraphicsContextGLProxy::texStorage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texImage3D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  WebKit::RemoteGraphicsContextGLProxy *v12;
  const void **v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  _QWORD v22[2];

  v22[0] = a11;
  v22[1] = a12;
  if (*((_QWORD *)result + 12))
  {
    v12 = result;
    v13 = (const void **)__PAIR64__(a3, a2);
    v14 = a4;
    v15 = a5;
    v16 = a6;
    v17 = a7;
    v18 = a8;
    v19 = a9;
    v20 = a10;
    v21 = v22;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage3D0>(result, &v13);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v12);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v12 + 2) + 2312))((_QWORD *)v12 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage3D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage3D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  WebKit::RemoteGraphicsContextGLProxy *v11;
  int v12[10];
  uint64_t v13;

  if (*((_QWORD *)this + 12))
  {
    v11 = this;
    v12[0] = a2;
    v12[1] = a3;
    v12[2] = a4;
    v12[3] = a5;
    v12[4] = a6;
    v12[5] = a7;
    v12[6] = a8;
    v12[7] = a9;
    v12[8] = a10;
    v13 = a11;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage3D1>(this, v12);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v11);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v11 + 2) + 2312))((_QWORD *)v11 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexImage3D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::texImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  WebKit::RemoteGraphicsContextGLProxy *v13;
  const void **v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  _QWORD v24[2];

  v24[0] = a12;
  v24[1] = a13;
  if (*((_QWORD *)result + 12))
  {
    v13 = result;
    v14 = (const void **)__PAIR64__(a3, a2);
    v15 = a4;
    v16 = a5;
    v17 = a6;
    v18 = a7;
    v19 = a8;
    v20 = a9;
    v21 = a10;
    v22 = a11;
    v23 = v24;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage3D0>(result, &v14);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v13);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v13 + 2) + 2312))((_QWORD *)v13 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage3D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  WebKit::RemoteGraphicsContextGLProxy *v12;
  int v13[10];
  uint64_t v14;

  if (*((_QWORD *)this + 12))
  {
    v12 = this;
    v13[0] = a2;
    v13[1] = a3;
    v13[2] = a4;
    v13[3] = a5;
    v13[4] = a6;
    v13[5] = a7;
    v13[6] = a8;
    v13[7] = a9;
    v13[8] = a10;
    v13[9] = a11;
    v14 = a12;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage3D1>(this, v13);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v12);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v12 + 2) + 2312))((_QWORD *)v12 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TexSubImage3D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::texSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  return WebKit::RemoteGraphicsContextGLProxy::texSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  WebKit::RemoteGraphicsContextGLProxy *v10;
  _DWORD v11[9];

  if (*((_QWORD *)this + 12))
  {
    v10 = this;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = a4;
    v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    v11[7] = a9;
    v11[8] = a10;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage3D>(this, v11);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v10);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v10 + 2) + 2312))((_QWORD *)v10 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage3D>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage3D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::copyTexSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  WebKit::RemoteGraphicsContextGLProxy *v11;
  const void **v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];

  v20[0] = a10;
  v20[1] = a11;
  if (*((_QWORD *)result + 12))
  {
    v11 = result;
    v12 = (const void **)__PAIR64__(a3, a2);
    v13 = a4;
    v14 = a5;
    v15 = a6;
    v16 = a7;
    v17 = a8;
    v18 = a9;
    v19 = v20;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D0>(result, &v12);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v11);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v11 + 2) + 2312))((_QWORD *)v11 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, uint64_t a11)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  WebKit::RemoteGraphicsContextGLProxy *v10;
  int v11[8];
  uint64_t v12;

  if (*((_QWORD *)this + 12))
  {
    v10 = this;
    v11[0] = a2;
    v11[1] = a3;
    v11[2] = a4;
    v11[3] = a5;
    v11[4] = a6;
    v11[5] = a7;
    v11[6] = a8;
    v11[7] = a9;
    v12 = a10;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D1>(this, v11);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v10);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v10 + 2) + 2312))((_QWORD *)v10 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  WebKit::RemoteGraphicsContextGLProxy *v13;
  const void **v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  _QWORD *v23;
  _QWORD v24[2];

  v24[0] = a12;
  v24[1] = a13;
  if (*((_QWORD *)result + 12))
  {
    v13 = result;
    v14 = (const void **)__PAIR64__(a3, a2);
    v15 = a4;
    v16 = a5;
    v17 = a6;
    v18 = a7;
    v19 = a8;
    v20 = a9;
    v21 = a10;
    v22 = a11;
    v23 = v24;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D0>(result, &v14);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v13);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v13 + 2) + 2312))((_QWORD *)v13 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D0>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D0,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, uint64_t a13)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  WebKit::RemoteGraphicsContextGLProxy *v12;
  int v13[10];
  uint64_t v14;

  if (*((_QWORD *)this + 12))
  {
    v12 = this;
    v13[0] = a2;
    v13[1] = a3;
    v13[2] = a4;
    v13[3] = a5;
    v13[4] = a6;
    v13[5] = a7;
    v13[6] = a8;
    v13[7] = a9;
    v13[8] = a10;
    v13[9] = a11;
    v14 = a12;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D1>(this, v13);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v12);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v12 + 2) + 2312))((_QWORD *)v12 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D1>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompressedTexSubImage3D1,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, unsigned int a10, int a11, uint64_t a12)
{
  return WebKit::RemoteGraphicsContextGLProxy::compressedTexSubImage3D((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getFragDataLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  const WTF::String *v8;
  _BYTE v9[8];
  unsigned int v10;
  int v11;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7 = a2;
  v8 = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetFragDataLocation>(this, (uint64_t)&v7, (uint64_t)v9);
  v4 = v11;
  if (!v11)
  {
    v5 = v10;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v11;
  if (v11 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, v9);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetFragDataLocation>@<X0>(WTF::ApproximateTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFragDataLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getFragDataLocation(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getFragDataLocation((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform1ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  _DWORD v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1ui>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1ui>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform2ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2ui>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2ui>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform3ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3ui>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3ui>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4ui>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4ui>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform1uiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1uiv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform1uiv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform1uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform1uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform1uiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform2uiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2uiv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform2uiv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform2uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform2uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform2uiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform3uiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3uiv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform3uiv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform3uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform3uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform3uiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniform4uiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  const void **v5[2];
  _QWORD v6[2];

  v6[0] = a3;
  v6[1] = a4;
  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    LODWORD(v5[0]) = a2;
    v5[1] = (const void **)v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4uiv>(result, v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::Uniform4uiv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Uniform4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniform4uiv(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniform4uiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x3fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x3fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x3fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x3fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x3fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x2fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x2fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x2fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x2fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x2fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x4fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x4fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x4fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix2x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x4fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix2x4fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x2fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x2fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x2fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x2fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x2fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x2fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x4fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x4fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x4fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix3x4fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x4fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix3x4fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x3fv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3 != 0;
    v8 = v9;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x3fv>(result, &v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x3fv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformMatrix4x3fv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x3fv(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformMatrix4x3fv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4i>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4i>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4i(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4i((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4iv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = a2;
    v5 = &v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4iv>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4iv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4iv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4iv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4iv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4ui>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4ui>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4ui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4ui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4ui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4uiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;

  v6 = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = a2;
    v5 = &v6;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4uiv>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribI4uiv>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribI4uiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4uiv(uint64_t a1, int a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribI4uiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::vertexAttribIPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, uint64_t a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  int v7[4];
  uint64_t v8;

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v8 = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribIPointer>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::VertexAttribIPointer>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::VertexAttribIPointer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::vertexAttribIPointer(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::vertexAttribIPointer((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawRangeElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  WebKit::RemoteGraphicsContextGLProxy *v7;
  int v8[6];
  uint64_t v9;

  if (*((_QWORD *)this + 12))
  {
    v7 = this;
    v8[0] = a2;
    v8[1] = a3;
    v8[2] = a4;
    v8[3] = a5;
    v8[4] = a6;
    v9 = a7;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawRangeElements>(this, v8);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v7);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v7 + 2) + 2312))((_QWORD *)v7 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawRangeElements>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawRangeElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawRangeElements(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawRangeElements((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawBuffers(WebKit::RemoteGraphicsContextGLProxy *result, uint64_t a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  const void **v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = (const void **)v5;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawBuffers>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawBuffers>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffers,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawBuffers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawBuffers((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clearBufferiv(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  const void **v6[2];
  _QWORD v7[2];

  v7[0] = a4;
  v7[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6[0] = (const void **)__PAIR64__(a3, a2);
    v6[1] = (const void **)v7;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferiv>(result, v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferiv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferiv(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clearBufferuiv(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  const void **v6[2];
  _QWORD v7[2];

  v7[0] = a4;
  v7[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6[0] = (const void **)__PAIR64__(a3, a2);
    v6[1] = (const void **)v7;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferuiv>(result, v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferuiv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferuiv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferuiv(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferuiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clearBufferfv(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  const void **v6[2];
  _QWORD v7[2];

  v7[0] = a4;
  v7[1] = a5;
  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6[0] = (const void **)__PAIR64__(a3, a2);
    v6[1] = (const void **)v7;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferfv>(result, v6);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferfv>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferfv(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferfv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clearBufferfi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4, int a5)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  _DWORD v6[4];

  if (*((_QWORD *)this + 12))
  {
    v5 = this;
    v6[0] = a2;
    v6[1] = a3;
    *(float *)&v6[2] = a4;
    v6[3] = a5;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferfi>(this, v6);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClearBufferfi>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearBufferfi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clearBufferfi(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4, int a5)
{
  return WebKit::RemoteGraphicsContextGLProxy::clearBufferfi((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createQuery(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateQuery>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateQuery>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createQuery(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteQuery>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteQuery>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsQuery>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsQuery>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::beginQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BeginQuery>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BeginQuery>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::beginQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::beginQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::endQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EndQuery>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EndQuery>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::endQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::endQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQuery>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQuery>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQuery,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQuery(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQuery((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createSampler(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateSampler>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateSampler>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createSampler(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteSampler>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteSampler>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsSampler>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsSampler>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindSampler>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindSampler>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindSampler,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindSampler(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindSampler((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::samplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SamplerParameteri>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SamplerParameteri>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::samplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::samplerParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::samplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    *(float *)&v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SamplerParameterf>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SamplerParameterf>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::samplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::samplerParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

float WebKit::RemoteGraphicsContextGLProxy::getSamplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  float v5;
  _DWORD v7[2];
  _BYTE v8[8];
  float v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0.0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (v10)
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    v4 = v10;
    v5 = 0.0;
    if (v10 == -1)
      return v5;
  }
  else
  {
    v5 = v9;
  }
  ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
  return v5;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameterf>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

float `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getSamplerParameterf(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getSamplerParameterf((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getSamplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameteri>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSamplerParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getSamplerParameteri(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getSamplerParameteri((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::fenceSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  uint64_t v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::FenceSync>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::FenceSync>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::FenceSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::fenceSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::fenceSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsSync>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(void **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsSync>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  void *v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteSync>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteSync>(WTF::ApproximateTime *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::clientWaitSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  int v9;
  uint64_t v10;
  _BYTE v11[8];
  unsigned int v12;
  int v13;

  if (!*((_QWORD *)this + 12))
    return 0;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::ClientWaitSync>(this, (uint64_t)&v8, (uint64_t)v11);
  v5 = v13;
  if (!v13)
  {
    v6 = v12;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v6 = 0;
  result = 0;
  v5 = v13;
  if (v13 != -1)
  {
LABEL_7:
    ((void (*)(void **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v8, v11);
    return v6;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::ClientWaitSync>@<X0>(WTF::ApproximateTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::ClientWaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clientWaitSync(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::clientWaitSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::waitSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2, int a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5 = a2;
    v6 = a3;
    v7 = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::WaitSync>(this, &v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::WaitSync>(WTF::ApproximateTime *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::WaitSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::waitSync(WebKit::RemoteGraphicsContextGLProxy *this, uint64_t a2, int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::waitSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getSynci(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  int v8;
  _BYTE v9[8];
  unsigned int v10;
  int v11;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7 = a2;
  v8 = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetSynci>(this, (uint64_t)&v7, (uint64_t)v9);
  v4 = v11;
  if (!v11)
  {
    v5 = v10;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v11;
  if (v11 != -1)
  {
LABEL_7:
    ((void (*)(void **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, v9);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetSynci>@<X0>(WTF::ApproximateTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetSynci,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getSynci(WebKit::RemoteGraphicsContextGLProxy *this, void *a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getSynci((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateTransformFeedback>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateTransformFeedback>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteTransformFeedback>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteTransformFeedback>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsTransformFeedback>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsTransformFeedback>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindTransformFeedback>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindTransformFeedback>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::beginTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BeginTransformFeedback>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BeginTransformFeedback>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::beginTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::beginTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::endTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  WebKit::RemoteGraphicsContextGLProxy *v1;
  char v2;

  if (*((_QWORD *)this + 12))
  {
    v1 = this;
    v2 = 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EndTransformFeedback>(this, (uint64_t)&v2);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v1);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v1 + 2) + 2312))((_QWORD *)v1 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EndTransformFeedback>(WTF::ApproximateTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, v6, a2, v4);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::endTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::endTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::transformFeedbackVaryings(WebKit::RemoteGraphicsContextGLProxy *result, int a2, uint64_t a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5;
  uint64_t v6;
  int v7;

  if (*((_QWORD *)result + 12))
  {
    v4 = result;
    v5 = a2;
    v6 = a3;
    v7 = a4;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TransformFeedbackVaryings>(result, &v5);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::TransformFeedbackVaryings>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::TransformFeedbackVaryings,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::transformFeedbackVaryings(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::transformFeedbackVaryings((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getTransformFeedbackVarying(WebKit::RemoteGraphicsContextGLProxy *result, unsigned int a2, unsigned int a3, uint64_t a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8[2];
  char v9[8];
  uint64_t v10;
  uint64_t v11;
  int v12;

  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v8[0] = a2;
    v8[1] = a3;
    WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>(result, v8, (uint64_t)v9);
    if (v12)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
    }
    else
    {
      v7 = v10;
      v10 = 0;
      result = *(WebKit::RemoteGraphicsContextGLProxy **)a4;
      *(_QWORD *)a4 = v7;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::StringImpl::destroy(result, v6);
        else
          *(_DWORD *)result -= 2;
      }
      *(_QWORD *)(a4 + 8) = v11;
    }
    if (v12 != -1)
      return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(unsigned int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v12])(v8, v9);
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying>@<X0>(WTF::ApproximateTime *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTransformFeedbackVarying,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTransformFeedbackVarying(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTransformFeedbackVarying((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::pauseTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  WebKit::RemoteGraphicsContextGLProxy *v1;
  char v2;

  if (*((_QWORD *)this + 12))
  {
    v1 = this;
    v2 = 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PauseTransformFeedback>(this, (uint64_t)&v2);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v1);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v1 + 2) + 2312))((_QWORD *)v1 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PauseTransformFeedback>(WTF::ApproximateTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PauseTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, v6, a2, v4);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::pauseTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::pauseTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::resumeTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  WebKit::RemoteGraphicsContextGLProxy *v1;
  char v2;

  if (*((_QWORD *)this + 12))
  {
    v1 = this;
    v2 = 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ResumeTransformFeedback>(this, (uint64_t)&v2);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v1);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v1 + 2) + 2312))((_QWORD *)v1 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ResumeTransformFeedback>(WTF::ApproximateTime *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ResumeTransformFeedback,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, v6, a2, v4);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::resumeTransformFeedback(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::resumeTransformFeedback((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindBufferBase(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindBufferBase>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindBufferBase>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferBase,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindBufferBase(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindBufferBase((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::bindBufferRange(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  int v7[4];
  uint64_t v8;
  uint64_t v9;

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v8 = a5;
    v9 = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindBufferRange>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BindBufferRange>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBufferRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::bindBufferRange(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::bindBufferRange((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getUniformIndices@<X0>(WebKit::RemoteGraphicsContextGLProxy *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  unsigned int v6;
  uint64_t v7;
  char v8[8];
  uint64_t v9;
  int v10;

  if (*((_QWORD *)result + 12))
  {
    v5 = result;
    v6 = a2;
    v7 = a3;
    WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetUniformIndices>(result, &v6, (uint64_t)v8);
    if (v10)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
      result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
      *a4 = 0;
      a4[1] = 0;
    }
    else
    {
      result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a4, (uint64_t)&v9);
    }
    if (v10 != -1)
      return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(unsigned int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v10])(&v6, v8);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetUniformIndices>@<X0>(WTF::ApproximateTime *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformIndices,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformIndices@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformIndices((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getActiveUniforms@<X0>(WebKit::RemoteGraphicsContextGLProxy *result@<X0>, int a2@<W1>, const void **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  const void **v7[2];
  int v8;
  char v9[8];
  uint64_t v10;
  int v11;

  if (*((_QWORD *)result + 12))
  {
    v6 = result;
    LODWORD(v7[0]) = a2;
    v7[1] = a3;
    v8 = a4;
    WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniforms>(result, v7, (uint64_t)v9);
    if (v11)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
      *a5 = 0;
      a5[1] = 0;
    }
    else
    {
      result = (WebKit::RemoteGraphicsContextGLProxy *)WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)a5, (uint64_t)&v10);
    }
    if (v11 != -1)
      return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(const void ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v11])(v7, v9);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniforms>@<X0>(WTF::ApproximateTime *a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniforms,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniforms@<X0>(uint64_t a1@<X0>, int a2@<W1>, const void **a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniforms((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getUniformBlockIndex(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  const WTF::String *v8;
  _BYTE v9[8];
  unsigned int v10;
  int v11;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7 = a2;
  v8 = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>(this, (uint64_t)&v7, (uint64_t)v9);
  v4 = v11;
  if (!v11)
  {
    v5 = v10;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v11;
  if (v11 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, v9);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex>@<X0>(WTF::ApproximateTime *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformBlockIndex,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getUniformBlockIndex(WebKit::RemoteGraphicsContextGLProxy *this, int a2, const WTF::String *a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getUniformBlockIndex((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockName@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v5;
  int v6;
  _DWORD *v7;
  unsigned int v8[2];
  char v9[8];
  _DWORD *v10;
  int v11;

  if (!*((_QWORD *)this + 12))
  {
    *a4 = 0;
    return this;
  }
  v5 = this;
  v8[0] = a2;
  v8[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>(this, v8, (uint64_t)v9);
  if (!v11)
  {
    v7 = v10;
    if (v10)
      *v10 += 2;
    v6 = 0;
    *a4 = v7;
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(unsigned int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v6])(v8, v9);
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v5);
  this = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v5 + 2) + 2312))((_QWORD *)v5 + 2);
  v6 = v11;
  *a4 = 0;
  if (v6 != -1)
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(unsigned int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v6])(v8, v9);
  return this;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName>@<X0>(WTF::ApproximateTime *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockName,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockName@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockName((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::uniformBlockBinding(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformBlockBinding>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::UniformBlockBinding>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::UniformBlockBinding,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::uniformBlockBinding(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::uniformBlockBinding((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockiv(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  WebKit::RemoteGraphicsContextGLProxy *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL8 v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  char v45;
  uint64_t *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t *v56;
  int v57;
  void *v58;
  uint64_t *v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v70;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  unsigned int v80;
  char v81;
  int v82[4];
  uint64_t v83;
  uint64_t *v84;
  __int128 v85;
  char v86;
  int v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t *v92;
  int v93;
  char v94;
  _BYTE v95[24];
  int v96;
  IPC::Encoder *v97;
  IPC::Decoder *v98;
  _BYTE v99[15];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)result + 12);
  if (!v6)
    return result;
  v9 = result;
  v82[0] = a2;
  v82[1] = a3;
  v82[2] = a4;
  v83 = a6;
  v10 = *((_QWORD *)result + 9);
  v11 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v12 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v12 = v11 + v13;
  }
  if (*(_QWORD *)(v6 + 48) == v10)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v85, v12);
  if (!v86)
  {
LABEL_140:
    v81 = 15;
    goto LABEL_138;
  }
  v64 = *((_QWORD *)&v85 + 1);
  v65 = v85;
  v66 = (v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - v85;
  if (v66 >= (unint64_t)v85)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= *((_QWORD *)&v85 + 1))
    {
      *(_WORD *)(v85 + v67) = 2822;
      goto LABEL_107;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_107:
  v70 = (_QWORD *)((v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v70 >= v65 + v68)
  {
    v68 = (unint64_t)v70 - v65 + 8;
    if ((unint64_t)v70 - v65 > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      goto LABEL_137;
    *v70 = v10;
  }
  if (!v64)
  {
LABEL_137:
    v81 = 17;
LABEL_138:
    v95[0] = v81;
    v96 = 1;
    goto LABEL_95;
  }
  v72 = *(_QWORD *)(v6 + 64);
  v73 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v74 = *(_QWORD *)(v6 + 56);
  if (v73 + 16 >= v74)
    v73 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v75 = v73 + v68;
  if (v74 <= v75)
    v75 = 0;
  *(_QWORD *)(v6 + 72) = v75;
  v76 = (unint64_t *)(*(_QWORD *)(v72 + 16) + 128);
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v75, v76));
  v78 = *(_DWORD *)(v6 + 108);
  if (v77 == 0x80000000 || v78 != 0)
  {
    v80 = v78 + 1;
    *(_DWORD *)(v6 + 108) = v80;
    if (v80 >= *(_DWORD *)(v6 + 104))
    {
      if (*(_BYTE *)(v6 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
      *(_DWORD *)(v6 + 108) = 0;
    }
  }
  *(_QWORD *)(v6 + 48) = v10;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v89, v12);
  if (!v91)
  {
    v95[0] = 15;
    v96 = 1;
    goto LABEL_94;
  }
  v14 = v89;
  v15 = v90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v98, (uint64_t **)(v6 + 8));
  v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v98, v16))
  {
    v95[0] = 11;
    v16 = 1;
    v96 = 1;
    LOBYTE(v85) = 0;
    v87 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)v95);
    v88 = 1;
    if (v96 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34E33F0[v96])(&v92, v95);
    goto LABEL_66;
  }
  *(_QWORD *)v95 = v14;
  *(_QWORD *)&v95[8] = v15;
  *(_QWORD *)&v95[16] = 0;
  v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v18 = v17 - v14;
  if (v17 < v14)
  {
    v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_133;
    v19 = v18 + 2;
    if (v18 + 2 > v15)
      goto LABEL_133;
    *(_WORD *)(v14 + v18) = 3554;
    *(_QWORD *)&v95[16] = v18 + 2;
  }
  while (1)
  {
    v20 = (_QWORD *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      v21 = (char *)v20 - v14;
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v21 + 8) > v15)
      {
        *(_QWORD *)&v95[8] = 0;
      }
      else
      {
        *v20 = v16;
        *(_QWORD *)&v95[16] = v21 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>((uint64_t *)v95, (uint64_t)v82);
    if (*(_QWORD *)&v95[8])
    {
      v22 = *(_QWORD *)&v95[16];
      v23 = *(_QWORD *)(v6 + 64);
      v24 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(_QWORD *)(v6 + 56);
      if (v24 + 16 >= v25)
        v24 = 0;
      if (*(_QWORD *)&v95[16] <= 0x10uLL)
        v22 = 16;
      v26 = v24 + v22;
      if (v25 <= v26)
        v27 = 0;
      else
        v27 = v26;
      *(_QWORD *)(v6 + 72) = v27;
      v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v27, v28));
      if (v29 == 0x80000000 || *(_DWORD *)(v6 + 108))
      {
        if (*(_BYTE *)(v6 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
        *(_DWORD *)(v6 + 108) = 0;
      }
      v14 = v6 + 88;
      while (1)
      {
        v30 = *(unint64_t **)(*(_QWORD *)(v6 + 64) + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(0x80000000uLL, v30));
        v32 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 16) + 128));
        if (!(v31 | v32 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v6 + 96))
        {
          v33 = IPC::Semaphore::waitFor((semaphore_t *)(v6 + 88), v12);
          if (v33)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v33);
            if (v34 < v12)
              continue;
          }
        }
        LOBYTE(v92) = 16;
        v93 = 1;
LABEL_48:
        v94 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v6 + 64) + 16));
      *(_QWORD *)(v6 + 72) = 0;
      v35 = *(_QWORD *)(v6 + 64);
      v36 = *(_QWORD *)(v35 + 8);
      if (v36 <= 0xFF)
        goto LABEL_132;
      v37 = *(_QWORD *)(v6 + 56);
      v38 = *(_QWORD *)(v35 + 16);
      v39 = v36 - 256;
      if (v37)
      {
        v14 = v37 - 1;
        if (v39 < v37 - 1)
          goto LABEL_132;
      }
      else
      {
        v14 = v39;
      }
      v40 = v38 + 256;
      v41 = WTF::fastMalloc((WTF *)0x48);
      v42 = IPC::Decoder::Decoder(v41, v40, v14, *(_QWORD *)(v6 + 48));
      if (*(_WORD *)(v42 + 50) != 2821)
      {
        v92 = (uint64_t *)v42;
        v93 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v42);
      WTF::fastFree(v43, v44);
      IPC::Connection::waitForSyncReply((uint64_t)v98, v16, 0xDE2u, (uint64_t)v99, v12);
      LOBYTE(v92) = 0;
      v93 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v92, (uint64_t)v99);
      v94 = 1;
      if (*(_DWORD *)&v99[8] != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3480[*(unsigned int *)&v99[8]])(&v97, v99);
    }
    else
    {
      LOBYTE(v92) = 0;
      v94 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v98);
    if (!v94)
    {
      LOBYTE(v85) = 0;
      v88 = 0;
      goto LABEL_66;
    }
    if (v93 == 1)
    {
      LOBYTE(v85) = (_BYTE)v92;
      v47 = 1;
      v87 = 1;
      v88 = 1;
LABEL_65:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v47])(v95, &v92);
      goto LABEL_66;
    }
    if (v93)
      goto LABEL_139;
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v95, v92);
    if (v95[16])
    {
      v45 = v95[0];
      *(_QWORD *)v99 = *(_QWORD *)&v95[1];
      *(_QWORD *)&v99[7] = *(_QWORD *)&v95[8];
      if (!v94)
        goto LABEL_132;
      if (v93)
        goto LABEL_139;
      v46 = v92;
      v92 = 0;
      *(_QWORD *)&v95[9] = *(_QWORD *)v99;
      *(_QWORD *)&v95[16] = *(_QWORD *)&v99[7];
      *(_QWORD *)v95 = v46;
      v95[8] = v45;
      v96 = 0;
      LOBYTE(v85) = 0;
      v87 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)v95);
      v88 = 1;
      if (v96 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E33F0[v96])(&v97, v95);
    }
    else
    {
      LOBYTE(v85) = 13;
      v87 = 1;
      v88 = 1;
    }
    if (v94)
    {
      v47 = v93;
      if (v93 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v98);
    if (v88)
    {
      v95[0] = 0;
      v96 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniformBlockiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v95, (uint64_t)&v85);
      if (v88)
      {
        if (v87 != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E34E33F0[v87])(&v92, &v85);
      }
      goto LABEL_94;
    }
    if (v91)
      break;
LABEL_132:
    __break(1u);
LABEL_133:
    v15 = 0;
    v19 = 0;
    *(_QWORD *)&v95[8] = 0;
  }
  v48 = (v89 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v49 = v48 - v89;
  if (v48 < v89)
  {
    v50 = 0;
  }
  else
  {
    v50 = 0;
    if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v90)
    {
      *(_WORD *)(v89 + v49) = 2821;
      v50 = v49 + 2;
    }
  }
  v51 = *(_QWORD *)(v6 + 64);
  v52 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = *(_QWORD *)(v6 + 56);
  if (v52 + 16 >= v53)
    v52 = 0;
  if (v50 <= 0x10)
    v50 = 16;
  v54 = v52 + v50;
  if (v53 <= v54)
    v54 = 0;
  *(_QWORD *)(v6 + 72) = v54;
  v55 = (unint64_t *)(*(_QWORD *)(v51 + 16) + 128);
  do
    __ldaxr(v55);
  while (__stlxr(v54, v55));
  *(_DWORD *)(v6 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v84, (uint64_t **)(v6 + 8));
  v56 = v84;
  v98 = 0;
  IPC::Connection::createSyncMessageEncoder(3554, v10, (uint64_t *)&v98, (uint64_t *)&v97);
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(v97, v82);
  IPC::Connection::sendSyncMessage((uint64_t)v56, (uint64_t)v98, (uint64_t *)&v97, 0, (uint64_t)&v92, v12);
  if (v93)
  {
    if (v93 == 1)
    {
      v95[0] = (_BYTE)v92;
      v57 = 1;
      v96 = 1;
      goto LABEL_90;
    }
LABEL_139:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v85, v92);
  if (v86)
  {
    *(_QWORD *)v99 = *(_QWORD *)((char *)&v85 + 1);
    *(_QWORD *)&v99[7] = *((_QWORD *)&v85 + 1);
    v57 = v93;
    if (v93)
      goto LABEL_139;
    v59 = v92;
    v92 = 0;
    *(_QWORD *)&v95[9] = *(_QWORD *)v99;
    *(_QWORD *)&v95[16] = *(_QWORD *)&v99[7];
    *(_QWORD *)v95 = v59;
    v95[8] = v85;
    v96 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v57])(&v85, &v92);
  }
  else
  {
    v95[0] = 13;
    v96 = 1;
    v57 = v93;
    if (v93 != -1)
      goto LABEL_90;
  }
  v60 = v97;
  v97 = 0;
  if (v60)
  {
    IPC::Encoder::~Encoder(v60, v58);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v84);
LABEL_94:
  if (v96)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v9);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v9 + 2) + 2312))((_QWORD *)v9 + 2);
    v63 = v96;
    if (v96 == -1)
      return result;
  }
  else
  {
    memcpy(a5, *(const void **)&v95[8], 4 * a6);
    v63 = 0;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34E33F0[v63])(&v85, v95);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockiv(uint64_t a1, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::getActiveUniformBlockiv((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getTranslatedShaderSourceANGLE@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  int v5;
  _DWORD *v6;
  int v7;
  char v8[8];
  _DWORD *v9;
  int v10;

  if (!*((_QWORD *)this + 12))
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  v7 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>(this, &v7, (uint64_t)v8);
  if (!v10)
  {
    v6 = v9;
    if (v9)
      *v9 += 2;
    v5 = 0;
    *a3 = v6;
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
  this = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
  v5 = v10;
  *a3 = 0;
  if (v5 != -1)
    return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(int *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v5])(&v7, v8);
  return this;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE>@<X0>(WTF::ApproximateTime *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTranslatedShaderSourceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getTranslatedShaderSourceANGLE@<X0>(WebKit::RemoteGraphicsContextGLProxy *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  return WebKit::RemoteGraphicsContextGLProxy::getTranslatedShaderSourceANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawBuffersEXT(WebKit::RemoteGraphicsContextGLProxy *result, uint64_t a2, uint64_t a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  const void **v4;
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  if (*((_QWORD *)result + 12))
  {
    v3 = result;
    v4 = (const void **)v5;
    result = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawBuffersEXT>(result, &v4);
    if ((_DWORD)result)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawBuffersEXT>(WTF::ApproximateTime *a1, const void ***a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawBuffersEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawBuffersEXT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawBuffersEXT((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::createQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this)
{
  int v2;
  uint64_t v3;
  int v5;

  if (!*((_QWORD *)this + 12))
    return 0;
  v2 = *((_DWORD *)this + 44);
  v3 = (v2 + 1);
  *((_DWORD *)this + 44) = v3;
  v5 = v2 + 1;
  if (WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateQueryEXT>(this, &v5))
  {
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
    (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
    return 0;
  }
  return v3;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::CreateQueryEXT>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::createQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this)
{
  return WebKit::RemoteGraphicsContextGLProxy::createQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16));
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteQueryEXT>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteQueryEXT>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::isQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[16];
  int v8;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsQueryEXT>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v8;
  if (!v8)
  {
    v4 = v7[8];
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v8;
  if (v8 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::IsQueryEXT>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::isQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::isQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::beginQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BeginQueryEXT>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BeginQueryEXT>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BeginQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::beginQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::beginQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::endQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EndQueryEXT>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EndQueryEXT>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EndQueryEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::endQueryEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::endQueryEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::queryCounterEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::QueryCounterEXT>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::QueryCounterEXT>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::QueryCounterEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::queryCounterEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::queryCounterEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getQueryiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryiEXT>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryiEXT>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryiEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getQueryObjectiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  unsigned int v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectiEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryObjectiEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryObjectiEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  int v4;
  uint64_t v5;
  uint64_t result;
  _DWORD v7[2];
  _BYTE v8[8];
  uint64_t v9;
  int v10;

  if (!*((_QWORD *)this + 12))
    return 0;
  v7[0] = a2;
  v7[1] = a3;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>(this, (unint64_t)v7, (uint64_t)v8);
  v4 = v10;
  if (!v10)
  {
    v5 = v9;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v5 = 0;
  result = 0;
  v4 = v10;
  if (v10 != -1)
  {
LABEL_7:
    ((void (*)(_DWORD *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(v7, v8);
    return v5;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  IPC::Encoder *v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = (IPC::Encoder *)*((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetQueryObjectui64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::getQueryObjectui64EXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::getInteger64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[8];
  uint64_t v8;
  int v9;

  if (!*((_QWORD *)this + 12))
    return 0;
  v6 = a2;
  WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64EXT>(this, (unint64_t)&v6, (uint64_t)v7);
  v3 = v9;
  if (!v9)
  {
    v4 = v8;
    goto LABEL_7;
  }
  WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(this);
  (*(void (**)(char *))(*((_QWORD *)this + 2) + 2312))((char *)this + 16);
  v4 = 0;
  result = 0;
  v3 = v9;
  if (v9 != -1)
  {
LABEL_7:
    ((void (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v3])(&v6, v7);
    return v4;
  }
  return result;
}

unsigned __int8 ***WebKit::RemoteGraphicsContextGLProxy::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64EXT>@<X0>(WTF::ApproximateTime *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;

  v5 = (uint64_t *)*((_QWORD *)a1 + 12);
  v6 = *((_QWORD *)a1 + 9);
  v7 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v8 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v8 = v7 + v9;
  }
  return IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64EXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, a2, v6, a3, v8);
}

uint64_t `non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInteger64EXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInteger64EXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::enableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EnableiOES>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::EnableiOES>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::enableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::enableiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::disableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DisableiOES>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DisableiOES>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::disableiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::disableiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendEquationiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquationiOES>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquationiOES>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquationiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquationiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparateiOES>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparateiOES>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendEquationSeparateiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendFunciOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    v5[0] = a2;
    v5[1] = a3;
    v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFunciOES>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFunciOES>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunciOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFunciOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFunciOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparateiOES>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparateiOES>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparateiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparateiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::blendFuncSeparateiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::colorMaskiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  int v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7 = a2;
    v8 = a3 != 0;
    v9 = a4 != 0;
    v10 = a5 != 0;
    v11 = a6 != 0;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ColorMaskiOES>(this, &v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ColorMaskiOES>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMaskiOES,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::colorMaskiOES(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::colorMaskiOES((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawArraysInstancedBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawArraysInstancedBaseInstanceANGLE>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawArraysInstancedBaseInstanceANGLE>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArraysInstancedBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawArraysInstancedBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawArraysInstancedBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::drawElementsInstancedBaseVertexBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  WebKit::RemoteGraphicsContextGLProxy *v8;
  int v9[4];
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  if (*((_QWORD *)this + 12))
  {
    v8 = this;
    v9[0] = a2;
    v9[1] = a3;
    v9[2] = a4;
    v10 = a5;
    v11 = a6;
    v12 = a7;
    v13 = a8;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawElementsInstancedBaseVertexBaseInstanceANGLE>(this, v9);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v8);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v8 + 2) + 2312))((_QWORD *)v8 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DrawElementsInstancedBaseVertexBaseInstanceANGLE>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElementsInstancedBaseVertexBaseInstanceANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::drawElementsInstancedBaseVertexBaseInstanceANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, uint64_t a5, int a6, int a7, int a8)
{
  return WebKit::RemoteGraphicsContextGLProxy::drawElementsInstancedBaseVertexBaseInstanceANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6, a7, a8);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::clipControlEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClipControlEXT>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ClipControlEXT>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClipControlEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::clipControlEXT(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::clipControlEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::provokingVertexANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ProvokingVertexANGLE>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::ProvokingVertexANGLE>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ProvokingVertexANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::provokingVertexANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::provokingVertexANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::polygonModeANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  int v4[2];

  if (*((_QWORD *)this + 12))
  {
    v3 = this;
    v4[0] = a2;
    v4[1] = a3;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PolygonModeANGLE>(this, v4);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PolygonModeANGLE>(WTF::ApproximateTime *a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonModeANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::polygonModeANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3)
{
  return WebKit::RemoteGraphicsContextGLProxy::polygonModeANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::polygonOffsetClampEXT(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4)
{
  WebKit::RemoteGraphicsContextGLProxy *v4;
  _DWORD v5[3];

  if (*((_QWORD *)this + 12))
  {
    v4 = this;
    *(float *)v5 = a2;
    *(float *)&v5[1] = a3;
    *(float *)&v5[2] = a4;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PolygonOffsetClampEXT>(this, v5);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v4);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v4 + 2) + 2312))((_QWORD *)v4 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::PolygonOffsetClampEXT>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::PolygonOffsetClampEXT,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::polygonOffsetClampEXT(WebKit::RemoteGraphicsContextGLProxy *this, float a2, float a3, float a4)
{
  return WebKit::RemoteGraphicsContextGLProxy::polygonOffsetClampEXT((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisampleANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  WebKit::RemoteGraphicsContextGLProxy *v6;
  _DWORD v7[5];

  if (*((_QWORD *)this + 12))
  {
    v6 = this;
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = a4;
    v7[3] = a5;
    v7[4] = a6;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisampleANGLE>(this, v7);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v6);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v6 + 2) + 2312))((_QWORD *)v6 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisampleANGLE>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::RenderbufferStorageMultisampleANGLE,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisampleANGLE(WebKit::RemoteGraphicsContextGLProxy *this, int a2, int a3, int a4, int a5, int a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::renderbufferStorageMultisampleANGLE((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::getInternalformativ(WebKit::RemoteGraphicsContextGLProxy *result, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  WebKit::RemoteGraphicsContextGLProxy *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  _BOOL8 v33;
  double v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  char v45;
  uint64_t *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t *v56;
  int v57;
  void *v58;
  uint64_t *v59;
  IPC::Encoder *v60;
  WTF *v61;
  void *v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v70;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  unsigned int v80;
  char v81;
  int v82[4];
  uint64_t v83;
  uint64_t *v84;
  __int128 v85;
  char v86;
  int v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  uint64_t *v92;
  int v93;
  char v94;
  _BYTE v95[24];
  int v96;
  IPC::Encoder *v97;
  IPC::Decoder *v98;
  _BYTE v99[15];
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)result + 12);
  if (!v6)
    return result;
  v9 = result;
  v82[0] = a2;
  v82[1] = a3;
  v82[2] = a4;
  v83 = a6;
  v10 = *((_QWORD *)result + 9);
  v11 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v12 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(result);
    v12 = v11 + v13;
  }
  if (*(_QWORD *)(v6 + 48) == v10)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v85, v12);
  if (!v86)
  {
LABEL_140:
    v81 = 15;
    goto LABEL_138;
  }
  v64 = *((_QWORD *)&v85 + 1);
  v65 = v85;
  v66 = (v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - v85;
  if (v66 >= (unint64_t)v85)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= *((_QWORD *)&v85 + 1))
    {
      *(_WORD *)(v85 + v67) = 2822;
      goto LABEL_107;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_107:
  v70 = (_QWORD *)((v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v70 >= v65 + v68)
  {
    v68 = (unint64_t)v70 - v65 + 8;
    if ((unint64_t)v70 - v65 > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      goto LABEL_137;
    *v70 = v10;
  }
  if (!v64)
  {
LABEL_137:
    v81 = 17;
LABEL_138:
    v95[0] = v81;
    v96 = 1;
    goto LABEL_95;
  }
  v72 = *(_QWORD *)(v6 + 64);
  v73 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v74 = *(_QWORD *)(v6 + 56);
  if (v73 + 16 >= v74)
    v73 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v75 = v73 + v68;
  if (v74 <= v75)
    v75 = 0;
  *(_QWORD *)(v6 + 72) = v75;
  v76 = (unint64_t *)(*(_QWORD *)(v72 + 16) + 128);
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v75, v76));
  v78 = *(_DWORD *)(v6 + 108);
  if (v77 == 0x80000000 || v78 != 0)
  {
    v80 = v78 + 1;
    *(_DWORD *)(v6 + 108) = v80;
    if (v80 >= *(_DWORD *)(v6 + 104))
    {
      if (*(_BYTE *)(v6 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
      *(_DWORD *)(v6 + 108) = 0;
    }
  }
  *(_QWORD *)(v6 + 48) = v10;
LABEL_5:
  IPC::StreamClientConnectionBuffer::tryAcquire(v6 + 56, &v89, v12);
  if (!v91)
  {
    v95[0] = 15;
    v96 = 1;
    goto LABEL_94;
  }
  v14 = v89;
  v15 = v90;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v98, (uint64_t **)(v6 + 8));
  v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v98, v16))
  {
    v95[0] = 11;
    v16 = 1;
    v96 = 1;
    LOBYTE(v85) = 0;
    v87 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)v95);
    v88 = 1;
    if (v96 != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E34E3460[v96])(&v92, v95);
    goto LABEL_66;
  }
  *(_QWORD *)v95 = v14;
  *(_QWORD *)&v95[8] = v15;
  *(_QWORD *)&v95[16] = 0;
  v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v18 = v17 - v14;
  if (v17 < v14)
  {
    v19 = 0;
  }
  else
  {
    if (v18 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_133;
    v19 = v18 + 2;
    if (v18 + 2 > v15)
      goto LABEL_133;
    *(_WORD *)(v14 + v18) = 3570;
    *(_QWORD *)&v95[16] = v18 + 2;
  }
  while (1)
  {
    v20 = (_QWORD *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      v21 = (char *)v20 - v14;
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v21 + 8) > v15)
      {
        *(_QWORD *)&v95[8] = 0;
      }
      else
      {
        *v20 = v16;
        *(_QWORD *)&v95[16] = v21 + 8;
      }
    }
    IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>((uint64_t *)v95, (uint64_t)v82);
    if (*(_QWORD *)&v95[8])
    {
      v22 = *(_QWORD *)&v95[16];
      v23 = *(_QWORD *)(v6 + 64);
      v24 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v25 = *(_QWORD *)(v6 + 56);
      if (v24 + 16 >= v25)
        v24 = 0;
      if (*(_QWORD *)&v95[16] <= 0x10uLL)
        v22 = 16;
      v26 = v24 + v22;
      if (v25 <= v26)
        v27 = 0;
      else
        v27 = v26;
      *(_QWORD *)(v6 + 72) = v27;
      v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v27, v28));
      if (v29 == 0x80000000 || *(_DWORD *)(v6 + 108))
      {
        if (*(_BYTE *)(v6 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v6 + 84));
        *(_DWORD *)(v6 + 108) = 0;
      }
      v14 = v6 + 88;
      while (1)
      {
        v30 = *(unint64_t **)(*(_QWORD *)(v6 + 64) + 16);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(0x80000000uLL, v30));
        v32 = atomic_load((unint64_t *)(*(_QWORD *)(*(_QWORD *)(v6 + 64) + 16) + 128));
        if (!(v31 | v32 & 0xFFFFFFFF7FFFFFFFLL))
          break;
        if (*(_BYTE *)(v6 + 96))
        {
          v33 = IPC::Semaphore::waitFor((semaphore_t *)(v6 + 88), v12);
          if (v33)
          {
            WTF::ApproximateTime::now((WTF::ApproximateTime *)v33);
            if (v34 < v12)
              continue;
          }
        }
        LOBYTE(v92) = 16;
        v93 = 1;
LABEL_48:
        v94 = 1;
        goto LABEL_49;
      }
      atomic_store(0, *(unint64_t **)(*(_QWORD *)(v6 + 64) + 16));
      *(_QWORD *)(v6 + 72) = 0;
      v35 = *(_QWORD *)(v6 + 64);
      v36 = *(_QWORD *)(v35 + 8);
      if (v36 <= 0xFF)
        goto LABEL_132;
      v37 = *(_QWORD *)(v6 + 56);
      v38 = *(_QWORD *)(v35 + 16);
      v39 = v36 - 256;
      if (v37)
      {
        v14 = v37 - 1;
        if (v39 < v37 - 1)
          goto LABEL_132;
      }
      else
      {
        v14 = v39;
      }
      v40 = v38 + 256;
      v41 = WTF::fastMalloc((WTF *)0x48);
      v42 = IPC::Decoder::Decoder(v41, v40, v14, *(_QWORD *)(v6 + 48));
      if (*(_WORD *)(v42 + 50) != 2821)
      {
        v92 = (uint64_t *)v42;
        v93 = 0;
        goto LABEL_48;
      }
      IPC::Decoder::~Decoder((IPC::Decoder *)v42);
      WTF::fastFree(v43, v44);
      IPC::Connection::waitForSyncReply((uint64_t)v98, v16, 0xDF2u, (uint64_t)v99, v12);
      LOBYTE(v92) = 0;
      v93 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v92, (uint64_t)v99);
      v94 = 1;
      if (*(_DWORD *)&v99[8] != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3480[*(unsigned int *)&v99[8]])(&v97, v99);
    }
    else
    {
      LOBYTE(v92) = 0;
      v94 = 0;
    }
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v98);
    if (!v94)
    {
      LOBYTE(v85) = 0;
      v88 = 0;
      goto LABEL_66;
    }
    if (v93 == 1)
    {
      LOBYTE(v85) = (_BYTE)v92;
      v47 = 1;
      v87 = 1;
      v88 = 1;
LABEL_65:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v47])(v95, &v92);
      goto LABEL_66;
    }
    if (v93)
      goto LABEL_139;
    IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)v95, v92);
    if (v95[16])
    {
      v45 = v95[0];
      *(_QWORD *)v99 = *(_QWORD *)&v95[1];
      *(_QWORD *)&v99[7] = *(_QWORD *)&v95[8];
      if (!v94)
        goto LABEL_132;
      if (v93)
        goto LABEL_139;
      v46 = v92;
      v92 = 0;
      *(_QWORD *)&v95[9] = *(_QWORD *)v99;
      *(_QWORD *)&v95[16] = *(_QWORD *)&v99[7];
      *(_QWORD *)v95 = v46;
      v95[8] = v45;
      v96 = 0;
      LOBYTE(v85) = 0;
      v87 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)v95);
      v88 = 1;
      if (v96 != -1)
        ((void (*)(IPC::Encoder **, _BYTE *))off_1E34E3460[v96])(&v97, v95);
    }
    else
    {
      LOBYTE(v85) = 13;
      v87 = 1;
      v88 = 1;
    }
    if (v94)
    {
      v47 = v93;
      if (v93 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v98);
    if (v88)
    {
      v95[0] = 0;
      v96 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInternalformativ>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v95, (uint64_t)&v85);
      if (v88)
      {
        if (v87 != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E34E3460[v87])(&v92, &v85);
      }
      goto LABEL_94;
    }
    if (v91)
      break;
LABEL_132:
    __break(1u);
LABEL_133:
    v15 = 0;
    v19 = 0;
    *(_QWORD *)&v95[8] = 0;
  }
  v48 = (v89 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v49 = v48 - v89;
  if (v48 < v89)
  {
    v50 = 0;
  }
  else
  {
    v50 = 0;
    if (v49 <= 0xFFFFFFFFFFFFFFFDLL && v49 + 2 <= v90)
    {
      *(_WORD *)(v89 + v49) = 2821;
      v50 = v49 + 2;
    }
  }
  v51 = *(_QWORD *)(v6 + 64);
  v52 = (*(_QWORD *)(v6 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = *(_QWORD *)(v6 + 56);
  if (v52 + 16 >= v53)
    v52 = 0;
  if (v50 <= 0x10)
    v50 = 16;
  v54 = v52 + v50;
  if (v53 <= v54)
    v54 = 0;
  *(_QWORD *)(v6 + 72) = v54;
  v55 = (unint64_t *)(*(_QWORD *)(v51 + 16) + 128);
  do
    __ldaxr(v55);
  while (__stlxr(v54, v55));
  *(_DWORD *)(v6 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v84, (uint64_t **)(v6 + 8));
  v56 = v84;
  v98 = 0;
  IPC::Connection::createSyncMessageEncoder(3570, v10, (uint64_t *)&v98, (uint64_t *)&v97);
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>,0ul,1ul,2ul,3ul>(v97, v82);
  IPC::Connection::sendSyncMessage((uint64_t)v56, (uint64_t)v98, (uint64_t *)&v97, 0, (uint64_t)&v92, v12);
  if (v93)
  {
    if (v93 == 1)
    {
      v95[0] = (_BYTE)v92;
      v57 = 1;
      v96 = 1;
      goto LABEL_90;
    }
LABEL_139:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_140;
  }
  IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>((uint64_t)&v85, v92);
  if (v86)
  {
    *(_QWORD *)v99 = *(_QWORD *)((char *)&v85 + 1);
    *(_QWORD *)&v99[7] = *((_QWORD *)&v85 + 1);
    v57 = v93;
    if (v93)
      goto LABEL_139;
    v59 = v92;
    v92 = 0;
    *(_QWORD *)&v95[9] = *(_QWORD *)v99;
    *(_QWORD *)&v95[16] = *(_QWORD *)&v99[7];
    *(_QWORD *)v95 = v59;
    v95[8] = v85;
    v96 = 0;
LABEL_90:
    ((void (*)(__int128 *, uint64_t **))off_1E34E3480[v57])(&v85, &v92);
  }
  else
  {
    v95[0] = 13;
    v96 = 1;
    v57 = v93;
    if (v93 != -1)
      goto LABEL_90;
  }
  v60 = v97;
  v97 = 0;
  if (v60)
  {
    IPC::Encoder::~Encoder(v60, v58);
    WTF::fastFree(v61, v62);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v84);
LABEL_94:
  if (v96)
  {
LABEL_95:
    WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v9);
    result = (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v9 + 2) + 2312))((_QWORD *)v9 + 2);
    v63 = v96;
    if (v96 == -1)
      return result;
  }
  else
  {
    memcpy(a5, *(const void **)&v95[8], 4 * a6);
    v63 = 0;
  }
  return (WebKit::RemoteGraphicsContextGLProxy *)((uint64_t (*)(__int128 *, _BYTE *))off_1E34E3460[v63])(&v85, v95);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::getInternalformativ(uint64_t a1, int a2, int a3, int a4, void *a5, uint64_t a6)
{
  return WebKit::RemoteGraphicsContextGLProxy::getInternalformativ((WebKit::RemoteGraphicsContextGLProxy *)(a1 - 16), a2, a3, a4, a5, a6);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::setDrawingBufferColorSpace(WebKit::RemoteGraphicsContextGLProxy *this, CFTypeRef *a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  CFTypeRef *v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SetDrawingBufferColorSpace>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::SetDrawingBufferColorSpace>(WTF::ApproximateTime *a1, CFTypeRef **a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SetDrawingBufferColorSpace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::setDrawingBufferColorSpace(WebKit::RemoteGraphicsContextGLProxy *this, CFTypeRef *a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::setDrawingBufferColorSpace((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

WebKit::RemoteGraphicsContextGLProxy *WebKit::RemoteGraphicsContextGLProxy::deleteExternalSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v2;
  int v3;

  if (*((_QWORD *)this + 12))
  {
    v2 = this;
    v3 = a2;
    this = (WebKit::RemoteGraphicsContextGLProxy *)WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteExternalSync>(this, &v3);
    if ((_DWORD)this)
    {
      WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v2);
      return (WebKit::RemoteGraphicsContextGLProxy *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v2 + 2) + 2312))((_QWORD *)v2 + 2);
    }
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGLProxy::send<Messages::RemoteGraphicsContextGL::DeleteExternalSync>(WTF::ApproximateTime *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = *((_QWORD *)a1 + 9);
  v5 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v6 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v6 = v5 + v7;
  }
  return IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteExternalSync,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v3, a2, v4, v6);
}

WebKit::RemoteGraphicsContextGLProxy *`non-virtual thunk to'WebKit::RemoteGraphicsContextGLProxy::deleteExternalSync(WebKit::RemoteGraphicsContextGLProxy *this, int a2)
{
  return WebKit::RemoteGraphicsContextGLProxy::deleteExternalSync((WebKit::RemoteGraphicsContextGLProxy *)((char *)this - 16), a2);
}

uint64_t WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  const void *v7;
  CFTypeRef v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  WTF::ThreadSafeWeakPtrControlBlock *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  _OWORD v37[3];
  _QWORD v38[3];
  int v39;
  CFTypeRef cf;
  __int16 v41;

  v38[2] = *(_QWORD *)a2;
  v39 = *(_DWORD *)(a2 + 8);
  v7 = *(const void **)(a2 + 16);
  cf = v7;
  if (v7)
    CFRetain(v7);
  v41 = *(_WORD *)(a2 + 24);
  v37[0] = 0uLL;
  WebCore::ImageBuffer::ImageBuffer();
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)v37 + 12));
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  *(_QWORD *)a1 = off_1E34E2DD0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a4 + 2, (uint64_t)a4);
  v9 = (unsigned int *)*((_QWORD *)a4 + 1);
  if (v9)
  {
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 136) = v9;
  v38[0] = 0;
  v38[1] = *(_QWORD *)(a1 + 16);
  v11 = *(_OWORD *)(a1 + 72);
  v37[0] = *(_OWORD *)(a1 + 56);
  v37[1] = v11;
  v37[2] = *(_OWORD *)(a1 + 88);
  WebKit::RemoteDisplayListRecorderProxy::RemoteDisplayListRecorderProxy((WebKit::RemoteDisplayListRecorderProxy *)(a1 + 144), (WebKit::RemoteImageBufferProxy *)a1, (WebKit::RemoteRenderingBackendProxy *)a4, (const WebCore::FloatRect *)v38, (const WebCore::AffineTransform *)v37);
  *(_BYTE *)(a1 + 4016) = 1;
  v13 = *(_QWORD *)(a1 + 136);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  v17 = *(_QWORD *)(v14 + 80);
  v16 = (uint64_t *)(v14 + 80);
  v15 = v17;
  v18 = *(_QWORD *)(a1 + 120);
  if (v17
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v16),
        (v15 = *v16) != 0))
  {
    v19 = *(_DWORD *)(v15 - 8);
  }
  else
  {
    v19 = 0;
  }
  v20 = (v18 + ~(v18 << 32)) ^ ((unint64_t)(v18 + ~(v18 << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = (_QWORD *)(v15 + 24 * v23);
  v25 = *v24;
  if (!*v24)
  {
LABEL_19:
    *v24 = v18;
    v28 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 8);
    if (v28)
      v28 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v28);
    v29 = (unsigned __int8 *)v24[1];
    v24[1] = v28;
    if (v29)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v29, v12);
    v24[2] = a1;
    v30 = *v16;
    if (*v16)
      v31 = *(_DWORD *)(v30 - 12) + 1;
    else
      v31 = 1;
    *(_DWORD *)(v30 - 12) = v31;
    v32 = *v16;
    if (*v16)
      v33 = *(_DWORD *)(v32 - 12);
    else
      v33 = 0;
    v34 = (*(_DWORD *)(v32 - 16) + v33);
    v35 = *(unsigned int *)(v32 - 4);
    if (v35 > 0x400)
    {
      if (v35 > 2 * v34)
        return a1;
    }
    else if (3 * v35 > 4 * v34)
    {
      return a1;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v16);
    return a1;
  }
  v26 = 0;
  v27 = 1;
  while (v25 != v18)
  {
    if (v25 == -1)
      v26 = v24;
    v23 = (v23 + v27) & v19;
    v24 = (_QWORD *)(v15 + 24 * v23);
    v25 = *v24;
    ++v27;
    if (!*v24)
    {
      if (v26)
      {
        *v26 = 0;
        v26[1] = 0;
        v26[2] = 0;
        --*(_DWORD *)(*v16 - 16);
        v24 = v26;
      }
      goto LABEL_19;
    }
  }
  return a1;
}

void WebKit::RemoteImageBufferProxy::~RemoteImageBufferProxy(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteRenderingBackendProxy *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E34E2DD0;
  v2 = *((_QWORD *)this + 17);
  if (v2 && (v3 = *(_QWORD *)(v2 + 8)) != 0 && *(_QWORD *)(v3 + 40))
  {
    WebKit::RemoteImageBufferProxy::flushDrawingContextAsync(this);
    v4 = *((_QWORD *)this + 17);
    if (v4)
      v4 = *(_QWORD *)(v4 + 8);
    WebKit::RemoteResourceCacheProxy::forgetImageBuffer(v4 + 64, *((_QWORD *)this + 15));
    v5 = *((_QWORD *)this + 17);
    if (v5)
      v6 = *(WebKit::RemoteRenderingBackendProxy **)(v5 + 8);
    else
      v6 = 0;
    v12 = *((_QWORD *)this + 15);
    if (*((_QWORD *)v6 + 5))
    {
      v11 = &v12;
      WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v6, &v11, *((_QWORD *)v6 + 7));
    }
  }
  else
  {
    *((_BYTE *)this + 4016) = 0;
  }
  WebKit::RemoteDisplayListRecorderProxy::~RemoteDisplayListRecorderProxy((WebKit::RemoteImageBufferProxy *)((char *)this + 144));
  v8 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v8)
  {
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v7);
    }
  }
  WebCore::ImageBuffer::~ImageBuffer(this);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteImageBufferProxy::~RemoteImageBufferProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteImageBufferProxy::flushDrawingContextAsync(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t v1;
  uint64_t result;
  WTF::ApproximateTime *v4;
  unsigned int *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  _WORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  IPC::Encoder *v54;
  WTF *v55;
  void *v56;
  NSObject *v57;
  const char *v58;
  uint64_t v59;
  _BYTE *v60;
  unsigned int *v61;
  uint64_t *v62;
  IPC::Encoder *v63;
  _BYTE buf[22];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 17);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (!result)
    return result;
  if (!*((_BYTE *)this + 4016))
    return 0;
  v4 = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)result, &v61);
  v5 = v61;
  if (v61)
  {
    v6 = *((_QWORD *)this + 15);
    WTF::ApproximateTime::now(v4);
    v8 = v7 + 15.0;
    if (*((_QWORD *)v5 + 6) == v6)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 14), buf, v8);
        if (!buf[16])
          break;
        v9 = *(_QWORD *)buf;
        v10 = *(_QWORD *)&buf[8];
        v11 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
        v12 = (unint64_t)v11 - *(_QWORD *)buf;
        if ((unint64_t)v11 < *(_QWORD *)buf)
        {
          v13 = 0;
        }
        else
        {
          v13 = v12 + 2;
          if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > *(_QWORD *)&buf[8])
            goto LABEL_72;
          *v11 = 1098;
        }
        if (v10)
        {
          v15 = *((_QWORD *)v5 + 8);
          v16 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v17 = *((_QWORD *)v5 + 7);
          if (v16 + 16 >= v17)
            v16 = 0;
          if (v13 <= 0x10)
            v13 = 16;
          v18 = v16 + v13;
          if (v17 <= v18)
            v19 = 0;
          else
            v19 = v18;
          *((_QWORD *)v5 + 9) = v19;
          v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v19, v20));
          if (v21 == 0x80000000 || v5[27])
          {
            if (*((_BYTE *)v5 + 96))
              MEMORY[0x19AEBA1A0](v5[21]);
            v5[27] = 0;
          }
          goto LABEL_25;
        }
        v24 = buf[16];
        if (buf[16])
        {
          v9 = *(_QWORD *)buf;
          v11 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_72:
          v43 = 0;
          v44 = (unint64_t)v11 >= v9;
          v45 = (unint64_t)v11 - v9;
          if (v44 && v45 <= 0xFFFFFFFFFFFFFFFDLL && v45 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(v9 + v45) = 2821;
            v43 = v45 + 2;
          }
          v46 = *((_QWORD *)v5 + 8);
          v47 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v48 = *((_QWORD *)v5 + 7);
          if (v47 + 16 >= v48)
            v47 = 0;
          if (v43 <= 0x10)
            v43 = 16;
          v49 = v47 + v43;
          if (v48 <= v49)
            v49 = 0;
          *((_QWORD *)v5 + 9) = v49;
          v50 = (unint64_t *)(*(_QWORD *)(v46 + 16) + 128);
          do
            __ldaxr(v50);
          while (__stlxr(v49, v50));
          v5[27] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)v5 + 1);
          v51 = v62;
          v52 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v52 = 1098;
          *(_QWORD *)(v52 + 8) = v6;
          *(_QWORD *)(v52 + 528) = v52 + 16;
          *(_QWORD *)(v52 + 536) = v52 + 16;
          *(_OWORD *)(v52 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v52 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v52);
          v63 = (IPC::Encoder *)v52;
          v31 = IPC::Connection::sendMessageImpl((uint64_t)v51, (uint64_t *)&v63, 1, 0);
          v54 = v63;
          v63 = 0;
          if (v54)
          {
            IPC::Encoder::~Encoder(v54, v53);
            WTF::fastFree(v55, v56);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v62);
          if (!v31)
            goto LABEL_25;
          goto LABEL_88;
        }
        __break(1u);
LABEL_69:
        v28 = 0;
        v27 = v10;
LABEL_39:
        v29 = (_QWORD *)((v24 + v28 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v29 >= v24 + v28)
        {
          v30 = (char *)v29 - v24;
          v31 = 17;
          if ((unint64_t)v29 - v24 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_88;
          v28 = (unint64_t)(v30 + 8);
          if ((unint64_t)(v30 + 8) > v27)
            goto LABEL_88;
          *v29 = v6;
        }
        if (!v27)
        {
          v31 = 17;
          goto LABEL_88;
        }
        v32 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = *((_QWORD *)v5 + 7);
        if (v32 + 16 >= v33)
          v32 = 0;
        if (v28 <= 0x10)
          v28 = 16;
        v34 = v32 + v28;
        if (v33 <= v34)
          v35 = 0;
        else
          v35 = v34;
        *((_QWORD *)v5 + 9) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v35, v36));
        v38 = v5[27];
        if (v37 == 0x80000000 || v38 != 0)
        {
          v40 = v38 + 1;
          v5[27] = v40;
          if (v40 >= v5[26])
          {
            if (*((_BYTE *)v5 + 96))
              MEMORY[0x19AEBA1A0](v5[21]);
            v5[27] = 0;
          }
        }
        *((_QWORD *)v5 + 6) = v6;
      }
    }
    else
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 14), buf, v7 + 15.0);
      if (buf[16])
      {
        v24 = *(_QWORD *)buf;
        v10 = *(_QWORD *)&buf[8];
        v25 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v26 = v25 - *(_QWORD *)buf;
        if (v25 < *(_QWORD *)buf)
          goto LABEL_69;
        v27 = 0;
        if (v26 > 0xFFFFFFFFFFFFFFFDLL)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          if (v26 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v26) = 2822;
            v27 = v10;
            v28 = v26 + 2;
          }
        }
        goto LABEL_39;
      }
    }
    v31 = 15;
LABEL_88:
    v57 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v58 = IPC::errorAsString(v31);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteImageBuffer_FlushContext";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v58;
      _os_log_impl(&dword_196BCC000, v57, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
    }
    v59 = *((_QWORD *)this + 17);
    if (v59)
    {
      v60 = *(_BYTE **)(v59 + 8);
      if (v60)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v60);
    }
LABEL_25:
    v61 = 0;
    do
    {
      v22 = __ldaxr(v5);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v5));
    if (!v23)
    {
      atomic_store(1u, v5);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5);
      WTF::fastFree(v41, v42);
    }
  }
  return 1;
}

void WebKit::RemoteResourceCacheProxy::forgetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  v15 = a2;
  v3 = (uint64_t *)(a1 + 16);
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::variant<std::monostate,WTF::Ref<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::Ref<WebCore::RenderingResource,WTF::RawPtrTraits<WebCore::RenderingResource>,WTF::DefaultRefDerefTraits<WebCore::RenderingResource>>,WTF::Ref<WebCore::Font,WTF::RawPtrTraits<WebCore::Font>,WTF::DefaultRefDerefTraits<WebCore::Font>>,WTF::Ref<WebCore::FontCustomPlatformData,WTF::RawPtrTraits<WebCore::FontCustomPlatformData>,WTF::DefaultRefDerefTraits<WebCore::FontCustomPlatformData>>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((uint64_t *)(a1 + 16), &v15);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = (uint64_t *)(v6 + 24 * *(unsigned int *)(v6 - 4));
    if (v7 != v4)
      goto LABEL_3;
LABEL_18:
    __break(0xC471u);
    return;
  }
  if (!v4)
    goto LABEL_18;
  v7 = 0;
LABEL_3:
  if (v7 != v4)
  {
    v8 = (unsigned __int8 *)v4[1];
    *v4 = -1;
    v4[1] = 0;
    if (v8)
      WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v8, v5);
    ++*(_DWORD *)(*v3 - 16);
    v9 = *v3;
    if (*v3)
      v10 = *(_DWORD *)(v9 - 12) - 1;
    else
      v10 = -1;
    *(_DWORD *)(v9 - 12) = v10;
    v11 = *v3;
    if (*v3)
    {
      v12 = 6 * *(_DWORD *)(v11 - 12);
      v13 = *(_DWORD *)(v11 - 4);
      if (v12 < v13 && v13 >= 9)
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v13 >> 1);
    }
  }
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::releaseImageBuffer(WTF::ApproximateTime *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a2;
  if (*((_QWORD *)result + 5))
  {
    v2 = &v3;
    return WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(result, &v2, *((_QWORD *)result + 7));
  }
  return result;
}

_BYTE *WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(_BYTE *this)
{
  _BYTE *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (this[248])
  {
    v1 = this;
    v2 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((_QWORD *)v1 + 7);
      LODWORD(v6[0]) = 134217984;
      *(_QWORD *)((char *)v6 + 4) = v3;
      _os_log_impl(&dword_196BCC000, v2, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::didBecomeUnresponsive", (uint8_t *)v6, 0xCu);
    }
    v1[248] = 0;
    v4 = *((_QWORD *)v1 + 4);
    *((_QWORD *)v1 + 4) = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E34E3B70;
    v5[1] = v4;
    v6[0] = v5;
    WTF::ensureOnMainRunLoop();
    this = (_BYTE *)v6[0];
    v6[0] = 0;
    if (this)
      return (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

WebKit::RemoteImageBufferProxy *WebKit::RemoteImageBufferProxy::backingStoreWillChange(WebKit::RemoteImageBufferProxy *this)
{
  if (!*((_BYTE *)this + 4016))
  {
    *((_BYTE *)this + 4016) = 1;
    this = (WebKit::RemoteImageBufferProxy *)WebKit::RemoteImageBufferProxy::ensureBackend(this);
    if (this)
      return (WebKit::RemoteImageBufferProxy *)(*(uint64_t (**)(WebKit::RemoteImageBufferProxy *))(*(_QWORD *)this + 160))(this);
  }
  return this;
}

uint64_t WebKit::RemoteImageBufferProxy::didCreateBackend(uint64_t a1, uint64_t a2)
{
  char *v2;
  WebKit::WebProcess *v5;
  const void *v6;
  uint64_t result;
  uint64_t v8;
  const WebCore::DestinationColorSpace *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  WTF::ApproximateTime *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  WebKit::WebProcess *v22;
  _BYTE v23[24];
  CFTypeRef cf;
  char v25;
  uint64_t v26;
  __int128 v27;
  CFTypeRef v28[2];
  __int128 v29;
  __int128 v30;
  unsigned int v31[16];
  int v32;
  unsigned int v33[16];
  int v34;
  IntSize v35;
  const void *v36;
  uint64_t v37;

  v37 = 0;
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_32;
  WebCore::ImageBuffer::backendParameters();
  if (!*(_BYTE *)(a2 + 72))
    goto LABEL_44;
  if (*(_DWORD *)(a2 + 64) != 1)
  {
    v2 = 0;
    goto LABEL_11;
  }
  v2 = &_MergedGlobals_106;
    goto LABEL_45;
  v5 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  while (1)
  {
    if (*((_BYTE *)v5 + 761))
    {
      if (!*(_BYTE *)(a2 + 72))
        goto LABEL_44;
      LOBYTE(v31[0]) = 0;
      v32 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v31, a2);
      WebKit::ImageBufferRemoteIOSurfaceBackend::create((uint64_t)v31, (uint64_t *)&v27);
      v2 = (char *)v27;
      v37 = v27;
      if (v32 != -1)
        off_1E34E3470[v32]((int)&v26, (WTF::MachSendRight *)v31);
      v32 = -1;
    }
    else
    {
      if (!*(_BYTE *)(a2 + 72))
        goto LABEL_44;
      LOBYTE(v33[0]) = 0;
      v34 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>(v33, a2);
      WebKit::ImageBufferShareableMappedIOSurfaceBackend::create((uint64_t)v33, &v27);
      v2 = (char *)v27;
      v37 = v27;
      *(_QWORD *)&v27 = 0;
      if (v34 != -1)
        off_1E34E3470[v34]((int)&v26, (WTF::MachSendRight *)v33);
      v34 = -1;
    }
LABEL_11:
    if (*(_BYTE *)(a2 + 72))
    {
      if (*(_DWORD *)(a2 + 64))
        goto LABEL_13;
      LOBYTE(v27) = 0;
      WebCore::ImageBufferBackend::calculateBaseTransform();
      *((_QWORD *)&v30 + 1) = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(&v35, v8, v9);
      v10 = *(_OWORD *)v28;
      *(_OWORD *)(a1 + 48) = v27;
      *(_OWORD *)(a1 + 64) = v10;
      v11 = v30;
      *(_OWORD *)(a1 + 80) = v29;
      *(_OWORD *)(a1 + 96) = v11;
      if (*(_BYTE *)(a2 + 72))
        break;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v5 = WebKit::WebProcess::WebProcess(v22);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v5;
    v2[2488] = 1;
  }
  if (*(_DWORD *)(a2 + 64))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_47;
  }
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v27, a2);
  WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v23, (uint64_t)&v27);
  WebKit::ImageBufferShareableBitmapBackend::create(&v26);
  v12 = v26;
  v37 = v26;
  if (v2)
    (*(void (**)(char *))(*(_QWORD *)v2 + 8))(v2);
  if (v25)
  {
    v13 = cf;
    cf = 0;
    if (v13)
      CFRelease(v13);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v23);
  if ((_BYTE)v29)
  {
    v14 = v28[1];
    v28[1] = 0;
    if (v14)
      CFRelease(v14);
  }
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v27);
  v2 = (char *)v12;
LABEL_13:
  v6 = v36;
  v36 = 0;
  if (v6)
    CFRelease(v6);
  if (v2)
  {
    WebCore::ImageBuffer::setBackend();
    goto LABEL_17;
  }
LABEL_32:
  WebKit::RemoteDisplayListRecorderProxy::disconnect((WebKit::RemoteDisplayListRecorderProxy *)(a1 + 144), (void *)a2);
  v15 = *(_QWORD *)(a1 + 136);
  if (v15)
    v15 = *(_QWORD *)(v15 + 8);
  WebKit::RemoteResourceCacheProxy::forgetImageBuffer(v15 + 64, *(_QWORD *)(a1 + 120));
  v16 = *(_QWORD *)(a1 + 136);
  if (v16)
    v17 = *(WTF::ApproximateTime **)(v16 + 8);
  else
LABEL_47:
    v17 = 0;
  WebKit::RemoteRenderingBackendProxy::releaseImageBuffer(v17, *(_QWORD *)(a1 + 120));
  v19 = *(unsigned int **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v19)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v18);
    }
  }
LABEL_17:
  result = v37;
  v37 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::ensureBackend(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t v1;
  uint64_t v4;
  WebKit::RemoteRenderingBackendProxy *v5;
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  uint64_t v8;
  double v9;
  double v10;
  unsigned __int8 ***v11;
  int v12;
  unsigned __int8 v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned int *v22;
  unsigned __int8 ***v23;
  char v24;
  _BYTE buf[12];
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 14);
  if (v1)
    return v1;
  v4 = *((_QWORD *)this + 17);
  if (!v4)
    return 0;
  v5 = *(WebKit::RemoteRenderingBackendProxy **)(v4 + 8);
  if (!v5)
    return 0;
  v6 = WebKit::RemoteRenderingBackendProxy::connection(v5, &v22);
  v7 = v22;
  if (!v22)
    return *((_QWORD *)this + 14);
  v8 = *((_QWORD *)this + 15);
  WTF::ApproximateTime::now(v6);
  v10 = v9 + 15.0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)v7 + 1);
  v11 = v23;
  IPC::Connection::waitForMessage(v23, 0x445u, v8, 0, (uint64_t)buf, v10);
  v12 = *(_DWORD *)&buf[8];
  if (*(_DWORD *)&buf[8])
  {
    if (*(_DWORD *)&buf[8] != 1)
      std::__throw_bad_variant_access[abi:sn180100]();
    v14 = buf[0];
  }
  else
  {
    v13 = atomic_load((unsigned __int8 *)v11 + 33);
    v12 = buf[8];
    if ((v13 & 1) != 0)
    {
      (*((void (**)(unsigned __int8 **, unsigned __int8 ***, _QWORD))*v11[1] + 2))(v11[1], v11, *(_QWORD *)buf);
      v14 = 0;
      v12 = *(_DWORD *)&buf[8];
    }
    else
    {
      v14 = 1;
    }
    if (v12 == -1)
      goto LABEL_11;
  }
  ((void (*)(char *, _BYTE *))off_1E34E3480[v12])(&v24, buf);
LABEL_11:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v23);
  if (v14)
  {
    v17 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 8) + 56);
      v19 = IPC::errorAsString(v14);
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v18;
      v26 = 2082;
      v27 = v19;
      _os_log_impl(&dword_196BCC000, v17, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteImageBufferProxy::ensureBackendCreated - waitForAndDispatchImmediately returned error: %{public}s", buf, 0x16u);
    }
    v20 = *((_QWORD *)this + 17);
    if (v20)
    {
      v21 = *(_BYTE **)(v20 + 8);
      if (v21)
        WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v21);
    }
    v1 = 0;
  }
  else
  {
    v1 = *((_QWORD *)this + 14);
  }
  v22 = 0;
  do
  {
    v15 = __ldaxr(v7);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v7));
  if (!v16)
  {
    atomic_store(1u, v7);
    *(_QWORD *)buf = v7;
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
  }
  return v1;
}

WTF *WebKit::RemoteImageBufferProxy::copyNativeImage@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, _QWORD *a2@<X8>)
{
  WTF *result;
  uint64_t v5;
  WebKit::RemoteRenderingBackendProxy *v6;
  void *v7;
  CFTypeRef cf;
  WTF *v9;

  result = (WTF *)WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (!result)
    goto LABEL_10;
  result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 152))(result);
  if ((_DWORD)result)
  {
    WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)this);
    return (WTF *)WebCore::ImageBuffer::copyNativeImage(this);
  }
  v5 = *((_QWORD *)this + 17);
  if (v5
    && (v6 = *(WebKit::RemoteRenderingBackendProxy **)(v5 + 8)) != 0
    && (WebKit::RemoteRenderingBackendProxy::getShareableBitmap(&v9, v6, *((_QWORD *)this + 15)), (result = v9) != 0))
  {
    WebCore::ShareableBitmap::createPlatformImage();
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    WebCore::NativeImage::create();
    if (cf)
      CFRelease(cf);
    result = v9;
    v9 = 0;
    if (result)
      return (WTF *)WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)result, v7);
  }
  else
  {
LABEL_10:
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::flushDrawingContext(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebKit::RemoteRenderingBackendProxy *v6;
  WTF::ApproximateTime *v7;
  unsigned int *v8;
  NSObject *v9;
  double v10;
  double v11;
  unint64_t v12;
  uint64_t **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _BOOL8 v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  IPC::Decoder *v39;
  IPC::Decoder *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  WTF *v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  const char *v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE v65[16];
  int v66;
  unsigned int *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  IPC::Decoder *v71;
  int v72;
  int v73;
  IPC::Decoder *v74;
  int v75;
  unsigned int v76;
  IPC::Decoder *v77;
  char v78;
  _BYTE buf[22];
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(this + 136);
  if (!v3)
    return this;
  if (!*(_QWORD *)(v3 + 8))
    return this;
  v4 = this;
  if (!*(_BYTE *)(this + 4016))
    return this;
  kdebug_trace();
  v5 = *(_QWORD *)(v4 + 136);
  if (v5)
  {
    v6 = *(WebKit::RemoteRenderingBackendProxy **)(v5 + 8);
    if (v6)
    {
      v7 = WebKit::RemoteRenderingBackendProxy::connection(v6, &v67);
      v8 = v67;
      if (v67)
      {
        v9 = *(NSObject **)(v4 + 120);
        WTF::ApproximateTime::now(v7);
        v11 = v10 + 15.0;
        if (*((NSObject **)v8 + 6) == v9)
        {
LABEL_8:
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 14), &v68, v11);
          if (!v70)
          {
            LOBYTE(v74) = 15;
            v76 = 1;
            goto LABEL_57;
          }
          v2 = v68;
          v12 = v69;
          v13 = (uint64_t **)(v8 + 2);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v77, (uint64_t **)v8 + 1);
          v1 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
          if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v77, v1))
          {
            LOBYTE(v74) = 11;
            v1 = 1;
            v76 = 1;
            buf[0] = 0;
            *(_DWORD *)&buf[16] = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v74);
            v80 = 1;
            if (v76 != -1)
              ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1E34E34C0[v76])(&v71, &v74);
            goto LABEL_53;
          }
          v14 = (v2 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v15 = v14 - v2;
          if (v14 < v2)
          {
            v17 = 0;
            v16 = v12;
          }
          else
          {
            v16 = 0;
            if (v15 > 0xFFFFFFFFFFFFFFFDLL)
              goto LABEL_112;
            v17 = 0;
            if (v15 + 2 <= v12)
            {
              *(_WORD *)(v2 + v15) = 3616;
              v16 = v12;
              v17 = v15 + 2;
            }
          }
          while (1)
          {
            v18 = (_QWORD *)((v2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v18 >= v2 + v17)
            {
              v17 = (unint64_t)v18 - v2 + 8;
              if ((unint64_t)v18 - v2 > 0xFFFFFFFFFFFFFFF7 || v17 > v16)
              {
LABEL_77:
                LOBYTE(v74) = 0;
                LOBYTE(v76) = 0;
                goto LABEL_46;
              }
              *v18 = v1;
            }
            if (!v16)
              goto LABEL_77;
            v20 = *((_QWORD *)v8 + 8);
            v21 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v22 = *((_QWORD *)v8 + 7);
            if (v21 + 16 >= v22)
              v21 = 0;
            if (v17 <= 0x10)
              v17 = 16;
            v23 = v21 + v17;
            if (v22 <= v23)
              v24 = 0;
            else
              v24 = v23;
            *((_QWORD *)v8 + 9) = v24;
            v25 = (unint64_t *)(*(_QWORD *)(v20 + 16) + 128);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v24, v25));
            if (v26 == 0x80000000 || v8[27])
            {
              if (*((_BYTE *)v8 + 96))
                MEMORY[0x19AEBA1A0](v8[21]);
              v8[27] = 0;
            }
            v2 = (unint64_t)(v8 + 22);
            while (1)
            {
              v27 = *(unint64_t **)(*((_QWORD *)v8 + 8) + 16);
              do
                v28 = __ldaxr(v27);
              while (__stlxr(0x80000000uLL, v27));
              v29 = atomic_load((unint64_t *)(*(_QWORD *)(*((_QWORD *)v8 + 8) + 16) + 128));
              if (!(v28 | v29 & 0xFFFFFFFF7FFFFFFFLL))
                break;
              if (*((_BYTE *)v8 + 96))
              {
                v30 = IPC::Semaphore::waitFor(v8 + 22, v11);
                if (v30)
                {
                  WTF::ApproximateTime::now((WTF::ApproximateTime *)v30);
                  if (v31 < v11)
                    continue;
                }
              }
              LOBYTE(v74) = 16;
              v75 = 1;
LABEL_45:
              LOBYTE(v76) = 1;
              goto LABEL_46;
            }
            atomic_store(0, *(unint64_t **)(*((_QWORD *)v8 + 8) + 16));
            *((_QWORD *)v8 + 9) = 0;
            v32 = *((_QWORD *)v8 + 8);
            v33 = *(_QWORD *)(v32 + 8);
            if (v33 <= 0xFF)
              goto LABEL_103;
            v34 = *((_QWORD *)v8 + 7);
            v35 = *(_QWORD *)(v32 + 16);
            v36 = v33 - 256;
            if (v34)
            {
              v2 = v34 - 1;
              if (v36 < v34 - 1)
                goto LABEL_103;
            }
            else
            {
              v2 = v36;
            }
            v37 = v35 + 256;
            v38 = WTF::fastMalloc((WTF *)0x48);
            v39 = (IPC::Decoder *)IPC::Decoder::Decoder(v38, v37, v2, *((_QWORD *)v8 + 6));
            if (*((_WORD *)v39 + 25) != 2821)
            {
              v74 = v39;
              v75 = 0;
              goto LABEL_45;
            }
            IPC::Decoder::~Decoder(v39);
            WTF::fastFree(v44, v45);
            IPC::Connection::waitForSyncReply((uint64_t)v77, v1, 0xE20u, (uint64_t)&v71, v11);
            LOBYTE(v74) = 0;
            v75 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v74, (uint64_t)&v71);
            LOBYTE(v76) = 1;
            if (v72 != -1)
              ((void (*)(char *, IPC::Decoder **))off_1E34E3480[v72])(&v78, &v71);
LABEL_46:
            IPC::Connection::popPendingSyncRequestID(v77);
            if ((_BYTE)v76)
            {
              if (v75)
              {
                if (v75 != 1)
                  goto LABEL_111;
                buf[0] = (_BYTE)v74;
                v41 = 1;
                *(_DWORD *)&buf[16] = 1;
                v80 = 1;
              }
              else
              {
                v40 = v74;
                v74 = 0;
                v71 = v40;
                v73 = 0;
                buf[0] = 0;
                *(_DWORD *)&buf[16] = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v71);
                v80 = 1;
                if (v73 != -1)
                  ((void (*)(char *, IPC::Decoder **))off_1E34E34C0[v73])(&v78, &v71);
                if (!(_BYTE)v76)
                  goto LABEL_53;
                v41 = v75;
                if (v75 == -1)
                  goto LABEL_53;
              }
              ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1E34E3480[v41])(&v71, &v74);
            }
            else
            {
              buf[0] = 0;
              v80 = 0;
            }
LABEL_53:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v77);
            if (v80)
            {
              LOBYTE(v74) = 0;
              v76 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v74, (uint64_t)buf);
              if (v80 && *(_DWORD *)&buf[16] != -1)
                ((void (*)(IPC::Decoder **, _BYTE *))off_1E34E34C0[*(unsigned int *)&buf[16]])(&v71, buf);
            }
            else
            {
              if (!v70)
              {
LABEL_103:
                __break(1u);
                goto LABEL_104;
              }
              IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v8, v68, v69);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, v13);
              IPC::Connection::sendSync<Messages::RemoteImageBuffer::FlushContextSync>((uint64_t)&v74, *(uint64_t *)buf, (uint64_t)v9, v11);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
            }
LABEL_57:
            v13 = (uint64_t **)v76;
            if (!v76)
              goto LABEL_58;
            v9 = qword_1ECE716E0;
            if (!os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
              goto LABEL_108;
            if ((_DWORD)v13 == 1)
              goto LABEL_107;
LABEL_111:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_112:
            v17 = v16;
          }
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 14), buf, v10 + 15.0);
        if (buf[16])
        {
          v46 = *(_QWORD *)buf;
          v47 = *(_QWORD *)&buf[8];
          v48 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v49 = v48 - *(_QWORD *)buf;
          if (v48 < *(_QWORD *)buf)
          {
            v51 = 0;
            v50 = *(_QWORD *)&buf[8];
          }
          else
          {
            v50 = 0;
            if (v49 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v51 = 0;
            }
            else
            {
              v51 = 0;
              if (v49 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v49) = 2822;
                v50 = v47;
                v51 = v49 + 2;
              }
            }
          }
          v52 = (v46 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
          if (v52 < v46 + v51)
            goto LABEL_92;
          v53 = v52 - v46;
          v54 = 17;
          if (v53 <= 0xFFFFFFFFFFFFFFF7)
          {
            v51 = v53 + 8;
            if (v53 + 8 <= v50)
            {
              *(_QWORD *)(v46 + v53) = v9;
LABEL_92:
              if (v50)
              {
                v55 = *((_QWORD *)v8 + 8);
                v56 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
                v57 = *((_QWORD *)v8 + 7);
                if (v56 + 16 >= v57)
                  v56 = 0;
                if (v51 <= 0x10)
                  v51 = 16;
                v58 = v56 + v51;
                if (v57 <= v58)
                  v59 = 0;
                else
                  v59 = v58;
                *((_QWORD *)v8 + 9) = v59;
                v60 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v59, v60));
                IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v8, v61 == 0x80000000);
                *((_QWORD *)v8 + 6) = v9;
                goto LABEL_8;
              }
              v54 = 17;
            }
          }
        }
        else
        {
          v54 = 15;
        }
        LOBYTE(v74) = v54;
        v76 = 1;
        v9 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
LABEL_107:
          v62 = IPC::errorAsString(v74);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteImageBuffer_FlushContextSync";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v62;
          _os_log_impl(&dword_196BCC000, v9, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
LABEL_108:
        v63 = *(_QWORD *)(v4 + 136);
        if (v63)
        {
          v64 = *(_BYTE **)(v63 + 8);
          if (v64)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v64);
        }
LABEL_58:
        v65[0] = 0;
        v66 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v65, (uint64_t)&v74);
        if (v76 != -1)
          ((void (*)(_BYTE *, IPC::Decoder **))off_1E34E34C0[v76])(buf, &v74);
        v67 = 0;
        do
        {
          v42 = __ldaxr(v8);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v8));
        if (!v43)
        {
          atomic_store(1u, v8);
          *(_QWORD *)buf = v8;
          WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
        }
        goto LABEL_64;
      }
    }
  }
LABEL_104:
  v65[0] = 1;
  v66 = 1;
LABEL_64:
  if (v66 != -1)
    ((void (*)(_BYTE *, _BYTE *))off_1E34E34C0[v66])(buf, v65);
  v66 = -1;
  *(_BYTE *)(v4 + 4016) = 0;
  return kdebug_trace();
}

uint64_t WebKit::RemoteRenderingBackendProxy::getShareableBitmap(_QWORD *a1, WebKit::RemoteRenderingBackendProxy *a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  unint64_t v6[8];
  char v7;
  _BYTE v8[80];
  int v9;

  LOBYTE(v6[0]) = 1;
  result = (uint64_t)WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteImageBuffer::GetShareableBitmap,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v8, a2, v6, a3);
  v5 = v9;
  if (v9)
  {
    *a1 = 0;
  }
  else
  {
    IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::takeReply(v6, (uint64_t)v8);
    if (v7)
    {
      result = WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
      if (!v7)
      {
        __break(1u);
        return result;
      }
      WebCore::ShareableBitmap::create();
    }
    else
    {
      *a1 = 0;
    }
    result = (uint64_t)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v6);
    v5 = v9;
  }
  if (v5 != -1)
    return ((uint64_t (*)(unint64_t *, _BYTE *))off_1E34E3548[v5])(v6, v8);
  return result;
}

WTF *WebKit::RemoteImageBufferProxy::createNativeImageReference@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, _QWORD *a2@<X8>)
{
  WTF *result;

  result = (WTF *)WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (result)
  {
    if ((*(unsigned int (**)(WTF *))(*(_QWORD *)result + 152))(result))
    {
      WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)this);
      return (WTF *)WebCore::ImageBuffer::createNativeImageReference(this);
    }
    else
    {
      return WebKit::RemoteImageBufferProxy::copyNativeImage(this, a2);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::sinkIntoBufferForDifferentThread@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  uint64_t result;
  uint64_t v5;
  CFTypeRef cf;
  uint64_t v7;

  v3 = (const void *)*((_QWORD *)this + 4);
  cf = v3;
  if (v3)
    CFRetain(v3);
  WebCore::ImageBuffer::create();
  if (cf)
    CFRelease(cf);
  result = v7;
  if (v7)
  {
    (*(void (**)())(*(_QWORD *)v7 + 16))();
    result = WebCore::GraphicsContext::drawImageBuffer();
    v5 = v7;
  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
  return result;
}

_QWORD *WebKit::RemoteImageBufferProxy::filteredNativeImage@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  WebKit::RemoteRenderingBackendProxy *v8;
  WTF::ApproximateTime *v9;
  unsigned int *v10;
  uint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  const void *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t *v40;
  int v41;
  void *v42;
  IPC::Encoder *v43;
  WTF *v44;
  void *v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  void *v50;
  WTF *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unsigned int v67;
  unsigned int v69;
  WTF *v70;
  void *v71;
  NSObject *v72;
  const char *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  unsigned int *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  WTF *v82;
  int v83;
  char v84;
  CFTypeRef cf;
  int v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char v91;
  int v92;
  IPC::Decoder *v93;
  _BYTE buf[66];
  char v95;
  int v96;
  char v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v4 = result[17];
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    *a3 = 0;
    return result;
  }
  v5 = result;
  WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v76, a2);
  v7 = v5[17];
  if (!v7
    || (v8 = *(WebKit::RemoteRenderingBackendProxy **)(v7 + 8)) == 0
    || (v9 = WebKit::RemoteRenderingBackendProxy::connection(v8, &v77), (v10 = v77) == 0))
  {
    buf[0] = 1;
    v96 = 1;
    goto LABEL_91;
  }
  v11 = v5[15];
  WTF::ApproximateTime::now(v9);
  v13 = v12 + 15.0;
  if (*((_QWORD *)v10 + 6) != v11)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v10 + 14), buf, v12 + 15.0);
    if (!buf[16])
    {
LABEL_146:
      v60 = 15;
      goto LABEL_147;
    }
    v52 = *(_QWORD *)buf;
    v53 = *(_QWORD *)&buf[8];
    v54 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = v54 - *(_QWORD *)buf;
    if (v54 < *(_QWORD *)buf)
    {
      v57 = 0;
      v56 = *(_QWORD *)&buf[8];
    }
    else
    {
      v56 = 0;
      if (v55 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v57 = 0;
      }
      else
      {
        v57 = 0;
        if (v55 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v55) = 2822;
          v56 = v53;
          v57 = v55 + 2;
        }
      }
    }
    v58 = (v52 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v58 >= v52 + v57)
    {
      v59 = v58 - v52;
      v60 = 17;
      if (v59 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_147;
      v57 = v59 + 8;
      if (v59 + 8 > v56)
        goto LABEL_147;
      *(_QWORD *)(v52 + v59) = v11;
    }
    if (v56)
    {
      v61 = *((_QWORD *)v10 + 8);
      v62 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v63 = *((_QWORD *)v10 + 7);
      if (v62 + 16 >= v63)
        v62 = 0;
      if (v57 <= 0x10)
        v57 = 16;
      v64 = v62 + v57;
      if (v63 <= v64)
        v64 = 0;
      *((_QWORD *)v10 + 9) = v64;
      v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v64, v65));
      v67 = v10[27];
      if (v66 == 0x80000000 || v67 != 0)
      {
        v69 = v67 + 1;
        v10[27] = v69;
        if (v69 >= v10[26])
        {
          if (*((_BYTE *)v10 + 96))
            MEMORY[0x19AEBA1A0](v10[21]);
          v10[27] = 0;
        }
      }
      *((_QWORD *)v10 + 6) = v11;
      goto LABEL_7;
    }
    v60 = 17;
LABEL_147:
    LOBYTE(v88) = v60;
    v92 = 1;
    v72 = qword_1ECE716E0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_137;
    goto LABEL_136;
  }
LABEL_7:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v10 + 14), &v79, v13);
  if (!v81)
  {
    LOBYTE(v88) = 15;
    v92 = 1;
    goto LABEL_84;
  }
  v14 = v79;
  v15 = v80;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v93, (uint64_t **)v10 + 1);
  v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v93, v16))
  {
    v88 = v14;
    v89 = v15;
    v90 = 0;
    v17 = (v14 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v18 = v17 - v14;
    if (v17 < v14)
    {
      v19 = 0;
    }
    else if (v18 > 0xFFFFFFFFFFFFFFFDLL || (v19 = v18 + 2, v18 + 2 > v15))
    {
      v15 = 0;
      v19 = 0;
      v89 = 0;
    }
    else
    {
      *(_WORD *)(v14 + v18) = 3615;
      v90 = v18 + 2;
    }
    v20 = (_QWORD *)((v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v20 >= v14 + v19)
    {
      v21 = (char *)v20 - v14;
      if ((unint64_t)v20 - v14 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v21 + 8) > v15)
      {
        v89 = 0;
      }
      else
      {
        *v20 = v16;
        v90 = (unint64_t)(v21 + 8);
      }
    }
    IPC::ArgumentCoder<WebCore::Filter,void>::encode((uint64_t *)&v88, v76);
    if (v89)
    {
      v22 = v90;
      v23 = *((_QWORD *)v10 + 8);
      v24 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v25 = *((_QWORD *)v10 + 7);
      if (v24 + 16 >= v25)
        v24 = 0;
      if (v90 <= 0x10)
        v22 = 16;
      v26 = v24 + v22;
      if (v25 <= v26)
        v27 = 0;
      else
        v27 = v26;
      *((_QWORD *)v10 + 9) = v27;
      v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v27, v28));
      if (v29 == 0x80000000 || v10[27])
      {
        if (*((_BYTE *)v10 + 96))
          MEMORY[0x19AEBA1A0](v10[21]);
        v10[27] = 0;
      }
      *((_QWORD *)v10 + 9) = 0;
      IPC::Connection::waitForSyncReply((uint64_t)v93, v16, 0xE1Fu, (uint64_t)&v82, v13);
      LOBYTE(cf) = 0;
      v86 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&cf, (uint64_t)&v82);
      v87 = 1;
      if (v83 != -1)
        ((void (*)(uint64_t **, WTF **))off_1E34E3480[v83])(&v78, &v82);
    }
    else
    {
      LOBYTE(cf) = 0;
      v87 = 0;
    }
    IPC::Connection::popPendingSyncRequestID(v93);
    if (v87)
    {
      if (v86 == 1)
      {
        buf[0] = (_BYTE)cf;
        v31 = 1;
        v96 = 1;
        v97 = 1;
      }
      else
      {
        if (v86)
          goto LABEL_145;
        LOBYTE(v82) = 0;
        v84 = 0;
        v30 = IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>((IPC::Decoder *)cf, (WTF::MachSendRight *)&v82);
        if (v84)
        {
          if (!v87)
            goto LABEL_140;
          if (v86)
            goto LABEL_145;
          IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult((uint64_t)&v88, (IPC::Decoder **)&cf, (uint64_t)&v82);
          buf[0] = 0;
          v96 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v88);
          v97 = 1;
          if (v92 != -1)
            ((void (*)(uint64_t **, unint64_t *))off_1E34E34A0[v92])(&v78, &v88);
          if (v84)
            std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v82);
        }
        else
        {
          buf[0] = 13;
          v96 = 1;
          v97 = 1;
        }
        if (!v87)
          goto LABEL_54;
        v31 = v86;
        if (v86 == -1)
          goto LABEL_54;
      }
      ((void (*)(unint64_t *, CFTypeRef *))off_1E34E3480[v31])(&v88, &cf);
    }
    else
    {
      buf[0] = 0;
      v97 = 0;
    }
  }
  else
  {
    LOBYTE(v88) = 11;
    v92 = 1;
    buf[0] = 0;
    v96 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v88);
    v97 = 1;
    if (v92 != -1)
      ((void (*)(WTF **, unint64_t *))off_1E34E34A0[v92])(&v82, &v88);
  }
LABEL_54:
  v30 = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v93);
  if (v97)
  {
    LOBYTE(v88) = 0;
    v92 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v88, (uint64_t)buf);
    if (v97 && v96 != -1)
      ((void (*)(WTF **, _BYTE *))off_1E34E34A0[v96])(&v82, buf);
    goto LABEL_84;
  }
  if (!v81)
    goto LABEL_140;
  v32 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v33 = v32 - v79;
  if (v32 < v79)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v80)
    {
      *(_WORD *)(v79 + v33) = 2821;
      v34 = v33 + 2;
    }
  }
  v35 = *((_QWORD *)v10 + 8);
  v36 = (*((_QWORD *)v10 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = *((_QWORD *)v10 + 7);
  if (v36 + 16 >= v37)
    v36 = 0;
  if (v34 <= 0x10)
    v34 = 16;
  v38 = v36 + v34;
  if (v37 <= v38)
    v38 = 0;
  *((_QWORD *)v10 + 9) = v38;
  v39 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 128);
  do
    __ldaxr(v39);
  while (__stlxr(v38, v39));
  v10[27] = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)v10 + 1);
  v40 = v78;
  cf = 0;
  IPC::Connection::createSyncMessageEncoder(3615, v11, (uint64_t *)&cf, (uint64_t *)&v93);
  IPC::ArgumentCoder<WebCore::Filter,void>::encode((char *)v93, v76);
  IPC::Connection::sendSyncMessage((uint64_t)v40, (uint64_t)cf, (uint64_t *)&v93, 0, (uint64_t)&v82, v13);
  if (v83)
  {
    if (v83 == 1)
    {
      LOBYTE(v88) = (_BYTE)v82;
      v41 = 1;
      v92 = 1;
LABEL_80:
      ((void (*)(_BYTE *, WTF **))off_1E34E3480[v41])(buf, &v82);
      goto LABEL_81;
    }
LABEL_145:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_146;
  }
  buf[0] = 0;
  v95 = 0;
  IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(v82, (WTF::MachSendRight *)buf);
  if (v95)
  {
    if (v83)
      goto LABEL_145;
    IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult((uint64_t)&v88, &v82, (uint64_t)buf);
    if (v95)
      std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)buf);
  }
  else
  {
    LOBYTE(v88) = 13;
    v92 = 1;
  }
  v41 = v83;
  if (v83 != -1)
    goto LABEL_80;
LABEL_81:
  v43 = v93;
  v93 = 0;
  if (v43)
  {
    IPC::Encoder::~Encoder(v43, v42);
    WTF::fastFree(v44, v45);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
LABEL_84:
  v46 = v92;
  if (v92)
  {
    v72 = qword_1ECE716E0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
LABEL_137:
      v74 = v5[17];
      if (v74)
      {
        v75 = *(_BYTE **)(v74 + 8);
        if (v75)
          WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v75);
      }
      goto LABEL_85;
    }
    if (v46 == 1)
    {
LABEL_136:
      v73 = IPC::errorAsString(v88);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "RemoteImageBuffer_FilteredNativeImage";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v73;
      _os_log_impl(&dword_196BCC000, v72, OS_LOG_TYPE_DEFAULT, "RemoteDisplayListRecorderProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
      goto LABEL_137;
    }
    goto LABEL_145;
  }
LABEL_85:
  buf[0] = 0;
  v96 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v88);
  if (v92 != -1)
    ((void (*)(WTF **, unint64_t *))off_1E34E34A0[v92])(&v82, &v88);
  v77 = 0;
  do
  {
    v47 = __ldaxr(v10);
    v48 = v47 - 1;
  }
  while (__stlxr(v48, v10));
  if (!v48)
  {
    atomic_store(1u, v10);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v10);
    WTF::fastFree(v70, v71);
  }
LABEL_91:
  result = WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v76, v6);
  v49 = v96;
  if (v96)
  {
    *a3 = 0;
    goto LABEL_101;
  }
  LOBYTE(v88) = 0;
  v91 = 0;
  if (!v95)
    goto LABEL_99;
  WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)&v88, (uint64_t)&buf[8]);
  v91 = 1;
  v30 = (const void *)WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
  if (!v91)
  {
LABEL_140:
    __break(1u);
LABEL_141:
    CFRelease(v30);
LABEL_97:
    v51 = v82;
    v82 = 0;
    if (v51)
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v51, v50);
    goto LABEL_100;
  }
  WebCore::ShareableBitmap::create();
  if (v82)
  {
    WebCore::ShareableBitmap::createPlatformImage();
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    WebCore::NativeImage::create();
    v30 = cf;
    cf = 0;
    if (!v30)
      goto LABEL_97;
    goto LABEL_141;
  }
LABEL_99:
  *a3 = 0;
LABEL_100:
  result = std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v88);
  v49 = v96;
LABEL_101:
  if (v49 != -1)
    return (_QWORD *)((uint64_t (*)(unint64_t *, _BYTE *))off_1E34E34A0[v49])(&v88, buf);
  return result;
}

WebCore::PixelBuffer *WebKit::RemoteImageBufferProxy::getPixelBuffer@<X0>(WebKit::RemoteImageBufferProxy *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, WebCore::PixelBuffer **a5@<X8>)
{
  WebCore::PixelBuffer *result;
  uint64_t v11;
  WebKit::RemoteRenderingBackendProxy *v12;
  uint64_t v13;
  WebCore::SharedMemory *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  IPC::Decoder *v19;
  WTF::ApproximateTime *v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL8 v41;
  double v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  IPC::Decoder *v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  WebCore::PixelBuffer *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  uint64_t v76;
  const char *v77;
  WTF *v78;
  void *v79;
  unsigned int *v80;
  unint64_t v81;
  uint64_t v82;
  void *__dst;
  WebCore::PixelBuffer *v84;
  uint64_t v85;
  IPC::Decoder *v86;
  unsigned int *v87;
  IPC::Decoder **v88;
  uint64_t *v89;
  _BYTE v90[16];
  unsigned int v91;
  char v92[8];
  uint64_t v93;
  char v94;
  unsigned int *v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  IPC::Decoder *v99;
  int v100;
  char v101;
  IPC::Decoder *v102;
  char v103[8];
  int v104;
  unsigned int *v105;
  unint64_t v106;
  unint64_t v107;
  char v108;
  _BYTE buf[24];
  unint64_t *v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  result = (WebCore::PixelBuffer *)WebKit::RemoteImageBufferProxy::ensureBackend(a1);
  if (!result)
  {
    *a5 = 0;
    return result;
  }
  if ((*(unsigned int (**)(WebCore::PixelBuffer *))(*(_QWORD *)result + 152))(result))
  {
    WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)a1);
    return (WebCore::PixelBuffer *)WebCore::ImageBuffer::getPixelBuffer();
  }
  *(_QWORD *)buf = *(_QWORD *)(a3 + 8);
  (*(void (**)(WebCore::PixelBuffer **__return_ptr, uint64_t, unsigned int *, _BYTE *))(*(_QWORD *)a4 + 24))(&v84, a4, a2, buf);
  result = v84;
  if (!v84)
  {
    v56 = 0;
    goto LABEL_73;
  }
  v11 = *((_QWORD *)a1 + 17);
  if (!v11 || (v12 = *(WebKit::RemoteRenderingBackendProxy **)(v11 + 8)) == 0)
  {
LABEL_71:
    result = (WebCore::PixelBuffer *)WebCore::PixelBuffer::zeroRange(result);
    goto LABEL_72;
  }
  v13 = *((_QWORD *)a1 + 15);
  v15 = *((_QWORD *)v84 + 5);
  v14 = (WebCore::SharedMemory *)*((_QWORD *)v84 + 6);
  v16 = (uint64_t)v12 + 144;
  v17 = *((_QWORD *)v12 + 22) & 0xFFFFFFFFFFFFLL;
  if (v17)
    goto LABEL_149;
  while (1)
  {
    v18 = *((_QWORD *)v12 + 17);
    __dst = (void *)v15;
    if (v18 && *(_QWORD *)(v18 + 8) >= (unint64_t)v14)
    {
      WebCore::TimerBase::start();
      v92[0] = 0;
      v94 = 0;
      goto LABEL_10;
    }
    WebKit::RemoteRenderingBackendProxy::destroyGetPixelBufferSharedMemory(v12);
    WebCore::SharedMemory::allocate(v14);
    if (v105)
    {
      WebCore::SharedMemory::createHandle();
      if (buf[16])
      {
        v74 = (uint64_t)v105;
        v105 = 0;
        v75 = (unsigned int *)*((_QWORD *)v12 + 17);
        *((_QWORD *)v12 + 17) = v74;
        if (v75)
        {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v75);
          if (!buf[16])
            goto LABEL_147;
        }
        WebCore::SharedMemoryHandle::takeOwnershipOfMemory();
        WebCore::TimerBase::start();
        v92[0] = 0;
        v94 = 0;
        if (buf[16])
        {
          WTF::MachSendRight::MachSendRight();
          v93 = *(_QWORD *)&buf[8];
          v94 = 1;
          if (buf[16])
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)buf);
        }
      }
      else
      {
        v92[0] = 0;
        v94 = 0;
      }
      v80 = v105;
      v105 = 0;
      if (v80)
        WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v80);
    }
    else
    {
      v92[0] = 0;
      v94 = 0;
    }
    if (v94)
      break;
LABEL_10:
    if (!*((_QWORD *)v12 + 17))
      goto LABEL_70;
    v19 = *(IPC::Decoder **)a3;
    v85 = *(_QWORD *)(a3 + 8);
    v86 = v19;
    v87 = a2;
    v88 = &v86;
    v89 = &v85;
    v20 = WebKit::RemoteRenderingBackendProxy::connection(v12, &v95);
    a2 = v95;
    v15 = (unint64_t)off_1E34E3528;
    if (!v95)
    {
      v90[0] = 1;
      v91 = 1;
      goto LABEL_66;
    }
    WTF::ApproximateTime::now(v20);
    v22 = v21 + 15.0;
    if (*((_QWORD *)a2 + 6) == v13)
      goto LABEL_13;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a2 + 14), buf, v21 + 15.0);
    if (!buf[16])
    {
      a3 = 15;
      goto LABEL_153;
    }
    v57 = *(_QWORD *)buf;
    v58 = *(_QWORD *)&buf[8];
    v59 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v60 = v59 - *(_QWORD *)buf;
    if (v59 < *(_QWORD *)buf)
    {
      v62 = 0;
      v61 = *(_QWORD *)&buf[8];
    }
    else
    {
      v61 = 0;
      if (v60 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v62 = 0;
      }
      else
      {
        v62 = 0;
        if (v60 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v60) = 2822;
          v61 = v58;
          v62 = v60 + 2;
        }
      }
    }
    v63 = (_QWORD *)((v57 + v62 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v63 >= v57 + v62)
    {
      v64 = (char *)v63 - v57;
      a3 = 17;
      if ((unint64_t)v63 - v57 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_153;
      v62 = (unint64_t)(v64 + 8);
      if ((unint64_t)(v64 + 8) > v61)
        goto LABEL_153;
      *v63 = v13;
    }
    if (!v61)
    {
      a3 = 17;
LABEL_153:
      LOBYTE(v105) = a3;
      LODWORD(v107) = 1;
      v13 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_119:
        v16 = (uint64_t)buf;
        v76 = *((_QWORD *)v12 + 7);
        v77 = IPC::errorAsString(a3);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v76;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "RemoteImageBuffer_GetPixelBuffer";
        *(_WORD *)&buf[22] = 2082;
        v110 = (unint64_t *)v77;
        _os_log_impl(&dword_196BCC000, (os_log_t)v13, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
LABEL_120:
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v12);
LABEL_60:
      v90[0] = 0;
      v91 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v90, (uint64_t)&v105);
      if ((_DWORD)v107 != -1)
        ((void (*)(_BYTE *, unsigned int **))off_1E34E3528[v107])(buf, &v105);
      v95 = 0;
      do
      {
        v54 = __ldaxr(a2);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, a2));
      if (!v55)
      {
        atomic_store(1u, a2);
        *(_QWORD *)buf = a2;
        WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
      }
LABEL_66:
      v13 = v91;
      if (v91 == -1)
        goto LABEL_68;
      ((void (*)(_BYTE *, _BYTE *))off_1E34E3528[v91])(buf, v90);
      if ((_DWORD)v13)
        goto LABEL_68;
      goto LABEL_143;
    }
    v65 = (*((_QWORD *)a2 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v66 = *((_QWORD *)a2 + 7);
    if (v65 + 16 >= v66)
      v65 = 0;
    if (v62 <= 0x10)
      v62 = 16;
    v67 = v65 + v62;
    if (v66 <= v67)
      v68 = 0;
    else
      v68 = v67;
    *((_QWORD *)a2 + 9) = v68;
    v69 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 16) + 128);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v68, v69));
    v71 = a2[27];
    if (v70 == 0x80000000 || v71 != 0)
    {
      v73 = v71 + 1;
      a2[27] = v73;
      if (v73 >= a2[26])
      {
        if (*((_BYTE *)a2 + 96))
          MEMORY[0x19AEBA1A0](a2[21]);
        a2[27] = 0;
      }
    }
    *((_QWORD *)a2 + 6) = v13;
LABEL_13:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a2 + 14), &v96, v22);
    if (!v98)
    {
      LOBYTE(v105) = 15;
      LODWORD(v107) = 1;
      goto LABEL_59;
    }
    v23 = v96;
    v24 = v97;
    a3 = (uint64_t)(a2 + 2);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v102, (uint64_t **)a2 + 1);
    v16 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    if (IPC::Connection::pushPendingSyncRequestID((uint64_t)v102, v16))
    {
      v105 = (unsigned int *)v23;
      v106 = v24;
      v107 = 0;
      v25 = (v23 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v26 = v25 - v23;
      if (v25 < v23)
      {
        v27 = 0;
      }
      else if (v26 > 0xFFFFFFFFFFFFFFFDLL || (v27 = v26 + 2, v26 + 2 > v24))
      {
        v24 = 0;
        v27 = 0;
        v106 = 0;
      }
      else
      {
        *(_WORD *)(v23 + v26) = 3617;
        v107 = v26 + 2;
      }
      v28 = (_QWORD *)((v23 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v28 >= v23 + v27)
      {
        v29 = (char *)v28 - v23;
        if ((unint64_t)v28 - v23 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v29 + 8) > v24)
        {
          v106 = 0;
        }
        else
        {
          *v28 = v16;
          v107 = (unint64_t)(v29 + 8);
        }
      }
      IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode((WTF::StringImpl *)&v105, (uint64_t)v87);
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v105, v88);
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v105, v89);
      if (v106)
      {
        v30 = v107;
        v31 = *((_QWORD *)a2 + 8);
        v32 = (*((_QWORD *)a2 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v33 = *((_QWORD *)a2 + 7);
        if (v32 + 16 >= v33)
          v32 = 0;
        if (v107 <= 0x10)
          v30 = 16;
        v34 = v32 + v30;
        if (v33 <= v34)
          v35 = 0;
        else
          v35 = v34;
        *((_QWORD *)a2 + 9) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v31 + 16) + 128);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v35, v36));
        if (v37 == 0x80000000 || a2[27])
        {
          if (*((_BYTE *)a2 + 96))
            MEMORY[0x19AEBA1A0](a2[21]);
          a2[27] = 0;
        }
        while (1)
        {
          v38 = *(unint64_t **)(*((_QWORD *)a2 + 8) + 16);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(0x80000000uLL, v38));
          v40 = atomic_load((unint64_t *)(*(_QWORD *)(*((_QWORD *)a2 + 8) + 16) + 128));
          if (!(v39 | v40 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)a2 + 96))
          {
            v41 = IPC::Semaphore::waitFor(a2 + 22, v22);
            if (v41)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v41);
              if (v42 < v22)
                continue;
            }
          }
          LOBYTE(v99) = 16;
          v100 = 1;
LABEL_47:
          v101 = 1;
          goto LABEL_48;
        }
        atomic_store(0, *(unint64_t **)(*((_QWORD *)a2 + 8) + 16));
        *((_QWORD *)a2 + 9) = 0;
        v43 = *((_QWORD *)a2 + 8);
        v44 = *(_QWORD *)(v43 + 8);
        if (v44 <= 0xFF)
          goto LABEL_147;
        v45 = *((_QWORD *)a2 + 7);
        v46 = *(_QWORD *)(v43 + 16);
        v47 = v44 - 256;
        if (v45)
        {
          v48 = v45 - 1;
          if (v47 < v45 - 1)
            goto LABEL_147;
        }
        else
        {
          v48 = v47;
        }
        v49 = v46 + 256;
        v50 = WTF::fastMalloc((WTF *)0x48);
        v51 = (IPC::Decoder *)IPC::Decoder::Decoder(v50, v49, v48, *((_QWORD *)a2 + 6));
        if (*((_WORD *)v51 + 25) != 2821)
        {
          v99 = v51;
          v100 = 0;
          goto LABEL_47;
        }
        IPC::Decoder::~Decoder(v51);
        WTF::fastFree(v78, v79);
        IPC::Connection::waitForSyncReply((uint64_t)v102, v16, 0xE21u, (uint64_t)v103, v22);
        LOBYTE(v99) = 0;
        v100 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v99, (uint64_t)v103);
        v101 = 1;
        if (v104 != -1)
          ((void (*)(char *, char *))off_1E34E3480[v104])(&v108, v103);
      }
      else
      {
        LOBYTE(v99) = 0;
        v101 = 0;
      }
LABEL_48:
      IPC::Connection::popPendingSyncRequestID(v102);
      if (v101)
      {
        if (v100)
        {
          if (v100 != 1)
            goto LABEL_148;
          buf[0] = (_BYTE)v99;
          v53 = 1;
          *(_DWORD *)&buf[16] = 1;
          LOBYTE(v110) = 1;
LABEL_54:
          ((void (*)(unsigned int **, IPC::Decoder **))off_1E34E3480[v53])(&v105, &v99);
          goto LABEL_55;
        }
        v52 = (uint64_t)v99;
        v99 = 0;
        v105 = (unsigned int *)v52;
        LODWORD(v107) = 0;
        buf[0] = 0;
        *(_DWORD *)&buf[16] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v105);
        LOBYTE(v110) = 1;
        if ((_DWORD)v107 != -1)
          ((void (*)(char *, unsigned int **))off_1E34E3528[v107])(v103, &v105);
        if (v101)
        {
          v53 = v100;
          if (v100 != -1)
            goto LABEL_54;
        }
      }
      else
      {
        buf[0] = 0;
        LOBYTE(v110) = 0;
      }
    }
    else
    {
      LOBYTE(v105) = 11;
      v16 = 1;
      LODWORD(v107) = 1;
      buf[0] = 0;
      *(_DWORD *)&buf[16] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v105);
      LOBYTE(v110) = 1;
      if ((_DWORD)v107 != -1)
        ((void (*)(IPC::Decoder **, unsigned int **))off_1E34E3528[v107])(&v99, &v105);
    }
LABEL_55:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v102);
    if ((_BYTE)v110)
    {
      LOBYTE(v105) = 0;
      LODWORD(v107) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v105, (uint64_t)buf);
      if ((_BYTE)v110 && *(_DWORD *)&buf[16] != -1)
        ((void (*)(IPC::Decoder **, _BYTE *))off_1E34E3528[*(unsigned int *)&buf[16]])(&v99, buf);
    }
    else
    {
      if (!v98)
        goto LABEL_147;
      IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)a2, v96, v97);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)a2 + 1);
      IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBuffer>((uint64_t)&v105, *(uint64_t *)buf, (uint64_t)&v87, v13, v22);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
    }
LABEL_59:
    a3 = v107;
    if (!(_DWORD)v107)
      goto LABEL_60;
    v13 = qword_1ECE716E0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_120;
    if ((_DWORD)a3 == 1)
    {
      a3 = v105;
      goto LABEL_119;
    }
LABEL_148:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_149:
    if (*(double *)(v17 + 8) != 0.0)
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)v16);
  }
  v81 = *(_QWORD *)(a3 + 8);
  v99 = *(IPC::Decoder **)a3;
  v96 = v81;
  *(_QWORD *)buf = v92;
  *(_QWORD *)&buf[8] = a2;
  *(_QWORD *)&buf[16] = &v99;
  v110 = &v96;
  WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)&v105, v12, (uint64_t)buf, v13);
  v15 = v107;
  if ((_DWORD)v107 == -1
    || (((void (*)(_BYTE *, unsigned int **))off_1E34E3508[v107])(buf, &v105), (_DWORD)v15))
  {
LABEL_68:
    if (v94)
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v92);
LABEL_70:
    result = v84;
    goto LABEL_71;
  }
LABEL_143:
  if (v94)
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v92);
  v82 = *((_QWORD *)v12 + 17);
  if (*(_QWORD *)(v82 + 8) < (unint64_t)v14)
  {
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
  result = (WebCore::PixelBuffer *)memcpy(__dst, *(const void **)(v82 + 16), (size_t)v14);
LABEL_72:
  v56 = v84;
LABEL_73:
  *a5 = v56;
  return result;
}

uint64_t WebKit::RemoteImageBufferProxy::clearBackend(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  *(_BYTE *)(this + 4016) = 0;
  if (*(_QWORD *)(this + 112))
  {
    v2 = WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)this);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
    this = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (this)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  else
  {
    *(_QWORD *)(this + 112) = 0;
  }
  return this;
}

uint64_t WebKit::RemoteImageBufferProxy::context(WebKit::RemoteImageBufferProxy *this)
{
  return (uint64_t)this + 144;
}

WTF::ApproximateTime *WebKit::RemoteImageBufferProxy::putPixelBuffer(uint64_t a1, WebCore::ByteArrayPixelBuffer *a2, uint64_t *a3, _DWORD *a4, char a5)
{
  WTF::ApproximateTime *result;
  uint64_t v11;
  uint64_t v12;
  WebKit::RemoteRenderingBackendProxy *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  double v17;
  double v18;
  unint64_t v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  void *v53;
  int v54;
  IPC::Encoder *v55;
  WTF *v56;
  void *v57;
  NSObject *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int *v83;
  uint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  char v87;
  _BYTE buf[24];
  const char *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  result = (WTF::ApproximateTime *)WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)a1);
  if (result)
  {
    result = (WTF::ApproximateTime *)(*(uint64_t (**)(WTF::ApproximateTime *))(*(_QWORD *)result + 152))(result);
    if ((_DWORD)result)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(a1 + 144) + 216))(a1 + 144, buf, 1);
      WebKit::RemoteImageBufferProxy::flushDrawingContext(a1);
      return (WTF::ApproximateTime *)WebCore::ImageBuffer::putPixelBuffer();
    }
    v11 = *(_QWORD *)(a1 + 136);
    if (v11)
    {
      if (*(_QWORD *)(v11 + 8))
      {
        if (!*(_BYTE *)(a1 + 4016))
        {
          *(_BYTE *)(a1 + 4016) = 1;
          v80 = WebKit::RemoteImageBufferProxy::ensureBackend((WebKit::RemoteImageBufferProxy *)a1);
          if (v80)
            (*(void (**)(uint64_t))(*(_QWORD *)v80 + 160))(v80);
        }
        v12 = *(_QWORD *)(a1 + 136);
        if (v12)
          v13 = *(WebKit::RemoteRenderingBackendProxy **)(v12 + 8);
        else
          v13 = 0;
        v14 = *(_QWORD *)(a1 + 120);
        ++*((_DWORD *)a2 + 2);
        v15 = *a3;
        v81 = a3[1];
        v82 = v15;
        result = WebKit::RemoteRenderingBackendProxy::connection(v13, &v83);
        v16 = v83;
        if (!v83)
          goto LABEL_45;
        WTF::ApproximateTime::now(result);
        v18 = v17 + 15.0;
        if (*((_QWORD *)v16 + 6) != v14)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v16 + 14), buf, v17 + 15.0);
          if (!buf[16])
          {
LABEL_104:
            v54 = 15;
LABEL_68:
            v58 = qword_1ECE716E0;
            if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
            {
              v59 = *((_QWORD *)v13 + 7);
              v60 = IPC::errorAsString(v54);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = v59;
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = "RemoteImageBuffer_PutPixelBuffer";
              *(_WORD *)&buf[22] = 2082;
              v89 = v60;
              _os_log_impl(&dword_196BCC000, v58, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
            }
            result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v13);
            goto LABEL_41;
          }
          v61 = *(_QWORD *)buf;
          v62 = *(_QWORD *)&buf[8];
          v63 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v64 = v63 - *(_QWORD *)buf;
          if (v63 < *(_QWORD *)buf)
          {
            v66 = 0;
            v65 = *(_QWORD *)&buf[8];
          }
          else
          {
            v65 = 0;
            if (v64 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v66 = 0;
            }
            else
            {
              v66 = 0;
              if (v64 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v64) = 2822;
                v65 = v62;
                v66 = v64 + 2;
              }
            }
          }
          v67 = (_QWORD *)((v61 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v67 >= v61 + v66)
          {
            v68 = (char *)v67 - v61;
            v54 = 17;
            if ((unint64_t)v67 - v61 > 0xFFFFFFFFFFFFFFF7)
              goto LABEL_68;
            v66 = (unint64_t)(v68 + 8);
            if ((unint64_t)(v68 + 8) > v65)
              goto LABEL_68;
            *v67 = v14;
          }
          if (!v65)
          {
            v54 = 17;
            goto LABEL_68;
          }
          v69 = (*((_QWORD *)v16 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v70 = *((_QWORD *)v16 + 7);
          if (v69 + 16 >= v70)
            v69 = 0;
          if (v66 <= 0x10)
            v66 = 16;
          v71 = v69 + v66;
          if (v70 <= v71)
            v72 = 0;
          else
            v72 = v71;
          *((_QWORD *)v16 + 9) = v72;
          v73 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v16 + 8) + 16) + 128);
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v72, v73));
          v75 = v16[27];
          if (v74 == 0x80000000 || v75 != 0)
          {
            v77 = v75 + 1;
            v16[27] = v77;
            if (v77 >= v16[26])
            {
              if (*((_BYTE *)v16 + 96))
                MEMORY[0x19AEBA1A0](v16[21]);
              v16[27] = 0;
            }
          }
          *((_QWORD *)v16 + 6) = v14;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v16 + 14), &v85, v18);
        if (v87)
        {
          *(_QWORD *)buf = v85;
          *(_QWORD *)&buf[8] = v86;
          *(_QWORD *)&buf[16] = 0;
          v19 = (v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
          v20 = v19 >= v85;
          v21 = v19 - v85;
          if (v20)
          {
            if (v21 > 0xFFFFFFFFFFFFFFFDLL || v21 + 2 > v86)
            {
              *(_QWORD *)&buf[8] = 0;
            }
            else
            {
              *(_WORD *)(v85 + v21) = 1099;
              *(_QWORD *)&buf[16] = v21 + 2;
            }
          }
          IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode((WTF::StringImpl *)buf, a2);
          v23 = *(_QWORD *)buf;
          v24 = *(_QWORD *)&buf[16];
          v25 = (*(_QWORD *)buf + *(_QWORD *)&buf[16] + 3) & 0xFFFFFFFFFFFFFFFCLL;
          v26 = v25 - (*(_QWORD *)buf + *(_QWORD *)&buf[16]);
          if (v25 >= *(_QWORD *)buf + *(_QWORD *)&buf[16])
          {
            v27 = v25 - *(_QWORD *)buf;
            v28 = v26 + *(_QWORD *)&buf[16] + 4;
            if (v27 > 0xFFFFFFFFFFFFFFFBLL || v28 > *(_QWORD *)&buf[8])
            {
              *(_QWORD *)&buf[8] = 0;
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)buf + v27) = v82;
              *(_QWORD *)&buf[16] = v28;
              v23 = *(_QWORD *)buf;
              v24 = v28;
            }
          }
          v30 = (_DWORD *)((v23 + v24 + 3) & 0xFFFFFFFFFFFFFFFCLL);
          if ((unint64_t)v30 >= v23 + v24)
          {
            v31 = (char *)v30 - v23;
            if ((unint64_t)v30 - v23 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v31 + 4) > *(_QWORD *)&buf[8])
            {
              *(_QWORD *)&buf[8] = 0;
            }
            else
            {
              *v30 = HIDWORD(v82);
              *(_QWORD *)&buf[16] = v31 + 4;
            }
          }
          IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)buf, &v81);
          result = (WTF::ApproximateTime *)IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)buf, a4);
          v32 = *(_QWORD *)&buf[16];
          if (*(_QWORD *)&buf[16] < *(_QWORD *)&buf[8])
          {
            v33 = *(_QWORD *)&buf[16] + 1;
            *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = a5;
            *(_QWORD *)&buf[16] = v32 + 1;
            if (*(_QWORD *)&buf[8])
            {
              v34 = *((_QWORD *)v16 + 8);
              v35 = (*((_QWORD *)v16 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v36 = *((_QWORD *)v16 + 7);
              if (v35 + 16 >= v36)
                v35 = 0;
              if (v33 <= 0x10)
                v33 = 16;
              v37 = v35 + v33;
              if (v36 <= v37)
                v38 = 0;
              else
                v38 = v37;
              *((_QWORD *)v16 + 9) = v38;
              v39 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v38, v39));
              if (v40 == 0x80000000 || v16[27])
              {
                if (*((_BYTE *)v16 + 96))
                  result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](v16[21]);
                v16[27] = 0;
              }
LABEL_41:
              v83 = 0;
              do
              {
                v41 = __ldaxr(v16);
                v42 = v41 - 1;
              }
              while (__stlxr(v42, v16));
              if (!v42)
              {
                atomic_store(1u, v16);
                IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v16);
                result = (WTF::ApproximateTime *)WTF::fastFree(v78, v79);
              }
LABEL_45:
              if (*((_DWORD *)a2 + 2) == 1)
                return (WTF::ApproximateTime *)(*(uint64_t (**)(WebCore::ByteArrayPixelBuffer *))(*(_QWORD *)a2 + 8))(a2);
              --*((_DWORD *)a2 + 2);
              return result;
            }
          }
          if (v87)
          {
            v43 = (v85 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v44 = v43 - v85;
            if (v43 < v85)
            {
              v45 = 0;
            }
            else
            {
              v45 = 0;
              if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v86)
              {
                *(_WORD *)(v85 + v44) = 2821;
                v45 = v44 + 2;
              }
            }
            v46 = *((_QWORD *)v16 + 8);
            v47 = (*((_QWORD *)v16 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v48 = *((_QWORD *)v16 + 7);
            if (v47 + 16 >= v48)
              v47 = 0;
            if (v45 <= 0x10)
              v45 = 16;
            v49 = v47 + v45;
            if (v48 <= v49)
              v49 = 0;
            *((_QWORD *)v16 + 9) = v49;
            v50 = (unint64_t *)(*(_QWORD *)(v46 + 16) + 128);
            do
              __ldaxr(v50);
            while (__stlxr(v49, v50));
            v16[27] = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v84, (uint64_t **)v16 + 1);
            v51 = v84;
            v52 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v52 = 1099;
            *(_QWORD *)(v52 + 8) = v14;
            *(_QWORD *)(v52 + 528) = v52 + 16;
            *(_QWORD *)(v52 + 536) = v52 + 16;
            *(_OWORD *)(v52 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v52 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v52);
            *(_QWORD *)buf = v52;
            IPC::ArgumentCoder<WebCore::PixelBuffer,void>::encode((IPC::Encoder *)v52, a2);
            IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v52, &v82);
            IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v52, &v81);
            IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode((IPC::Encoder *)v52, a4);
            *IPC::Encoder::grow((IPC::Encoder *)v52, 1uLL, 1) = a5;
            v54 = IPC::Connection::sendMessageImpl((uint64_t)v51, (uint64_t *)buf, 1, 0);
            v55 = *(IPC::Encoder **)buf;
            *(_QWORD *)buf = 0;
            if (v55)
            {
              IPC::Encoder::~Encoder(v55, v53);
              WTF::fastFree(v56, v57);
            }
            result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v84);
            if (!v54)
              goto LABEL_41;
            goto LABEL_68;
          }
          __break(1u);
        }
        goto LABEL_104;
      }
    }
  }
  return result;
}

void WebKit::RemoteImageBufferProxy::convertToLuminanceMask(WebKit::RemoteImageBufferProxy *this)
{
  uint64_t v1;
  WebKit::RemoteRenderingBackendProxy *v3;
  WTF::ApproximateTime *v4;
  unsigned int *v5;
  uint64_t v6;
  double v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned int v37;
  NSObject *v39;
  const char *v40;
  uint64_t v41;
  _BYTE *v42;
  unsigned int v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  IPC::Encoder *v55;
  WTF *v56;
  void *v57;
  unsigned int v58;
  unsigned int v59;
  WTF *v60;
  void *v61;
  unsigned int *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  _BYTE buf[22];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 17);
  if (v1)
  {
    v3 = *(WebKit::RemoteRenderingBackendProxy **)(v1 + 8);
    if (v3)
    {
      v4 = WebKit::RemoteRenderingBackendProxy::connection(v3, &v62);
      v5 = v62;
      if (v62)
      {
        v6 = *((_QWORD *)this + 15);
        WTF::ApproximateTime::now(v4);
        v8 = v7 + 15.0;
        if (*((_QWORD *)v5 + 6) != v6)
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 14), buf, v7 + 15.0);
          if (!buf[16])
          {
LABEL_51:
            v30 = 15;
LABEL_52:
            v39 = qword_1ECE716E0;
            if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
            {
              v40 = IPC::errorAsString(v30);
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "RemoteImageBuffer_ConvertToLuminanceMask";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v40;
              _os_log_impl(&dword_196BCC000, v39, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
            }
            v41 = *((_QWORD *)this + 17);
            if (v41)
            {
              v42 = *(_BYTE **)(v41 + 8);
              if (v42)
                WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v42);
            }
            goto LABEL_81;
          }
          v22 = *(_QWORD *)buf;
          v23 = *(_QWORD *)&buf[8];
          v24 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v25 = v24 - *(_QWORD *)buf;
          if (v24 < *(_QWORD *)buf)
          {
            v27 = 0;
            v26 = *(_QWORD *)&buf[8];
          }
          else
          {
            v26 = 0;
            if (v25 > 0xFFFFFFFFFFFFFFFDLL)
            {
              v27 = 0;
            }
            else
            {
              v27 = 0;
              if (v25 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v25) = 2822;
                v26 = v23;
                v27 = v25 + 2;
              }
            }
          }
          v28 = (_QWORD *)((v22 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((unint64_t)v28 >= v22 + v27)
          {
            v29 = (char *)v28 - v22;
            v30 = 17;
            if ((unint64_t)v28 - v22 > 0xFFFFFFFFFFFFFFF7)
              goto LABEL_52;
            v27 = (unint64_t)(v29 + 8);
            if ((unint64_t)(v29 + 8) > v26)
              goto LABEL_52;
            *v28 = v6;
          }
          if (!v26)
          {
            v30 = 17;
            goto LABEL_52;
          }
          v31 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v32 = *((_QWORD *)v5 + 7);
          if (v31 + 16 >= v32)
            v31 = 0;
          if (v27 <= 0x10)
            v27 = 16;
          v33 = v31 + v27;
          if (v32 <= v33)
            v34 = 0;
          else
            v34 = v33;
          *((_QWORD *)v5 + 9) = v34;
          v35 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v5 + 8) + 16) + 128);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v34, v35));
          v37 = v5[27];
          if (v36 == 0x80000000 || v37 != 0)
          {
            v43 = v37 + 1;
            v5[27] = v43;
            if (v43 >= v5[26])
            {
              if (*((_BYTE *)v5 + 96))
                MEMORY[0x19AEBA1A0](v5[21]);
              v5[27] = 0;
            }
          }
          *((_QWORD *)v5 + 6) = v6;
        }
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v5 + 14), buf, v8);
        if (buf[16])
        {
          v9 = *(_QWORD *)buf;
          v10 = *(_QWORD *)&buf[8];
          v11 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
          v12 = (unint64_t)v11 - *(_QWORD *)buf;
          if ((unint64_t)v11 < *(_QWORD *)buf)
          {
            v13 = 0;
            if (*(_QWORD *)&buf[8])
              goto LABEL_12;
          }
          else
          {
            v13 = v12 + 2;
            if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > *(_QWORD *)&buf[8])
              goto LABEL_65;
            *v11 = 1097;
            if (v10)
            {
LABEL_12:
              v15 = *((_QWORD *)v5 + 8);
              v16 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v17 = *((_QWORD *)v5 + 7);
              if (v16 + 16 >= v17)
                v16 = 0;
              if (v13 <= 0x10)
                v13 = 16;
              v18 = v16 + v13;
              if (v17 <= v18)
                v19 = 0;
              else
                v19 = v18;
              *((_QWORD *)v5 + 9) = v19;
              v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
              do
                v21 = __ldaxr(v20);
              while (__stlxr(v19, v20));
              if (v21 == 0x80000000 || v5[27])
              {
                if (*((_BYTE *)v5 + 96))
                  MEMORY[0x19AEBA1A0](v5[21]);
                v5[27] = 0;
              }
LABEL_81:
              v62 = 0;
              do
              {
                v58 = __ldaxr(v5);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, v5));
              if (!v59)
              {
                atomic_store(1u, v5);
                IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v5);
                WTF::fastFree(v60, v61);
              }
              return;
            }
          }
          if (!buf[16])
            __break(1u);
          v9 = *(_QWORD *)buf;
          v11 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_65:
          v44 = 0;
          v45 = (unint64_t)v11 >= v9;
          v46 = (unint64_t)v11 - v9;
          if (v45 && v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(v9 + v46) = 2821;
            v44 = v46 + 2;
          }
          v47 = *((_QWORD *)v5 + 8);
          v48 = (*((_QWORD *)v5 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v49 = *((_QWORD *)v5 + 7);
          if (v48 + 16 >= v49)
            v48 = 0;
          if (v44 <= 0x10)
            v44 = 16;
          v50 = v48 + v44;
          if (v49 <= v50)
            v50 = 0;
          *((_QWORD *)v5 + 9) = v50;
          v51 = (unint64_t *)(*(_QWORD *)(v47 + 16) + 128);
          do
            __ldaxr(v51);
          while (__stlxr(v50, v51));
          v5[27] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)v5 + 1);
          v52 = v63;
          v53 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v53 = 1097;
          *(_QWORD *)(v53 + 8) = v6;
          *(_QWORD *)(v53 + 528) = v53 + 16;
          *(_QWORD *)(v53 + 536) = v53 + 16;
          *(_OWORD *)(v53 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v53 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v53);
          v64 = (IPC::Encoder *)v53;
          v30 = IPC::Connection::sendMessageImpl((uint64_t)v52, (uint64_t *)&v64, 1, 0);
          v55 = v64;
          v64 = 0;
          if (v55)
          {
            IPC::Encoder::~Encoder(v55, v54);
            WTF::fastFree(v56, v57);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
          if (!v30)
            goto LABEL_81;
          goto LABEL_52;
        }
        goto LABEL_51;
      }
    }
  }
}

void WebKit::RemoteImageBufferProxy::transformToColorSpace(WebKit::RemoteImageBufferProxy *this, CFTypeRef *a2)
{
  uint64_t v2;
  WebKit::RemoteRenderingBackendProxy *v4;
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  uint64_t v8;
  double v9;
  double v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  int v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  NSObject *v54;
  const char *v55;
  uint64_t v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  WTF *v61;
  void *v62;
  unsigned int *v63;
  uint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unsigned __int8 v67;
  _BYTE buf[24];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 17);
  if (v2)
  {
    v4 = *(WebKit::RemoteRenderingBackendProxy **)(v2 + 8);
    if (v4)
    {
      v6 = WebKit::RemoteRenderingBackendProxy::connection(v4, &v63);
      v7 = v63;
      if (v63)
      {
        v8 = *((_QWORD *)this + 15);
        WTF::ApproximateTime::now(v6);
        v10 = v9 + 15.0;
        if (*((_QWORD *)v7 + 6) == v8)
        {
          while (1)
          {
            IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), &v65, v10);
            if (!v67)
              break;
            *(_QWORD *)buf = v65;
            *(_QWORD *)&buf[8] = v66;
            *(_QWORD *)&buf[16] = 0;
            v11 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
            v12 = v11 >= v65;
            v13 = v11 - v65;
            if (v12)
            {
              if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v66)
              {
                *(_QWORD *)&buf[8] = 0;
              }
              else
              {
                *(_WORD *)(v65 + v13) = 1100;
                *(_QWORD *)&buf[16] = v13 + 2;
              }
            }
            IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)buf, a2);
            if (*(_QWORD *)&buf[8])
            {
              v16 = *(_QWORD *)&buf[16];
              v17 = *((_QWORD *)v7 + 8);
              v18 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v19 = *((_QWORD *)v7 + 7);
              if (v18 + 16 >= v19)
                v18 = 0;
              if (*(_QWORD *)&buf[16] <= 0x10uLL)
                v16 = 16;
              v20 = v18 + v16;
              if (v19 <= v20)
                v21 = 0;
              else
                v21 = v20;
              *((_QWORD *)v7 + 9) = v21;
              v22 = (unint64_t *)(*(_QWORD *)(v17 + 16) + 128);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v21, v22));
              if (v23 == 0x80000000 || v7[27])
              {
                if (*((_BYTE *)v7 + 96))
                  MEMORY[0x19AEBA1A0](v7[21]);
                v7[27] = 0;
              }
              goto LABEL_76;
            }
            v24 = v67;
            if (v67)
            {
              v25 = (v65 + 1) & 0xFFFFFFFFFFFFFFFELL;
              v26 = v25 - v65;
              if (v25 < v65)
              {
                v27 = 0;
              }
              else
              {
                v27 = 0;
                if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v66)
                {
                  *(_WORD *)(v65 + v26) = 2821;
                  v27 = v26 + 2;
                }
              }
              v28 = *((_QWORD *)v7 + 8);
              v29 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
              v30 = *((_QWORD *)v7 + 7);
              if (v29 + 16 >= v30)
                v29 = 0;
              if (v27 <= 0x10)
                v27 = 16;
              v31 = v29 + v27;
              if (v30 <= v31)
                v31 = 0;
              *((_QWORD *)v7 + 9) = v31;
              v32 = (unint64_t *)(*(_QWORD *)(v28 + 16) + 128);
              do
                __ldaxr(v32);
              while (__stlxr(v31, v32));
              v7[27] = 0;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)v7 + 1);
              v33 = v64;
              v34 = WTF::fastMalloc((WTF *)0x240);
              *(_WORD *)v34 = 1100;
              *(_QWORD *)(v34 + 8) = v8;
              *(_QWORD *)(v34 + 528) = v34 + 16;
              *(_QWORD *)(v34 + 536) = v34 + 16;
              *(_OWORD *)(v34 + 544) = xmmword_1978CE2D0;
              *(_OWORD *)(v34 + 560) = 0u;
              IPC::Encoder::encodeHeader((IPC::Encoder *)v34);
              *(_QWORD *)buf = v34;
              IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((IPC::Encoder *)v34, a2);
              v36 = IPC::Connection::sendMessageImpl((uint64_t)v33, (uint64_t *)buf, 1, 0);
              v37 = *(IPC::Encoder **)buf;
              *(_QWORD *)buf = 0;
              if (v37)
              {
                IPC::Encoder::~Encoder(v37, v35);
                WTF::fastFree(v38, v39);
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v64);
              if (!v36)
                goto LABEL_76;
              goto LABEL_71;
            }
            __break(1u);
LABEL_87:
            v43 = v15;
LABEL_50:
            v44 = (_QWORD *)((v24 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
            if ((unint64_t)v44 >= v24 + v43)
            {
              v45 = (char *)v44 - v24;
              v36 = 17;
              if ((unint64_t)v44 - v24 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_71;
              v43 = (unint64_t)(v45 + 8);
              if ((unint64_t)(v45 + 8) > v15)
                goto LABEL_71;
              *v44 = v8;
            }
            if (!v15)
            {
              v36 = 17;
              goto LABEL_71;
            }
            v46 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v47 = *((_QWORD *)v7 + 7);
            if (v46 + 16 >= v47)
              v46 = 0;
            if (v43 <= 0x10)
              v43 = 16;
            v48 = v46 + v43;
            if (v47 <= v48)
              v49 = 0;
            else
              v49 = v48;
            *((_QWORD *)v7 + 9) = v49;
            v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v49, v50));
            v52 = v7[27];
            if (v51 == 0x80000000 || v52 != 0)
            {
              v60 = v52 + 1;
              v7[27] = v60;
              if (v60 >= v7[26])
              {
                if (*((_BYTE *)v7 + 96))
                  MEMORY[0x19AEBA1A0](v7[21]);
                v7[27] = 0;
              }
            }
            *((_QWORD *)v7 + 6) = v8;
          }
        }
        else
        {
          IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9 + 15.0);
          if (buf[16])
          {
            v24 = *(_QWORD *)buf;
            v40 = *(_QWORD *)&buf[8];
            v41 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
            v42 = v41 - *(_QWORD *)buf;
            if (v41 < *(_QWORD *)buf)
            {
              v43 = 0;
              v15 = *(_QWORD *)&buf[8];
            }
            else
            {
              v15 = 0;
              if (v42 > 0xFFFFFFFFFFFFFFFDLL)
                goto LABEL_87;
              v43 = 0;
              if (v42 + 2 <= *(_QWORD *)&buf[8])
              {
                *(_WORD *)(*(_QWORD *)buf + v42) = 2822;
                v15 = v40;
                v43 = v42 + 2;
              }
            }
            goto LABEL_50;
          }
        }
        v36 = 15;
LABEL_71:
        v54 = qword_1ECE716E0;
        if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
        {
          v55 = IPC::errorAsString(v36);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "RemoteImageBuffer_TransformToColorSpace";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v55;
          _os_log_impl(&dword_196BCC000, v54, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x16u);
        }
        v56 = *((_QWORD *)this + 17);
        if (v56)
        {
          v57 = *(_BYTE **)(v56 + 8);
          if (v57)
            WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(v57);
        }
LABEL_76:
        v63 = 0;
        do
        {
          v58 = __ldaxr(v7);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v7));
        if (!v59)
        {
          atomic_store(1u, v7);
          IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7);
          WTF::fastFree(v61, v62);
        }
      }
    }
  }
}

unsigned int *WebKit::RemoteImageBufferProxy::sinkIntoSerializedImageBuffer@<X0>(WebKit::RemoteImageBufferProxy *this@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebKit::RemoteRenderingBackendProxy *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  const void *v19;
  __int16 v20;

  WebKit::RemoteImageBufferProxy::flushDrawingContext((uint64_t)this);
  result = WebKit::RemoteDisplayListRecorderProxy::disconnect((WebKit::RemoteImageBufferProxy *)((char *)this + 144), v4);
  v6 = *((_QWORD *)this + 17);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    goto LABEL_16;
  v7 = WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 160))(v7);
  result = (unsigned int *)WebKit::RemoteImageBufferProxy::ensureBackend(this);
  if (result)
  {
    v8 = *((_QWORD *)this + 17);
    if (v8)
      v8 = *(_QWORD *)(v8 + 8);
    WebKit::RemoteResourceCacheProxy::forgetImageBuffer(v8 + 64, *((_QWORD *)this + 15));
    v9 = *((_QWORD *)this + 17);
    if (v9)
      v10 = *(WebKit::RemoteRenderingBackendProxy **)(v9 + 8);
    else
      v10 = 0;
    v11 = WTF::fastMalloc((WTF *)0x78);
    v12 = v11;
    v17 = *((_QWORD *)this + 2);
    v18 = *((_DWORD *)this + 6);
    v13 = (const void *)*((_QWORD *)this + 4);
    v19 = v13;
    if (v13)
    {
      CFRetain(v13);
      v20 = *((_WORD *)this + 20);
      WebKit::RemoteSerializedImageBufferProxy::RemoteSerializedImageBufferProxy(v12, &v17, (__int128 *)this + 3, (uint64_t *)this + 15, v10);
      CFRelease(v13);
    }
    else
    {
      v20 = *((_WORD *)this + 20);
      WebKit::RemoteSerializedImageBufferProxy::RemoteSerializedImageBufferProxy(v11, &v17, (__int128 *)this + 3, (uint64_t *)this + 15, v10);
    }
    WebKit::RemoteImageBufferProxy::clearBackend((uint64_t)this);
    result = (unsigned int *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (result)
    {
      do
      {
        v15 = __ldaxr(result);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, result));
      if (!v16)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
      }
    }
  }
  else
  {
LABEL_16:
    v12 = 0;
  }
  *a2 = v12;
  return result;
}

uint64_t WebKit::RemoteSerializedImageBufferProxy::RemoteSerializedImageBufferProxy(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t *a4, WebKit::RemoteRenderingBackendProxy *a5)
{
  uint64_t v10;
  const void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  WTF::ApproximateTime *v17;
  unsigned int *v18;
  double v19;
  double v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  int v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int v64;
  NSObject *v66;
  uint64_t v67;
  const char *v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v72;
  WTF *v73;
  void *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t *v77;
  IPC::Encoder *v78;
  _BYTE buf[22];
  __int16 v80;
  const char *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E34E2E88;
  v10 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 8) = v10;
  v11 = (const void *)a2[2];
  *(_QWORD *)(a1 + 24) = v11;
  if (v11)
    CFRetain(v11);
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 12);
  v12 = *a3;
  v13 = a3[1];
  v14 = a3[2];
  *(_OWORD *)(a1 + 88) = a3[3];
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 40) = v12;
  v15 = *a4;
  *(_QWORD *)(a1 + 104) = *a4;
  *(_QWORD *)(a1 + 112) = 0;
  v75 = v15;
  v16 = *((_QWORD *)a5 + 7);
  v17 = WebKit::RemoteRenderingBackendProxy::connection(a5, &v76);
  v18 = v76;
  if (v76)
  {
    WTF::ApproximateTime::now(v17);
    v20 = v19 + 15.0;
    if (*((_QWORD *)v18 + 6) == v16)
    {
      while (1)
      {
        IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 14), buf, v20);
        if (!buf[16])
          goto LABEL_75;
        v22 = *(_QWORD *)buf;
        v21 = *(_QWORD *)&buf[8];
        v23 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v23 - *(_QWORD *)buf;
        if (v23 >= *(_QWORD *)buf)
        {
          v25 = v24 + 2;
          if (v24 <= 0xFFFFFFFFFFFFFFFDLL && v25 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v24) = 1314;
            goto LABEL_12;
          }
          v21 = 0;
        }
        v25 = 0;
LABEL_12:
        v27 = (_QWORD *)((v22 + v25 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v27 >= v22 + v25)
        {
          v25 = (unint64_t)v27 - v22 + 8;
          if ((unint64_t)v27 - v22 > 0xFFFFFFFFFFFFFFF7 || v25 > v21)
            goto LABEL_33;
          *v27 = v75;
        }
        if (v21)
        {
          v29 = *((_QWORD *)v18 + 8);
          v30 = (*((_QWORD *)v18 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v31 = *((_QWORD *)v18 + 7);
          if (v30 + 16 >= v31)
            v30 = 0;
          if (v25 <= 0x10)
            v25 = 16;
          v32 = v30 + v25;
          if (v31 <= v32)
            v33 = 0;
          else
            v33 = v32;
          *((_QWORD *)v18 + 9) = v33;
          v34 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v33, v34));
          if (v35 == 0x80000000 || v18[27])
          {
            if (*((_BYTE *)v18 + 96))
              MEMORY[0x19AEBA1A0](v18[21]);
            v18[27] = 0;
          }
          goto LABEL_79;
        }
LABEL_33:
        v36 = buf[16];
        if (buf[16])
        {
          v37 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v38 = v37 - *(_QWORD *)buf;
          if (v37 < *(_QWORD *)buf)
          {
            v39 = 0;
          }
          else
          {
            v39 = 0;
            if (v38 <= 0xFFFFFFFFFFFFFFFDLL && v38 + 2 <= *(_QWORD *)&buf[8])
            {
              *(_WORD *)(*(_QWORD *)buf + v38) = 2821;
              v39 = v38 + 2;
            }
          }
          v40 = *((_QWORD *)v18 + 8);
          v41 = (*((_QWORD *)v18 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v42 = *((_QWORD *)v18 + 7);
          if (v41 + 16 >= v42)
            v41 = 0;
          if (v39 <= 0x10)
            v39 = 16;
          v43 = v41 + v39;
          if (v42 <= v43)
            v43 = 0;
          *((_QWORD *)v18 + 9) = v43;
          v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
          do
            __ldaxr(v44);
          while (__stlxr(v43, v44));
          v18[27] = 0;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v77, (uint64_t **)v18 + 1);
          v45 = v77;
          v46 = WTF::fastMalloc((WTF *)0x240);
          *(_WORD *)v46 = 1314;
          *(_QWORD *)(v46 + 8) = v16;
          *(_QWORD *)(v46 + 528) = v46 + 16;
          *(_QWORD *)(v46 + 536) = v46 + 16;
          *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
          *(_OWORD *)(v46 + 560) = 0u;
          IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
          v78 = (IPC::Encoder *)v46;
          IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v46, &v75);
          v48 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v78, 1, 0);
          v49 = v78;
          v78 = 0;
          if (v49)
          {
            IPC::Encoder::~Encoder(v49, v47);
            WTF::fastFree(v50, v51);
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v77);
          if (!v48)
            goto LABEL_79;
          goto LABEL_76;
        }
        __break(1u);
LABEL_91:
        v55 = v22;
LABEL_55:
        v56 = (_QWORD *)((v36 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v56 >= v36 + v55)
        {
          v57 = (char *)v56 - v36;
          v48 = 17;
          if ((unint64_t)v56 - v36 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_76;
          v55 = (unint64_t)(v57 + 8);
          if ((unint64_t)(v57 + 8) > v22)
            goto LABEL_76;
          *v56 = v16;
        }
        if (!v22)
        {
          v48 = 17;
          goto LABEL_76;
        }
        v58 = (*((_QWORD *)v18 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v59 = *((_QWORD *)v18 + 7);
        if (v58 + 16 >= v59)
          v58 = 0;
        if (v55 <= 0x10)
          v55 = 16;
        v60 = v58 + v55;
        if (v59 <= v60)
          v61 = 0;
        else
          v61 = v60;
        *((_QWORD *)v18 + 9) = v61;
        v62 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v18 + 8) + 16) + 128);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v61, v62));
        v64 = v18[27];
        if (v63 == 0x80000000 || v64 != 0)
        {
          v72 = v64 + 1;
          v18[27] = v72;
          if (v72 >= v18[26])
          {
            if (*((_BYTE *)v18 + 96))
              MEMORY[0x19AEBA1A0](v18[21]);
            v18[27] = 0;
          }
        }
        *((_QWORD *)v18 + 6) = v16;
      }
    }
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v18 + 14), buf, v19 + 15.0);
    if (buf[16])
    {
      v36 = *(_QWORD *)buf;
      v52 = *(_QWORD *)&buf[8];
      v53 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v54 = v53 - *(_QWORD *)buf;
      if (v53 < *(_QWORD *)buf)
      {
        v55 = 0;
        v22 = *(_QWORD *)&buf[8];
      }
      else
      {
        v22 = 0;
        if (v54 > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_91;
        v55 = 0;
        if (v54 + 2 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v54) = 2822;
          v22 = v52;
          v55 = v54 + 2;
        }
      }
      goto LABEL_55;
    }
LABEL_75:
    v48 = 15;
LABEL_76:
    v66 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v67 = *((_QWORD *)a5 + 7);
      v68 = IPC::errorAsString(v48);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v67;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "RemoteRenderingBackend_MoveToSerializedBuffer";
      v80 = 2082;
      v81 = v68;
      _os_log_impl(&dword_196BCC000, v66, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a5);
LABEL_79:
    v76 = 0;
    do
    {
      v69 = __ldaxr(v18);
      v70 = v69 - 1;
    }
    while (__stlxr(v70, v18));
    if (!v70)
    {
      atomic_store(1u, v18);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v18);
      WTF::fastFree(v73, v74);
    }
  }
  return a1;
}

unsigned __int8 **WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 **result;
  uint64_t v13;
  int v14;
  const void *v15;
  __int16 v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = WTF::fastMalloc((WTF *)0xFB8);
  v7 = *a1;
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = *(_DWORD *)(v7 + 16);
  v8 = *(const void **)(v7 + 24);
  v15 = v8;
  v9 = v7;
  if (v8)
  {
    CFRetain(v8);
    v9 = *a1;
  }
  v16 = *(_WORD *)(v7 + 32);
  v18 = 0;
  WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(v6, (uint64_t)&v13, v9 + 40, (unsigned int *)a2);
  v10 = v18;
  v18 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v8)
    CFRelease(v8);
  v11 = *(_QWORD *)(v6 + 120);
  v17 = &v18;
  v18 = v11;
  WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::MoveToImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)a2, &v17, *(_QWORD *)(a2 + 56));
  result = *(unsigned __int8 ***)(*a1 + 112);
  *(_QWORD *)(*a1 + 112) = 0;
  if (result)
    result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(result);
  *a3 = v6;
  return result;
}

void WebKit::RemoteSerializedImageBufferProxy::~RemoteSerializedImageBufferProxy(WebKit::RemoteSerializedImageBufferProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  IPC::Encoder *v5;
  WTF *v6;
  void *v7;
  unsigned __int8 **v8;
  const void *v9;
  IPC::Encoder *v10;

  *(_QWORD *)this = off_1E34E2E88;
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v3 = 1351;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 528) = v3 + 16;
    *(_QWORD *)(v3 + 536) = v3 + 16;
    *(_OWORD *)(v3 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v3 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v3);
    v10 = (IPC::Encoder *)v3;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v3, (uint64_t *)this + 13);
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
    v5 = v10;
    v10 = 0;
    if (v5)
    {
      IPC::Encoder::~Encoder(v5, v4);
      WTF::fastFree(v6, v7);
    }
    v8 = (unsigned __int8 **)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v8)
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::Connection,(WTF::DestructionThread)2>::deref(v8);
  }
  else
  {
    *((_QWORD *)this + 14) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    CFRelease(v9);
}

{
  WTF *v1;
  void *v2;

  WebKit::RemoteSerializedImageBufferProxy::~RemoteSerializedImageBufferProxy(this);
  WTF::fastFree(v1, v2);
}

void WebKit::RemoteImageBufferSetProxy::setConfiguration(uint64_t a1, CFTypeRef *a2, char a3, char a4, char a5, float a6, float a7, float a8)
{
  CFTypeRef v12;
  const void *v13;

  *(float *)(a1 + 68) = a6;
  *(float *)(a1 + 72) = a7;
  *(float *)(a1 + 76) = a8;
  v12 = *a2;
  if (*a2)
    CFRetain(*a2);
  v13 = *(const void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  if (v13)
    CFRelease(v13);
  *(_BYTE *)(a1 + 88) = a3;
  *(_BYTE *)(a1 + 89) = a4;
  *(_BYTE *)(a1 + 90) = a5;
  *(_BYTE *)(a1 + 96) = 1;
}

unsigned int **WebKit::RemoteImageBufferSetProxy::remoteBufferSetWasDestroyed(WebKit::RemoteImageBufferSetProxy *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unsigned int **result;
  int v8;
  _BYTE v9[64];
  int v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v2 = (unsigned __int8 *)this + 97;
  if (__ldaxr((unsigned __int8 *)this + 97))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEABB3C]((char *)this + 97);
LABEL_5:
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    v9[0] = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    WebKit::RemoteImageBufferSetProxyFlushFence::setHandles(v4, (uint64_t)v9);
    if (v11 && v10 != -1)
      off_1E34E3470[v10]((int)&v18, (WTF::MachSendRight *)v9);
    v6 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v6)
      WTF::ThreadSafeRefCounted<WebKit::RemoteImageBufferSetProxyFlushFence,(WTF::DestructionThread)0>::deref(v6, v5);
  }
  result = (unsigned int **)*((_QWORD *)this + 14);
  if (result)
  {
    IPC::StreamClientConnection::removeWorkQueueMessageReceiver((uint64_t)result, 0x56u, *((_QWORD *)this + 3));
    result = WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=((unsigned int **)this + 14);
  }
  *((_BYTE *)this + 120) = 0;
  ++*((_DWORD *)this + 23);
  *((_BYTE *)this + 96) = 1;
  v8 = __ldxr(v2);
  if (v8 != 1)
  {
    __clrex();
    return (unsigned int **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (unsigned int **)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebKit::RemoteNativeImageBackendProxy::create@<X0>(WebCore::NativeImageBackend **a1@<X8>)
{
  WebCore::NativeImageBackend *v4;
  void *v5;
  uint64_t result;
  WebCore::DestinationColorSpace *v7;
  CFTypeRef cf;
  WTF *v9;
  WTF *v10;

  WebCore::ShareableBitmap::createFromImagePixels();
  if (v10)
  {
    WebCore::ShareableBitmap::createPlatformImage();
    v4 = (WebCore::NativeImageBackend *)operator new();
    cf = v10;
    v9 = v10;
    *a1 = WebKit::RemoteNativeImageBackendProxy::RemoteNativeImageBackendProxy(v4, (uint64_t *)&v9, &cf);
    if (cf)
      CFRelease(cf);
    result = (uint64_t)v9;
    if (v9)
      return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v9, v5);
  }
  else
  {
    v7 = (WebCore::DestinationColorSpace *)WebCore::ShareableBitmap::createFromImageDraw();
    WebCore::DestinationColorSpace::SRGB(v7);
    result = WebCore::ShareableBitmap::createFromImageDraw();
    *a1 = 0;
  }
  return result;
}

WebCore::NativeImageBackend *WebKit::RemoteNativeImageBackendProxy::RemoteNativeImageBackendProxy(WebCore::NativeImageBackend *a1, uint64_t *a2, const void **a3)
{
  _QWORD *v6;
  uint64_t v7;
  const void *v8;
  CFTypeRef cf;

  v6 = (_QWORD *)WebCore::NativeImageBackend::NativeImageBackend(a1);
  v7 = *a2;
  *a2 = 0;
  *v6 = &off_1E34E2EF8;
  v6[1] = v7;
  v8 = *a3;
  *a3 = 0;
  cf = v8;
  WebCore::PlatformImageNativeImageBackend::PlatformImageNativeImageBackend();
  if (cf)
    CFRelease(cf);
  return a1;
}

void WebKit::RemoteNativeImageBackendProxy::~RemoteNativeImageBackendProxy(WebKit::RemoteNativeImageBackendProxy *this)
{
  void *v2;
  uint64_t v3;

  WebCore::PlatformImageNativeImageBackend::~PlatformImageNativeImageBackend((WebKit::RemoteNativeImageBackendProxy *)((char *)this + 16));
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v3, v2);
  WebCore::NativeImageBackend::~NativeImageBackend(this);
}

{
  WebKit::RemoteNativeImageBackendProxy::~RemoteNativeImageBackendProxy(this);
  JUMPOUT(0x19AEB936CLL);
}

uint64_t WebKit::RemoteNativeImageBackendProxy::platformImage(WebKit::RemoteNativeImageBackendProxy *this)
{
  return WebCore::PlatformImageNativeImageBackend::platformImage((WebKit::RemoteNativeImageBackendProxy *)((char *)this + 16));
}

uint64_t WebKit::RemoteNativeImageBackendProxy::size(WebKit::RemoteNativeImageBackendProxy *this)
{
  return WebCore::PlatformImageNativeImageBackend::size((WebKit::RemoteNativeImageBackendProxy *)((char *)this + 16));
}

uint64_t WebKit::RemoteNativeImageBackendProxy::hasAlpha(WebKit::RemoteNativeImageBackendProxy *this)
{
  return WebCore::PlatformImageNativeImageBackend::hasAlpha((WebKit::RemoteNativeImageBackendProxy *)((char *)this + 16));
}

uint64_t WebKit::RemoteNativeImageBackendProxy::colorSpace(WebKit::RemoteNativeImageBackendProxy *this)
{
  return WebCore::PlatformImageNativeImageBackend::colorSpace((WebKit::RemoteNativeImageBackendProxy *)((char *)this + 16));
}

uint64_t WebKit::RemoteNativeImageBackendProxy::isRemoteNativeImageBackendProxy(WebKit::RemoteNativeImageBackendProxy *this)
{
  return 1;
}

void WebKit::RemoteRenderingBackendProxy::create(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *a2 = WebKit::RemoteRenderingBackendProxy::RemoteRenderingBackendProxy(v4, a1);
  v5 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(v4 + 56);
    v7 = 134217984;
    v8 = v6;
    _os_log_impl(&dword_196BCC000, v5, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] Created rendering backend for a worker", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t WebKit::RemoteRenderingBackendProxy::RemoteRenderingBackendProxy(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1E34E3BA8;
  *(_QWORD *)(a1 + 8) = 0;
  WTF::FunctionDispatcher::FunctionDispatcher((WTF::FunctionDispatcher *)(a1 + 16));
  *(_QWORD *)a1 = &off_1E34E2F40;
  *(_QWORD *)(a1 + 16) = &unk_1E34E2FA0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 56) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(a1 + 64) = &off_1E34E2FD0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1;
  *(_QWORD *)(a1 + 136) = 0;
  WebCore::Timer::Timer<WebKit::RemoteRenderingBackendProxy,WebKit::RemoteRenderingBackendProxy>((WebCore::TimerBase *)(a1 + 144), a1);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  WTF::WorkQueue::create();
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 1;
  return a1;
}

unsigned int *WebKit::RemoteRenderingBackendProxy::destroyGetPixelBufferSharedMemory(WebKit::RemoteRenderingBackendProxy *this)
{
  unsigned int *result;

  result = (unsigned int *)*((_QWORD *)this + 17);
  if (result)
  {
    *((_QWORD *)this + 17) = 0;
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    return (unsigned int *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(this, *((_QWORD *)this + 7));
  }
  return result;
}

void WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy(WebKit::RemoteRenderingBackendProxy *this, void *a2)
{
  WTF::FunctionDispatcher *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  void *v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  void *v42;
  WTF *v43;
  void *v44;
  _QWORD *v45;

  *(_QWORD *)this = &off_1E34E2F40;
  *((_QWORD *)this + 2) = &unk_1E34E2FA0;
  v3 = (WebKit::RemoteRenderingBackendProxy *)((char *)this + 16);
  v4 = *((_QWORD *)this + 26);
  if (!v4)
  {
    v7 = 0;
    v5 = 0;
    goto LABEL_9;
  }
  v5 = *(unsigned int *)(v4 - 4);
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (!*(_DWORD *)(v4 - 12))
  {
    v7 = (_QWORD *)(v4 + 16 * v5);
LABEL_9:
    v6 = (_QWORD *)(v4 + 16 * v5);
    goto LABEL_10;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 26);
  if ((_DWORD)v5)
  {
    v8 = 16 * v5;
    v7 = (_QWORD *)*((_QWORD *)this + 26);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      v7 += 2;
      v8 -= 16;
      if (!v8)
      {
        v7 = v6;
        break;
      }
    }
  }
LABEL_10:
  if (v4)
    v9 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v9 = 0;
  while (v7 != v9)
  {
    v10 = v7[1];
    v7[1] = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 16))(v10, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = v7 + 2;
    v7 = v6;
    if (v11 != v6)
    {
      v7 = v11;
      while ((unint64_t)(*v7 + 1) <= 1)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          break;
        }
      }
    }
  }
  if (*((_QWORD *)this + 5))
  {
    v12 = *((_QWORD *)this + 7);
    v13 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v14 = &off_1E34E3B20;
    v14[1] = v12;
    v14[2] = v13;
    v45 = v14;
    WTF::ensureOnMainRunLoop();
    if (v45)
      (*(void (**)(_QWORD *))(*v45 + 8))(v45);
    WebKit::RemoteResourceCacheProxy::clearImageBufferBackends((WebKit::RemoteRenderingBackendProxy *)((char *)this + 64));
    v16 = *((_QWORD *)this + 10);
    if (v16)
    {
      *((_QWORD *)this + 10) = 0;
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v16, v15);
    }
    WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap((WebKit::RemoteRenderingBackendProxy *)((char *)this + 64));
    WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess(this);
  }
  v17 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 56))(v17);
  v18 = *((_QWORD *)this + 27);
  if (v18)
  {
    v19 = *(unsigned int *)(v18 - 4);
    if ((_DWORD)v19)
    {
      for (i = 0; i != v19; ++i)
      {
        if (*(_QWORD *)(v18 + 16 * i) != -1)
        {
          v21 = v18 + 16 * i;
          v22 = *(unsigned int **)(v21 + 8);
          *(_QWORD *)(v21 + 8) = 0;
          if (v22)
          {
            do
            {
              v23 = __ldaxr(v22);
              v24 = v23 - 1;
            }
            while (__stlxr(v24, v22));
            if (!v24)
            {
              atomic_store(1u, v22);
              WTF::fastFree((WTF *)v22, a2);
            }
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v18 - 16), a2);
  }
  v25 = *((_QWORD *)this + 26);
  if (v25)
  {
    v26 = *(unsigned int *)(v25 - 4);
    if ((_DWORD)v26)
    {
      v27 = (uint64_t *)(v25 + 8);
      do
      {
        if (*(v27 - 1) != -1)
        {
          v28 = *v27;
          *v27 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree((WTF *)(v25 - 16), a2);
  }
  *((_QWORD *)this + 18) = off_1E34B3740;
  v29 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  WebCore::TimerBase::~TimerBase((WebKit::RemoteRenderingBackendProxy *)((char *)this + 144));
  v30 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v30)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v30);
  WebKit::RemoteResourceCacheProxy::~RemoteResourceCacheProxy((WebKit::RemoteRenderingBackendProxy *)((char *)this + 64));
  v32 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v32)
  {
    v33 = v32 + 2;
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v32 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
    }
  }
  v36 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v36)
  {
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
    {
      atomic_store(1u, v36);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v36);
      WTF::fastFree(v43, v44);
    }
  }
  v39 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v39)
  {
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      atomic_store(1u, v39);
      WTF::fastFree((WTF *)v39, v31);
    }
  }
  WTF::FunctionDispatcher::~FunctionDispatcher(v3);
  *(_QWORD *)this = &off_1E34B0558;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v42);
}

{
  WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy(this, a2);
  JUMPOUT(0x19AEB936CLL);
}

unsigned int *WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess(WebKit::RemoteRenderingBackendProxy *this)
{
  unsigned int *v2;
  char *v3;
  uint64_t **v4;
  void *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int v8;

  if ((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*((_QWORD *)this + 22) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    WebCore::TimerBase::stopSlowCase((WebKit::RemoteRenderingBackendProxy *)((char *)this + 144));
  }
  v2 = (unsigned int *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v2);
  v4 = (uint64_t **)*((_QWORD *)this + 5);
  v3 = (char *)this + 40;
  *((_QWORD *)v3 + 24) = 0;
  *((_QWORD *)v3 + 25) = 0;
  IPC::StreamClientConnection::invalidate(v4);
  WTF::RefPtr<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::operator=((unsigned int **)v3);
  v3[208] = 0;
  result = (unsigned int *)*((_QWORD *)v3 - 1);
  *((_QWORD *)v3 - 1) = 0;
  if (result)
  {
    do
    {
      v7 = __ldaxr(result);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, result));
    if (!v8)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v5);
    }
  }
  return result;
}

void `non-virtual thunk to'WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy(WebKit::RemoteRenderingBackendProxy *this, void *a2)
{
  WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy((WebKit::RemoteRenderingBackendProxy *)((char *)this - 16), a2);
}

{
  WebKit::RemoteRenderingBackendProxy::~RemoteRenderingBackendProxy((WebKit::RemoteRenderingBackendProxy *)((char *)this - 16), a2);
  JUMPOUT(0x19AEB936CLL);
}

_QWORD *WTF::Function<void ()(void)>::Function<WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection(void)::$_0,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v4 = off_1E34E3B48;
  WTF::MachSendRight::MachSendRight();
  WTF::MachSendRight::MachSendRight();
  v5 = *(_QWORD *)(a2 + 24);
  v4[3] = *(_QWORD *)(a2 + 16);
  v4[4] = v5;
  *a1 = v4;
  return a1;
}

_QWORD *WebKit::RemoteRenderingBackendProxy::didClose(_QWORD *this, IPC::Connection *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  WebCore::ImageBuffer *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  unsigned int v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42[2];

  if (!this[5])
    return this;
  v2 = this;
  WebKit::RemoteRenderingBackendProxy::disconnectGPUProcess((WebKit::RemoteRenderingBackendProxy *)this);
  WebKit::RemoteResourceCacheProxy::clearImageBufferBackends((WebKit::RemoteResourceCacheProxy *)(v2 + 8));
  v3 = (_QWORD *)v2[10];
  v4 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(v3);
  if (v3)
    v6 = &v3[3 * *((unsigned int *)v3 - 1)];
  else
    v6 = 0;
  while (v4 != v6)
  {
    v7 = (unsigned __int8 *)v4[1];
    if (!v7)
      goto LABEL_6;
    v38 = v5;
    v39 = v6;
    v37 = v4;
    v8 = (WebCore::ImageBuffer *)v4[2];
    v9 = v4[1];
    if (__ldaxr(v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEABB3C](v7);
LABEL_16:
    if (*(_QWORD *)(v9 + 24))
      ++*(_QWORD *)(v9 + 8);
    else
      v8 = 0;
    v11 = __ldxr((unsigned __int8 *)v9);
    if (v11 != 1)
    {
      __clrex();
LABEL_22:
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      goto LABEL_23;
    }
    if (__stlxr(0, (unsigned __int8 *)v9))
      goto LABEL_22;
LABEL_23:
    v4 = v37;
    v5 = v38;
    v6 = v39;
    if (!v8)
      goto LABEL_6;
    WebKit::RemoteRenderingBackendProxy::createRemoteImageBuffer((WebKit::RemoteRenderingBackendProxy *)v2[15], v8);
    v12 = *((_QWORD *)v8 + 1);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_28;
    }
    MEMORY[0x19AEABB3C](v12);
LABEL_28:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v19 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v19 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
        goto LABEL_35;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_35:
    v4 = v37;
    v5 = v38;
    v6 = v39;
    if (!v15)
    {
      if (v16)
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 8))(v16, v38);
      v4 = v37;
      v5 = v38;
      v6 = v39;
      if (!v17)
      {
        WTF::fastFree((WTF *)v12, v38);
        v5 = v38;
        v6 = v39;
        v4 = v37;
      }
    }
LABEL_6:
    while (1)
    {
      v4 += 3;
      if (v4 == v5)
        break;
      if ((unint64_t)(*v4 + 1) > 1)
        goto LABEL_10;
    }
    v4 = v5;
LABEL_10:
    ;
  }
  this = WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap((WebKit::RemoteResourceCacheProxy *)(v2 + 8));
  v21 = v2[12];
  if (v21)
  {
    v2[12] = 0;
    this = (_QWORD *)WTF::fastFree((WTF *)(v21 - 16), v20);
  }
  *((_DWORD *)v2 + 28) = 0;
  v22 = v2[13];
  if (v22)
  {
    v2[13] = 0;
    this = (_QWORD *)WTF::fastFree((WTF *)(v22 - 16), v20);
  }
  *((_DWORD *)v2 + 29) = 0;
  v23 = v2[27];
  if (v23)
  {
    v24 = *(unsigned int *)(v23 - 4);
    v25 = (_QWORD *)(v23 + 16 * v24);
    if (*(_DWORD *)(v23 - 12))
    {
      v26 = (_QWORD *)v2[27];
      if ((_DWORD)v24)
      {
        v27 = 16 * v24;
        v26 = (_QWORD *)v2[27];
        while ((unint64_t)(*v26 + 1) <= 1)
        {
          v26 += 2;
          v27 -= 16;
          if (!v27)
          {
            v26 = v25;
            goto LABEL_55;
          }
        }
      }
      goto LABEL_55;
    }
    v26 = (_QWORD *)(v23 + 16 * v24);
  }
  else
  {
    v26 = 0;
    v24 = 0;
  }
  v25 = (_QWORD *)(v23 + 16 * v24);
LABEL_55:
  if (v23)
    v28 = (_QWORD *)(v23 + 16 * *(unsigned int *)(v23 - 4));
  else
    v28 = 0;
  if (v28 != v26)
  {
    while (1)
    {
      v29 = v26[1];
      if (!v29)
        break;
      do
        v30 = __ldaxr((unsigned int *)v29);
      while (__stlxr(v30 + 1, (unsigned int *)v29));
      WebKit::RemoteImageBufferSetProxy::remoteBufferSetWasDestroyed(*(WebKit::RemoteImageBufferSetProxy **)(v29 + 8));
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)(v31 + 24);
      v40 = *(_QWORD *)(v31 + 40);
      v41 = v32;
      v42[0] = &v41;
      v42[1] = &v40;
      this = (_QWORD *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)v2, v42, v2[7]);
      do
      {
        v34 = __ldaxr((unsigned int *)v29);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unsigned int *)v29));
      if (!v35)
      {
        atomic_store(1u, (unsigned int *)v29);
        this = (_QWORD *)WTF::fastFree((WTF *)v29, v33);
      }
      v36 = v26 + 2;
      v26 = v25;
      if (v36 != v25)
      {
        v26 = v36;
        while ((unint64_t)(*v26 + 1) <= 1)
        {
          v26 += 2;
          if (v26 == v25)
          {
            v26 = v25;
            break;
          }
        }
      }
      if (v26 == v28)
        return this;
    }
    this = WebKit::RemoteImageBufferSetProxy::remoteBufferSetWasDestroyed(0);
    __break(1u);
  }
  return this;
}

void WebKit::RemoteRenderingBackendProxy::createRemoteImageBuffer(WebKit::RemoteRenderingBackendProxy *this, WebCore::ImageBuffer *a2)
{
  int v4;
  const void *v5;
  char v6;
  uint64_t v7;
  WTF::ApproximateTime *v8;
  unsigned int *v9;
  double v10;
  double v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  CFTypeRef v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  char *v42;
  int Image;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v52;
  NSObject *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  CFTypeRef cf;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  char *v63;
  int v64;
  CFTypeRef *p_cf;
  char v66;
  uint64_t *v67;
  unsigned int *v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int8 v71;
  _BYTE buf[24];
  const char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v60 = *((_QWORD *)a2 + 2);
  v59 = *((_BYTE *)a2 + 48);
  v58 = *((_BYTE *)a2 + 41);
  v4 = *((_DWORD *)a2 + 6);
  v5 = (const void *)*((_QWORD *)a2 + 4);
  cf = v5;
  if (v5)
    CFRetain(v5);
  v6 = *((_BYTE *)a2 + 40);
  v56 = *((_QWORD *)a2 + 15);
  v61 = &v60;
  v62 = &v59;
  v63 = &v58;
  v64 = v4;
  p_cf = &cf;
  v66 = v6;
  v67 = &v56;
  v7 = *((_QWORD *)this + 7);
  v8 = WebKit::RemoteRenderingBackendProxy::connection(this, &v68);
  v9 = v68;
  if (!v68)
    goto LABEL_42;
  WTF::ApproximateTime::now(v8);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v9 + 6) == v7)
    goto LABEL_5;
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), buf, v10 + 15.0);
  if (!buf[16])
  {
LABEL_77:
    Image = 15;
    goto LABEL_78;
  }
  v35 = *(_QWORD *)buf;
  v36 = *(_QWORD *)&buf[8];
  v37 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v38 = v37 - *(_QWORD *)buf;
  if (v37 < *(_QWORD *)buf)
  {
    v40 = 0;
    v39 = *(_QWORD *)&buf[8];
  }
  else
  {
    v39 = 0;
    if (v38 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v40 = 0;
    }
    else
    {
      v40 = 0;
      if (v38 + 2 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v38) = 2822;
        v39 = v36;
        v40 = v38 + 2;
      }
    }
  }
  v41 = (_QWORD *)((v35 + v40 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v41 >= v35 + v40)
  {
    v42 = (char *)v41 - v35;
    Image = 17;
    if ((unint64_t)v41 - v35 > 0xFFFFFFFFFFFFFFF7)
      goto LABEL_78;
    v40 = (unint64_t)(v42 + 8);
    if ((unint64_t)(v42 + 8) > v39)
      goto LABEL_78;
    *v41 = v7;
  }
  if (v39)
  {
    v44 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v45 = *((_QWORD *)v9 + 7);
    if (v44 + 16 >= v45)
      v44 = 0;
    if (v40 <= 0x10)
      v40 = 16;
    v46 = v44 + v40;
    if (v45 <= v46)
      v47 = 0;
    else
      v47 = v46;
    *((_QWORD *)v9 + 9) = v47;
    v48 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v9 + 8) + 16) + 128);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v47, v48));
    v50 = v9[27];
    if (v49 == 0x80000000 || v50 != 0)
    {
      v52 = v50 + 1;
      v9[27] = v52;
      if (v52 >= v9[26])
      {
        if (*((_BYTE *)v9 + 96))
          MEMORY[0x19AEBA1A0](v9[21]);
        v9[27] = 0;
      }
    }
    *((_QWORD *)v9 + 6) = v7;
LABEL_5:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), &v69, v11);
    if (v71)
    {
      *(_QWORD *)buf = v69;
      *(_QWORD *)&buf[8] = v70;
      *(_QWORD *)&buf[16] = 0;
      v12 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 >= v69;
      v14 = v12 - v69;
      if (v13)
      {
        if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v70)
        {
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_WORD *)(v69 + v14) = 1303;
          *(_QWORD *)&buf[16] = v14 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)buf, v61);
      v17 = *(_QWORD *)&buf[8];
      v16 = *(_QWORD *)&buf[16];
      v18 = *(_QWORD *)buf;
      if (*(_QWORD *)&buf[16] >= *(_QWORD *)&buf[8])
        goto LABEL_90;
      v19 = *(_QWORD *)&buf[16] + 1;
      *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = *v62;
      *(_QWORD *)&buf[16] = v16 + 1;
      if (v16 + 1 >= v17)
        goto LABEL_89;
      v16 += 2;
      *(_BYTE *)(v18 + v19) = *v63;
      *(_QWORD *)&buf[16] = v16;
      while (1)
      {
        v20 = (_DWORD *)((v18 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v20 >= v18 + v16)
        {
          v21 = (char *)v20 - v18;
          if ((unint64_t)v20 - v18 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)(v21 + 4) > v17)
          {
            *(_QWORD *)&buf[8] = 0;
          }
          else
          {
            *v20 = v64;
            *(_QWORD *)&buf[16] = v21 + 4;
          }
        }
        IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((WTF::StringImpl *)buf, p_cf);
        v22 = *(_QWORD *)&buf[16];
        if (*(_QWORD *)&buf[16] >= *(_QWORD *)&buf[8])
        {
          v23 = 0;
          *(_QWORD *)&buf[8] = 0;
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)buf + *(_QWORD *)&buf[16]) = v66;
          *(_QWORD *)&buf[16] = ++v22;
          v23 = *(_QWORD *)&buf[8];
        }
        v24 = (_QWORD *)((*(_QWORD *)buf + v22 + 7) & 0xFFFFFFFFFFFFFFF8);
        v19 = (uint64_t)v24 - *(_QWORD *)buf - v22;
        if ((unint64_t)v24 >= *(_QWORD *)buf + v22)
        {
          v19 = (uint64_t)v24 - *(_QWORD *)buf;
          if ((unint64_t)v24 - *(_QWORD *)buf > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_81;
          v22 = v19 + 8;
          if (v19 + 8 > v23)
            goto LABEL_81;
          *v24 = *v67;
          *(_QWORD *)&buf[16] = v19 + 8;
          v23 = *(_QWORD *)&buf[8];
        }
        if (v23)
        {
          v25 = *((_QWORD *)v9 + 8);
          v26 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v27 = *((_QWORD *)v9 + 7);
          if (v26 + 16 >= v27)
            v26 = 0;
          if (v22 <= 0x10)
            v22 = 16;
          v28 = v26 + v22;
          if (v27 <= v28)
            v29 = 0;
          else
            v29 = v28;
          *((_QWORD *)v9 + 9) = v29;
          v30 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v29, v30));
          if (v31 == 0x80000000 || v9[27])
          {
            if (*((_BYTE *)v9 + 96))
              MEMORY[0x19AEBA1A0](v9[21]);
            v9[27] = 0;
          }
          goto LABEL_38;
        }
LABEL_81:
        v18 = v71;
        if (v71)
        {
          IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v9, v69, v70);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)buf, (uint64_t **)v9 + 1);
          Image = IPC::Connection::send<Messages::RemoteRenderingBackend::CreateImageBuffer>(*(uint64_t *)buf, (uint64_t)&v61, v7);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)buf);
          if (!Image)
            goto LABEL_38;
          goto LABEL_78;
        }
        __break(1u);
LABEL_89:
        v16 = v19;
LABEL_90:
        v17 = 0;
        *(_QWORD *)&buf[8] = 0;
      }
    }
    goto LABEL_77;
  }
  Image = 17;
LABEL_78:
  v53 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v54 = *((_QWORD *)this + 7);
    v55 = IPC::errorAsString(Image);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v54;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "RemoteRenderingBackend_CreateImageBuffer";
    *(_WORD *)&buf[22] = 2082;
    v73 = v55;
    _os_log_impl(&dword_196BCC000, v53, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(this);
LABEL_38:
  v68 = 0;
  do
  {
    v32 = __ldaxr(v9);
    v33 = v32 - 1;
  }
  while (__stlxr(v33, v9));
  if (!v33)
  {
    atomic_store(1u, v9);
    *(_QWORD *)buf = v9;
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
  }
LABEL_42:
  v34 = cf;
  cf = 0;
  if (v34)
    CFRelease(v34);
}

void WebKit::RemoteRenderingBackendProxy::createImageBuffer(unsigned int *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, const void **a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  char v15;
  WebKit::WebProcess *v16;
  const void *v17;
  uint64_t v18;
  WebCore::ImageBuffer *v19;
  CFTypeRef v20;
  const void **v21;
  char v22;
  CFTypeRef v23;
  char v24;
  CFTypeRef v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  const WebCore::DestinationColorSpace *v29;
  IntSize v30;
  IntSize v31;
  uint64_t v32;
  const WebCore::DestinationColorSpace *v33;
  CFTypeRef v34;
  uint64_t v35;
  CFTypeRef v36;
  CFTypeRef v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  char v46;
  uint64_t v47;
  const void *v48;
  void *v49;
  uint64_t v50;
  WebKit::WebProcess *v51;
  uint64_t *v52;
  WebCore::ImageBuffer *v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  CFTypeRef v57;
  __int16 v58;
  uint64_t v59[7];
  uint64_t v60;
  IntSize v61[2];
  CFTypeRef cf;
  uint64_t v63;
  float v64;
  CFTypeRef v65;
  __int16 v66;

  v53 = 0;
  v15 = a6;
  if ((a6 & 1) != 0)
  {
    {
      v16 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
    }
    else
    {
      v51 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      v16 = WebKit::WebProcess::WebProcess(v51);
      WebKit::WebProcess::singleton(void)::process = (uint64_t)v16;
    }
    v52 = a2;
    if (*((_BYTE *)v16 + 761))
    {
      v17 = *a4;
      v63 = *a2;
      v64 = a8;
      v65 = v17;
      if (v17)
        CFRetain(v17);
      LOBYTE(v66) = a5;
      HIBYTE(v66) = a3;
      WebCore::ImageBuffer::backendParameters();
      if ((v15 & 2) != 0
        || (v18 = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize(), v19 = 0, (int)v18 >= 1)
        && SHIDWORD(v18) >= 1)
      {
        LOBYTE(v59[0]) = 1;
        WebCore::ImageBufferBackend::calculateBaseTransform();
        v60 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
        v19 = (WebCore::ImageBuffer *)WTF::fastMalloc((WTF *)0xFB8);
        v55 = v63;
        v56 = v64;
        v20 = v65;
        v57 = v65;
        if (v65)
          CFRetain(v65);
        v58 = v66;
        WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
        WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy((uint64_t)v19, (uint64_t)&v55, (uint64_t)v59, a1);
        v54 = 0;
        if (v20)
          CFRelease(v20);
      }
      v21 = a4;
      v22 = a3;
      v23 = cf;
      cf = 0;
      if (v23)
        CFRelease(v23);
      v24 = v15;
      v25 = v65;
      v65 = 0;
      if (v25)
        CFRelease(v25);
      v53 = v19;
    }
    else
    {
      v46 = a3;
      v24 = v15;
      v47 = *a2;
      v21 = a4;
      v48 = *a4;
      v22 = v46;
      WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferShareableMappedIOSurfaceBackend>(v59, v47, v48, a5, v46, a1, (v15 & 2) != 0, a8);
      WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=<WebKit::RemoteImageBufferProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferProxy>>((uint64_t *)&v53, v59);
      if (v59[0])
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v59[0] + 8), v49);
      v19 = v53;
    }
    v15 = v24;
    a3 = v22;
    a4 = v21;
    a2 = v52;
    if (v19)
      goto LABEL_21;
  }
  v27 = *a4;
  v63 = *a2;
  v64 = a8;
  v65 = v27;
  if (v27)
    CFRetain(v27);
  LOBYTE(v66) = a5;
  HIBYTE(v66) = a3;
  WebCore::ImageBuffer::backendParameters();
  if ((v15 & 2) != 0
    || (v30 = WebKit::ImageBufferShareableBitmapBackend::calculateSafeBackendSize(v61, v28, v29),
        v19 = 0,
        v30.m_width >= 1)
    && v30.m_height >= 1)
  {
    LOBYTE(v59[0]) = 0;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    v60 = WebKit::ImageBufferShareableBitmapBackend::calculateMemoryCost(v61, v32, v33);
    v19 = (WebCore::ImageBuffer *)WTF::fastMalloc((WTF *)0xFB8);
    v55 = v63;
    v56 = v64;
    v34 = v65;
    v57 = v65;
    if (v65)
      CFRetain(v65);
    v58 = v66;
    v54 = 0;
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy((uint64_t)v19, (uint64_t)&v55, (uint64_t)v59, a1);
    v35 = v54;
    v54 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    if (v34)
      CFRelease(v34);
  }
  v36 = cf;
  cf = 0;
  if (v36)
    CFRelease(v36);
  v37 = v65;
  v65 = 0;
  if (v37)
    CFRelease(v37);
  v38 = (uint64_t)v53;
  v53 = v19;
  if (v38)
  {
    v39 = *(_QWORD *)(v38 + 8);
    if (__ldaxr((unsigned __int8 *)v39))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v39))
    {
LABEL_42:
      v41 = *(_QWORD *)(v39 + 8);
      v42 = v41 - 1;
      *(_QWORD *)(v39 + 8) = v41 - 1;
      if (v41 == 1)
      {
        v50 = *(_QWORD *)(v39 + 16);
        v43 = *(_QWORD *)(v39 + 24);
        *(_QWORD *)(v39 + 24) = 0;
        v44 = v50 != 0;
      }
      else
      {
        v43 = 0;
        v44 = 1;
      }
      v45 = __ldxr((unsigned __int8 *)v39);
      if (v45 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v39))
          goto LABEL_49;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v39);
LABEL_49:
      if (!v42)
      {
        if (v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
        if (!v44)
          WTF::fastFree((WTF *)v39, *(void **)&v31);
      }
      v19 = v53;
      goto LABEL_51;
    }
    MEMORY[0x19AEABB3C](v39);
    goto LABEL_42;
  }
LABEL_51:
  if (!v19)
  {
    v26 = 0;
    goto LABEL_22;
  }
LABEL_21:
  WebKit::RemoteRenderingBackendProxy::createRemoteImageBuffer((WebKit::RemoteRenderingBackendProxy *)a1, v19);
  v26 = (uint64_t)v53;
LABEL_22:
  *a7 = v26;
}

void WebKit::RemoteImageBufferProxy::create<WebKit::ImageBufferShareableMappedIOSurfaceBackend>(uint64_t *a1, uint64_t a2, CFTypeRef cf, char a4, char a5, unsigned int *a6, char a7, float a8)
{
  uint64_t v13;
  uint64_t v14;
  CFTypeRef v15;
  CFTypeRef v16;
  CFTypeRef v17;
  uint64_t v18;
  float v19;
  CFTypeRef v20;
  __int16 v21;
  char v22[56];
  uint64_t v23;
  CFTypeRef cfa;
  uint64_t v25;
  float v26;
  CFTypeRef v27;
  __int16 v28;

  v25 = a2;
  v26 = a8;
  v27 = cf;
  if (cf)
    CFRetain(cf);
  LOBYTE(v28) = a4;
  HIBYTE(v28) = a5;
  WebCore::ImageBuffer::backendParameters();
  if ((a7 & 1) != 0
    || (v13 = WebCore::ImageBufferIOSurfaceBackend::calculateSafeBackendSize(), (int)v13 >= 1) && v13 > 0)
  {
    v22[0] = 1;
    WebCore::ImageBufferBackend::calculateBaseTransform();
    v23 = WebCore::ImageBufferIOSurfaceBackend::calculateMemoryCost();
    v14 = WTF::fastMalloc((WTF *)0xFB8);
    v18 = v25;
    v19 = v26;
    v15 = v27;
    v20 = v27;
    if (v27)
      CFRetain(v27);
    v21 = v28;
    WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    WebKit::RemoteImageBufferProxy::RemoteImageBufferProxy(v14, (uint64_t)&v18, (uint64_t)v22, a6);
    *a1 = v14;
    if (v15)
      CFRelease(v15);
  }
  else
  {
    *a1 = 0;
  }
  v16 = cfa;
  cfa = 0;
  if (v16)
    CFRelease(v16);
  v17 = v27;
  v27 = 0;
  if (v17)
    CFRelease(v17);
}

uint64_t *WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>::operator=<WebKit::RemoteImageBufferProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferProxy>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v13;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (!v4)
    return a1;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v5);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v5))
    goto LABEL_4;
LABEL_5:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v13 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v13 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_9:
  if (!v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (!v10)
      WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::add<WTF::RefPtr<WebKit::RemoteImageBufferSetProxy,WTF::RawPtrTraits<WebKit::RemoteImageBufferSetProxy>,WTF::DefaultRefDerefTraits<WebKit::RemoteImageBufferSetProxy>> &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  unsigned int v33;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v32 = 0;
        else
          v32 = *(unsigned int *)(v8 - 4);
        v31 = 0;
        v30 = v8 + 16 * v32;
        goto LABEL_24;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  if (v20)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v20 + 8), v20);
    v21 = *(unsigned int **)(v20 + 8);
    if (v21)
    {
      do
        v33 = __ldaxr(v21);
      while (__stlxr(v33 + 1, v21));
    }
  }
  else
  {
    v21 = 0;
  }
  result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)result);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)result));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)result);
      result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
    }
  }
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12) + 1;
  else
    v25 = 1;
  *(_DWORD *)(v24 - 12) = v25;
  v26 = *v6;
  if (*v6)
    v27 = *(_DWORD *)(v26 - 12);
  else
    v27 = 0;
  v28 = (*(_DWORD *)(v26 - 16) + v27);
  v29 = *(unsigned int *)(v26 - 4);
  if (v29 > 0x400)
  {
    if (v29 > 2 * v28)
      goto LABEL_23;
LABEL_26:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::WeakPtr<WebKit::RemoteImageBufferSetProxy,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
    v16 = result;
    v26 = *v6;
    if (*v6)
      v29 = *(unsigned int *)(v26 - 4);
    else
      v29 = 0;
    goto LABEL_23;
  }
  if (3 * v29 <= 4 * v28)
    goto LABEL_26;
LABEL_23:
  v30 = v26 + 16 * v29;
  v31 = 1;
LABEL_24:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v30;
  *(_BYTE *)(a4 + 16) = v31;
  return result;
}

IPC::StreamClientConnection *WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, WebKit::RemoteRenderingBackendProxy *a2, uint64_t a3, uint64_t a4)
{
  IPC::StreamClientConnection *result;
  unsigned int *v9;
  double v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  WebKit::RemoteRenderingBackendProxy *v18;
  unint64_t *v19;
  uint64_t v20;
  _BYTE v21[16];
  int v22;
  unsigned int *v23;
  _BYTE buf[12];
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  result = WebKit::RemoteRenderingBackendProxy::connection(a2, &v23);
  v9 = v23;
  if (v23)
  {
    WTF::ApproximateTime::now(result);
    IPC::StreamClientConnection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v21, (uint64_t)v9, a3, a4, v10 + 15.0);
    v11 = v22;
    if (v22)
    {
      v14 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        if (v11 != 1)
        {
          v17 = std::__throw_bad_variant_access[abi:sn180100]();
          return WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteImageBuffer::GetShareableBitmap,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v17, v18, v19, v20);
        }
        v15 = *((_QWORD *)a2 + 7);
        v16 = IPC::errorAsString(v21[0]);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v15;
        v25 = 2082;
        v26 = "RemoteImageBuffer_GetPixelBufferWithNewMemory";
        v27 = 2082;
        v28 = v16;
        _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a2);
    }
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 16) = -1;
    result = (IPC::StreamClientConnection *)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v21);
    if (v22 != -1)
      result = (IPC::StreamClientConnection *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E34E3508[v22])(buf, v21);
    v23 = 0;
    do
    {
      v12 = __ldaxr(v9);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v9));
    if (!v13)
    {
      atomic_store(1u, v9);
      *(_QWORD *)buf = v9;
      return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_DWORD *)(a1 + 16) = 1;
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteImageBuffer::GetShareableBitmap,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, WebKit::RemoteRenderingBackendProxy *a2, unint64_t *a3, uint64_t a4)
{
  WTF::ApproximateTime *result;
  unsigned int *v9;
  double v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  IPC::StreamClientConnection *v18[10];
  int v19;
  unsigned int *v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  result = WebKit::RemoteRenderingBackendProxy::connection(a2, &v20);
  v9 = v20;
  if (v20)
  {
    WTF::ApproximateTime::now(result);
    IPC::StreamClientConnection::sendSync<Messages::RemoteImageBuffer::GetShareableBitmap,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v18, (uint64_t)v9, a3, a4, v10 + 15.0);
    v11 = v19;
    if (v19)
    {
      v14 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        if (v11 != 1)
        {
          v17 = std::__throw_bad_variant_access[abi:sn180100]();
          return (WTF::ApproximateTime *)IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::takeReply(v17);
        }
        v15 = *((_QWORD *)a2 + 7);
        v16 = IPC::errorAsString(LOBYTE(v18[0]));
        *(_DWORD *)buf = 134218498;
        v22 = v15;
        v23 = 2082;
        v24 = "RemoteImageBuffer_GetShareableBitmap";
        v25 = 2082;
        v26 = v16;
        _os_log_impl(&dword_196BCC000, v14, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a2);
    }
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 80) = -1;
    result = (WTF::ApproximateTime *)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v18);
    if (v19 != -1)
      result = (WTF::ApproximateTime *)((uint64_t (*)(uint8_t *, IPC::StreamClientConnection **))off_1E34E3548[v19])(buf, v18);
    v20 = 0;
    do
    {
      v12 = __ldaxr(v9);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v9));
    if (!v13)
    {
      atomic_store(1u, v9);
      v18[0] = (IPC::StreamClientConnection *)v9;
      return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()(v18);
    }
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_DWORD *)(a1 + 80) = 1;
  }
  return result;
}

void IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::takeReply(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;

  if (*(_DWORD *)(a2 + 80))
  {
    v3 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::RemoteRenderingBackendProxy::markSurfacesVolatile(v3, v4, v5, v6);
  }
  else
  {
    *a1 = 0;
    a1[64] = 0;
    if (*(_BYTE *)(a2 + 72))
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a1, a2 + 8);
      *(_BYTE *)(v2 + 64) = 1;
    }
  }
}

WTF *WebKit::RemoteRenderingBackendProxy::markSurfacesVolatile(uint64_t *a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  WTF::ApproximateTime *v14;
  unsigned int *v15;
  double v16;
  double v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  WTF *result;
  uint64_t *v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  const char *v91;
  uint64_t *p_IdentifierInternal;
  WTF **v93;
  char v94;
  uint64_t IdentifierInternal;
  WTF *v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t *v99;
  _BYTE buf[22];
  __int16 v101;
  const char *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v96 = 0;
  v97 = 0;
  v7 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = *(unsigned __int8 **)a2;
    v10 = *(_QWORD *)a2 + 16 * v7;
    do
    {
      v11 = v9[8];
      *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)v9 + 24);
      *(_QWORD *)&buf[8] = v11;
      if (v8 == (_DWORD)v97)
      {
        v12 = (_OWORD *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v96, v8 + 1, (unint64_t)buf);
        *((_OWORD *)v96 + HIDWORD(v97)) = *v12;
      }
      else
      {
        *((_OWORD *)v96 + v8) = *(_OWORD *)buf;
      }
      v8 = ++HIDWORD(v97);
      *(_BYTE *)(*(_QWORD *)v9 + 64) |= v9[8];
      v9 += 16;
    }
    while (v9 != (unsigned __int8 *)v10);
  }
  IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  p_IdentifierInternal = &IdentifierInternal;
  v93 = &v96;
  v94 = a4;
  v13 = a1[7];
  v14 = WebKit::RemoteRenderingBackendProxy::connection((WebKit::RemoteRenderingBackendProxy *)a1, &v98);
  v15 = v98;
  if (!v98)
    goto LABEL_117;
  WTF::ApproximateTime::now(v14);
  v17 = v16 + 15.0;
  if (*((_QWORD *)v15 + 6) == v13)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 14), buf, v17);
      if (!buf[16])
        goto LABEL_118;
      v19 = *(_QWORD *)buf;
      v20 = *(_QWORD *)&buf[8];
      v21 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v22 = v21 - *(_QWORD *)buf;
      if (v21 >= *(_QWORD *)buf)
      {
        v23 = v22 + 2;
        if (v22 <= 0xFFFFFFFFFFFFFFFDLL && v23 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v22) = 1312;
          goto LABEL_17;
        }
        v20 = 0;
      }
      v23 = 0;
LABEL_17:
      v25 = (v19 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
      v26 = v25 - (v19 + v23);
      if (v25 >= v19 + v23)
      {
        v27 = v25 - v19;
        v28 = v26 + v23 + 8;
        if (v27 > 0xFFFFFFFFFFFFFFF7 || v28 > v20)
        {
          v20 = 0;
        }
        else
        {
          *(_QWORD *)(v19 + v27) = *p_IdentifierInternal;
          v23 = v28;
        }
      }
      v30 = (uint64_t)v93;
      v31 = *((unsigned int *)v93 + 3);
      v32 = (_QWORD *)((v19 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v32 >= v19 + v23)
      {
        v33 = (char *)v32 - v19;
        if ((unint64_t)v32 - v19 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v33 + 8) > v20)
        {
          v20 = 0;
        }
        else
        {
          *v32 = v31;
          v31 = *(unsigned int *)(v30 + 12);
          v23 = (unint64_t)(v33 + 8);
        }
      }
      if ((_DWORD)v31)
      {
        v30 = *(_QWORD *)v30 + 8;
        v34 = 16 * v31;
        do
        {
          v35 = (v19 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
          v36 = v35 - (v19 + v23);
          if (v35 >= v19 + v23)
          {
            v37 = v35 - v19;
            v38 = v36 + v23 + 8;
            if (v37 > 0xFFFFFFFFFFFFFFF7 || v38 > v20)
            {
              v20 = 0;
            }
            else
            {
              *(_QWORD *)(v19 + v37) = *(_QWORD *)(v30 - 8);
              v23 = v38;
            }
          }
          if (v23 >= v20)
            v20 = 0;
          else
            *(_BYTE *)(v19 + v23++) = *(_BYTE *)v30;
          v30 += 16;
          v34 -= 16;
        }
        while (v34);
      }
      if (v23 < v20)
      {
        *(_BYTE *)(v19 + v23) = v94;
        v40 = *((_QWORD *)v15 + 8);
        v41 = (*((_QWORD *)v15 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = *((_QWORD *)v15 + 7);
        if (v41 + 16 >= v42)
          v41 = 0;
        if (v23 <= 0xF)
          v23 = 15;
        v43 = v23 + v41;
        if (v42 > v43 + 1)
          v44 = v43 + 1;
        else
          v44 = 0;
        *((_QWORD *)v15 + 9) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v44, v45));
        if (v46 == 0x80000000 || v15[27])
        {
          if (*((_BYTE *)v15 + 96))
            MEMORY[0x19AEBA1A0](v15[21]);
          v15[27] = 0;
        }
        v47 = 0;
        goto LABEL_51;
      }
      v72 = buf[16];
      if (buf[16])
      {
        IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v15, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v99, (uint64_t **)v15 + 1);
        v47 = IPC::Connection::send<Messages::RemoteRenderingBackend::MarkSurfacesVolatile>((uint64_t)v99, &p_IdentifierInternal, v13);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
        if (!v47)
          goto LABEL_51;
        goto LABEL_119;
      }
      __break(1u);
LABEL_131:
      v76 = 0;
      v75 = v30;
LABEL_87:
      v77 = (_QWORD *)((v72 + v76 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v77 >= v72 + v76)
      {
        v78 = (char *)v77 - v72;
        v47 = 17;
        if ((unint64_t)v77 - v72 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_119;
        v76 = (unint64_t)(v78 + 8);
        if ((unint64_t)(v78 + 8) > v75)
          goto LABEL_119;
        *v77 = v13;
      }
      if (!v75)
      {
        v47 = 17;
        goto LABEL_119;
      }
      v79 = (*((_QWORD *)v15 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v80 = *((_QWORD *)v15 + 7);
      if (v79 + 16 >= v80)
        v79 = 0;
      if (v76 <= 0x10)
        v76 = 16;
      v81 = v79 + v76;
      if (v80 <= v81)
        v82 = 0;
      else
        v82 = v81;
      *((_QWORD *)v15 + 9) = v82;
      v83 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v15 + 8) + 16) + 128);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v82, v83));
      v85 = v15[27];
      if (v84 == 0x80000000 || v85 != 0)
      {
        v87 = v85 + 1;
        v15[27] = v87;
        if (v87 >= v15[26])
        {
          if (*((_BYTE *)v15 + 96))
            MEMORY[0x19AEBA1A0](v15[21]);
          v15[27] = 0;
        }
      }
      *((_QWORD *)v15 + 6) = v13;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v15 + 14), buf, v16 + 15.0);
  if (buf[16])
  {
    v72 = *(_QWORD *)buf;
    v30 = *(_QWORD *)&buf[8];
    v73 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v74 = v73 - *(_QWORD *)buf;
    if (v73 < *(_QWORD *)buf)
      goto LABEL_131;
    v75 = 0;
    if (v74 > 0xFFFFFFFFFFFFFFFDLL)
    {
      v76 = 0;
    }
    else
    {
      v76 = 0;
      if (v74 + 2 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v74) = 2822;
        v75 = v30;
        v76 = v74 + 2;
      }
    }
    goto LABEL_87;
  }
LABEL_118:
  v47 = 15;
LABEL_119:
  v89 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v90 = a1[7];
    v91 = IPC::errorAsString(v47);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v90;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "RemoteRenderingBackend_MarkSurfacesVolatile";
    v101 = 2082;
    v102 = v91;
    _os_log_impl(&dword_196BCC000, v89, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
LABEL_51:
  v98 = 0;
  do
  {
    v48 = __ldaxr(v15);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, v15));
  if (!v49)
  {
    atomic_store(1u, v15);
    *(_QWORD *)buf = v15;
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
  }
  if (v47)
  {
LABEL_117:
    v88 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v88 + 16))(v88, 0);
    (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  }
  else
  {
    v52 = a1[26];
    v51 = a1 + 26;
    v50 = v52;
    if (v52
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v51),
          (v50 = *v51) != 0))
    {
      v53 = *(_DWORD *)(v50 - 8);
    }
    else
    {
      v53 = 0;
    }
    v54 = IdentifierInternal;
    v55 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                 + ~(IdentifierInternal << 32)) >> 22);
    v56 = 9 * ((v55 + ~(v55 << 13)) ^ ((v55 + ~(v55 << 13)) >> 8));
    v57 = (v56 ^ (v56 >> 15)) + ~((v56 ^ (v56 >> 15)) << 27);
    v58 = v53 & ((v57 >> 31) ^ v57);
    v59 = (uint64_t *)(v50 + 16 * v58);
    v60 = *v59;
    if (*v59)
    {
      v70 = 0;
      v71 = 1;
      while (v60 != IdentifierInternal)
      {
        if (v60 == -1)
          v70 = v59;
        v58 = (v58 + v71) & v53;
        v59 = (uint64_t *)(v50 + 16 * v58);
        v60 = *v59;
        ++v71;
        if (!*v59)
        {
          if (v70)
          {
            *v70 = 0;
            v70[1] = 0;
            --*(_DWORD *)(*v51 - 16);
            v54 = IdentifierInternal;
            v59 = v70;
          }
          goto LABEL_59;
        }
      }
    }
    else
    {
LABEL_59:
      *v59 = v54;
      v61 = *a3;
      *a3 = 0;
      v62 = v59[1];
      v59[1] = v61;
      if (v62)
        (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
      v63 = *v51;
      if (*v51)
        v64 = *(_DWORD *)(v63 - 12) + 1;
      else
        v64 = 1;
      *(_DWORD *)(v63 - 12) = v64;
      v65 = *v51;
      if (*v51)
        v66 = *(_DWORD *)(v65 - 12);
      else
        v66 = 0;
      v67 = (*(_DWORD *)(v65 - 16) + v66);
      v68 = *(unsigned int *)(v65 - 4);
      if (v68 > 0x400)
      {
        if (v68 > 2 * v67)
          goto LABEL_67;
      }
      else if (3 * v68 > 4 * v67)
      {
        goto LABEL_67;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(v51);
    }
  }
LABEL_67:
  result = v96;
  if (v96)
  {
    v96 = 0;
    LODWORD(v97) = 0;
    return (WTF *)WTF::fastFree(result, v18);
  }
  return result;
}

void WebKit::RemoteRenderingBackendProxy::didMarkLayersAsVolatile(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;

  v7 = *(_QWORD *)(a1 + 208);
  v5 = (uint64_t *)(a1 + 208);
  v6 = v7;
  if (v7)
  {
    v11 = *(_DWORD *)(v6 - 8);
    v12 = (~(a2 << 32) + a2) ^ ((~(a2 << 32) + a2) >> 22);
    v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = v11 & ((v14 >> 31) ^ v14);
    v16 = *(void **)(v6 + 16 * v15);
    if (v16 != (void *)a2)
    {
      v42 = 1;
      while (v16)
      {
        v15 = ((_DWORD)v15 + v42) & v11;
        v16 = *(void **)(v6 + 16 * v15);
        ++v42;
        if (v16 == (void *)a2)
          goto LABEL_3;
      }
      v15 = *(unsigned int *)(v6 - 4);
    }
LABEL_3:
    if (v15 != *(_DWORD *)(v6 - 4))
    {
      v17 = (_QWORD *)(v6 + 16 * v15);
      v18 = v17[1];
      v17[1] = 0;
      v19 = *v5;
      if (!*v5 || (v19 += 16 * *(unsigned int *)(v19 - 4), (_QWORD *)v19 != v17))
      {
        if ((_QWORD *)v19 != v17)
        {
          *v17 = -1;
          v17[1] = 0;
          ++*(_DWORD *)(*v5 - 16);
          v20 = *v5;
          v21 = *v5 ? *(_DWORD *)(v20 - 12) - 1 : -1;
          *(_DWORD *)(v20 - 12) = v21;
          v22 = *v5;
          if (*v5)
          {
            v23 = 6 * *(_DWORD *)(v22 - 12);
            v24 = *(_DWORD *)(v22 - 4);
            if (v23 < v24 && v24 >= 9)
              WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::CompletionHandler<void ()(BOOL)>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::CompletionHandler<void ()(BOOL)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v5, v24 >> 1);
          }
        }
      }
      if (v18)
      {
        v26 = *((unsigned int *)a3 + 3);
        if ((_DWORD)v26)
        {
          v27 = *a3;
          v28 = v27 + 16 * v26;
          do
          {
            v29 = *(_QWORD *)(a1 + 216);
            if (v29)
            {
              v30 = *(_DWORD *)(v29 - 8);
              v31 = *(_QWORD *)v27 + ~(*(_QWORD *)v27 << 32);
              v32 = (v31 ^ (v31 >> 22)) + ~((v31 ^ (v31 >> 22)) << 13);
              v33 = (9 * (v32 ^ (v32 >> 8))) ^ ((9 * (v32 ^ (v32 >> 8))) >> 15);
              v34 = v30 & (((v33 + ~(v33 << 27)) >> 31) ^ ((_DWORD)v33 + ~((_DWORD)v33 << 27)));
              v35 = *(_QWORD *)(v29 + 16 * v34);
              if (v35 == *(_QWORD *)v27)
              {
LABEL_21:
                v36 = *(_QWORD *)(v29 + 16 * v34 + 8);
                if (v36)
                {
                  do
                    v37 = __ldaxr((unsigned int *)v36);
                  while (__stlxr(v37 + 1, (unsigned int *)v36));
                  v38 = *(_QWORD *)(v36 + 8);
                  if (v38 && *(_QWORD *)(v38 + 56) < a2)
                    *(_BYTE *)(v38 + 65) |= *(_BYTE *)(v27 + 8);
                  do
                  {
                    v39 = __ldaxr((unsigned int *)v36);
                    v40 = v39 - 1;
                  }
                  while (__stlxr(v40, (unsigned int *)v36));
                  if (!v40)
                  {
                    atomic_store(1u, (unsigned int *)v36);
                    WTF::fastFree((WTF *)v36, (void *)a2);
                  }
                }
              }
              else
              {
                v41 = 1;
                while (v35)
                {
                  v34 = ((_DWORD)v34 + v41) & v30;
                  v35 = *(_QWORD *)(v29 + 16 * v34);
                  ++v41;
                  if (v35 == *(_QWORD *)v27)
                    goto LABEL_21;
                }
              }
            }
            v27 += 16;
          }
          while (v27 != v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, a4);
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      }
    }
  }
}

BOOL WebKit::RemoteRenderingBackendProxy::dispatchMessage(WebKit::RemoteRenderingBackendProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unsigned int v3;
  int v4;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;

  v3 = *((unsigned __int16 *)a3 + 25);
  if (v3 >= 0xE98)
    v3 = 3736;
  v4 = LOBYTE((&IPC::Detail::messageDescriptions)[3 * v3 + 2]);
  if (v4 == 84)
  {
    WebKit::RemoteResourceCacheProxy::cachedImageBuffer((uint64_t)this + 64, *((_QWORD *)a3 + 8), &v18);
    v8 = v18;
    if (v18)
    {
      if (*((_WORD *)a3 + 25) == 1093)
      {
        IPC::handleMessage<Messages::RemoteImageBufferProxy::DidCreateBackend,WebKit::RemoteImageBufferProxy,WebKit::RemoteImageBufferProxy,void ()(std::optional<std::variant<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>)>((uint64_t)a2, (uint64_t *)a3, v18, (uint64_t (*)(_QWORD *, unsigned int *))WebKit::RemoteImageBufferProxy::didCreateBackend, 0);
        v8 = v18;
        v18 = 0;
        if (!v8)
          return v4 == 84;
      }
      else
      {
        v18 = 0;
      }
      v9 = *(_QWORD *)(v8 + 8);
      if (__ldaxr((unsigned __int8 *)v9))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v9))
      {
LABEL_10:
        v11 = *(_QWORD *)(v9 + 8);
        v12 = v11 - 1;
        *(_QWORD *)(v9 + 8) = v11 - 1;
        if (v11 == 1)
        {
          v17 = *(_QWORD *)(v9 + 16);
          v13 = *(_QWORD *)(v9 + 24);
          *(_QWORD *)(v9 + 24) = 0;
          v14 = v17 != 0;
        }
        else
        {
          v13 = 0;
          v14 = 1;
        }
        v15 = __ldxr((unsigned __int8 *)v9);
        if (v15 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v9))
            goto LABEL_14;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_14:
        if (!v12)
        {
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          if (!v14)
            WTF::fastFree((WTF *)v9, v7);
        }
        return v4 == 84;
      }
      MEMORY[0x19AEABB3C](v9);
      goto LABEL_10;
    }
  }
  return v4 == 84;
}

unsigned __int8 *WebKit::RemoteResourceCacheProxy::cachedImageBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned __int8 *result;
  void *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6[2];
  uint64_t v7;

  v7 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::RemoteImageBufferProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>((WTF::ThreadSafeWeakPtrControlBlock *)(a1 + 16), &v7, v6);
  result = (unsigned __int8 *)v6[0];
  if (v6[0])
  {
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::GPUConnectionToWebProcess>((unsigned __int8 *)v6[0], (uint64_t)v6[1], a3);
    result = (unsigned __int8 *)v6[0];
    v6[0] = 0;
    if (result)
      return WTF::ThreadSafeWeakPtrControlBlock::weakDeref(result, v5);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::connection@<X0>(WebKit::RemoteRenderingBackendProxy *this@<X0>, unsigned int **a2@<X8>)
{
  WTF::ApproximateTime *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::ensureGPUProcessConnection((unsigned int *)this);
  if (!*((_BYTE *)this + 248))
    goto LABEL_11;
  v5 = *((_QWORD *)this + 5);
  if (!*(_BYTE *)(v5 + 96))
  {
    v8 = *((_QWORD *)this + 7);
    WTF::ApproximateTime::now(result);
    result = (WTF::ApproximateTime *)IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(v5, v8, v9 + 15.0);
    if ((_DWORD)result)
    {
      v12 = (int)result;
      v10 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)this + 7);
        *(_DWORD *)buf = 134218242;
        v14 = v11;
        v15 = 2082;
        v16 = IPC::errorAsString(v12);
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::connection() - waitForAndDispatchImmediately returned error: %{public}s", buf, 0x16u);
      }
      result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(this);
    }
  }
  if (*((_BYTE *)this + 248))
  {
    v6 = (unsigned int *)*((_QWORD *)this + 5);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
  }
  else
  {
LABEL_11:
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t IPC::StreamClientConnection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t *v7;

  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v7, (uint64_t **)(a1 + 8));
  v5 = IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteRenderingBackendProxy::DidInitialize>((uint64_t)v7, a2, a3);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v7);
  return v5;
}

BOOL WebKit::RemoteRenderingBackendProxy::isCached(WebKit::RemoteRenderingBackendProxy *this, const WebCore::ImageBuffer *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v12;
  uint64_t v13;

  WebKit::RemoteResourceCacheProxy::cachedImageBuffer((uint64_t)this + 64, *((_QWORD *)a2 + 15), &v13);
  v3 = v13;
  v13 = 0;
  if (!v3)
    return v3 != 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEABB3C](v4);
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)v4))
    goto LABEL_4;
LABEL_5:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v4))
      goto LABEL_9;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_9:
  if (!v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      WTF::fastFree((WTF *)v4, v2);
  }
  return v3 != 0;
}

void WebKit::RemoteResourceCacheProxy::~RemoteResourceCacheProxy(WebKit::RemoteResourceCacheProxy *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  *(_QWORD *)this = &off_1E34E2FD0;
  WebKit::RemoteResourceCacheProxy::clearImageBufferBackends(this);
  WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap(this);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    WTF::fastFree((WTF *)(v3 - 16), v2);
  v4 = *((_QWORD *)this + 4);
  if (v4)
    WTF::fastFree((WTF *)(v4 - 16), v2);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v5, v2);
  v6 = *((_QWORD *)this + 2);
  if (v6)
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable(v6, v2);
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    *(_QWORD *)(v7 + 8) = 0;
    v8 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WebKit::RemoteResourceCacheProxy::~RemoteResourceCacheProxy(this);
  JUMPOUT(0x19AEB936CLL);
}

WTF::ThreadSafeWeakPtrControlBlock *WebKit::RemoteResourceCacheProxy::clearImageBufferBackends(WebKit::RemoteResourceCacheProxy *this)
{
  WTF::ThreadSafeWeakPtrControlBlock *v1;
  WTF::ThreadSafeWeakPtrControlBlock *result;
  WTF::ThreadSafeWeakPtrControlBlock *v3;
  WTF::ThreadSafeWeakPtrControlBlock *v4;
  WTF::ThreadSafeWeakPtrControlBlock *v5;
  WTF::ThreadSafeWeakPtrControlBlock *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  WTF::ThreadSafeWeakPtrControlBlock *v11;
  WTF::ThreadSafeWeakPtrControlBlock **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::ThreadSafeWeakPtrControlBlock **v28;
  uint64_t *v29;
  uint64_t v30;

  v1 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)this + 2);
  result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(v1);
  v4 = result;
  v5 = v3;
  if (v1)
  {
    v6 = (WTF::ThreadSafeWeakPtrControlBlock *)((char *)v1 + 24 * *((unsigned int *)v1 - 1));
    v7 = *((unsigned int *)v1 - 3);
    if ((_DWORD)v7)
    {
      if (v7 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::fastMalloc((WTF *)(16 * v7));
      v1 = result;
    }
    else
    {
      v1 = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  if (v6 == v4)
    goto LABEL_54;
  v8 = 0;
  v9 = 1;
  do
  {
    v10 = v9;
    result = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)v4 + 1);
    if (result)
      result = WTF::ThreadSafeWeakPtrControlBlock::weakRef(result);
    v11 = (WTF::ThreadSafeWeakPtrControlBlock *)*((_QWORD *)v4 + 2);
    v12 = (WTF::ThreadSafeWeakPtrControlBlock **)((char *)v1 + 16 * v8);
    *v12 = result;
    v12[1] = v11;
    while (1)
    {
      v4 = (WTF::ThreadSafeWeakPtrControlBlock *)((char *)v4 + 24);
      if (v4 == v5)
        break;
      if ((unint64_t)(*(_QWORD *)v4 + 1) > 1)
        goto LABEL_15;
    }
    v4 = v5;
LABEL_15:
    ++v8;
    v9 = v10 + 1;
  }
  while (v4 != v6);
  if (!v8)
    goto LABEL_54;
  v13 = 16 * v10;
  v14 = (uint64_t *)((char *)v1 + 8);
  do
  {
    v15 = *(v14 - 1);
    if (!v15)
      goto LABEL_19;
    v29 = v14;
    v30 = v13;
    v16 = *v14;
    if (__ldaxr((unsigned __int8 *)v15))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v15))
    {
      goto LABEL_25;
    }
    MEMORY[0x19AEABB3C](v15);
LABEL_25:
    if (*(_QWORD *)(v15 + 24))
      ++*(_QWORD *)(v15 + 8);
    else
      v16 = 0;
    v18 = __ldxr((unsigned __int8 *)v15);
    if (v18 != 1)
    {
      __clrex();
LABEL_31:
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      goto LABEL_32;
    }
    if (__stlxr(0, (unsigned __int8 *)v15))
      goto LABEL_31;
LABEL_32:
    v14 = v29;
    v13 = v30;
    if (!v16)
      goto LABEL_19;
    WebKit::RemoteImageBufferProxy::clearBackend(v16);
    v19 = *(_QWORD *)(v16 + 8);
    if (__ldaxr((unsigned __int8 *)v19))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v19))
    {
      goto LABEL_37;
    }
    MEMORY[0x19AEABB3C](v19);
LABEL_37:
    v21 = *(_QWORD *)(v19 + 8);
    v22 = v21 - 1;
    *(_QWORD *)(v19 + 8) = v21 - 1;
    if (v21 == 1)
    {
      v26 = *(_QWORD *)(v19 + 16);
      v23 = *(_QWORD *)(v19 + 24);
      *(_QWORD *)(v19 + 24) = 0;
      v24 = v26 != 0;
    }
    else
    {
      v23 = 0;
      v24 = 1;
    }
    v25 = __ldxr((unsigned __int8 *)v19);
    if (v25 != 1)
    {
      __clrex();
LABEL_43:
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      goto LABEL_44;
    }
    if (__stlxr(0, (unsigned __int8 *)v19))
      goto LABEL_43;
LABEL_44:
    v14 = v29;
    v13 = v30;
    if (!v22)
    {
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      v14 = v29;
      v13 = v30;
      if (!v24)
      {
        WTF::fastFree((WTF *)v19, v3);
        v14 = v29;
        v13 = v30;
      }
    }
LABEL_19:
    v14 += 2;
    v13 -= 16;
  }
  while (v13);
  v27 = 16 * v10;
  v28 = (WTF::ThreadSafeWeakPtrControlBlock **)v1;
  do
  {
    result = *v28;
    *v28 = 0;
    if (result)
      result = (WTF::ThreadSafeWeakPtrControlBlock *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, v3);
    v28 += 2;
    v27 -= 16;
  }
  while (v27);
LABEL_54:
  if (v1)
    return (WTF::ThreadSafeWeakPtrControlBlock *)WTF::fastFree(v1, v3);
  return result;
}

_QWORD *WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap(WebKit::RemoteResourceCacheProxy *this)
{
  _QWORD *v2;
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v2 = (_QWORD *)*((_QWORD *)this + 3);
  result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::begin(v2);
  v5 = result;
  v6 = v4;
  if (v2)
    v7 = &v2[3 * *((unsigned int *)v2 - 1)];
  else
    v7 = 0;
  if (v7 != result)
  {
    do
    {
      v4 = (_QWORD *)v5[1];
      if (v4)
      {
        result = (_QWORD *)WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v10, (uint64_t)v4, v5[2]);
        v8 = v10;
        if (v10)
        {
          WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderingResourceObserver>((uint64_t *)(v10 + 16), this);
          result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::RenderingResource,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v8 + 8), v9);
        }
      }
      while (1)
      {
        v5 += 3;
        if (v5 == v6)
          break;
        if ((unint64_t)(*v5 + 1) > 1)
          goto LABEL_7;
      }
      v5 = v6;
LABEL_7:
      ;
    }
    while (v5 != v7);
    v2 = (_QWORD *)*((_QWORD *)this + 3);
  }
  if (v2)
  {
    *((_QWORD *)this + 3) = 0;
    return (_QWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::deallocateTable((uint64_t)v2, v4);
  }
  return result;
}

uint64_t WebKit::RemoteResourceCacheProxy::imagesCount(WebKit::RemoteResourceCacheProxy *this)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v22;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
  {
    v4 = 0;
    LODWORD(v2) = 0;
    goto LABEL_9;
  }
  v2 = *(unsigned int *)(v1 - 4);
  v3 = (_QWORD *)(v1 + 24 * v2);
  if (!*(_DWORD *)(v1 - 12))
  {
    v4 = (_QWORD *)(v1 + 24 * v2);
LABEL_9:
    v3 = (_QWORD *)(v1 + 24 * v2);
    goto LABEL_10;
  }
  v4 = (_QWORD *)*((_QWORD *)this + 3);
  if ((_DWORD)v2)
  {
    v5 = 24 * v2;
    v4 = (_QWORD *)*((_QWORD *)this + 3);
    while ((unint64_t)(*v4 + 1) <= 1)
    {
      v4 += 3;
      v5 -= 24;
      if (!v5)
      {
        v4 = v3;
        break;
      }
    }
  }
LABEL_10:
  if (v1)
    v6 = (_QWORD *)(v1 + 24 * *(unsigned int *)(v1 - 4));
  else
    v6 = 0;
  if (v6 != v4)
  {
    v7 = 0;
    while (1)
    {
      v8 = v4[1];
      if (!v8)
        goto LABEL_15;
      WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v22, v8, v4[2]);
      v10 = v22;
      if (!v22)
        goto LABEL_15;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      v22 = 0;
      v13 = *(_QWORD *)(v10 + 8);
      if (__ldaxr((unsigned __int8 *)v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v13))
      {
        goto LABEL_27;
      }
      MEMORY[0x19AEABB3C](v13);
LABEL_27:
      v15 = *(_QWORD *)(v13 + 8);
      v16 = v15 - 1;
      *(_QWORD *)(v13 + 8) = v15 - 1;
      if (v15 == 1)
      {
        v20 = *(_QWORD *)(v13 + 16);
        v17 = *(_QWORD *)(v13 + 24);
        *(_QWORD *)(v13 + 24) = 0;
        v18 = v20 != 0;
      }
      else
      {
        v17 = 0;
        v18 = 1;
      }
      v19 = __ldxr((unsigned __int8 *)v13);
      if (v19 != 1)
      {
        __clrex();
LABEL_34:
        WTF::Lock::unlockSlow((WTF::Lock *)v13);
        if (v16)
          goto LABEL_38;
        goto LABEL_35;
      }
      if (__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_34;
      if (v16)
        goto LABEL_38;
LABEL_35:
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      if (!v18)
      {
        WTF::fastFree((WTF *)v13, v11);
        if ((v12 & 1) == 0)
          goto LABEL_15;
LABEL_39:
        v7 = (v7 + 1);
        goto LABEL_15;
      }
LABEL_38:
      if (v12)
        goto LABEL_39;
LABEL_15:
      v9 = v4 + 3;
      v4 = v3;
      if (v9 != v3)
      {
        v4 = v9;
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          v4 += 3;
          if (v4 == v3)
          {
            v4 = v3;
            break;
          }
        }
      }
      if (v4 == v6)
        return v7;
    }
  }
  return 0;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WebCore::DecomposedGlyphs &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  unsigned int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (v28 = a2,
        v27 = a3,
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), a2 = v28, a3 = v27, (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v8 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
  v14 = (uint64_t *)(v6 + 24 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v18 = 0;
        else
          v18 = *(_DWORD *)(v6 - 4);
        v19 = 0;
        v20 = v6 + 24 * v18;
        goto LABEL_9;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 24 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  result = (uint64_t *)WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>::operator=<WebCore::DecomposedGlyphs,(void *)0>((uint64_t)(v14 + 1), a3);
  v21 = *v4;
  if (*v4)
    v22 = *(_DWORD *)(v21 - 12) + 1;
  else
    v22 = 1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v4;
  if (*v4)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 > 2 * v25)
      goto LABEL_21;
LABEL_23:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, v14);
    v14 = result;
    v23 = *v4;
    if (*v4)
      LODWORD(v26) = *(_DWORD *)(v23 - 4);
    else
      LODWORD(v26) = 0;
    goto LABEL_21;
  }
  if (3 * v26 <= 4 * v25)
    goto LABEL_23;
LABEL_21:
  v20 = v23 + 24 * v26;
  v19 = 1;
LABEL_9:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v20;
  *(_BYTE *)(a4 + 16) = v19;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WebCore::Gradient &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t *v28;

  v4 = result;
  v6 = *result;
  if (*result
    || (v28 = a2,
        v27 = a3,
        result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), a2 = v28, a3 = v27, (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = *a2 + ~(*a2 << 32);
  v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  v13 = v8 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~((_DWORD)v12 << 27)));
  v14 = (uint64_t *)(v6 + 24 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(_DWORD *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 24 * v26;
        goto LABEL_21;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 24 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      v16[1] = 0;
      v16[2] = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  result = (uint64_t *)WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>::operator=<WebCore::DecomposedGlyphs,(void *)0>((uint64_t)(v14 + 1), a3);
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_17;
LABEL_23:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v4, v14);
    v14 = result;
    v20 = *v4;
    if (*v4)
      LODWORD(v23) = *(_DWORD *)(v20 - 4);
    else
      LODWORD(v23) = 0;
    goto LABEL_17;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_23;
LABEL_17:
  v24 = v20 + 24 * v23;
  v25 = 1;
LABEL_21:
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v24;
  *(_BYTE *)(a4 + 16) = v25;
  return result;
}

uint64_t *WebKit::RemoteResourceCacheProxy::recordFilterUse(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t *v7[2];
  char v8;

  if (*(_BYTE *)(a2 + 40))
  {
    v3 = result;
    v6 = *(_QWORD *)(a2 + 32);
    result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WebCore::Filter &>(result + 3, &v6, a2, (uint64_t)v7);
    if (v8)
    {
      WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>(a2 + 16, v3, (uint64_t)v7);
      v4 = (uint64_t *)v3[7];
      WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::Ref(&v6, a2);
      v7[0] = &v6;
      WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((WebKit::RemoteRenderingBackendProxy *)v4, v7, v4[7]);
      return WTF::Ref<WebCore::Filter,WTF::RawPtrTraits<WebCore::Filter>,WTF::DefaultRefDerefTraits<WebCore::Filter>>::~Ref(&v6, v5);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WebCore::Filter &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v20 = 0;
        else
          v20 = *(_DWORD *)(v8 - 4);
        v21 = 0;
        v22 = v8 + 24 * v20;
        goto LABEL_9;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  result = (uint64_t *)WTF::RefPtr<WTF::ThreadSafeWeakPtrControlBlock,WTF::RawPtrTraits<WTF::ThreadSafeWeakPtrControlBlock>,WTF::ThreadSafeWeakPtrControlBlockRefDerefTraits>::operator=((unsigned __int8 **)v16 + 1, *(WTF::ThreadSafeWeakPtrControlBlock **)(a3 + 8));
  v16[2] = a3;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12) + 1;
  else
    v24 = 1;
  *(_DWORD *)(v23 - 12) = v24;
  v25 = *v6;
  if (*v6)
    v26 = *(_DWORD *)(v25 - 12);
  else
    v26 = 0;
  v27 = (*(_DWORD *)(v25 - 16) + v26);
  v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27)
      goto LABEL_23;
LABEL_25:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
    v16 = result;
    v25 = *v6;
    if (*v6)
      LODWORD(v28) = *(_DWORD *)(v25 - 4);
    else
      LODWORD(v28) = 0;
    goto LABEL_23;
  }
  if (3 * v28 <= 4 * v27)
    goto LABEL_25;
LABEL_23:
  v22 = v25 + 24 * v28;
  v21 = 1;
LABEL_9:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v22;
  *(_BYTE *)(a4 + 16) = v21;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::add<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = *a2 + ~(*a2 << 32);
  v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
  v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
  v15 = v10 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~((_DWORD)v14 << 27)));
  v16 = (uint64_t *)(v8 + 24 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v30 = 0;
        else
          v30 = *(_DWORD *)(v8 - 4);
        v29 = 0;
        v28 = v8 + 24 * v30;
        goto LABEL_20;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 24 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      v18[2] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v20 = *a3;
  *a3 = 0;
  result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result)
    result = (uint64_t *)WTF::ThreadSafeWeakPtrControlBlock::weakDeref((unsigned __int8 *)result, a2);
  v21 = a3[1];
  a3[1] = 0;
  v16[2] = v21;
  v22 = *v6;
  if (*v6)
    v23 = *(_DWORD *)(v22 - 12) + 1;
  else
    v23 = 1;
  *(_DWORD *)(v22 - 12) = v23;
  v24 = *v6;
  if (*v6)
    v25 = *(_DWORD *)(v24 - 12);
  else
    v25 = 0;
  v26 = (*(_DWORD *)(v24 - 16) + v25);
  v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 > 2 * v26)
      goto LABEL_19;
LABEL_22:
    result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(v6, v16);
    v16 = result;
    v24 = *v6;
    if (*v6)
      LODWORD(v27) = *(_DWORD *)(v24 - 4);
    else
      LODWORD(v27) = 0;
    goto LABEL_19;
  }
  if (3 * v27 <= 4 * v26)
    goto LABEL_22;
LABEL_19:
  v28 = v24 + 24 * v27;
  v29 = 1;
LABEL_20:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v28;
  *(_BYTE *)(a4 + 16) = v29;
  return result;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::add<unsigned long long &>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  char v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v4 = a2;
  v5 = *result;
  if (*result)
    goto LABEL_2;
  v29 = result;
  v31 = a4;
  v27 = a3;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, 0);
  v4 = a2;
  result = v29;
  a3 = v27;
  a4 = v31;
  v5 = *v29;
  if (*v29)
  {
LABEL_2:
    v6 = 0;
    v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    v7 = 0;
    v6 = 1;
  }
  v8 = *v4;
  v9 = *v4 + ~(*v4 << 32);
  v10 = 9 * (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) ^ (((v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13)) >> 8));
  v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  v12 = v7 & ((v11 >> 31) ^ v11);
  v13 = (uint64_t *)(v5 + 16 * v12);
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = 1;
    do
    {
      if (v14 == v8)
      {
        if ((v6 & 1) != 0)
          v25 = 0;
        else
          v25 = *(unsigned int *)(v5 - 4);
        v24 = 0;
        v23 = v5 + 16 * v25;
        goto LABEL_21;
      }
      if (v14 == -1)
        v15 = v13;
      v12 = (v12 + v16) & v7;
      v13 = (uint64_t *)(v5 + 16 * v12);
      v14 = *v13;
      ++v16;
    }
    while (*v13);
    if (v15)
    {
      *v15 = 0;
      v15[1] = 0;
      --*(_DWORD *)(*result - 16);
      v8 = *v4;
      v13 = v15;
    }
  }
  *v13 = v8;
  v13[1] = *a3;
  v17 = *result;
  if (*result)
    v18 = *(_DWORD *)(v17 - 12) + 1;
  else
    v18 = 1;
  *(_DWORD *)(v17 - 12) = v18;
  v19 = *result;
  if (*result)
    v20 = *(_DWORD *)(v19 - 12);
  else
    v20 = 0;
  v21 = (*(_DWORD *)(v19 - 16) + v20);
  v22 = *(unsigned int *)(v19 - 4);
  if (v22 > 0x400)
  {
    if (v22 > 2 * v21)
      goto LABEL_17;
LABEL_25:
    v30 = a4;
    v26 = result;
    result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::expand(result, v13);
    v13 = result;
    v19 = *v26;
    if (*v26)
      v22 = *(unsigned int *)(v19 - 4);
    else
      v22 = 0;
    a4 = v30;
    goto LABEL_17;
  }
  if (3 * v22 <= 4 * v21)
    goto LABEL_25;
LABEL_17:
  v23 = v19 + 16 * v22;
  v24 = 1;
LABEL_21:
  *(_QWORD *)a4 = v13;
  *(_QWORD *)(a4 + 8) = v23;
  *(_BYTE *)(a4 + 16) = v24;
  return result;
}

WTF::ApproximateTime *WebKit::RemoteResourceCacheProxy::releaseRenderingResource(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void **v11;
  void *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF::ApproximateTime *result;
  int v21;
  void **v22;
  void *v23;

  v3 = (uint64_t *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    goto LABEL_22;
  v6 = *(_DWORD *)(v2 - 8);
  v7 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = (void **)(v2 + 24 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v21 = 1;
    while (v12)
    {
      v10 = (v10 + v21) & v6;
      v11 = (void **)(v2 + 24 * v10);
      v12 = *v11;
      ++v21;
      if (*v11 == a2)
        goto LABEL_3;
    }
    v11 = (void **)(v2 + 24 * *(unsigned int *)(v2 - 4));
  }
LABEL_3:
  if ((void **)(v2 + 24 * *(unsigned int *)(v2 - 4)) == v11)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x1974E0B50);
  }
  v13 = (unsigned __int8 *)v11[1];
  *v11 = (void *)-1;
  v11[1] = 0;
  if (v13)
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v13, a2);
  ++*(_DWORD *)(*v3 - 16);
  v14 = *v3;
  if (*v3)
    v15 = *(_DWORD *)(v14 - 12) - 1;
  else
    v15 = -1;
  *(_DWORD *)(v14 - 12) = v15;
  v16 = *v3;
  if (*v3)
  {
    v17 = 6 * *(_DWORD *)(v16 - 12);
    v18 = *(_DWORD *)(v16 - 4);
    if (v17 < v18 && v18 >= 9)
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v3, v18 >> 1, 0);
  }
  result = *(WTF::ApproximateTime **)(a1 + 56);
  v23 = a2;
  if (*((_QWORD *)result + 5))
  {
    v22 = &v23;
    return WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(result, (uint64_t **)&v22, *((_QWORD *)result + 7));
  }
  return result;
}

uint64_t *WebKit::RemoteResourceCacheProxy::clearNativeImageMap(uint64_t *this)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 **v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  unsigned int v44;
  uint64_t *v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;

  v47 = this;
  v1 = this[3];
  if (!v1)
    return this;
  v2 = *(_DWORD *)(v1 - 4);
  if (!v2)
    return this;
  v45 = this + 3;
  v3 = 0;
  v4 = v2 - 1;
  do
  {
    v5 = v4;
    v6 = (_QWORD *)(v1 + 24 * v4);
    if ((unint64_t)(*v6 + 1) < 2)
      goto LABEL_6;
    v7 = v1 + 24 * v4;
    v10 = *(_QWORD *)(v7 + 8);
    v9 = (unsigned __int8 **)(v7 + 8);
    v8 = v10;
    if (!v10)
      goto LABEL_6;
    WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>((uint64_t)&v48, v8, *(_QWORD *)(v1 + 24 * v4 + 16));
    v11 = v48;
    if (!v48)
      goto LABEL_6;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    v48 = 0;
    if ((v12 & 1) != 0)
    {
      WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderingResourceObserver>((uint64_t *)(v11 + 16), v47);
      v15 = *(_QWORD *)(v11 + 8);
      if (__ldaxr((unsigned __int8 *)v15))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v15))
      {
        goto LABEL_16;
      }
      MEMORY[0x19AEABB3C](v15);
LABEL_16:
      v19 = *(_QWORD *)(v15 + 8);
      v20 = v19 - 1;
      *(_QWORD *)(v15 + 8) = v19 - 1;
      if (v19 == 1)
      {
        v30 = *(_QWORD *)(v15 + 16);
        v21 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 24) = 0;
        v22 = v30 != 0;
      }
      else
      {
        v21 = 0;
        v22 = 1;
      }
      v46 = v22;
      v23 = __ldxr((unsigned __int8 *)v15);
      if (v23 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v15))
        {
          if (!v20)
            goto LABEL_24;
          goto LABEL_28;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      if (!v20)
      {
LABEL_24:
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
        if (!v46)
          WTF::fastFree((WTF *)v15, v14);
      }
LABEL_28:
      *v6 = -1;
      v24 = *v9;
      *v9 = 0;
      if (v24)
        WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v24, v14);
      ++v3;
      goto LABEL_6;
    }
    v17 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_33;
    }
    MEMORY[0x19AEABB3C](v17);
LABEL_33:
    v25 = *(_QWORD *)(v17 + 8);
    v26 = v25 - 1;
    *(_QWORD *)(v17 + 8) = v25 - 1;
    if (v25 == 1)
    {
      v31 = *(_QWORD *)(v17 + 16);
      v27 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 24) = 0;
      v28 = v31 != 0;
    }
    else
    {
      v27 = 0;
      v28 = 1;
    }
    v29 = __ldxr((unsigned __int8 *)v17);
    if (v29 != 1)
    {
      __clrex();
LABEL_40:
      WTF::Lock::unlockSlow((WTF::Lock *)v17);
      if (v26)
        goto LABEL_6;
      goto LABEL_41;
    }
    if (__stlxr(0, (unsigned __int8 *)v17))
      goto LABEL_40;
    if (v26)
      goto LABEL_6;
LABEL_41:
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    if (!v28)
      WTF::fastFree((WTF *)v17, v13);
LABEL_6:
    --v4;
  }
  while (v5);
  this = v45;
  v32 = *v45;
  if (v3)
  {
    *(_DWORD *)(v32 - 16) += v3;
    v33 = *v45;
    if (*v45)
      v34 = *(_DWORD *)(v33 - 12);
    else
      v34 = 0;
    *(_DWORD *)(v33 - 12) = v34 - v3;
    v32 = *v45;
  }
  if (v32)
  {
    v35 = *(_DWORD *)(v32 - 4);
    v36 = *(unsigned int *)(v32 - 12);
    if (v35 >= 9 && 6 * (int)v36 < v35)
    {
      v38 = (v36 - 1) | ((v36 - 1) >> 1) | ((((_DWORD)v36 - 1) | ((v36 - 1) >> 1)) >> 2);
      v39 = v38 | (v38 >> 4) | ((v38 | (v38 >> 4)) >> 8);
      v40 = (v39 | HIWORD(v39)) + 1;
      if (v40 > 0x400)
      {
        if (v40 <= 2 * v36)
        {
LABEL_60:
          LODWORD(v40) = 2 * v40;
          if (v40 <= 0x400)
            goto LABEL_61;
        }
        v41 = (double)v36;
        v42 = (double)v40;
        v43 = 0.416666667;
      }
      else
      {
        if (3 * v40 <= 4 * v36)
          goto LABEL_60;
LABEL_61:
        v41 = (double)v36;
        v42 = (double)v40;
        v43 = 0.604166667;
      }
      if (v42 * v43 <= v41)
        LODWORD(v40) = 2 * v40;
      if (v40 <= 8)
        v44 = 8;
      else
        v44 = v40;
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebCore::RenderingResource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v45, v44, 0);
    }
  }
  return this;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::removeIf<WebKit::RemoteResourceCacheProxy::finalizeRenderingUpdateForFonts(void)::$_1>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;

  v2 = *result;
  if (*result)
  {
    v3 = *(_DWORD *)(v2 - 4);
    if (v3)
    {
      v5 = result;
      v6 = 0;
      v7 = v3 - 1;
      do
      {
        v8 = (uint64_t *)(v2 + 16 * v7);
        if ((unint64_t)(*v8 + 1) >= 2)
        {
          result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>(*a2, *v8);
          if ((_DWORD)result)
          {
            *v8 = -1;
            ++v6;
          }
        }
      }
      while ((unint64_t)v7--);
      v10 = *v5;
      if (v6)
      {
        *(_DWORD *)(v10 - 16) += v6;
        v11 = *v5;
        if (*v5)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v6;
        v10 = *v5;
      }
      if (v10)
      {
        v13 = *(_DWORD *)(v10 - 4);
        v14 = 6 * *(_DWORD *)(v10 - 12);
        if (v13 >= 9 && v14 < v13)
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,unsigned long long,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::shrinkToBestSize(v5);
      }
    }
  }
  return result;
}

WTF::ApproximateTime *WebKit::RemoteResourceCacheProxy::releaseMemory(WTF::ApproximateTime **this)
{
  void *v2;
  WTF::ApproximateTime *v3;
  WTF::ApproximateTime *v4;
  WTF::ApproximateTime *result;

  WebKit::RemoteResourceCacheProxy::clearRenderingResourceMap((WebKit::RemoteResourceCacheProxy *)this);
  v3 = this[4];
  if (v3)
  {
    this[4] = 0;
    WTF::fastFree((WTF::ApproximateTime *)((char *)v3 - 16), v2);
  }
  *((_DWORD *)this + 12) = 0;
  v4 = this[5];
  if (v4)
  {
    this[5] = 0;
    WTF::fastFree((WTF::ApproximateTime *)((char *)v4 - 16), v2);
  }
  *((_DWORD *)this + 13) = 0;
  result = this[7];
  if (*((_QWORD *)result + 5))
    return WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(result, *((_QWORD *)result + 7));
  return result;
}

WebKit::RemoteRenderingBackendProxy *WebKit::RemoteResourceCacheProxy::releaseAllImageResources(WebKit::RemoteResourceCacheProxy *this)
{
  WebKit::RemoteRenderingBackendProxy *result;
  char v3;

  WebKit::RemoteResourceCacheProxy::clearNativeImageMap((uint64_t *)this);
  result = (WebKit::RemoteRenderingBackendProxy *)*((_QWORD *)this + 7);
  if (*((_QWORD *)result + 5))
  {
    v3 = 0;
    return (WebKit::RemoteRenderingBackendProxy *)WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllImageResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(result, (uint64_t)&v3, *((_QWORD *)result + 7));
  }
  return result;
}

void WebKit::WebGPU::RemoteAdapterProxy::~RemoteAdapterProxy(WebKit::WebGPU::RemoteAdapterProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t v51;
  _DWORD *v52;
  unint64_t v53;
  unint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  WTF *v66;
  WTF::StringImpl *v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  v2 = *(_QWORD *)(*((_QWORD *)this + 12) + 96);
  v3 = *((_QWORD *)this + 10);
  WTF::ApproximateTime::now(this);
  v5 = v4 + 30.0;
  if (*(_QWORD *)(v2 + 48) == v3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v69, v4 + 30.0);
  if (!v71)
    goto LABEL_78;
  v21 = v69;
  v20 = v70;
  v22 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v69;
  if (v22 < v69)
    goto LABEL_56;
  v24 = v23 + 2;
  if (v23 > 0xFFFFFFFFFFFFFFFDLL || v24 > v70)
  {
    v20 = 0;
LABEL_56:
    v24 = 0;
    goto LABEL_30;
  }
  *(_WORD *)(v69 + v23) = 2822;
LABEL_30:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      goto LABEL_78;
    *v26 = v3;
  }
  if (!v20)
    goto LABEL_78;
  v28 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(v2 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(v2 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(v2 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(v2 + 108) = v35;
    if (v35 >= *(_DWORD *)(v2 + 104))
    {
      if (*(_BYTE *)(v2 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
      *(_DWORD *)(v2 + 108) = 0;
    }
  }
  *(_QWORD *)(v2 + 48) = v3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(v2 + 56, &v69, v5);
  if (!v71)
    goto LABEL_78;
  v7 = v69;
  v8 = v70;
  v9 = (_WORD *)((v69 + 1) & 0xFFFFFFFFFFFFFFFELL);
  v10 = (unint64_t)v9 - v69;
  if ((unint64_t)v9 < v69)
  {
    v11 = 0;
    if (v70)
      goto LABEL_9;
  }
  else
  {
    v11 = v10 + 2;
    if (v10 > 0xFFFFFFFFFFFFFFFDLL || v11 > v70)
      goto LABEL_60;
    *v9 = 677;
    if (v8)
    {
LABEL_9:
      v13 = *(_QWORD *)(v2 + 64);
      v14 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v15 = *(_QWORD *)(v2 + 56);
      if (v14 + 16 >= v15)
        v14 = 0;
      if (v11 <= 0x10)
        v11 = 16;
      v16 = v14 + v11;
      if (v15 <= v16)
        v17 = 0;
      else
        v17 = v16;
      *(_QWORD *)(v2 + 72) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v17, v18));
      if (v19 == 0x80000000 || *(_DWORD *)(v2 + 108))
      {
        if (*(_BYTE *)(v2 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v2 + 84));
        *(_DWORD *)(v2 + 108) = 0;
      }
      goto LABEL_78;
    }
  }
  if (!v71)
  {
    __break(1u);
LABEL_117:
    v38 = 0;
    goto LABEL_67;
  }
  v7 = v69;
  v9 = (_WORD *)((v69 + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_60:
  v36 = (unint64_t)v9 >= v7;
  v37 = (unint64_t)v9 - v7;
  if (!v36)
    goto LABEL_117;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v70)
    goto LABEL_117;
  *(_WORD *)(v7 + v37) = 2821;
LABEL_67:
  v40 = *(_QWORD *)(v2 + 64);
  v41 = (*(_QWORD *)(v2 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(v2 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(v2 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(v2 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(v2 + 8));
  v45 = v68;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 677;
  *(_QWORD *)(v46 + 8) = v3;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v72 = (IPC::Encoder *)v46;
  IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v72, 1, 0);
  v48 = v72;
  v72 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
LABEL_78:
  v51 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v51)
    WTF::ThreadSafeRefCounted<WebKit::RemoteGPUProxy,(WTF::DestructionThread)0>::deref((unsigned int *)(v51 + 24), v6);
  v52 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = *((_QWORD *)this + 6);
  v54 = *((_QWORD *)this + 7);
  v55 = (WTF *)*((_QWORD *)this + 8);
  if (v53 <= v54)
  {
    if (v53 == v54)
      goto LABEL_103;
    v62 = (uint64_t *)((char *)v55 + 8 * v53);
    v63 = 8 * v54 - 8 * v53;
    do
    {
      v64 = *v62;
      *v62 = 0;
      if (v64)
        (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
      ++v62;
      v63 -= 8;
    }
    while (v63);
  }
  else
  {
    if (v54)
    {
      v56 = 8 * v54;
      do
      {
        v57 = *(_QWORD *)v55;
        *(_QWORD *)v55 = 0;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
        v55 = (WTF *)((char *)v55 + 8);
        v56 -= 8;
      }
      while (v56);
      v55 = (WTF *)*((_QWORD *)this + 8);
      v53 = *((_QWORD *)this + 6);
    }
    v58 = *((unsigned int *)this + 18);
    if (v53 != v58)
    {
      v59 = (uint64_t *)((char *)v55 + 8 * v53);
      v60 = 8 * v58 - 8 * v53;
      do
      {
        v61 = *v59;
        *v59 = 0;
        if (v61)
          (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
        ++v59;
        v60 -= 8;
      }
      while (v60);
    }
  }
  v55 = (WTF *)*((_QWORD *)this + 8);
LABEL_103:
  if (v55)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v55, v6);
  }
  *(_QWORD *)this = off_1E34E35E8;
  v65 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 1)
      WTF::fastFree(v65, v6);
    else
      --*(_DWORD *)v65;
  }
  v66 = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v66)
    WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v66, v6);
  v67 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2)
      WTF::StringImpl::destroy(v67, (WTF::StringImpl *)v6);
    else
      *(_DWORD *)v67 -= 2;
  }
}

{
  WTF *v1;
  void *v2;

  WebKit::WebGPU::RemoteAdapterProxy::~RemoteAdapterProxy(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebGPU::RemoteAdapterProxy::requestDevice(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  double v10;
  WTF::ApproximateTime *v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  WTF::StringImpl *v40;
  void *v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t *v51;
  IPC::Encoder *v52;
  int v53;
  void *v54;
  IPC::Encoder *v55;
  WTF *v56;
  void *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  _DWORD *v75;
  WTF::StringImpl *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  unsigned int v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[5];
  char v104;
  WTF::StringImpl *v105;
  unint64_t v106;
  _BYTE v107[64];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  char v113;
  int v114;
  char v115;
  _DWORD *v116;
  unint64_t v117;
  char v118;
  WTF::StringImpl *v119;
  int v120;
  char v121;
  char v122;
  WTF *v123;
  int v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  int v138;
  IPC::Decoder *v139;
  IPC::Encoder *v140[2];

  WebKit::WebGPU::ConvertToBackingContext::convertToBacking(a2, (uint64_t)v103);
  if (!v104)
  {
    v105 = 0;
    v38 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v38 + 16))(v38, &v105);
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    v40 = v105;
    v105 = 0;
    if (v40)
    {
      if (*((_DWORD *)v40 + 2) == 1)
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40);
      else
        --*((_DWORD *)v40 + 2);
    }
    return std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v103, v39);
  }
  v102 = WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v13 = (WTF::ApproximateTime *)WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  v101 = (uint64_t)v13;
  if (!v104)
    goto LABEL_155;
  v9 = *(_QWORD *)(a1[12] + 96);
  v4 = (_QWORD *)a1[10];
  WTF::ApproximateTime::now(v13);
  v10 = v14 + 30.0;
  v6 = v9 + 48;
  if (*(_QWORD **)(v9 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 56, &v105, v14 + 30.0);
    if (!v107[0])
      goto LABEL_161;
    v77 = v105;
    v78 = v106;
    v79 = ((unint64_t)v105 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v80 = v79 - (_QWORD)v105;
    if (v79 < (unint64_t)v105)
    {
      v82 = 0;
      v81 = v106;
    }
    else
    {
      v81 = 0;
      if (v80 > 0xFFFFFFFFFFFFFFFDLL)
      {
        v82 = 0;
      }
      else
      {
        v82 = 0;
        if (v80 + 2 <= v106)
        {
          *(_WORD *)((char *)v105 + v80) = 2822;
          v81 = v78;
          v82 = v80 + 2;
        }
      }
    }
    v83 = ((unint64_t)v77 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (v83 >= (unint64_t)v77 + v82)
    {
      v84 = v83 - (_QWORD)v77;
      v85 = 17;
      if (v84 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_162;
      v82 = v84 + 8;
      if (v84 + 8 > v81)
        goto LABEL_162;
      *(_QWORD *)((char *)v77 + v84) = v4;
    }
    if (!v81)
    {
      v85 = 17;
      goto LABEL_162;
    }
    v86 = *(_QWORD *)(v9 + 64);
    v87 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v88 = *(_QWORD *)(v9 + 56);
    if (v87 + 16 >= v88)
      v87 = 0;
    if (v82 <= 0x10)
      v82 = 16;
    v89 = v87 + v82;
    if (v88 <= v89)
      v89 = 0;
    *(_QWORD *)(v9 + 72) = v89;
    v90 = (unint64_t *)(*(_QWORD *)(v86 + 16) + 128);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v89, v90));
    v92 = *(_DWORD *)(v9 + 108);
    if (v91 == 0x80000000 || v92 != 0)
    {
      v94 = v92 + 1;
      *(_DWORD *)(v9 + 108) = v94;
      if (v94 >= *(_DWORD *)(v9 + 104))
      {
        if (*(_BYTE *)(v9 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(v9 + 84));
        *(_DWORD *)(v9 + 108) = 0;
      }
    }
    *(_QWORD *)v6 = v4;
  }
  v8 = (uint64_t *)(v9 + 56);
  IPC::StreamClientConnectionBuffer::tryAcquire(v9 + 56, &v116, v10);
  if (!v118)
  {
    LOBYTE(v126) = 15;
    v138 = 1;
    goto LABEL_98;
  }
  v3 = (unint64_t)v116;
  v15 = v117;
  v5 = (uint64_t **)(v9 + 8);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v139, (uint64_t **)(v9 + 8));
  v7 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v139, v7))
  {
    LOBYTE(v126) = 11;
    v3 = 1;
    v138 = 1;
    LOBYTE(v105) = 0;
    v114 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v105, (uint64_t)&v126);
    v115 = 1;
    if (v138 != -1)
      ((void (*)(WTF::StringImpl **, unint64_t *))off_1E34E3600[v138])(&v119, &v126);
    goto LABEL_68;
  }
  v126 = v3;
  v127 = v15;
  v128 = 0;
  v16 = (v3 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = v16 - v3;
  if (v16 < v3)
  {
    v18 = 0;
  }
  else
  {
    if (v17 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_156;
    v18 = v17 + 2;
    if (v17 + 2 > v15)
      goto LABEL_156;
    *(_WORD *)(v3 + v17) = 3534;
    v128 = v17 + 2;
  }
  while (1)
  {
    v19 = (_QWORD *)((v3 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v19 >= v3 + v18)
    {
      v20 = (char *)v19 - v3;
      if ((unint64_t)v19 - v3 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v20 + 8) > v15)
      {
        v127 = 0;
      }
      else
      {
        *v19 = v7;
        v128 = (unint64_t)(v20 + 8);
      }
    }
    IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(&v126, v103);
    v21 = v128;
    v22 = v126;
    v23 = v127;
    v24 = (v126 + v128 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = v24 - (v126 + v128);
    if (v24 >= v126 + v128)
    {
      v26 = v24 - v126;
      if (v25 + v128 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > v127)
      {
        v23 = 0;
        v127 = 0;
      }
      else
      {
        *(_QWORD *)(v126 + v26) = v102;
        v128 = v26 + 8;
        v22 = v126;
        v23 = v127;
        v21 = v26 + 8;
      }
    }
    v27 = (_QWORD *)((v22 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v27 >= v22 + v21)
    {
      v28 = (char *)v27 - v22;
      if ((unint64_t)v27 - v22 > 0xFFFFFFFFFFFFFFF7
        || (v21 = (unint64_t)(v28 + 8), (unint64_t)(v28 + 8) > v23))
      {
LABEL_45:
        LOBYTE(v123) = 0;
        v125 = 0;
        goto LABEL_49;
      }
      *v27 = v101;
      v128 = (unint64_t)(v28 + 8);
      v23 = v127;
    }
    if (!v23)
      goto LABEL_45;
    v29 = *(_QWORD *)(v9 + 64);
    v30 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v31 = *(_QWORD *)(v9 + 56);
    if (v30 + 16 >= v31)
      v30 = 0;
    if (v21 <= 0x10)
      v21 = 16;
    v32 = v30 + v21;
    if (v31 <= v32)
      v33 = 0;
    else
      v33 = v32;
    *(_QWORD *)(v9 + 72) = v33;
    v34 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v33, v34));
    if (v35 == 0x80000000 || *(_DWORD *)(v9 + 108))
    {
      if (*(_BYTE *)(v9 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(v9 + 84));
      *(_DWORD *)(v9 + 108) = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((uint64_t)&v119, v8, v10);
    if (!v121)
    {
      LOBYTE(v123) = 16;
      v124 = 1;
LABEL_48:
      v125 = 1;
      goto LABEL_49;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)v140, (uint64_t)&v119, (uint64_t *)v6);
    if (*((_WORD *)v140[0] + 25) != 2821)
    {
      v123 = v140[0];
      v124 = 0;
      goto LABEL_48;
    }
    IPC::Decoder::~Decoder(v140[0]);
    WTF::fastFree(v36, v37);
    IPC::Connection::waitForSyncReply((uint64_t)v139, v7, 0xDCEu, (uint64_t)&v119, v10);
    LOBYTE(v123) = 0;
    v124 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v123, (uint64_t)&v119);
    v125 = 1;
    if (v120 != -1)
      ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34E3480[v120])(v140, &v119);
LABEL_49:
    IPC::Connection::popPendingSyncRequestID(v139);
    if (!v125)
    {
      LOBYTE(v105) = 0;
      v115 = 0;
      goto LABEL_68;
    }
    if (v124 == 1)
    {
      LOBYTE(v105) = (_BYTE)v123;
      v42 = 1;
      v114 = 1;
      v115 = 1;
LABEL_67:
      ((void (*)(unint64_t *, WTF **))off_1E34E3480[v42])(&v126, &v123);
      goto LABEL_68;
    }
    if (v124)
      goto LABEL_160;
    LOBYTE(v119) = 0;
    v122 = 0;
    IPC::Decoder::operator>><std::tuple<WebKit::WebGPU::SupportedFeatures,WebKit::WebGPU::SupportedLimits>>((uint64_t *)v123, &v119);
    if (v122)
    {
      if (!v125)
        goto LABEL_155;
      if (v124)
        goto LABEL_160;
      IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ConnectionSendSyncResult((uint64_t)&v126, (uint64_t *)&v123, (uint64_t *)&v119);
      LOBYTE(v105) = 0;
      v114 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v105, (uint64_t)&v126);
      v115 = 1;
      if (v138 != -1)
        ((void (*)(IPC::Encoder **, unint64_t *))off_1E34E3600[v138])(v140, &v126);
      if (v122)
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119, v41);
    }
    else
    {
      LOBYTE(v105) = 13;
      v114 = 1;
      v115 = 1;
    }
    if (v125)
    {
      v42 = v124;
      if (v124 != -1)
        goto LABEL_67;
    }
LABEL_68:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v139);
    if (!v115)
      break;
    LOBYTE(v126) = 0;
    v138 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v126, (uint64_t)&v105);
    if (v115 && v114 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34E3600[v114])(&v119, &v105);
LABEL_98:
    if (v138)
      goto LABEL_99;
    v60 = (WTF::StringImpl *)v127;
    v127 = 0;
    v105 = v60;
    v61 = v128;
    v62 = HIDWORD(v128);
    v128 = 0;
    v106 = __PAIR64__(v62, v61);
    v110 = v135;
    v111 = v136;
    v112 = v137;
    *(_OWORD *)&v107[32] = v131;
    *(_OWORD *)&v107[48] = v132;
    v109 = v134;
    v108 = v133;
    *(_OWORD *)&v107[16] = v130;
    *(_OWORD *)v107 = v129;
    v63 = DWORD1(v129);
    if (!DWORD1(v129))
    {
      v119 = 0;
      v71 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v71 + 16))(v71, &v119);
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      v73 = v119;
      v119 = 0;
      if (v73)
      {
        if (*((_DWORD *)v73 + 2) == 1)
          (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v73 + 8))(v73);
        else
          --*((_DWORD *)v73 + 2);
      }
      goto LABEL_123;
    }
    v64 = WTF::fastMalloc((WTF *)0x18);
    v6 = 1;
    *(_DWORD *)v64 = 1;
    *(_QWORD *)(v64 + 8) = v60;
    v105 = 0;
    v106 = 0;
    *(_DWORD *)(v64 + 16) = v61;
    *(_DWORD *)(v64 + 20) = v62;
    v119 = (WTF::StringImpl *)v64;
    v3 = *(unsigned int *)v107;
    v65 = *(_QWORD *)&v107[56];
    v66 = v108;
    v7 = v109;
    v8 = (uint64_t *)*((_QWORD *)&v109 + 1);
    v96 = *(_OWORD *)&v107[24];
    v97 = *(_OWORD *)&v107[8];
    v95 = *(_OWORD *)&v107[40];
    v10 = *((double *)&v108 + 1);
    v99 = v111;
    v100 = v110;
    v98 = v112;
    v67 = WTF::fastMalloc((WTF *)0x98);
    *(_DWORD *)v67 = 1;
    *(_DWORD *)(v67 + 4) = v3;
    *(_DWORD *)(v67 + 8) = v63;
    *(_OWORD *)(v67 + 12) = v97;
    *(_OWORD *)(v67 + 28) = v96;
    *(_OWORD *)(v67 + 44) = v95;
    *(_QWORD *)(v67 + 64) = v65;
    *(_QWORD *)(v67 + 72) = v66;
    *(double *)(v67 + 80) = v10;
    *(_DWORD *)(v67 + 88) = v7;
    *(_QWORD *)(v67 + 96) = v8;
    *(_OWORD *)(v67 + 104) = v100;
    *(_OWORD *)(v67 + 120) = v99;
    *(_OWORD *)(v67 + 136) = v98;
    v123 = (WTF *)v67;
    v5 = (uint64_t **)a1[11];
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0xD8);
    WebKit::WebGPU::RemoteDeviceProxy::RemoteDeviceProxy((uint64_t)v4, (uint64_t *)&v119, (uint64_t *)&v123, (uint64_t)a1, (uint64_t)v5, v102, v101);
    if (v104)
    {
      v69 = (WTF::StringImpl *)v4[3];
      v70 = v103[0];
      v103[0] = 0;
      v4[3] = v70;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v68);
        else
          *(_DWORD *)v69 -= 2;
      }
      (*(void (**)(_QWORD *, _QWORD *))(*v4 + 184))(v4, v4 + 3);
      v116 = v4;
      v74 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v74 + 16))(v74, &v116);
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      v75 = v116;
      v116 = 0;
      if (v75)
      {
        if (v75[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 8))(v75);
        else
          --v75[2];
      }
      if (v123)
      {
        if (*(_DWORD *)v123 == 1)
          WTF::fastFree(v123, v72);
        else
          --*(_DWORD *)v123;
      }
      if (v119)
        WTF::RefCounted<WebCore::WebGPU::SupportedFeatures>::deref(v119, v72);
LABEL_123:
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v72);
      goto LABEL_124;
    }
LABEL_155:
    __break(1u);
LABEL_156:
    v15 = 0;
    v18 = 0;
    v127 = 0;
  }
  if (!v118)
    goto LABEL_155;
  v43 = ((unint64_t)v116 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v44 = v43 - (_QWORD)v116;
  if (v43 < (unint64_t)v116)
  {
    v45 = 0;
  }
  else
  {
    v45 = 0;
    if (v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= v117)
    {
      *(_WORD *)((char *)v116 + v44) = 2821;
      v45 = v44 + 2;
    }
  }
  v46 = *(_QWORD *)(v9 + 64);
  v47 = (*(_QWORD *)(v9 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v48 = *(_QWORD *)(v9 + 56);
  if (v47 + 16 >= v48)
    v47 = 0;
  if (v45 <= 0x10)
    v45 = 16;
  v49 = v47 + v45;
  if (v48 <= v49)
    v49 = 0;
  *(_QWORD *)(v9 + 72) = v49;
  v50 = (unint64_t *)(*(_QWORD *)(v46 + 16) + 128);
  do
    __ldaxr(v50);
  while (__stlxr(v49, v50));
  *(_DWORD *)(v9 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v139, v5);
  v51 = (uint64_t *)v139;
  v123 = 0;
  IPC::Connection::createSyncMessageEncoder(3534, (uint64_t)v4, (uint64_t *)&v123, (uint64_t *)v140);
  v52 = v140[0];
  IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::encode(v140[0], v103);
  *(_QWORD *)IPC::Encoder::grow(v52, 8uLL, 8) = v102;
  *(_QWORD *)IPC::Encoder::grow(v52, 8uLL, 8) = v101;
  IPC::Connection::sendSyncMessage((uint64_t)v51, (uint64_t)v123, (uint64_t *)v140, 0, (uint64_t)&v119, v10);
  if (v120)
  {
    if (v120 != 1)
      goto LABEL_160;
    LOBYTE(v126) = (_BYTE)v119;
    v53 = 1;
    v138 = 1;
LABEL_94:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34E3480[v53])(&v105, &v119);
LABEL_95:
    v55 = v140[0];
    v140[0] = 0;
    if (v55)
    {
      IPC::Encoder::~Encoder(v55, v54);
      WTF::fastFree(v56, v57);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v139);
    goto LABEL_98;
  }
  LOBYTE(v105) = 0;
  v113 = 0;
  IPC::Decoder::operator>><std::tuple<WebKit::WebGPU::SupportedFeatures,WebKit::WebGPU::SupportedLimits>>((uint64_t *)v119, &v105);
  if (!v113)
  {
    LOBYTE(v126) = 13;
    v138 = 1;
    goto LABEL_93;
  }
  if (!v120)
  {
    IPC::ConnectionSendSyncResult<Messages::RemoteAdapter::RequestDevice>::ConnectionSendSyncResult((uint64_t)&v126, (uint64_t *)&v119, (uint64_t *)&v105);
    if (v113)
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v54);
LABEL_93:
    v53 = v120;
    if (v120 != -1)
      goto LABEL_94;
    goto LABEL_95;
  }
LABEL_160:
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_161:
  v85 = 15;
LABEL_162:
  LOBYTE(v126) = v85;
  v138 = 1;
LABEL_99:
  v105 = 0;
  v58 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v58 + 16))(v58, &v105);
  (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = v105;
  v105 = 0;
  if (v59)
  {
    if (*((_DWORD *)v59 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v59 + 8))(v59);
    else
      --*((_DWORD *)v59 + 2);
  }
LABEL_124:
  if (v138 != -1)
    ((void (*)(WTF::StringImpl **, unint64_t *))off_1E34E3600[v138])(&v105, &v126);
  return std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v103, v39);
}

uint64_t WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::ImageBuffer::ensureBackendCreated(WebCore::ImageBuffer *this)
{
  return (*(uint64_t (**)(WebCore::ImageBuffer *))(*(_QWORD *)this + 160))(this);
}

uint64_t WebKit::RemoteSerializedImageBufferProxy::memoryCost(WebKit::RemoteSerializedImageBufferProxy *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t WebKit::RemoteSerializedImageBufferProxy::isRemoteSerializedImageBufferProxy(WebKit::RemoteSerializedImageBufferProxy *this)
{
  return 1;
}

void WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::RemoteRenderingBackendProxy::dispatch(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WebKit::RemoteRenderingBackendProxy::isCurrent(WebKit::RemoteRenderingBackendProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
}

uint64_t `non-virtual thunk to'WebKit::RemoteRenderingBackendProxy::isCurrent(WebKit::RemoteRenderingBackendProxy *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t std::__optional_destruct_base<IPC::StreamClientConnection::StreamConnectionPair,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32))
  {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 16));
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)(a1 + 8));
    WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref((unsigned int **)a1);
  }
  return a1;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetErrorsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetFloatvEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetIntegervEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformfvEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformivEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetUniformuivEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsShaderEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsTextureEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL7IsQueryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetQueryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsSamplerEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9FenceSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL6IsSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8GetSynciEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetInternalformativEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(IPC::Decoder *a1, WTF::MachSendRight *a2)
{
  _BYTE v5[80];

  IPC::Decoder::decode<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(a1, v5);
  std::__optional_storage_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>>(a2, (uint64_t)v5);
  if (v5[72])
    std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v5);
  return a1;
}

uint64_t WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate()
{
  uint64_t result;

  if (!WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
    return WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  result = 142;
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3480[v4])(&v7, result);
  *(_DWORD *)(v3 + 8) = -1;
  v5 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3490[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF9UniqueRefIN3IPC7DecoderEEENSA_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void std::__optional_storage_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<std::optional<WebCore::ShareableBitmapHandle>>,false>>(WTF::MachSendRight *a1, uint64_t a2)
{
  if (*((unsigned __int8 *)a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*((_BYTE *)a1 + 72))
      std::__optional_storage_base<WebCore::ShareableBitmapHandle,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ShareableBitmapHandle,false>>(a1, a2);
  }
  else if (*((_BYTE *)a1 + 72))
  {
    *((_BYTE *)std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100](a1)
    + 72) = 0;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *((_BYTE *)a1 + 64) = 0;
    if (*(_BYTE *)(a2 + 64))
    {
      WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)a1, a2);
      *((_BYTE *)a1 + 64) = 1;
    }
    *((_BYTE *)a1 + 72) = 1;
  }
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ConnectionSendSyncResult(uint64_t a1, IPC::Decoder **a2, uint64_t a3)
{
  IPC::Decoder *v4;
  IPC::Decoder *v6;
  _BYTE v7[64];
  char v8;

  v4 = *a2;
  *a2 = 0;
  v6 = v4;
  v7[0] = 0;
  v8 = 0;
  if (*(_BYTE *)(a3 + 64))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v7, a3);
    v8 = 1;
    *(_QWORD *)a1 = v6;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 72) = 0;
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a1 + 8, (uint64_t)v7);
    *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 72) = 0;
  }
  *(_DWORD *)(a1 + 80) = 0;
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v7);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FilteredNativeImage>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E34A0[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E34B0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer19FilteredNativeImageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)(a2 + 1));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer19FilteredNativeImageEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*((_BYTE *)a3 + 72))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2 + 8, (uint64_t)(a3 + 1));
    *(_BYTE *)(a2 + 72) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer19FilteredNativeImageEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::RemoteImageBuffer::FlushContextSync>(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  IPC::Encoder *result;
  WTF *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  double v15;
  uint64_t v16;
  unsigned int v17;
  IPC::Encoder *v18;
  uint64_t v19;
  char v20;

  v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3616, a3, &v19, (uint64_t *)&v18);
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, a4);
  v7 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      v13 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::StreamClientConnectionBuffer::tryAcquireAll(v13, v14, v15);
    }
    *(_BYTE *)a1 = v16;
  }
  else
  {
    v8 = v16;
    v16 = 0;
    *(_QWORD *)a1 = v8;
  }
  *(_DWORD *)(a1 + 16) = v7;
  ((void (*)(char *, uint64_t *))off_1E34E3480[v7])(&v20, &v16);
  result = v18;
  v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t IPC::StreamClientConnectionBuffer::tryAcquireAll(uint64_t result, uint64_t *a2, double a3)
{
  uint64_t v5;
  semaphore_t *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v5 = result;
  v6 = (semaphore_t *)(a2 + 4);
  while (1)
  {
    v7 = *(unint64_t **)(a2[1] + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(0x80000000uLL, v7));
    v9 = atomic_load((unint64_t *)(*(_QWORD *)(a2[1] + 16) + 128));
    if (!(v8 | v9 & 0xFFFFFFFF7FFFFFFFLL))
      break;
    if (*((_BYTE *)a2 + 40))
    {
      result = IPC::Semaphore::waitFor(v6, a3);
      if ((result & 1) != 0)
      {
        result = WTF::ApproximateTime::now((WTF::ApproximateTime *)result);
        if (v10 < a3)
          continue;
      }
    }
    v11 = 0;
    *(_BYTE *)v5 = 0;
LABEL_13:
    *(_BYTE *)(v5 + 16) = v11;
    return result;
  }
  atomic_store(0, *(unint64_t **)(a2[1] + 16));
  a2[2] = 0;
  v12 = a2[1];
  v13 = *(_QWORD *)(v12 + 8);
  if (v13 > 0xFF)
  {
    v14 = *a2;
    v15 = *(_QWORD *)(v12 + 16);
    v16 = v13 - 256;
    if (!*a2)
    {
      v17 = v13 - 256;
      goto LABEL_12;
    }
    v17 = v14 - 1;
    if (v16 >= v14 - 1)
    {
LABEL_12:
      *(_QWORD *)v5 = v15 + 256;
      *(_QWORD *)(v5 + 8) = v17;
      v11 = 1;
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x48);
  result = IPC::Decoder::Decoder(v6, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *a3);
  *a1 = result;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::FlushContextSync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E34C0[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E34D0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer16FlushContextSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer16FlushContextSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer16FlushContextSyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::Connection::send<Messages::RemoteImageBufferSet::EndPrepareForDisplay>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1095;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

BOOL WebKit::`anonymous namespace'::RemoteImageBufferSetProxyFlusher::flushAndCollectHandles(WTF::MonotonicTime *a1, uint64_t *a2)
{
  WTF::MonotonicTime *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  double v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  WTF *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  WTF **v31;
  WTF *v32;
  WTF *v33;
  WTF *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WTF *v41;
  BOOL v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  WTF **v48;
  int v49;
  NSObject *v50;
  double v51;
  int v52;
  int v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  char v60;
  WTF *v61;
  char v62;

  v3 = a1;
  v4 = *((_QWORD *)a1 + 2);
  v5 = (unsigned __int8 *)(v4 + 4);
  if (__ldaxr((unsigned __int8 *)(v4 + 4)))
  {
    __clrex();
LABEL_3:
    a1 = (WTF::MonotonicTime *)MEMORY[0x19AEABB3C](v4 + 4);
    goto LABEL_4;
  }
  if (__stxr(1u, v5))
    goto LABEL_3;
LABEL_4:
  if (!*(_BYTE *)(v4 + 160))
  {
    WTF::MonotonicTime::now(a1);
    v51 = v7 + 15.0;
    v52 = 1;
    WTF::Condition::waitUntilUnchecked<WTF::Lock>(v4 + 5, (unsigned __int8 *)(v4 + 4), (WTF::TimeWithDynamicClockType *)&v51);
  }
  kdebug_trace();
  v8 = *(unsigned __int8 *)(v4 + 160);
  v9 = __ldxr(v5);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, v5))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 4));
  if (!v8)
    goto LABEL_69;
  v10 = *((_QWORD *)v3 + 2);
  v11 = (unsigned __int8 *)(v10 + 4);
  if (__ldaxr((unsigned __int8 *)(v10 + 4)))
  {
    __clrex();
LABEL_14:
    MEMORY[0x19AEABB3C](v10 + 4);
    goto LABEL_15;
  }
  if (__stxr(1u, v11))
    goto LABEL_14;
LABEL_15:
  LOBYTE(v51) = 0;
  v60 = 0;
  if (!*(_BYTE *)(v10 + 160))
    goto LABEL_23;
  v54 = 0;
  if (*(_BYTE *)(v10 + 80))
  {
    v53 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)&v51, v10 + 8);
    v54 = 1;
    v13 = *(unsigned __int8 *)(v10 + 160);
    v55 = *(_OWORD *)(v10 + 88);
    v14 = *(_OWORD *)(v10 + 104);
    v15 = *(_OWORD *)(v10 + 120);
    v16 = *(_OWORD *)(v10 + 136);
    v59 = *(_BYTE *)(v10 + 152);
    v57 = v15;
    v58 = v16;
    v56 = v14;
    v60 = 1;
    if (!v13)
      goto LABEL_23;
  }
  else
  {
    v44 = *(_OWORD *)(v10 + 104);
    v45 = *(_OWORD *)(v10 + 120);
    v46 = *(_OWORD *)(v10 + 136);
    v59 = *(_BYTE *)(v10 + 152);
    v47 = *(_OWORD *)(v10 + 88);
    v57 = v45;
    v58 = v46;
    v55 = v47;
    v56 = v44;
    v60 = 1;
  }
  if (*(_BYTE *)(v10 + 80))
  {
    v17 = *(unsigned int *)(v10 + 72);
    if ((_DWORD)v17 != -1)
      off_1E34E3470[v17]((int)&v61, (WTF::MachSendRight *)(v10 + 8));
    *(_DWORD *)(v10 + 72) = -1;
  }
  *(_BYTE *)(v10 + 160) = 0;
LABEL_23:
  v18 = __ldxr(v11);
  if (v18 == 1)
  {
    if (!__stlxr(0, v11))
      goto LABEL_28;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 4));
LABEL_28:
  if (v60)
  {
    v19 = WTF::fastMalloc((WTF *)0x98);
    v20 = v19;
    *(_BYTE *)v19 = 0;
    *(_BYTE *)(v19 + 72) = 0;
    if (v54)
    {
      *(_DWORD *)(v19 + 64) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::ShareableBitmapHandle,WTF::MachSendRight>,(std::__variant_detail::_Trait)1>>((unsigned int *)v19, (uint64_t)&v51);
      *(_BYTE *)(v20 + 72) = 1;
    }
    *(_OWORD *)(v20 + 80) = v55;
    v21 = v56;
    v22 = v57;
    v23 = v58;
    *(_BYTE *)(v20 + 144) = v59;
    *(_OWORD *)(v20 + 112) = v22;
    *(_OWORD *)(v20 + 128) = v23;
    *(_OWORD *)(v20 + 96) = v21;
    v61 = (WTF *)v20;
    v24 = *a2;
    if (*a2
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, 0), (v24 = *a2) != 0))
    {
      v25 = *(_DWORD *)(v24 - 8);
    }
    else
    {
      v25 = 0;
    }
    v26 = (WTF *)*((_QWORD *)v3 + 1);
    v27 = ((unint64_t)v26 + ~((_QWORD)v26 << 32)) ^ (((unint64_t)v26 + ~((_QWORD)v26 << 32)) >> 22);
    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = v25 & ((v29 >> 31) ^ v29);
    v31 = (WTF **)(v24 + 16 * v30);
    v32 = *v31;
    if (*v31)
    {
      v48 = 0;
      v49 = 1;
      while (v32 != v26)
      {
        if (v32 == (WTF *)-1)
          v48 = v31;
        v30 = (v30 + v49) & v25;
        v31 = (WTF **)(v24 + 16 * v30);
        v32 = *v31;
        ++v49;
        if (!*v31)
        {
          if (v48)
          {
            *v48 = 0;
            v48[1] = 0;
            --*(_DWORD *)(*a2 - 16);
            v26 = (WTF *)*((_QWORD *)v3 + 1);
            v31 = v48;
          }
          goto LABEL_35;
        }
      }
      goto LABEL_43;
    }
LABEL_35:
    *v31 = v26;
    v33 = v31[1];
    v34 = v61;
    v61 = 0;
    v31[1] = v34;
    if (v33)
      std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((_DWORD)v31 + 8, v33);
    v35 = *a2;
    if (*a2)
      v36 = *(_DWORD *)(v35 - 12) + 1;
    else
      v36 = 1;
    *(_DWORD *)(v35 - 12) = v36;
    v37 = *a2;
    if (*a2)
      v38 = *(_DWORD *)(v37 - 12);
    else
      v38 = 0;
    v39 = (*(_DWORD *)(v37 - 16) + v38);
    v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39)
        goto LABEL_43;
    }
    else if (3 * v40 > 4 * v39)
    {
LABEL_43:
      v41 = v61;
      v61 = 0;
      if (v41)
        std::default_delete<WebKit::BufferSetBackendHandle>::operator()[abi:sn180100]((int)&v61, v41);
      if (v60)
        v42 = v54 == 0;
      else
        v42 = 1;
      if (!v42 && v53 != -1)
        off_1E34E3470[v53]((int)&v62, (WTF::MachSendRight *)&v51);
      return v8 != 0;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebKit::BufferSetBackendHandle>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebKit::BufferSetBackendHandle>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>>>::expand(a2, v31);
    goto LABEL_43;
  }
  __break(1u);
LABEL_69:
  v50 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v51) = 0;
    _os_log_impl(&dword_196BCC000, v50, OS_LOG_TYPE_DEFAULT, "RemoteImageBufferSetProxyFlusher::flushAndCollectHandlers - failed", (uint8_t *)&v51, 2u);
  }
  return v8 != 0;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t RemoteImageBuffer;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v40;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unsigned int v47;
  unsigned int v49;
  NSObject *v50;
  uint64_t v51;
  const char *v52;
  unsigned int *v53;
  uint64_t *v54;
  _BYTE buf[22];
  __int16 v56;
  const char *v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v53);
  v7 = v53;
  if (!v53)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_84;
    v35 = *(_QWORD *)buf;
    v34 = *(_QWORD *)&buf[8];
    v36 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v37 = v36 - *(_QWORD *)buf;
    if (v36 >= *(_QWORD *)buf)
    {
      v38 = v37 + 2;
      if (v37 <= 0xFFFFFFFFFFFFFFFDLL && v38 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v37) = 2822;
        goto LABEL_50;
      }
      v34 = 0;
    }
    v38 = 0;
LABEL_50:
    v40 = (_QWORD *)((v35 + v38 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v40 >= v35 + v38)
    {
      v38 = (unint64_t)v40 - v35 + 8;
      if ((unint64_t)v40 - v35 > 0xFFFFFFFFFFFFFFF7 || v38 > v34)
        goto LABEL_87;
      *v40 = a3;
    }
    if (v34)
    {
      v42 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = *((_QWORD *)v7 + 7);
      if (v42 + 16 >= v43)
        v42 = 0;
      if (v38 <= 0x10)
        v38 = 16;
      v44 = v42 + v38;
      if (v43 <= v44)
        v44 = 0;
      *((_QWORD *)v7 + 9) = v44;
      v45 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v44, v45));
      v47 = v7[27];
      if (v46 == 0x80000000 || v47 != 0)
      {
        v49 = v47 + 1;
        v7[27] = v49;
        if (v49 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
      goto LABEL_3;
    }
LABEL_87:
    RemoteImageBuffer = 17;
    goto LABEL_78;
  }
LABEL_3:
  result = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
  if (!buf[16])
  {
LABEL_84:
    RemoteImageBuffer = 15;
    goto LABEL_78;
  }
  v11 = *(_QWORD *)buf;
  v12 = *(_QWORD *)&buf[8];
  v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - *(_QWORD *)buf;
  if (v13 >= *(_QWORD *)buf)
  {
    v15 = v14 + 2;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v14) = 1306;
      goto LABEL_10;
    }
    v12 = 0;
  }
  v15 = 0;
LABEL_10:
  v17 = (v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = v17 - (v11 + v15);
  if (v17 >= v11 + v15)
  {
    v19 = v17 - v11;
    v20 = v18 + v15 + 8;
    if (v19 > 0xFFFFFFFFFFFFFFF7 || v20 > v12)
    {
      v12 = 0;
    }
    else
    {
      *(_QWORD *)(v11 + v19) = **a2;
      v15 = v20;
    }
  }
  v22 = (_QWORD *)((v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v22 >= v11 + v15)
  {
    v15 = (unint64_t)v22 - v11 + 8;
    if ((unint64_t)v22 - v11 > 0xFFFFFFFFFFFFFFF7 || v15 > v12)
      goto LABEL_76;
    *v22 = *a2[1];
  }
  if (v12)
  {
    v24 = *((_QWORD *)v7 + 8);
    v25 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v26 = *((_QWORD *)v7 + 7);
    if (v25 + 16 >= v26)
      v25 = 0;
    if (v15 <= 0x10)
      v15 = 16;
    v27 = v25 + v15;
    if (v26 <= v27)
      v28 = 0;
    else
      v28 = v27;
    *((_QWORD *)v7 + 9) = v28;
    v29 = (unint64_t *)(*(_QWORD *)(v24 + 16) + 128);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v28, v29));
    if (v30 == 0x80000000 || v7[27])
    {
      if (*((_BYTE *)v7 + 96))
        MEMORY[0x19AEBA1A0](v7[21]);
      v7[27] = 0;
    }
    RemoteImageBuffer = 0;
    goto LABEL_35;
  }
LABEL_76:
  if (buf[16])
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)v7 + 1);
    RemoteImageBuffer = IPC::Connection::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet>((uint64_t)v54, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
    if (!(_DWORD)RemoteImageBuffer)
    {
LABEL_35:
      v53 = 0;
      do
      {
        v32 = __ldaxr(v7);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v7));
      if (!v33)
      {
        atomic_store(1u, v7);
        *(_QWORD *)buf = v7;
        WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
      }
      return RemoteImageBuffer;
    }
LABEL_78:
    v50 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v51 = *((_QWORD *)a1 + 7);
      v52 = IPC::errorAsString(RemoteImageBuffer);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v51;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "RemoteRenderingBackend_CreateRemoteImageBufferSet";
      v56 = 2082;
      v57 = v52;
      _os_log_impl(&dword_196BCC000, v50, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::CreateRemoteImageBufferSet>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1306;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, a2[1]);
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::CreateImageBuffer>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1303;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode((IPC::Encoder *)v6, *(int **)a2);
  LOBYTE(a3) = **(_BYTE **)(a2 + 8);
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  LOBYTE(a3) = **(_BYTE **)(a2 + 16);
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  v7 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 4uLL, 4) = v7;
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode((IPC::Encoder *)v6, *(CFTypeRef **)(a2 + 32));
  LOBYTE(a3) = *(_BYTE *)(a2 + 40);
  *IPC::Encoder::grow((IPC::Encoder *)v6, 1uLL, 1) = a3;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, *(uint64_t **)(a2 + 48));
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *result;
  unsigned int *v7;
  double v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  int v40;
  NSObject *v41;
  uint64_t v42;
  const char *v43;
  unsigned int *v44;
  uint64_t *v45;
  _BYTE buf[22];
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  result = WebKit::RemoteRenderingBackendProxy::connection(a1, &v44);
  v7 = v44;
  if (v44)
  {
    WTF::ApproximateTime::now(result);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v7 + 6) == a3)
      goto LABEL_3;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
    if (!buf[16])
    {
LABEL_59:
      v40 = 15;
LABEL_60:
      v41 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v42 = *((_QWORD *)a1 + 7);
        v43 = IPC::errorAsString(v40);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v42;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "RemoteRenderingBackend_ReleaseImageBuffer";
        v47 = 2082;
        v48 = v43;
        _os_log_impl(&dword_196BCC000, v41, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
      goto LABEL_28;
    }
    v28 = *(_QWORD *)buf;
    v27 = *(_QWORD *)&buf[8];
    v29 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v30 = v29 - *(_QWORD *)buf;
    if (v29 >= *(_QWORD *)buf)
    {
      v31 = v30 + 2;
      if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v31 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v30) = 2822;
        goto LABEL_43;
      }
      v27 = 0;
    }
    v31 = 0;
LABEL_43:
    v33 = (_QWORD *)((v28 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v33 >= v28 + v31)
    {
      v31 = (unint64_t)v33 - v28 + 8;
      if ((unint64_t)v33 - v28 > 0xFFFFFFFFFFFFFFF7 || v31 > v27)
        goto LABEL_70;
      *v33 = a3;
    }
    if (v27)
    {
      v35 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v36 = *((_QWORD *)v7 + 7);
      if (v35 + 16 >= v36)
        v35 = 0;
      if (v31 <= 0x10)
        v31 = 16;
      v37 = v35 + v31;
      if (v36 <= v37)
        v37 = 0;
      *((_QWORD *)v7 + 9) = v37;
      v38 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v37, v38));
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, v39 == 0x80000000);
      *((_QWORD *)v7 + 6) = a3;
LABEL_3:
      result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
      if (buf[16])
      {
        v11 = *(_QWORD *)buf;
        v10 = *(_QWORD *)&buf[8];
        v12 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v13 = v12 - *(_QWORD *)buf;
        if (v12 >= *(_QWORD *)buf)
        {
          v14 = v13 + 2;
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v14 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v13) = 1318;
            goto LABEL_10;
          }
          v10 = 0;
        }
        v14 = 0;
LABEL_10:
        v16 = (_QWORD *)((v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v16 >= v11 + v14)
        {
          v14 = (unint64_t)v16 - v11 + 8;
          if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7 || v14 > v10)
          {
LABEL_63:
            if (!buf[16])
              __break(1u);
            IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, (uint64_t **)v7 + 1);
            v40 = IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer>((uint64_t)v45, a2, a3);
            result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v45);
            if (!v40)
              goto LABEL_28;
            goto LABEL_60;
          }
          *v16 = **a2;
        }
        if (v10)
        {
          v18 = *((_QWORD *)v7 + 8);
          v19 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v20 = *((_QWORD *)v7 + 7);
          if (v19 + 16 >= v20)
            v19 = 0;
          if (v14 <= 0x10)
            v14 = 16;
          v21 = v19 + v14;
          if (v20 <= v21)
            v22 = 0;
          else
            v22 = v21;
          *((_QWORD *)v7 + 9) = v22;
          v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v22, v23));
          if (v24 == 0x80000000 || v7[27])
          {
            if (*((_BYTE *)v7 + 96))
              result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](v7[21]);
            v7[27] = 0;
          }
LABEL_28:
          v44 = 0;
          do
          {
            v25 = __ldaxr(v7);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v7));
          if (!v26)
          {
            atomic_store(1u, v7);
            *(_QWORD *)buf = v7;
            return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
          }
          return result;
        }
        goto LABEL_63;
      }
      goto LABEL_59;
    }
LABEL_70:
    v40 = 17;
    goto LABEL_60;
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseImageBuffer>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1318;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v44;
  NSObject *v45;
  uint64_t v46;
  const char *v47;
  unsigned int *v48;
  uint64_t *v49;
  _BYTE buf[22];
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v48);
  v7 = v48;
  if (!v48)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_77;
    v30 = *(_QWORD *)buf;
    v29 = *(_QWORD *)&buf[8];
    v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = v31 - *(_QWORD *)buf;
    if (v31 >= *(_QWORD *)buf)
    {
      v33 = v32 + 2;
      if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v33 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v32) = 2822;
        goto LABEL_44;
      }
      v29 = 0;
    }
    v33 = 0;
LABEL_44:
    v35 = (_QWORD *)((v30 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v35 >= v30 + v33)
    {
      v33 = (unint64_t)v35 - v30 + 8;
      if ((unint64_t)v35 - v30 > 0xFFFFFFFFFFFFFFF7 || v33 > v29)
        goto LABEL_80;
      *v35 = a3;
    }
    if (v29)
    {
      v37 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = *((_QWORD *)v7 + 7);
      if (v37 + 16 >= v38)
        v37 = 0;
      if (v33 <= 0x10)
        v33 = 16;
      v39 = v37 + v33;
      if (v38 <= v39)
        v39 = 0;
      *((_QWORD *)v7 + 9) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      v42 = v7[27];
      if (v41 == 0x80000000 || v42 != 0)
      {
        v44 = v42 + 1;
        v7[27] = v44;
        if (v44 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
      goto LABEL_3;
    }
LABEL_80:
    v26 = 17;
    goto LABEL_72;
  }
LABEL_3:
  result = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
  if (!buf[16])
  {
LABEL_77:
    v26 = 15;
    goto LABEL_72;
  }
  v12 = *(_QWORD *)buf;
  v11 = *(_QWORD *)&buf[8];
  v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - *(_QWORD *)buf;
  if (v13 >= *(_QWORD *)buf)
  {
    v15 = v14 + 2;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v14) = 1321;
      goto LABEL_10;
    }
    v11 = 0;
  }
  v15 = 0;
LABEL_10:
  v17 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v17 >= v12 + v15)
  {
    v15 = (unint64_t)v17 - v12 + 8;
    if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7 || v15 > v11)
      goto LABEL_70;
    *v17 = **a2;
  }
  if (v11)
  {
    v19 = *((_QWORD *)v7 + 8);
    v20 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v21 = *((_QWORD *)v7 + 7);
    if (v20 + 16 >= v21)
      v20 = 0;
    if (v15 <= 0x10)
      v15 = 16;
    v22 = v20 + v15;
    if (v21 <= v22)
      v23 = 0;
    else
      v23 = v22;
    *((_QWORD *)v7 + 9) = v23;
    v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v23, v24));
    if (v25 == 0x80000000 || v7[27])
    {
      if (*((_BYTE *)v7 + 96))
        MEMORY[0x19AEBA1A0](v7[21]);
      v7[27] = 0;
    }
    v26 = 0;
    goto LABEL_29;
  }
LABEL_70:
  if (buf[16])
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)v7 + 1);
    v26 = IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet>((uint64_t)v49, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v49);
    if (!(_DWORD)v26)
    {
LABEL_29:
      v48 = 0;
      do
      {
        v27 = __ldaxr(v7);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v7));
      if (!v28)
      {
        atomic_store(1u, v7);
        *(_QWORD *)buf = v7;
        WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
      }
      return v26;
    }
LABEL_72:
    v45 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v46 = *((_QWORD *)a1 + 7);
      v47 = IPC::errorAsString(v26);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v46;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "RemoteRenderingBackend_ReleaseRemoteImageBufferSet";
      v51 = 2082;
      v52 = v47;
      _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseRemoteImageBufferSet>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1321;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::MoveToImageBuffer,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  IPC::Encoder *v37;
  WTF *v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v45;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unsigned int v52;
  NSObject *v54;
  uint64_t v55;
  const char *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v60;
  WTF *v61;
  void *v62;
  unsigned int *v63;
  uint64_t *v64;
  IPC::Encoder *v65;
  _BYTE buf[22];
  __int16 v67;
  const char *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v63);
  v7 = v63;
  if (!v63)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
      if (!buf[16])
        goto LABEL_77;
      v11 = *(_QWORD *)buf;
      v10 = *(_QWORD *)&buf[8];
      v12 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v13 = v12 - *(_QWORD *)buf;
      if (v12 >= *(_QWORD *)buf)
      {
        v14 = v13 + 2;
        if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v14 <= *(_QWORD *)&buf[8])
        {
          *(_WORD *)(*(_QWORD *)buf + v13) = 1313;
          goto LABEL_10;
        }
        v10 = 0;
      }
      v14 = 0;
LABEL_10:
      v16 = (_QWORD *)((v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v16 >= v11 + v14)
      {
        v14 = (unint64_t)v16 - v11 + 8;
        if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7 || v14 > v10)
          goto LABEL_29;
        *v16 = **a2;
      }
      if (v10)
      {
        v18 = *((_QWORD *)v7 + 8);
        v19 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v20 = *((_QWORD *)v7 + 7);
        if (v19 + 16 >= v20)
          v19 = 0;
        if (v14 <= 0x10)
          v14 = 16;
        v21 = v19 + v14;
        if (v20 <= v21)
          v22 = 0;
        else
          v22 = v21;
        *((_QWORD *)v7 + 9) = v22;
        v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v22, v23));
        if (v24 == 0x80000000 || v7[27])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
        v25 = 0;
        goto LABEL_81;
      }
LABEL_29:
      if (buf[16])
      {
        v26 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = v26 - *(_QWORD *)buf;
        if (v26 < *(_QWORD *)buf)
        {
          v28 = 0;
        }
        else
        {
          v28 = 0;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL && v27 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v27) = 2821;
            v28 = v27 + 2;
          }
        }
        v29 = *((_QWORD *)v7 + 8);
        v30 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v31 = *((_QWORD *)v7 + 7);
        if (v30 + 16 >= v31)
          v30 = 0;
        if (v28 <= 0x10)
          v28 = 16;
        v32 = v30 + v28;
        if (v31 <= v32)
          v32 = 0;
        *((_QWORD *)v7 + 9) = v32;
        v33 = (unint64_t *)(*(_QWORD *)(v29 + 16) + 128);
        do
          __ldaxr(v33);
        while (__stlxr(v32, v33));
        v7[27] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)v7 + 1);
        v34 = v64;
        v35 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v35 = 1313;
        *(_QWORD *)(v35 + 8) = a3;
        *(_QWORD *)(v35 + 528) = v35 + 16;
        *(_QWORD *)(v35 + 536) = v35 + 16;
        *(_OWORD *)(v35 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v35 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v35);
        v65 = (IPC::Encoder *)v35;
        IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v35, *a2);
        v25 = IPC::Connection::sendMessageImpl((uint64_t)v34, (uint64_t *)&v65, 1, 0);
        v37 = v65;
        v65 = 0;
        if (v37)
        {
          IPC::Encoder::~Encoder(v37, v36);
          WTF::fastFree(v38, v39);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v64);
        if (!(_DWORD)v25)
          goto LABEL_81;
        goto LABEL_78;
      }
      __break(1u);
LABEL_94:
      v40 = 0;
LABEL_95:
      v43 = 0;
LABEL_56:
      v45 = (_QWORD *)((v11 + v43 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v45 >= v11 + v43)
      {
        v43 = (unint64_t)v45 - v11 + 8;
        if ((unint64_t)v45 - v11 > 0xFFFFFFFFFFFFFFF7 || v43 > v40)
        {
LABEL_96:
          v25 = 17;
          goto LABEL_78;
        }
        *v45 = a3;
      }
      if (!v40)
        goto LABEL_96;
      v47 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v48 = *((_QWORD *)v7 + 7);
      if (v47 + 16 >= v48)
        v47 = 0;
      if (v43 <= 0x10)
        v43 = 16;
      v49 = v47 + v43;
      if (v48 <= v49)
        v49 = 0;
      *((_QWORD *)v7 + 9) = v49;
      v50 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v49, v50));
      v52 = v7[27];
      if (v51 == 0x80000000 || v52 != 0)
      {
        v60 = v52 + 1;
        v7[27] = v60;
        if (v60 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
  if (buf[16])
  {
    v11 = *(_QWORD *)buf;
    v40 = *(_QWORD *)&buf[8];
    v41 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v42 = v41 - *(_QWORD *)buf;
    if (v41 < *(_QWORD *)buf)
      goto LABEL_95;
    v43 = v42 + 2;
    if (v42 > 0xFFFFFFFFFFFFFFFDLL || v43 > *(_QWORD *)&buf[8])
      goto LABEL_94;
    *(_WORD *)(*(_QWORD *)buf + v42) = 2822;
    goto LABEL_56;
  }
LABEL_77:
  v25 = 15;
LABEL_78:
  v54 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v55 = *((_QWORD *)a1 + 7);
    v56 = IPC::errorAsString(v25);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v55;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "RemoteRenderingBackend_MoveToImageBuffer";
    v67 = 2082;
    v68 = v56;
    _os_log_impl(&dword_196BCC000, v54, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
LABEL_81:
  v63 = 0;
  do
  {
    v57 = __ldaxr(v7);
    v58 = v57 - 1;
  }
  while (__stlxr(v58, v7));
  if (!v58)
  {
    atomic_store(1u, v7);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7);
    WTF::fastFree(v61, v62);
  }
  return v25;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  unsigned __int8 ***result;
  uint64_t *v11;
  unint64_t v12[2];
  char v13;

  result = (unsigned __int8 ***)IPC::StreamClientConnection::trySendDestinationIDIfNeeded(a2, a4, a5);
  if ((_DWORD)result)
  {
    *(_BYTE *)a1 = (_BYTE)result;
  }
  else
  {
    result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, v12, a5);
    if (v13)
    {
      IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a2, v12[0], v12[1]);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, (uint64_t **)(a2 + 8));
      IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>(a1, (uint64_t)v11, a3, a4, a5);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v11);
    }
    *(_BYTE *)a1 = 15;
  }
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9;
  uint64_t v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  IPC::Encoder *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  IPC::Encoder *v19;
  uint64_t v20;
  char v21;

  v20 = 0;
  IPC::Connection::createSyncMessageEncoder(3618, a4, &v20, (uint64_t *)&v19);
  IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat const&,WebCore::IntPoint const&,WebCore::IntSize const&>,void>::encode<IPC::Encoder,WebCore::IntSize const&,0ul,1ul,2ul,3ul>(v19, a3);
  IPC::Connection::sendSyncMessage(a2, v20, (uint64_t *)&v19, 0, (uint64_t)&v17, a5);
  v9 = v18;
  if (v18)
  {
    if (v18 != 1)
    {
      v15 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat const&,WebCore::IntPoint const&,WebCore::IntSize const&>,void>::encode<IPC::Encoder,WebCore::IntSize const&,0ul,1ul,2ul,3ul>(v15, v16);
    }
    *(_BYTE *)a1 = v17;
  }
  else
  {
    v10 = v17;
    v17 = 0;
    *(_QWORD *)a1 = v10;
  }
  *(_DWORD *)(a1 + 16) = v9;
  ((void (*)(char *, uint64_t *))off_1E34E3480[v9])(&v21, &v17);
  result = v19;
  v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

char *IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle &&,WebCore::PixelBufferFormat const&,WebCore::IntPoint const&,WebCore::IntSize const&>,void>::encode<IPC::Encoder,WebCore::IntSize const&,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode(a1, *(_QWORD *)a2);
  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(a1, *(_QWORD *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, *(_DWORD **)(a2 + 16));
  return IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(a1, *(_DWORD **)(a2 + 24));
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBufferWithNewMemory>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3508[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3518[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer27GetPixelBufferWithNewMemoryEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetPixelBuffer>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  IPC::Encoder *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  IPC::Encoder *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  IPC::Encoder *v20;
  uint64_t v21;
  char v22;

  v21 = 0;
  IPC::Connection::createSyncMessageEncoder(3617, a4, &v21, (uint64_t *)&v20);
  v9 = v20;
  IPC::ArgumentCoder<WebCore::PixelBufferFormat,void>::encode(v20, *(_QWORD *)a3);
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(v9, *(_DWORD **)(a3 + 8));
  IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::encode(v9, *(_DWORD **)(a3 + 16));
  IPC::Connection::sendSyncMessage(a2, v21, (uint64_t *)&v20, 0, (uint64_t)&v18, a5);
  v10 = v19;
  if (v19)
  {
    if (v19 != 1)
    {
      v16 = std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(v16, v17);
    }
    *(_BYTE *)a1 = v18;
  }
  else
  {
    v11 = v18;
    v18 = 0;
    *(_QWORD *)a1 = v11;
  }
  *(_DWORD *)(a1 + 16) = v10;
  ((void (*)(char *, uint64_t *))off_1E34E3480[v10])(&v22, &v18);
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetPixelBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3528[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3538[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer14GetPixelBufferEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer14GetPixelBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer14GetPixelBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2)
{
  WTF::ApproximateTime *result;
  unsigned int *v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  _BYTE buf[12];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = WebKit::RemoteRenderingBackendProxy::connection(a1, &v13);
  v5 = v13;
  if (v13)
  {
    WTF::ApproximateTime::now(result);
    result = (WTF::ApproximateTime *)IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v5, a2, v6 + 15.0);
    if ((_DWORD)result)
    {
      v9 = (int)result;
      v10 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a1 + 7);
        v12 = IPC::errorAsString(v9);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v11;
        v15 = 2082;
        v16 = "RemoteRenderingBackend_DestroyGetPixelBufferSharedMemory";
        v17 = 2082;
        v18 = v12;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    }
    v13 = 0;
    do
    {
      v7 = __ldaxr(v5);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v5));
    if (!v8)
    {
      atomic_store(1u, v5);
      *(_QWORD *)buf = v5;
      return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t PixelBufferShared;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v6 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded(a1, a2, a3);
  if ((_DWORD)v6)
    return v6;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v10, a3);
  if (!v12)
    return 15;
  result = IPC::StreamClientConnection::trySendStream<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>(a1, v10, v11);
  if ((result & 1) != 0)
    return 0;
  if (v12)
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v10, v11);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (uint64_t **)(a1 + 8));
    PixelBufferShared = IPC::Connection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>((uint64_t)v9, a2);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v9);
    return PixelBufferShared;
  }
  __break(1u);
  return result;
}

uint64_t IPC::StreamClientConnection::trySendStream<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v5 = v4 - a2;
  if (v4 < a2)
  {
    v6 = 0;
  }
  else
  {
    v6 = v5 + 2;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL || v6 > a3)
      return 0;
    *(_WORD *)(a2 + v5) = 1308;
  }
  if (!a3)
    return 0;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_QWORD *)(a1 + 56);
  if (v9 + 16 >= v10)
    v9 = 0;
  if (v6 <= 0x10)
    v6 = 16;
  v11 = v9 + v6;
  if (v10 <= v11)
    v12 = 0;
  else
    v12 = v11;
  *(_QWORD *)(a1 + 72) = v12;
  v13 = (unint64_t *)(*(_QWORD *)(v8 + 16) + 128);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v12, v13));
  if (v14 == 0x80000000 || *(_DWORD *)(a1 + 108))
  {
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    *(_DWORD *)(a1 + 108) = 0;
  }
  return 1;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::DestroyGetPixelBufferSharedMemory>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v11;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1308;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  v6 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 1, 0);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v5);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteImageBuffer::GetShareableBitmap,WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, double a5)
{
  unsigned __int8 ***result;
  uint64_t *v11[10];
  int v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;

  result = (unsigned __int8 ***)IPC::StreamClientConnection::trySendDestinationIDIfNeeded(a2, a4, a5);
  if ((_DWORD)result)
  {
    *(_BYTE *)a1 = (_BYTE)result;
LABEL_8:
    *(_DWORD *)(a1 + 80) = 1;
    return result;
  }
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire(a2 + 56, &v14, a5);
  if (!v16)
  {
    *(_BYTE *)a1 = 15;
    goto LABEL_8;
  }
  result = IPC::StreamClientConnection::trySendSyncStream<Messages::RemoteImageBuffer::GetShareableBitmap>((uint64_t)v11, a2, a3, v14, v15, a5);
  if (v13)
  {
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 80) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v11);
    if (v13)
    {
      if (v12 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(char *, uint64_t **))off_1E34E3548[v12])(&v17, v11);
    }
  }
  else if (v16)
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a2, v14, v15);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v11, (uint64_t **)(a2 + 8));
    IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetShareableBitmap>(a1, (uint64_t)v11[0], a3, a4, a5);
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned __int8 ***IPC::StreamClientConnection::trySendSyncStream<Messages::RemoteImageBuffer::GetShareableBitmap>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, double a6)
{
  unsigned __int8 ***result;
  int v10;
  _BYTE v11[72];
  char v12;
  IPC::Decoder *v13;
  int v14;
  char v15;
  unint64_t *v16[10];
  int v17;
  uint64_t v18;
  IPC::Decoder *v19;
  _QWORD v20[2];
  double v21;
  char v22;

  v21 = a6;
  v20[0] = a4;
  v20[1] = a5;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(a2 + 8));
  v18 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v19, v18))
  {
    LOBYTE(v16[0]) = 11;
    v17 = 1;
    *(_BYTE *)a1 = 0;
    *(_DWORD *)(a1 + 80) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v16);
    *(_BYTE *)(a1 + 88) = 1;
    if (v17 != -1)
      ((void (*)(_BYTE *, unint64_t **))off_1E34E3548[v17])(v11, v16);
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
  }
  v16[0] = v20;
  v16[1] = (unint64_t *)&v18;
  v16[2] = a3;
  v16[3] = (unint64_t *)a2;
  v16[4] = (unint64_t *)&v19;
  v16[5] = (unint64_t *)&v21;
  IPC::StreamClientConnection::trySendSyncStream<Messages::RemoteImageBuffer::GetShareableBitmap>(Messages::RemoteImageBuffer::GetShareableBitmap&,IPC::Timeout,std::span<unsigned char,18446744073709551615ul>)::{lambda(void)#1}::operator()(&v13, v16);
  IPC::Connection::popPendingSyncRequestID(v19);
  if (!v15)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 88) = 0;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
  }
  if (v14)
  {
    if (v14 == 1)
    {
      *(_BYTE *)a1 = (_BYTE)v13;
      v10 = 1;
      *(_DWORD *)(a1 + 80) = 1;
      *(_BYTE *)(a1 + 88) = 1;
LABEL_13:
      ((void (*)(unint64_t **, IPC::Decoder **))off_1E34E3480[v10])(v16, &v13);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
    }
LABEL_21:
    result = (unsigned __int8 ***)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  v11[0] = 0;
  v12 = 0;
  result = (unsigned __int8 ***)IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(v13, (WTF::MachSendRight *)v11);
  if (!v12)
  {
    *(_BYTE *)a1 = 13;
    *(_DWORD *)(a1 + 80) = 1;
    *(_BYTE *)(a1 + 88) = 1;
    goto LABEL_11;
  }
  if (v15)
  {
    if (!v14)
    {
      IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ConnectionSendSyncResult((uint64_t)v16, &v13, (uint64_t)v11);
      *(_BYTE *)a1 = 0;
      *(_DWORD *)(a1 + 80) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v16);
      *(_BYTE *)(a1 + 88) = 1;
      if (v17 != -1)
        ((void (*)(char *, unint64_t **))off_1E34E3548[v17])(&v22, v16);
      if (v12)
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v11);
LABEL_11:
      if (!v15)
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
      v10 = v14;
      if (v14 == -1)
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v19);
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::RemoteImageBuffer::GetShareableBitmap>(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, double a5)
{
  int v9;
  void *v10;
  IPC::Encoder *result;
  WTF *v12;
  void *v13;
  _BYTE *v14;
  unint64_t **v15;
  _BYTE v16[72];
  char v17;
  IPC::Decoder *v18;
  int v19;
  IPC::Encoder *v20;
  uint64_t v21;

  v21 = 0;
  IPC::Connection::createSyncMessageEncoder(3619, a4, &v21, (uint64_t *)&v20);
  LOBYTE(a3) = *a3;
  *IPC::Encoder::grow(v20, 1uLL, 1) = (char)a3;
  IPC::Connection::sendSyncMessage(a2, v21, (uint64_t *)&v20, 0, (uint64_t)&v18, a5);
  if (!v19)
  {
    v16[0] = 0;
    v17 = 0;
    IPC::Decoder::operator>><std::tuple<std::optional<WebCore::ShareableBitmapHandle>>>(v18, (WTF::MachSendRight *)v16);
    if (v17)
    {
      if (v19)
        goto LABEL_14;
      IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ConnectionSendSyncResult(a1, &v18, (uint64_t)v16);
      if (v17)
        std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v16);
    }
    else
    {
      *(_BYTE *)a1 = 13;
      *(_DWORD *)(a1 + 80) = 1;
    }
    v9 = v19;
    if (v19 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v19 != 1)
  {
LABEL_14:
    v14 = (_BYTE *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::StreamClientConnection::trySendSyncStream<Messages::RemoteImageBuffer::GetShareableBitmap>(Messages::RemoteImageBuffer::GetShareableBitmap&,IPC::Timeout,std::span<unsigned char,18446744073709551615ul>)::{lambda(void)#1}::operator()(v14, v15);
  }
  *(_BYTE *)a1 = (_BYTE)v18;
  v9 = 1;
  *(_DWORD *)(a1 + 80) = 1;
LABEL_10:
  ((void (*)(_BYTE *, IPC::Decoder **))off_1E34E3480[v9])(v16, &v18);
LABEL_11:
  result = v20;
  v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

_BYTE *IPC::StreamClientConnection::trySendSyncStream<Messages::RemoteImageBuffer::GetShareableBitmap>(Messages::RemoteImageBuffer::GetShareableBitmap&,IPC::Timeout,std::span<unsigned char,18446744073709551615ul>)::{lambda(void)#1}::operator()(_BYTE *result, unint64_t **a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v19[8];
  int v20;
  char v21;

  v3 = (uint64_t)result;
  v4 = (uint64_t *)a2[3];
  v5 = **a2;
  v6 = (*a2)[1];
  v7 = (v5 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v8 = v7 - v5;
  if (v7 >= v5)
  {
    v9 = v8 + 2;
    if (v8 <= 0xFFFFFFFFFFFFFFFDLL && v9 <= v6)
    {
      *(_WORD *)(v5 + v8) = 3619;
      goto LABEL_7;
    }
    v6 = 0;
  }
  v9 = 0;
LABEL_7:
  v11 = (_QWORD *)((v5 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v11 >= v5 + v9)
  {
    v9 = (unint64_t)v11 - v5 + 8;
    if ((unint64_t)v11 - v5 > 0xFFFFFFFFFFFFFFF7 || v9 > v6)
      goto LABEL_31;
    *v11 = *a2[1];
  }
  if (v9 >= v6)
  {
LABEL_31:
    *result = 0;
    result[16] = 0;
    return result;
  }
  *(_BYTE *)(v5 + v9) = *(_BYTE *)a2[2];
  v13 = (v4[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v4[7];
  if (v13 + 16 >= v14)
    v13 = 0;
  if (v9 <= 0xF)
    v9 = 15;
  v15 = v9 + v13;
  if (v14 > v15 + 1)
    v16 = v15 + 1;
  else
    v16 = 0;
  v4[9] = v16;
  v17 = (unint64_t *)(*(_QWORD *)(v4[8] + 16) + 128);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v16, v17));
  if (v18 == 0x80000000 || *((_DWORD *)v4 + 27))
  {
    if (*((_BYTE *)v4 + 96))
      MEMORY[0x19AEBA1A0](*((unsigned int *)v4 + 21));
    *((_DWORD *)v4 + 27) = 0;
  }
  v4[9] = 0;
  IPC::Connection::waitForSyncReply(*a2[4], *a2[1], 0xE23u, (uint64_t)v19, *(double *)a2[5]);
  *(_BYTE *)v3 = 0;
  *(_DWORD *)(v3 + 8) = -1;
  result = (_BYTE *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>(v3, (uint64_t)v19);
  *(_BYTE *)(v3 + 16) = 1;
  if (v20 != -1)
    return (_BYTE *)((uint64_t (*)(char *, _BYTE *))off_1E34E3480[v20])(&v21, v19);
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ConnectionSendSyncResult(uint64_t a1, IPC::Decoder **a2, uint64_t a3)
{
  IPC::Decoder *v4;
  IPC::Decoder *v5;
  WTF *v6;
  void *v7;
  IPC::Decoder *v9;
  _BYTE v10[64];
  char v11;

  v4 = *a2;
  *a2 = 0;
  v9 = v4;
  v10[0] = 0;
  v11 = 0;
  if (*(_BYTE *)(a3 + 64))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle((uint64_t)v10, a3);
    v11 = 1;
  }
  std::__variant_detail::__base<(std::__variant_detail::_Trait)1,IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>::__base[abi:sn180100]<0ul,IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData>(a1, (uint64_t *)&v9);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)v10);
  v5 = v9;
  v9 = 0;
  if (v5)
  {
    IPC::Decoder::~Decoder(v5);
    WTF::fastFree(v6, v7);
  }
  return a1;
}

uint64_t std::__variant_detail::__base<(std::__variant_detail::_Trait)1,IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>::__base[abi:sn180100]<0ul,IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_BYTE *)(a1 + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(v4, (uint64_t)(a2 + 1));
    *(_BYTE *)(a1 + 72) = 1;
  }
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteImageBuffer::GetShareableBitmap>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 80);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3548[v4])(&v7, result);
  *(_DWORD *)(v3 + 80) = -1;
  v5 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3558[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 80) = v5;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer18GetShareableBitmapEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)(a2 + 1));
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100](a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer18GetShareableBitmapEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*((_BYTE *)a3 + 72))
  {
    WebCore::ShareableBitmapHandle::ShareableBitmapHandle(a2 + 8, (uint64_t)(a3 + 1));
    *(_BYTE *)(a2 + 72) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages17RemoteImageBuffer18GetShareableBitmapEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheNativeImage,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  unsigned int *v45;
  uint64_t *v46;
  IPC::Encoder *v47;
  _BYTE buf[22];
  __int16 v49;
  const char *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v45);
  v7 = v45;
  if (!v45)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) == a3)
  {
LABEL_3:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
    if (buf[16])
    {
      v10 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - *(_QWORD *)buf;
      if (v10 < *(_QWORD *)buf
        || ((v12 = v11 + 2, v11 <= 0xFFFFFFFFFFFFFFFDLL) ? (v13 = v12 > *(_QWORD *)&buf[8]) : (v13 = 1), v13))
      {
        v12 = 0;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)buf + v11) = 2821;
      }
      v14 = *((_QWORD *)v7 + 8);
      v15 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v16 = *((_QWORD *)v7 + 7);
      if (v15 + 16 >= v16)
        v15 = 0;
      if (v12 <= 0x10)
        v12 = 16;
      v17 = v15 + v12;
      if (v16 <= v17)
        v17 = 0;
      *((_QWORD *)v7 + 9) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
      do
        __ldaxr(v18);
      while (__stlxr(v17, v18));
      v7[27] = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v46, (uint64_t **)v7 + 1);
      v19 = v46;
      v20 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v20 = 1302;
      *(_QWORD *)(v20 + 8) = a3;
      *(_QWORD *)(v20 + 528) = v20 + 16;
      *(_QWORD *)(v20 + 536) = v20 + 16;
      *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v20 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
      v47 = (IPC::Encoder *)v20;
      IPC::ArgumentCoder<WebCore::ShareableBitmapHandle,void>::encode((IPC::Encoder *)v20, *(_QWORD *)a2);
      IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v20, *(uint64_t **)(a2 + 8));
      v22 = IPC::Connection::sendMessageImpl((uint64_t)v19, (uint64_t *)&v47, 1, 0);
      v23 = v47;
      v47 = 0;
      if (v23)
      {
        IPC::Encoder::~Encoder(v23, v21);
        WTF::fastFree(v24, v25);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v46);
      if (!(_DWORD)v22)
        goto LABEL_21;
      goto LABEL_50;
    }
    goto LABEL_49;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
  if (buf[16])
  {
    v30 = *(_QWORD *)buf;
    v29 = *(_QWORD *)&buf[8];
    v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = v31 - *(_QWORD *)buf;
    if (v31 >= *(_QWORD *)buf)
    {
      v33 = v32 + 2;
      if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v33 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v32) = 2822;
        goto LABEL_33;
      }
      v29 = 0;
    }
    v33 = 0;
LABEL_33:
    v35 = (_QWORD *)((v30 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v35 >= v30 + v33)
    {
      v33 = (unint64_t)v35 - v30 + 8;
      if ((unint64_t)v35 - v30 > 0xFFFFFFFFFFFFFFF7 || v33 > v29)
        goto LABEL_57;
      *v35 = a3;
    }
    if (v29)
    {
      v37 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = *((_QWORD *)v7 + 7);
      if (v37 + 16 >= v38)
        v37 = 0;
      if (v33 <= 0x10)
        v33 = 16;
      v39 = v37 + v33;
      if (v38 <= v39)
        v39 = 0;
      *((_QWORD *)v7 + 9) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      IPC::StreamClientConnection::wakeUpServerBatched((uint64_t)v7, v41 == 0x80000000);
      *((_QWORD *)v7 + 6) = a3;
      goto LABEL_3;
    }
LABEL_57:
    v22 = 17;
    goto LABEL_50;
  }
LABEL_49:
  v22 = 15;
LABEL_50:
  v42 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v43 = *((_QWORD *)a1 + 7);
    v44 = IPC::errorAsString(v22);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v43;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "RemoteRenderingBackend_CacheNativeImage";
    v49 = 2082;
    v50 = v44;
    _os_log_impl(&dword_196BCC000, v42, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
LABEL_21:
  v45 = 0;
  do
  {
    v26 = __ldaxr(v7);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v7));
  if (!v27)
  {
    atomic_store(1u, v7);
    *(_QWORD *)buf = v7;
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
  }
  return v22;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheFont,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v44;
  NSObject *v45;
  uint64_t v46;
  const char *v47;
  unsigned int *v48;
  uint64_t *v49;
  IPC::Encoder *v50;
  _BYTE buf[22];
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v48);
  v7 = v48;
  if (!v48)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) == a3)
  {
LABEL_3:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
    if (buf[16])
    {
      v10 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - *(_QWORD *)buf;
      if (v10 < *(_QWORD *)buf
        || ((v12 = v11 + 2, v11 <= 0xFFFFFFFFFFFFFFFDLL) ? (v13 = v12 > *(_QWORD *)&buf[8]) : (v13 = 1), v13))
      {
        v12 = 0;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)buf + v11) = 2821;
      }
      v14 = *((_QWORD *)v7 + 8);
      v15 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v16 = *((_QWORD *)v7 + 7);
      if (v15 + 16 >= v16)
        v15 = 0;
      if (v12 <= 0x10)
        v12 = 16;
      v17 = v15 + v12;
      if (v16 <= v17)
        v17 = 0;
      *((_QWORD *)v7 + 9) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
      do
        __ldaxr(v18);
      while (__stlxr(v17, v18));
      v7[27] = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)v7 + 1);
      v19 = v49;
      v20 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v20 = 1299;
      *(_QWORD *)(v20 + 8) = a3;
      *(_QWORD *)(v20 + 528) = v20 + 16;
      *(_QWORD *)(v20 + 536) = v20 + 16;
      *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v20 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
      v50 = (IPC::Encoder *)v20;
      IPC::ArgumentCoder<WebCore::FontInternalAttributes,void>::encode((IPC::Encoder *)v20, *(uint64_t **)a2);
      IPC::ArgumentCoder<WebCore::FontPlatformDataAttributes,void>::encode((IPC::Encoder *)v20, *(int **)(a2 + 8));
      IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>((IPC::Encoder *)v20, *(uint64_t **)(a2 + 16));
      v22 = IPC::Connection::sendMessageImpl((uint64_t)v19, (uint64_t *)&v50, 1, 0);
      v23 = v50;
      v50 = 0;
      if (v23)
      {
        IPC::Encoder::~Encoder(v23, v21);
        WTF::fastFree(v24, v25);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v49);
      if (!(_DWORD)v22)
        goto LABEL_21;
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
  if (buf[16])
  {
    v30 = *(_QWORD *)buf;
    v29 = *(_QWORD *)&buf[8];
    v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = v31 - *(_QWORD *)buf;
    if (v31 >= *(_QWORD *)buf)
    {
      v33 = v32 + 2;
      if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v33 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v32) = 2822;
        goto LABEL_33;
      }
      v29 = 0;
    }
    v33 = 0;
LABEL_33:
    v35 = (_QWORD *)((v30 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v35 >= v30 + v33)
    {
      v33 = (unint64_t)v35 - v30 + 8;
      if ((unint64_t)v35 - v30 > 0xFFFFFFFFFFFFFFF7 || v33 > v29)
        goto LABEL_66;
      *v35 = a3;
    }
    if (v29)
    {
      v37 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = *((_QWORD *)v7 + 7);
      if (v37 + 16 >= v38)
        v37 = 0;
      if (v33 <= 0x10)
        v33 = 16;
      v39 = v37 + v33;
      if (v38 <= v39)
        v39 = 0;
      *((_QWORD *)v7 + 9) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      v42 = v7[27];
      if (v41 == 0x80000000 || v42 != 0)
      {
        v44 = v42 + 1;
        v7[27] = v44;
        if (v44 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
      goto LABEL_3;
    }
LABEL_66:
    v22 = 17;
    goto LABEL_60;
  }
LABEL_59:
  v22 = 15;
LABEL_60:
  v45 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v46 = *((_QWORD *)a1 + 7);
    v47 = IPC::errorAsString(v22);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "RemoteRenderingBackend_CacheFont";
    v52 = 2082;
    v53 = v47;
    _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
LABEL_21:
  v48 = 0;
  do
  {
    v26 = __ldaxr(v7);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v7));
  if (!v27)
  {
    atomic_store(1u, v7);
    *(_QWORD *)buf = v7;
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
  }
  return v22;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheDecomposedGlyphs,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  NSObject *v56;
  uint64_t v57;
  const char *v58;
  WTF *v59;
  void *v60;
  unsigned int *v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  _BYTE buf[24];
  const char *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v61);
  v7 = v61;
  if (!v61)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_85;
    v27 = *(_QWORD *)buf;
    v26 = *(_QWORD *)&buf[8];
    v28 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v28 - *(_QWORD *)buf;
    if (v28 >= *(_QWORD *)buf)
    {
      v30 = v29 + 2;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v30 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v29) = 2822;
        goto LABEL_39;
      }
      v26 = 0;
    }
    v30 = 0;
LABEL_39:
    v32 = (_QWORD *)((v27 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v32 >= v27 + v30)
    {
      v30 = (unint64_t)v32 - v27 + 8;
      if ((unint64_t)v32 - v27 > 0xFFFFFFFFFFFFFFF7 || v30 > v26)
        goto LABEL_86;
      *v32 = a3;
    }
    if (v26)
    {
      v34 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v35 = *((_QWORD *)v7 + 7);
      if (v34 + 16 >= v35)
        v34 = 0;
      if (v30 <= 0x10)
        v30 = 16;
      v36 = v34 + v30;
      if (v35 <= v36)
        v36 = 0;
      *((_QWORD *)v7 + 9) = v36;
      v37 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v36, v37));
      v39 = v7[27];
      if (v38 == 0x80000000 || v39 != 0)
      {
        v41 = v39 + 1;
        v7[27] = v41;
        if (v41 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
      goto LABEL_3;
    }
LABEL_86:
    v22 = 17;
    goto LABEL_80;
  }
LABEL_3:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), &v63, v9);
  if (!v65)
  {
LABEL_85:
    v22 = 15;
LABEL_80:
    v56 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v57 = *((_QWORD *)a1 + 7);
      v58 = IPC::errorAsString(v22);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v57;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "RemoteRenderingBackend_CacheDecomposedGlyphs";
      *(_WORD *)&buf[22] = 2082;
      v67 = v58;
      _os_log_impl(&dword_196BCC000, v56, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_24;
  }
  *(_QWORD *)buf = v63;
  *(_QWORD *)&buf[8] = v64;
  *(_QWORD *)&buf[16] = 0;
  v10 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 >= v63;
  v12 = v10 - v63;
  if (v11)
  {
    if (v12 > 0xFFFFFFFFFFFFFFFDLL || v12 + 2 > v64)
    {
      *(_QWORD *)&buf[8] = 0;
    }
    else
    {
      *(_WORD *)(v63 + v12) = 1297;
      *(_QWORD *)&buf[16] = v12 + 2;
    }
  }
  IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode((uint64_t *)buf, **a2);
  if (!*(_QWORD *)&buf[8])
  {
    if (v65)
    {
      v42 = (v63 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v43 = v42 - v63;
      if (v42 >= v63)
      {
        v44 = 0;
        if (v43 <= 0xFFFFFFFFFFFFFFFDLL && v43 + 2 <= v64)
        {
          *(_WORD *)(v63 + v43) = 2821;
          v44 = v43 + 2;
        }
LABEL_69:
        v45 = *((_QWORD *)v7 + 8);
        v46 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v47 = *((_QWORD *)v7 + 7);
        if (v46 + 16 >= v47)
          v46 = 0;
        if (v44 <= 0x10)
          v44 = 16;
        v48 = v46 + v44;
        if (v47 <= v48)
          v48 = 0;
        *((_QWORD *)v7 + 9) = v48;
        v49 = (unint64_t *)(*(_QWORD *)(v45 + 16) + 128);
        do
          __ldaxr(v49);
        while (__stlxr(v48, v49));
        v7[27] = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)v7 + 1);
        v50 = v62;
        v51 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v51 = 1297;
        *(_QWORD *)(v51 + 8) = a3;
        *(_QWORD *)(v51 + 528) = v51 + 16;
        *(_QWORD *)(v51 + 536) = v51 + 16;
        *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v51 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
        *(_QWORD *)buf = v51;
        IPC::ArgumentCoder<WebCore::DecomposedGlyphs,void>::encode((IPC::Encoder *)v51, **a2);
        v22 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)buf, 1, 0);
        v53 = *(IPC::Encoder **)buf;
        *(_QWORD *)buf = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v62);
        if (!(_DWORD)v22)
          goto LABEL_24;
        goto LABEL_80;
      }
    }
    else
    {
      __break(1u);
    }
    v44 = 0;
    goto LABEL_69;
  }
  v14 = *(_QWORD *)&buf[16];
  v15 = *((_QWORD *)v7 + 8);
  v16 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = *((_QWORD *)v7 + 7);
  if (v16 + 16 >= v17)
    v16 = 0;
  if (*(_QWORD *)&buf[16] <= 0x10uLL)
    v14 = 16;
  v18 = v16 + v14;
  if (v17 <= v18)
    v19 = 0;
  else
    v19 = v18;
  *((_QWORD *)v7 + 9) = v19;
  v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v19, v20));
  if (v21 == 0x80000000 || v7[27])
  {
    if (*((_BYTE *)v7 + 96))
      MEMORY[0x19AEBA1A0](v7[21]);
    v7[27] = 0;
  }
  v22 = 0;
LABEL_24:
  v61 = 0;
  do
  {
    v23 = __ldaxr(v7);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v7));
  if (!v24)
  {
    atomic_store(1u, v7);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7);
    WTF::fastFree(v59, v60);
  }
  return v22;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheGradient,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  IPC::Encoder *v23;
  WTF *v24;
  void *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v44;
  NSObject *v45;
  uint64_t v46;
  const char *v47;
  unsigned int *v48;
  uint64_t *v49;
  IPC::Encoder *v50;
  _BYTE buf[22];
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v48);
  v7 = v48;
  if (!v48)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) == a3)
  {
LABEL_3:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
    if (buf[16])
    {
      v10 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - *(_QWORD *)buf;
      if (v10 < *(_QWORD *)buf
        || ((v12 = v11 + 2, v11 <= 0xFFFFFFFFFFFFFFFDLL) ? (v13 = v12 > *(_QWORD *)&buf[8]) : (v13 = 1), v13))
      {
        v12 = 0;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)buf + v11) = 2821;
      }
      v14 = *((_QWORD *)v7 + 8);
      v15 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v16 = *((_QWORD *)v7 + 7);
      if (v15 + 16 >= v16)
        v15 = 0;
      if (v12 <= 0x10)
        v12 = 16;
      v17 = v15 + v12;
      if (v16 <= v17)
        v17 = 0;
      *((_QWORD *)v7 + 9) = v17;
      v18 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
      do
        __ldaxr(v18);
      while (__stlxr(v17, v18));
      v7[27] = 0;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)v7 + 1);
      v19 = v49;
      v20 = WTF::fastMalloc((WTF *)0x240);
      *(_WORD *)v20 = 1301;
      *(_QWORD *)(v20 + 8) = a3;
      *(_QWORD *)(v20 + 528) = v20 + 16;
      *(_QWORD *)(v20 + 536) = v20 + 16;
      *(_OWORD *)(v20 + 544) = xmmword_1978CE2D0;
      *(_OWORD *)(v20 + 560) = 0u;
      IPC::Encoder::encodeHeader((IPC::Encoder *)v20);
      v50 = (IPC::Encoder *)v20;
      IPC::ArgumentCoder<WebCore::Gradient,void>::encode((IPC::Encoder *)v20, **a2);
      v22 = IPC::Connection::sendMessageImpl((uint64_t)v19, (uint64_t *)&v50, 1, 0);
      v23 = v50;
      v50 = 0;
      if (v23)
      {
        IPC::Encoder::~Encoder(v23, v21);
        WTF::fastFree(v24, v25);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v49);
      if (!(_DWORD)v22)
        goto LABEL_21;
      goto LABEL_61;
    }
    goto LABEL_60;
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
  if (buf[16])
  {
    v30 = *(_QWORD *)buf;
    v29 = *(_QWORD *)&buf[8];
    v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = v31 - *(_QWORD *)buf;
    if (v31 >= *(_QWORD *)buf)
    {
      v33 = v32 + 2;
      if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v33 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v32) = 2822;
        goto LABEL_33;
      }
      v29 = 0;
    }
    v33 = 0;
LABEL_33:
    v35 = (_QWORD *)((v30 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v35 >= v30 + v33)
    {
      v33 = (unint64_t)v35 - v30 + 8;
      if ((unint64_t)v35 - v30 > 0xFFFFFFFFFFFFFFF7 || v33 > v29)
        goto LABEL_66;
      *v35 = a3;
    }
    if (v29)
    {
      v37 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = *((_QWORD *)v7 + 7);
      if (v37 + 16 >= v38)
        v37 = 0;
      if (v33 <= 0x10)
        v33 = 16;
      v39 = v37 + v33;
      if (v38 <= v39)
        v39 = 0;
      *((_QWORD *)v7 + 9) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      v42 = v7[27];
      if (v41 == 0x80000000 || v42 != 0)
      {
        v44 = v42 + 1;
        v7[27] = v44;
        if (v44 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
      goto LABEL_3;
    }
LABEL_66:
    v22 = 17;
    goto LABEL_61;
  }
LABEL_60:
  v22 = 15;
LABEL_61:
  v45 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v46 = *((_QWORD *)a1 + 7);
    v47 = IPC::errorAsString(v22);
    *(_DWORD *)buf = 134218498;
    *(_QWORD *)&buf[4] = v46;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "RemoteRenderingBackend_CacheGradient";
    v52 = 2082;
    v53 = v47;
    _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
LABEL_21:
  v48 = 0;
  do
  {
    v26 = __ldaxr(v7);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v7));
  if (!v27)
  {
    atomic_store(1u, v7);
    *(_QWORD *)buf = v7;
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
  }
  return v22;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  unsigned int *v16;
  _BYTE buf[12];
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v16);
  v7 = v16;
  if (!v16)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v7, a2, a3, v8 + 15.0);
  if ((_DWORD)v9)
  {
    v13 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *((_QWORD *)a1 + 7);
      v15 = IPC::errorAsString(v9);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v14;
      v18 = 2082;
      v19 = "RemoteRenderingBackend_CacheFilter";
      v20 = 2082;
      v21 = v15;
      _os_log_impl(&dword_196BCC000, v13, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
  }
  v16 = 0;
  do
  {
    v10 = __ldaxr(v7);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v7));
  if (!v11)
  {
    atomic_store(1u, v7);
    *(_QWORD *)buf = v7;
    WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
  }
  return v9;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::CacheFilter,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v11;
  unint64_t v12[2];
  char v13;

  v8 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded(a1, a3, a4);
  if ((_DWORD)v8)
    return v8;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, v12, a4);
  if (!v13)
    return 15;
  IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v12[0], v12[1]);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, (uint64_t **)(a1 + 8));
  v9 = IPC::Connection::send<Messages::RemoteRenderingBackend::CacheFilter>((uint64_t)v11, a2, a3);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v11);
  return v9;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::CacheFilter>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1298;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<WebCore::Filter,void>::encode((char *)v6, **a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2)
{
  WTF::ApproximateTime *result;
  unsigned int *v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  unsigned int *v13;
  _BYTE buf[12];
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = WebKit::RemoteRenderingBackendProxy::connection(a1, &v13);
  v5 = v13;
  if (v13)
  {
    WTF::ApproximateTime::now(result);
    result = (WTF::ApproximateTime *)IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>((uint64_t)v5, a2, v6 + 15.0);
    if ((_DWORD)result)
    {
      v9 = (int)result;
      v10 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *((_QWORD *)a1 + 7);
        v12 = IPC::errorAsString(v9);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v11;
        v15 = 2082;
        v16 = "RemoteRenderingBackend_ReleaseAllDrawingResources";
        v17 = 2082;
        v18 = v12;
        _os_log_impl(&dword_196BCC000, v10, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    }
    v13 = 0;
    do
    {
      v7 = __ldaxr(v5);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v5));
    if (!v8)
    {
      atomic_store(1u, v5);
      *(_QWORD *)buf = v5;
      return WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
    }
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v6 = IPC::StreamClientConnection::trySendDestinationIDIfNeeded(a1, a2, a3);
  if ((_DWORD)v6)
    return v6;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v10, a3);
  if (!v12)
    return 15;
  result = IPC::StreamClientConnection::trySendStream<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources>(a1, v10, v11);
  if ((result & 1) != 0)
    return 0;
  if (v12)
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage(a1, v10, v11);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v9, (uint64_t **)(a1 + 8));
    v8 = IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources>((uint64_t)v9, a2);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v9);
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t IPC::StreamClientConnection::trySendStream<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  v4 = (a2 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v5 = v4 - a2;
  if (v4 < a2)
  {
    v6 = 0;
  }
  else
  {
    v6 = v5 + 2;
    if (v5 > 0xFFFFFFFFFFFFFFFDLL || v6 > a3)
      return 0;
    *(_WORD *)(a2 + v5) = 1316;
  }
  if (!a3)
    return 0;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(_QWORD *)(a1 + 56);
  if (v9 + 16 >= v10)
    v9 = 0;
  if (v6 <= 0x10)
    v6 = 16;
  v11 = v9 + v6;
  if (v10 <= v11)
    v12 = 0;
  else
    v12 = v11;
  *(_QWORD *)(a1 + 72) = v12;
  v13 = (unint64_t *)(*(_QWORD *)(v8 + 16) + 128);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v12, v13));
  if (v14 == 0x80000000 || *(_DWORD *)(a1 + 108))
  {
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    *(_DWORD *)(a1 + 108) = 0;
  }
  return 1;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::ReleaseAllDrawingResources>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  IPC::Encoder *v7;
  WTF *v8;
  void *v9;
  IPC::Encoder *v11;

  v4 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v4 = 1316;
  *(_QWORD *)(v4 + 8) = a2;
  *(_QWORD *)(v4 + 528) = v4 + 16;
  *(_QWORD *)(v4 + 536) = v4 + 16;
  *(_OWORD *)(v4 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v4 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v4);
  v11 = (IPC::Encoder *)v4;
  v6 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 1, 0);
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    IPC::Encoder::~Encoder(v7, v5);
    WTF::fastFree(v8, v9);
  }
  return v6;
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseRenderingResource,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *result;
  unsigned int *v7;
  double v8;
  double v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v42;
  WTF *v43;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  void *v55;
  int v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  NSObject *v60;
  uint64_t v61;
  const char *v62;
  unsigned int *v63;
  uint64_t *v64;
  IPC::Encoder *v65;
  _BYTE buf[22];
  __int16 v67;
  const char *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  result = WebKit::RemoteRenderingBackendProxy::connection(a1, &v63);
  v7 = v63;
  if (v63)
  {
    WTF::ApproximateTime::now(result);
    v9 = v8 + 15.0;
    if (*((_QWORD *)v7 + 6) == a3)
      goto LABEL_3;
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
    if (!buf[16])
    {
LABEL_89:
      v56 = 15;
LABEL_84:
      v60 = qword_1ECE716E0;
      if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      {
        v61 = *((_QWORD *)a1 + 7);
        v62 = IPC::errorAsString(v56);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v61;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = "RemoteRenderingBackend_ReleaseRenderingResource";
        v67 = 2082;
        v68 = v62;
        _os_log_impl(&dword_196BCC000, v60, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      }
      result = (WTF::ApproximateTime *)WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
      goto LABEL_28;
    }
    v28 = *(_QWORD *)buf;
    v27 = *(_QWORD *)&buf[8];
    v29 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v30 = v29 - *(_QWORD *)buf;
    if (v29 >= *(_QWORD *)buf)
    {
      v31 = v30 + 2;
      if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v31 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v30) = 2822;
        goto LABEL_43;
      }
      v27 = 0;
    }
    v31 = 0;
LABEL_43:
    v33 = (_QWORD *)((v28 + v31 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v33 >= v28 + v31)
    {
      v31 = (unint64_t)v33 - v28 + 8;
      if ((unint64_t)v33 - v28 > 0xFFFFFFFFFFFFFFF7 || v31 > v27)
        goto LABEL_90;
      *v33 = a3;
    }
    if (v27)
    {
      v35 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v36 = *((_QWORD *)v7 + 7);
      if (v35 + 16 >= v36)
        v35 = 0;
      if (v31 <= 0x10)
        v31 = 16;
      v37 = v35 + v31;
      if (v36 <= v37)
        v37 = 0;
      *((_QWORD *)v7 + 9) = v37;
      v38 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v37, v38));
      v40 = v7[27];
      if (v39 == 0x80000000 || v40 != 0)
      {
        v42 = v40 + 1;
        v7[27] = v42;
        if (v42 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
LABEL_3:
      result = (WTF::ApproximateTime *)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
      if (buf[16])
      {
        v11 = *(_QWORD *)buf;
        v10 = *(_QWORD *)&buf[8];
        v12 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v13 = v12 - *(_QWORD *)buf;
        if (v12 >= *(_QWORD *)buf)
        {
          v14 = v13 + 2;
          if (v13 <= 0xFFFFFFFFFFFFFFFDLL && v14 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v13) = 1323;
            goto LABEL_10;
          }
          v10 = 0;
        }
        v14 = 0;
LABEL_10:
        v16 = (_QWORD *)((v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v16 >= v11 + v14)
        {
          v14 = (unint64_t)v16 - v11 + 8;
          if ((unint64_t)v16 - v11 > 0xFFFFFFFFFFFFFFF7 || v14 > v10)
            goto LABEL_68;
          *v16 = **a2;
        }
        if (v10)
        {
          v18 = *((_QWORD *)v7 + 8);
          v19 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v20 = *((_QWORD *)v7 + 7);
          if (v19 + 16 >= v20)
            v19 = 0;
          if (v14 <= 0x10)
            v14 = 16;
          v21 = v19 + v14;
          if (v20 <= v21)
            v22 = 0;
          else
            v22 = v21;
          *((_QWORD *)v7 + 9) = v22;
          v23 = (unint64_t *)(*(_QWORD *)(v18 + 16) + 128);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v22, v23));
          if (v24 == 0x80000000 || v7[27])
          {
            if (*((_BYTE *)v7 + 96))
              result = (WTF::ApproximateTime *)MEMORY[0x19AEBA1A0](v7[21]);
            v7[27] = 0;
          }
LABEL_28:
          v63 = 0;
          do
          {
            v25 = __ldaxr(v7);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v7));
          if (!v26)
          {
            atomic_store(1u, v7);
            IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v7);
            return (WTF::ApproximateTime *)WTF::fastFree(v43, v44);
          }
          return result;
        }
LABEL_68:
        if (buf[16])
        {
          v45 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
          v46 = v45 - *(_QWORD *)buf;
          if (v45 >= *(_QWORD *)buf)
          {
            v47 = 0;
            if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= *(_QWORD *)&buf[8])
            {
              *(_WORD *)(*(_QWORD *)buf + v46) = 2821;
              v47 = v46 + 2;
            }
LABEL_73:
            v48 = *((_QWORD *)v7 + 8);
            v49 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
            v50 = *((_QWORD *)v7 + 7);
            if (v49 + 16 >= v50)
              v49 = 0;
            if (v47 <= 0x10)
              v47 = 16;
            v51 = v49 + v47;
            if (v50 <= v51)
              v51 = 0;
            *((_QWORD *)v7 + 9) = v51;
            v52 = (unint64_t *)(*(_QWORD *)(v48 + 16) + 128);
            do
              __ldaxr(v52);
            while (__stlxr(v51, v52));
            v7[27] = 0;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v64, (uint64_t **)v7 + 1);
            v53 = v64;
            v54 = WTF::fastMalloc((WTF *)0x240);
            *(_WORD *)v54 = 1323;
            *(_QWORD *)(v54 + 8) = a3;
            *(_QWORD *)(v54 + 528) = v54 + 16;
            *(_QWORD *)(v54 + 536) = v54 + 16;
            *(_OWORD *)(v54 + 544) = xmmword_1978CE2D0;
            *(_OWORD *)(v54 + 560) = 0u;
            IPC::Encoder::encodeHeader((IPC::Encoder *)v54);
            v65 = (IPC::Encoder *)v54;
            IPC::ArgumentCoder<WebKit::CallbackID,void>::encode((IPC::Encoder *)v54, *a2);
            v56 = IPC::Connection::sendMessageImpl((uint64_t)v53, (uint64_t *)&v65, 1, 0);
            v57 = v65;
            v65 = 0;
            if (v57)
            {
              IPC::Encoder::~Encoder(v57, v55);
              WTF::fastFree(v58, v59);
            }
            result = (WTF::ApproximateTime *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v64);
            if (!v56)
              goto LABEL_28;
            goto LABEL_84;
          }
        }
        else
        {
          __break(1u);
        }
        v47 = 0;
        goto LABEL_73;
      }
      goto LABEL_89;
    }
LABEL_90:
    v56 = 17;
    goto LABEL_84;
  }
  return result;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::ReleaseAllImageResources,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t a3)
{
  WTF::ApproximateTime *v5;
  unsigned int *v6;
  double v7;
  double v8;
  unint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unsigned int v36;
  NSObject *v38;
  uint64_t v39;
  const char *v40;
  unsigned int v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  WTF *v59;
  void *v60;
  unsigned int *v61;
  uint64_t *v62;
  IPC::Encoder *v63;
  _BYTE buf[22];
  __int16 v65;
  const char *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v61);
  v6 = v61;
  if (!v61)
    return 1;
  WTF::ApproximateTime::now(v5);
  v8 = v7 + 15.0;
  if (*((_QWORD *)v6 + 6) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v7 + 15.0);
    if (!buf[16])
      goto LABEL_53;
    v24 = *(_QWORD *)buf;
    v23 = *(_QWORD *)&buf[8];
    v25 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v26 = v25 - *(_QWORD *)buf;
    if (v25 >= *(_QWORD *)buf)
    {
      v27 = v26 + 2;
      if (v26 <= 0xFFFFFFFFFFFFFFFDLL && v27 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v26) = 2822;
        goto LABEL_32;
      }
      v23 = 0;
    }
    v27 = 0;
LABEL_32:
    v29 = (_QWORD *)((v24 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v29 >= v24 + v27)
    {
      v27 = (unint64_t)v29 - v24 + 8;
      if ((unint64_t)v29 - v24 > 0xFFFFFFFFFFFFFFF7 || v27 > v23)
        goto LABEL_64;
      *v29 = a3;
    }
    if (v23)
    {
      v31 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v32 = *((_QWORD *)v6 + 7);
      if (v31 + 16 >= v32)
        v31 = 0;
      if (v27 <= 0x10)
        v27 = 16;
      v33 = v31 + v27;
      if (v32 <= v33)
        v33 = 0;
      *((_QWORD *)v6 + 9) = v33;
      v34 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v6 + 8) + 16) + 128);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v33, v34));
      v36 = v6[27];
      if (v35 == 0x80000000 || v36 != 0)
      {
        v41 = v36 + 1;
        v6[27] = v41;
        if (v41 >= v6[26])
        {
          if (*((_BYTE *)v6 + 96))
            MEMORY[0x19AEBA1A0](v6[21]);
          v6[27] = 0;
        }
      }
      *((_QWORD *)v6 + 6) = a3;
      goto LABEL_3;
    }
LABEL_64:
    v22 = 17;
    goto LABEL_54;
  }
LABEL_3:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v6 + 14), buf, v8);
  if (!buf[16])
  {
LABEL_53:
    v22 = 15;
LABEL_54:
    v38 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v39 = *((_QWORD *)a1 + 7);
      v40 = IPC::errorAsString(v22);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v39;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "RemoteRenderingBackend_ReleaseAllImageResources";
      v65 = 2082;
      v66 = v40;
      _os_log_impl(&dword_196BCC000, v38, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_84;
  }
  v9 = *(_QWORD *)buf;
  v10 = *(_QWORD *)&buf[8];
  v11 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
  v12 = (unint64_t)v11 - *(_QWORD *)buf;
  if ((unint64_t)v11 < *(_QWORD *)buf)
  {
    v13 = 0;
    if (*(_QWORD *)&buf[8])
      goto LABEL_10;
    goto LABEL_66;
  }
  v13 = v12 + 2;
  if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > *(_QWORD *)&buf[8])
    goto LABEL_68;
  *v11 = 1317;
  if (!v10)
  {
LABEL_66:
    if (!buf[16])
      __break(1u);
    v9 = *(_QWORD *)buf;
    v11 = (_WORD *)((*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL);
LABEL_68:
    v42 = 0;
    v43 = (unint64_t)v11 >= v9;
    v44 = (unint64_t)v11 - v9;
    if (v43 && v44 <= 0xFFFFFFFFFFFFFFFDLL && v44 + 2 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(v9 + v44) = 2821;
      v42 = v44 + 2;
    }
    v45 = *((_QWORD *)v6 + 8);
    v46 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = *((_QWORD *)v6 + 7);
    if (v46 + 16 >= v47)
      v46 = 0;
    if (v42 <= 0x10)
      v42 = 16;
    v48 = v46 + v42;
    if (v47 <= v48)
      v48 = 0;
    *((_QWORD *)v6 + 9) = v48;
    v49 = (unint64_t *)(*(_QWORD *)(v45 + 16) + 128);
    do
      __ldaxr(v49);
    while (__stlxr(v48, v49));
    v6[27] = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v62, (uint64_t **)v6 + 1);
    v50 = v62;
    v51 = WTF::fastMalloc((WTF *)0x240);
    *(_WORD *)v51 = 1317;
    *(_QWORD *)(v51 + 8) = a3;
    *(_QWORD *)(v51 + 528) = v51 + 16;
    *(_QWORD *)(v51 + 536) = v51 + 16;
    *(_OWORD *)(v51 + 544) = xmmword_1978CE2D0;
    *(_OWORD *)(v51 + 560) = 0u;
    IPC::Encoder::encodeHeader((IPC::Encoder *)v51);
    v63 = (IPC::Encoder *)v51;
    v22 = IPC::Connection::sendMessageImpl((uint64_t)v50, (uint64_t *)&v63, 1, 0);
    v53 = v63;
    v63 = 0;
    if (v53)
    {
      IPC::Encoder::~Encoder(v53, v52);
      WTF::fastFree(v54, v55);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v62);
    if (!(_DWORD)v22)
      goto LABEL_84;
    goto LABEL_54;
  }
LABEL_10:
  v15 = *((_QWORD *)v6 + 8);
  v16 = (*((_QWORD *)v6 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v17 = *((_QWORD *)v6 + 7);
  if (v16 + 16 >= v17)
    v16 = 0;
  if (v13 <= 0x10)
    v13 = 16;
  v18 = v16 + v13;
  if (v17 <= v18)
    v19 = 0;
  else
    v19 = v18;
  *((_QWORD *)v6 + 9) = v19;
  v20 = (unint64_t *)(*(_QWORD *)(v15 + 16) + 128);
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v19, v20));
  if (v21 == 0x80000000 || v6[27])
  {
    if (*((_BYTE *)v6 + 96))
      MEMORY[0x19AEBA1A0](v6[21]);
    v6[27] = 0;
  }
  v22 = 0;
LABEL_84:
  v61 = 0;
  do
  {
    v56 = __ldaxr(v6);
    v57 = v56 - 1;
  }
  while (__stlxr(v57, v6));
  if (!v57)
  {
    atomic_store(1u, v6);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v6);
    WTF::fastFree(v59, v60);
  }
  return v22;
}

WTF::ApproximateTime *WebKit::RemoteRenderingBackendProxy::sendSync<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, WebKit::RemoteRenderingBackendProxy *this, uint64_t *a3, uint64_t a4)
{
  WTF::ApproximateTime *result;
  unsigned int *v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t *v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t *v40;
  int v41;
  void *v42;
  uint64_t *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v56;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v66;
  WTF *v67;
  void *v68;
  NSObject *v69;
  uint64_t v70;
  const char *v71;
  char v72;
  unsigned int *v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t *v77;
  int v78;
  char v79;
  unint64_t v80;
  uint64_t *v81;
  unint64_t v82;
  int v83;
  IPC::Decoder *v84;
  uint64_t *v85;
  unint64_t v86;
  char v87;
  IPC::Decoder *v88;
  _BYTE buf[22];
  __int16 v90;
  const char *v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  result = WebKit::RemoteRenderingBackendProxy::connection(this, &v73);
  v9 = v73;
  if (!v73)
  {
    *(_BYTE *)a1 = 1;
    *(_DWORD *)(a1 + 24) = 1;
    return result;
  }
  WTF::ApproximateTime::now(result);
  v11 = v10 + 15.0;
  if (*((_QWORD *)v9 + 6) == a4)
    goto LABEL_3;
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), buf, v10 + 15.0);
  if (!buf[16])
  {
LABEL_135:
    v72 = 15;
LABEL_132:
    LOBYTE(v80) = v72;
    v83 = 1;
    v69 = qword_1ECE716E0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
      goto LABEL_125;
    goto LABEL_124;
  }
  v51 = *(_QWORD *)buf;
  v50 = *(_QWORD *)&buf[8];
  v52 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - *(_QWORD *)buf;
  if (v52 >= *(_QWORD *)buf)
  {
    v54 = v53 + 2;
    if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v54 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v53) = 2822;
      goto LABEL_97;
    }
    v50 = 0;
  }
  v54 = 0;
LABEL_97:
  v56 = (_QWORD *)((v51 + v54 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v56 >= v51 + v54)
  {
    v54 = (unint64_t)v56 - v51 + 8;
    if ((unint64_t)v56 - v51 > 0xFFFFFFFFFFFFFFF7 || v54 > v50)
      goto LABEL_131;
    *v56 = a4;
  }
  if (!v50)
  {
LABEL_131:
    v72 = 17;
    goto LABEL_132;
  }
  v58 = *((_QWORD *)v9 + 8);
  v59 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v60 = *((_QWORD *)v9 + 7);
  if (v59 + 16 >= v60)
    v59 = 0;
  if (v54 <= 0x10)
    v54 = 16;
  v61 = v59 + v54;
  if (v60 <= v61)
    v61 = 0;
  *((_QWORD *)v9 + 9) = v61;
  v62 = (unint64_t *)(*(_QWORD *)(v58 + 16) + 128);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v61, v62));
  v64 = v9[27];
  if (v63 == 0x80000000 || v64 != 0)
  {
    v66 = v64 + 1;
    v9[27] = v66;
    if (v66 >= v9[26])
    {
      if (*((_BYTE *)v9 + 96))
        MEMORY[0x19AEBA1A0](v9[21]);
      v9[27] = 0;
    }
  }
  *((_QWORD *)v9 + 6) = a4;
LABEL_3:
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v9 + 14), &v74, v11);
  if (!v76)
  {
    LOBYTE(v80) = 15;
    v83 = 1;
    goto LABEL_82;
  }
  v13 = v74;
  v12 = v75;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v84, (uint64_t **)v9 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v84, v14))
  {
    LOBYTE(v80) = 11;
    v83 = 1;
    buf[0] = 0;
    LODWORD(v91) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v80);
    v92 = 1;
    if (v83 != -1)
      ((void (*)(uint64_t **, unint64_t *))off_1E34E3568[v83])(&v85, &v80);
    goto LABEL_54;
  }
  v80 = v13;
  v81 = (uint64_t *)v12;
  v82 = 0;
  v15 = (v13 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v13;
  if (v15 < v13)
  {
    v17 = 0;
  }
  else
  {
    if (v16 > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_127;
    v17 = v16 + 2;
    if (v16 + 2 > v12)
      goto LABEL_127;
    *(_WORD *)(v13 + v16) = 3640;
    v82 = v16 + 2;
  }
  while (1)
  {
    v18 = (_QWORD *)((v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v18 >= v13 + v17)
    {
      v19 = (char *)v18 - v13;
      if ((unint64_t)v18 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)(v19 + 8) > v12)
      {
        v81 = 0;
      }
      else
      {
        *v18 = v14;
        v82 = (unint64_t)(v19 + 8);
      }
    }
    IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t *)&v80, *a3);
    if (!v81)
    {
      LOBYTE(v77) = 0;
      v79 = 0;
      goto LABEL_37;
    }
    v20 = v82;
    v21 = *((_QWORD *)v9 + 8);
    v22 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v23 = *((_QWORD *)v9 + 7);
    if (v22 + 16 >= v23)
      v22 = 0;
    if (v82 <= 0x10)
      v20 = 16;
    v24 = v22 + v20;
    if (v23 <= v24)
      v25 = 0;
    else
      v25 = v24;
    *((_QWORD *)v9 + 9) = v25;
    v26 = (unint64_t *)(*(_QWORD *)(v21 + 16) + 128);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v25, v26));
    if (v27 == 0x80000000 || v9[27])
    {
      if (*((_BYTE *)v9 + 96))
        MEMORY[0x19AEBA1A0](v9[21]);
      v9[27] = 0;
    }
    IPC::StreamClientConnectionBuffer::tryAcquireAll((uint64_t)&v85, (uint64_t *)v9 + 7, v11);
    if (!v87)
    {
      LOBYTE(v77) = 16;
      v78 = 1;
LABEL_36:
      v79 = 1;
      goto LABEL_37;
    }
    WTF::makeUniqueRef<IPC::Decoder,std::span<unsigned char,18446744073709551615ul> &,unsigned long long &>((uint64_t *)&v88, (uint64_t)&v85, (uint64_t *)v9 + 6);
    if (*((_WORD *)v88 + 25) != 2821)
    {
      v77 = (uint64_t *)v88;
      v78 = 0;
      goto LABEL_36;
    }
    IPC::Decoder::~Decoder(v88);
    WTF::fastFree(v28, v29);
    IPC::Connection::waitForSyncReply((uint64_t)v84, v14, 0xE38u, (uint64_t)&v85, v11);
    LOBYTE(v77) = 0;
    v78 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v77, (uint64_t)&v85);
    v79 = 1;
    if ((_DWORD)v86 != -1)
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[v86])(&v88, &v85);
LABEL_37:
    IPC::Connection::popPendingSyncRequestID(v84);
    if (!v79)
    {
      buf[0] = 0;
      v92 = 0;
      goto LABEL_54;
    }
    if (v78 == 1)
    {
      buf[0] = (_BYTE)v77;
      v31 = 1;
      LODWORD(v91) = 1;
      v92 = 1;
LABEL_53:
      ((void (*)(unint64_t *, uint64_t **))off_1E34E3480[v31])(&v80, &v77);
      goto LABEL_54;
    }
    if (v78)
      goto LABEL_134;
    LOBYTE(v85) = 0;
    v87 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v77, (uint64_t)&v85);
    if (v87)
    {
      if (!v79)
        goto LABEL_126;
      if (v78)
        goto LABEL_134;
      v30 = v77;
      v77 = 0;
      v80 = (unint64_t)v30;
      v81 = v85;
      v82 = v86;
      v83 = 0;
      buf[0] = 0;
      LODWORD(v91) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)buf, (uint64_t)&v80);
      v92 = 1;
      if (v83 != -1)
        ((void (*)(IPC::Decoder **, unint64_t *))off_1E34E3568[v83])(&v88, &v80);
    }
    else
    {
      buf[0] = 13;
      LODWORD(v91) = 1;
      v92 = 1;
    }
    if (v79)
    {
      v31 = v78;
      if (v78 != -1)
        goto LABEL_53;
    }
LABEL_54:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v84);
    if (v92)
    {
      LOBYTE(v80) = 0;
      v83 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)buf);
      if (v92 && (_DWORD)v91 != -1)
        ((void (*)(uint64_t **, _BYTE *))off_1E34E3568[v91])(&v85, buf);
      goto LABEL_82;
    }
    if (v76)
      break;
LABEL_126:
    __break(1u);
LABEL_127:
    v12 = 0;
    v17 = 0;
    v81 = 0;
  }
  v32 = (v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v33 = v32 - v74;
  if (v32 < v74)
  {
    v34 = 0;
  }
  else
  {
    v34 = 0;
    if (v33 <= 0xFFFFFFFFFFFFFFFDLL && v33 + 2 <= v75)
    {
      *(_WORD *)(v74 + v33) = 2821;
      v34 = v33 + 2;
    }
  }
  v35 = *((_QWORD *)v9 + 8);
  v36 = (*((_QWORD *)v9 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = *((_QWORD *)v9 + 7);
  if (v36 + 16 >= v37)
    v36 = 0;
  if (v34 <= 0x10)
    v34 = 16;
  v38 = v36 + v34;
  if (v37 <= v38)
    v38 = 0;
  *((_QWORD *)v9 + 9) = v38;
  v39 = (unint64_t *)(*(_QWORD *)(v35 + 16) + 128);
  do
    __ldaxr(v39);
  while (__stlxr(v38, v39));
  v9[27] = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v84, (uint64_t **)v9 + 1);
  v40 = (uint64_t *)v84;
  v77 = 0;
  IPC::Connection::createSyncMessageEncoder(3640, a4, (uint64_t *)&v77, (uint64_t *)&v88);
  IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v88, *a3);
  IPC::Connection::sendSyncMessage((uint64_t)v40, (uint64_t)v77, (uint64_t *)&v88, 0, (uint64_t)&v85, v11);
  if ((_DWORD)v86)
  {
    if ((_DWORD)v86 != 1)
      goto LABEL_134;
    LOBYTE(v80) = (_BYTE)v85;
    v41 = 1;
    v83 = 1;
    goto LABEL_78;
  }
  buf[0] = 0;
  buf[16] = 0;
  IPC::Decoder::operator>><std::tuple<WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v85, (uint64_t)buf);
  if (buf[16])
  {
    v41 = v86;
    if ((_DWORD)v86)
      goto LABEL_134;
    v43 = v85;
    v85 = 0;
    v80 = (unint64_t)v43;
    v81 = *(uint64_t **)buf;
    v82 = *(_QWORD *)&buf[8];
    v83 = 0;
LABEL_78:
    ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v41])(buf, &v85);
  }
  else
  {
    LOBYTE(v80) = 13;
    v83 = 1;
    v41 = v86;
    if ((_DWORD)v86 != -1)
      goto LABEL_78;
  }
  v44 = v88;
  v88 = 0;
  if (v44)
  {
    IPC::Encoder::~Encoder(v44, v42);
    WTF::fastFree(v45, v46);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v84);
LABEL_82:
  v47 = v83;
  if (v83)
  {
    v69 = qword_1ECE716E0;
    if (!os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
LABEL_125:
      WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(this);
      goto LABEL_83;
    }
    if (v47 == 1)
    {
LABEL_124:
      v70 = *((_QWORD *)this + 7);
      v71 = IPC::errorAsString(v80);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v70;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "RemoteRenderingBackend_PrepareImageBufferSetsForDisplaySync";
      v90 = 2082;
      v91 = v71;
      _os_log_impl(&dword_196BCC000, v69, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendSync - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
      goto LABEL_125;
    }
LABEL_134:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_135;
  }
LABEL_83:
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  result = (WTF::ApproximateTime *)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)&v80);
  if (v83 != -1)
    result = (WTF::ApproximateTime *)((uint64_t (*)(_BYTE *, unint64_t *))off_1E34E3568[v83])(buf, &v80);
  v73 = 0;
  do
  {
    v48 = __ldaxr(v9);
    v49 = v48 - 1;
  }
  while (__stlxr(v49, v9));
  if (!v49)
  {
    atomic_store(1u, v9);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v9);
    return (WTF::ApproximateTime *)WTF::fastFree(v67, v68);
  }
  return result;
}

uint64_t *IPC::Decoder::operator>><std::tuple<WTF::Vector<WebKit::SwapBuffersDisplayRequirement,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(uint64_t *a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  WTF **v10;
  WTF *v11;
  unsigned __int16 v12;
  int v13;
  _BYTE *v14;
  char v15;
  int v16;
  int v17;
  _BYTE *v18;
  WTF *v19;
  char v20;
  unsigned __int16 v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  WTF *v26;
  char v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 v35;
  WTF *v36;
  uint64_t v37;

  v4 = a2;
  v6 = a1[1];
  v7 = *a1;
  v8 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v6 < v8 || v6 - v8 <= 7)
  {
    v31 = 0;
    v32 = 0;
    *a1 = 0;
    a1[1] = 0;
    v33 = a1[3];
    if (v33)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v33 + 16))(v33, v7, v6);
        v32 = *a1;
        v31 = a1[1];
      }
      else
      {
        v31 = 0;
        v32 = 0;
      }
    }
    goto LABEL_48;
  }
  v10 = (WTF **)(v7 + v8);
  a1[2] = (uint64_t)(v10 + 1);
  if (!v7)
  {
    v31 = v6;
    v32 = 0;
LABEL_48:
    *a1 = 0;
    a1[1] = 0;
    v34 = a1[3];
    if (v34 && v31)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v34 + 16))(v34, v32);
LABEL_25:
    a2 = *a1;
    v23 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v24 = a1[3];
    if (v24 && v23)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 16))(v24, a2);
      v11 = 0;
      v16 = 0;
      a2 = *a1;
      v29 = a1[1];
      v30 = a1[3];
      v15 = 1;
      *a1 = 0;
      a1[1] = 0;
      if (v30 && v29)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v30 + 16))(v30, a2);
        v16 = 0;
        v11 = 0;
      }
    }
    else
    {
      v16 = 0;
      v11 = 0;
      v15 = 1;
    }
    goto LABEL_27;
  }
  v11 = *v10;
  v36 = 0;
  v37 = 0;
  if ((unint64_t)v11 >= 0x100000)
  {
    while (1)
    {
      v21 = IPC::Decoder::decode<WebKit::SwapBuffersDisplayRequirement>(a1);
      v35 = v21;
      if (v21 < 0x100u)
        goto LABEL_23;
      v17 = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        v18 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(HIDWORD(v37) + 1), (unint64_t)&v35);
        v17 = HIDWORD(v37);
        v19 = v36;
        *((_BYTE *)v36 + HIDWORD(v37)) = *v18;
      }
      else
      {
        v20 = v21;
        v19 = v36;
        *((_BYTE *)v36 + HIDWORD(v37)) = v20;
      }
      a2 = (v17 + 1);
      HIDWORD(v37) = v17 + 1;
      v11 = (WTF *)((char *)v11 - 1);
      if (!v11)
      {
        if (v37 > a2)
        {
          if (v17 == -1)
          {
            v36 = 0;
            LODWORD(v37) = 0;
            WTF::fastFree(v19, (void *)a2);
          }
          else
          {
            LODWORD(v37) = v17 + 1;
            v36 = (WTF *)WTF::fastRealloc(v19, (void *)a2);
          }
        }
        v11 = v36;
        v3 = v37;
        v2 = HIDWORD(v37);
        goto LABEL_17;
      }
    }
  }
  if (v11)
  {
    LODWORD(v37) = (_DWORD)v11;
    v36 = (WTF *)WTF::fastMalloc(v11);
    while (1)
    {
      v12 = IPC::Decoder::decode<WebKit::SwapBuffersDisplayRequirement>(a1);
      v35 = v12;
      if (v12 < 0x100u)
        break;
      v13 = HIDWORD(v37);
      if (HIDWORD(v37) == (_DWORD)v37)
      {
        v14 = (_BYTE *)WTF::Vector<WebCore::ContactProperty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(HIDWORD(v37) + 1), (unint64_t)&v35);
        v13 = HIDWORD(v37);
        *((_BYTE *)v36 + HIDWORD(v37)) = *v14;
      }
      else
      {
        *((_BYTE *)v36 + HIDWORD(v37)) = v12;
      }
      v2 = v13 + 1;
      HIDWORD(v37) = v13 + 1;
      v11 = (WTF *)((char *)v11 - 1);
      if (!v11)
      {
        v11 = v36;
        v3 = v37;
        goto LABEL_17;
      }
    }
LABEL_23:
    v22 = v36;
    if (v36)
    {
      v36 = 0;
      LODWORD(v37) = 0;
      WTF::fastFree(v22, (void *)a2);
    }
    goto LABEL_25;
  }
  v2 = 0;
  v3 = 0;
LABEL_17:
  v15 = 0;
  v16 = 1;
LABEL_27:
  if (*(unsigned __int8 *)(v4 + 16) == v16)
  {
    if (*(_BYTE *)(v4 + 16))
    {
      v25 = *(WTF **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)v4 = 0;
        *(_DWORD *)(v4 + 8) = 0;
        WTF::fastFree(v25, (void *)a2);
      }
      *(_QWORD *)v4 = v11;
      *(_DWORD *)(v4 + 8) = v3;
      *(_DWORD *)(v4 + 12) = v2;
      return a1;
    }
  }
  else
  {
    if (!*(_BYTE *)(v4 + 16))
    {
      *(_QWORD *)v4 = v11;
      *(_DWORD *)(v4 + 8) = v3;
      *(_DWORD *)(v4 + 12) = v2;
      *(_BYTE *)(v4 + 16) = 1;
      return a1;
    }
    v26 = *(WTF **)v4;
    if (*(_QWORD *)v4)
    {
      *(_QWORD *)v4 = 0;
      *(_DWORD *)(v4 + 8) = 0;
      WTF::fastFree(v26, (void *)a2);
    }
    *(_BYTE *)(v4 + 16) = 0;
  }
  if (v11)
    v27 = v15;
  else
    v27 = 1;
  if ((v27 & 1) == 0)
    WTF::fastFree(v11, (void *)a2);
  return a1;
}

char *IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(IPC::Encoder *a1, uint64_t a2)
{
  uint64_t v4;
  char *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = *(unsigned int *)(a2 + 12);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a2;
    v8 = 40 * v6;
    do
    {
      result = IPC::ArgumentCoder<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,void>::encode(a1, v7);
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplaySync>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3568[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3578[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;

  v3 = *(WTF **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  *(_QWORD *)(a2 + 8) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  *(_DWORD *)(a2 + 16) = v4;
  LODWORD(v4) = *((_DWORD *)a3 + 5);
  *((_DWORD *)a3 + 5) = 0;
  *(_DWORD *)(a2 + 20) = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages22RemoteRenderingBackend36PrepareImageBufferSetsForDisplaySyncEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::PrepareImageBufferSetsForDisplay>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1315;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::VectorArgumentCoder<false,WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::ImageBufferSetPrepareBufferForDisplayInputData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((IPC::Encoder *)v6, *a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::MarkSurfacesVolatile>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  IPC::Encoder *v9;
  WTF *v10;
  void *v11;
  IPC::Encoder *v13;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1312;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v13 = (IPC::Encoder *)v6;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebKit::MarkSurfacesAsVolatileRequestIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long> const&,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::RemoteImageBufferSetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,WTF::OptionSet<WebKit::BufferInSetType>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,BOOL>,0ul,1ul,2ul>((IPC::Encoder *)v6, a2);
  v8 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v13, 1, 0);
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v10, v11);
  }
  return v8;
}

uint64_t WebKit::RemoteRenderingBackendProxy::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t **a2, uint64_t a3)
{
  WTF::ApproximateTime *v6;
  unsigned int *v7;
  double v8;
  double v9;
  uint64_t result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unsigned int v42;
  unsigned int v44;
  NSObject *v45;
  uint64_t v46;
  const char *v47;
  unsigned int *v48;
  uint64_t *v49;
  _BYTE buf[22];
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v6 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v48);
  v7 = v48;
  if (!v48)
    return 1;
  WTF::ApproximateTime::now(v6);
  v9 = v8 + 15.0;
  if (*((_QWORD *)v7 + 6) != a3)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v8 + 15.0);
    if (!buf[16])
      goto LABEL_77;
    v30 = *(_QWORD *)buf;
    v29 = *(_QWORD *)&buf[8];
    v31 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v32 = v31 - *(_QWORD *)buf;
    if (v31 >= *(_QWORD *)buf)
    {
      v33 = v32 + 2;
      if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v33 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v32) = 2822;
        goto LABEL_44;
      }
      v29 = 0;
    }
    v33 = 0;
LABEL_44:
    v35 = (_QWORD *)((v30 + v33 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v35 >= v30 + v33)
    {
      v33 = (unint64_t)v35 - v30 + 8;
      if ((unint64_t)v35 - v30 > 0xFFFFFFFFFFFFFFF7 || v33 > v29)
        goto LABEL_80;
      *v35 = a3;
    }
    if (v29)
    {
      v37 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = *((_QWORD *)v7 + 7);
      if (v37 + 16 >= v38)
        v37 = 0;
      if (v33 <= 0x10)
        v33 = 16;
      v39 = v37 + v33;
      if (v38 <= v39)
        v39 = 0;
      *((_QWORD *)v7 + 9) = v39;
      v40 = (unint64_t *)(*(_QWORD *)(*((_QWORD *)v7 + 8) + 16) + 128);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v39, v40));
      v42 = v7[27];
      if (v41 == 0x80000000 || v42 != 0)
      {
        v44 = v42 + 1;
        v7[27] = v44;
        if (v44 >= v7[26])
        {
          if (*((_BYTE *)v7 + 96))
            MEMORY[0x19AEBA1A0](v7[21]);
          v7[27] = 0;
        }
      }
      *((_QWORD *)v7 + 6) = a3;
      goto LABEL_3;
    }
LABEL_80:
    v26 = 17;
    goto LABEL_72;
  }
LABEL_3:
  result = IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v7 + 14), buf, v9);
  if (!buf[16])
  {
LABEL_77:
    v26 = 15;
    goto LABEL_72;
  }
  v12 = *(_QWORD *)buf;
  v11 = *(_QWORD *)&buf[8];
  v13 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v14 = v13 - *(_QWORD *)buf;
  if (v13 >= *(_QWORD *)buf)
  {
    v15 = v14 + 2;
    if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v15 <= *(_QWORD *)&buf[8])
    {
      *(_WORD *)(*(_QWORD *)buf + v14) = 1309;
      goto LABEL_10;
    }
    v11 = 0;
  }
  v15 = 0;
LABEL_10:
  v17 = (_QWORD *)((v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v17 >= v12 + v15)
  {
    v15 = (unint64_t)v17 - v12 + 8;
    if ((unint64_t)v17 - v12 > 0xFFFFFFFFFFFFFFF7 || v15 > v11)
      goto LABEL_70;
    *v17 = **a2;
  }
  if (v11)
  {
    v19 = *((_QWORD *)v7 + 8);
    v20 = (*((_QWORD *)v7 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v21 = *((_QWORD *)v7 + 7);
    if (v20 + 16 >= v21)
      v20 = 0;
    if (v15 <= 0x10)
      v15 = 16;
    v22 = v20 + v15;
    if (v21 <= v22)
      v23 = 0;
    else
      v23 = v22;
    *((_QWORD *)v7 + 9) = v23;
    v24 = (unint64_t *)(*(_QWORD *)(v19 + 16) + 128);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v23, v24));
    if (v25 == 0x80000000 || v7[27])
    {
      if (*((_BYTE *)v7 + 96))
        MEMORY[0x19AEBA1A0](v7[21]);
      v7[27] = 0;
    }
    v26 = 0;
    goto LABEL_29;
  }
LABEL_70:
  if (buf[16])
  {
    IPC::StreamClientConnection::sendProcessOutOfStreamMessage((uint64_t)v7, *(unint64_t *)buf, *(unint64_t *)&buf[8]);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, (uint64_t **)v7 + 1);
    v26 = IPC::Connection::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate>((uint64_t)v49, a2, a3);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v49);
    if (!(_DWORD)v26)
    {
LABEL_29:
      v48 = 0;
      do
      {
        v27 = __ldaxr(v7);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v7));
      if (!v28)
      {
        atomic_store(1u, v7);
        *(_QWORD *)buf = v7;
        WTF::ThreadSafeRefCounted<IPC::StreamClientConnection,(WTF::DestructionThread)0>::deref(void)const::{lambda(void)#1}::operator()((IPC::StreamClientConnection **)buf);
      }
      return v26;
    }
LABEL_72:
    v45 = qword_1ECE716E0;
    if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
    {
      v46 = *((_QWORD *)a1 + 7);
      v47 = IPC::errorAsString(v26);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v46;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = "RemoteRenderingBackend_FinalizeRenderingUpdate";
      v51 = 2082;
      v52 = v47;
      _os_log_impl(&dword_196BCC000, v45, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::send - failed, name:%{public}s, error:%{public}s", buf, 0x20u);
    }
    WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
    goto LABEL_29;
  }
  __break(1u);
  return result;
}

uint64_t IPC::Connection::send<Messages::RemoteRenderingBackend::FinalizeRenderingUpdate>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  IPC::Encoder *v10;
  WTF *v11;
  void *v12;
  IPC::Encoder *v14;

  v6 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v6 = 1309;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 528) = v6 + 16;
  *(_QWORD *)(v6 + 536) = v6 + 16;
  *(_OWORD *)(v6 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v6 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v6);
  v14 = (IPC::Encoder *)v6;
  v7 = **a2;
  *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v6, 8uLL, 8) = v7;
  v9 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v14, 1, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v8);
    WTF::fastFree(v11, v12);
  }
  return v9;
}

uint64_t WebKit::RemoteRenderingBackendProxy::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(WebKit::RemoteRenderingBackendProxy *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  WTF::ApproximateTime *v7;
  unsigned int *v8;
  double v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  void *v38;
  WTF::RunLoop *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  IPC::Encoder *v46;
  WTF *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unsigned int v65;
  NSObject *v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v72;
  WTF *v73;
  void *v74;
  unsigned int *v75;
  _QWORD *v76;
  uint64_t v77;
  IPC::Encoder *v78;
  uint64_t v79[2];
  os_unfair_lock_s *v80;
  _BYTE buf[22];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = WebKit::RemoteRenderingBackendProxy::connection(a1, &v75);
  v8 = v75;
  if (!v75)
    return 1;
  WTF::ApproximateTime::now(v7);
  v10 = v9 + 15.0;
  if (*((_QWORD *)v8 + 6) == a4)
  {
LABEL_3:
    IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 14), buf, v10);
    if (!buf[16])
      goto LABEL_84;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v80, (uint64_t **)v8 + 1);
    v11 = *a3;
    *a3 = 0;
    v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v12 = &off_1E34E3598;
    v12[1] = v11;
    v79[0] = (uint64_t)v12;
    v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
    v79[1] = v13;
    IPC::Connection::addAsyncReplyHandler((uint64_t)v80, v79);
    v15 = buf[16];
    if (!buf[16])
      goto LABEL_97;
    v15 = *(_QWORD *)buf;
    v16 = *(_QWORD *)&buf[8];
    v17 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
    v18 = v17 - *(_QWORD *)buf;
    if (v17 < *(_QWORD *)buf)
    {
      v19 = 0;
      v14 = *(_QWORD *)&buf[8];
    }
    else
    {
      v14 = 0;
      if (v18 > 0xFFFFFFFFFFFFFFFDLL)
        goto LABEL_98;
      v19 = 0;
      if (v18 + 2 <= *(_QWORD *)&buf[8])
      {
        *(_WORD *)(*(_QWORD *)buf + v18) = 1310;
        v14 = v16;
        v19 = v18 + 2;
      }
    }
    while (1)
    {
      v20 = (_QWORD *)((v15 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v20 >= v15 + v19)
      {
        v21 = (char *)v20 - v15;
        if ((unint64_t)v20 - v15 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_28;
        v19 = (unint64_t)(v21 + 8);
        if ((unint64_t)(v21 + 8) > v14)
          goto LABEL_28;
        *v20 = v13;
      }
      if (v14)
      {
        v22 = *((_QWORD *)v8 + 8);
        v23 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = *((_QWORD *)v8 + 7);
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v19 <= 0x10)
          v19 = 16;
        v25 = v23 + v19;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        *((_QWORD *)v8 + 9) = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || v8[27])
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](v8[21]);
          v8[27] = 0;
        }
        goto LABEL_52;
      }
LABEL_28:
      v15 = buf[16];
      if (buf[16])
      {
        v29 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
        v30 = v29 - *(_QWORD *)buf;
        if (v29 < *(_QWORD *)buf)
        {
          v31 = 0;
        }
        else
        {
          v31 = 0;
          if (v30 <= 0xFFFFFFFFFFFFFFFDLL && v30 + 2 <= *(_QWORD *)&buf[8])
          {
            *(_WORD *)(*(_QWORD *)buf + v30) = 2821;
            v31 = v30 + 2;
          }
        }
        v32 = *((_QWORD *)v8 + 8);
        v33 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v34 = *((_QWORD *)v8 + 7);
        if (v33 + 16 >= v34)
          v33 = 0;
        if (v31 <= 0x10)
          v31 = 16;
        v35 = v33 + v31;
        if (v34 <= v35)
          v35 = 0;
        *((_QWORD *)v8 + 9) = v35;
        v36 = (unint64_t *)(*(_QWORD *)(v32 + 16) + 128);
        do
          __ldaxr(v36);
        while (__stlxr(v35, v36));
        v8[27] = 0;
        v37 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v37 = 1310;
        *(_QWORD *)(v37 + 8) = a4;
        *(_QWORD *)(v37 + 528) = v37 + 16;
        *(_QWORD *)(v37 + 536) = v37 + 16;
        *(_OWORD *)(v37 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v37 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v37);
        v78 = (IPC::Encoder *)v37;
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v37, 8uLL, 8) = v13;
        if (IPC::Connection::sendMessageImpl((uint64_t)v80, (uint64_t *)&v78, 1, 0))
        {
          IPC::Connection::takeAsyncReplyHandler(v80, v13, &v77);
          if (v77)
          {
            v40 = (unsigned int *)(WTF::RunLoop::main(v39) + 8);
            do
              v41 = __ldaxr(v40);
            while (__stlxr(v41 + 1, v40));
            v42 = v77;
            v77 = 0;
            v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v43 = &off_1E34E35C0;
            v43[1] = v42;
            v76 = v43;
            WTF::RunLoop::dispatch();
            v44 = v76;
            v76 = 0;
            if (v44)
              (*(void (**)(_QWORD *))(*v44 + 8))(v44);
            WTF::ThreadSafeRefCounted<WTF::RunLoop,(WTF::DestructionThread)0>::deref(v40);
            v45 = v77;
            v77 = 0;
            if (v45)
              (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          }
          v13 = 0;
        }
        v46 = v78;
        v78 = 0;
        if (v46)
        {
          IPC::Encoder::~Encoder(v46, v38);
          WTF::fastFree(v47, v48);
        }
LABEL_52:
        v49 = v79[0];
        v79[0] = 0;
        if (v49)
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v80);
        if (v13)
        {
          v50 = 0;
          goto LABEL_87;
        }
        goto LABEL_84;
      }
LABEL_97:
      __break(1u);
LABEL_98:
      v19 = v14;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 14), buf, v9 + 15.0);
  if (!buf[16])
    goto LABEL_84;
  v52 = *(_QWORD *)buf;
  v51 = *(_QWORD *)&buf[8];
  v53 = (*(_QWORD *)buf + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - *(_QWORD *)buf;
  if (v53 < *(_QWORD *)buf)
    goto LABEL_100;
  v55 = v54 + 2;
  if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > *(_QWORD *)&buf[8])
  {
    v51 = 0;
LABEL_100:
    v55 = 0;
    goto LABEL_63;
  }
  *(_WORD *)(*(_QWORD *)buf + v54) = 2822;
LABEL_63:
  v57 = (_QWORD *)((v52 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v57 >= v52 + v55)
  {
    v55 = (unint64_t)v57 - v52 + 8;
    if ((unint64_t)v57 - v52 > 0xFFFFFFFFFFFFFFF7 || v55 > v51)
      goto LABEL_84;
    *v57 = a4;
  }
  if (v51)
  {
    v59 = *((_QWORD *)v8 + 8);
    v60 = (*((_QWORD *)v8 + 9) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v61 = *((_QWORD *)v8 + 7);
    if (v60 + 16 >= v61)
      v60 = 0;
    if (v55 <= 0x10)
      v55 = 16;
    v62 = v60 + v55;
    if (v61 <= v62)
      v62 = 0;
    *((_QWORD *)v8 + 9) = v62;
    v63 = (unint64_t *)(*(_QWORD *)(v59 + 16) + 128);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v62, v63));
    v65 = v8[27];
    if (v64 == 0x80000000 || v65 != 0)
    {
      v72 = v65 + 1;
      v8[27] = v72;
      if (v72 >= v8[26])
      {
        if (*((_BYTE *)v8 + 96))
          MEMORY[0x19AEBA1A0](v8[21]);
        v8[27] = 0;
      }
    }
    *((_QWORD *)v8 + 6) = a4;
    goto LABEL_3;
  }
LABEL_84:
  v67 = qword_1ECE716E0;
  if (os_log_type_enabled((os_log_t)qword_1ECE716E0, OS_LOG_TYPE_DEFAULT))
  {
    v68 = *((_QWORD *)a1 + 7);
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v68;
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "RemoteRenderingBackend_GetImageBufferResourceLimitsForTesting";
    _os_log_impl(&dword_196BCC000, v67, OS_LOG_TYPE_DEFAULT, "[renderingBackend=%llu] RemoteRenderingBackendProxy::sendWithAsyncReply - failed, name:%{public}s", buf, 0x16u);
  }
  WebKit::RemoteRenderingBackendProxy::didBecomeUnresponsive(a1);
  v50 = 5;
LABEL_87:
  v75 = 0;
  do
  {
    v69 = __ldaxr(v8);
    v70 = v69 - 1;
  }
  while (__stlxr(v70, v8));
  if (!v70)
  {
    atomic_store(1u, v8);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v8);
    WTF::fastFree(v73, v74);
  }
  return v50;
}

_QWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>>(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E3598;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>>(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E3598;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>>(WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[31];
  _OWORD v16[4];
  char v17;

  if (!a2 || !*a2)
  {
LABEL_7:
    v4 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    memset(v16, 0, sizeof(v16));
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v4 + 16))(v4, v16);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  IPC::ArgumentCoder<WebCore::ImageBufferResourceLimits,void>::decode(a2, (uint64_t)v16);
  if (!v17)
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v7 = a2[3];
    if (v7 && v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v9 = *a2;
      v10 = a2[1];
      v11 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v11 && v10)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v9);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_7;
  }
  v13 = *(_OWORD *)((char *)v16 + 1);
  v14 = *(_OWORD *)((char *)&v16[1] + 1);
  *(_OWORD *)v15 = *(_OWORD *)((char *)&v16[2] + 1);
  *(_OWORD *)&v15[15] = v16[3];
  v12 = v16[0];
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, &v12);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

_QWORD *WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting &&,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E34E35C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting &&,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E34E35C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long> IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting &&,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::Timeout)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 16))(v1, 0);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

unsigned int *WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderingResourceObserver>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int **v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  unsigned int *result;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v34;
  int v35;
  WTF *v36;

  v6 = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  if (v7 > v6)
  {
    v8 = *(_QWORD *)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_15;
    v9 = *(unsigned int *)(v8 - 4);
    if (!(_DWORD)v9)
    {
LABEL_4:
      *(_DWORD *)(a1 + 8) = 0;
      goto LABEL_5;
    }
    v12 = 0;
    v13 = v9 - 1;
    do
    {
      v14 = (unsigned int **)(v8 + 8 * v13);
      if ((unint64_t)*v14 + 1 >= 2 && !*((_QWORD *)*v14 + 1))
      {
        v35 = v12;
        v34 = v13;
        WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket(v14, a2);
        v13 = v34;
        v12 = v35 + 1;
      }
    }
    while ((unint64_t)v13--);
    v8 = *(_QWORD *)a1;
    if (v12)
    {
      v29 = v12;
      *(_DWORD *)(v8 - 16) += v12;
      v30 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        v31 = *(_DWORD *)(v30 - 12);
      else
        v31 = 0;
      *(_DWORD *)(v30 - 12) = v31 - v29;
      v8 = *(_QWORD *)a1;
    }
    if (v8)
    {
      v32 = *(_DWORD *)(v8 - 4);
      if (v32 < 9 || 6 * *(_DWORD *)(v8 - 12) >= v32)
        goto LABEL_4;
      WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize((uint64_t *)a1);
      v10 = 0;
      v8 = *(_QWORD *)a1;
      *(_DWORD *)(a1 + 8) = 0;
      if (v8)
      {
LABEL_5:
        v10 = *(_DWORD *)(v8 - 12);
        v11 = 0x7FFFFFFF;
        if (v10 >= 0x7FFFFFFF)
          goto LABEL_17;
      }
    }
    else
    {
LABEL_15:
      v10 = 0;
      *(_DWORD *)(a1 + 8) = 0;
    }
    v11 = v10;
LABEL_17:
    *(_DWORD *)(a1 + 12) = 2 * v11;
  }
  v16 = a2[1];
  if (!v16)
  {
    v16 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v16 = 1;
    *(_QWORD *)(v16 + 8) = a2;
    v26 = (unsigned int *)a2[1];
    a2[1] = v16;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v25);
      }
      v16 = a2[1];
    }
  }
  do
    v17 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v17 + 1, (unsigned int *)v16));
  do
    v18 = __ldaxr((unsigned int *)v16);
  while (__stlxr(v18 + 1, (unsigned int *)v16));
  v36 = (WTF *)v16;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add((uint64_t *)a1, &v36, a3);
  result = (unsigned int *)v36;
  v36 = 0;
  if (result)
  {
    do
    {
      v23 = __ldaxr(result);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, result));
    if (!v24)
    {
      atomic_store(1u, result);
      result = (unsigned int *)WTF::fastFree((WTF *)result, v19);
    }
  }
  if (v16)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v16);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v16));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v16);
      return (unsigned int *)WTF::fastFree((WTF *)v16, v19);
    }
  }
  return result;
}

uint64_t *_ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore25RenderingResourceObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;

  v2 = *result;
  if (*result)
  {
    v3 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = v3 - 1;
      do
      {
        v6 = v2 + 8 * v5;
        if ((unint64_t)(*(_QWORD *)v6 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v6 + 8))
        {
          v18 = result;
          v16 = v4;
          v15 = v2;
          v17 = v5;
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deleteBucket((unsigned int **)(v2 + 8 * v5), a2);
          v5 = v17;
          v2 = v15;
          result = v18;
          v4 = v16 + 1;
        }
      }
      while ((unint64_t)v5--);
      v8 = *result;
      if (v4)
      {
        v12 = v4;
        *(_DWORD *)(v8 - 16) += v4;
        v13 = *result;
        if (*result)
          v14 = *(_DWORD *)(v13 - 12);
        else
          v14 = 0;
        *(_DWORD *)(v13 - 12) = v14 - v12;
        v8 = *result;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        v10 = 6 * *(_DWORD *)(v8 - 12);
        if (v9 >= 9 && v10 < v9)
          return (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(result);
      }
    }
  }
  return result;
}

uint64_t *WTF::WeakHashSet<WebCore::RenderingResourceObserver,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderingResourceObserver>(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = *((_DWORD *)result + 3);
  v5 = *((_DWORD *)result + 2) + 1;
  *((_DWORD *)result + 2) = v5;
  if (v5 > v4)
  {
    result = _ZN3WTF7HashSetINS_3RefINS_18DefaultWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_11DefaultHashIS7_EENS_10HashTraitsIS7_EENS_15HashTableTraitsEE8removeIfIZNS_11WeakHashSetIN7WebCore25RenderingResourceObserverES2_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(result, a2);
    *((_DWORD *)v3 + 2) = 0;
    v6 = *v3;
    if (*v3)
    {
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
      if (v6 > 0x7FFFFFFE)
        LODWORD(v6) = 0x7FFFFFFF;
    }
    *((_DWORD *)v3 + 3) = 2 * v6;
  }
  v7 = a2[1];
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8))
      return (uint64_t *)WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(v3, v7);
  }
  return result;
}

uint64_t WTF::HashSet<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::remove<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int **v3;
  uint64_t v4;
  uint64_t v6;

  v6 = a2;
  v3 = (unsigned int **)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(a1, &v6);
  if (!*a1)
  {
    if (v3)
    {
      v4 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v4 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((unsigned int **)v4 == v3)
    return 0;
LABEL_3:
  if ((unsigned int **)v4 != v3)
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(a1, v3);
  return 1;
}

IPC::Decoder *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages13RemoteAdapter13RequestDeviceEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);
  return std::unique_ptr<IPC::Decoder>::reset[abi:sn180100]((IPC::Decoder **)a2, 0);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::initializeIPC(WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>> &&,WTF::ObjectIdentifierGeneric<WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,IPC::StreamServerConnectionHandle &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WebKit::WebProcess *v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *result;
  unsigned int v17;
  unsigned int *v18;
  WebKit::WebProcess *v19;
  uint64_t v20;
  __int16 v21;
  uint64_t *v22[4];
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 8);
  {
    v3 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;
  }
  else
  {
    v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    v3 = WebKit::WebProcess::WebProcess(v19);
    WebKit::WebProcess::singleton(void)::process = (uint64_t)v3;
  }
  v4 = WebKit::WebProcess::ensureGPUProcessConnection(v3);
  v5 = *(_QWORD *)(v2 + 72);
  v6 = *(_WORD *)(v2 + 57);
  v20 = *(_QWORD *)(v2 + 49);
  v21 = v6;
  v7 = *(uint64_t **)(a1 + 24);
  v8 = **(_QWORD **)(a1 + 16);
  v24 = v5;
  v22[3] = v7;
  v23 = v8;
  v9 = *(_QWORD *)(v4 + 24);
  v22[0] = &v24;
  v22[1] = &v20;
  v22[2] = &v23;
  IPC::Connection::send<Messages::GPUConnectionToWebProcess::CreateGraphicsContextGL>(v9, v22, 0, 1, 0);
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v4 + 8), v4);
  v11 = *(unsigned int **)(v4 + 8);
  if (v11)
  {
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
  }
  v13 = *(unsigned int **)(v2 + 88);
  *(_QWORD *)(v2 + 88) = v11;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v10);
    }
  }
  result = (unsigned int *)WebKit::GPUProcessConnection::videoFrameObjectHeapProxy((WebKit::GPUProcessConnection *)v4);
  do
    v17 = __ldaxr(result);
  while (__stlxr(v17 + 1, result));
  v18 = *(unsigned int **)(v2 + 160);
  *(_QWORD *)(v2 + 160) = result;
  if (v18)
    return WTF::ThreadSafeRefCounted<WebKit::RemoteVideoFrameObjectHeapProxy,(WTF::DestructionThread)2>::deref(v18);
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnsureExtensionEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 979;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v56, *a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 979;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v31, *a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Reshape,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 1010;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 1010;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  IPC::Decoder *v45;
  WTF *v46;
  void *v47;
  IPC::Encoder *v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  void *v60;
  IPC::Encoder *v61;
  WTF *v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v70;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  char v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  char v88;
  IPC::Encoder *v89;
  int v90;
  int v91;
  IPC::Encoder *v92;
  int v93;
  int v94;
  IPC::Decoder *v95;
  char v96;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v82, a5);
  if (!(_BYTE)v84)
    goto LABEL_121;
  v65 = v82;
  v64 = v83;
  v66 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v67 = v66 - v82;
  if (v66 >= v82)
  {
    v68 = v67 + 2;
    if (v67 <= 0xFFFFFFFFFFFFFFFDLL && v68 <= v83)
    {
      *(_WORD *)(v82 + v67) = 2822;
      goto LABEL_100;
    }
    v64 = 0;
  }
  v68 = 0;
LABEL_100:
  v70 = (_QWORD *)((v65 + v68 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v70 >= v65 + v68)
  {
    v68 = (unint64_t)v70 - v65 + 8;
    if ((unint64_t)v70 - v65 > 0xFFFFFFFFFFFFFFF7 || v68 > v64)
      goto LABEL_135;
    *v70 = v6;
  }
  if (!v64)
  {
LABEL_135:
    v80 = 17;
    goto LABEL_122;
  }
  v72 = v8[8];
  v73 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v74 = v8[7];
  if (v73 + 16 >= v74)
    v73 = 0;
  if (v68 <= 0x10)
    v68 = 16;
  v75 = v73 + v68;
  if (v74 <= v75)
    v75 = 0;
  v8[9] = v75;
  v76 = (unint64_t *)(*(_QWORD *)(v72 + 16) + 128);
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v75, v76));
  v78 = *((_DWORD *)v8 + 27);
  if (v77 == 0x80000000 || v78 != 0)
  {
    v81 = v78 + 1;
    *((_DWORD *)v8 + 27) = v81;
    if (v81 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v86, a5);
  if (!v88)
  {
LABEL_121:
    v80 = 15;
LABEL_122:
    *(_BYTE *)a4 = v80;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v86;
  v12 = v87;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v95, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v95, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    v94 = 1;
    LOBYTE(v82) = 0;
    v84 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v82, (uint64_t)&v92);
    v85 = 1;
    if (v94 != -1)
      ((void (*)(IPC::Encoder **, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v89, &v92);
    goto LABEL_66;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_130;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_129;
  *(_WORD *)(v11 + v16) = 3549;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    if (v17 >= v12)
      v12 = 0;
    else
      *(_BYTE *)(v11 + v17++) = *a2;
    v24 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFF7
        || (v17 = (unint64_t)(v25 + 8), (unint64_t)(v25 + 8) > v12))
      {
LABEL_48:
        LOBYTE(v92) = 0;
        LOBYTE(v94) = 0;
        goto LABEL_55;
      }
      *v24 = **((_QWORD **)a2 + 1);
    }
    if (!v12)
      goto LABEL_48;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v92) = 16;
      v93 = 1;
LABEL_54:
      LOBYTE(v94) = 1;
      goto LABEL_55;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v38 = v8[8];
    v39 = *(_QWORD *)(v38 + 8);
    if (v39 <= 0xFF)
      goto LABEL_128;
    v40 = v8[7];
    v41 = *(_QWORD *)(v38 + 16);
    v42 = v39 - 256;
    if (v40)
    {
      v11 = v40 - 1;
      if (v42 < v40 - 1)
        goto LABEL_128;
    }
    else
    {
      v11 = v42;
    }
    v43 = v41 + 256;
    v44 = WTF::fastMalloc((WTF *)0x48);
    v45 = (IPC::Decoder *)IPC::Decoder::Decoder(v44, v43, v11, v8[6]);
    if (*((_WORD *)v45 + 25) != 2821)
    {
      v92 = v45;
      v93 = 0;
      goto LABEL_54;
    }
    IPC::Decoder::~Decoder(v45);
    WTF::fastFree(v46, v47);
    IPC::Connection::waitForSyncReply((uint64_t)v95, v14, 0xDDDu, (uint64_t)&v89, a5);
    LOBYTE(v92) = 0;
    v93 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v92, (uint64_t)&v89);
    LOBYTE(v94) = 1;
    if (v90 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v90])(&v96, &v89);
LABEL_55:
    IPC::Connection::popPendingSyncRequestID(v95);
    if (!(_BYTE)v94)
    {
      LOBYTE(v82) = 0;
      v85 = 0;
      goto LABEL_66;
    }
    if (v93 == 1)
    {
      LOBYTE(v82) = (_BYTE)v92;
      v49 = 1;
      v84 = 1;
      v85 = 1;
LABEL_65:
      ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1E34E3480[v49])(&v89, &v92);
      goto LABEL_66;
    }
    if (v93)
      goto LABEL_136;
    v48 = v92;
    v92 = 0;
    v89 = v48;
    v91 = 0;
    LOBYTE(v82) = 0;
    v84 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v82, (uint64_t)&v89);
    v85 = 1;
    if (v91 != -1)
      ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v91])(&v96, &v89);
    if ((_BYTE)v94)
    {
      v49 = v93;
      if (v93 != -1)
        goto LABEL_65;
    }
LABEL_66:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v95);
    if (v85)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v82);
      if (v85)
      {
        if (v84 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(IPC::Encoder **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v84])(&v92, &v82);
      }
      return result;
    }
    if (v88)
      break;
LABEL_128:
    __break(1u);
LABEL_129:
    v12 = 0;
LABEL_130:
    v17 = 0;
  }
  v50 = (v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = v50 - v86;
  if (v50 < v86)
    goto LABEL_137;
  v52 = 0;
  if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v51 + 2 <= v87)
  {
    *(_WORD *)(v86 + v51) = 2821;
    v52 = v51 + 2;
  }
  while (1)
  {
    v53 = v8[8];
    v54 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v55 = v8[7];
    if (v54 + 16 >= v55)
      v54 = 0;
    if (v52 <= 0x10)
      v52 = 16;
    v56 = v54 + v52;
    if (v55 <= v56)
      v56 = 0;
    v8[9] = v56;
    v57 = (unint64_t *)(*(_QWORD *)(v53 + 16) + 128);
    do
      __ldaxr(v57);
    while (__stlxr(v56, v57));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v95, v13);
    v8 = (uint64_t *)v95;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3549, (uint64_t)v6, (uint64_t *)&v92, (uint64_t *)&v89);
    v6 = v89;
    v13 = (uint64_t **)*a2;
    *IPC::Encoder::grow(v89, 1uLL, 1) = (char)v13;
    IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(v6, *((uint64_t **)a2 + 1));
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v92, (uint64_t *)&v89, 0, (uint64_t)&v82, a5);
    v58 = v83;
    if (!(_DWORD)v83)
      break;
    if ((_DWORD)v83 == 1)
    {
      *(_BYTE *)a4 = v82;
      goto LABEL_87;
    }
LABEL_136:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_137:
    v52 = 0;
  }
  v59 = v82;
  v82 = 0;
  *(_QWORD *)a4 = v59;
LABEL_87:
  *(_DWORD *)(a4 + 16) = v58;
  ((void (*)(char *, unint64_t *))off_1E34E3480[v58])(&v96, &v82);
  v61 = v89;
  v89 = 0;
  if (v61)
  {
    IPC::Encoder::~Encoder(v61, v60);
    WTF::fastFree(v62, v63);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v95);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::DrawSurfaceBufferToImageBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3638[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _BOOL8 v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  char v43;
  uint64_t *v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  int v54;
  void *v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  char v78;
  unsigned int v79;
  uint64_t *v80;
  _BYTE v81[17];
  __int128 v82;
  _BYTE v83[31];
  char v84;
  int v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t *v90;
  int v91;
  char v92;
  IPC::Encoder *v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  _BYTE v97[72];
  int v98;
  uint64_t v99;

  v8 = a1;
  v99 = *MEMORY[0x1E0C80C00];
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), v81, a5);
  if (!v81[16])
    goto LABEL_120;
  v63 = *(_QWORD *)v81;
  v62 = *(_QWORD *)&v81[8];
  v64 = (*(_QWORD *)v81 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v64 - *(_QWORD *)v81;
  if (v64 >= *(_QWORD *)v81)
  {
    v66 = v65 + 2;
    if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= *(_QWORD *)&v81[8])
    {
      *(_WORD *)(*(_QWORD *)v81 + v65) = 2822;
      goto LABEL_99;
    }
    v62 = 0;
  }
  v66 = 0;
LABEL_99:
  v68 = (_QWORD *)((v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v68 >= v63 + v66)
  {
    v66 = (unint64_t)v68 - v63 + 8;
    if ((unint64_t)v68 - v63 > 0xFFFFFFFFFFFFFFF7 || v66 > v62)
      goto LABEL_133;
    *v68 = a3;
  }
  if (!v62)
  {
LABEL_133:
    v78 = 17;
    goto LABEL_121;
  }
  v70 = v8[8];
  v71 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v8[7];
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v66 <= 0x10)
    v66 = 16;
  v73 = v71 + v66;
  if (v72 <= v73)
    v73 = 0;
  v8[9] = v73;
  v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *((_DWORD *)v8 + 27);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *((_DWORD *)v8 + 27) = v79;
    if (v79 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v87, a5);
  if (!v89)
  {
LABEL_120:
    v78 = 15;
LABEL_121:
    *(_BYTE *)a4 = v78;
    *(_DWORD *)(a4 + 72) = 1;
    return result;
  }
  v11 = v87;
  v12 = v88;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v93, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v93, v14))
  {
    v97[0] = 11;
    v98 = 1;
    v81[0] = 0;
    v85 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v81, (uint64_t)v97);
    v86 = 1;
    if (v98 != -1)
      ((void (*)(__int128 *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v98])(&v94, v97);
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 >= v11)
  {
    v17 = v16 + 2;
    if (v16 <= 0xFFFFFFFFFFFFFFFDLL && v17 <= v12)
    {
      *(_WORD *)(v11 + v16) = 3614;
      goto LABEL_10;
    }
    v12 = 0;
  }
  v17 = 0;
LABEL_10:
  v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v19 >= v11 + v17)
  {
    v17 = (unint64_t)v19 - v11 + 8;
    if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || v17 > v12)
      goto LABEL_128;
    *v19 = v14;
  }
  if (v17 >= v12)
    goto LABEL_128;
  *(_BYTE *)(v11 + v17) = *a2;
  v21 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v22 = v8[7];
  if (v21 + 16 >= v22)
    v21 = 0;
  if (v17 <= 0xF)
    v17 = 15;
  v23 = v17 + v21;
  if (v22 > v23 + 1)
    v24 = v23 + 1;
  else
    v24 = 0;
  v8[9] = v24;
  v25 = (unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v24, v25));
  if (v26 == 0x80000000 || *((_DWORD *)v8 + 27))
  {
    if (*((_BYTE *)v8 + 96))
      MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
    *((_DWORD *)v8 + 27) = 0;
  }
  while (1)
  {
    v27 = *(unint64_t **)(v8[8] + 16);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(0x80000000uLL, v27));
    v29 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
    if (!(v28 | v29 & 0xFFFFFFFF7FFFFFFFLL))
      break;
    if (*((_BYTE *)v8 + 96))
    {
      v30 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
      if (v30)
      {
        WTF::ApproximateTime::now((WTF::ApproximateTime *)v30);
        if (v31 < a5)
          continue;
      }
    }
    LOBYTE(v90) = 16;
    v91 = 1;
LABEL_46:
    v92 = 1;
    goto LABEL_47;
  }
  atomic_store(0, *(unint64_t **)(v8[8] + 16));
  v8[9] = 0;
  v32 = v8[8];
  v33 = *(_QWORD *)(v32 + 8);
  if (v33 <= 0xFF)
    goto LABEL_127;
  v34 = v8[7];
  v35 = *(_QWORD *)(v32 + 16);
  v36 = v33 - 256;
  if (v34)
  {
    v37 = v34 - 1;
    if (v36 < v34 - 1)
      goto LABEL_127;
  }
  else
  {
    v37 = v36;
  }
  v38 = v35 + 256;
  v39 = WTF::fastMalloc((WTF *)0x48);
  v40 = IPC::Decoder::Decoder(v39, v38, v37, v8[6]);
  if (*(_WORD *)(v40 + 50) != 2821)
  {
    v90 = (uint64_t *)v40;
    v91 = 0;
    goto LABEL_46;
  }
  IPC::Decoder::~Decoder((IPC::Decoder *)v40);
  WTF::fastFree(v41, v42);
  IPC::Connection::waitForSyncReply((uint64_t)v93, v14, 0xE1Eu, (uint64_t)v97, a5);
  LOBYTE(v90) = 0;
  v91 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v90, (uint64_t)v97);
  v92 = 1;
  if (*(_DWORD *)&v97[8] != -1)
    ((void (*)(__int128 *, _BYTE *))off_1E34E3480[*(unsigned int *)&v97[8]])(&v94, v97);
  while (1)
  {
LABEL_47:
    IPC::Connection::popPendingSyncRequestID(v93);
    if (!v92)
    {
      v81[0] = 0;
      v86 = 0;
      goto LABEL_64;
    }
    if (v91 == 1)
    {
      v81[0] = (_BYTE)v90;
      v45 = 1;
      v85 = 1;
      v86 = 1;
      goto LABEL_63;
    }
    if (v91)
      goto LABEL_134;
    IPC::Decoder::decode<std::tuple<std::optional<WebKit::RemoteVideoFrameProxyProperties>>>((uint64_t)v97, v90);
    if (!v97[64])
    {
      v81[0] = 13;
      v85 = 1;
      v86 = 1;
      goto LABEL_61;
    }
    v43 = v97[0];
    v94 = *(_OWORD *)&v97[1];
    v95 = *(_OWORD *)&v97[17];
    v96[0] = *(_OWORD *)&v97[33];
    *(_OWORD *)((char *)v96 + 15) = *(_OWORD *)&v97[48];
    if (v92)
      break;
LABEL_127:
    __break(1u);
LABEL_128:
    LOBYTE(v90) = 0;
    v92 = 0;
  }
  if (v91)
    goto LABEL_134;
  *(_OWORD *)&v97[9] = v94;
  v44 = v90;
  v90 = 0;
  *(_OWORD *)&v97[25] = v95;
  *(_OWORD *)&v97[41] = v96[0];
  *(_OWORD *)&v97[56] = *(_OWORD *)((char *)v96 + 15);
  *(_QWORD *)v97 = v44;
  v97[8] = v43;
  v98 = 0;
  v81[0] = 0;
  v85 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v81, (uint64_t)v97);
  v86 = 1;
  if (v98 != -1)
    ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v98])(&v80, v97);
LABEL_61:
  if (v92)
  {
    v45 = v91;
    if (v91 != -1)
LABEL_63:
      ((void (*)(_BYTE *, uint64_t **))off_1E34E3480[v45])(v97, &v90);
  }
LABEL_64:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v93);
  if (v86)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 72) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)v81);
    if (v86)
    {
      if (v85 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v85])(v97, v81);
    }
    return result;
  }
  if (!v89)
    goto LABEL_127;
  v46 = (v87 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v47 = v46 - v87;
  if (v46 < v87)
    goto LABEL_135;
  v48 = 0;
  if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v88)
  {
    *(_WORD *)(v87 + v47) = 2821;
    v48 = v47 + 2;
  }
  while (2)
  {
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, v13);
    v8 = v80;
    v90 = 0;
    IPC::Connection::createSyncMessageEncoder(3614, a3, (uint64_t *)&v90, (uint64_t *)&v93);
    LOBYTE(a2) = *a2;
    *IPC::Encoder::grow(v93, 1uLL, 1) = (char)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v90, (uint64_t *)&v93, 0, (uint64_t)&v94, a5);
    if (DWORD2(v94))
    {
      if (DWORD2(v94) == 1)
      {
        *(_BYTE *)a4 = v94;
        v54 = 1;
        *(_DWORD *)(a4 + 72) = 1;
        goto LABEL_88;
      }
LABEL_134:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_135:
      v48 = 0;
      continue;
    }
    break;
  }
  IPC::Decoder::decode<std::tuple<std::optional<WebKit::RemoteVideoFrameProxyProperties>>>((uint64_t)v81, (uint64_t *)v94);
  if (v84)
  {
    v56 = v81[0];
    *(_OWORD *)v97 = *(_OWORD *)&v81[1];
    *(_OWORD *)&v97[16] = v82;
    *(_OWORD *)&v97[32] = *(_OWORD *)v83;
    *(_OWORD *)&v97[47] = *(_OWORD *)&v83[15];
    v54 = DWORD2(v94);
    if (!DWORD2(v94))
    {
      v57 = v94;
      *(_QWORD *)&v94 = 0;
      v58 = *(_OWORD *)&v97[16];
      *(_OWORD *)(a4 + 9) = *(_OWORD *)v97;
      *(_OWORD *)(a4 + 25) = v58;
      *(_OWORD *)(a4 + 41) = *(_OWORD *)&v97[32];
      *(_OWORD *)(a4 + 56) = *(_OWORD *)&v97[47];
      *(_QWORD *)a4 = v57;
      *(_BYTE *)(a4 + 8) = v56;
      *(_DWORD *)(a4 + 72) = 0;
      goto LABEL_88;
    }
    goto LABEL_134;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 72) = 1;
  v54 = DWORD2(v94);
  if (DWORD2(v94) == -1)
    goto LABEL_89;
LABEL_88:
  ((void (*)(_BYTE *, __int128 *))off_1E34E3480[v54])(v81, &v94);
LABEL_89:
  v59 = v93;
  v93 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v55);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v80);
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WebKit::RemoteVideoFrameProxyProperties>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _OWORD v10[4];
  char v11;

  result = IPC::Decoder::decode<std::optional<WebKit::RemoteVideoFrameProxyProperties>>(a2, (uint64_t)v10);
  if (v11)
  {
    v5 = v10[1];
    *(_OWORD *)a1 = v10[0];
    *(_OWORD *)(a1 + 16) = v5;
    v6 = v10[3];
    *(_OWORD *)(a1 + 32) = v10[2];
    *(_OWORD *)(a1 + 48) = v6;
    *(_BYTE *)(a1 + 64) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 64) = 0;
    v7 = *a2;
    v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (uint64_t *)a2[3];
    if (result)
      v9 = v8 == 0;
    else
      v9 = 1;
    if (!v9)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v7);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::optional<WebKit::RemoteVideoFrameProxyProperties>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(_BYTE *)(a2 + 64))
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    result = (uint64_t *)a1[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _OWORD v16[3];
  uint64_t v17;
  char v18;

  v3 = result[1];
  v4 = *result;
  v5 = result[2] - *result;
  if (v3 <= v5)
  {
    v10 = 0;
    v11 = 0;
    *result = 0;
    result[1] = 0;
    v12 = result[3];
    if (v12)
    {
      v15 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
        result = v15;
        v11 = *v15;
        v10 = v15[1];
      }
      else
      {
        v10 = 0;
        v11 = 0;
      }
    }
    goto LABEL_12;
  }
  v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    v10 = v3;
    v11 = 0;
LABEL_12:
    v3 = 0;
    v4 = 0;
    *result = 0;
    result[1] = 0;
    v13 = result[3];
    if (v13)
    {
      v14 = result;
      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11, v10);
        result = v14;
        v4 = *v14;
        v3 = v14[1];
      }
      else
      {
        v3 = 0;
        v4 = 0;
      }
    }
    goto LABEL_13;
  }
  v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      result = (uint64_t *)IPC::Decoder::decode<WebKit::RemoteVideoFrameProxyProperties>(result, (uint64_t)v16);
      v8 = v18;
      if (v18)
      {
        v9 = v16[1];
        *(_OWORD *)a2 = v16[0];
        *(_OWORD *)(a2 + 16) = v9;
        *(_OWORD *)(a2 + 32) = v16[2];
        *(_QWORD *)(a2 + 48) = v17;
        v8 = 1;
        *(_BYTE *)(a2 + 56) = 1;
      }
      else
      {
        *(_BYTE *)a2 = 0;
      }
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 56) = 0;
      v8 = 1;
    }
    *(_BYTE *)(a2 + 64) = v8;
    return result;
  }
LABEL_13:
  *result = 0;
  result[1] = 0;
  result = (uint64_t *)result[3];
  if (result && v3)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 64) = 0;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::SurfaceBufferToVideoFrame>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 72);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 72) = -1;
  v5 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3648[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 72) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  v5 = *(_OWORD *)(a3 + 3);
  v6 = *(_OWORD *)(a3 + 5);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 7);
  *(_OWORD *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 24) = v5;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebCore::VideoFrame &,unsigned int,unsigned int,int,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_0,void,IPC::Semaphore &>::call(WTF::ApproximateTime *a1, IPC::Semaphore *a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  int v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unsigned __int8 ***result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  unsigned int v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  IPC::Encoder *v46;

  v3 = (WebKit::RemoteGraphicsContextGLProxy *)*((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)v3 + 9);
  v5 = *((_QWORD *)v3 + 12);
  v6 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v7 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v7 = v6 + v8;
  }
  if (*(_QWORD *)(v5 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v43, v7);
    if (!v45)
      goto LABEL_22;
    v27 = v43;
    v26 = v44;
    v28 = (v43 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v28 - v43;
    if (v28 >= v43)
    {
      v30 = v29 + 2;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v30 <= v44)
      {
        *(_WORD *)(v43 + v29) = 2822;
LABEL_31:
        v32 = (_QWORD *)((v27 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v32 >= v27 + v30)
        {
          v30 = (unint64_t)v32 - v27 + 8;
          if ((unint64_t)v32 - v27 > 0xFFFFFFFFFFFFFFF7 || v30 > v26)
            goto LABEL_22;
          *v32 = v4;
        }
        if (v26)
        {
          v34 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v35 = *(_QWORD *)(v5 + 56);
          if (v34 + 16 >= v35)
            v34 = 0;
          if (v30 <= 0x10)
            v30 = 16;
          v36 = v34 + v30;
          if (v35 <= v36)
            v36 = 0;
          *(_QWORD *)(v5 + 72) = v36;
          v37 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v36, v37));
          v39 = *(_DWORD *)(v5 + 108);
          if (v38 == 0x80000000 || v39 != 0)
          {
            v41 = v39 + 1;
            *(_DWORD *)(v5 + 108) = v41;
            if (v41 >= *(_DWORD *)(v5 + 104))
            {
              if (*(_BYTE *)(v5 + 96))
                MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
              *(_DWORD *)(v5 + 108) = 0;
            }
          }
          *(_QWORD *)(v5 + 48) = v4;
          goto LABEL_4;
        }
LABEL_22:
        WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
        return (unsigned __int8 ***)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
      }
      v26 = 0;
    }
    v30 = 0;
    goto LABEL_31;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v43, v7);
  if (!v45)
    goto LABEL_22;
  v9 = (v43 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v10 = v9 - v43;
  if (v9 < v43 || ((v11 = v10 + 2, v10 <= 0xFFFFFFFFFFFFFFFDLL) ? (v12 = v11 > v44) : (v12 = 1), v12))
    v11 = 0;
  else
    *(_WORD *)(v43 + v10) = 2821;
  v13 = *(_QWORD *)(v5 + 64);
  v14 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = *(_QWORD *)(v5 + 56);
  if (v14 + 16 >= v15)
    v14 = 0;
  if (v11 <= 0x10)
    v11 = 16;
  v16 = v14 + v11;
  if (v15 <= v16)
    v16 = 0;
  *(_QWORD *)(v5 + 72) = v16;
  v17 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
  do
    __ldaxr(v17);
  while (__stlxr(v16, v17));
  *(_DWORD *)(v5 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v42, (uint64_t **)(v5 + 8));
  v18 = v42;
  v19 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v19 = 1018;
  *(_QWORD *)(v19 + 8) = v4;
  *(_QWORD *)(v19 + 528) = v19 + 16;
  *(_QWORD *)(v19 + 536) = v19 + 16;
  *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v19 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
  v46 = (IPC::Encoder *)v19;
  IPC::ArgumentCoder<IPC::Semaphore,void>::encode(v19, a2);
  v21 = IPC::Connection::sendMessageImpl((uint64_t)v18, (uint64_t *)&v46, 1, 0);
  v22 = v46;
  v46 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v20);
    WTF::fastFree(v23, v24);
  }
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v42);
  if (v21)
    goto LABEL_22;
  return result;
}

unsigned __int8 ***WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::copyTextureFromVideoFrame(WebCore::VideoFrame &,unsigned int,unsigned int,int,unsigned int,unsigned int,unsigned int,BOOL,BOOL)::$_1,void,WebCore::SharedMemoryHandle &&>::call(WTF::ApproximateTime *a1, unint64_t a2)
{
  WebKit::RemoteGraphicsContextGLProxy *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  int v21;
  IPC::Encoder *v22;
  WTF *v23;
  void *v24;
  unsigned __int8 ***result;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  unsigned int v41;
  uint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  IPC::Encoder *v46;

  v3 = (WebKit::RemoteGraphicsContextGLProxy *)*((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)v3 + 9);
  v5 = *((_QWORD *)v3 + 12);
  v6 = *(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout;
  v7 = INFINITY;
  if (fabs(*(double *)&WebKit::RemoteGraphicsContextGLProxy::defaultSendTimeout) != INFINITY)
  {
    WTF::ApproximateTime::now(a1);
    v7 = v6 + v8;
  }
  if (*(_QWORD *)(v5 + 48) != v4)
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v43, v7);
    if (!v45)
      goto LABEL_22;
    v27 = v43;
    v26 = v44;
    v28 = (v43 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v29 = v28 - v43;
    if (v28 >= v43)
    {
      v30 = v29 + 2;
      if (v29 <= 0xFFFFFFFFFFFFFFFDLL && v30 <= v44)
      {
        *(_WORD *)(v43 + v29) = 2822;
LABEL_31:
        v32 = (_QWORD *)((v27 + v30 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v32 >= v27 + v30)
        {
          v30 = (unint64_t)v32 - v27 + 8;
          if ((unint64_t)v32 - v27 > 0xFFFFFFFFFFFFFFF7 || v30 > v26)
            goto LABEL_22;
          *v32 = v4;
        }
        if (v26)
        {
          v34 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v35 = *(_QWORD *)(v5 + 56);
          if (v34 + 16 >= v35)
            v34 = 0;
          if (v30 <= 0x10)
            v30 = 16;
          v36 = v34 + v30;
          if (v35 <= v36)
            v36 = 0;
          *(_QWORD *)(v5 + 72) = v36;
          v37 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 16) + 128);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v36, v37));
          v39 = *(_DWORD *)(v5 + 108);
          if (v38 == 0x80000000 || v39 != 0)
          {
            v41 = v39 + 1;
            *(_DWORD *)(v5 + 108) = v41;
            if (v41 >= *(_DWORD *)(v5 + 104))
            {
              if (*(_BYTE *)(v5 + 96))
                MEMORY[0x19AEBA1A0](*(unsigned int *)(v5 + 84));
              *(_DWORD *)(v5 + 108) = 0;
            }
          }
          *(_QWORD *)(v5 + 48) = v4;
          goto LABEL_4;
        }
LABEL_22:
        WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(v3);
        return (unsigned __int8 ***)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)v3 + 2) + 2312))((_QWORD *)v3 + 2);
      }
      v26 = 0;
    }
    v30 = 0;
    goto LABEL_31;
  }
LABEL_4:
  IPC::StreamClientConnectionBuffer::tryAcquire(v5 + 56, &v43, v7);
  if (!v45)
    goto LABEL_22;
  v9 = (v43 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v10 = v9 - v43;
  if (v9 < v43 || ((v11 = v10 + 2, v10 <= 0xFFFFFFFFFFFFFFFDLL) ? (v12 = v11 > v44) : (v12 = 1), v12))
    v11 = 0;
  else
    *(_WORD *)(v43 + v10) = 2821;
  v13 = *(_QWORD *)(v5 + 64);
  v14 = (*(_QWORD *)(v5 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v15 = *(_QWORD *)(v5 + 56);
  if (v14 + 16 >= v15)
    v14 = 0;
  if (v11 <= 0x10)
    v11 = 16;
  v16 = v14 + v11;
  if (v15 <= v16)
    v16 = 0;
  *(_QWORD *)(v5 + 72) = v16;
  v17 = (unint64_t *)(*(_QWORD *)(v13 + 16) + 128);
  do
    __ldaxr(v17);
  while (__stlxr(v16, v17));
  *(_DWORD *)(v5 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v42, (uint64_t **)(v5 + 8));
  v18 = v42;
  v19 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v19 = 1017;
  *(_QWORD *)(v19 + 8) = v4;
  *(_QWORD *)(v19 + 528) = v19 + 16;
  *(_QWORD *)(v19 + 536) = v19 + 16;
  *(_OWORD *)(v19 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v19 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v19);
  v46 = (IPC::Encoder *)v19;
  IPC::ArgumentCoder<WebCore::SharedMemoryHandle,void>::encode((IPC::Encoder *)v19, a2);
  v21 = IPC::Connection::sendMessageImpl((uint64_t)v18, (uint64_t *)&v46, 1, 0);
  v22 = v46;
  v46 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v20);
    WTF::fastFree(v23, v24);
  }
  result = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v42);
  if (v21)
    goto LABEL_22;
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::videoFrameToImage(WebCore::VideoFrame &)::$_0,void>::call(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  WebKit::RemoteVideoFrameObjectHeapProxyProcessor::getNativeImage(*(IPC::Semaphore ***)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 160) + 8), *(const WebCore::VideoFrame **)(a1 + 24), &v23);
  v3 = *(uint64_t **)(a1 + 8);
  v4 = v23;
  v23 = 0;
  v5 = *v3;
  *v3 = v4;
  if (!v5)
    goto LABEL_18;
  v6 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEABB3C](v6);
LABEL_6:
  v8 = *(_QWORD *)(v6 + 8);
  v9 = v8 - 1;
  *(_QWORD *)(v6 + 8) = v8 - 1;
  if (v8 == 1)
  {
    v21 = *(_QWORD *)(v6 + 16);
    v10 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    v11 = v21 != 0;
  }
  else
  {
    v10 = 0;
    v11 = 1;
  }
  v12 = __ldxr((unsigned __int8 *)v6);
  if (v12 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (v9)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v6))
    goto LABEL_13;
  if (v9)
    goto LABEL_18;
LABEL_14:
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (!v11)
    WTF::fastFree((WTF *)v6, v2);
LABEL_18:
  v13 = v23;
  v23 = 0;
  if (!v13)
    return;
  v14 = *(_QWORD *)(v13 + 8);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_23;
  }
  MEMORY[0x19AEABB3C](v14);
LABEL_23:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 != 1)
  {
    __clrex();
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v14);
    if (v17)
      return;
    goto LABEL_31;
  }
  if (__stlxr(0, (unsigned __int8 *)v14))
    goto LABEL_30;
  if (v17)
    return;
LABEL_31:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::OptionSet<GCGLErrorCode>>>(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  v1 = a1[1];
  v2 = *a1;
  v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    v9 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v11 = a1[3];
    if (v11)
    {
      v20 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v2, v1);
        a1 = v20;
        v10 = *v20;
        v9 = v20[1];
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
    }
  }
  else
  {
    v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      LODWORD(v5) = *v4;
      v6 = (v5 & 0x82) == 0;
      if ((v5 & 0x82) != 0)
        LODWORD(v5) = 0;
      goto LABEL_5;
    }
    v9 = v1;
    v10 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  v5 = a1[3];
  if (v5)
  {
    v19 = a1;
    if (v9)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v10);
    LODWORD(v5) = 0;
    v6 = 0;
    a1 = v19;
  }
  else
  {
    v6 = 0;
  }
LABEL_5:
  v7 = v5 | (v6 << 8);
  LODWORD(v5) = 256;
  if (v7 <= 0xFF)
  {
    v12 = *a1;
    v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v5 = a1[3];
    if (v5)
    {
      v17 = v7;
      v18 = a1;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v12);
        LODWORD(v5) = 0;
        v14 = *v18;
        v15 = v18[1];
        v16 = v18[3];
        *v18 = 0;
        v18[1] = 0;
        if (v16)
        {
          v7 = v17;
          if (v15)
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 16))(v16, v14);
            v7 = v17;
            LODWORD(v5) = 0;
          }
        }
        else
        {
          v7 = v17;
        }
      }
      else
      {
        LODWORD(v5) = 0;
      }
    }
  }
  if (v7 <= 0x100)
    LOBYTE(v7) = 0;
  return v5 | v7;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetErrors>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3060[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E36D0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetErrorsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetErrorsEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::SimulateEventForTesting,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  void *v51;
  IPC::Encoder *v52;
  WTF *v53;
  void *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (!v58)
    return 15;
  v23 = v56;
  v22 = v57;
  v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v25 = v24 - v56;
  if (v24 >= v56)
  {
    v26 = v25 + 2;
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v26 <= v57)
    {
      *(_WORD *)(v56 + v25) = 2822;
      goto LABEL_32;
    }
    v22 = 0;
  }
  v26 = 0;
LABEL_32:
  v28 = (_QWORD *)((v23 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v28 >= v23 + v26)
  {
    v26 = (unint64_t)v28 - v23 + 8;
    if ((unint64_t)v28 - v23 > 0xFFFFFFFFFFFFFFF7 || v26 > v22)
      return 17;
    *v28 = a3;
  }
  if (!v22)
    return 17;
  v30 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(_QWORD *)(a1 + 56);
  if (v30 + 16 >= v31)
    v30 = 0;
  if (v26 <= 0x10)
    v26 = 16;
  v32 = v30 + v26;
  if (v31 <= v32)
    v32 = 0;
  *(_QWORD *)(a1 + 72) = v32;
  v33 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v32, v33));
  v35 = *(_DWORD *)(a1 + 108);
  if (v34 == 0x80000000 || v35 != 0)
  {
    v38 = v35 + 1;
    *(_DWORD *)(a1 + 108) = v38;
    if (v38 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (!v58)
    return 15;
  v8 = v56;
  v9 = v57;
  v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v56;
  if (v10 < v56)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v57)
      goto LABEL_60;
    *(_WORD *)(v56 + v11) = 1020;
  }
  if (v12 < v9)
  {
    *(_BYTE *)(v8 + v12) = *a2;
    v14 = *(_QWORD *)(a1 + 64);
    v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = *(_QWORD *)(a1 + 56);
    if (v15 + 16 >= v16)
      v15 = 0;
    if (v12 <= 0xF)
      v12 = 15;
    v17 = v12 + v15;
    if (v16 > v17 + 1)
      v18 = v17 + 1;
    else
      v18 = 0;
    *(_QWORD *)(a1 + 72) = v18;
    v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v18, v19));
    if (v20 != 0x80000000 && !*(_DWORD *)(a1 + 108))
      return 0;
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    v21 = 0;
    *(_DWORD *)(a1 + 108) = 0;
    return v21;
  }
  if (!v58)
  {
    __break(1u);
LABEL_81:
    v41 = 0;
    goto LABEL_66;
  }
LABEL_60:
  v39 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v40 = v39 - v56;
  if (v39 < v56)
    goto LABEL_81;
  v41 = v40 + 2;
  if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v57)
    goto LABEL_81;
  *(_WORD *)(v56 + v40) = 2821;
LABEL_66:
  v43 = *(_QWORD *)(a1 + 64);
  v44 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v45 = *(_QWORD *)(a1 + 56);
  if (v44 + 16 >= v45)
    v44 = 0;
  if (v41 <= 0x10)
    v41 = 16;
  v46 = v44 + v41;
  if (v45 <= v46)
    v46 = 0;
  *(_QWORD *)(a1 + 72) = v46;
  v47 = (unint64_t *)(*(_QWORD *)(v43 + 16) + 128);
  do
    __ldaxr(v47);
  while (__stlxr(v46, v47));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
  v48 = v55;
  v49 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v49 = 1020;
  *(_QWORD *)(v49 + 8) = a3;
  *(_QWORD *)(v49 + 528) = v49 + 16;
  *(_QWORD *)(v49 + 536) = v49 + 16;
  *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v49 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
  v59 = (IPC::Encoder *)v49;
  v50 = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v49, 1uLL, 1) = v50;
  v21 = IPC::Connection::sendMessageImpl((uint64_t)v48, (uint64_t *)&v59, 1, 0);
  v52 = v59;
  v59 = 0;
  if (v52)
  {
    IPC::Encoder::~Encoder(v52, v51);
    WTF::fastFree(v53, v54);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
  return v21;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferSubDataInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3080[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E36E0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unint64_t IPC::Decoder::decode<std::optional<WebCore::IntSize>>(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned int v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v2 = a1[1];
  v3 = *a1;
  v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    v12 = 0;
    v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(unint64_t))(*(_QWORD *)v14 + 16))(v14);
        v13 = *a1;
        v12 = a1[1];
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
    goto LABEL_10;
  }
  v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (unint64_t)(v5 + 1);
  if (!v3)
  {
    v12 = v2;
    v13 = 0;
LABEL_10:
    v2 = 0;
    v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(_QWORD *)v15 + 16))(v15, v13, v12);
        v3 = *a1;
        v2 = a1[1];
      }
      else
      {
        v2 = 0;
        v3 = 0;
      }
    }
    goto LABEL_11;
  }
  v6 = *v5;
  if (v6 >= 2)
  {
LABEL_11:
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16 && v2)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v16 + 16))(v16, v3);
    goto LABEL_16;
  }
  if (!v6)
  {
    v9 = 0;
    v10 = 0;
    return v9 | v10;
  }
  v7 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  if (v8)
  {
    v9 = v7 & 0xFFFFFFFFFFFFFF00;
    v10 = v7;
    return v9 | v10;
  }
  v17 = *a1;
  v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v19 = a1[3];
  if (v19 && v18)
    (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v19 + 16))(v19, v17);
LABEL_16:
  v20 = *a1;
  v21 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v22 = a1[3];
  if (v22)
  {
    if (v21)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v22 + 16))(v22, v20);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  return v9 | v10;
}

unint64_t *IPC::Decoder::operator>><std::tuple<std::optional<WebCore::IntSize>,std::span<unsigned char const,18446744073709551615ul>>>(unint64_t *a1, uint64_t a2)
{
  int v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15;
  char v16;
  _BYTE v17[20];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = IPC::Decoder::decode<std::optional<WebCore::IntSize>>(a1);
  if ((v6 & 0xFF00000000) != 0
    && (v7 = v5,
        v2 = v6,
        IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>((uint64_t *)a1, (uint64_t)&v15),
        v16))
  {
    v8 = v7 & 0xFFFFFFFFFFFFFF00;
    *(_OWORD *)&v17[4] = v15;
    v9 = v7;
    v10 = 1;
  }
  else
  {
    v11 = *a1;
    v12 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v13 = a1[3];
    if (v13 && v12)
      (*(void (**)(unint64_t, unint64_t))(*(_QWORD *)v13 + 16))(v13, v11);
    v9 = 0;
    v8 = 0;
    v10 = 0;
  }
  if (*(unsigned __int8 *)(a2 + 32) == v10)
  {
    if (*(_BYTE *)(a2 + 32))
    {
      *(_QWORD *)a2 = v8 | v9;
      *(_BYTE *)(a2 + 8) = v2;
      *(_OWORD *)(a2 + 16) = *(_OWORD *)&v17[4];
    }
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    *(_BYTE *)(a2 + 32) = 0;
  }
  else
  {
    *(_QWORD *)a2 = v8 | v9;
    *(_DWORD *)(a2 + 8) = v2;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)v17;
    *(_DWORD *)(a2 + 28) = *(_DWORD *)&v17[16];
    *(_BYTE *)(a2 + 32) = 1;
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::ReadPixelsInline>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E30A0[v4])(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E36F0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 3);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_QWORD *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = result;
  v4 = *(_QWORD *)a2;
  v5 = result[2];
  v6 = *result + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
  {
LABEL_8:
    if (!v4)
      return result;
    goto LABEL_9;
  }
  v10 = v9 + v5;
  v11 = v10 + 8;
  if (v10 <= 0xFFFFFFFFFFFFFFF7 && v11 <= result[1])
  {
    *(_QWORD *)(*result + v10) = v4;
    result[2] = v11;
    goto LABEL_8;
  }
  result[1] = 0;
  if (v4)
  {
LABEL_9:
    IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(result, *(const void **)(a2 + 8), v4);
    return (_QWORD *)IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(v3, *(const void **)(a2 + 16), v4);
  }
  return result;
}

char *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int>,void>::encode<IPC::Encoder,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;
  const void *v6;
  uint64_t v7;
  char *v8;
  const void *v9;
  char *v10;

  v4 = *a2;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  if (v4)
  {
    v6 = (const void *)a2[1];
    v7 = 4 * v4;
    v8 = IPC::Encoder::grow(a1, 4uLL, v7);
    memcpy(v8, v6, v7);
    v9 = (const void *)a2[2];
    v10 = IPC::Encoder::grow(a1, 4uLL, v7);
    return (char *)memcpy(v10, v9, v7);
  }
  return result;
}

_QWORD *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::StreamConnectionEncoder,0ul,1ul,2ul>(_QWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = result;
  v4 = *(_QWORD *)a2;
  v5 = result[2];
  v6 = *result + v5;
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 >= v6;
  v9 = v7 - v6;
  if (!v8)
  {
LABEL_8:
    if (!v4)
      return result;
    goto LABEL_9;
  }
  v10 = v9 + v5;
  v11 = v10 + 8;
  if (v10 <= 0xFFFFFFFFFFFFFFF7 && v11 <= result[1])
  {
    *(_QWORD *)(*result + v10) = v4;
    result[2] = v11;
    goto LABEL_8;
  }
  result[1] = 0;
  if (v4)
  {
LABEL_9:
    IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(result, *(const void **)(a2 + 8), v4);
    IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(v3, *(const void **)(a2 + 16), v4);
    return (_QWORD *)IPC::StreamConnectionEncoder::encodeSpan<float const,18446744073709551615ul>(v3, *(const void **)(a2 + 24), v4);
  }
  return result;
}

char *IPC::ArgumentCoder<IPC::ArrayReferenceTuple<int,int,int>,void>::encode<IPC::Encoder,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t *a2)
{
  uint64_t v4;
  char *result;
  const void *v6;
  uint64_t v7;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;
  char *v12;

  v4 = *a2;
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v4;
  if (v4)
  {
    v6 = (const void *)a2[1];
    v7 = 4 * v4;
    v8 = IPC::Encoder::grow(a1, 4uLL, v7);
    memcpy(v8, v6, v7);
    v9 = (const void *)a2[2];
    v10 = IPC::Encoder::grow(a1, 4uLL, v7);
    memcpy(v10, v9, v7);
    v11 = (const void *)a2[3];
    v12 = IPC::Encoder::grow(a1, 4uLL, v7);
    return (char *)memcpy(v12, v11, v7);
  }
  return result;
}

uint64_t IPC::Connection::waitForAndDispatchImmediately<Messages::RemoteGraphicsContextGLProxy::WasCreated>(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;

  IPC::Connection::waitForMessage((unsigned __int8 ***)a1, 0x36Du, a2, a3, (uint64_t)&v10, a4);
  v5 = v11;
  if (!v11)
  {
    v7 = atomic_load((unsigned __int8 *)(a1 + 33));
    v5 = v11;
    if ((v7 & 1) != 0)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), a1, v10);
      v6 = 0;
      v5 = v11;
    }
    else
    {
      v6 = 1;
    }
    if (v5 == -1)
      return v6;
    goto LABEL_8;
  }
  if (v11 == 1)
  {
    v6 = v10;
LABEL_8:
    ((void (*)(char *, uint64_t *))off_1E34E3480[v5])(&v12, &v10);
    return v6;
  }
  v9 = std::__throw_bad_variant_access[abi:sn180100]();
  return WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &off_1E34E3710;
  v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E34E3710;
  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebKit::RemoteGraphicsContextGLProxy::disconnectGpuProcessIfNeeded(void)::$_0,void>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;

  v1 = *((_QWORD *)result + 2);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      v4 = *(_QWORD *)(v2 + 16);
      if (__ldaxr((unsigned __int8 *)v4))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v4))
      {
        goto LABEL_8;
      }
      MEMORY[0x19AEABB3C](v4);
LABEL_8:
      ++*(_QWORD *)(v4 + 8);
      v6 = __ldxr((unsigned __int8 *)v4);
      if (v6 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v4))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_13:
      v7 = *((_QWORD *)v3 + 1);
      v8 = *(_QWORD *)(v2 + 24);
      v10 = &v11;
      v11 = v7;
      IPC::Connection::send<Messages::GPUConnectionToWebProcess::ReleaseGraphicsContextGL>(v8, &v10, 0, 1, 0);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::GPUProcessConnection,(WTF::DestructionThread)0>(*(unsigned __int8 **)(v2 + 16), v9);
    }
  }
  return result;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ActiveTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 880;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 880;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::AttachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 881;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 881;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, uint64_t **a2, uint64_t a3, double a4)
{
  IPC::Encoder *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  IPC::Encoder *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  int v42;
  void *v43;
  IPC::Encoder *v44;
  WTF *v45;
  void *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v52;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int v59;
  unsigned int v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  unint64_t v65;
  char v66;
  IPC::Encoder *v67;
  unint64_t v68;
  unint64_t v69;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v64, a4);
      if (!v66)
        break;
      v8 = v64;
      v9 = v65;
      v67 = v64;
      v68 = v65;
      v69 = 0;
      v10 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v64;
      if (v10 < (unint64_t)v64)
      {
        v12 = 0;
      }
      else
      {
        v12 = v11 + 2;
        if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v65)
        {
          v9 = 0;
          v12 = 0;
          v68 = 0;
        }
        else
        {
          *(_WORD *)((char *)v64 + v11) = 885;
          v69 = v11 + 2;
        }
      }
      v14 = ((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - ((_QWORD)v8 + v12);
      if (v14 >= (unint64_t)v8 + v12)
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
          v68 = 0;
        }
        else
        {
          *(_DWORD *)((char *)v8 + v16) = *(_DWORD *)a2;
          v69 = v17;
          v12 = v17;
        }
      }
      v19 = (char *)(((unint64_t)v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if (v19 >= (char *)v8 + v12)
      {
        if ((unint64_t)(v19 - (char *)v8) > 0xFFFFFFFFFFFFFFFBLL || v19 - (char *)v8 + 4 > v9)
        {
          v68 = 0;
        }
        else
        {
          *(_DWORD *)v19 = *((_DWORD *)a2 + 1);
          v69 = v19 - (char *)v8 + 4;
        }
      }
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v67, a2[1]);
      if (v68)
      {
        v22 = v69;
        v23 = *(_QWORD *)(a1 + 64);
        v24 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = *(_QWORD *)(a1 + 56);
        if (v24 + 16 >= v25)
          v24 = 0;
        if (v69 <= 0x10)
          v22 = 16;
        v26 = v24 + v22;
        if (v25 <= v26)
          v27 = 0;
        else
          v27 = v26;
        *(_QWORD *)(a1 + 72) = v27;
        v28 = (unint64_t *)(*(_QWORD *)(v23 + 16) + 128);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v27, v28));
        if (v29 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v66)
      {
        v31 = ((unint64_t)v64 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = v31 - (_QWORD)v64;
        if (v31 < (unint64_t)v64)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          if (v32 <= 0xFFFFFFFFFFFFFFFDLL && v32 + 2 <= v65)
          {
            *(_WORD *)((char *)v64 + v32) = 2821;
            v33 = v32 + 2;
          }
        }
        v34 = *(_QWORD *)(a1 + 64);
        v35 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = *(_QWORD *)(a1 + 56);
        if (v35 + 16 >= v36)
          v35 = 0;
        if (v33 <= 0x10)
          v33 = 16;
        v37 = v35 + v33;
        if (v36 <= v37)
          v37 = 0;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 128);
        do
          __ldaxr(v38);
        while (__stlxr(v37, v38));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v63, (uint64_t **)(a1 + 8));
        v39 = v63;
        v40 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v40 = 885;
        *(_QWORD *)(v40 + 8) = a3;
        *(_QWORD *)(v40 + 528) = v40 + 16;
        *(_QWORD *)(v40 + 536) = v40 + 16;
        *(_OWORD *)(v40 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v40 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v40);
        v67 = (IPC::Encoder *)v40;
        v41 = *(_DWORD *)a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v41;
        v42 = *((_DWORD *)a2 + 1);
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v40, 4uLL, 4) = v42;
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v40, a2[1]);
        v30 = IPC::Connection::sendMessageImpl((uint64_t)v39, (uint64_t *)&v67, 1, 0);
        v44 = v67;
        v67 = 0;
        if (v44)
        {
          IPC::Encoder::~Encoder(v44, v43);
          WTF::fastFree(v45, v46);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v63);
        return v30;
      }
      __break(1u);
LABEL_91:
      v47 = 0;
LABEL_92:
      v50 = 0;
LABEL_60:
      v52 = (char *)(((unint64_t)v21 + v50 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v52 >= (char *)v21 + v50)
      {
        v50 = v52 - (char *)v21 + 8;
        if ((unint64_t)(v52 - (char *)v21) > 0xFFFFFFFFFFFFFFF7 || v50 > v47)
          return 17;
        *(_QWORD *)v52 = a3;
      }
      if (!v47)
        return 17;
      v54 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v55 = *(_QWORD *)(a1 + 56);
      if (v54 + 16 >= v55)
        v54 = 0;
      if (v50 <= 0x10)
        v50 = 16;
      v56 = v54 + v50;
      if (v55 <= v56)
        v56 = 0;
      *(_QWORD *)(a1 + 72) = v56;
      v57 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v56, v57));
      v59 = *(_DWORD *)(a1 + 108);
      if (v58 == 0x80000000 || v59 != 0)
      {
        v62 = v59 + 1;
        *(_DWORD *)(a1 + 108) = v62;
        if (v62 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v67, a4);
    if ((_BYTE)v69)
    {
      v21 = v67;
      v47 = v68;
      v48 = ((unint64_t)v67 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v49 = v48 - (_QWORD)v67;
      if (v48 < (unint64_t)v67)
        goto LABEL_92;
      v50 = v49 + 2;
      if (v49 > 0xFFFFFFFFFFFFFFFDLL || v50 > v68)
        goto LABEL_91;
      *(_WORD *)((char *)v67 + v49) = 2822;
      goto LABEL_60;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 886;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 886;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 889;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 889;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 890;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 890;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BindTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 892;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 892;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 895;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 895;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 896;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 896;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendEquationSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 897;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 897;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 900;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 900;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::BlendFuncSeparate,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 901;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 901;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>(uint64_t *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _DWORD *v21;
  unint64_t v22;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = a2[1];
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v17 = v16 - (v2 + v3);
  if (v16 >= v2 + v3)
  {
    v18 = v16 - v2;
    v19 = v17 + v3 + 4;
    if (v18 > 0xFFFFFFFFFFFFFFFBLL || v19 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v18) = a2[2];
      result[2] = v19;
      v2 = *result;
      v3 = v19;
    }
  }
  v21 = (_DWORD *)((v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v21 >= v2 + v3)
  {
    v22 = (unint64_t)v21 - v2 + 4;
    if ((unint64_t)v21 - v2 > 0xFFFFFFFFFFFFFFFBLL || v22 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v21 = a2[3];
      result[2] = v22;
    }
  }
  return result;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  IPC::Encoder *v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t *v60;
  int v61;
  uint64_t v62;
  void *v63;
  uint64_t *v64;
  IPC::Encoder *v65;
  WTF *v66;
  void *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_72;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_71;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3546;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xDDAu, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if (!(_BYTE)v98)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_68;
    }
    if (v97 == 1)
    {
      v52 = (char)v96;
LABEL_67:
      LOBYTE(v86) = v52;
      v88 = 1;
      v89 = 1;
      goto LABEL_68;
    }
    if (v97)
      goto LABEL_144;
    v50 = IPC::Decoder::decode<std::tuple<float>>(v96);
    if ((v50 & 0xFF00000000) == 0)
    {
      v52 = 13;
      goto LABEL_67;
    }
    if (!(_BYTE)v98)
      goto LABEL_137;
    if (v97)
      goto LABEL_144;
    v51 = (IPC::Encoder *)v96;
    v96 = 0;
    v93 = v51;
    v94 = v50;
    v95 = 0;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
    v89 = 1;
    if (v95 != -1)
      ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
LABEL_68:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_71:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_72:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v53 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = v53 - v90;
  if (v53 < v90)
    goto LABEL_145;
  v55 = 0;
  if (v54 <= 0xFFFFFFFFFFFFFFFDLL && v54 + 2 <= v91)
  {
    *(_WORD *)(v90 + v54) = 2821;
    v55 = v54 + 2;
  }
  while (2)
  {
    v56 = v8[8];
    v57 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v8[7];
    if (v57 + 16 >= v58)
      v57 = 0;
    if (v55 <= 0x10)
      v55 = 16;
    v59 = v57 + v55;
    if (v58 <= v59)
      v59 = 0;
    v8[9] = v59;
    v60 = (unint64_t *)(*(_QWORD *)(v56 + 16) + 128);
    do
      __ldaxr(v60);
    while (__stlxr(v59, v60));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3546, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v61 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v61;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
        goto LABEL_95;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v55 = 0;
      continue;
    }
    break;
  }
  v62 = IPC::Decoder::decode<std::tuple<float>>(v86);
  if ((v62 & 0xFF00000000) != 0)
  {
    if (!(_DWORD)v87)
    {
      v64 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v64;
      *(_DWORD *)(a4 + 8) = v62;
LABEL_95:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_96:
      ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
      goto LABEL_97;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 != -1)
    goto LABEL_96;
LABEL_97:
  v65 = v93;
  v93 = 0;
  if (v65)
  {
    IPC::Encoder::~Encoder(v65, v63);
    WTF::fastFree(v66, v67);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::CheckFramebufferStatus>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3728[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Clear,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 908;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 908;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearColor,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 913;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::encode((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 913;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::PathQuadCurveTo,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearDepth,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 914;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 914;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ClearStencil,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 915;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 915;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::ColorMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  char v52;
  void *v53;
  IPC::Encoder *v54;
  WTF *v55;
  void *v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  IPC::Encoder *v61;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
  if (!v60)
    return 15;
  v23 = v58;
  v22 = v59;
  v24 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v25 = v24 - v58;
  if (v24 >= v58)
  {
    v26 = v25 + 2;
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v26 <= v59)
    {
      *(_WORD *)(v58 + v25) = 2822;
      goto LABEL_35;
    }
    v22 = 0;
  }
  v26 = 0;
LABEL_35:
  v28 = (_QWORD *)((v23 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v28 >= v23 + v26)
  {
    v26 = (unint64_t)v28 - v23 + 8;
    if ((unint64_t)v28 - v23 > 0xFFFFFFFFFFFFFFF7 || v26 > v22)
      return 17;
    *v28 = a3;
  }
  if (!v22)
    return 17;
  v30 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(_QWORD *)(a1 + 56);
  if (v30 + 16 >= v31)
    v30 = 0;
  if (v26 <= 0x10)
    v26 = 16;
  v32 = v30 + v26;
  if (v31 <= v32)
    v32 = 0;
  *(_QWORD *)(a1 + 72) = v32;
  v33 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v32, v33));
  v35 = *(_DWORD *)(a1 + 108);
  if (v34 == 0x80000000 || v35 != 0)
  {
    v38 = v35 + 1;
    *(_DWORD *)(a1 + 108) = v38;
    if (v38 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
  if (!v60)
    return 15;
  v8 = v58;
  v9 = v59;
  v10 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v58;
  if (v10 < v58)
  {
LABEL_79:
    v12 = 0;
    goto LABEL_9;
  }
  v12 = v11 + 2;
  if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v59)
  {
    v9 = 0;
    goto LABEL_79;
  }
  *(_WORD *)(v58 + v11) = 917;
LABEL_9:
  if (v12 < v9)
  {
    *(_BYTE *)(v8 + v12) = *a2;
    if (v12 + 1 < v9)
    {
      *(_BYTE *)(v8 + v12 + 1) = a2[1];
      if (v12 + 2 < v9)
      {
        *(_BYTE *)(v8 + v12 + 2) = a2[2];
        if (v12 + 3 < v9)
        {
          *(_BYTE *)(v8 + v12 + 3) = a2[3];
          v14 = *(_QWORD *)(a1 + 64);
          v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
          v16 = *(_QWORD *)(a1 + 56);
          if (v15 + 16 >= v16)
            v15 = 0;
          if (v12 <= 0xC)
            v12 = 12;
          v17 = v12 + v15 + 4;
          if (v16 <= v17)
            v18 = 0;
          else
            v18 = v17;
          *(_QWORD *)(a1 + 72) = v18;
          v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v18, v19));
          if (v20 != 0x80000000 && !*(_DWORD *)(a1 + 108))
            return 0;
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          v21 = 0;
          *(_DWORD *)(a1 + 108) = 0;
          return v21;
        }
      }
    }
  }
  if (v60)
  {
    v39 = (v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v40 = v39 - v58;
    if (v39 >= v58)
    {
      v41 = 0;
      if (v40 <= 0xFFFFFFFFFFFFFFFDLL && v40 + 2 <= v59)
      {
        *(_WORD *)(v58 + v40) = 2821;
        v41 = v40 + 2;
      }
      goto LABEL_67;
    }
  }
  else
  {
    __break(1u);
  }
  v41 = 0;
LABEL_67:
  v42 = *(_QWORD *)(a1 + 64);
  v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v44 = *(_QWORD *)(a1 + 56);
  if (v43 + 16 >= v44)
    v43 = 0;
  if (v41 <= 0x10)
    v41 = 16;
  v45 = v43 + v41;
  if (v44 <= v45)
    v45 = 0;
  *(_QWORD *)(a1 + 72) = v45;
  v46 = (unint64_t *)(*(_QWORD *)(v42 + 16) + 128);
  do
    __ldaxr(v46);
  while (__stlxr(v45, v46));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v57, (uint64_t **)(a1 + 8));
  v47 = v57;
  v48 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v48 = 917;
  *(_QWORD *)(v48 + 8) = a3;
  *(_QWORD *)(v48 + 528) = v48 + 16;
  *(_QWORD *)(v48 + 536) = v48 + 16;
  *(_OWORD *)(v48 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v48 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v48);
  v61 = (IPC::Encoder *)v48;
  v49 = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v48, 1uLL, 1) = v49;
  v50 = a2[1];
  *IPC::Encoder::grow((IPC::Encoder *)v48, 1uLL, 1) = v50;
  v51 = a2[2];
  *IPC::Encoder::grow((IPC::Encoder *)v48, 1uLL, 1) = v51;
  v52 = a2[3];
  *IPC::Encoder::grow((IPC::Encoder *)v48, 1uLL, 1) = v52;
  v21 = IPC::Connection::sendMessageImpl((uint64_t)v47, (uint64_t *)&v61, 1, 0);
  v54 = v61;
  v61 = 0;
  if (v54)
  {
    IPC::Encoder::~Encoder(v54, v53);
    WTF::fastFree(v55, v56);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v57);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CompileShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 919;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 919;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  void *v67;
  IPC::Encoder *v68;
  WTF *v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;
  IPC::Encoder *v96;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v93, a4);
  if (!v95)
    return 15;
  v72 = v93;
  v71 = v94;
  v73 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v74 = v73 - v93;
  if (v73 >= v93)
  {
    v75 = v74 + 2;
    if (v74 <= 0xFFFFFFFFFFFFFFFDLL && v75 <= v94)
    {
      *(_WORD *)(v93 + v74) = 2822;
      goto LABEL_87;
    }
    v71 = 0;
  }
  v75 = 0;
LABEL_87:
  v77 = (_QWORD *)((v72 + v75 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v77 >= v72 + v75)
  {
    v75 = (unint64_t)v77 - v72 + 8;
    if ((unint64_t)v77 - v72 > 0xFFFFFFFFFFFFFFF7 || v75 > v71)
      return 17;
    *v77 = a3;
  }
  if (!v71)
    return 17;
  v79 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v80 = *(_QWORD *)(a1 + 56);
  if (v79 + 16 >= v80)
    v79 = 0;
  if (v75 <= 0x10)
    v75 = 16;
  v81 = v79 + v75;
  if (v80 <= v81)
    v81 = 0;
  *(_QWORD *)(a1 + 72) = v81;
  v82 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v81, v82));
  v84 = *(_DWORD *)(a1 + 108);
  if (v83 == 0x80000000 || v84 != 0)
  {
    v87 = v84 + 1;
    *(_DWORD *)(a1 + 108) = v87;
    if (v87 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v93, a4);
  if (!v95)
    return 15;
  v8 = v93;
  v9 = v94;
  v10 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v93;
  if (v10 >= v93)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v94)
    {
      *(_WORD *)(v93 + v11) = 929;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v91 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v91 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v88 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v91)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v88 = v91;
      v12 = v30 + 4;
    }
  }
  else
  {
    v88 = v91;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v89 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v88)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v89 = v88;
      v12 = v33 + 4;
    }
  }
  else
  {
    v89 = v88;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = v34 - (v8 + v12);
  if (v34 < v8 + v12)
  {
    v36 = v89;
  }
  else
  {
    v36 = 0;
    v37 = v35 + v12;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v89)
    {
      *(_DWORD *)(v8 + v37) = a2[5];
      v36 = v89;
      v12 = v37 + 4;
    }
  }
  v38 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v38 >= v8 + v12;
  v39 = v38 - (v8 + v12);
  if (v25)
  {
    v90 = 0;
    v40 = v39 + v12;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v36)
    {
      *(_DWORD *)(v8 + v40) = a2[6];
      v90 = v36;
      v12 = v40 + 4;
    }
  }
  else
  {
    v90 = v36;
  }
  v41 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v41 >= v8 + v12)
  {
    v42 = (char *)v41 - v8;
    if ((unint64_t)v41 - v8 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_61;
    v12 = (unint64_t)(v42 + 4);
    if ((unint64_t)(v42 + 4) > v90)
      goto LABEL_61;
    *v41 = a2[7];
  }
  if (v90)
  {
    v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v44 = *(_QWORD *)(a1 + 56);
    if (v43 + 16 < v44)
    {
LABEL_51:
      if (v12 <= 0x10)
        v12 = 16;
      v45 = v43 + v12;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *(_QWORD *)(a1 + 72) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      if (v48 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v49 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v49;
    }
LABEL_119:
    v43 = 0;
    goto LABEL_51;
  }
LABEL_61:
  v44 = v95;
  if (!v95)
  {
    __break(1u);
    goto LABEL_119;
  }
  v50 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = v50 - v93;
  if (v50 < v93)
  {
    v52 = 0;
  }
  else
  {
    v52 = 0;
    if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v51 + 2 <= v94)
    {
      *(_WORD *)(v93 + v51) = 2821;
      v52 = v51 + 2;
    }
  }
  v53 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = *(_QWORD *)(a1 + 56);
  if (v53 + 16 >= v54)
    v53 = 0;
  if (v52 <= 0x10)
    v52 = 16;
  v55 = v53 + v52;
  if (v54 <= v55)
    v55 = 0;
  *(_QWORD *)(a1 + 72) = v55;
  v56 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v56);
  while (__stlxr(v55, v56));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v92, (uint64_t **)(a1 + 8));
  v57 = v92;
  v58 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v58 = 929;
  *(_QWORD *)(v58 + 8) = a3;
  *(_QWORD *)(v58 + 528) = v58 + 16;
  *(_QWORD *)(v58 + 536) = v58 + 16;
  *(_OWORD *)(v58 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v58 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v58);
  v96 = (IPC::Encoder *)v58;
  v59 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v59;
  v60 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v60;
  v61 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v61;
  v62 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v62;
  v63 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v63;
  v64 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v64;
  v65 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v65;
  v66 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v66;
  v49 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v96, 1, 0);
  v68 = v96;
  v96 = 0;
  if (v68)
  {
    IPC::Encoder::~Encoder(v68, v67);
    WTF::fastFree(v69, v70);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v92);
  return v49;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CopyTexSubImage2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  void *v67;
  IPC::Encoder *v68;
  WTF *v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v77;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  unsigned int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unsigned __int8 v95;
  IPC::Encoder *v96;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v93, a4);
  if (!v95)
    return 15;
  v72 = v93;
  v71 = v94;
  v73 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v74 = v73 - v93;
  if (v73 >= v93)
  {
    v75 = v74 + 2;
    if (v74 <= 0xFFFFFFFFFFFFFFFDLL && v75 <= v94)
    {
      *(_WORD *)(v93 + v74) = 2822;
      goto LABEL_87;
    }
    v71 = 0;
  }
  v75 = 0;
LABEL_87:
  v77 = (_QWORD *)((v72 + v75 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v77 >= v72 + v75)
  {
    v75 = (unint64_t)v77 - v72 + 8;
    if ((unint64_t)v77 - v72 > 0xFFFFFFFFFFFFFFF7 || v75 > v71)
      return 17;
    *v77 = a3;
  }
  if (!v71)
    return 17;
  v79 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v80 = *(_QWORD *)(a1 + 56);
  if (v79 + 16 >= v80)
    v79 = 0;
  if (v75 <= 0x10)
    v75 = 16;
  v81 = v79 + v75;
  if (v80 <= v81)
    v81 = 0;
  *(_QWORD *)(a1 + 72) = v81;
  v82 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v83 = __ldaxr(v82);
  while (__stlxr(v81, v82));
  v84 = *(_DWORD *)(a1 + 108);
  if (v83 == 0x80000000 || v84 != 0)
  {
    v87 = v84 + 1;
    *(_DWORD *)(a1 + 108) = v87;
    if (v87 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v93, a4);
  if (!v95)
    return 15;
  v8 = v93;
  v9 = v94;
  v10 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v93;
  if (v10 >= v93)
  {
    v12 = v11 + 2;
    if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v94)
    {
      *(_WORD *)(v93 + v11) = 930;
      goto LABEL_9;
    }
    v9 = 0;
  }
  v12 = 0;
LABEL_9:
  v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v15 = v14 - (v8 + v12);
  if (v14 >= v8 + v12)
  {
    v16 = v14 - v8;
    v17 = v15 + v12 + 4;
    if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v16) = *a2;
      v12 = v17;
    }
  }
  v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v20 = v19 - (v8 + v12);
  if (v19 >= v8 + v12)
  {
    v21 = v19 - v8;
    v22 = v20 + v12 + 4;
    if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
    {
      v9 = 0;
    }
    else
    {
      *(_DWORD *)(v8 + v21) = a2[1];
      v12 = v22;
    }
  }
  v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v24 >= v8 + v12;
  v26 = v24 - (v8 + v12);
  if (v25)
  {
    v88 = 0;
    v27 = v26 + v12;
    if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
    {
      *(_DWORD *)(v8 + v27) = a2[2];
      v88 = v9;
      v12 = v27 + 4;
    }
  }
  else
  {
    v88 = v9;
  }
  v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v28 >= v8 + v12;
  v29 = v28 - (v8 + v12);
  if (v25)
  {
    v89 = 0;
    v30 = v29 + v12;
    if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v88)
    {
      *(_DWORD *)(v8 + v30) = a2[3];
      v89 = v88;
      v12 = v30 + 4;
    }
  }
  else
  {
    v89 = v88;
  }
  v31 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v31 >= v8 + v12;
  v32 = v31 - (v8 + v12);
  if (v25)
  {
    v90 = 0;
    v33 = v32 + v12;
    if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= v89)
    {
      *(_DWORD *)(v8 + v33) = a2[4];
      v90 = v89;
      v12 = v33 + 4;
    }
  }
  else
  {
    v90 = v89;
  }
  v34 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v35 = v34 - (v8 + v12);
  if (v34 < v8 + v12)
  {
    v36 = v90;
  }
  else
  {
    v36 = 0;
    v37 = v35 + v12;
    if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= v90)
    {
      *(_DWORD *)(v8 + v37) = a2[5];
      v36 = v90;
      v12 = v37 + 4;
    }
  }
  v38 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v25 = v38 >= v8 + v12;
  v39 = v38 - (v8 + v12);
  if (v25)
  {
    v91 = 0;
    v40 = v39 + v12;
    if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= v36)
    {
      *(_DWORD *)(v8 + v40) = a2[6];
      v91 = v36;
      v12 = v40 + 4;
    }
  }
  else
  {
    v91 = v36;
  }
  v41 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v41 >= v8 + v12)
  {
    v42 = (char *)v41 - v8;
    if ((unint64_t)v41 - v8 > 0xFFFFFFFFFFFFFFFBLL)
      goto LABEL_61;
    v12 = (unint64_t)(v42 + 4);
    if ((unint64_t)(v42 + 4) > v91)
      goto LABEL_61;
    *v41 = a2[7];
  }
  if (v91)
  {
    v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v44 = *(_QWORD *)(a1 + 56);
    if (v43 + 16 < v44)
    {
LABEL_51:
      if (v12 <= 0x10)
        v12 = 16;
      v45 = v43 + v12;
      if (v44 <= v45)
        v46 = 0;
      else
        v46 = v45;
      *(_QWORD *)(a1 + 72) = v46;
      v47 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v46, v47));
      if (v48 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v49 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v49;
    }
LABEL_119:
    v43 = 0;
    goto LABEL_51;
  }
LABEL_61:
  v44 = v95;
  if (!v95)
  {
    __break(1u);
    goto LABEL_119;
  }
  v50 = (v93 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v51 = v50 - v93;
  if (v50 < v93)
  {
    v52 = 0;
  }
  else
  {
    v52 = 0;
    if (v51 <= 0xFFFFFFFFFFFFFFFDLL && v51 + 2 <= v94)
    {
      *(_WORD *)(v93 + v51) = 2821;
      v52 = v51 + 2;
    }
  }
  v53 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v54 = *(_QWORD *)(a1 + 56);
  if (v53 + 16 >= v54)
    v53 = 0;
  if (v52 <= 0x10)
    v52 = 16;
  v55 = v53 + v52;
  if (v54 <= v55)
    v55 = 0;
  *(_QWORD *)(a1 + 72) = v55;
  v56 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    __ldaxr(v56);
  while (__stlxr(v55, v56));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v92, (uint64_t **)(a1 + 8));
  v57 = v92;
  v58 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v58 = 930;
  *(_QWORD *)(v58 + 8) = a3;
  *(_QWORD *)(v58 + 528) = v58 + 16;
  *(_QWORD *)(v58 + 536) = v58 + 16;
  *(_OWORD *)(v58 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v58 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v58);
  v96 = (IPC::Encoder *)v58;
  v59 = *a2;
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v59;
  v60 = a2[1];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v60;
  v61 = a2[2];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v61;
  v62 = a2[3];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v62;
  v63 = a2[4];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v63;
  v64 = a2[5];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v64;
  v65 = a2[6];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v65;
  v66 = a2[7];
  *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v58, 4uLL, 4) = v66;
  v49 = IPC::Connection::sendMessageImpl((uint64_t)v57, (uint64_t *)&v96, 1, 0);
  v68 = v96;
  v96 = 0;
  if (v68)
  {
    IPC::Encoder::~Encoder(v68, v67);
    WTF::fastFree(v69, v70);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v92);
  return v49;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 932;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 932;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 933;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 933;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 934;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 934;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 937;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 937;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 939;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 939;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CreateTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 940;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 940;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::CullFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 943;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 943;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 944;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 944;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 946;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 946;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 947;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 947;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 950;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 950;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 952;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 952;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DeleteTexture,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 954;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 954;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthFunc,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 957;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 957;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthMask,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, char *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  char v50;
  void *v51;
  IPC::Encoder *v52;
  WTF *v53;
  void *v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (!v58)
    return 15;
  v23 = v56;
  v22 = v57;
  v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v25 = v24 - v56;
  if (v24 >= v56)
  {
    v26 = v25 + 2;
    if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v26 <= v57)
    {
      *(_WORD *)(v56 + v25) = 2822;
      goto LABEL_32;
    }
    v22 = 0;
  }
  v26 = 0;
LABEL_32:
  v28 = (_QWORD *)((v23 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v28 >= v23 + v26)
  {
    v26 = (unint64_t)v28 - v23 + 8;
    if ((unint64_t)v28 - v23 > 0xFFFFFFFFFFFFFFF7 || v26 > v22)
      return 17;
    *v28 = a3;
  }
  if (!v22)
    return 17;
  v30 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v31 = *(_QWORD *)(a1 + 56);
  if (v30 + 16 >= v31)
    v30 = 0;
  if (v26 <= 0x10)
    v26 = 16;
  v32 = v30 + v26;
  if (v31 <= v32)
    v32 = 0;
  *(_QWORD *)(a1 + 72) = v32;
  v33 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v32, v33));
  v35 = *(_DWORD *)(a1 + 108);
  if (v34 == 0x80000000 || v35 != 0)
  {
    v38 = v35 + 1;
    *(_DWORD *)(a1 + 108) = v38;
    if (v38 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a3;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (!v58)
    return 15;
  v8 = v56;
  v9 = v57;
  v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v11 = v10 - v56;
  if (v10 < v56)
  {
    v12 = 0;
  }
  else
  {
    v12 = v11 + 2;
    if (v11 > 0xFFFFFFFFFFFFFFFDLL || v12 > v57)
      goto LABEL_60;
    *(_WORD *)(v56 + v11) = 958;
  }
  if (v12 < v9)
  {
    *(_BYTE *)(v8 + v12) = *a2;
    v14 = *(_QWORD *)(a1 + 64);
    v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
    v16 = *(_QWORD *)(a1 + 56);
    if (v15 + 16 >= v16)
      v15 = 0;
    if (v12 <= 0xF)
      v12 = 15;
    v17 = v12 + v15;
    if (v16 > v17 + 1)
      v18 = v17 + 1;
    else
      v18 = 0;
    *(_QWORD *)(a1 + 72) = v18;
    v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v18, v19));
    if (v20 != 0x80000000 && !*(_DWORD *)(a1 + 108))
      return 0;
    if (*(_BYTE *)(a1 + 96))
      MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
    v21 = 0;
    *(_DWORD *)(a1 + 108) = 0;
    return v21;
  }
  if (!v58)
  {
    __break(1u);
LABEL_81:
    v41 = 0;
    goto LABEL_66;
  }
LABEL_60:
  v39 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v40 = v39 - v56;
  if (v39 < v56)
    goto LABEL_81;
  v41 = v40 + 2;
  if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v57)
    goto LABEL_81;
  *(_WORD *)(v56 + v40) = 2821;
LABEL_66:
  v43 = *(_QWORD *)(a1 + 64);
  v44 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v45 = *(_QWORD *)(a1 + 56);
  if (v44 + 16 >= v45)
    v44 = 0;
  if (v41 <= 0x10)
    v41 = 16;
  v46 = v44 + v41;
  if (v45 <= v46)
    v46 = 0;
  *(_QWORD *)(a1 + 72) = v46;
  v47 = (unint64_t *)(*(_QWORD *)(v43 + 16) + 128);
  do
    __ldaxr(v47);
  while (__stlxr(v46, v47));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
  v48 = v55;
  v49 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v49 = 958;
  *(_QWORD *)(v49 + 8) = a3;
  *(_QWORD *)(v49 + 528) = v49 + 16;
  *(_QWORD *)(v49 + 536) = v49 + 16;
  *(_OWORD *)(v49 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v49 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v49);
  v59 = (IPC::Encoder *)v49;
  v50 = *a2;
  *IPC::Encoder::grow((IPC::Encoder *)v49, 1uLL, 1) = v50;
  v21 = IPC::Connection::sendMessageImpl((uint64_t)v48, (uint64_t *)&v59, 1, 0);
  v52 = v59;
  v59 = 0;
  if (v52)
  {
    IPC::Encoder::~Encoder(v52, v51);
    WTF::fastFree(v53, v54);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
  return v21;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DepthRange,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 959;
          v60 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::encode((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 959;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DetachShader,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 960;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 960;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Disable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 961;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 961;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DisableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 962;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 962;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawArrays,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  void *v48;
  IPC::Encoder *v49;
  WTF *v50;
  void *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v57;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unsigned int v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  IPC::Encoder *v72;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
      if (!v71)
        return 15;
      v8 = v69;
      v9 = v70;
      v10 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v69;
      if (v10 >= v69)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v70)
        {
          *(_WORD *)(v69 + v11) = 964;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v24 >= v8 + v12)
      {
        v25 = (char *)v24 - v8;
        if ((unint64_t)v24 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_38;
        v12 = (unint64_t)(v25 + 4);
        if ((unint64_t)(v25 + 4) > v9)
          goto LABEL_38;
        *v24 = a2[2];
      }
      if (v9)
      {
        v26 = *(_QWORD *)(a1 + 64);
        v27 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v28 = *(_QWORD *)(a1 + 56);
        if (v27 + 16 >= v28)
          v27 = 0;
        v29 = 16;
        if (v12 > 0x10)
          v29 = v12;
        v30 = v27 + v29;
        if (v28 <= v30)
          v31 = 0;
        else
          v31 = v30;
        *(_QWORD *)(a1 + 72) = v31;
        v32 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v31, v32));
        if (v33 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v34 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v34;
      }
LABEL_38:
      if (v71)
      {
        v35 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v36 = v35 - v69;
        if (v35 < v69)
        {
          v37 = 0;
        }
        else
        {
          v37 = 0;
          if (v36 <= 0xFFFFFFFFFFFFFFFDLL && v36 + 2 <= v70)
          {
            *(_WORD *)(v69 + v36) = 2821;
            v37 = v36 + 2;
          }
        }
        v38 = *(_QWORD *)(a1 + 64);
        v39 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v40 = *(_QWORD *)(a1 + 56);
        if (v39 + 16 >= v40)
          v39 = 0;
        if (v37 <= 0x10)
          v37 = 16;
        v41 = v39 + v37;
        if (v40 <= v41)
          v41 = 0;
        *(_QWORD *)(a1 + 72) = v41;
        v42 = (unint64_t *)(*(_QWORD *)(v38 + 16) + 128);
        do
          __ldaxr(v42);
        while (__stlxr(v41, v42));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v68, (uint64_t **)(a1 + 8));
        v43 = v68;
        v44 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v44 = 964;
        *(_QWORD *)(v44 + 8) = a3;
        *(_QWORD *)(v44 + 528) = v44 + 16;
        *(_QWORD *)(v44 + 536) = v44 + 16;
        *(_OWORD *)(v44 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v44 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v44);
        v72 = (IPC::Encoder *)v44;
        v45 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v45;
        v46 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v46;
        v47 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v44, 4uLL, 4) = v47;
        v34 = IPC::Connection::sendMessageImpl((uint64_t)v43, (uint64_t *)&v72, 1, 0);
        v49 = v72;
        v72 = 0;
        if (v49)
        {
          IPC::Encoder::~Encoder(v49, v48);
          WTF::fastFree(v50, v51);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v68);
        return v34;
      }
      __break(1u);
LABEL_96:
      v52 = 0;
LABEL_97:
      v55 = 0;
LABEL_64:
      v57 = (_QWORD *)((v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v57 >= v12 + v55)
      {
        v55 = (unint64_t)v57 - v12 + 8;
        if ((unint64_t)v57 - v12 > 0xFFFFFFFFFFFFFFF7 || v55 > v52)
          return 17;
        *v57 = a3;
      }
      if (!v52)
        return 17;
      v59 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v60 = *(_QWORD *)(a1 + 56);
      if (v59 + 16 >= v60)
        v59 = 0;
      if (v55 <= 0x10)
        v55 = 16;
      v61 = v59 + v55;
      if (v60 <= v61)
        v61 = 0;
      *(_QWORD *)(a1 + 72) = v61;
      v62 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v61, v62));
      v64 = *(_DWORD *)(a1 + 108);
      if (v63 == 0x80000000 || v64 != 0)
      {
        v67 = v64 + 1;
        *(_DWORD *)(a1 + 108) = v67;
        if (v67 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v69, a4);
  if (v71)
  {
    v12 = v69;
    v52 = v70;
    v53 = (v69 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v54 = v53 - v69;
    if (v53 < v69)
      goto LABEL_97;
    v55 = v54 + 2;
    if (v54 > 0xFFFFFFFFFFFFFFFDLL || v55 > v70)
      goto LABEL_96;
    *(_WORD *)(v69 + v54) = 2822;
    goto LABEL_64;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::DrawElements,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  void *v52;
  IPC::Encoder *v53;
  WTF *v54;
  void *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v61;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  char *v74;
  unint64_t v75;
  char v76;
  IPC::Encoder *v77;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
      if (!v76)
        return 15;
      v8 = v74;
      v9 = v75;
      v10 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - (_QWORD)v74;
      if (v10 >= (unint64_t)v74)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v75)
        {
          *(_WORD *)&v74[v11] = 969;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (_QWORD)&v8[v12];
      if (v14 >= (unint64_t)&v8[v12])
      {
        v16 = v14 - (_QWORD)v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v16] = *a2;
          v12 = v17;
        }
      }
      v19 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (_QWORD)&v8[v12];
      if (v19 >= (unint64_t)&v8[v12])
      {
        v21 = v19 - (_QWORD)v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)&v8[v21] = a2[1];
          v12 = v22;
        }
      }
      v24 = (unint64_t)&v8[v12 + 3] & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= (unint64_t)&v8[v12];
      v26 = v24 - (_QWORD)&v8[v12];
      if (v25)
      {
        v72 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)&v8[v27] = a2[2];
          v72 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v72 = v9;
      }
      v28 = (char *)((unint64_t)&v8[v12 + 7] & 0xFFFFFFFFFFFFFFF8);
      v29 = (char *)(v28 - &v8[v12]);
      if (v28 >= &v8[v12])
      {
        v29 = (char *)(v28 - v8);
        if ((unint64_t)(v28 - v8) > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_43;
        v12 = (unint64_t)(v29 + 8);
        if ((unint64_t)(v29 + 8) > v72)
          goto LABEL_43;
        *(_QWORD *)v28 = *((_QWORD *)a2 + 2);
      }
      if (v72)
      {
        v30 = *(_QWORD *)(a1 + 64);
        v31 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v32 = *(_QWORD *)(a1 + 56);
        if (v31 + 16 >= v32)
          v31 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v33 = v31 + v12;
        if (v32 <= v33)
          v34 = 0;
        else
          v34 = v33;
        *(_QWORD *)(a1 + 72) = v34;
        v35 = (unint64_t *)(*(_QWORD *)(v30 + 16) + 128);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v34, v35));
        if (v36 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v37 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v37;
      }
LABEL_43:
      if (v76)
      {
        v38 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v39 = v38 - (_QWORD)v74;
        if (v38 < (unint64_t)v74)
        {
          v40 = 0;
        }
        else
        {
          v40 = 0;
          if (v39 <= 0xFFFFFFFFFFFFFFFDLL && v39 + 2 <= v75)
          {
            *(_WORD *)&v74[v39] = 2821;
            v40 = v39 + 2;
          }
        }
        v41 = *(_QWORD *)(a1 + 64);
        v42 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v43 = *(_QWORD *)(a1 + 56);
        if (v42 + 16 >= v43)
          v42 = 0;
        if (v40 <= 0x10)
          v40 = 16;
        v44 = v42 + v40;
        if (v43 <= v44)
          v44 = 0;
        *(_QWORD *)(a1 + 72) = v44;
        v45 = (unint64_t *)(*(_QWORD *)(v41 + 16) + 128);
        do
          __ldaxr(v45);
        while (__stlxr(v44, v45));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v73, (uint64_t **)(a1 + 8));
        v46 = v73;
        v47 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v47 = 969;
        *(_QWORD *)(v47 + 8) = a3;
        *(_QWORD *)(v47 + 528) = v47 + 16;
        *(_QWORD *)(v47 + 536) = v47 + 16;
        *(_OWORD *)(v47 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v47 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v47);
        v77 = (IPC::Encoder *)v47;
        v48 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v48;
        v49 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v49;
        v50 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 4uLL, 4) = v50;
        v51 = *((_QWORD *)a2 + 2);
        *(_QWORD *)IPC::Encoder::grow((IPC::Encoder *)v47, 8uLL, 8) = v51;
        v37 = IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v77, 1, 0);
        v53 = v77;
        v77 = 0;
        if (v53)
        {
          IPC::Encoder::~Encoder(v53, v52);
          WTF::fastFree(v54, v55);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v73);
        return v37;
      }
      __break(1u);
LABEL_101:
      v56 = 0;
LABEL_102:
      v59 = 0;
LABEL_69:
      v61 = (char *)((unint64_t)&v29[v59 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v61 >= &v29[v59])
      {
        v59 = v61 - v29 + 8;
        if ((unint64_t)(v61 - v29) > 0xFFFFFFFFFFFFFFF7 || v59 > v56)
          return 17;
        *(_QWORD *)v61 = a3;
      }
      if (!v56)
        return 17;
      v63 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v64 = *(_QWORD *)(a1 + 56);
      if (v63 + 16 >= v64)
        v63 = 0;
      if (v59 <= 0x10)
        v59 = 16;
      v65 = v63 + v59;
      if (v64 <= v65)
        v65 = 0;
      *(_QWORD *)(a1 + 72) = v65;
      v66 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v65, v66));
      v68 = *(_DWORD *)(a1 + 108);
      if (v67 == 0x80000000 || v68 != 0)
      {
        v71 = v68 + 1;
        *(_DWORD *)(a1 + 108) = v71;
        if (v71 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v74, a4);
  if (v76)
  {
    v29 = v74;
    v56 = v75;
    v57 = (unint64_t)(v74 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v58 = v57 - (_QWORD)v74;
    if (v57 < (unint64_t)v74)
      goto LABEL_102;
    v59 = v58 + 2;
    if (v58 > 0xFFFFFFFFFFFFFFFDLL || v59 > v75)
      goto LABEL_101;
    *(_WORD *)&v74[v58] = 2822;
    goto LABEL_69;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Enable,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 973;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 973;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::EnableVertexAttribArray,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 974;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 974;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Finish,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;

  if (*(_QWORD *)(a1 + 48) == a4)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v21 = v53;
  v20 = v54;
  v22 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v53;
  if (v22 >= v53)
  {
    v24 = v23 + 2;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= v54)
    {
      *(_WORD *)(v53 + v23) = 2822;
      goto LABEL_31;
    }
    v20 = 0;
  }
  v24 = 0;
LABEL_31:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      return 17;
    *v26 = a4;
  }
  if (!v20)
    return 17;
  v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(a1 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(a1 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(a1 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(a1 + 108) = v35;
    if (v35 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a4;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v7 = v54;
  v8 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v8 - v53;
  if (v8 < v53)
  {
    v10 = 0;
    if (v54)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v54)
      goto LABEL_62;
    *(_WORD *)(v53 + v9) = 980;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(a1 + 64);
      v13 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(a1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(a1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v19 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v19;
    }
  }
  if (!v55)
  {
    __break(1u);
LABEL_81:
    v38 = 0;
    goto LABEL_68;
  }
LABEL_62:
  v36 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = v36 - v53;
  if (v36 < v53)
    goto LABEL_81;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v54)
    goto LABEL_81;
  *(_WORD *)(v53 + v37) = 2821;
LABEL_68:
  v40 = *(_QWORD *)(a1 + 64);
  v41 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(a1 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(a1 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
  v45 = v52;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 980;
  *(_QWORD *)(v46 + 8) = a4;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v56 = (IPC::Encoder *)v46;
  v19 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v56, 1, 0);
  v48 = v56;
  v56 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Flush,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, double a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  IPC::Encoder *v48;
  WTF *v49;
  void *v50;
  uint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;

  if (*(_QWORD *)(a1 + 48) == a4)
    goto LABEL_2;
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v21 = v53;
  v20 = v54;
  v22 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v23 = v22 - v53;
  if (v22 >= v53)
  {
    v24 = v23 + 2;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v24 <= v54)
    {
      *(_WORD *)(v53 + v23) = 2822;
      goto LABEL_31;
    }
    v20 = 0;
  }
  v24 = 0;
LABEL_31:
  v26 = (_QWORD *)((v21 + v24 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v26 >= v21 + v24)
  {
    v24 = (unint64_t)v26 - v21 + 8;
    if ((unint64_t)v26 - v21 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
      return 17;
    *v26 = a4;
  }
  if (!v20)
    return 17;
  v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v29 = *(_QWORD *)(a1 + 56);
  if (v28 + 16 >= v29)
    v28 = 0;
  if (v24 <= 0x10)
    v24 = 16;
  v30 = v28 + v24;
  if (v29 <= v30)
    v30 = 0;
  *(_QWORD *)(a1 + 72) = v30;
  v31 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v30, v31));
  v33 = *(_DWORD *)(a1 + 108);
  if (v32 == 0x80000000 || v33 != 0)
  {
    v35 = v33 + 1;
    *(_DWORD *)(a1 + 108) = v35;
    if (v35 >= *(_DWORD *)(a1 + 104))
    {
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      *(_DWORD *)(a1 + 108) = 0;
    }
  }
  *(_QWORD *)(a1 + 48) = a4;
LABEL_2:
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a2);
  if (!v55)
    return 15;
  v7 = v54;
  v8 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v9 = v8 - v53;
  if (v8 < v53)
  {
    v10 = 0;
    if (v54)
      goto LABEL_9;
  }
  else
  {
    v10 = v9 + 2;
    if (v9 > 0xFFFFFFFFFFFFFFFDLL || v10 > v54)
      goto LABEL_62;
    *(_WORD *)(v53 + v9) = 981;
    if (v7)
    {
LABEL_9:
      v12 = *(_QWORD *)(a1 + 64);
      v13 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v14 = *(_QWORD *)(a1 + 56);
      if (v13 + 16 >= v14)
        v13 = 0;
      if (v10 <= 0x10)
        v10 = 16;
      v15 = v13 + v10;
      if (v14 <= v15)
        v16 = 0;
      else
        v16 = v15;
      *(_QWORD *)(a1 + 72) = v16;
      v17 = (unint64_t *)(*(_QWORD *)(v12 + 16) + 128);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v16, v17));
      if (v18 != 0x80000000 && !*(_DWORD *)(a1 + 108))
        return 0;
      if (*(_BYTE *)(a1 + 96))
        MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
      v19 = 0;
      *(_DWORD *)(a1 + 108) = 0;
      return v19;
    }
  }
  if (!v55)
  {
    __break(1u);
LABEL_81:
    v38 = 0;
    goto LABEL_68;
  }
LABEL_62:
  v36 = (v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v37 = v36 - v53;
  if (v36 < v53)
    goto LABEL_81;
  v38 = v37 + 2;
  if (v37 > 0xFFFFFFFFFFFFFFFDLL || v38 > v54)
    goto LABEL_81;
  *(_WORD *)(v53 + v37) = 2821;
LABEL_68:
  v40 = *(_QWORD *)(a1 + 64);
  v41 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
  v42 = *(_QWORD *)(a1 + 56);
  if (v41 + 16 >= v42)
    v41 = 0;
  if (v38 <= 0x10)
    v38 = 16;
  v43 = v41 + v38;
  if (v42 <= v43)
    v43 = 0;
  *(_QWORD *)(a1 + 72) = v43;
  v44 = (unint64_t *)(*(_QWORD *)(v40 + 16) + 128);
  do
    __ldaxr(v44);
  while (__stlxr(v43, v44));
  *(_DWORD *)(a1 + 108) = 0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
  v45 = v52;
  v46 = WTF::fastMalloc((WTF *)0x240);
  *(_WORD *)v46 = 981;
  *(_QWORD *)(v46 + 8) = a4;
  *(_QWORD *)(v46 + 528) = v46 + 16;
  *(_QWORD *)(v46 + 536) = v46 + 16;
  *(_OWORD *)(v46 + 544) = xmmword_1978CE2D0;
  *(_OWORD *)(v46 + 560) = 0u;
  IPC::Encoder::encodeHeader((IPC::Encoder *)v46);
  v56 = (IPC::Encoder *)v46;
  v19 = IPC::Connection::sendMessageImpl((uint64_t)v45, (uint64_t *)&v56, 1, 0);
  v48 = v56;
  v56 = 0;
  if (v48)
  {
    IPC::Encoder::~Encoder(v48, v47);
    WTF::fastFree(v49, v50);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
  return v19;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  IPC::Encoder *v33;
  WTF *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  unsigned int v51;
  uint64_t *v52;
  IPC::Encoder *v53;
  unint64_t v54;
  char v55;
  IPC::Encoder *v56;
  unint64_t v57;
  unint64_t v58;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v53, a4);
      if (!v55)
        break;
      v56 = v53;
      v57 = v54;
      v58 = 0;
      v8 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v53;
      v10 = v8 - (_QWORD)v53;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v54)
        {
          v57 = 0;
        }
        else
        {
          *(_WORD *)((char *)v53 + v10) = 982;
          v58 = v10 + 2;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,0ul,1ul,2ul,3ul>((uint64_t *)&v56, a2);
      if (v57)
      {
        v13 = v58;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v58 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v55)
      {
        v22 = ((unint64_t)v53 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v53;
        if (v22 < (unint64_t)v53)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v54)
          {
            *(_WORD *)((char *)v53 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v52, (uint64_t **)(a1 + 8));
        v30 = v52;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 982;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v56 = (IPC::Encoder *)v31;
        IPC::ArgumentCoder<WebCore::LayoutRect,void>::encode((IPC::Encoder *)v31, a2);
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v56, 1, 0);
        v33 = v56;
        v56 = 0;
        if (v33)
        {
          IPC::Encoder::~Encoder(v33, v32);
          WTF::fastFree(v34, v35);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v52);
        return v21;
      }
      __break(1u);
LABEL_78:
      v36 = 0;
LABEL_79:
      v39 = 0;
LABEL_49:
      v41 = (char *)(((unint64_t)v12 + v39 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v41 >= (char *)v12 + v39)
      {
        v39 = v41 - (char *)v12 + 8;
        if ((unint64_t)(v41 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v39 > v36)
          return 17;
        *(_QWORD *)v41 = a3;
      }
      if (!v36)
        return 17;
      v43 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v44 = *(_QWORD *)(a1 + 56);
      if (v43 + 16 >= v44)
        v43 = 0;
      if (v39 <= 0x10)
        v39 = 16;
      v45 = v43 + v39;
      if (v44 <= v45)
        v45 = 0;
      *(_QWORD *)(a1 + 72) = v45;
      v46 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v45, v46));
      v48 = *(_DWORD *)(a1 + 108);
      if (v47 == 0x80000000 || v48 != 0)
      {
        v51 = v48 + 1;
        *(_DWORD *)(a1 + 108) = v51;
        if (v51 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
    if ((_BYTE)v58)
    {
      v12 = v56;
      v36 = v57;
      v37 = ((unint64_t)v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v38 = v37 - (_QWORD)v56;
      if (v37 < (unint64_t)v56)
        goto LABEL_79;
      v39 = v38 + 2;
      if (v38 > 0xFFFFFFFFFFFFFFFDLL || v39 > v57)
        goto LABEL_78;
      *(_WORD *)((char *)v56 + v38) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FramebufferTexture2D,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  void *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v65;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  unsigned int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  char v81;
  IPC::Encoder *v82;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
      if (!v81)
        return 15;
      v8 = v79;
      v9 = v80;
      v10 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v79;
      if (v10 >= v79)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v80)
        {
          *(_WORD *)(v79 + v11) = 983;
          goto LABEL_9;
        }
        v9 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v15 = v14 - (v8 + v12);
      if (v14 >= v8 + v12)
      {
        v16 = v14 - v8;
        v17 = v15 + v12 + 4;
        if (v16 > 0xFFFFFFFFFFFFFFFBLL || v17 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v16) = *a2;
          v12 = v17;
        }
      }
      v19 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v20 = v19 - (v8 + v12);
      if (v19 >= v8 + v12)
      {
        v21 = v19 - v8;
        v22 = v20 + v12 + 4;
        if (v21 > 0xFFFFFFFFFFFFFFFBLL || v22 > v9)
        {
          v9 = 0;
        }
        else
        {
          *(_DWORD *)(v8 + v21) = a2[1];
          v12 = v22;
        }
      }
      v24 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v24 >= v8 + v12;
      v26 = v24 - (v8 + v12);
      if (v25)
      {
        v76 = 0;
        v27 = v26 + v12;
        if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= v9)
        {
          *(_DWORD *)(v8 + v27) = a2[2];
          v76 = v9;
          v12 = v27 + 4;
        }
      }
      else
      {
        v76 = v9;
      }
      v28 = (v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v25 = v28 >= v8 + v12;
      v29 = v28 - (v8 + v12);
      if (v25)
      {
        v77 = 0;
        v30 = v29 + v12;
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= v76)
        {
          *(_DWORD *)(v8 + v30) = a2[3];
          v77 = v76;
          v12 = v30 + 4;
        }
      }
      else
      {
        v77 = v76;
      }
      v31 = (_DWORD *)((v8 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v31 >= v8 + v12)
      {
        v32 = (char *)v31 - v8;
        if ((unint64_t)v31 - v8 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_48;
        v12 = (unint64_t)(v32 + 4);
        if ((unint64_t)(v32 + 4) > v77)
          goto LABEL_48;
        *v31 = a2[4];
      }
      if (v77)
      {
        v33 = *(_QWORD *)(a1 + 64);
        v34 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v35 = *(_QWORD *)(a1 + 56);
        if (v34 + 16 >= v35)
          v34 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v36 = v34 + v12;
        if (v35 <= v36)
          v37 = 0;
        else
          v37 = v36;
        *(_QWORD *)(a1 + 72) = v37;
        v38 = (unint64_t *)(*(_QWORD *)(v33 + 16) + 128);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v37, v38));
        if (v39 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v40 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v40;
      }
LABEL_48:
      if (v81)
      {
        v41 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v42 = v41 - v79;
        if (v41 < v79)
        {
          v43 = 0;
        }
        else
        {
          v43 = 0;
          if (v42 <= 0xFFFFFFFFFFFFFFFDLL && v42 + 2 <= v80)
          {
            *(_WORD *)(v79 + v42) = 2821;
            v43 = v42 + 2;
          }
        }
        v44 = *(_QWORD *)(a1 + 64);
        v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v46 = *(_QWORD *)(a1 + 56);
        if (v45 + 16 >= v46)
          v45 = 0;
        if (v43 <= 0x10)
          v43 = 16;
        v47 = v45 + v43;
        if (v46 <= v47)
          v47 = 0;
        *(_QWORD *)(a1 + 72) = v47;
        v48 = (unint64_t *)(*(_QWORD *)(v44 + 16) + 128);
        do
          __ldaxr(v48);
        while (__stlxr(v47, v48));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)(a1 + 8));
        v49 = v78;
        v50 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v50 = 983;
        *(_QWORD *)(v50 + 8) = a3;
        *(_QWORD *)(v50 + 528) = v50 + 16;
        *(_QWORD *)(v50 + 536) = v50 + 16;
        *(_OWORD *)(v50 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v50 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v50);
        v82 = (IPC::Encoder *)v50;
        v51 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v51;
        v52 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v52;
        v53 = a2[2];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v53;
        v54 = a2[3];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v54;
        v55 = a2[4];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v50, 4uLL, 4) = v55;
        v40 = IPC::Connection::sendMessageImpl((uint64_t)v49, (uint64_t *)&v82, 1, 0);
        v57 = v82;
        v82 = 0;
        if (v57)
        {
          IPC::Encoder::~Encoder(v57, v56);
          WTF::fastFree(v58, v59);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v78);
        return v40;
      }
      __break(1u);
LABEL_106:
      v60 = 0;
LABEL_107:
      v63 = 0;
LABEL_74:
      v65 = (_QWORD *)((v77 + v63 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v65 >= v77 + v63)
      {
        v63 = (unint64_t)v65 - v77 + 8;
        if ((unint64_t)v65 - v77 > 0xFFFFFFFFFFFFFFF7 || v63 > v60)
          return 17;
        *v65 = a3;
      }
      if (!v60)
        return 17;
      v67 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v68 = *(_QWORD *)(a1 + 56);
      if (v67 + 16 >= v68)
        v67 = 0;
      if (v63 <= 0x10)
        v63 = 16;
      v69 = v67 + v63;
      if (v68 <= v69)
        v69 = 0;
      *(_QWORD *)(a1 + 72) = v69;
      v70 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v69, v70));
      v72 = *(_DWORD *)(a1 + 108);
      if (v71 == 0x80000000 || v72 != 0)
      {
        v75 = v72 + 1;
        *(_DWORD *)(a1 + 108) = v75;
        if (v75 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v79, a4);
  if (v81)
  {
    v77 = v79;
    v60 = v80;
    v61 = (v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v62 = v61 - v79;
    if (v61 < v79)
      goto LABEL_107;
    v63 = v62 + 2;
    if (v62 > 0xFFFFFFFFFFFFFFFDLL || v63 > v80)
      goto LABEL_106;
    *(_WORD *)(v79 + v62) = 2822;
    goto LABEL_74;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::FrontFace,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 985;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 985;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::GenerateMipmap,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, _DWORD *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  void *v35;
  IPC::Encoder *v36;
  WTF *v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v44;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  unsigned int v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  IPC::Encoder *v59;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
      if (!v58)
        return 15;
      v9 = v56;
      v8 = v57;
      v10 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v11 = v10 - v56;
      if (v10 >= v56)
      {
        v12 = v11 + 2;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL && v12 <= v57)
        {
          *(_WORD *)(v56 + v11) = 986;
          goto LABEL_9;
        }
        v8 = 0;
      }
      v12 = 0;
LABEL_9:
      v14 = (_DWORD *)((v9 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      if ((unint64_t)v14 >= v9 + v12)
      {
        v12 = (unint64_t)v14 - v9 + 4;
        if ((unint64_t)v14 - v9 > 0xFFFFFFFFFFFFFFFBLL || v12 > v8)
          goto LABEL_28;
        *v14 = *a2;
      }
      if (v8)
      {
        v16 = *(_QWORD *)(a1 + 64);
        v17 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v18 = *(_QWORD *)(a1 + 56);
        if (v17 + 16 >= v18)
          v17 = 0;
        if (v12 <= 0x10)
          v12 = 16;
        v19 = v17 + v12;
        if (v18 <= v19)
          v20 = 0;
        else
          v20 = v19;
        *(_QWORD *)(a1 + 72) = v20;
        v21 = (unint64_t *)(*(_QWORD *)(v16 + 16) + 128);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v20, v21));
        if (v22 != 0x80000000 && !*(_DWORD *)(a1 + 108))
          return 0;
        if (*(_BYTE *)(a1 + 96))
          MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
        v23 = 0;
        *(_DWORD *)(a1 + 108) = 0;
        return v23;
      }
LABEL_28:
      if (v58)
      {
        v24 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v25 = v24 - v56;
        if (v24 < v56)
        {
          v26 = 0;
        }
        else
        {
          v26 = 0;
          if (v25 <= 0xFFFFFFFFFFFFFFFDLL && v25 + 2 <= v57)
          {
            *(_WORD *)(v56 + v25) = 2821;
            v26 = v25 + 2;
          }
        }
        v27 = *(_QWORD *)(a1 + 64);
        v28 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v29 = *(_QWORD *)(a1 + 56);
        if (v28 + 16 >= v29)
          v28 = 0;
        if (v26 <= 0x10)
          v26 = 16;
        v30 = v28 + v26;
        if (v29 <= v30)
          v30 = 0;
        *(_QWORD *)(a1 + 72) = v30;
        v31 = (unint64_t *)(*(_QWORD *)(v27 + 16) + 128);
        do
          __ldaxr(v31);
        while (__stlxr(v30, v31));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v55, (uint64_t **)(a1 + 8));
        v32 = v55;
        v33 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v33 = 986;
        *(_QWORD *)(v33 + 8) = a3;
        *(_QWORD *)(v33 + 528) = v33 + 16;
        *(_QWORD *)(v33 + 536) = v33 + 16;
        *(_OWORD *)(v33 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v33 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v33);
        v59 = (IPC::Encoder *)v33;
        v34 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v33, 4uLL, 4) = v34;
        v23 = IPC::Connection::sendMessageImpl((uint64_t)v32, (uint64_t *)&v59, 1, 0);
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v35);
          WTF::fastFree(v37, v38);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v55);
        return v23;
      }
      __break(1u);
LABEL_84:
      v39 = 0;
LABEL_85:
      v42 = 0;
LABEL_54:
      v44 = (_QWORD *)((v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v44 >= v9 + v42)
      {
        v42 = (unint64_t)v44 - v9 + 8;
        if ((unint64_t)v44 - v9 > 0xFFFFFFFFFFFFFFF7 || v42 > v39)
          return 17;
        *v44 = a3;
      }
      if (!v39)
        return 17;
      v46 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v47 = *(_QWORD *)(a1 + 56);
      if (v46 + 16 >= v47)
        v46 = 0;
      if (v42 <= 0x10)
        v42 = 16;
      v48 = v46 + v42;
      if (v47 <= v48)
        v48 = 0;
      *(_QWORD *)(a1 + 72) = v48;
      v49 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v48, v49));
      v51 = *(_DWORD *)(a1 + 108);
      if (v50 == 0x80000000 || v51 != 0)
      {
        v54 = v51 + 1;
        *(_DWORD *)(a1 + 108) = v54;
        if (v54 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v56, a4);
  if (v58)
  {
    v9 = v56;
    v39 = v57;
    v40 = (v56 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v41 = v40 - v56;
    if (v40 < v56)
      goto LABEL_85;
    v42 = v41 + 2;
    if (v41 > 0xFFFFFFFFFFFFFFFDLL || v42 > v57)
      goto LABEL_84;
    *(_WORD *)(v56 + v41) = 2822;
    goto LABEL_54;
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveAttrib,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  int v53;
  void *v54;
  uint64_t *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  char v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  char v85;
  uint64_t *v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  char v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v80, a5);
  if (!(_BYTE)v82)
    goto LABEL_122;
  v63 = v80;
  v62 = v81;
  v64 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v64 - v80;
  if (v64 >= v80)
  {
    v66 = v65 + 2;
    if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= v81)
    {
      *(_WORD *)(v80 + v65) = 2822;
      goto LABEL_101;
    }
    v62 = 0;
  }
  v66 = 0;
LABEL_101:
  v68 = (_QWORD *)((v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v68 >= v63 + v66)
  {
    v66 = (unint64_t)v68 - v63 + 8;
    if ((unint64_t)v68 - v63 > 0xFFFFFFFFFFFFFFF7 || v66 > v62)
      goto LABEL_134;
    *v68 = v6;
  }
  if (!v62)
  {
LABEL_134:
    v78 = 17;
    goto LABEL_123;
  }
  v70 = v8[8];
  v71 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v8[7];
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v66 <= 0x10)
    v66 = 16;
  v73 = v71 + v66;
  if (v72 <= v73)
    v73 = 0;
  v8[9] = v73;
  v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *((_DWORD *)v8 + 27);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *((_DWORD *)v8 + 27) = v79;
    if (v79 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v86, a5);
  if (!v88)
  {
LABEL_122:
    v78 = 15;
LABEL_123:
    *(_BYTE *)a4 = v78;
    *(_DWORD *)(a4 + 32) = 1;
    return result;
  }
  v11 = v86;
  v12 = v87;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v80) = 0;
    v84 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v96);
    v85 = 1;
    if (v100 != -1)
      ((void (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v89, &v96);
    goto LABEL_66;
  }
  v96 = v11;
  v97 = v12;
  v98 = 0;
  v15 = ((unint64_t)v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - (_QWORD)v11;
  if (v15 < (unint64_t)v11)
    goto LABEL_136;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_130;
  *(_WORD *)((char *)v11 + v16) = 3551;
  v98 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (char *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v19 >= (char *)v11 + v17)
      {
        if ((unint64_t)(v19 - (char *)v11) > 0xFFFFFFFFFFFFFFF7 || v19 - (char *)v11 + 8 > v12)
        {
          v97 = 0;
        }
        else
        {
          *(_QWORD *)v19 = v14;
          v98 = v19 - (char *)v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v96, a2);
      if (v97)
      {
        v21 = v98;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v98 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = v8 + 11;
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v93) = 16;
          v94 = 1;
LABEL_48:
          v95 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_129;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = (uint64_t *)(v36 - 1);
          if (v38 < v36 - 1)
            goto LABEL_129;
        }
        else
        {
          v11 = (uint64_t *)v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, (unint64_t)v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v93 = v40;
          v94 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xDDFu, (uint64_t)&v89, a5);
        LOBYTE(v93) = 0;
        v94 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v93, (uint64_t)&v89);
        v95 = 1;
        if ((_DWORD)v90 != -1)
          ((void (*)(char *, uint64_t *))off_1E34E3480[v90])(&v102, &v89);
      }
      else
      {
        LOBYTE(v93) = 0;
        v95 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v101);
      if (!v95)
      {
        LOBYTE(v80) = 0;
        v85 = 0;
        goto LABEL_66;
      }
      if (v94 == 1)
      {
        LOBYTE(v80) = (_BYTE)v93;
        v44 = 1;
        v84 = 1;
        v85 = 1;
LABEL_65:
        ((void (*)(uint64_t **, IPC::Encoder **))off_1E34E3480[v44])(&v96, &v93);
        goto LABEL_66;
      }
      if (v94)
        goto LABEL_135;
      LOBYTE(v89) = 0;
      v92 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>((uint64_t *)v93, (uint64_t)&v89);
      if (v92)
      {
        if (!v95)
          goto LABEL_129;
        if (v94)
          goto LABEL_135;
        v43 = (uint64_t *)v93;
        v93 = 0;
        v96 = v43;
        LOBYTE(v97) = v89;
        v98 = v90;
        v99 = v91;
        v100 = 0;
        LOBYTE(v80) = 0;
        v84 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v96);
        v85 = 1;
        if (v100 != -1)
          ((void (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v102, &v96);
      }
      else
      {
        LOBYTE(v80) = 13;
        v84 = 1;
        v85 = 1;
      }
      if (v95)
      {
        v44 = v94;
        if (v94 != -1)
          goto LABEL_65;
      }
LABEL_66:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
      if (v85)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 32) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v80);
        if (v85)
        {
          if (v84 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v84])(&v96, &v80);
        }
        return result;
      }
      if (v88)
        break;
LABEL_129:
      __break(1u);
LABEL_130:
      v12 = 0;
      v17 = 0;
      v97 = 0;
    }
    v45 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - (_QWORD)v86;
    if (v45 < (unint64_t)v86)
    {
      v47 = 0;
    }
    else
    {
      v47 = 0;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= v87)
      {
        *(_WORD *)((char *)v86 + v46) = 2821;
        v47 = v46 + 2;
      }
    }
    v48 = v8[8];
    v49 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = v8[7];
    if (v49 + 16 >= v50)
      v49 = 0;
    if (v47 <= 0x10)
      v47 = 16;
    v51 = v49 + v47;
    if (v50 <= v51)
      v51 = 0;
    v8[9] = v51;
    v52 = (unint64_t *)(*(_QWORD *)(v48 + 16) + 128);
    do
      __ldaxr(v52);
    while (__stlxr(v51, v52));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v89 = 0;
    IPC::Connection::createSyncMessageEncoder(3551, (uint64_t)v6, &v89, (uint64_t *)&v93);
    v6 = v93;
    v13 = (uint64_t **)*a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = (_DWORD)v13;
    a2 = (unsigned int *)a2[1];
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v89, (uint64_t *)&v93, 0, (uint64_t)&v96, a5);
    if ((_DWORD)v97)
    {
      if ((_DWORD)v97 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v96;
        v53 = 1;
        *(_DWORD *)(a4 + 32) = 1;
        goto LABEL_90;
      }
      goto LABEL_135;
    }
    LOBYTE(v80) = 0;
    v83 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(v96, (uint64_t)&v80);
    if (!v83)
      break;
    v53 = v97;
    if (!(_DWORD)v97)
    {
      v55 = v96;
      v96 = 0;
      v56 = v80;
      v57 = v81;
      v58 = v82;
      *(_QWORD *)a4 = v55;
      *(_BYTE *)(a4 + 8) = v56;
      *(_QWORD *)(a4 + 16) = v57;
      *(_QWORD *)(a4 + 24) = v58;
      *(_DWORD *)(a4 + 32) = 0;
      goto LABEL_90;
    }
LABEL_135:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 32) = 1;
  v53 = v97;
  if ((_DWORD)v97 == -1)
    goto LABEL_91;
LABEL_90:
  ((void (*)(unint64_t *, uint64_t **))off_1E34E3480[v53])(&v80, &v96);
LABEL_91:
  v59 = v93;
  v93 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v54);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t *IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(uint64_t *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  WTF::StringImpl *v10;
  char v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  char v23;
  _QWORD v25[2];
  char v26;

  v6 = a1[1];
  v7 = *a1;
  v8 = a1[2] - *a1;
  if (v6 <= v8)
  {
    v14 = 0;
    v15 = 0;
    *a1 = 0;
    a1[1] = 0;
    v16 = a1[3];
    if (v16)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        v15 = *a1;
        v14 = a1[1];
      }
      else
      {
        v14 = 0;
        v15 = 0;
      }
    }
    goto LABEL_7;
  }
  v9 = (unsigned __int8 *)(v7 + v8);
  a1[2] = (uint64_t)(v9 + 1);
  if (!v7)
  {
    v14 = v6;
    v15 = 0;
LABEL_7:
    v6 = 0;
    v7 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v14)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v15, v14);
        v7 = *a1;
        v6 = a1[1];
      }
      else
      {
        v6 = 0;
        v7 = 0;
      }
    }
    goto LABEL_8;
  }
  v2 = (WTF::StringImpl *)*v9;
  if (v2 >= 2)
  {
LABEL_8:
    *a1 = 0;
    a1[1] = 0;
    v18 = a1[3];
    if (v18 && v6)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v7);
    goto LABEL_9;
  }
  IPC::Decoder::decode<WebCore::GraphicsContextGLActiveInfo>((uint64_t)v25, a1);
  if (v26)
  {
    v11 = 0;
    v12 = (_DWORD)v2 != 0;
    v2 = (WTF::StringImpl *)v25[0];
    v3 = v25[1];
    v13 = 1;
    goto LABEL_11;
  }
LABEL_9:
  v10 = (WTF::StringImpl *)*a1;
  v19 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v20 = a1[3];
  if (v20 && v19)
    (*(void (**)(uint64_t, WTF::StringImpl *))(*(_QWORD *)v20 + 16))(v20, v10);
  v13 = 0;
  v12 = 0;
  v11 = 1;
LABEL_11:
  if (*(unsigned __int8 *)(a2 + 24) == v13)
  {
    if (*(_BYTE *)(a2 + 24))
    {
      *(_BYTE *)a2 = v12;
      v21 = *(WTF::StringImpl **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v2;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v10);
        else
          *(_DWORD *)v21 -= 2;
      }
      *(_QWORD *)(a2 + 16) = v3;
      return a1;
    }
  }
  else
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_BYTE *)a2 = v12;
      *(_QWORD *)(a2 + 8) = v2;
      *(_QWORD *)(a2 + 16) = v3;
      *(_BYTE *)(a2 + 24) = 1;
      return a1;
    }
    v22 = *(WTF::StringImpl **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v10);
      else
        *(_DWORD *)v22 -= 2;
    }
    *(_BYTE *)(a2 + 24) = 0;
  }
  if (v2)
    v23 = v11;
  else
    v23 = 1;
  if ((v23 & 1) == 0)
  {
    if (*(_DWORD *)v2 == 2)
      WTF::StringImpl::destroy(v2, v10);
    else
      *(_DWORD *)v2 -= 2;
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebCore::GraphicsContextGLActiveInfo>(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  result = IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::decode(a2, a1);
  if (!*(_BYTE *)(a1 + 16))
  {
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveAttrib>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3738[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = a3[3];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetActiveUniform,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  uint64_t *v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t *v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  int v53;
  void *v54;
  uint64_t *v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  char v78;
  unsigned int v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  int v84;
  char v85;
  uint64_t *v86;
  unint64_t v87;
  char v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  char v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v80, a5);
  if (!(_BYTE)v82)
    goto LABEL_122;
  v63 = v80;
  v62 = v81;
  v64 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v64 - v80;
  if (v64 >= v80)
  {
    v66 = v65 + 2;
    if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= v81)
    {
      *(_WORD *)(v80 + v65) = 2822;
      goto LABEL_101;
    }
    v62 = 0;
  }
  v66 = 0;
LABEL_101:
  v68 = (_QWORD *)((v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v68 >= v63 + v66)
  {
    v66 = (unint64_t)v68 - v63 + 8;
    if ((unint64_t)v68 - v63 > 0xFFFFFFFFFFFFFFF7 || v66 > v62)
      goto LABEL_134;
    *v68 = v6;
  }
  if (!v62)
  {
LABEL_134:
    v78 = 17;
    goto LABEL_123;
  }
  v70 = v8[8];
  v71 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v8[7];
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v66 <= 0x10)
    v66 = 16;
  v73 = v71 + v66;
  if (v72 <= v73)
    v73 = 0;
  v8[9] = v73;
  v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *((_DWORD *)v8 + 27);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *((_DWORD *)v8 + 27) = v79;
    if (v79 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v86, a5);
  if (!v88)
  {
LABEL_122:
    v78 = 15;
LABEL_123:
    *(_BYTE *)a4 = v78;
    *(_DWORD *)(a4 + 32) = 1;
    return result;
  }
  v11 = v86;
  v12 = v87;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v80) = 0;
    v84 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v96);
    v85 = 1;
    if (v100 != -1)
      ((void (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v89, &v96);
    goto LABEL_66;
  }
  v96 = v11;
  v97 = v12;
  v98 = 0;
  v15 = ((unint64_t)v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - (_QWORD)v11;
  if (v15 < (unint64_t)v11)
    goto LABEL_136;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_130;
  *(_WORD *)((char *)v11 + v16) = 3552;
  v98 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (char *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v19 >= (char *)v11 + v17)
      {
        if ((unint64_t)(v19 - (char *)v11) > 0xFFFFFFFFFFFFFFF7 || v19 - (char *)v11 + 8 > v12)
        {
          v97 = 0;
        }
        else
        {
          *(_QWORD *)v19 = v14;
          v98 = v19 - (char *)v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v96, a2);
      if (v97)
      {
        v21 = v98;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v98 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = v8 + 11;
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v93) = 16;
          v94 = 1;
LABEL_48:
          v95 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_129;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = (uint64_t *)(v36 - 1);
          if (v38 < v36 - 1)
            goto LABEL_129;
        }
        else
        {
          v11 = (uint64_t *)v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, (unint64_t)v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v93 = v40;
          v94 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xDE0u, (uint64_t)&v89, a5);
        LOBYTE(v93) = 0;
        v94 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v93, (uint64_t)&v89);
        v95 = 1;
        if ((_DWORD)v90 != -1)
          ((void (*)(char *, uint64_t *))off_1E34E3480[v90])(&v102, &v89);
      }
      else
      {
        LOBYTE(v93) = 0;
        v95 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v101);
      if (!v95)
      {
        LOBYTE(v80) = 0;
        v85 = 0;
        goto LABEL_66;
      }
      if (v94 == 1)
      {
        LOBYTE(v80) = (_BYTE)v93;
        v44 = 1;
        v84 = 1;
        v85 = 1;
LABEL_65:
        ((void (*)(uint64_t **, IPC::Encoder **))off_1E34E3480[v44])(&v96, &v93);
        goto LABEL_66;
      }
      if (v94)
        goto LABEL_135;
      LOBYTE(v89) = 0;
      v92 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>((uint64_t *)v93, (uint64_t)&v89);
      if (v92)
      {
        if (!v95)
          goto LABEL_129;
        if (v94)
          goto LABEL_135;
        v43 = (uint64_t *)v93;
        v93 = 0;
        v96 = v43;
        LOBYTE(v97) = v89;
        v98 = v90;
        v99 = v91;
        v100 = 0;
        LOBYTE(v80) = 0;
        v84 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v96);
        v85 = 1;
        if (v100 != -1)
          ((void (*)(char *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v102, &v96);
      }
      else
      {
        LOBYTE(v80) = 13;
        v84 = 1;
        v85 = 1;
      }
      if (v95)
      {
        v44 = v94;
        if (v94 != -1)
          goto LABEL_65;
      }
LABEL_66:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
      if (v85)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 32) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v80);
        if (v85)
        {
          if (v84 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v84])(&v96, &v80);
        }
        return result;
      }
      if (v88)
        break;
LABEL_129:
      __break(1u);
LABEL_130:
      v12 = 0;
      v17 = 0;
      v97 = 0;
    }
    v45 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v46 = v45 - (_QWORD)v86;
    if (v45 < (unint64_t)v86)
    {
      v47 = 0;
    }
    else
    {
      v47 = 0;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL && v46 + 2 <= v87)
      {
        *(_WORD *)((char *)v86 + v46) = 2821;
        v47 = v46 + 2;
      }
    }
    v48 = v8[8];
    v49 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v50 = v8[7];
    if (v49 + 16 >= v50)
      v49 = 0;
    if (v47 <= 0x10)
      v47 = 16;
    v51 = v49 + v47;
    if (v50 <= v51)
      v51 = 0;
    v8[9] = v51;
    v52 = (unint64_t *)(*(_QWORD *)(v48 + 16) + 128);
    do
      __ldaxr(v52);
    while (__stlxr(v51, v52));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v89 = 0;
    IPC::Connection::createSyncMessageEncoder(3552, (uint64_t)v6, &v89, (uint64_t *)&v93);
    v6 = v93;
    v13 = (uint64_t **)*a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = (_DWORD)v13;
    a2 = (unsigned int *)a2[1];
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v89, (uint64_t *)&v93, 0, (uint64_t)&v96, a5);
    if ((_DWORD)v97)
    {
      if ((_DWORD)v97 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v96;
        v53 = 1;
        *(_DWORD *)(a4 + 32) = 1;
        goto LABEL_90;
      }
      goto LABEL_135;
    }
    LOBYTE(v80) = 0;
    v83 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL,WebCore::GraphicsContextGLActiveInfo>>(v96, (uint64_t)&v80);
    if (!v83)
      break;
    v53 = v97;
    if (!(_DWORD)v97)
    {
      v55 = v96;
      v96 = 0;
      v56 = v80;
      v57 = v81;
      v58 = v82;
      *(_QWORD *)a4 = v55;
      *(_BYTE *)(a4 + 8) = v56;
      *(_QWORD *)(a4 + 16) = v57;
      *(_QWORD *)(a4 + 24) = v58;
      *(_DWORD *)(a4 + 32) = 0;
      goto LABEL_90;
    }
LABEL_135:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 32) = 1;
  v53 = v97;
  if ((_DWORD)v97 == -1)
    goto LABEL_91;
LABEL_90:
  ((void (*)(unint64_t *, uint64_t **))off_1E34E3480[v53])(&v80, &v96);
LABEL_91:
  v59 = v93;
  v93 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v54);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetActiveUniform>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3748[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
  v4 = a3[2];
  a3[2] = 0;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = a3[3];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetAttribLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v66;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  char v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  int v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  IPC::Encoder *v85;
  int v86;
  char v87;
  IPC::Decoder *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v78, a5);
  if (!(_BYTE)v80)
    goto LABEL_125;
  v61 = v78;
  v60 = v79;
  v62 = ((unint64_t)v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v62 - (_QWORD)v78;
  if (v62 >= (unint64_t)v78)
  {
    v64 = v63 + 2;
    if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v79)
    {
      *(_WORD *)((char *)v78 + v63) = 2822;
      goto LABEL_104;
    }
    v60 = 0;
  }
  v64 = 0;
LABEL_104:
  v66 = (char *)(((unint64_t)v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v66 >= (char *)v61 + v64)
  {
    v64 = v66 - (char *)v61 + 8;
    if ((unint64_t)(v66 - (char *)v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60)
      goto LABEL_137;
    *(_QWORD *)v66 = v6;
  }
  if (!v60)
  {
LABEL_137:
    v76 = 17;
    goto LABEL_126;
  }
  v68 = v8[8];
  v69 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = v8[7];
  if (v69 + 16 >= v70)
    v69 = 0;
  if (v64 <= 0x10)
    v64 = 16;
  v71 = v69 + v64;
  if (v70 <= v71)
    v71 = 0;
  v8[9] = v71;
  v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v71, v72));
  v74 = *((_DWORD *)v8 + 27);
  if (v73 == 0x80000000 || v74 != 0)
  {
    v77 = v74 + 1;
    *((_DWORD *)v8 + 27) = v77;
    if (v77 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v82, a5);
  if (!v84)
  {
LABEL_125:
    v76 = 15;
LABEL_126:
    *(_BYTE *)a4 = v76;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v82;
  v12 = v83;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v88, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v88, v14))
  {
    LOBYTE(v91) = 11;
    v14 = 1;
    LODWORD(v93) = 1;
    LOBYTE(v78) = 0;
    v80 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
    v81 = 1;
    if ((_DWORD)v93 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v85, &v91);
    goto LABEL_67;
  }
  v91 = v11;
  v92 = v12;
  v93 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3556;
  v93 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v92 = 0;
        }
        else
        {
          *v19 = v14;
          v93 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v91, a2);
      if (v92)
      {
        v21 = v93;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v93 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v85) = 16;
          v86 = 1;
LABEL_48:
          v87 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v85 = v40;
          v86 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v88, v14, 0xDE4u, (uint64_t)&v89, a5);
        LOBYTE(v85) = 0;
        v86 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)&v89);
        v87 = 1;
        if (v90 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v90])(&v94, &v89);
      }
      else
      {
        LOBYTE(v85) = 0;
        v87 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v88);
      if (!v87)
      {
        LOBYTE(v78) = 0;
        v81 = 0;
        goto LABEL_64;
      }
      if (v86 == 1)
      {
        v45 = (char)v85;
LABEL_63:
        LOBYTE(v78) = v45;
        v80 = 1;
        v81 = 1;
        goto LABEL_64;
      }
      if (v86)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v85);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v87)
        goto LABEL_132;
      if (v86)
        goto LABEL_138;
      v44 = v85;
      v85 = 0;
      v91 = (uint64_t)v44;
      LODWORD(v92) = v43;
      LODWORD(v93) = 0;
      LOBYTE(v78) = 0;
      v80 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
      v81 = 1;
      if ((_DWORD)v93 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v89, &v91);
LABEL_64:
      if (v87 && v86 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v86])(&v91, &v85);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v88);
      if (v81)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v78);
        if (v81)
        {
          if (v80 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v91, &v78);
        }
        return result;
      }
      if (v84)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v92 = 0;
    }
    v46 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v82;
    if (v46 < v82)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v83)
      {
        *(_WORD *)(v82 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v89, v13);
    v8 = v89;
    v91 = 0;
    IPC::Connection::createSyncMessageEncoder(3556, (uint64_t)v6, &v91, (uint64_t *)&v85);
    v6 = v85;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v85, 4uLL, 4) = (_DWORD)v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v6, *(uint64_t **)(a2 + 8));
    IPC::Connection::sendSyncMessage((uint64_t)v8, v91, (uint64_t *)&v85, 0, (uint64_t)&v78, a5);
    a2 = v79;
    if ((_DWORD)v79)
    {
      if ((_DWORD)v79 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v78;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v54 = IPC::Decoder::decode<std::tuple<float>>(v78);
    if ((v54 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v79)
    {
      v56 = v78;
      v78 = 0;
      *(_QWORD *)a4 = v56;
      *(_DWORD *)(a4 + 8) = v54;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v88, &v78);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v79;
  if ((_DWORD)v79 != -1)
    goto LABEL_91;
LABEL_92:
  v57 = v85;
  v85 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v55);
    WTF::fastFree(v58, v59);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
}

_QWORD *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a1[2];
  v3 = *a1 + v2;
  v4 = (v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (v5)
  {
    v7 = v6 + v2;
    v8 = v7 + 4;
    if (v7 > 0xFFFFFFFFFFFFFFFBLL || v8 > a1[1])
    {
      a1[1] = 0;
    }
    else
    {
      *(_DWORD *)(*a1 + v7) = *(_DWORD *)a2;
      a1[2] = v8;
    }
  }
  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(a1, *(uint64_t **)(a2 + 8));
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetAttribLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3758[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3558;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDE6u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3558, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3768[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetString,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl *v48;
  IPC::Encoder *v49;
  WTF::StringImpl *v50;
  IPC::Encoder *v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  int v78;
  void *v79;
  uint64_t *v80;
  WTF::StringImpl *v81;
  IPC::Encoder *v82;
  WTF *v83;
  void *v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  WTF::StringImpl *v93;
  IPC::Encoder *v94;
  int v95;
  IPC::Encoder *v96;
  char v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_99;
  v54 = v86;
  v53 = v87;
  v55 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = v55 - (_QWORD)v86;
  if (v55 >= (unint64_t)v86)
  {
    v57 = v56 + 2;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v57 <= v87)
    {
      *(_WORD *)((char *)v86 + v56) = 2822;
      goto LABEL_78;
    }
    v53 = 0;
  }
  v57 = 0;
LABEL_78:
  v59 = (char *)(((unint64_t)v54 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v59 >= (char *)v54 + v57)
  {
    v57 = v59 - (char *)v54 + 8;
    if ((unint64_t)(v59 - (char *)v54) > 0xFFFFFFFFFFFFFFF7 || v57 > v53)
      goto LABEL_144;
    *(_QWORD *)v59 = a3;
  }
  if (!v53)
  {
LABEL_144:
    v69 = 17;
    goto LABEL_100;
  }
  v61 = v8[8];
  v62 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v8[7];
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v57 <= 0x10)
    v57 = 16;
  v64 = v62 + v57;
  if (v63 <= v64)
    v64 = 0;
  v8[9] = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v64, v65));
  v67 = *((_DWORD *)v8 + 27);
  if (v66 == 0x80000000 || v67 != 0)
  {
    v85 = v67 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_99:
    v69 = 15;
LABEL_100:
    *(_BYTE *)a4 = v69;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v98) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v98);
    v89 = 1;
    if (v100 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v93, &v98);
    goto LABEL_105;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_140;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_139;
  *(_WORD *)(v11 + v16) = 3585;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v98) = 0;
        LOBYTE(v100) = 0;
        goto LABEL_53;
      }
      *v24 = *a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v98) = 16;
      v99 = 1;
LABEL_52:
      LOBYTE(v100) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v38 = v8[8];
    v39 = *(_QWORD *)(v38 + 8);
    if (v39 <= 0xFF)
      goto LABEL_138;
    v40 = v8[7];
    v41 = *(_QWORD *)(v38 + 16);
    v42 = v39 - 256;
    if (v40)
    {
      v11 = v40 - 1;
      if (v42 < v40 - 1)
        goto LABEL_138;
    }
    else
    {
      v11 = v42;
    }
    v43 = v41 + 256;
    v44 = WTF::fastMalloc((WTF *)0x48);
    v45 = (WTF::StringImpl *)IPC::Decoder::Decoder(v44, v43, v11, v8[6]);
    if (*((_WORD *)v45 + 25) != 2821)
    {
      v98 = v45;
      v99 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder(v45);
    WTF::fastFree(v46, v47);
    IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xE01u, (uint64_t)&v93, a5);
    LOBYTE(v98) = 0;
    v99 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v93);
    LOBYTE(v100) = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34E3480[v94])(&v96, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v101);
    if (!(_BYTE)v100)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_105;
    }
    if (v99 == 1)
    {
      LOBYTE(v86) = (_BYTE)v98;
      v52 = 1;
      v88 = 1;
      v89 = 1;
LABEL_104:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34E3480[v52])(&v93, &v98);
      goto LABEL_105;
    }
    if (v99)
      goto LABEL_145;
    LOBYTE(v96) = 0;
    v97 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>((uint64_t *)v98, &v96);
    if (!v97)
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
      goto LABEL_102;
    }
    if ((_BYTE)v100)
      break;
LABEL_138:
    __break(1u);
LABEL_139:
    v12 = 0;
LABEL_140:
    v17 = 0;
  }
  if (v99)
    goto LABEL_145;
  v48 = v98;
  v98 = 0;
  v49 = v96;
  v96 = 0;
  v93 = v48;
  v94 = v49;
  v95 = 0;
  LOBYTE(v86) = 0;
  v88 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
  v89 = 1;
  if (v95 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v102, &v93);
  if (v97)
  {
    v51 = v96;
    v96 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
LABEL_102:
  if ((_BYTE)v100)
  {
    v52 = v99;
    if (v99 != -1)
      goto LABEL_104;
  }
LABEL_105:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
  if (v89)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
    if (v89)
    {
      if (v88 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(WTF::StringImpl **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v98, &v86);
    }
    return result;
  }
  if (!v92)
    goto LABEL_138;
  v70 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - v90;
  if (v70 < v90)
    goto LABEL_146;
  v72 = 0;
  if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v71 + 2 <= v91)
  {
    *(_WORD *)(v90 + v71) = 2821;
    v72 = v71 + 2;
  }
  while (2)
  {
    v73 = v8[8];
    v74 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v75 = v8[7];
    if (v74 + 16 >= v75)
      v74 = 0;
    if (v72 <= 0x10)
      v72 = 16;
    v76 = v74 + v72;
    if (v75 <= v76)
      v76 = 0;
    v8[9] = v76;
    v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
    do
      __ldaxr(v77);
    while (__stlxr(v76, v77));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3585, a3, (uint64_t *)&v93, (uint64_t *)&v96);
    LODWORD(a2) = *a2;
    *(_DWORD *)IPC::Encoder::grow(v96, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v93, (uint64_t *)&v96, 0, (uint64_t)&v86, a5);
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
        v78 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_129;
      }
LABEL_145:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_146:
      v72 = 0;
      continue;
    }
    break;
  }
  LOBYTE(v98) = 0;
  LOBYTE(v99) = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v86, &v98);
  if ((_BYTE)v99)
  {
    v78 = v87;
    if (!(_DWORD)v87)
    {
      v80 = v86;
      v86 = 0;
      v81 = v98;
      *(_QWORD *)a4 = v80;
      *(_QWORD *)(a4 + 8) = v81;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_129;
    }
    goto LABEL_145;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  v78 = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_130;
LABEL_129:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E3480[v78])(&v98, &v86);
LABEL_130:
  v82 = v96;
  v96 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v79);
    WTF::fastFree(v83, v84);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetString>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3778[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetStringEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  unint64_t v12;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (_QWORD *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v11 >= v2 + v3)
  {
    v12 = (unint64_t)v11 - v2 + 8;
    if ((unint64_t)v11 - v2 > 0xFFFFFFFFFFFFFFF7 || v12 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v11 = *(_QWORD *)(a2 + 8);
      result[2] = v12;
    }
  }
  return result;
}

_QWORD *IPC::Decoder::decode<std::tuple<std::span<float const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = (_QWORD *)a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFloatv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3110[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3788[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetFloatvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9GetFloatvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unint64_t IPC::Decoder::decode<std::tuple<std::span<int const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  __int128 v8;
  char v9;

  result = IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(_BYTE *)(a1 + 16) = 1;
  }
  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v5 = *a2;
    v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    result = a2[3];
    if (result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v5);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegerv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3120[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3798[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetIntegervEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetIntegervEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unint64_t IPC::Decoder::decode<std::tuple<std::span<int const,4ul>>>(uint64_t *a1)
{
  unint64_t result;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  result = IPC::Decoder::decode<std::span<int const,4ul>>(a1);
  v4 = v3;
  if (!v3)
  {
    v5 = *a1;
    v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    v7 = a1[3];
    if (v7 && v6 != 0)
    {
      v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v5);
      v4 = 0;
      result = v9;
    }
  }
  if (!v4)
    return 0;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetIntegeri_v>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3130[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E37A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unint64_t v50;
  char v51;
  IPC::Encoder *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  int v62;
  unint64_t v63;
  void *v64;
  uint64_t *v65;
  IPC::Encoder *v66;
  WTF *v67;
  void *v68;
  unint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v75;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  char v85;
  unsigned int v86;
  uint64_t *v87;
  unint64_t v88;
  int v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  char v93;
  IPC::Encoder *v94;
  unint64_t v95;
  int v96;
  uint64_t *v97;
  unsigned int v98;
  unsigned int v99;
  IPC::Decoder *v100;
  char v101;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v87, a5);
  if (!(_BYTE)v89)
    goto LABEL_130;
  v70 = v87;
  v69 = v88;
  v71 = ((unint64_t)v87 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v71 - (_QWORD)v87;
  if (v71 >= (unint64_t)v87)
  {
    v73 = v72 + 2;
    if (v72 <= 0xFFFFFFFFFFFFFFFDLL && v73 <= v88)
    {
      *(_WORD *)((char *)v87 + v72) = 2822;
      goto LABEL_109;
    }
    v69 = 0;
  }
  v73 = 0;
LABEL_109:
  v75 = (char *)(((unint64_t)v70 + v73 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v75 >= (char *)v70 + v73)
  {
    v73 = v75 - (char *)v70 + 8;
    if ((unint64_t)(v75 - (char *)v70) > 0xFFFFFFFFFFFFFFF7 || v73 > v69)
      goto LABEL_143;
    *(_QWORD *)v75 = a3;
  }
  if (!v69)
  {
LABEL_143:
    v85 = 17;
    goto LABEL_131;
  }
  v77 = v8[8];
  v78 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v79 = v8[7];
  if (v78 + 16 >= v79)
    v78 = 0;
  if (v73 <= 0x10)
    v73 = 16;
  v80 = v78 + v73;
  if (v79 <= v80)
    v80 = 0;
  v8[9] = v80;
  v81 = (unint64_t *)(*(_QWORD *)(v77 + 16) + 128);
  do
    v82 = __ldaxr(v81);
  while (__stlxr(v80, v81));
  v83 = *((_DWORD *)v8 + 27);
  if (v82 == 0x80000000 || v83 != 0)
  {
    v86 = v83 + 1;
    *((_DWORD *)v8 + 27) = v86;
    if (v86 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v91, a5);
  if (!v93)
  {
LABEL_130:
    v85 = 15;
LABEL_131:
    *(_BYTE *)a4 = v85;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v91;
  v12 = v92;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v100, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v100, v14))
  {
    LOBYTE(v97) = 11;
    v14 = 1;
    v99 = 1;
    LOBYTE(v87) = 0;
    v89 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v97);
    v90 = 1;
    v38 = v99;
    if (v99 == -1)
      goto LABEL_72;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_71;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3565;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v97) = 0;
        LOBYTE(v99) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v97) = 16;
      v98 = 1;
LABEL_52:
      LOBYTE(v99) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v97 = (uint64_t *)v47;
      v98 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v100, v14, 0xDEDu, (uint64_t)&v94, a5);
    LOBYTE(v97) = 0;
    v98 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v97, (uint64_t)&v94);
    LOBYTE(v99) = 1;
    if ((_DWORD)v95 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v95])(&v101, &v94);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v100);
    if (!(_BYTE)v99)
    {
      LOBYTE(v87) = 0;
      v90 = 0;
      goto LABEL_68;
    }
    if (v98 == 1)
    {
      v53 = (char)v97;
LABEL_67:
      LOBYTE(v87) = v53;
      v89 = 1;
      v90 = 1;
      goto LABEL_68;
    }
    if (v98)
      goto LABEL_144;
    v50 = IPC::Decoder::decode<std::tuple<long long>>(v97);
    if (!v51)
    {
      v53 = 13;
      goto LABEL_67;
    }
    if (!(_BYTE)v99)
      goto LABEL_137;
    if (v98)
      goto LABEL_144;
    v52 = (IPC::Encoder *)v97;
    v97 = 0;
    v94 = v52;
    v95 = v50;
    v96 = 0;
    LOBYTE(v87) = 0;
    v89 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v94);
    v90 = 1;
    if (v96 != -1)
      ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v96])(&v101, &v94);
LABEL_68:
    if ((_BYTE)v99)
    {
      v38 = v98;
      if (v98 != -1)
      {
        v39 = off_1E34E3480;
LABEL_71:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v94, &v97);
      }
    }
LABEL_72:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v100);
    if (v90)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v87);
      if (v90)
      {
        if (v89 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v89])(&v97, &v87);
      }
      return result;
    }
    if (v93)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v54 = (v91 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v55 = v54 - v91;
  if (v54 < v91)
    goto LABEL_145;
  v56 = 0;
  if (v55 <= 0xFFFFFFFFFFFFFFFDLL && v55 + 2 <= v92)
  {
    *(_WORD *)(v91 + v55) = 2821;
    v56 = v55 + 2;
  }
  while (2)
  {
    v57 = v8[8];
    v58 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v59 = v8[7];
    if (v58 + 16 >= v59)
      v58 = 0;
    if (v56 <= 0x10)
      v56 = 16;
    v60 = v58 + v56;
    if (v59 <= v60)
      v60 = 0;
    v8[9] = v60;
    v61 = (unint64_t *)(*(_QWORD *)(v57 + 16) + 128);
    do
      __ldaxr(v61);
    while (__stlxr(v60, v61));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v100, v13);
    v8 = (uint64_t *)v100;
    v97 = 0;
    IPC::Connection::createSyncMessageEncoder(3565, a3, (uint64_t *)&v97, (uint64_t *)&v94);
    v62 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v94, 4uLL, 4) = v62;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v97, (uint64_t *)&v94, 0, (uint64_t)&v87, a5);
    a2 = v88;
    if ((_DWORD)v88)
    {
      if ((_DWORD)v88 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v87;
        goto LABEL_95;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v56 = 0;
      continue;
    }
    break;
  }
  v63 = IPC::Decoder::decode<std::tuple<long long>>(v87);
  if ((_BYTE)v64)
  {
    if (!(_DWORD)v88)
    {
      v65 = v87;
      v87 = 0;
      *(_QWORD *)a4 = v65;
      *(_QWORD *)(a4 + 8) = v63;
LABEL_95:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_96:
      ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v101, &v87);
      goto LABEL_97;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v88;
  if ((_DWORD)v88 != -1)
    goto LABEL_96;
LABEL_97:
  v66 = v94;
  v94 = 0;
  if (v66)
  {
    IPC::Encoder::~Encoder(v66, v64);
    WTF::fastFree(v67, v68);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v100);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E37B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetInteger64EE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetInteger64i,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  char v44;
  IPC::Encoder *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  unint64_t v56;
  void *v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  char v78;
  unsigned int v79;
  uint64_t *v80;
  unint64_t v81;
  int v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  IPC::Encoder *v87;
  int v88;
  char v89;
  IPC::Decoder *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v80, a5);
  if (!(_BYTE)v82)
    goto LABEL_125;
  v63 = v80;
  v62 = v81;
  v64 = ((unint64_t)v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v64 - (_QWORD)v80;
  if (v64 >= (unint64_t)v80)
  {
    v66 = v65 + 2;
    if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= v81)
    {
      *(_WORD *)((char *)v80 + v65) = 2822;
      goto LABEL_104;
    }
    v62 = 0;
  }
  v66 = 0;
LABEL_104:
  v68 = (char *)(((unint64_t)v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v68 >= (char *)v63 + v66)
  {
    v66 = v68 - (char *)v63 + 8;
    if ((unint64_t)(v68 - (char *)v63) > 0xFFFFFFFFFFFFFFF7 || v66 > v62)
      goto LABEL_137;
    *(_QWORD *)v68 = v6;
  }
  if (!v62)
  {
LABEL_137:
    v78 = 17;
    goto LABEL_126;
  }
  v70 = v8[8];
  v71 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v8[7];
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v66 <= 0x10)
    v66 = 16;
  v73 = v71 + v66;
  if (v72 <= v73)
    v73 = 0;
  v8[9] = v73;
  v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *((_DWORD *)v8 + 27);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *((_DWORD *)v8 + 27) = v79;
    if (v79 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v84, a5);
  if (!v86)
  {
LABEL_125:
    v78 = 15;
LABEL_126:
    *(_BYTE *)a4 = v78;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v84;
  v12 = v85;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v90, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v90, v14))
  {
    LOBYTE(v93) = 11;
    v14 = 1;
    LODWORD(v95) = 1;
    LOBYTE(v80) = 0;
    v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
    v83 = 1;
    if ((_DWORD)v95 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v87, &v93);
    goto LABEL_67;
  }
  v93 = v11;
  v94 = v12;
  v95 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3567;
  v95 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v94 = 0;
        }
        else
        {
          *v19 = v14;
          v95 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v93, (_DWORD *)a2);
      if (v94)
      {
        v21 = v95;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v95 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v87) = 16;
          v88 = 1;
LABEL_48:
          v89 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v87 = v40;
          v88 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v90, v14, 0xDEFu, (uint64_t)&v91, a5);
        LOBYTE(v87) = 0;
        v88 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v91);
        v89 = 1;
        if (v92 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v92])(&v96, &v91);
      }
      else
      {
        LOBYTE(v87) = 0;
        v89 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v90);
      if (!v89)
      {
        LOBYTE(v80) = 0;
        v83 = 0;
        goto LABEL_64;
      }
      if (v88 == 1)
      {
        v46 = (char)v87;
LABEL_63:
        LOBYTE(v80) = v46;
        v82 = 1;
        v83 = 1;
        goto LABEL_64;
      }
      if (v88)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<long long>>((uint64_t *)v87);
      if (!v44)
      {
        v46 = 13;
        goto LABEL_63;
      }
      if (!v89)
        goto LABEL_132;
      if (v88)
        goto LABEL_138;
      v45 = v87;
      v87 = 0;
      v93 = (uint64_t)v45;
      v94 = v43;
      LODWORD(v95) = 0;
      LOBYTE(v80) = 0;
      v82 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
      v83 = 1;
      if ((_DWORD)v95 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v91, &v93);
LABEL_64:
      if (v89 && v88 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v88])(&v93, &v87);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
      if (v83)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v80);
        if (v83)
        {
          if (v82 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v82])(&v93, &v80);
        }
        return result;
      }
      if (v86)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v94 = 0;
    }
    v47 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v84;
    if (v47 < v84)
    {
      v49 = 0;
    }
    else
    {
      v49 = 0;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v85)
      {
        *(_WORD *)(v84 + v48) = 2821;
        v49 = v48 + 2;
      }
    }
    v50 = v8[8];
    v51 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v8[7];
    if (v51 + 16 >= v52)
      v51 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v53 = v51 + v49;
    if (v52 <= v53)
      v53 = 0;
    v8[9] = v53;
    v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
    do
      __ldaxr(v54);
    while (__stlxr(v53, v54));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v91, v13);
    v8 = v91;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3567, (uint64_t)v6, &v93, (uint64_t *)&v87);
    v6 = v87;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v87, 4uLL, 4) = (_DWORD)v13;
    v55 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v55;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v93, (uint64_t *)&v87, 0, (uint64_t)&v80, a5);
    a2 = v81;
    if ((_DWORD)v81)
    {
      if ((_DWORD)v81 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v80;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v56 = IPC::Decoder::decode<std::tuple<long long>>(v80);
    if (!(_BYTE)v57)
      break;
    if (!(_DWORD)v81)
    {
      v58 = v80;
      v80 = 0;
      *(_QWORD *)a4 = v58;
      *(_QWORD *)(a4 + 8) = v56;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v90, &v80);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v81;
  if ((_DWORD)v81 != -1)
    goto LABEL_91;
LABEL_92:
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v91);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetInteger64i>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E37C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetInteger64iEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgrami,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3572;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDF4u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3572, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgrami>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E37D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetProgramiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetBooleanv,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Decoder *v40;
  WTF *v41;
  void *v42;
  char v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  int v54;
  void *v55;
  char v56;
  uint64_t v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  __int128 v80;
  char v81;
  int v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  _BYTE v87[24];
  int v88;
  IPC::Encoder *v89;
  _BYTE v90[15];
  char v91;
  _BYTE v92[15];
  uint64_t v93;

  v6 = a3;
  v8 = a1;
  v93 = *MEMORY[0x1E0C80C00];
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v80, a5);
  if (!v81)
    goto LABEL_122;
  v61 = *((_QWORD *)&v80 + 1);
  v62 = v80;
  v63 = (v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - v80;
  if (v63 >= (unint64_t)v80)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= *((_QWORD *)&v80 + 1))
    {
      *(_WORD *)(v80 + v64) = 2822;
      goto LABEL_101;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_101:
  v67 = (_QWORD *)((v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v67 >= v62 + v65)
  {
    v65 = (unint64_t)v67 - v62 + 8;
    if ((unint64_t)v67 - v62 > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_134;
    *v67 = v6;
  }
  if (!v61)
  {
LABEL_134:
    v77 = 17;
    goto LABEL_123;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v84, a5);
  if (!v86)
  {
LABEL_122:
    v77 = 15;
LABEL_123:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 24) = 1;
    return result;
  }
  v11 = v84;
  v12 = v85;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    v87[0] = 11;
    v14 = 1;
    v88 = 1;
    LOBYTE(v80) = 0;
    v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)v87);
    v83 = 1;
    if (v88 != -1)
      ((void (*)(_BYTE *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(v90, v87);
    goto LABEL_66;
  }
  *(_QWORD *)v87 = v11;
  *(_QWORD *)&v87[8] = v12;
  *(_QWORD *)&v87[16] = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_136;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_130;
  *(_WORD *)(v11 + v16) = 3557;
  *(_QWORD *)&v87[16] = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          *(_QWORD *)&v87[8] = 0;
        }
        else
        {
          *v19 = v14;
          *(_QWORD *)&v87[16] = (char *)v19 - v11 + 8;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,unsigned long>,0ul,1ul>((uint64_t *)v87, (uint64_t)a2);
      if (*(_QWORD *)&v87[8])
      {
        v21 = *(_QWORD *)&v87[16];
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (*(_QWORD *)&v87[16] <= 0x10uLL)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          v90[0] = 16;
          *(_DWORD *)&v90[8] = 1;
LABEL_48:
          v91 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_129;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_129;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Decoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          *(_QWORD *)v90 = v40;
          *(_DWORD *)&v90[8] = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDE5u, (uint64_t)v92, a5);
        v90[0] = 0;
        *(_DWORD *)&v90[8] = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)v90, (uint64_t)v92);
        v91 = 1;
        if (*(_DWORD *)&v92[8] != -1)
          ((void (*)(uint64_t **, _BYTE *))off_1E34E3480[*(unsigned int *)&v92[8]])(&v79, v92);
      }
      else
      {
        v90[0] = 0;
        v91 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v91)
      {
        LOBYTE(v80) = 0;
        v83 = 0;
        goto LABEL_66;
      }
      if (*(_DWORD *)&v90[8] == 1)
      {
        LOBYTE(v80) = v90[0];
        v45 = 1;
        v82 = 1;
        v83 = 1;
LABEL_65:
        ((void (*)(_BYTE *, _BYTE *))off_1E34E3480[v45])(v87, v90);
        goto LABEL_66;
      }
      if (*(_DWORD *)&v90[8])
        goto LABEL_135;
      IPC::Decoder::decode<std::tuple<std::span<BOOL const,18446744073709551615ul>>>((uint64_t)v87, *(uint64_t **)v90);
      if (v87[16])
      {
        v43 = v87[0];
        *(_QWORD *)v92 = *(_QWORD *)&v87[1];
        *(_QWORD *)&v92[7] = *(_QWORD *)&v87[8];
        if (!v91)
          goto LABEL_129;
        if (*(_DWORD *)&v90[8])
          goto LABEL_135;
        v44 = *(_QWORD *)v90;
        *(_QWORD *)v90 = 0;
        *(_QWORD *)&v87[9] = *(_QWORD *)v92;
        *(_QWORD *)&v87[16] = *(_QWORD *)&v92[7];
        *(_QWORD *)v87 = v44;
        v87[8] = v43;
        v88 = 0;
        LOBYTE(v80) = 0;
        v82 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)v87);
        v83 = 1;
        if (v88 != -1)
          ((void (*)(uint64_t **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v79, v87);
      }
      else
      {
        LOBYTE(v80) = 13;
        v82 = 1;
        v83 = 1;
      }
      if (v91)
      {
        v45 = *(_DWORD *)&v90[8];
        if (*(_DWORD *)&v90[8] != -1)
          goto LABEL_65;
      }
LABEL_66:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v83)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 24) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v80);
        if (v83)
        {
          if (v82 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(_BYTE *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v82])(v87, &v80);
        }
        return result;
      }
      if (v86)
        break;
LABEL_129:
      __break(1u);
LABEL_130:
      v12 = 0;
      v17 = 0;
      *(_QWORD *)&v87[8] = 0;
    }
    v46 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v84;
    if (v46 < v84)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v85)
      {
        *(_WORD *)(v84 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v79, v13);
    v8 = v79;
    *(_QWORD *)v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3557, (uint64_t)v6, (uint64_t *)v92, (uint64_t *)&v89);
    v6 = v89;
    v13 = (uint64_t **)*a2;
    *(_DWORD *)IPC::Encoder::grow(v89, 4uLL, 4) = (_DWORD)v13;
    a2 = (unsigned int *)*((_QWORD *)a2 + 1);
    *(_QWORD *)IPC::Encoder::grow(v6, 8uLL, 8) = a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, *(uint64_t *)v92, (uint64_t *)&v89, 0, (uint64_t)v87, a5);
    if (*(_DWORD *)&v87[8])
    {
      if (*(_DWORD *)&v87[8] == 1)
      {
        *(_BYTE *)a4 = v87[0];
        v54 = 1;
        *(_DWORD *)(a4 + 24) = 1;
        goto LABEL_90;
      }
      goto LABEL_135;
    }
    IPC::Decoder::decode<std::tuple<std::span<BOOL const,18446744073709551615ul>>>((uint64_t)&v80, *(uint64_t **)v87);
    if (!v81)
      break;
    v56 = v80;
    *(_QWORD *)v90 = *(_QWORD *)((char *)&v80 + 1);
    *(_QWORD *)&v90[7] = *((_QWORD *)&v80 + 1);
    v54 = *(_DWORD *)&v87[8];
    if (!*(_DWORD *)&v87[8])
    {
      v57 = *(_QWORD *)v87;
      *(_QWORD *)v87 = 0;
      *(_QWORD *)(a4 + 9) = *(_QWORD *)v90;
      *(_QWORD *)(a4 + 16) = *(_QWORD *)&v90[7];
      *(_QWORD *)a4 = v57;
      *(_BYTE *)(a4 + 8) = v56;
      *(_DWORD *)(a4 + 24) = 0;
      goto LABEL_90;
    }
LABEL_135:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_136:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 24) = 1;
  v54 = *(_DWORD *)&v87[8];
  if (*(_DWORD *)&v87[8] == -1)
    goto LABEL_91;
LABEL_90:
  ((void (*)(__int128 *, _BYTE *))off_1E34E3480[v54])(&v80, v87);
LABEL_91:
  v58 = v89;
  v89 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v55);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v79);
}

uint64_t IPC::Decoder::decode<std::tuple<std::span<BOOL const,18446744073709551615ul>>>(uint64_t result, uint64_t *a2)
{
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (_BYTE *)result;
  v4 = (a2[2] + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *a2;
  v6 = a2[1];
  v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 7)
  {
    v18 = 0;
    v19 = 0;
    *a2 = 0;
    a2[1] = 0;
    v20 = a2[3];
    if (v20)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
        v19 = *a2;
        v18 = a2[1];
      }
      else
      {
        v18 = 0;
        v19 = 0;
      }
    }
    goto LABEL_30;
  }
  v9 = (unint64_t *)(v5 + v7);
  v10 = v5 + v7 + 8;
  a2[2] = v10;
  if (!v5)
  {
    v18 = v6;
    v19 = 0;
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    v21 = a2[3];
    if (v21 && v18)
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
    goto LABEL_18;
  }
  v11 = *v9;
  if (!v11)
  {
    v10 = 0;
    goto LABEL_25;
  }
  v12 = v6 - (v10 - v5);
  if (v6 >= v10 - v5 && v12 >= v11)
  {
    a2[2] = v10 + v11;
    if (v12 != -1 && v11 == -1)
      goto LABEL_18;
LABEL_25:
    *(_QWORD *)result = v10;
    *(_QWORD *)(result + 8) = v11;
    *(_BYTE *)(result + 16) = 1;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  v22 = a2[3];
  if (v22 && v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
LABEL_18:
  v15 = *a2;
  v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  result = a2[3];
  if (!result)
  {
    v16 = 0;
LABEL_20:
    v17 = 0;
    goto LABEL_21;
  }
  if (!v16)
    goto LABEL_20;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v15);
  v17 = *a2;
  v16 = a2[1];
  result = a2[3];
LABEL_21:
  *v3 = 0;
  v3[16] = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result)
  {
    if (v16)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, v17);
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetBooleanv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E37E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL11GetBooleanvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v66;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  char v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  int v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  IPC::Encoder *v85;
  int v86;
  char v87;
  IPC::Decoder *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v78, a5);
  if (!(_BYTE)v80)
    goto LABEL_125;
  v61 = v78;
  v60 = v79;
  v62 = ((unint64_t)v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v62 - (_QWORD)v78;
  if (v62 >= (unint64_t)v78)
  {
    v64 = v63 + 2;
    if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v79)
    {
      *(_WORD *)((char *)v78 + v63) = 2822;
      goto LABEL_104;
    }
    v60 = 0;
  }
  v64 = 0;
LABEL_104:
  v66 = (char *)(((unint64_t)v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v66 >= (char *)v61 + v64)
  {
    v64 = v66 - (char *)v61 + 8;
    if ((unint64_t)(v66 - (char *)v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60)
      goto LABEL_137;
    *(_QWORD *)v66 = a3;
  }
  if (!v60)
  {
LABEL_137:
    v76 = 17;
    goto LABEL_126;
  }
  v68 = v8[8];
  v69 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = v8[7];
  if (v69 + 16 >= v70)
    v69 = 0;
  if (v64 <= 0x10)
    v64 = 16;
  v71 = v69 + v64;
  if (v70 <= v71)
    v71 = 0;
  v8[9] = v71;
  v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v71, v72));
  v74 = *((_DWORD *)v8 + 27);
  if (v73 == 0x80000000 || v74 != 0)
  {
    v77 = v74 + 1;
    *((_DWORD *)v8 + 27) = v77;
    if (v77 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v82, a5);
  if (!v84)
  {
LABEL_125:
    v76 = 15;
LABEL_126:
    *(_BYTE *)a4 = v76;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v82;
  v12 = v83;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v88, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v88, v14))
  {
    LOBYTE(v91) = 11;
    v14 = 1;
    LODWORD(v93) = 1;
    LOBYTE(v78) = 0;
    v80 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
    v81 = 1;
    if ((_DWORD)v93 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v85, &v91);
    goto LABEL_67;
  }
  v91 = v11;
  v92 = v12;
  v93 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3564;
  v93 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v92 = 0;
        }
        else
        {
          *v19 = v14;
          v93 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(&v91, (_DWORD *)a2);
      if (v92)
      {
        v21 = v93;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v93 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v85) = 16;
          v86 = 1;
LABEL_48:
          v87 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v85 = v40;
          v86 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v88, v14, 0xDECu, (uint64_t)&v89, a5);
        LOBYTE(v85) = 0;
        v86 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)&v89);
        v87 = 1;
        if (v90 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v90])(&v94, &v89);
      }
      else
      {
        LOBYTE(v85) = 0;
        v87 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v88);
      if (!v87)
      {
        LOBYTE(v78) = 0;
        v81 = 0;
        goto LABEL_64;
      }
      if (v86 == 1)
      {
        v45 = (char)v85;
LABEL_63:
        LOBYTE(v78) = v45;
        v80 = 1;
        v81 = 1;
        goto LABEL_64;
      }
      if (v86)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v85);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v87)
        goto LABEL_132;
      if (v86)
        goto LABEL_138;
      v44 = v85;
      v85 = 0;
      v91 = (uint64_t)v44;
      LODWORD(v92) = v43;
      LODWORD(v93) = 0;
      LOBYTE(v78) = 0;
      v80 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
      v81 = 1;
      if ((_DWORD)v93 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v89, &v91);
LABEL_64:
      if (v87 && v86 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v86])(&v91, &v85);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v88);
      if (v81)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v78);
        if (v81)
        {
          if (v80 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v91, &v78);
        }
        return result;
      }
      if (v84)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v92 = 0;
    }
    v46 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v82;
    if (v46 < v82)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v83)
      {
        *(_WORD *)(v82 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v89, v13);
    v8 = v89;
    v91 = 0;
    IPC::Connection::createSyncMessageEncoder(3564, a3, &v91, (uint64_t *)&v85);
    IPC::ArgumentCoder<WebKit::WebGPU::Extent3DDict,void>::encode(v85, (_DWORD *)a2);
    IPC::Connection::sendSyncMessage((uint64_t)v8, v91, (uint64_t *)&v85, 0, (uint64_t)&v78, a5);
    a2 = v79;
    if ((_DWORD)v79)
    {
      if ((_DWORD)v79 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v78;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v54 = IPC::Decoder::decode<std::tuple<float>>(v78);
    if ((v54 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v79)
    {
      v56 = v78;
      v78 = 0;
      *(_QWORD *)a4 = v56;
      *(_DWORD *)(a4 + 8) = v54;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v88, &v78);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v79;
  if ((_DWORD)v79 != -1)
    goto LABEL_91;
LABEL_92:
  v57 = v85;
  v85 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v55);
    WTF::fastFree(v58, v59);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetFramebufferAttachmentParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E37F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetProgramInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl *v48;
  IPC::Encoder *v49;
  WTF::StringImpl *v50;
  IPC::Encoder *v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  int v78;
  void *v79;
  uint64_t *v80;
  WTF::StringImpl *v81;
  IPC::Encoder *v82;
  WTF *v83;
  void *v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  WTF::StringImpl *v93;
  IPC::Encoder *v94;
  int v95;
  IPC::Encoder *v96;
  char v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_99;
  v54 = v86;
  v53 = v87;
  v55 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = v55 - (_QWORD)v86;
  if (v55 >= (unint64_t)v86)
  {
    v57 = v56 + 2;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v57 <= v87)
    {
      *(_WORD *)((char *)v86 + v56) = 2822;
      goto LABEL_78;
    }
    v53 = 0;
  }
  v57 = 0;
LABEL_78:
  v59 = (char *)(((unint64_t)v54 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v59 >= (char *)v54 + v57)
  {
    v57 = v59 - (char *)v54 + 8;
    if ((unint64_t)(v59 - (char *)v54) > 0xFFFFFFFFFFFFFFF7 || v57 > v53)
      goto LABEL_144;
    *(_QWORD *)v59 = a3;
  }
  if (!v53)
  {
LABEL_144:
    v69 = 17;
    goto LABEL_100;
  }
  v61 = v8[8];
  v62 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v8[7];
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v57 <= 0x10)
    v57 = 16;
  v64 = v62 + v57;
  if (v63 <= v64)
    v64 = 0;
  v8[9] = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v64, v65));
  v67 = *((_DWORD *)v8 + 27);
  if (v66 == 0x80000000 || v67 != 0)
  {
    v85 = v67 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_99:
    v69 = 15;
LABEL_100:
    *(_BYTE *)a4 = v69;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v98) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v98);
    v89 = 1;
    if (v100 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v93, &v98);
    goto LABEL_105;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_140;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_139;
  *(_WORD *)(v11 + v16) = 3571;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v98) = 0;
        LOBYTE(v100) = 0;
        goto LABEL_53;
      }
      *v24 = *a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v98) = 16;
      v99 = 1;
LABEL_52:
      LOBYTE(v100) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v38 = v8[8];
    v39 = *(_QWORD *)(v38 + 8);
    if (v39 <= 0xFF)
      goto LABEL_138;
    v40 = v8[7];
    v41 = *(_QWORD *)(v38 + 16);
    v42 = v39 - 256;
    if (v40)
    {
      v11 = v40 - 1;
      if (v42 < v40 - 1)
        goto LABEL_138;
    }
    else
    {
      v11 = v42;
    }
    v43 = v41 + 256;
    v44 = WTF::fastMalloc((WTF *)0x48);
    v45 = (WTF::StringImpl *)IPC::Decoder::Decoder(v44, v43, v11, v8[6]);
    if (*((_WORD *)v45 + 25) != 2821)
    {
      v98 = v45;
      v99 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder(v45);
    WTF::fastFree(v46, v47);
    IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xDF3u, (uint64_t)&v93, a5);
    LOBYTE(v98) = 0;
    v99 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v93);
    LOBYTE(v100) = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34E3480[v94])(&v96, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v101);
    if (!(_BYTE)v100)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_105;
    }
    if (v99 == 1)
    {
      LOBYTE(v86) = (_BYTE)v98;
      v52 = 1;
      v88 = 1;
      v89 = 1;
LABEL_104:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34E3480[v52])(&v93, &v98);
      goto LABEL_105;
    }
    if (v99)
      goto LABEL_145;
    LOBYTE(v96) = 0;
    v97 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>((uint64_t *)v98, &v96);
    if (!v97)
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
      goto LABEL_102;
    }
    if ((_BYTE)v100)
      break;
LABEL_138:
    __break(1u);
LABEL_139:
    v12 = 0;
LABEL_140:
    v17 = 0;
  }
  if (v99)
    goto LABEL_145;
  v48 = v98;
  v98 = 0;
  v49 = v96;
  v96 = 0;
  v93 = v48;
  v94 = v49;
  v95 = 0;
  LOBYTE(v86) = 0;
  v88 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
  v89 = 1;
  if (v95 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v102, &v93);
  if (v97)
  {
    v51 = v96;
    v96 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
LABEL_102:
  if ((_BYTE)v100)
  {
    v52 = v99;
    if (v99 != -1)
      goto LABEL_104;
  }
LABEL_105:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
  if (v89)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
    if (v89)
    {
      if (v88 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(WTF::StringImpl **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v98, &v86);
    }
    return result;
  }
  if (!v92)
    goto LABEL_138;
  v70 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - v90;
  if (v70 < v90)
    goto LABEL_146;
  v72 = 0;
  if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v71 + 2 <= v91)
  {
    *(_WORD *)(v90 + v71) = 2821;
    v72 = v71 + 2;
  }
  while (2)
  {
    v73 = v8[8];
    v74 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v75 = v8[7];
    if (v74 + 16 >= v75)
      v74 = 0;
    if (v72 <= 0x10)
      v72 = 16;
    v76 = v74 + v72;
    if (v75 <= v76)
      v76 = 0;
    v8[9] = v76;
    v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
    do
      __ldaxr(v77);
    while (__stlxr(v76, v77));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3571, a3, (uint64_t *)&v93, (uint64_t *)&v96);
    LODWORD(a2) = *a2;
    *(_DWORD *)IPC::Encoder::grow(v96, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v93, (uint64_t *)&v96, 0, (uint64_t)&v86, a5);
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
        v78 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_129;
      }
LABEL_145:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_146:
      v72 = 0;
      continue;
    }
    break;
  }
  LOBYTE(v98) = 0;
  LOBYTE(v99) = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v86, &v98);
  if ((_BYTE)v99)
  {
    v78 = v87;
    if (!(_DWORD)v87)
    {
      v80 = v86;
      v86 = 0;
      v81 = v98;
      *(_QWORD *)a4 = v80;
      *(_QWORD *)(a4 + 8) = v81;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_129;
    }
    goto LABEL_145;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  v78 = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_130;
LABEL_129:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E3480[v78])(&v98, &v86);
LABEL_130:
  v82 = v96;
  v96 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v79);
    WTF::fastFree(v83, v84);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetProgramInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3808[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3578;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xDFAu, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3578, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetRenderbufferParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3818[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderi,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3584;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xE00u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3584, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderi>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3828[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL10GetShaderiEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderInfoLog,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl *v48;
  IPC::Encoder *v49;
  WTF::StringImpl *v50;
  IPC::Encoder *v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  int v78;
  void *v79;
  uint64_t *v80;
  WTF::StringImpl *v81;
  IPC::Encoder *v82;
  WTF *v83;
  void *v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  WTF::StringImpl *v93;
  IPC::Encoder *v94;
  int v95;
  IPC::Encoder *v96;
  char v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_99;
  v54 = v86;
  v53 = v87;
  v55 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = v55 - (_QWORD)v86;
  if (v55 >= (unint64_t)v86)
  {
    v57 = v56 + 2;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v57 <= v87)
    {
      *(_WORD *)((char *)v86 + v56) = 2822;
      goto LABEL_78;
    }
    v53 = 0;
  }
  v57 = 0;
LABEL_78:
  v59 = (char *)(((unint64_t)v54 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v59 >= (char *)v54 + v57)
  {
    v57 = v59 - (char *)v54 + 8;
    if ((unint64_t)(v59 - (char *)v54) > 0xFFFFFFFFFFFFFFF7 || v57 > v53)
      goto LABEL_144;
    *(_QWORD *)v59 = a3;
  }
  if (!v53)
  {
LABEL_144:
    v69 = 17;
    goto LABEL_100;
  }
  v61 = v8[8];
  v62 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v8[7];
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v57 <= 0x10)
    v57 = 16;
  v64 = v62 + v57;
  if (v63 <= v64)
    v64 = 0;
  v8[9] = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v64, v65));
  v67 = *((_DWORD *)v8 + 27);
  if (v66 == 0x80000000 || v67 != 0)
  {
    v85 = v67 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_99:
    v69 = 15;
LABEL_100:
    *(_BYTE *)a4 = v69;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v98) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v98);
    v89 = 1;
    if (v100 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v93, &v98);
    goto LABEL_105;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_140;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_139;
  *(_WORD *)(v11 + v16) = 3581;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v98) = 0;
        LOBYTE(v100) = 0;
        goto LABEL_53;
      }
      *v24 = *a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v98) = 16;
      v99 = 1;
LABEL_52:
      LOBYTE(v100) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v38 = v8[8];
    v39 = *(_QWORD *)(v38 + 8);
    if (v39 <= 0xFF)
      goto LABEL_138;
    v40 = v8[7];
    v41 = *(_QWORD *)(v38 + 16);
    v42 = v39 - 256;
    if (v40)
    {
      v11 = v40 - 1;
      if (v42 < v40 - 1)
        goto LABEL_138;
    }
    else
    {
      v11 = v42;
    }
    v43 = v41 + 256;
    v44 = WTF::fastMalloc((WTF *)0x48);
    v45 = (WTF::StringImpl *)IPC::Decoder::Decoder(v44, v43, v11, v8[6]);
    if (*((_WORD *)v45 + 25) != 2821)
    {
      v98 = v45;
      v99 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder(v45);
    WTF::fastFree(v46, v47);
    IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xDFDu, (uint64_t)&v93, a5);
    LOBYTE(v98) = 0;
    v99 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v93);
    LOBYTE(v100) = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34E3480[v94])(&v96, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v101);
    if (!(_BYTE)v100)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_105;
    }
    if (v99 == 1)
    {
      LOBYTE(v86) = (_BYTE)v98;
      v52 = 1;
      v88 = 1;
      v89 = 1;
LABEL_104:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34E3480[v52])(&v93, &v98);
      goto LABEL_105;
    }
    if (v99)
      goto LABEL_145;
    LOBYTE(v96) = 0;
    v97 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>((uint64_t *)v98, &v96);
    if (!v97)
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
      goto LABEL_102;
    }
    if ((_BYTE)v100)
      break;
LABEL_138:
    __break(1u);
LABEL_139:
    v12 = 0;
LABEL_140:
    v17 = 0;
  }
  if (v99)
    goto LABEL_145;
  v48 = v98;
  v98 = 0;
  v49 = v96;
  v96 = 0;
  v93 = v48;
  v94 = v49;
  v95 = 0;
  LOBYTE(v86) = 0;
  v88 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
  v89 = 1;
  if (v95 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v102, &v93);
  if (v97)
  {
    v51 = v96;
    v96 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
LABEL_102:
  if ((_BYTE)v100)
  {
    v52 = v99;
    if (v99 != -1)
      goto LABEL_104;
  }
LABEL_105:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
  if (v89)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
    if (v89)
    {
      if (v88 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(WTF::StringImpl **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v98, &v86);
    }
    return result;
  }
  if (!v92)
    goto LABEL_138;
  v70 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - v90;
  if (v70 < v90)
    goto LABEL_146;
  v72 = 0;
  if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v71 + 2 <= v91)
  {
    *(_WORD *)(v90 + v71) = 2821;
    v72 = v71 + 2;
  }
  while (2)
  {
    v73 = v8[8];
    v74 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v75 = v8[7];
    if (v74 + 16 >= v75)
      v74 = 0;
    if (v72 <= 0x10)
      v72 = 16;
    v76 = v74 + v72;
    if (v75 <= v76)
      v76 = 0;
    v8[9] = v76;
    v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
    do
      __ldaxr(v77);
    while (__stlxr(v76, v77));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3581, a3, (uint64_t *)&v93, (uint64_t *)&v96);
    LODWORD(a2) = *a2;
    *(_DWORD *)IPC::Encoder::grow(v96, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v93, (uint64_t *)&v96, 0, (uint64_t)&v86, a5);
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
        v78 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_129;
      }
LABEL_145:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_146:
      v72 = 0;
      continue;
    }
    break;
  }
  LOBYTE(v98) = 0;
  LOBYTE(v99) = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v86, &v98);
  if ((_BYTE)v99)
  {
    v78 = v87;
    if (!(_DWORD)v87)
    {
      v80 = v86;
      v86 = 0;
      v81 = v98;
      *(_QWORD *)a4 = v80;
      *(_QWORD *)(a4 + 8) = v81;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_129;
    }
    goto LABEL_145;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  v78 = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_130;
LABEL_129:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E3480[v78])(&v98, &v86);
LABEL_130:
  v82 = v96;
  v96 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v79);
    WTF::fastFree(v83, v84);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderInfoLog>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3838[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t *IPC::Decoder::operator>><std::tuple<std::span<int const,2ul>,int>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a1[1];
  v5 = *a1;
  v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 7)
  {
    v8 = v5 + v6;
    a1[2] = v8 + 8;
    if (v5)
    {
      LODWORD(v9) = 1;
      goto LABEL_12;
    }
    v8 = v4;
    v10 = 0;
  }
  else
  {
    v8 = 0;
    v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    v17 = a1[3];
    if (v17)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, v5);
        v10 = *a1;
        v8 = a1[1];
      }
      else
      {
        v8 = 0;
        v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  v11 = a1[3];
  if (!v11)
  {
    v4 = 0;
    v8 = 0;
LABEL_11:
    LODWORD(v9) = 0;
    goto LABEL_12;
  }
  if (!v8)
  {
    v4 = 0;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v11 + 16))(v11, v10, v8);
  v8 = 0;
  LODWORD(v9) = 0;
  v4 = a1[1];
LABEL_12:
  if ((_BYTE)v9)
  {
    v9 = *a1;
    v12 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
    if (v4 >= v12 && v4 - v12 > 3)
    {
      v14 = (_DWORD *)(v9 + v12);
      a1[2] = (uint64_t)(v14 + 1);
      if (v9)
      {
        LODWORD(v9) = *v14;
        v15 = v8 & 0xFFFFFFFFFFFFFF00;
        v8 = v8;
        v16 = 1;
        goto LABEL_29;
      }
      v18 = v4;
      v19 = 0;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      *a1 = 0;
      a1[1] = 0;
      v20 = a1[3];
      if (v20)
      {
        if (v4)
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 16))(v20, v9);
          v19 = *a1;
          v18 = a1[1];
        }
        else
        {
          v18 = 0;
          v19 = 0;
        }
      }
    }
    v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    v21 = a1[3];
    if (v21)
    {
      if (v18)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 16))(v21, v19, v18);
        v4 = a1[1];
      }
      else
      {
        v4 = 0;
      }
    }
  }
  v22 = *a1;
  *a1 = 0;
  a1[1] = 0;
  v23 = a1[3];
  if (v23 && v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v22);
  v8 = 0;
  v16 = 0;
  v15 = 0;
LABEL_29:
  if (*(unsigned __int8 *)(a2 + 16) == v16)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = v15 | v8;
      *(_DWORD *)(a2 + 8) = v9;
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = v15 | v8;
    *(_DWORD *)(a2 + 8) = v9;
    *(_BYTE *)(a2 + 16) = 1;
  }
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderPrecisionFormat>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E31D0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3848[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetShaderSource,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF *v46;
  void *v47;
  WTF::StringImpl *v48;
  IPC::Encoder *v49;
  WTF::StringImpl *v50;
  IPC::Encoder *v51;
  int v52;
  unint64_t v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v59;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  int v67;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  int v78;
  void *v79;
  uint64_t *v80;
  WTF::StringImpl *v81;
  IPC::Encoder *v82;
  WTF *v83;
  void *v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  WTF::StringImpl *v93;
  IPC::Encoder *v94;
  int v95;
  IPC::Encoder *v96;
  char v97;
  WTF::StringImpl *v98;
  int v99;
  int v100;
  IPC::Decoder *v101;
  char v102;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_99;
  v54 = v86;
  v53 = v87;
  v55 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v56 = v55 - (_QWORD)v86;
  if (v55 >= (unint64_t)v86)
  {
    v57 = v56 + 2;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && v57 <= v87)
    {
      *(_WORD *)((char *)v86 + v56) = 2822;
      goto LABEL_78;
    }
    v53 = 0;
  }
  v57 = 0;
LABEL_78:
  v59 = (char *)(((unint64_t)v54 + v57 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v59 >= (char *)v54 + v57)
  {
    v57 = v59 - (char *)v54 + 8;
    if ((unint64_t)(v59 - (char *)v54) > 0xFFFFFFFFFFFFFFF7 || v57 > v53)
      goto LABEL_144;
    *(_QWORD *)v59 = a3;
  }
  if (!v53)
  {
LABEL_144:
    v69 = 17;
    goto LABEL_100;
  }
  v61 = v8[8];
  v62 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v8[7];
  if (v62 + 16 >= v63)
    v62 = 0;
  if (v57 <= 0x10)
    v57 = 16;
  v64 = v62 + v57;
  if (v63 <= v64)
    v64 = 0;
  v8[9] = v64;
  v65 = (unint64_t *)(*(_QWORD *)(v61 + 16) + 128);
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v64, v65));
  v67 = *((_DWORD *)v8 + 27);
  if (v66 == 0x80000000 || v67 != 0)
  {
    v85 = v67 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_99:
    v69 = 15;
LABEL_100:
    *(_BYTE *)a4 = v69;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v101, v14))
  {
    LOBYTE(v98) = 11;
    v14 = 1;
    v100 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v98);
    v89 = 1;
    if (v100 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v100])(&v93, &v98);
    goto LABEL_105;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_140;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_139;
  *(_WORD *)(v11 + v16) = 3583;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v98) = 0;
        LOBYTE(v100) = 0;
        goto LABEL_53;
      }
      *v24 = *a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v98) = 16;
      v99 = 1;
LABEL_52:
      LOBYTE(v100) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v38 = v8[8];
    v39 = *(_QWORD *)(v38 + 8);
    if (v39 <= 0xFF)
      goto LABEL_138;
    v40 = v8[7];
    v41 = *(_QWORD *)(v38 + 16);
    v42 = v39 - 256;
    if (v40)
    {
      v11 = v40 - 1;
      if (v42 < v40 - 1)
        goto LABEL_138;
    }
    else
    {
      v11 = v42;
    }
    v43 = v41 + 256;
    v44 = WTF::fastMalloc((WTF *)0x48);
    v45 = (WTF::StringImpl *)IPC::Decoder::Decoder(v44, v43, v11, v8[6]);
    if (*((_WORD *)v45 + 25) != 2821)
    {
      v98 = v45;
      v99 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder(v45);
    WTF::fastFree(v46, v47);
    IPC::Connection::waitForSyncReply((uint64_t)v101, v14, 0xDFFu, (uint64_t)&v93, a5);
    LOBYTE(v98) = 0;
    v99 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v98, (uint64_t)&v93);
    LOBYTE(v100) = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, WTF::StringImpl **))off_1E34E3480[v94])(&v96, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v101);
    if (!(_BYTE)v100)
    {
      LOBYTE(v86) = 0;
      v89 = 0;
      goto LABEL_105;
    }
    if (v99 == 1)
    {
      LOBYTE(v86) = (_BYTE)v98;
      v52 = 1;
      v88 = 1;
      v89 = 1;
LABEL_104:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E34E3480[v52])(&v93, &v98);
      goto LABEL_105;
    }
    if (v99)
      goto LABEL_145;
    LOBYTE(v96) = 0;
    v97 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>((uint64_t *)v98, &v96);
    if (!v97)
    {
      LOBYTE(v86) = 13;
      v88 = 1;
      v89 = 1;
      goto LABEL_102;
    }
    if ((_BYTE)v100)
      break;
LABEL_138:
    __break(1u);
LABEL_139:
    v12 = 0;
LABEL_140:
    v17 = 0;
  }
  if (v99)
    goto LABEL_145;
  v48 = v98;
  v98 = 0;
  v49 = v96;
  v96 = 0;
  v93 = v48;
  v94 = v49;
  v95 = 0;
  LOBYTE(v86) = 0;
  v88 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
  v89 = 1;
  if (v95 != -1)
    ((void (*)(char *, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v102, &v93);
  if (v97)
  {
    v51 = v96;
    v96 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v50);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
LABEL_102:
  if ((_BYTE)v100)
  {
    v52 = v99;
    if (v99 != -1)
      goto LABEL_104;
  }
LABEL_105:
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
  if (v89)
  {
    *(_BYTE *)a4 = 0;
    *(_DWORD *)(a4 + 16) = -1;
    result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
    if (v89)
    {
      if (v88 != -1)
        return (unsigned __int8 ***)((uint64_t (*)(WTF::StringImpl **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v98, &v86);
    }
    return result;
  }
  if (!v92)
    goto LABEL_138;
  v70 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - v90;
  if (v70 < v90)
    goto LABEL_146;
  v72 = 0;
  if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v71 + 2 <= v91)
  {
    *(_WORD *)(v90 + v71) = 2821;
    v72 = v71 + 2;
  }
  while (2)
  {
    v73 = v8[8];
    v74 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v75 = v8[7];
    if (v74 + 16 >= v75)
      v74 = 0;
    if (v72 <= 0x10)
      v72 = 16;
    v76 = v74 + v72;
    if (v75 <= v76)
      v76 = 0;
    v8[9] = v76;
    v77 = (unint64_t *)(*(_QWORD *)(v73 + 16) + 128);
    do
      __ldaxr(v77);
    while (__stlxr(v76, v77));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v101, v13);
    v8 = (uint64_t *)v101;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3583, a3, (uint64_t *)&v93, (uint64_t *)&v96);
    LODWORD(a2) = *a2;
    *(_DWORD *)IPC::Encoder::grow(v96, 4uLL, 4) = (_DWORD)a2;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v93, (uint64_t *)&v96, 0, (uint64_t)&v86, a5);
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
        v78 = 1;
        *(_DWORD *)(a4 + 16) = 1;
        goto LABEL_129;
      }
LABEL_145:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_146:
      v72 = 0;
      continue;
    }
    break;
  }
  LOBYTE(v98) = 0;
  LOBYTE(v99) = 0;
  IPC::Decoder::operator>><std::tuple<WTF::String>>(v86, &v98);
  if ((_BYTE)v99)
  {
    v78 = v87;
    if (!(_DWORD)v87)
    {
      v80 = v86;
      v86 = 0;
      v81 = v98;
      *(_QWORD *)a4 = v80;
      *(_QWORD *)(a4 + 8) = v81;
      *(_DWORD *)(a4 + 16) = 0;
      goto LABEL_129;
    }
    goto LABEL_145;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  v78 = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_130;
LABEL_129:
  ((void (*)(WTF::StringImpl **, uint64_t **))off_1E34E3480[v78])(&v98, &v86);
LABEL_130:
  v82 = v96;
  v96 = 0;
  if (v82)
  {
    IPC::Encoder::~Encoder(v82, v79);
    WTF::fastFree(v83, v84);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v101);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetShaderSource>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3858[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  v4 = a3[1];
  a3[1] = 0;
  a2[1] = v4;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameterf,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3587;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xE03u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3587, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameterf>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3868[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetTexParameteri,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  unsigned int v54;
  uint64_t v55;
  void *v56;
  uint64_t *v57;
  IPC::Encoder *v58;
  WTF *v59;
  void *v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v67;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  int v75;
  char v77;
  unsigned int v78;
  uint64_t *v79;
  unint64_t v80;
  int v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  char v85;
  IPC::Encoder *v86;
  int v87;
  char v88;
  IPC::Decoder *v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v79, a5);
  if (!(_BYTE)v81)
    goto LABEL_125;
  v62 = v79;
  v61 = v80;
  v63 = ((unint64_t)v79 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v64 = v63 - (_QWORD)v79;
  if (v63 >= (unint64_t)v79)
  {
    v65 = v64 + 2;
    if (v64 <= 0xFFFFFFFFFFFFFFFDLL && v65 <= v80)
    {
      *(_WORD *)((char *)v79 + v64) = 2822;
      goto LABEL_104;
    }
    v61 = 0;
  }
  v65 = 0;
LABEL_104:
  v67 = (char *)(((unint64_t)v62 + v65 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v67 >= (char *)v62 + v65)
  {
    v65 = v67 - (char *)v62 + 8;
    if ((unint64_t)(v67 - (char *)v62) > 0xFFFFFFFFFFFFFFF7 || v65 > v61)
      goto LABEL_137;
    *(_QWORD *)v67 = v6;
  }
  if (!v61)
  {
LABEL_137:
    v77 = 17;
    goto LABEL_126;
  }
  v69 = v8[8];
  v70 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v8[7];
  if (v70 + 16 >= v71)
    v70 = 0;
  if (v65 <= 0x10)
    v65 = 16;
  v72 = v70 + v65;
  if (v71 <= v72)
    v72 = 0;
  v8[9] = v72;
  v73 = (unint64_t *)(*(_QWORD *)(v69 + 16) + 128);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v72, v73));
  v75 = *((_DWORD *)v8 + 27);
  if (v74 == 0x80000000 || v75 != 0)
  {
    v78 = v75 + 1;
    *((_DWORD *)v8 + 27) = v78;
    if (v78 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v83, a5);
  if (!v85)
  {
LABEL_125:
    v77 = 15;
LABEL_126:
    *(_BYTE *)a4 = v77;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v83;
  v12 = v84;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v89, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v89, v14))
  {
    LOBYTE(v92) = 11;
    v14 = 1;
    LODWORD(v94) = 1;
    LOBYTE(v79) = 0;
    v81 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
    v82 = 1;
    if ((_DWORD)v94 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v86, &v92);
    goto LABEL_67;
  }
  v92 = v11;
  v93 = v12;
  v94 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3588;
  v94 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v93 = 0;
        }
        else
        {
          *v19 = v14;
          v94 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v92, (_DWORD *)a2);
      if (v93)
      {
        v21 = v94;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v94 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v86) = 16;
          v87 = 1;
LABEL_48:
          v88 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v86 = v40;
          v87 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v89, v14, 0xE04u, (uint64_t)&v90, a5);
        LOBYTE(v86) = 0;
        v87 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v90);
        v88 = 1;
        if (v91 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v91])(&v95, &v90);
      }
      else
      {
        LOBYTE(v86) = 0;
        v88 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v89);
      if (!v88)
      {
        LOBYTE(v79) = 0;
        v82 = 0;
        goto LABEL_64;
      }
      if (v87 == 1)
      {
        v45 = (char)v86;
LABEL_63:
        LOBYTE(v79) = v45;
        v81 = 1;
        v82 = 1;
        goto LABEL_64;
      }
      if (v87)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v86);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v88)
        goto LABEL_132;
      if (v87)
        goto LABEL_138;
      v44 = v86;
      v86 = 0;
      v92 = (uint64_t)v44;
      LODWORD(v93) = v43;
      LODWORD(v94) = 0;
      LOBYTE(v79) = 0;
      v81 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v79, (uint64_t)&v92);
      v82 = 1;
      if ((_DWORD)v94 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v94])(&v90, &v92);
LABEL_64:
      if (v88 && v87 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v87])(&v92, &v86);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
      if (v82)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v79);
        if (v82)
        {
          if (v81 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v81])(&v92, &v79);
        }
        return result;
      }
      if (v85)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v93 = 0;
    }
    v46 = (v83 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v83;
    if (v46 < v83)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v84)
      {
        *(_WORD *)(v83 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v90, v13);
    v8 = v90;
    v92 = 0;
    IPC::Connection::createSyncMessageEncoder(3588, (uint64_t)v6, &v92, (uint64_t *)&v86);
    v6 = v86;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v86, 4uLL, 4) = (_DWORD)v13;
    v54 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v54;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v92, (uint64_t *)&v86, 0, (uint64_t)&v79, a5);
    a2 = v80;
    if ((_DWORD)v80)
    {
      if ((_DWORD)v80 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v79;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v55 = IPC::Decoder::decode<std::tuple<float>>(v79);
    if ((v55 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v80)
    {
      v57 = v79;
      v79 = 0;
      *(_QWORD *)a4 = v57;
      *(_DWORD *)(a4 + 8) = v55;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v89, &v79);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v80;
  if ((_DWORD)v80 != -1)
    goto LABEL_91;
LABEL_92:
  v58 = v86;
  v86 = 0;
  if (v58)
  {
    IPC::Encoder::~Encoder(v58, v56);
    WTF::fastFree(v59, v60);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetTexParameteri>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3878[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t *IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  unint64_t v17;

  v2 = *result;
  v3 = result[2];
  v4 = *result + v3;
  v5 = (v4 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v6 = v5 >= v4;
  v7 = v5 - v4;
  if (v6)
  {
    v8 = v7 + v3;
    v9 = v7 + v3 + 4;
    if (v8 > 0xFFFFFFFFFFFFFFFBLL || v9 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v8) = *(_DWORD *)a2;
      result[2] = v9;
      v2 = *result;
      v3 = v9;
    }
  }
  v11 = (v2 + v3 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  v12 = v11 - (v2 + v3);
  if (v11 >= v2 + v3)
  {
    v13 = v11 - v2;
    v14 = v12 + v3 + 4;
    if (v13 > 0xFFFFFFFFFFFFFFFBLL || v14 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *(_DWORD *)(v2 + v13) = *(_DWORD *)(a2 + 4);
      result[2] = v14;
      v2 = *result;
      v3 = v14;
    }
  }
  v16 = (_QWORD *)((v2 + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v16 >= v2 + v3)
  {
    v17 = (unint64_t)v16 - v2 + 8;
    if ((unint64_t)v16 - v2 > 0xFFFFFFFFFFFFFFF7 || v17 > result[1])
    {
      result[1] = 0;
    }
    else
    {
      *v16 = *(_QWORD *)(a2 + 8);
      result[2] = v17;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformfv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3210[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3888[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformfvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformfvEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

char *IPC::ArgumentCoder<std::tuple<unsigned int,int,unsigned long>,void>::encode<IPC::Encoder,std::tuple<unsigned int,int,unsigned long>,0ul,1ul,2ul>(IPC::Encoder *a1, int *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  char *result;

  v4 = *a2;
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v4;
  v5 = a2[1];
  *(_DWORD *)IPC::Encoder::grow(a1, 4uLL, 4) = v5;
  v6 = *((_QWORD *)a2 + 1);
  result = IPC::Encoder::grow(a1, 8uLL, 8);
  *(_QWORD *)result = v6;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3220[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3898[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL12GetUniformivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformuiv>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E34E3230[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E38A8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetUniformuivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __n128 result;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  result = *(__n128 *)(a3 + 1);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13GetUniformuivEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetUniformLocation,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  uint64_t v43;
  IPC::Encoder *v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  void *v55;
  uint64_t *v56;
  IPC::Encoder *v57;
  WTF *v58;
  void *v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  char *v66;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  char v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  int v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  IPC::Encoder *v85;
  int v86;
  char v87;
  IPC::Decoder *v88;
  uint64_t *v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v78, a5);
  if (!(_BYTE)v80)
    goto LABEL_125;
  v61 = v78;
  v60 = v79;
  v62 = ((unint64_t)v78 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v63 = v62 - (_QWORD)v78;
  if (v62 >= (unint64_t)v78)
  {
    v64 = v63 + 2;
    if (v63 <= 0xFFFFFFFFFFFFFFFDLL && v64 <= v79)
    {
      *(_WORD *)((char *)v78 + v63) = 2822;
      goto LABEL_104;
    }
    v60 = 0;
  }
  v64 = 0;
LABEL_104:
  v66 = (char *)(((unint64_t)v61 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v66 >= (char *)v61 + v64)
  {
    v64 = v66 - (char *)v61 + 8;
    if ((unint64_t)(v66 - (char *)v61) > 0xFFFFFFFFFFFFFFF7 || v64 > v60)
      goto LABEL_137;
    *(_QWORD *)v66 = v6;
  }
  if (!v60)
  {
LABEL_137:
    v76 = 17;
    goto LABEL_126;
  }
  v68 = v8[8];
  v69 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v70 = v8[7];
  if (v69 + 16 >= v70)
    v69 = 0;
  if (v64 <= 0x10)
    v64 = 16;
  v71 = v69 + v64;
  if (v70 <= v71)
    v71 = 0;
  v8[9] = v71;
  v72 = (unint64_t *)(*(_QWORD *)(v68 + 16) + 128);
  do
    v73 = __ldaxr(v72);
  while (__stlxr(v71, v72));
  v74 = *((_DWORD *)v8 + 27);
  if (v73 == 0x80000000 || v74 != 0)
  {
    v77 = v74 + 1;
    *((_DWORD *)v8 + 27) = v77;
    if (v77 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v82, a5);
  if (!v84)
  {
LABEL_125:
    v76 = 15;
LABEL_126:
    *(_BYTE *)a4 = v76;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v82;
  v12 = v83;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v88, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v88, v14))
  {
    LOBYTE(v91) = 11;
    v14 = 1;
    LODWORD(v93) = 1;
    LOBYTE(v78) = 0;
    v80 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
    v81 = 1;
    if ((_DWORD)v93 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v85, &v91);
    goto LABEL_67;
  }
  v91 = v11;
  v92 = v12;
  v93 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3593;
  v93 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v92 = 0;
        }
        else
        {
          *v19 = v14;
          v93 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::ArgumentCoder<std::tuple<unsigned int,WTF::String const&>,void>::encode<IPC::StreamConnectionEncoder,std::tuple<unsigned int,WTF::String const&>,0ul,1ul>(&v91, a2);
      if (v92)
      {
        v21 = v93;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v93 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v85) = 16;
          v86 = 1;
LABEL_48:
          v87 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v85 = v40;
          v86 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v88, v14, 0xE09u, (uint64_t)&v89, a5);
        LOBYTE(v85) = 0;
        v86 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v85, (uint64_t)&v89);
        v87 = 1;
        if (v90 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v90])(&v94, &v89);
      }
      else
      {
        LOBYTE(v85) = 0;
        v87 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v88);
      if (!v87)
      {
        LOBYTE(v78) = 0;
        v81 = 0;
        goto LABEL_64;
      }
      if (v86 == 1)
      {
        v45 = (char)v85;
LABEL_63:
        LOBYTE(v78) = v45;
        v80 = 1;
        v81 = 1;
        goto LABEL_64;
      }
      if (v86)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v85);
      if ((v43 & 0xFF00000000) == 0)
      {
        v45 = 13;
        goto LABEL_63;
      }
      if (!v87)
        goto LABEL_132;
      if (v86)
        goto LABEL_138;
      v44 = v85;
      v85 = 0;
      v91 = (uint64_t)v44;
      LODWORD(v92) = v43;
      LODWORD(v93) = 0;
      LOBYTE(v78) = 0;
      v80 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v78, (uint64_t)&v91);
      v81 = 1;
      if ((_DWORD)v93 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v93])(&v89, &v91);
LABEL_64:
      if (v87 && v86 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v86])(&v91, &v85);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v88);
      if (v81)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v78);
        if (v81)
        {
          if (v80 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v80])(&v91, &v78);
        }
        return result;
      }
      if (v84)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v92 = 0;
    }
    v46 = (v82 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v47 = v46 - v82;
    if (v46 < v82)
    {
      v48 = 0;
    }
    else
    {
      v48 = 0;
      if (v47 <= 0xFFFFFFFFFFFFFFFDLL && v47 + 2 <= v83)
      {
        *(_WORD *)(v82 + v47) = 2821;
        v48 = v47 + 2;
      }
    }
    v49 = v8[8];
    v50 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v51 = v8[7];
    if (v50 + 16 >= v51)
      v50 = 0;
    if (v48 <= 0x10)
      v48 = 16;
    v52 = v50 + v48;
    if (v51 <= v52)
      v52 = 0;
    v8[9] = v52;
    v53 = (unint64_t *)(*(_QWORD *)(v49 + 16) + 128);
    do
      __ldaxr(v53);
    while (__stlxr(v52, v53));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v89, v13);
    v8 = v89;
    v91 = 0;
    IPC::Connection::createSyncMessageEncoder(3593, (uint64_t)v6, &v91, (uint64_t *)&v85);
    v6 = v85;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v85, 4uLL, 4) = (_DWORD)v13;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>((uint64_t)v6, *(uint64_t **)(a2 + 8));
    IPC::Connection::sendSyncMessage((uint64_t)v8, v91, (uint64_t *)&v85, 0, (uint64_t)&v78, a5);
    a2 = v79;
    if ((_DWORD)v79)
    {
      if ((_DWORD)v79 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v78;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v54 = IPC::Decoder::decode<std::tuple<float>>(v78);
    if ((v54 & 0xFF00000000) == 0)
      break;
    if (!(_DWORD)v79)
    {
      v56 = v78;
      v78 = 0;
      *(_QWORD *)a4 = v56;
      *(_DWORD *)(a4 + 8) = v54;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v88, &v78);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v79;
  if ((_DWORD)v79 != -1)
    goto LABEL_91;
LABEL_92:
  v57 = v85;
  v85 = 0;
  if (v57)
  {
    IPC::Encoder::~Encoder(v57, v55);
    WTF::fastFree(v58, v59);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v89);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetUniformLocation>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E38B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, IPC::Encoder *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  IPC::Encoder *v6;
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  _BOOL8 v32;
  double v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  IPC::Encoder *v40;
  WTF *v41;
  void *v42;
  unint64_t v43;
  char v44;
  IPC::Encoder *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  unsigned int v55;
  unint64_t v56;
  void *v57;
  uint64_t *v58;
  IPC::Encoder *v59;
  WTF *v60;
  void *v61;
  unint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v68;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  char v78;
  unsigned int v79;
  uint64_t *v80;
  unint64_t v81;
  int v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  IPC::Encoder *v87;
  int v88;
  char v89;
  IPC::Decoder *v90;
  uint64_t *v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char v96;

  v6 = a3;
  v8 = a1;
  if ((IPC::Encoder *)a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v80, a5);
  if (!(_BYTE)v82)
    goto LABEL_125;
  v63 = v80;
  v62 = v81;
  v64 = ((unint64_t)v80 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v65 = v64 - (_QWORD)v80;
  if (v64 >= (unint64_t)v80)
  {
    v66 = v65 + 2;
    if (v65 <= 0xFFFFFFFFFFFFFFFDLL && v66 <= v81)
    {
      *(_WORD *)((char *)v80 + v65) = 2822;
      goto LABEL_104;
    }
    v62 = 0;
  }
  v66 = 0;
LABEL_104:
  v68 = (char *)(((unint64_t)v63 + v66 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v68 >= (char *)v63 + v66)
  {
    v66 = v68 - (char *)v63 + 8;
    if ((unint64_t)(v68 - (char *)v63) > 0xFFFFFFFFFFFFFFF7 || v66 > v62)
      goto LABEL_137;
    *(_QWORD *)v68 = v6;
  }
  if (!v62)
  {
LABEL_137:
    v78 = 17;
    goto LABEL_126;
  }
  v70 = v8[8];
  v71 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v72 = v8[7];
  if (v71 + 16 >= v72)
    v71 = 0;
  if (v66 <= 0x10)
    v66 = 16;
  v73 = v71 + v66;
  if (v72 <= v73)
    v73 = 0;
  v8[9] = v73;
  v74 = (unint64_t *)(*(_QWORD *)(v70 + 16) + 128);
  do
    v75 = __ldaxr(v74);
  while (__stlxr(v73, v74));
  v76 = *((_DWORD *)v8 + 27);
  if (v75 == 0x80000000 || v76 != 0)
  {
    v79 = v76 + 1;
    *((_DWORD *)v8 + 27) = v79;
    if (v79 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = (uint64_t)v6;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v84, a5);
  if (!v86)
  {
LABEL_125:
    v78 = 15;
LABEL_126:
    *(_BYTE *)a4 = v78;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v84;
  v12 = v85;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v90, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v90, v14))
  {
    LOBYTE(v93) = 11;
    v14 = 1;
    LODWORD(v95) = 1;
    LOBYTE(v80) = 0;
    v82 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
    v83 = 1;
    if ((_DWORD)v95 != -1)
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v87, &v93);
    goto LABEL_67;
  }
  v93 = v11;
  v94 = v12;
  v95 = 0;
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_133;
  *(_WORD *)(v11 + v16) = 3597;
  v95 = v16 + 2;
  while (1)
  {
    while (1)
    {
      v19 = (_QWORD *)((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)v19 >= v11 + v17)
      {
        if ((unint64_t)v19 - v11 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v11 + 8 > v12)
        {
          v94 = 0;
        }
        else
        {
          *v19 = v14;
          v95 = (unint64_t)v19 - v11 + 8;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(&v93, (_DWORD *)a2);
      if (v94)
      {
        v21 = v95;
        v22 = v8[8];
        v23 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
        v24 = v8[7];
        if (v23 + 16 >= v24)
          v23 = 0;
        if (v95 <= 0x10)
          v21 = 16;
        v25 = v23 + v21;
        if (v24 <= v25)
          v26 = 0;
        else
          v26 = v25;
        v8[9] = v26;
        v27 = (unint64_t *)(*(_QWORD *)(v22 + 16) + 128);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v26, v27));
        if (v28 == 0x80000000 || *((_DWORD *)v8 + 27))
        {
          if (*((_BYTE *)v8 + 96))
            MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
          *((_DWORD *)v8 + 27) = 0;
        }
        v11 = (unint64_t)(v8 + 11);
        v12 = 0x80000000;
        while (1)
        {
          v29 = *(unint64_t **)(v8[8] + 16);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(0x80000000uLL, v29));
          v31 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
          if (!(v30 | v31 & 0xFFFFFFFF7FFFFFFFLL))
            break;
          if (*((_BYTE *)v8 + 96))
          {
            v32 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
            if (v32)
            {
              WTF::ApproximateTime::now((WTF::ApproximateTime *)v32);
              if (v33 < a5)
                continue;
            }
          }
          LOBYTE(v87) = 16;
          v88 = 1;
LABEL_48:
          v89 = 1;
          goto LABEL_49;
        }
        atomic_store(0, *(unint64_t **)(v8[8] + 16));
        v8[9] = 0;
        v34 = v8[8];
        v35 = *(_QWORD *)(v34 + 8);
        if (v35 <= 0xFF)
          goto LABEL_132;
        v36 = v8[7];
        v37 = *(_QWORD *)(v34 + 16);
        v38 = v35 - 256;
        if (v36)
        {
          v11 = v36 - 1;
          if (v38 < v36 - 1)
            goto LABEL_132;
        }
        else
        {
          v11 = v38;
        }
        v12 = v37 + 256;
        v39 = WTF::fastMalloc((WTF *)0x48);
        v40 = (IPC::Encoder *)IPC::Decoder::Decoder(v39, v12, v11, v8[6]);
        if (*((_WORD *)v40 + 25) != 2821)
        {
          v87 = v40;
          v88 = 0;
          goto LABEL_48;
        }
        IPC::Decoder::~Decoder(v40);
        WTF::fastFree(v41, v42);
        IPC::Connection::waitForSyncReply((uint64_t)v90, v14, 0xE0Du, (uint64_t)&v91, a5);
        LOBYTE(v87) = 0;
        v88 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v87, (uint64_t)&v91);
        v89 = 1;
        if (v92 != -1)
          ((void (*)(char *, uint64_t **))off_1E34E3480[v92])(&v96, &v91);
      }
      else
      {
        LOBYTE(v87) = 0;
        v89 = 0;
      }
LABEL_49:
      IPC::Connection::popPendingSyncRequestID(v90);
      if (!v89)
      {
        LOBYTE(v80) = 0;
        v83 = 0;
        goto LABEL_64;
      }
      if (v88 == 1)
      {
        v46 = (char)v87;
LABEL_63:
        LOBYTE(v80) = v46;
        v82 = 1;
        v83 = 1;
        goto LABEL_64;
      }
      if (v88)
        goto LABEL_138;
      v43 = IPC::Decoder::decode<std::tuple<double>>((uint64_t *)v87);
      if (!v44)
      {
        v46 = 13;
        goto LABEL_63;
      }
      if (!v89)
        goto LABEL_132;
      if (v88)
        goto LABEL_138;
      v45 = v87;
      v87 = 0;
      v93 = (uint64_t)v45;
      v94 = v43;
      LODWORD(v95) = 0;
      LOBYTE(v80) = 0;
      v82 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v80, (uint64_t)&v93);
      v83 = 1;
      if ((_DWORD)v95 != -1)
        ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v91, &v93);
LABEL_64:
      if (v89 && v88 != -1)
        ((void (*)(uint64_t *, IPC::Encoder **))off_1E34E3480[v88])(&v93, &v87);
LABEL_67:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v90);
      if (v83)
      {
        *(_BYTE *)a4 = 0;
        *(_DWORD *)(a4 + 16) = -1;
        result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v80);
        if (v83)
        {
          if (v82 != -1)
            return (unsigned __int8 ***)((uint64_t (*)(uint64_t *, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v82])(&v93, &v80);
        }
        return result;
      }
      if (v86)
        break;
LABEL_132:
      __break(1u);
LABEL_133:
      v12 = 0;
      v17 = 0;
      v94 = 0;
    }
    v47 = (v84 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v48 = v47 - v84;
    if (v47 < v84)
    {
      v49 = 0;
    }
    else
    {
      v49 = 0;
      if (v48 <= 0xFFFFFFFFFFFFFFFDLL && v48 + 2 <= v85)
      {
        *(_WORD *)(v84 + v48) = 2821;
        v49 = v48 + 2;
      }
    }
    v50 = v8[8];
    v51 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v52 = v8[7];
    if (v51 + 16 >= v52)
      v51 = 0;
    if (v49 <= 0x10)
      v49 = 16;
    v53 = v51 + v49;
    if (v52 <= v53)
      v53 = 0;
    v8[9] = v53;
    v54 = (unint64_t *)(*(_QWORD *)(v50 + 16) + 128);
    do
      __ldaxr(v54);
    while (__stlxr(v53, v54));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v91, v13);
    v8 = v91;
    v93 = 0;
    IPC::Connection::createSyncMessageEncoder(3597, (uint64_t)v6, &v93, (uint64_t *)&v87);
    v6 = v87;
    v13 = (uint64_t **)*(unsigned int *)a2;
    *(_DWORD *)IPC::Encoder::grow(v87, 4uLL, 4) = (_DWORD)v13;
    v55 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)IPC::Encoder::grow(v6, 4uLL, 4) = v55;
    IPC::Connection::sendSyncMessage((uint64_t)v8, v93, (uint64_t *)&v87, 0, (uint64_t)&v80, a5);
    a2 = v81;
    if ((_DWORD)v81)
    {
      if ((_DWORD)v81 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v80;
        goto LABEL_90;
      }
      goto LABEL_138;
    }
    v56 = IPC::Decoder::decode<std::tuple<double>>(v80);
    if (!(_BYTE)v57)
      break;
    if (!(_DWORD)v81)
    {
      v58 = v80;
      v80 = 0;
      *(_QWORD *)a4 = v58;
      *(_QWORD *)(a4 + 8) = v56;
LABEL_90:
      *(_DWORD *)(a4 + 16) = a2;
LABEL_91:
      ((void (*)(IPC::Decoder **, uint64_t **))off_1E34E3480[a2])(&v90, &v80);
      goto LABEL_92;
    }
LABEL_138:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_139:
    v17 = 0;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v81;
  if ((_DWORD)v81 != -1)
    goto LABEL_91;
LABEL_92:
  v59 = v87;
  v87 = 0;
  if (v59)
  {
    IPC::Encoder::~Encoder(v59, v57);
    WTF::fastFree(v60, v61);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v91);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::GetVertexAttribOffset>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E38C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

uint64_t IPC::StreamClientConnection::send<Messages::RemoteGraphicsContextGL::Hint,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>(uint64_t a1, int *a2, uint64_t a3, double a4)
{
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  IPC::Encoder *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  void *v34;
  IPC::Encoder *v35;
  WTF *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v43;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  int v50;
  unsigned int v53;
  uint64_t *v54;
  IPC::Encoder *v55;
  unint64_t v56;
  char v57;
  IPC::Encoder *v58;
  unint64_t v59;
  unint64_t v60;

  if (*(_QWORD *)(a1 + 48) == a3)
  {
    while (1)
    {
      IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v55, a4);
      if (!v57)
        break;
      v58 = v55;
      v59 = v56;
      v60 = 0;
      v8 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v9 = v8 >= (unint64_t)v55;
      v10 = v8 - (_QWORD)v55;
      if (v9)
      {
        if (v10 > 0xFFFFFFFFFFFFFFFDLL || v10 + 2 > v56)
        {
          v59 = 0;
        }
        else
        {
          *(_WORD *)((char *)v55 + v10) = 987;
          v60 = v10 + 2;
        }
      }
      IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>((uint64_t *)&v58, a2);
      if (v59)
      {
        v13 = v60;
        v14 = *(_QWORD *)(a1 + 64);
        v15 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v16 = *(_QWORD *)(a1 + 56);
        if (v15 + 16 >= v16)
          v15 = 0;
        if (v60 <= 0x10)
          v13 = 16;
        v17 = v15 + v13;
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = v17;
        *(_QWORD *)(a1 + 72) = v18;
        v19 = (unint64_t *)(*(_QWORD *)(v14 + 16) + 128);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v18, v19));
        if (v20 == 0x80000000 || *(_DWORD *)(a1 + 108))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
        return 0;
      }
      if (v57)
      {
        v22 = ((unint64_t)v55 + 1) & 0xFFFFFFFFFFFFFFFELL;
        v23 = v22 - (_QWORD)v55;
        if (v22 < (unint64_t)v55)
        {
          v24 = 0;
        }
        else
        {
          v24 = 0;
          if (v23 <= 0xFFFFFFFFFFFFFFFDLL && v23 + 2 <= v56)
          {
            *(_WORD *)((char *)v55 + v23) = 2821;
            v24 = v23 + 2;
          }
        }
        v25 = *(_QWORD *)(a1 + 64);
        v26 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
        v27 = *(_QWORD *)(a1 + 56);
        if (v26 + 16 >= v27)
          v26 = 0;
        if (v24 <= 0x10)
          v24 = 16;
        v28 = v26 + v24;
        if (v27 <= v28)
          v28 = 0;
        *(_QWORD *)(a1 + 72) = v28;
        v29 = (unint64_t *)(*(_QWORD *)(v25 + 16) + 128);
        do
          __ldaxr(v29);
        while (__stlxr(v28, v29));
        *(_DWORD *)(a1 + 108) = 0;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, (uint64_t **)(a1 + 8));
        v30 = v54;
        v31 = WTF::fastMalloc((WTF *)0x240);
        *(_WORD *)v31 = 987;
        *(_QWORD *)(v31 + 8) = a3;
        *(_QWORD *)(v31 + 528) = v31 + 16;
        *(_QWORD *)(v31 + 536) = v31 + 16;
        *(_OWORD *)(v31 + 544) = xmmword_1978CE2D0;
        *(_OWORD *)(v31 + 560) = 0u;
        IPC::Encoder::encodeHeader((IPC::Encoder *)v31);
        v58 = (IPC::Encoder *)v31;
        v32 = *a2;
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v32;
        v33 = a2[1];
        *(_DWORD *)IPC::Encoder::grow((IPC::Encoder *)v31, 4uLL, 4) = v33;
        v21 = IPC::Connection::sendMessageImpl((uint64_t)v30, (uint64_t *)&v58, 1, 0);
        v35 = v58;
        v58 = 0;
        if (v35)
        {
          IPC::Encoder::~Encoder(v35, v34);
          WTF::fastFree(v36, v37);
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v54);
        return v21;
      }
      __break(1u);
LABEL_78:
      v38 = 0;
LABEL_79:
      v41 = 0;
LABEL_49:
      v43 = (char *)(((unint64_t)v12 + v41 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v43 >= (char *)v12 + v41)
      {
        v41 = v43 - (char *)v12 + 8;
        if ((unint64_t)(v43 - (char *)v12) > 0xFFFFFFFFFFFFFFF7 || v41 > v38)
          return 17;
        *(_QWORD *)v43 = a3;
      }
      if (!v38)
        return 17;
      v45 = (*(_QWORD *)(a1 + 72) + 1) & 0xFFFFFFFFFFFFFFFELL;
      v46 = *(_QWORD *)(a1 + 56);
      if (v45 + 16 >= v46)
        v45 = 0;
      if (v41 <= 0x10)
        v41 = 16;
      v47 = v45 + v41;
      if (v46 <= v47)
        v47 = 0;
      *(_QWORD *)(a1 + 72) = v47;
      v48 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16) + 128);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v47, v48));
      v50 = *(_DWORD *)(a1 + 108);
      if (v49 == 0x80000000 || v50 != 0)
      {
        v53 = v50 + 1;
        *(_DWORD *)(a1 + 108) = v53;
        if (v53 >= *(_DWORD *)(a1 + 104))
        {
          if (*(_BYTE *)(a1 + 96))
            MEMORY[0x19AEBA1A0](*(unsigned int *)(a1 + 84));
          *(_DWORD *)(a1 + 108) = 0;
        }
      }
      *(_QWORD *)(a1 + 48) = a3;
    }
  }
  else
  {
    IPC::StreamClientConnectionBuffer::tryAcquire(a1 + 56, &v58, a4);
    if ((_BYTE)v60)
    {
      v12 = v58;
      v38 = v59;
      v39 = ((unint64_t)v58 + 1) & 0xFFFFFFFFFFFFFFFELL;
      v40 = v39 - (_QWORD)v58;
      if (v39 < (unint64_t)v58)
        goto LABEL_79;
      v41 = v40 + 2;
      if (v40 > 0xFFFFFFFFFFFFFFFDLL || v41 > v59)
        goto LABEL_78;
      *(_WORD *)((char *)v58 + v40) = 2822;
      goto LABEL_49;
    }
  }
  return 15;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsBuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3598;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE0Eu, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3598, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsBuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E38D8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL8IsBufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsEnabled,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3599;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE0Fu, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3599, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsEnabled>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E38E8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsEnabledEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsFramebuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3600;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE10u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3600, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsFramebuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E38F8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL13IsFramebufferEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsProgram,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3601;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE11u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3601, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsProgram>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v4])(&v7, result);
  *(_DWORD *)(v3 + 16) = -1;
  v5 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34E3908[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a3 + 8);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL9IsProgramEE9ReplyDataENS8_5ErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

unsigned __int8 ***IPC::StreamClientConnection::sendSync<Messages::RemoteGraphicsContextGL::IsRenderbuffer,WebKit::GraphicsContextGLIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t *v8;
  unsigned __int8 ***result;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL8 v36;
  double v37;
  uint64_t v38;
  uint64_t (**v39)();
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  void *v49;
  unsigned __int16 v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  int v60;
  unsigned __int16 v61;
  void *v62;
  uint64_t *v63;
  IPC::Encoder *v64;
  WTF *v65;
  void *v66;
  IPC::Encoder *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v74;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  int v82;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  IPC::Encoder *v93;
  int v94;
  int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  IPC::Decoder *v99;
  char v100;

  v8 = a1;
  if (a1[6] == a3)
    goto LABEL_2;
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(a1 + 7), &v86, a5);
  if (!(_BYTE)v88)
    goto LABEL_130;
  v69 = v86;
  v68 = v87;
  v70 = ((unint64_t)v86 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v71 = v70 - (_QWORD)v86;
  if (v70 >= (unint64_t)v86)
  {
    v72 = v71 + 2;
    if (v71 <= 0xFFFFFFFFFFFFFFFDLL && v72 <= v87)
    {
      *(_WORD *)((char *)v86 + v71) = 2822;
      goto LABEL_109;
    }
    v68 = 0;
  }
  v72 = 0;
LABEL_109:
  v74 = (char *)(((unint64_t)v69 + v72 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v74 >= (char *)v69 + v72)
  {
    v72 = v74 - (char *)v69 + 8;
    if ((unint64_t)(v74 - (char *)v69) > 0xFFFFFFFFFFFFFFF7 || v72 > v68)
      goto LABEL_143;
    *(_QWORD *)v74 = a3;
  }
  if (!v68)
  {
LABEL_143:
    v84 = 17;
    goto LABEL_131;
  }
  v76 = v8[8];
  v77 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
  v78 = v8[7];
  if (v77 + 16 >= v78)
    v77 = 0;
  if (v72 <= 0x10)
    v72 = 16;
  v79 = v77 + v72;
  if (v78 <= v79)
    v79 = 0;
  v8[9] = v79;
  v80 = (unint64_t *)(*(_QWORD *)(v76 + 16) + 128);
  do
    v81 = __ldaxr(v80);
  while (__stlxr(v79, v80));
  v82 = *((_DWORD *)v8 + 27);
  if (v81 == 0x80000000 || v82 != 0)
  {
    v85 = v82 + 1;
    *((_DWORD *)v8 + 27) = v85;
    if (v85 >= *((_DWORD *)v8 + 26))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
  }
  v8[6] = a3;
LABEL_2:
  result = (unsigned __int8 ***)IPC::StreamClientConnectionBuffer::tryAcquire((uint64_t)(v8 + 7), &v90, a5);
  if (!v92)
  {
LABEL_130:
    v84 = 15;
LABEL_131:
    *(_BYTE *)a4 = v84;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v11 = v90;
  v12 = v91;
  v13 = (uint64_t **)(v8 + 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, (uint64_t **)v8 + 1);
  v14 = WTF::ObjectIdentifierGeneric<IPC::ConnectionSyncRequestIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::generate();
  if (!IPC::Connection::pushPendingSyncRequestID((uint64_t)v99, v14))
  {
    LOBYTE(v96) = 11;
    v14 = 1;
    v98 = 1;
    LOBYTE(v86) = 0;
    v88 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v96);
    v89 = 1;
    v38 = v98;
    if (v98 == -1)
      goto LABEL_65;
    v39 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix;
    goto LABEL_64;
  }
  v15 = (v11 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v16 = v15 - v11;
  if (v15 < v11)
    goto LABEL_139;
  v17 = v16 + 2;
  if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v12)
    goto LABEL_138;
  *(_WORD *)(v11 + v16) = 3604;
  while (1)
  {
    v19 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = v19 - (v11 + v17);
    if (v19 >= v11 + v17)
    {
      v21 = v19 - v11;
      v22 = v20 + v17 + 8;
      if (v21 > 0xFFFFFFFFFFFFFFF7 || v22 > v12)
      {
        v12 = 0;
      }
      else
      {
        *(_QWORD *)(v11 + v21) = v14;
        v17 = v22;
      }
    }
    v24 = (_DWORD *)((v11 + v17 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    if ((unint64_t)v24 >= v11 + v17)
    {
      v25 = (char *)v24 - v11;
      if ((unint64_t)v24 - v11 > 0xFFFFFFFFFFFFFFFBLL
        || (v17 = (unint64_t)(v25 + 4), (unint64_t)(v25 + 4) > v12))
      {
LABEL_46:
        LOBYTE(v96) = 0;
        LOBYTE(v98) = 0;
        goto LABEL_53;
      }
      *v24 = *(_DWORD *)a2;
    }
    if (!v12)
      goto LABEL_46;
    v26 = v8[8];
    v27 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v28 = v8[7];
    if (v27 + 16 >= v28)
      v27 = 0;
    if (v17 <= 0x10)
      v17 = 16;
    v29 = v27 + v17;
    if (v28 <= v29)
      v30 = 0;
    else
      v30 = v29;
    v8[9] = v30;
    v31 = (unint64_t *)(*(_QWORD *)(v26 + 16) + 128);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v30, v31));
    if (v32 == 0x80000000 || *((_DWORD *)v8 + 27))
    {
      if (*((_BYTE *)v8 + 96))
        MEMORY[0x19AEBA1A0](*((unsigned int *)v8 + 21));
      *((_DWORD *)v8 + 27) = 0;
    }
    v11 = (unint64_t)(v8 + 11);
    while (1)
    {
      v33 = *(unint64_t **)(v8[8] + 16);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(0x80000000uLL, v33));
      v35 = atomic_load((unint64_t *)(*(_QWORD *)(v8[8] + 16) + 128));
      if (!(v34 | v35 & 0xFFFFFFFF7FFFFFFFLL))
        break;
      if (*((_BYTE *)v8 + 96))
      {
        v36 = IPC::Semaphore::waitFor((semaphore_t *)v8 + 22, a5);
        if (v36)
        {
          WTF::ApproximateTime::now((WTF::ApproximateTime *)v36);
          if (v37 < a5)
            continue;
        }
      }
      LOBYTE(v96) = 16;
      v97 = 1;
LABEL_52:
      LOBYTE(v98) = 1;
      goto LABEL_53;
    }
    atomic_store(0, *(unint64_t **)(v8[8] + 16));
    v8[9] = 0;
    v40 = v8[8];
    v41 = *(_QWORD *)(v40 + 8);
    if (v41 <= 0xFF)
      goto LABEL_137;
    v42 = v8[7];
    v43 = *(_QWORD *)(v40 + 16);
    v44 = v41 - 256;
    if (v42)
    {
      v11 = v42 - 1;
      if (v44 < v42 - 1)
        goto LABEL_137;
    }
    else
    {
      v11 = v44;
    }
    v45 = v43 + 256;
    v46 = WTF::fastMalloc((WTF *)0x48);
    v47 = IPC::Decoder::Decoder(v46, v45, v11, v8[6]);
    if (*(_WORD *)(v47 + 50) != 2821)
    {
      v96 = (uint64_t *)v47;
      v97 = 0;
      goto LABEL_52;
    }
    IPC::Decoder::~Decoder((IPC::Decoder *)v47);
    WTF::fastFree(v48, v49);
    IPC::Connection::waitForSyncReply((uint64_t)v99, v14, 0xE14u, (uint64_t)&v93, a5);
    LOBYTE(v96) = 0;
    v97 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::UniqueRef<IPC::Decoder>,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v96, (uint64_t)&v93);
    LOBYTE(v98) = 1;
    if (v94 != -1)
      ((void (*)(char *, IPC::Encoder **))off_1E34E3480[v94])(&v100, &v93);
LABEL_53:
    IPC::Connection::popPendingSyncRequestID(v99);
    if ((_BYTE)v98)
    {
      if (v97 == 1)
      {
        v51 = (char)v96;
        goto LABEL_60;
      }
      if (v97)
        goto LABEL_144;
      v50 = IPC::Decoder::decode<std::tuple<BOOL>>(v96);
      if (v50 < 0x100u)
      {
        v51 = 13;
LABEL_60:
        LOBYTE(v86) = v51;
        v88 = 1;
        v89 = 1;
        goto LABEL_61;
      }
      if (!(_BYTE)v98)
        goto LABEL_137;
      if (v97)
        goto LABEL_144;
      v67 = (IPC::Encoder *)v96;
      v96 = 0;
      v93 = v67;
      LOBYTE(v94) = v50;
      v95 = 0;
      LOBYTE(v86) = 0;
      v88 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>((uint64_t)&v86, (uint64_t)&v93);
      v89 = 1;
      if (v95 != -1)
        ((void (*)(char *, IPC::Encoder **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v95])(&v100, &v93);
    }
    else
    {
      LOBYTE(v86) = 0;
      v89 = 0;
    }
LABEL_61:
    if ((_BYTE)v98)
    {
      v38 = v97;
      if (v97 != -1)
      {
        v39 = off_1E34E3480;
LABEL_64:
        ((void (*)(IPC::Encoder **, uint64_t **))v39[v38])(&v93, &v96);
      }
    }
LABEL_65:
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
    if (v89)
    {
      *(_BYTE *)a4 = 0;
      *(_DWORD *)(a4 + 16) = -1;
      result = (unsigned __int8 ***)std::__variant_detail::__ctor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<IPC::ConnectionSendSyncResult<Messages::RemoteGraphicsContextGL::IsRenderbuffer>::ReplyData,IPC::Error>,(std::__variant_detail::_Trait)1>>(a4, (uint64_t)&v86);
      if (v89)
      {
        if (v88 != -1)
          return (unsigned __int8 ***)((uint64_t (*)(uint64_t **, uint64_t **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEE9ReplyDataENS6_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSG_EEEDcOSH_DpOT0____fmatrix[v88])(&v96, &v86);
      }
      return result;
    }
    if (v92)
      break;
LABEL_137:
    __break(1u);
LABEL_138:
    v12 = 0;
LABEL_139:
    v17 = 0;
  }
  v52 = (v90 + 1) & 0xFFFFFFFFFFFFFFFELL;
  v53 = v52 - v90;
  if (v52 < v90)
    goto LABEL_145;
  v54 = 0;
  if (v53 <= 0xFFFFFFFFFFFFFFFDLL && v53 + 2 <= v91)
  {
    *(_WORD *)(v90 + v53) = 2821;
    v54 = v53 + 2;
  }
  while (2)
  {
    v55 = v8[8];
    v56 = (v8[9] + 1) & 0xFFFFFFFFFFFFFFFELL;
    v57 = v8[7];
    if (v56 + 16 >= v57)
      v56 = 0;
    if (v54 <= 0x10)
      v54 = 16;
    v58 = v56 + v54;
    if (v57 <= v58)
      v58 = 0;
    v8[9] = v58;
    v59 = (unint64_t *)(*(_QWORD *)(v55 + 16) + 128);
    do
      __ldaxr(v59);
    while (__stlxr(v58, v59));
    *((_DWORD *)v8 + 27) = 0;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v99, v13);
    v8 = (uint64_t *)v99;
    v96 = 0;
    IPC::Connection::createSyncMessageEncoder(3604, a3, (uint64_t *)&v96, (uint64_t *)&v93);
    v60 = *(_DWORD *)a2;
    *(_DWORD *)IPC::Encoder::grow(v93, 4uLL, 4) = v60;
    IPC::Connection::sendSyncMessage((uint64_t)v8, (uint64_t)v96, (uint64_t *)&v93, 0, (uint64_t)&v86, a5);
    a2 = v87;
    if ((_DWORD)v87)
    {
      if ((_DWORD)v87 == 1)
      {
        *(_BYTE *)a4 = (_BYTE)v86;
LABEL_90:
        *(_DWORD *)(a4 + 16) = a2;
        goto LABEL_91;
      }
LABEL_144:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_145:
      v54 = 0;
      continue;
    }
    break;
  }
  v61 = IPC::Decoder::decode<std::tuple<BOOL>>(v86);
  if (v61 >= 0x100u)
  {
    if (!(_DWORD)v87)
    {
      v63 = v86;
      v86 = 0;
      *(_QWORD *)a4 = v63;
      *(_BYTE *)(a4 + 8) = v61;
      goto LABEL_90;
    }
    goto LABEL_144;
  }
  *(_BYTE *)a4 = 13;
  *(_DWORD *)(a4 + 16) = 1;
  LODWORD(a2) = v87;
  if ((_DWORD)v87 == -1)
    goto LABEL_92;
LABEL_91:
  ((void (*)(char *, uint64_t **))off_1E34E3480[a2])(&v100, &v86);
LABEL_92:
  v64 = v93;
  v93 = 0;
  if (v64)
  {
    IPC::Encoder::~Encoder(v64, v62);
    WTF::fastFree(v65, v66);
  }
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((unsigned __int8 ***)&v99);
}

