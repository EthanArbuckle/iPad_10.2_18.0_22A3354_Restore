uint64_t sub_18F1DEC8C(uint64_t a1, const char *a2, CFTypeRef *a3, uint64_t a4)
{
  CFStringRef v7;
  uint64_t v8;

  v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  *a3 = 0;
  v8 = (*(uint64_t (**)(uint64_t, CFStringRef, CFTypeRef *, uint64_t))(*(_QWORD *)a1 + 904))(a1, v7, a3, a4);
  if ((_DWORD)v8 && *a3)
    CFAutorelease(*a3);
  if (v7)
    CFRelease(v7);
  return v8;
}

void sub_18F1DEDF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18F1DEE60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1DEF98(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD *)(v1 + 8);
  if (result)
  {
    v3 = MEMORY[0x194001018]();
    result = MEMORY[0x194001438](v3, 0xB0C40BC2CC919);
    *(_QWORD *)(v1 + 8) = 0;
  }
  return result;
}

void sub_18F1DEFD8(uint64_t a1)
{
  os_unfair_lock_s *v2;

  if (*(_BYTE *)(a1 + 172))
  {
    v2 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    sub_18F1FBD7C(a1);
    IOHIDServiceClientFastPathInvalidate();
    *(_BYTE *)(a1 + 172) = 0;
    os_unfair_lock_unlock(v2);
  }
}

_QWORD *sub_18F1DF028(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v2;
  const __CFDictionary *Dictionary;
  NSObject *v4;
  NSObject *v5;
  char *v7;
  _QWORD block[5];
  _OWORD v9[2];
  _BYTE v10[29];
  _QWORD v11[2];
  uint8_t buf[1640];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
  sub_18F1EDCF0(v11, Dictionary);
  if (*(_QWORD *)(v2 + 16)
    && *(_QWORD *)(v2 + 24)
    && (*(int (**)(_QWORD *))(v11[0] + 856))(v11) >= 1
    && sub_18F1E0E90(v10, (uint64_t)v11))
  {
    v4 = *(NSObject **)(v2 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F2073E4;
    block[3] = &unk_1E29564A0;
    block[4] = v2;
    v9[0] = *(_OWORD *)v10;
    *(_OWORD *)((char *)v9 + 13) = *(_OWORD *)&v10[13];
    dispatch_async(v4, block);
  }
  else
  {
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2953DA8);
    v5 = qword_1EE16D6C0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "Bad pressure bias from daemon.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2953DA8);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLPressureBiasProxy::start()_block_invoke", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
  return sub_18F1EDCB4(v11);
}

void sub_18F1DF254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_18F1EDCB4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1DF274(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  CLNotifierClientAdapter *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;

  *(_QWORD *)a1 = &off_1E294A780;
  v12 = [CLNotifierClientAdapter alloc];
  *(_QWORD *)(a1 + 8) = objc_msgSend_initWithClient_(v12, v13, a1, v14, v15);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*(char *)(a3 + 23) >= 0)
    v19 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v16, a3, v17, v18);
  else
    v19 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v16, *(_QWORD *)a3, v17, v18);
  v24 = v19;
  v25 = (void *)objc_msgSend_vendor(a4, v20, v21, v22, v23);
  v29 = (void *)objc_msgSend_proxyForService_(v25, v26, v24, v27, v28);
  *(_QWORD *)(a1 + 16) = v29;
  v30 = v29;
  if (a2)
    objc_msgSend_setDelegateEntityName_(*(void **)(a1 + 16), v31, a2, v33, v34);
  v36 = *(_QWORD *)(a1 + 8);
  v35 = *(void **)(a1 + 16);
  v37 = objc_msgSend_silo(a4, v31, v32, v33, v34);
  objc_msgSend_registerDelegate_inSilo_(v35, v38, v36, v37, v39);
  return a1;
}

uint64_t sub_18F1DF344(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v8;
  uint8_t buf[8];
  uint64_t v10;
  uint64_t *(*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954568);
  v2 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_INFO, "Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954568);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::feedAccelerometerData(const CLAccelerometer::Sample *)_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  if (*(_QWORD *)(v1 + 288))
  {
    v3 = sub_18F1EF73C();
    v4 = *(_QWORD *)(v1 + 288);
    v5 = sub_18F204AE4();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v10 = 3221225472;
    v11 = sub_18F1F5EE0;
    v12 = &unk_1E2956E98;
    v15 = 0;
    v13 = v3;
    v14 = v4;
    sub_18F1F5E28(v5, (uint64_t)buf);
    v6 = *(_QWORD *)(v1 + 288);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    *(_QWORD *)(v1 + 288) = 0;
  }
  sub_18F209F74(v1 + 200);
  *(_QWORD *)buf = 0;
  return sub_18F1E5858(v1, buf);
}

void sub_18F1DF558(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  void *__p[2];
  char v10;

  v8 = (_QWORD *)operator new();
  sub_18F270374(__p, "CLGeomagneticModelProvider");
  sub_18F1DF274((uint64_t)v8, 0, (uint64_t)__p, a3, a1, a2);
  *v8 = &off_1E294C900;
  *a4 = v8;
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_18F1DF600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x194001438](v15, 0x1081C407D05813FLL);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1DF63C()
{
  if (qword_1ECEDEF20 != -1)
    dispatch_once(&qword_1ECEDEF20, &unk_1E2952FC8);
  return qword_1ECEDFDD8;
}

void *sub_18F1DF67C(uint64_t a1)
{
  Class v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = NSClassFromString(CFSTR("UIApplication"));
  result = (void *)objc_msgSend_performSelector_(v2, v3, (uint64_t)sel_sharedApplication, v4, v5);
  if (result)
  {
    result = (void *)objc_msgSend_performSelector_(result, v7, (uint64_t)sel_applicationState, v8, v9);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 624) = result == 0;
  }
  return result;
}

void sub_18F1DF6D0()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    if (CFEqual(v0, CFSTR("iPad")))
      byte_1ECEDEF50 = 1;
    CFRelease(v1);
  }
}

void sub_18F1DF72C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char *v4;
  _BYTE buf[1632];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)buf = 0;
  sub_18F202F6C(a1, (double *)buf);
  if (*(_BYTE *)(a1 + 202))
  {
    *(_BYTE *)(a1 + 202) = 0;
    sub_18F1DEFD8(*(_QWORD *)(a1 + 208));
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
    v2 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEFAULT))
    {
      v3 = sub_18F1FBD7C(*(_QWORD *)(a1 + 208));
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "Fast path closed,serviceRef,%{public}p", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
      sub_18F1FBD7C(*(_QWORD *)(a1 + 208));
      v4 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceSPU::stop()", "CoreLocation: %s\n", v4);
      if (v4 != buf)
        free(v4);
    }
  }
}

void sub_18F1DFC0C(uint64_t a1, int a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint8_t buf[8];
  uint64_t v16;
  uint64_t *(*v17)(uint64_t);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2955CE0);
    v4 = qword_1EE16D6C0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "[CLFilteredPressure] Unrecognized notification: %d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2955CE0);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual void CLFilteredPressure::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 32);
    if (a3)
    {
      if (!v6)
      {
        v7 = (_QWORD *)operator new();
        *v7 = off_1E294C238;
        *v7 = &off_1E294C2A8;
        v7[1] = 0;
        v7[2] = sub_18F201410;
        v7[3] = a1;
        *(_QWORD *)(a1 + 32) = v7;
        v8 = sub_18F1DFF3C();
        sub_18F1F4F0C(v8, 1, *(_QWORD *)(a1 + 32), 0.0399999991);
      }
    }
    else if (v6)
    {
      v9 = sub_18F1DFF3C();
      v10 = *(_QWORD *)(a1 + 32);
      v11 = sub_18F204AE4();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v16 = 3221225472;
      v17 = sub_18F1F5EE0;
      v18 = &unk_1E2956E98;
      v21 = 1;
      v19 = v9;
      v20 = v10;
      sub_18F1F5E28(v11, (uint64_t)buf);
      v12 = *(_QWORD *)(a1 + 32);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      *(_QWORD *)(a1 + 56) = 0;
      v13 = a1 + 56;
      *(_QWORD *)(v13 - 24) = 0;
      *(_DWORD *)(v13 + 36) = 0;
      *(_QWORD *)(v13 + 44) = 0;
      *(_DWORD *)(v13 + 824) = 0;
      *(_QWORD *)(v13 + 712) = 0;
      *(_DWORD *)(v13 + 720) = 0;
      *(_QWORD *)(v13 + 728) = 0;
      *(_QWORD *)(v13 + 752) = 0;
      *(_QWORD *)(v13 + 8) = 3212836864;
      *(_QWORD *)(v13 + 16) = 0;
      *(_DWORD *)(v13 + 28) = 1025758986;
      *(_DWORD *)(v13 + 792) = 0;
      *(_OWORD *)(v13 + 736) = 0u;
    }
  }
}

void sub_18F1DFF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1DFF3C()
{
  if (qword_1ECEDF0A8 != -1)
    dispatch_once(&qword_1ECEDF0A8, &unk_1E29530E8);
  return qword_1ECEDF0A0;
}

uint64_t sub_18F1DFF7C()
{
  if (qword_1ECEDF838 != -1)
    dispatch_once(&qword_1ECEDF838, &unk_1E29533E8);
  return qword_1ECEDF830;
}

uint64_t sub_18F1DFFBC()
{
  uint64_t result;
  _QWORD *v1;

  result = sub_18F1EF73C();
  if (result)
  {
    v1 = (_QWORD *)operator new();
    *v1 = &off_1E294B550;
    v1[1] = 0;
    result = (uint64_t)dispatch_queue_create("com.apple.CoreMotion.CLDeviceMotionPrivateQueue", 0);
    v1[2] = result;
    qword_1ECEDFDD8 = (uint64_t)v1;
  }
  return result;
}

void sub_18F1E0020(uint64_t a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *active;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  uint64_t v80;
  double v81;
  double v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *StepTime;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  double v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  uint64_t v133;
  double v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t isOdometerDistance;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t isOdometerPace;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  double v176;
  CMPedometerData *v177;
  int v178;
  uint64_t v179;

  v2 = (void *)MEMORY[0x194001B4C]();
  v7 = (void *)objc_msgSend_numberOfSteps(*(void **)(a1 + 32), v3, v4, v5, v6);
  v12 = objc_msgSend_integerValue(v7, v8, v9, v10, v11)
      - *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48)
      + *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64);
  v17 = (void *)objc_msgSend_numberOfPushes(*(void **)(a1 + 32), v13, v14, v15, v16);
  v22 = objc_msgSend_integerValue(v17, v18, v19, v20, v21);
  v27 = *(_QWORD **)(a1 + 40);
  v28 = v27[8];
  v29 = v22 - v27[7];
  v30 = v27[9];
  v31 = v29 + v30;
  v32 = (v29 + v30);
  if (v28 < v12 || v32 > v30)
  {
    v34 = (void *)objc_msgSend_distance(*(void **)(a1 + 32), v23, v24, v25, v26);
    objc_msgSend_doubleValue(v34, v35, v36, v37, v38);
    v40 = v39;
    v41 = *(_QWORD *)(a1 + 40);
    v43 = *(double *)(v41 + 80);
    v42 = *(double *)(v41 + 88);
    v48 = (void *)objc_msgSend_floorsAscended(*(void **)(a1 + 32), v44, v45, v46, v47);
    v53 = objc_msgSend_intValue(v48, v49, v50, v51, v52);
    v54 = *(_QWORD *)(a1 + 40);
    v56 = *(_DWORD *)(v54 + 96);
    v55 = *(_DWORD *)(v54 + 100);
    v61 = (void *)objc_msgSend_floorsDescended(*(void **)(a1 + 32), v57, v58, v59, v60);
    v178 = objc_msgSend_intValue(v61, v62, v63, v64, v65);
    v66 = *(_QWORD *)(a1 + 40);
    v67 = *(_DWORD *)(v66 + 104);
    v68 = *(_DWORD *)(v66 + 108);
    active = (void *)objc_msgSend_activeTime(*(void **)(a1 + 32), v69, v70, v71, v72);
    objc_msgSend_doubleValue(active, v74, v75, v76, v77);
    v79 = v78;
    v80 = *(_QWORD *)(a1 + 40);
    v81 = *(double *)(v80 + 112);
    v82 = *(double *)(v80 + 120);
    v87 = (void *)objc_msgSend_elevationAscended(*(void **)(a1 + 32), v83, v84, v85, v86);
    v171 = objc_msgSend_intValue(v87, v88, v89, v90, v91);
    v92 = *(_QWORD *)(a1 + 40);
    v169 = *(_DWORD *)(v92 + 160);
    v170 = *(_DWORD *)(v92 + 164);
    v97 = (void *)objc_msgSend_elevationDescended(*(void **)(a1 + 32), v93, v94, v95, v96);
    v168 = objc_msgSend_intValue(v97, v98, v99, v100, v101);
    v102 = *(_QWORD *)(a1 + 40);
    v166 = *(_DWORD *)(v102 + 168);
    v167 = *(_DWORD *)(v102 + 172);
    StepTime = (void *)objc_msgSend_firstStepTime(*(void **)(a1 + 32), v103, v104, v105, v106);
    v177 = [CMPedometerData alloc];
    v176 = *(double *)(*(_QWORD *)(a1 + 40) + 128);
    v112 = (void *)objc_msgSend_endDate(*(void **)(a1 + 32), v108, v109, v110, v111);
    objc_msgSend_timeIntervalSinceReferenceDate(v112, v113, v114, v115, v116);
    v122 = v121;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 137))
    {
      v172 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v117, (v53 - v56 + v55), v119, v120);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 137))
      {
        v173 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v117, (v178 - v67 + v68), v119, v120);
        goto LABEL_10;
      }
    }
    else
    {
      v172 = 0;
    }
    v173 = 0;
LABEL_10:
    v127 = objc_msgSend_recordId(*(void **)(a1 + 32), v117, v118, v119, v120);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 138))
    {
      v175 = objc_msgSend_currentPace(*(void **)(a1 + 32), v123, v124, v125, v126);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 138))
      {
        v128 = objc_msgSend_currentCadence(*(void **)(a1 + 32), v123, v124, v125, v126);
        goto LABEL_15;
      }
    }
    else
    {
      v175 = 0;
    }
    v128 = 0;
LABEL_15:
    v174 = v12;
    v129 = v128;
    if (StepTime)
    {
      objc_msgSend_timeIntervalSinceReferenceDate(StepTime, v123, v124, v125, v126);
      v131 = v130;
    }
    else
    {
      v131 = 0.0;
    }
    v132 = v40 - v43;
    v179 = v127;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 40) + 138))
      v133 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v123, v124, v125, v126, v79 - v81 + v82);
    else
      v133 = 0;
    v134 = v132 + v42;
    v135 = objc_msgSend_sourceId(*(void **)(a1 + 32), v123, v124, v125, v126);
    v136 = (void *)MEMORY[0x1E0CB37E8];
    isOdometerDistance = objc_msgSend_isOdometerDistance(*(void **)(a1 + 32), v137, v138, v139, v140);
    v145 = objc_msgSend_numberWithBool_(v136, v142, isOdometerDistance, v143, v144);
    v146 = (void *)MEMORY[0x1E0CB37E8];
    isOdometerPace = objc_msgSend_isOdometerPace(*(void **)(a1 + 32), v147, v148, v149, v150);
    v158 = objc_msgSend_numberWithBool_(v146, v152, isOdometerPace, v153, v154);
    v159 = *(_QWORD *)(a1 + 40);
    v160 = *(_DWORD *)(v159 + 156);
    if (*(_BYTE *)(v159 + 176))
    {
      v163 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v155, (v171 - v169 + v170), v156, v157);
      v159 = *(_QWORD *)(a1 + 40);
      if (*(_BYTE *)(v159 + 176))
      {
        v164 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v155, (v168 - v166 + v167), v161, v162);
        v159 = *(_QWORD *)(a1 + 40);
LABEL_26:
        v165 = objc_autorelease((id)objc_msgSend_initWithStartDate_endDate_steps_distance_floorsAscended_floorsDescended_recordID_currentPace_currentCadence_firstStepTime_activeTime_sourceId_isOdometerDistance_isOdometerPace_pushes_workoutType_elevationAscended_elevationDescended_distanceSource_(v177, v155, v174, v172, v173, v179, v175, v129, v176, v122, v134, v131, v133, v135, v145, v158, __PAIR64__(v160, v31), v163, v164,
                                      *(_DWORD *)(v159 + 180)));
        (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
        goto LABEL_27;
      }
    }
    else
    {
      v163 = 0;
    }
    v164 = 0;
    goto LABEL_26;
  }
LABEL_27:
  objc_autoreleasePoolPop(v2);
}

id sub_18F1E038C(uint64_t a1, const char *a2)
{
  const void *v3;
  void *v4;
  id *v5;
  uint64_t v6;
  id result;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  const __CFString *v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(*(_QWORD *)(a1 + 32) + 24);
  if (v3)
  {
    _Block_release(v3);

  }
  else
  {
    v19 = CFSTR("kCLConnectionMessageSubscribeKey");
    v20[0] = MEMORY[0x1E0C9AAB0];
    v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v20, (uint64_t)&v19, 1);
    sub_18F352D1C("kCLConnectionMessageMotionActivityUpdate", &v18, &v16);
    v15 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v15)
    {
      v10 = (unint64_t *)&v15->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v4 = _Block_copy(*(const void **)(a1 + 48));
  v6 = *(_QWORD *)(a1 + 32);
  v5 = (id *)(a1 + 32);
  *(_QWORD *)(v6 + 24) = v4;
  result = v5[1];
  *((_QWORD *)*v5 + 4) = result;
  return result;
}

void sub_18F1E050C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F1E0B50(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
  {
    v14 = CFSTR("kCLConnectionMessageSubscribeKey");
    v15[0] = MEMORY[0x1E0C9AAA0];
    v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
    sub_18F352D1C("kCLConnectionMessageMotionActivityUpdate", &v13, &v11);
    v10 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v4 = __ldxr(p_shared_owners);
      while (__stxr(v4 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v10)
    {
      v5 = (unint64_t *)&v10->__shared_owners_;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    _Block_release(*(const void **)(*(_QWORD *)(a1 + 32) + 24));
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = 0;

    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
    v7 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_18F1E0CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F1E0CF0(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v14 = CFSTR("kCLConnectionMessageSubscribeKey");
  v15[0] = MEMORY[0x1E0C9AAA0];
  v11 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
  sub_18F425E5C("kCLConnectionMessageStepCountUpdate", &v11, &v12);
  v10 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v10)
  {
    v5 = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  _Block_release(*(const void **)(*(_QWORD *)(a1 + 32) + 32));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 136) = 1;
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18F1E0E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E0E90(UInt8 *a1, uint64_t a2)
{
  BOOL v3;
  CFTypeID v4;
  const __CFData *v5;
  CFTypeRef cf;
  CFRange v8;

  cf = 0;
  if (sub_18F1DEC8C(a2, "kCMPressureBiasId", &cf, 0xFFFFFFFFLL))
    v3 = cf == 0;
  else
    v3 = 1;
  if (v3)
    return 0;
  v4 = CFGetTypeID(cf);
  if (v4 != CFDataGetTypeID())
    return 0;
  v5 = (const __CFData *)cf;
  if ((unint64_t)CFDataGetLength((CFDataRef)cf) < 0x1D)
    return 0;
  v8.location = 0;
  v8.length = 29;
  CFDataGetBytes(v5, v8, a1);
  return 1;
}

uint64_t sub_18F1E0F30()
{
  if (qword_1ECEDFD78 != -1)
    dispatch_once(&qword_1ECEDFD78, &unk_1E2954428);
  return qword_1ECEDFD70;
}

void sub_18F1E1054(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  _QWORD v13[4];
  __int128 v14;
  uint64_t v15;
  __int16 v16;
  uint8_t buf[1640];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 568))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2956AF0);
    v6 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[MotionManager] CLIspDataVisitor reset", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2956AF0);
      v16 = 0;
      v12 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMMotionManager setSidebandTimeSyncHandler:]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
    v7 = *(_QWORD *)(a1 + 32);
    v8 = operator new();
    sub_18F1E15C0(v8);
    v9 = *(_QWORD *)(v7 + 568);
    *(_QWORD *)(v7 + 568) = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 568);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_18F3A5808;
  v13[3] = &unk_1E2956998;
  v14 = *(_OWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a1 + 56);
  v11 = *(void **)(v10 + 64);
  *(_QWORD *)(v10 + 64) = objc_msgSend_copy(v13, a2, a3, a4, a5);

}

void sub_18F1E1284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0xA1C408C38BA87);
  _Unwind_Resume(a1);
}

void sub_18F1E13E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F1E159C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E15C0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t *v5;
  NSObject *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint8_t buf[1640];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E294A4A0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  if ((sub_18F1F7BFC() & 1) != 0)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
    v6 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[CLIspDataVisitor] setting up oscar callback", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
      v12 = 0;
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CLIspDataVisitor::CLIspDataVisitor()", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    v3 = sub_18F204AE4();
    v11 = MEMORY[0x1E0C809B0];
    v4 = sub_18F3A3F40;
    v5 = &v11;
    goto LABEL_15;
  }
  if ((sub_18F1F7BFC() & 2) != 0)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
    v2 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "[CLIspDataVisitor] setting up devmotion3 callback", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2956B10);
      v12 = 0;
      v9 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CLIspDataVisitor::CLIspDataVisitor()", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    v3 = sub_18F204AE4();
    v10 = MEMORY[0x1E0C809B0];
    v4 = sub_18F3A4344;
    v5 = &v10;
LABEL_15:
    v5[1] = 3221225472;
    v5[2] = (uint64_t)v4;
    v5[3] = (uint64_t)&unk_1E2955738;
    v5[4] = a1;
    sub_18F1F5E28(v3, (uint64_t)v5);
  }
  return a1;
}

void sub_18F1E1914(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_18F2A8438(v1 + 40);
  sub_18F2A8438(v1 + 24);
  sub_18F2A8438(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E19B0()
{
  if (qword_1ECEDEF70 != -1)
    dispatch_once(&qword_1ECEDEF70, &unk_1E2944F60);
  return dword_1ECEDEF5C;
}

uint64_t sub_18F1E19F0(uint64_t a1, char a2, int a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  double v9;
  int v10;
  float v11;
  double v13;

  v5 = sub_18F1EE054(a1, a3);
  *(_QWORD *)(v5 + 200) = &unk_1E294B8D0;
  v6 = *(_BYTE *)(v5 + 8);
  *(_QWORD *)(v5 + 256) = 0;
  *(_QWORD *)(v5 + 264) = 0;
  *(_BYTE *)(v5 + 272) = 0;
  *(_QWORD *)(v5 + 208) = 0;
  *(_QWORD *)(v5 + 216) = 0;
  *(_WORD *)(v5 + 224) = 0;
  *(_BYTE *)(v5 + 273) = v6;
  *(_QWORD *)v5 = &off_1E294B868;
  *(_QWORD *)(v5 + 280) = 0;
  *(_QWORD *)(v5 + 288) = 0;
  v7 = sub_18F1EF73C();
  v13 = sub_18F1F723C(v7, (double *)(a1 + 24));
  sub_18F1E29C4(a1 + 296, &v13, (double *)(a1 + 16), a2);
  sub_18F1F77DC();
  v8 = sub_18F1E1B00();
  v9 = 0.25;
  if (v8)
    v9 = 0.5;
  *(double *)(a1 + 920) = v9;
  *(_OWORD *)(a1 + 928) = xmmword_18F509FA0;
  sub_18F1F77DC();
  v10 = sub_18F1E1B00();
  v11 = 0.00035;
  if (v10)
    v11 = 0.00015;
  *(float *)(a1 + 944) = v11;
  return a1;
}

void sub_18F1E1AD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_18F352FB4(v2);
  sub_18F4B2E54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E1B00()
{
  if (qword_1ECEDEFB8 != -1)
    dispatch_once(&qword_1ECEDEFB8, &unk_1E2955F60);
  return byte_1ECEDEF50;
}

CFRunLoopTimerRef *sub_18F1E1F84(CFRunLoopTimerRef *a1, int a2, char a3)
{
  CFRunLoopTimerRef v4;
  CFRunLoopTimerContext context;

  *a1 = (CFRunLoopTimerRef)&off_1E294A480;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *((_DWORD *)a1 + 8) = a2;
  a1[5] = 0;
  *((_BYTE *)a1 + 48) = a3;
  *((_DWORD *)a1 + 13) = 0;
  a1[7] = 0;
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  v4 = CFRunLoopTimerCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1.79769313e308, 1.79769313e308, 0, 0, (CFRunLoopTimerCallBack)sub_18F4D2928, &context);
  a1[7] = v4;
  if (v4)
  {
    sub_18F204AE4();
    CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1ECEDFE08, a1[7], (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  }
  return a1;
}

void sub_18F1E2040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_18F4D4CBC((void ***)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_18F1E2058()
{
  uint64_t v0;
  int v1;
  NSObject *v2;
  unsigned __int16 v3;
  uint64_t v4;
  unsigned __int16 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  NSObject *v13;
  uint64_t v14;
  _BYTE *result;
  char *v16;
  int v17;
  int v18;
  uint8_t buf[4];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEF68 != -1)
    dispatch_once(&qword_1ECEDEF68, &unk_1E2952F48);
  if (qword_1ECEDEF70 != -1)
    dispatch_once(&qword_1ECEDEF70, &unk_1E2944F60);
  v0 = 0;
  v1 = dword_1ECEDEF5C;
  switch(dword_1ECEDEF5C)
  {
    case 0:
    case 259:
      if (qword_1EE16D988 != -1)
        dispatch_once(&qword_1EE16D988, &unk_1E2956080);
      v13 = qword_1EE16D990;
      if (os_log_type_enabled((os_log_t)qword_1EE16D990, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67174657;
        v20 = v1;
        _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_ERROR, "Unsupported HW type %{private}d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_11;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D988 != -1)
        dispatch_once(&qword_1EE16D988, &unk_1E2956080);
      v17 = 67174657;
      v18 = v1;
      goto LABEL_77;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1EE16D988 != -1)
        dispatch_once(&qword_1EE16D988, &unk_1E2956080);
      v2 = qword_1EE16D990;
      if (os_log_type_enabled((os_log_t)qword_1EE16D990, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v20 = v1;
        _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D988 != -1)
          dispatch_once(&qword_1EE16D988, &unk_1E2956080);
        v17 = 67109120;
        v18 = v1;
LABEL_77:
        v16 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "CLPlatformInfo::MotionCapabilities CLPlatformInfo::queryMotionCaps()", "CoreLocation: %s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
      }
LABEL_11:
      v0 = 0;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
      v8 = 2940500222;
      goto LABEL_55;
    case 26:
      v14 = 2806282494;
      goto LABEL_71;
    case 29:
      v12 = 24577;
      goto LABEL_66;
    case 30:
    case 31:
    case 32:
      v12 = 30721;
LABEL_66:
      v0 = v12 | 0x21400000u;
      break;
    case 33:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 238:
    case 239:
      v3 = 762;
      goto LABEL_17;
    case 34:
    case 154:
    case 155:
    case 156:
    case 157:
    case 188:
    case 189:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 240:
    case 241:
      v3 = 6906;
LABEL_17:
      v0 = v3 | 0x31460000u;
      break;
    case 35:
    case 36:
    case 64:
    case 65:
      v9 = 30922;
      goto LABEL_30;
    case 39:
    case 42:
      v0 = 0x28011654E00ELL;
      break;
    case 44:
      v9 = 24826;
LABEL_30:
      v0 = v9 | 0x21440000u;
      break;
    case 45:
      v0 = 558135546;
      break;
    case 46:
    case 62:
    case 161:
      v5 = 24826;
      goto LABEL_51;
    case 47:
    case 63:
      v5 = 30970;
      goto LABEL_51;
    case 48:
    case 186:
      v0 = 826598138;
      break;
    case 49:
    case 134:
    case 135:
    case 136:
    case 137:
    case 187:
    case 190:
    case 202:
      v5 = -1286;
      goto LABEL_51;
    case 50:
    case 51:
      v6 = 0x28015654E00ELL;
      goto LABEL_72;
    case 54:
    case 55:
      v8 = 3211147518;
LABEL_55:
      v10 = v8 & 0xFFFF0000FFFFFFFFLL | 0x2900000000;
      goto LABEL_56;
    case 56:
    case 57:
    case 58:
    case 59:
      v10 = 0x8029BF4638FELL;
LABEL_56:
      v0 = v10 & 0xFFFFFFFFFFFFLL | 0x101000000000000;
      break;
    case 60:
    case 61:
    case 196:
      v0 = 0x200000000;
      break;
    case 66:
    case 67:
    case 74:
    case 75:
      v6 = 0x24355E54E00ELL;
      goto LABEL_72;
    case 68:
    case 69:
    case 71:
    case 72:
      v11 = 0x1218029BF461AFELL;
      goto LABEL_63;
    case 70:
    case 73:
      v7 = 0xC029BF4618FELL;
      goto LABEL_58;
    case 76:
    case 146:
    case 147:
      v5 = -7942;
LABEL_51:
      v0 = v5 | 0x31440000u;
      break;
    case 77:
    case 145:
      v11 = 826604282;
      goto LABEL_63;
    case 78:
    case 79:
    case 80:
    case 142:
      v7 = 0x8029BF461AFELL;
LABEL_58:
      v0 = v7 & 0xFFFFFFFFFFFFLL | 0x121000000000000;
      break;
    case 82:
    case 84:
      v6 = 0x27B55E54E00ELL;
      goto LABEL_72;
    case 86:
    case 88:
      v0 = 0x124B55E54E00ELL;
      break;
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      v6 = 0x24B55E54E01ELL;
      goto LABEL_72;
    case 95:
    case 96:
    case 97:
    case 98:
      v0 = 0x30924B55E54E01ELL;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      v0 = 0x70934B55E54E01ELL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      v0 = 0x70934B55E55001ELL;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      v4 = 0x24B55E54E01ELL;
      goto LABEL_14;
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 258:
      v4 = 0x34B55E55001ELL;
LABEL_14:
      v0 = v4 & 0xFFFFFFFFFFFFLL | 0x70B000000000000;
      break;
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 217:
      v0 = 0x1258029BF461AFELL;
      break;
    case 144:
    case 237:
      v11 = 826678010;
LABEL_63:
      v0 = v11 - 512;
      break;
    case 148:
      v0 = 0x9B746204ELL;
      break;
    case 149:
      v14 = 373686414;
LABEL_71:
      v6 = v14 & 0xFFFF0000FFFFFFFFLL | 0x900000000;
      goto LABEL_72;
    case 150:
    case 151:
    case 152:
    case 153:
      v6 = 0x20355E54E00ELL;
LABEL_72:
      v0 = v6 & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
      v0 = 0x13D8029BF461AFELL;
      break;
    case 175:
    case 218:
    case 219:
    case 220:
    case 221:
      v0 = 0x13B8029BF461AFELL;
      break;
    case 178:
    case 179:
    case 180:
    case 181:
      v0 = 0x13B8029BF461BFELL;
      break;
    case 182:
    case 183:
    case 184:
    case 222:
    case 223:
      v0 = 0x13B8029BF461FFELL;
      break;
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      v0 = 277217290;
      break;
    default:
      break;
  }
  LOBYTE(v17) = BYTE1(v0) & 1;
  result = sub_18F1EA828(buf, (uint64_t)"OverrideMotionCapEclipseService", &v17, 0);
  qword_1ECEDF000 = v0 & 0x73FFFBFFFF7FEFFLL | ((unint64_t)buf[1] << 8);
  return result;
}

void sub_18F1E2658()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    if (CFEqual(v0, CFSTR("iPhone")))
      byte_1ECEDEF53 = 1;
    CFRelease(v1);
  }
}

void sub_18F1E26B4(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  float v7;
  float v8;
  float v9;
  __int128 v10;
  double v11;
  float v12;
  double v13;
  float v14;
  float v15;
  __double2 v16;
  double cosval;
  double v18;
  double v19;
  double v20;

  v4 = a2[2];
  v5 = a2[3] + a2[3];
  v6 = a2[1];
  v7 = v6 * v5 - *a2 * (v4 + v4);
  v8 = (v6 + v6) * *a2 + v4 * v5;
  v9 = sqrtf((float)(v8 * v8) + (float)(v7 * v7));
  if (v9 == 0.0)
  {
    v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    v11 = 1.0 - v6 * (v6 + v6) - v4 * (v4 + v4);
    v12 = v11;
    v13 = v9;
    if (v12 >= 0.0)
    {
      v15 = v11;
      v14 = acosf(v15);
    }
    else
    {
      v14 = -acosf(-v12);
    }
    v16 = __sincos_stret(v14 * 0.5);
    cosval = v16.__cosval;
    v18 = v16.__sinval / v13 * (float)-v8;
    v19 = v16.__sinval / v13 * v7;
    v20 = 0.0;
    if (v12 < 0.0)
    {
      cosval = -(v16.__sinval / v13 * (float)-v8);
      v18 = v16.__cosval;
      v19 = 0.0;
      v20 = -(v16.__sinval / v13 * v7);
    }
    sub_18F1FDF60((double *)a1, &cosval, a2);
  }
}

uint64_t sub_18F1E29C4(uint64_t a1, _QWORD *a2, double *a3, char a4)
{
  _QWORD *v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  double v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  int v29;
  char *v31;
  char *v32;
  uint8_t buf[4];
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *(_WORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E294A9E8;
  *(_BYTE *)(a1 + 10) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x7FEFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  *(_BYTE *)(a1 + 196) = a4;
  *(_QWORD *)(a1 + 200) = *a2;
  *(_DWORD *)(a1 + 208) = 4;
  *(_QWORD *)(a1 + 216) = 0x3FA0A3D70A3D70A4;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 232) = &off_1E294AC98;
  v12 = (_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 240) = 100;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = &off_1E294A870;
  *(_QWORD *)(a1 + 312) = 20;
  *(_QWORD *)(a1 + 320) = &off_1E294AC78;
  *(_QWORD *)(a1 + 328) = 20;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 400) = &off_1E294AC78;
  *(_QWORD *)(a1 + 408) = 20;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_QWORD *)(a1 + 480) = &off_1E294AC78;
  *(_QWORD *)(a1 + 488) = 20;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 616) = 0;
  v13 = operator new[]();
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v13;
  *(_QWORD *)(a1 + 112) = v13 + 24;
  v14 = *(double *)(a1 + 200);
  if (v14 > 0.011 || (v15 = *a3, *a3 > 0.021))
  {
    *(_QWORD *)(a1 + 240) = 0;
    sub_18F1E6174(v12);
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 328) = 0;
    sub_18F1E7F08((_QWORD *)(a1 + 320));
    *(_QWORD *)(a1 + 408) = 0;
    sub_18F1E7F08((_QWORD *)(a1 + 400));
    *(_QWORD *)(a1 + 488) = 0;
    sub_18F1E7F08((_QWORD *)(a1 + 480));
    *(_BYTE *)(a1 + 224) = 0;
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
    v17 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_DEBUG, "Doing crude accel measurement update.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, BOOL)", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  else
  {
    if (fabs(v14 * 200.0 + -1.0) > 0.25)
    {
      if (v14 <= 0.008 || v14 > 0.011)
        v16 = (0.5 / v14);
      else
        v16 = 50;
      *(_QWORD *)(a1 + 240) = v16;
      sub_18F1E6174(v12);
      v15 = *a3;
    }
    if (fabs(v15 * 100.0 + -1.0) > 0.25)
    {
      v19 = (0.200000003 / v15);
      *(_QWORD *)(a1 + 312) = v19;
      *(_QWORD *)(a1 + 328) = v19;
      sub_18F1E7F08((_QWORD *)(a1 + 320));
      *(_QWORD *)(a1 + 408) = v19;
      sub_18F1E7F08((_QWORD *)(a1 + 400));
      *(_QWORD *)(a1 + 488) = v19;
      sub_18F1E7F08((_QWORD *)(a1 + 480));
      v20 = *a3;
      v21 = (int)((double)*(int *)(a1 + 208) / (*a3 * 100.0));
      if (v21 <= 2)
        v21 = 2;
      *(_DWORD *)(a1 + 208) = v21;
      *(double *)(a1 + 216) = fmax(sqrt(v20 * 75.0) * 0.0325, 0.0325);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
  v22 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v23 = *(_QWORD *)(a1 + 240);
    v24 = *(_QWORD *)(a1 + 312);
    v25 = *(_DWORD *)(a1 + 208);
    v26 = *(_QWORD *)(a1 + 216);
    *(_DWORD *)buf = 134218752;
    v34 = v23;
    v35 = 2048;
    v36 = v24;
    v37 = 1024;
    v38 = v25;
    v39 = 2048;
    v40 = v26;
    _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_DEBUG, "rotBufferSize, %zu, accelBufferSize, %zuu, peakCount, %d, fMaxStd, %.3f", buf, 0x26u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
    v31 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, BOOL)", "CoreLocation: %s\n", v31);
    if (v31 != (char *)buf)
      free(v31);
  }
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
  v27 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v28 = *a2;
    v29 = *(unsigned __int8 *)(a1 + 224);
    *(_DWORD *)buf = 134218240;
    v34 = v28;
    v35 = 1024;
    LODWORD(v36) = v29;
    _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_DEBUG, "gyroDt, %.4f, doAccelCheck, %d", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
    v32 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, BOOL)", "CoreLocation: %s\n", v32);
    if (v32 != (char *)buf)
      free(v32);
  }
  return a1;
}

void sub_18F1E3100(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_18F3D6A70(v1 + 38);
  v1[29] = v2;
  sub_18F3CBA50(v1 + 32);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E312C(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F1E319C(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F1E319C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  _BYTE buf[12];
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  *(_QWORD *)buf = 0;
  v6 = sub_18F36B0A4(cf, buf);
  if ((_DWORD)v6)
  {
    *a3 = *(_DWORD *)buf;
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v8;
      v18 = 2112;
      v19 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint32_t &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

void sub_18F1E3460(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194001B4C]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_autoreleasePoolPop(v2);
}

void sub_18F1E349C(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *started;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  _QWORD *v86;
  NSObject *v87;
  uint64_t v88;
  const void *v89;
  unint64_t *v90;
  unint64_t v91;
  unint64_t *p_shared_owners;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  std::__shared_weak_count *v102;
  _QWORD v103[6];
  _QWORD block[6];
  const __CFString *v105;
  uint64_t v106;
  _QWORD v107[2];
  int buf;
  _BYTE buf_4[12];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if (qword_1EE16D478 != -1)
      dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
    v7 = qword_1EE16D470;
    if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_ERROR))
    {
      buf = 138543362;
      *(_QWORD *)buf_4 = objc_msgSend_localizedDescription(a4, v8, v9, v10, v11);
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "Error occurred: %{public}@", (uint8_t *)&buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE16D478 != -1)
        dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
      LODWORD(v107[0]) = 138543362;
      *(_QWORD *)((char *)v107 + 4) = objc_msgSend_localizedDescription(a4, v97, v98, v99, v100);
      v101 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMPedometerProxy _startPedometerUpdatesFromDate:withHandler:]_block_invoke", "CoreLocation: %s\n", v101);
      if (v101 != (char *)&buf)
        free(v101);
    }
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F422FEC;
    block[3] = &unk_1E2955B60;
    block[4] = a4;
    block[5] = v12;
    dispatch_async(v13, block);
  }
  else if (!*(_BYTE *)(*(_QWORD *)(a1 + 32) + 136))
  {
    v15 = (void *)objc_msgSend_numberOfSteps(a2, (const char *)a2, a3, 0, a5);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) = objc_msgSend_integerValue(v15, v16, v17, v18, v19);
    v24 = (void *)objc_msgSend_numberOfPushes(a2, v20, v21, v22, v23);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = objc_msgSend_integerValue(v24, v25, v26, v27, v28);
    v33 = (void *)objc_msgSend_distance(a2, v29, v30, v31, v32);
    objc_msgSend_doubleValue(v33, v34, v35, v36, v37);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = v38;
    v43 = (void *)objc_msgSend_floorsAscended(a2, v39, v40, v41, v42);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 100) = objc_msgSend_intValue(v43, v44, v45, v46, v47);
    v52 = (void *)objc_msgSend_floorsDescended(a2, v48, v49, v50, v51);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 108) = objc_msgSend_intValue(v52, v53, v54, v55, v56);
    started = (void *)objc_msgSend_startDate(a2, v57, v58, v59, v60);
    objc_msgSend_timeIntervalSinceReferenceDate(started, v62, v63, v64, v65);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 128) = v66;
    v71 = (void *)objc_msgSend_elevationAscended(a2, v67, v68, v69, v70);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 164) = objc_msgSend_intValue(v71, v72, v73, v74, v75);
    v80 = (void *)objc_msgSend_elevationDescended(a2, v76, v77, v78, v79);
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 172) = objc_msgSend_intValue(v80, v81, v82, v83, v84);
    v86 = *(_QWORD **)(a1 + 32);
    if (v86[8] || v86[9])
    {
      v87 = v86[2];
      v103[0] = MEMORY[0x1E0C809B0];
      v103[1] = 3221225472;
      v103[2] = sub_18F423000;
      v103[3] = &unk_1E2955B60;
      v88 = *(_QWORD *)(a1 + 40);
      v103[4] = a2;
      v103[5] = v88;
      dispatch_async(v87, v103);
      v86 = *(_QWORD **)(a1 + 32);
    }
    v89 = (const void *)v86[4];
    if (v89)
    {
      _Block_release(v89);
    }
    else
    {
      v105 = CFSTR("kCLConnectionMessageSubscribeKey");
      v106 = MEMORY[0x1E0C9AAB0];
      v107[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v85, (uint64_t)&v106, (uint64_t)&v105, 1);
      sub_18F425E5C("kCLConnectionMessageStepCountUpdate", v107, &buf);
      v102 = *(std::__shared_weak_count **)&buf_4[4];
      if (*(_QWORD *)&buf_4[4])
      {
        v90 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
        do
          v91 = __ldxr(v90);
        while (__stxr(v91 + 1, v90));
      }
      CLConnectionClient::sendMessage();
      if (v102)
      {
        p_shared_owners = (unint64_t *)&v102->__shared_owners_;
        do
          v93 = __ldaxr(p_shared_owners);
        while (__stlxr(v93 - 1, p_shared_owners));
        if (!v93)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v94 = *(std::__shared_weak_count **)&buf_4[4];
      if (*(_QWORD *)&buf_4[4])
      {
        v95 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = _Block_copy(*(const void **)(a1 + 40));
  }
}

void sub_18F1E38C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_18F2A8438((uint64_t)&a12);
  sub_18F2A8438((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_18F1E38EC(uint64_t a1, CLConnectionMessage **a2)
{
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSSet *v13;
  uint64_t v14;
  CLConnectionMessage *v15;
  void *DictionaryOfClasses;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  uint64_t (*v32)(uint64_t, const char *, uint64_t, uint64_t, uint64_t);
  uint64_t *p_block;
  NSObject *v34;
  char *v35;
  const void *v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  _QWORD *v53;
  NSObject *v54;
  char *v55;
  void *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *active;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  void *v143;
  const char *v144;
  _QWORD v145[7];
  _QWORD v146[6];
  uint64_t block;
  uint64_t v148;
  int v149;
  void *v150;
  uint8_t buf[4];
  void *v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1E0C99E60];
  v5 = objc_opt_class();
  v13 = (NSSet *)objc_msgSend_setWithObjects_(v4, v6, v5, v7, v8, 0);
  v14 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v14 + 40))
    goto LABEL_18;
  v15 = *a2;
  if (!*a2)
  {
    v143 = (void *)objc_msgSend_currentHandler(MEMORY[0x1E0CB3488], v9, v10, v11, v12);
    objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(v143, v144, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), (uint64_t)CFSTR("CMPedometer.mm"), 111, CFSTR("Empty pedometer update."));
    v15 = *a2;
  }
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v15, v13);
  if (DictionaryOfClasses)
  {
    v20 = DictionaryOfClasses;
    v21 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v17, (uint64_t)CFSTR("CMErrorMessage"), v18, v19);
    v25 = objc_msgSend_objectForKeyedSubscript_(v20, v22, (uint64_t)CFSTR("CMPedometerDataObject"), v23, v24);
    v30 = (id)objc_msgSend_copy(*(void **)(*(_QWORD *)(a1 + 32) + 40), v26, v27, v28, v29);
    v31 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
    if (v21)
    {
      v148 = MEMORY[0x1E0C809B0];
      v32 = sub_18F422410;
      p_block = &v148;
    }
    else
    {
      block = MEMORY[0x1E0C809B0];
      v32 = sub_18F422470;
      p_block = &block;
      v21 = v25;
    }
    p_block[1] = 3221225472;
    p_block[2] = (uint64_t)v32;
    p_block[4] = v21;
    p_block[5] = (uint64_t)v30;
    p_block[3] = (uint64_t)&unk_1E2955B60;
    dispatch_async(v31, p_block);
    v14 = *(_QWORD *)(a1 + 32);
LABEL_18:
    v36 = *(const void **)(v14 + 32);
    if (!v36)
      return;
    v37 = _Block_copy(v36);
    if (*a2 && (v38 = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v13)) != 0)
    {
      v42 = v38;
      v43 = objc_msgSend_objectForKeyedSubscript_(v38, v39, (uint64_t)CFSTR("CMErrorMessage"), v40, v41);
      v47 = (void *)objc_msgSend_objectForKeyedSubscript_(v42, v44, (uint64_t)CFSTR("CMPedometerDataObject"), v45, v46);
      if (v43)
      {
        v52 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
        v146[0] = MEMORY[0x1E0C809B0];
        v146[1] = 3221225472;
        v146[2] = sub_18F4224EC;
        v146[3] = &unk_1E2955B60;
        v146[4] = v43;
        v146[5] = v37;
        v53 = v146;
LABEL_40:
        dispatch_async(v52, v53);
LABEL_41:
        _Block_release(v37);
        return;
      }
      v56 = v47;
      if (v47)
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) == -1)
        {
          v57 = (void *)objc_msgSend_numberOfSteps(v47, v48, v49, v50, v51);
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = objc_msgSend_integerValue(v57, v58, v59, v60, v61);
          v66 = (void *)objc_msgSend_numberOfPushes(v56, v62, v63, v64, v65);
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = objc_msgSend_integerValue(v66, v67, v68, v69, v70);
          v75 = (void *)objc_msgSend_distance(v56, v71, v72, v73, v74);
          objc_msgSend_doubleValue(v75, v76, v77, v78, v79);
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = v80;
          v85 = (void *)objc_msgSend_floorsAscended(v56, v81, v82, v83, v84);
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 96) = objc_msgSend_intValue(v85, v86, v87, v88, v89);
          v94 = (void *)objc_msgSend_floorsDescended(v56, v90, v91, v92, v93);
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104) = objc_msgSend_intValue(v94, v95, v96, v97, v98);
          active = (void *)objc_msgSend_activeTime(v56, v99, v100, v101, v102);
          objc_msgSend_doubleValue(active, v104, v105, v106, v107);
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = v108;
          v113 = (void *)objc_msgSend_elevationAscended(v56, v109, v110, v111, v112);
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160) = objc_msgSend_intValue(v113, v114, v115, v116, v117);
          v122 = (void *)objc_msgSend_elevationDescended(v56, v118, v119, v120, v121);
          *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168) = objc_msgSend_intValue(v122, v123, v124, v125, v126);
        }
        v127 = (void *)objc_msgSend_numberOfSteps(v56, v48, v49, v50, v51);
        if (!objc_msgSend_integerValue(v127, v128, v129, v130, v131))
        {
          v136 = (void *)objc_msgSend_numberOfPushes(v56, v132, v133, v134, v135);
          if (!objc_msgSend_integerValue(v136, v137, v138, v139, v140))
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 96) = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 104) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160) = 0;
            *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168) = 0;
          }
        }
        v141 = *(_QWORD *)(a1 + 32);
        v52 = *(NSObject **)(v141 + 16);
        v145[0] = MEMORY[0x1E0C809B0];
        v145[1] = 3221225472;
        v145[2] = sub_18F1E0020;
        v145[3] = &unk_1E2955BD8;
        v145[4] = v56;
        v145[5] = v141;
        v145[6] = v37;
        v53 = v145;
        goto LABEL_40;
      }
      if (qword_1EE16D478 != -1)
        dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
      v142 = qword_1EE16D470;
      if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138543362;
        v152 = v42;
        _os_log_impl(&dword_18F1DC000, v142, OS_LOG_TYPE_FAULT, "Unable to parse message (%{public}@) when starting updates to queue", buf, 0xCu);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_41;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D478 != -1)
        dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
      v149 = 138543362;
      v150 = v42;
    }
    else
    {
      if (qword_1EE16D478 != -1)
        dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
      v54 = qword_1EE16D470;
      if (os_log_type_enabled((os_log_t)qword_1EE16D470, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v54, OS_LOG_TYPE_ERROR, "Unable to parse message when starting updates to queue!", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_41;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D478 != -1)
        dispatch_once(&qword_1EE16D478, &unk_1E2943B30);
      LOWORD(v149) = 0;
    }
    v55 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMPedometerProxy init]_block_invoke", "CoreLocation: %s\n", v55);
    if (v55 != (char *)buf)
      free(v55);
    goto LABEL_41;
  }
  if (qword_1EE16D3E0 != -1)
    dispatch_once(&qword_1EE16D3E0, &unk_1E2957640);
  v34 = qword_1EE16D3D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D3D0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_ERROR, "Empty pedometer dictionary.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D3E0 != -1)
      dispatch_once(&qword_1EE16D3E0, &unk_1E2957640);
    LOWORD(v149) = 0;
    v35 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "-[CMPedometerProxy init]_block_invoke", "CoreLocation: %s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
  }
}

void sub_18F1E3FE0(uint64_t a1, CLConnectionMessage **a2)
{
  id *v3;
  _QWORD *Weak;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  NSSet *v13;
  void *DictionaryOfClasses;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD v42[6];
  id v43;
  int v44;
  int v45;
  uint8_t buf[4];
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = (id *)(a1 + 32);
  Weak = objc_loadWeak((id *)(a1 + 32));
  if (!Weak)
    return;
  v5 = Weak;
  if (!Weak[3])
    return;
  v6 = (void *)MEMORY[0x1E0C99E60];
  v7 = objc_opt_class();
  v8 = objc_opt_class();
  v9 = objc_opt_class();
  v13 = (NSSet *)objc_msgSend_setWithObjects_(v6, v10, v7, v11, v12, v8, v9, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v13)) != 0)
  {
    v18 = DictionaryOfClasses;
    v19 = (void *)objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v15, (uint64_t)CFSTR("CMErrorMessage"), v16, v17);
    v23 = objc_msgSend_objectForKeyedSubscript_(v18, v20, (uint64_t)CFSTR("CMMotionActivityData"), v21, v22);
    if (v19)
    {
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2952D88);
      v24 = qword_1EE16D6E8;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v47 = objc_msgSend_intValue(v19, v25, v26, v27, v28);
        _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_DEFAULT, "Error occurred while trying to retrieve motion state update: CMErrorDomain Code:%{public}d", buf, 8u);
      }
      if (!sub_18F1FCA08(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2952D88);
      v44 = 67240192;
      v45 = objc_msgSend_intValue(v19, v29, v30, v31, v32);
      v33 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "-[CMMotionActivityManager init]_block_invoke", "CoreLocation: %s\n", v33);
      if (v33 == (char *)buf)
        return;
LABEL_35:
      free(v33);
      return;
    }
    v35 = v23;
    if (v23)
    {
      v37 = v5[3];
      v36 = (void *)v5[4];
      v42[0] = MEMORY[0x1E0C809B0];
      v42[1] = 3221225472;
      v42[2] = sub_18F2098DC;
      v42[3] = &unk_1E2955C20;
      objc_copyWeak(&v43, v3);
      v42[4] = v35;
      v42[5] = v37;
      objc_msgSend_addOperationWithBlock_(v36, v38, (uint64_t)v42, v39, v40);
      objc_destroyWeak(&v43);
      return;
    }
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2952D88);
    v41 = qword_1EE16D6E8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageMotionActivityUpdate message!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2952D88);
      LOWORD(v44) = 0;
      v33 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMMotionActivityManager init]_block_invoke", "CoreLocation: %s\n", v33);
      goto LABEL_34;
    }
  }
  else
  {
    if (qword_1EE16D6E0 != -1)
      dispatch_once(&qword_1EE16D6E0, &unk_1E2952D88);
    v34 = qword_1EE16D6E8;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      v47 = 103;
      _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_ERROR, "Error occurred while trying to retrieve motion state update: CMErrorDomain Code:%{public}d", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6E0 != -1)
        dispatch_once(&qword_1EE16D6E0, &unk_1E2952D88);
      v44 = 67240192;
      v45 = 103;
      v33 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMMotionActivityManager init]_block_invoke", "CoreLocation: %s\n", v33);
LABEL_34:
      if (v33 == (char *)buf)
        return;
      goto LABEL_35;
    }
  }
}

void sub_18F1E451C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18F1E4538(void *a1, void *a2)
{
  CFRunLoopRef Current;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  char *v11;
  id v12;
  __IOHIDServiceClient *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  char *v23;
  char *v24;
  char *v25;
  uint8_t buf[4];
  _BYTE v27[24];
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v21 = off_1ECEDEE90;
    v8 = "assert";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(_QWORD *)&v27[6] = "";
      *(_WORD *)&v27[14] = 2082;
      *(_QWORD *)&v27[16] = "assert";
      v28 = 2081;
      v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingProperties should be called from motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v22 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(_QWORD *)&v27[6] = "";
      *(_WORD *)&v27[14] = 2082;
      *(_QWORD *)&v27[16] = "assert";
      v28 = 2081;
      v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setMatchingProperties should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingProperties should be called from motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    a1 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v27 = 0;
      *(_WORD *)&v27[4] = 2082;
      *(_QWORD *)&v27[6] = "";
      *(_WORD *)&v27[14] = 2082;
      *(_QWORD *)&v27[16] = "assert";
      v28 = 2081;
      v29 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingProperties should be called from motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_43;
  }
  if (objc_msgSend_isEqualToDictionary_(a2, v5, *((_QWORD *)a1 + 19), v6, v7))
  {
    v8 = (const char *)CMVO2MaxRetrocomputeState;
    if (qword_1ECEDEE98 == -1)
    {
LABEL_4:
      v9 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *((_QWORD *)a1 + 19);
        *(_DWORD *)buf = 138477827;
        *(_QWORD *)v27 = v10;
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Early return for identical properties %{private}@", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (*((_QWORD *)v8 + 467) != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        v11 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v11);
        if (v11 != (char *)buf)
          free(v11);
      }
      return;
    }
LABEL_43:
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    goto LABEL_4;
  }
  v12 = a2;

  *((_QWORD *)a1 + 19) = a2;
  v13 = (__IOHIDServiceClient *)*((_QWORD *)a1 + 3);
  if (v13 && (sub_18F1F4120(v13, a2) & 1) == 0)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v14 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *((_QWORD *)a1 + 3);
      v16 = *((_QWORD *)a1 + 19);
      *(_DWORD *)buf = 134283779;
      *(_QWORD *)v27 = v15;
      *(_WORD *)&v27[8] = 2114;
      *(_QWORD *)&v27[10] = v16;
      _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - Previously matched service ref %{private}p does not match new properties %{public}@. Clearing and refreshing.", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v23 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    if ((sub_18F205968(*((__IOHIDServiceClient **)a1 + 3), CFSTR("ReportInterval"), &unk_1E298C4A0) & 1) == 0)
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v18 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] setMatchingProperties - Failed to stop streaming from the old service", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        v25 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v25);
        if (v25 != (char *)buf)
          free(v25);
      }
    }
    sub_18F1F383C((uint64_t)a1, v17);
    sub_18F1F393C(*((const char **)a1 + 4), 0);
    if (*((_QWORD *)a1 + 3))
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v19 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *((_QWORD *)a1 + 3);
        *(_DWORD *)buf = 134283521;
        *(_QWORD *)v27 = v20;
        _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] setMatchingProperties - successfully switch to new service %{private}p", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        v24 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::Device::setMatchingProperties(NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v24);
        if (v24 != (char *)buf)
          free(v24);
      }
      sub_18F204B88(*((const char **)a1 + 4));
    }
  }
}

BOOL sub_18F1E4D5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  int v6;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECEDFDF0);
  v5 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v5 = *(const char **)v5;
  sub_18F20C454(a1 + 120, v5, v2, v3, v4);
  v6 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (*(_BYTE *)(a1 + 16))
    sub_18F387D1C((char *)a1, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECEDFDF0);
  return v6 != 0;
}

void sub_18F1E4DE0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECEDFDF0);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E4DFC(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F209994(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

void sub_18F1E4E6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD v11[7];
  char v12;
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = _os_activity_create(&dword_18F1DC000, "CL: CLGyroBiasEstimatorClientRemote::registerWithGyroBiasEstimatorPrivate", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_1ECEDEE58 != -1)
    dispatch_once(&qword_1ECEDEE58, &unk_1E2954748);
  v9 = qword_1ECEDEE50;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68290050;
    v15 = 0;
    v16 = 2082;
    v17 = "";
    v18 = 2082;
    v19 = "activity";
    v20 = 1026;
    v21 = a3;
    v22 = 2050;
    v23 = a1;
    v24 = 2050;
    v25 = a4;
    _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGyroBiasEstimatorClientRemote::registerWithGyroBiasEstimatorPrivate\", \"event\":%{public, location:escape_only}s, \"isBuildingGYTT\":%{public}hhd, \"client\":\"%{public}p\", \"info\":\"%{public}p\"}", buf, 0x36u);
  }
  v10 = *(NSObject **)(a1 + 16);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_18F1E6D10;
  v11[3] = &unk_1E2955EE0;
  v11[4] = a1;
  v11[5] = a2;
  v11[6] = a4;
  v12 = a3;
  dispatch_async(v10, v11);
  os_activity_scope_leave(&state);
}

void sub_18F1E500C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_18F1E50A4(CFTypeRef cf)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  char *v5;
  char *v6;
  uint8_t buf[4];
  CFTypeRef v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (!qword_1ECEDFE00)
    goto LABEL_15;
  if ((CFTypeRef)qword_1ECEDFE00 == cf)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v3 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "#Warning Setting CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 == -1)
        goto LABEL_30;
      goto LABEL_32;
    }
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v2 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEFAULT, "#Warning Changing CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 == -1)
      {
LABEL_30:
        v6 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf)
          free(v6);
        goto LABEL_15;
      }
LABEL_32:
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
      goto LABEL_30;
    }
  }
LABEL_15:
  if (cf)
    CFRetain(cf);
  if (qword_1ECEDFE00)
    CFRelease((CFTypeRef)qword_1ECEDFE00);
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
  v4 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v8 = cf;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "CLCommonSetRunLoop, %p", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E29437A0);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  qword_1ECEDFE00 = (uint64_t)cf;
}

void sub_18F1E5474(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  const __CFString *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type size;
  int v13;
  std::string v14;
  std::string v15;

  v3 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  LODWORD(a2) = *(char *)(a1 + 23);
  if ((a2 & 0x80000000) != 0)
  {
    if (*(_QWORD *)(a1 + 8))
    {
LABEL_3:
      if ((a2 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((_BYTE)a2)
  {
    goto LABEL_3;
  }
  v4 = (const __CFString *)CFCopyUserName();
  sub_18F1ED06C(v4, (uint64_t)&v15);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
  v5 = v15.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
  a2 = (_QWORD *)HIBYTE(v5);
  if ((a2 & 0x80) == 0)
  {
LABEL_4:
    if (!(_BYTE)a2)
      return;
    goto LABEL_11;
  }
LABEL_10:
  if (!*(_QWORD *)(a1 + 8))
    return;
LABEL_11:
  sub_18F20C024(&v14);
  v6 = std::string::append(&v14, "/private/var/Managed Preferences/");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a1;
  else
    v9 = *(const std::string::value_type **)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  v11 = std::string::append(&v15, v9, v10);
  size = v11->__r_.__value_.__l.__size_;
  *v3 = v11->__r_.__value_.__r.__words[0];
  v3[1] = size;
  *(_QWORD *)((char *)v3 + 15) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  LOBYTE(size) = *((_BYTE *)&v11->__r_.__value_.__s + 23);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = SHIBYTE(v15.__r_.__value_.__r.__words[2]);
  *((_BYTE *)v3 + 23) = size;
  if (v13 < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_18F1E5598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_18F1E55CC(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD block[5];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = _os_activity_create(&dword_18F1DC000, "CL: CLGyroBiasEstimatorClientRemote::unregisterWithGyroBiasEstimatorPrivate", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v2, &state);

  if (qword_1ECEDEE58 != -1)
    dispatch_once(&qword_1ECEDEE58, &unk_1E2954748);
  v3 = qword_1ECEDEE50;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v8 = 0;
    v9 = 2082;
    v10 = "";
    v11 = 2082;
    v12 = "activity";
    v13 = 2050;
    v14 = a1;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGyroBiasEstimatorClientRemote::unregisterWithGyroBiasEstimatorPrivate\", \"event\":%{public, location:escape_only}s, \"client\":\"%{public}p\"}", buf, 0x26u);
  }
  v4 = *(NSObject **)(a1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F1DEF98;
  block[3] = &unk_1E2955738;
  block[4] = a1;
  dispatch_async(v4, block);
  os_activity_scope_leave(&state);
}

void sub_18F1E5734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

char *sub_18F1E5748(char *a1)
{
  __CFNotificationCenter *LocalCenter;

  *(_QWORD *)a1 = off_1E294BB98;
  *((_WORD *)a1 + 4) = 0;
  *(_QWORD *)(a1 + 12) = 0xFFFFFFFF00000000;
  *((_QWORD *)a1 + 3) = 0;
  *((_QWORD *)a1 + 4) = 0;
  sub_18F1E8C74((uint64_t)(a1 + 40), "CLLogBase", 1, 0);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, (CFNotificationCallback)sub_18F494C9C, CFSTR("com.apple.locationd.DumpDiagnostics"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  return a1;
}

void sub_18F1E57F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F2A8438(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E5858(uint64_t result, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  uint8_t buf[4];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(result + 48) = *a2;
  v2 = (uint64_t *)(result + 48);
  if (*(_QWORD *)(result + 72))
  {
    v3 = result;
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
    v4 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      v5 = *v2;
      *(_DWORD *)buf = 134349056;
      v8 = v5;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "Set device motion sensor status %{public}ld", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLSensorFusionService::updateSensorStatus(const SensorStatus &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    return (*(uint64_t (**)(uint64_t *, _QWORD))(v3 + 72))(v2, *(_QWORD *)(v3 + 80));
  }
  return result;
}

uint64_t sub_18F1E5A28(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  v9 = a2;
  v10 = v8 + 80 * (int)a2;
  v11 = *(_QWORD **)(v10 + 32);
  if (v11 != (_QWORD *)(v10 + 40))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[4] + 16))(v11[4], a2, a3, a4);
      *((_DWORD *)v11 + 10) = (*((_DWORD *)v11 + 10) + 1) % *((_DWORD *)v11 + 11);
      v12 = (_QWORD *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v14 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v8 = *(_QWORD *)(v7 + 16);
      v11 = v13;
    }
    while (v13 != (_QWORD *)(v8 + 80 * v9 + 40));
  }
  v15 = v8 + 80 * v9;
  v16 = *(_QWORD *)(v15 + 64);
  if (v16 != v15 + 56)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v16 + 16) + 16))(*(_QWORD *)(v16 + 16), a2, a3, a4);
      v16 = *(_QWORD *)(v16 + 8);
    }
    while (v16 != *(_QWORD *)(v7 + 16) + 80 * v9 + 56);
  }
  return result;
}

uint64_t sub_18F1E5B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

uint64_t sub_18F1E5B5C(uint64_t a1, uint64_t a2)
{
  return sub_18F1E5A28(a2, 6, a1, 8);
}

uint64_t *sub_18F1E5B70(uint64_t *result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD, uint64_t *, _QWORD);
  uint64_t v3;

  v2 = *(uint64_t (**)(_QWORD, uint64_t *, _QWORD))(a2 + 584);
  if (v2)
  {
    v3 = *result;
    return (uint64_t *)v2(0, &v3, *(_QWORD *)(a2 + 592));
  }
  return result;
}

void sub_18F1E5DE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1E5E04(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  double v11;
  unint64_t v12;
  double v13[2];
  _BYTE buf[1632];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954568);
  v2 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    sub_18F204AE4();
    v3 = *(_QWORD *)_CFGetProgname();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_INFO, "%{public}s is enabling power conservative device motion for parallax.", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954568);
    sub_18F204AE4();
    v9 = *(_QWORD *)_CFGetProgname();
    LODWORD(v13[0]) = 136446210;
    *(_QWORD *)((char *)v13 + 4) = v9;
    v10 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::start()", "CoreLocation: %s\n", v10);
    if (v10 != buf)
      free(v10);
  }
  sub_18F1E7E0C(a1 + 296);
  *(_QWORD *)buf = 0;
  v12 = 0xBFF0000000000000;
  v13[0] = 0.0;
  v4 = mach_absolute_time();
  v11 = sub_18F1FD20C(v4);
  sub_18F20A100(a1 + 296, (double *)buf, v13, (double *)&v12, &v11);
  v5 = (_QWORD *)operator new();
  *v5 = off_1E294C238;
  *v5 = &off_1E294C820;
  v5[1] = 0;
  v5[2] = nullsub_6;
  v5[3] = a1;
  *(_QWORD *)(a1 + 288) = v5;
  v6 = sub_18F1EF73C();
  sub_18F1F4F0C(v6, 0, *(_QWORD *)(a1 + 288), 1.0);
  sub_18F209E74(a1 + 200, *(double *)(a1 + 24));
  sub_18F209F30(a1 + 200);
  v7 = operator new();
  *(_QWORD *)(v7 + 16) = &off_1E294AC98;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = &off_1E294AC98;
  *(_QWORD *)(v7 + 160) = &off_1E294AC98;
  *(_QWORD *)(v7 + 96) = 8;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 168) = 8;
  *(_OWORD *)(v7 + 176) = 0u;
  *(_OWORD *)(v7 + 192) = 0u;
  *(_OWORD *)(v7 + 208) = 0u;
  *(_QWORD *)(v7 + 224) = 0;
  *(_QWORD *)(a1 + 280) = v7;
  *(_QWORD *)v7 = &off_1E294A890;
  *(_QWORD *)(v7 + 8) = 8;
  *(_QWORD *)(v7 + 24) = 8;
  sub_18F1E6174((_QWORD *)(v7 + 16));
  *(_QWORD *)(v7 + 96) = 8;
  sub_18F1E6174((_QWORD *)(v7 + 88));
  *(_QWORD *)(v7 + 168) = 8;
  sub_18F1E6174((_QWORD *)(v7 + 160));
  sub_18F209FE8(a1 + 200, 0.02);
  *(_QWORD *)buf = 2;
  return sub_18F1E5858(a1, buf);
}

void sub_18F1E6148(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_18F1E6174(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[4];
  v3 = a1[5];
  a1[8] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[5];
      v2 = (void **)(a1[4] + 8);
      a1[4] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 1024;
LABEL_7:
    a1[7] = v6;
  }
  a1[2] = 0;
}

uint64_t sub_18F1E61EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *(_QWORD *)a1 = &off_1E294A740;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  v5 = a3;
  is_mul_ok(a3, 0x50uLL);
  v6 = (_QWORD *)operator new[]();
  *v6 = 80;
  v6[1] = v5;
  if (a3)
  {
    v7 = 80 * v5;
    v8 = v6 + 11;
    do
    {
      *(v8 - 4) = 0;
      *(v8 - 8) = 0;
      *(v8 - 7) = 0;
      *(v8 - 9) = 0;
      *(v8 - 5) = v8 - 4;
      *(v8 - 3) = 0;
      *(v8 - 2) = v8 - 2;
      *(v8 - 1) = v8 - 2;
      *v8 = 0;
      v8 += 10;
      v7 -= 80;
    }
    while (v7);
  }
  *(_QWORD *)(a1 + 16) = v6 + 2;
  return a1;
}

void sub_18F1E62B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  const char *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _QWORD v12[6];
  void *__p;
  std::__shared_weak_count *v14;
  char v15;
  void *v16[2];
  char v17;
  const __CFString *v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v1 = *(uint64_t **)(a1 + 32);
  if (!*v1)
  {
    v2 = operator new();
    sub_18F270374(v16, "com.apple.locationd.registration");
    MEMORY[0x19400100C](v2, v16, v1[1]);
    sub_18F331ACC(v1, v2);
    if (v17 < 0)
      operator delete(v16[0]);
    sub_18F270374(&__p, "kCLConnectionMessagePressureBias");
    v12[1] = MEMORY[0x1E0C809B0];
    v12[2] = 3221225472;
    v12[3] = sub_18F1DF028;
    v12[4] = &unk_1E2958048;
    v12[5] = v1;
    CLConnectionClient::setHandlerForMessage();
    if (v15 < 0)
      operator delete(__p);
    CLConnectionClient::start((CLConnectionClient *)*v1);
    v18 = CFSTR("kCLConnectionMessageSubscribeKey");
    v19[0] = MEMORY[0x1E0C9AAB0];
    v12[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v3, (uint64_t)v19, (uint64_t)&v18, 1);
    sub_18F4040E8("kCLConnectionMessagePressureBias", v12, &__p);
    v11 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnectionClient::sendMessage();
    if (v11)
    {
      v6 = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v8 = v14;
    if (v14)
    {
      v9 = (unint64_t *)&v14->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_18F1E64C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F1E65DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18F1E6CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_18F1E6D10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  __int128 v17;
  void *v18;
  std::__shared_weak_count *v19;
  char v20;
  void *__p[2];
  char v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = operator new();
  sub_18F270374(__p, "com.apple.locationd.registration");
  MEMORY[0x19400100C](v3, __p, *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = v3;
  if (v22 < 0)
    operator delete(__p[0]);
  sub_18F270374(&v18, "kCLConnectionMessageGyroBiasEstimation");
  v16[1] = MEMORY[0x1E0C809B0];
  v16[2] = 3221225472;
  v16[3] = sub_18F1ED898;
  v16[4] = &unk_1E2955EC0;
  v16[5] = v2;
  v17 = *(_OWORD *)(a1 + 40);
  CLConnectionClient::setHandlerForMessage();
  if (v20 < 0)
    operator delete(v18);
  CLConnectionClient::setDefaultMessageHandler();
  v23[1] = CFSTR("kCLConnectionMessageBuildGYTTKey");
  v24[0] = MEMORY[0x1E0C9AAB0];
  v23[0] = CFSTR("kCLConnectionMessageSubscribeKey");
  v24[1] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v4, *(unsigned __int8 *)(a1 + 56), v5, v6);
  v16[0] = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v7, (uint64_t)v24, (uint64_t)v23, 2);
  sub_18F3667C8("kCLConnectionMessageGyroBiasEstimation", v16, &v18);
  v15 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  CLConnectionClient::start(*(CLConnectionClient **)(v2 + 8));
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_18F1E6F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_18F2A8438((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_18F1E6FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  NSObject *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const __CFDictionary *v15;
  io_service_t MatchingService;
  void *CFProperty;
  CFTypeID v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  NSObject *v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  const __CFString *v44;
  uint64_t v45;
  const __CFString *v46;
  const __CFString *v47;
  uint8_t buf[4];
  _BYTE v49[10];
  _DWORD v50[406];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  sub_18F1E61EC(v0, (uint64_t)"CLGyro", 2);
  *(_QWORD *)v0 = &off_1E294BAF8;
  *(_DWORD *)(v0 + 32) = -1;
  *(_QWORD *)(v0 + 40) = 0x3FF0000000000000;
  *(_BYTE *)(v0 + 96) = 0;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  v1 = sub_18F204AE4();
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  v6 = sub_18F1EE944(v2, "LogGyro", (BOOL *)(v0 + 96));
  v7 = v6;
  if (!v3)
    goto LABEL_8;
  v8 = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if ((v6 & 1) != 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  if ((v7 & 1) == 0)
LABEL_9:
    *(_BYTE *)(v0 + 96) = 0;
LABEL_10:
  if (qword_1ECEDF858 != -1)
    dispatch_once(&qword_1ECEDF858, &unk_1E2943BB0);
  sub_18F1EA828(&v47, (uint64_t)"UseGyroInterruptCalForDtScale", &byte_1ECEDF840, 0);
  v10 = BYTE1(v47);
  if (qword_1ECEDEE68 != -1)
    dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
  v11 = qword_1ECEDEE60;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)v49 = byte_1ECEDF840;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = v47;
    LOWORD(v50[0]) = 1024;
    *(_DWORD *)((char *)v50 + 2) = v10;
    _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_DEFAULT, "UseInterruptCal,platformDefault,%u,overrideSet,%u,final,%u", buf, 0x14u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
    v40 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static BOOL CLGyro::useInterruptCalibrationForScaleFactor()", "CoreLocation: %s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  if (!v10)
  {
    *(_QWORD *)(v0 + 40) = 0x3FF0000000000000;
    goto LABEL_36;
  }
  v46 = CFSTR("name");
  v47 = CFSTR("gyro");
  v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v12, (uint64_t)&v47, (uint64_t)&v46, 1);
  v44 = CFSTR("IOPropertyMatch");
  v45 = v13;
  v15 = (const __CFDictionary *)(id)objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v14, (uint64_t)&v45, (uint64_t)&v44, 1);
  MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v15);
  CFProperty = (void *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("gyro-interrupt-calibration"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  IOObjectRelease(MatchingService);
  if (CFProperty)
  {
    v18 = CFGetTypeID(CFProperty);
    if (v18 == CFDataGetTypeID())
    {
      v23 = (_WORD *)objc_msgSend_bytes(CFProperty, v19, v20, v21, v22);
      v28 = objc_msgSend_length(CFProperty, v24, v25, v26, v27);
      if (v28 > 7)
      {
        if (*v23)
        {
          v31 = (unsigned __int16)v23[2];
          v32 = (unsigned __int16)v23[4];
          if (qword_1ECEDEE68 != -1)
            dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
          v33 = qword_1ECEDEE60;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240448;
            *(_DWORD *)v49 = v31;
            *(_WORD *)&v49[4] = 1026;
            *(_DWORD *)&v49[6] = v32;
            _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_INFO, "gyro-interrupt-calibration,dt,%{public}u,rate,%{public}u", buf, 0xEu);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE68 != -1)
              dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
            v42 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "CoreLocation: %s\n", v42);
            if (v42 != (char *)buf)
              free(v42);
          }
          sub_18F1F77DC();
          v34 = sub_18F1E19B0();
          if (!v32 || v34 == 74 || v34 == 75)
          {
            if (v31 >= 0x5DC)
              v32 = 200;
            else
              v32 = 800;
            if (qword_1ECEDEE68 != -1)
              dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
            v35 = qword_1ECEDEE60;
            if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)v49 = v32;
              _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_ERROR, "Manually set gyro-interrupt-calibration to %{public}u", buf, 8u);
            }
            if (sub_18F1FCA08(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE68 != -1)
                dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
              v43 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "CoreLocation: %s\n", v43);
              if (v43 != (char *)buf)
                free(v43);
            }
          }
          *(double *)(v0 + 40) = (double)v31 * 0.000001 * (double)v32;
          if (qword_1ECEDEE68 != -1)
            dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
          v36 = qword_1ECEDEE60;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_DEFAULT))
          {
            v37 = *(_QWORD *)(v0 + 40);
            *(_DWORD *)buf = 67240704;
            *(_DWORD *)v49 = v32;
            *(_WORD *)&v49[4] = 1026;
            *(_DWORD *)&v49[6] = v31;
            LOWORD(v50[0]) = 2050;
            *(_QWORD *)((char *)v50 + 2) = v37;
            _os_log_impl(&dword_18F1DC000, v36, OS_LOG_TYPE_DEFAULT, "dt at rate %{public}u Hz = %{public}u us, scaleFactor = %{public}f", buf, 0x18u);
          }
          if (!sub_18F1FCA08(115, 2))
            goto LABEL_34;
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE68 != -1)
            dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
          v38 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "CoreLocation: %s\n", v38);
          goto LABEL_71;
        }
        if (qword_1ECEDEE68 != -1)
          dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
        v39 = qword_1ECEDEE60;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v49 = 0;
          *(_WORD *)&v49[4] = 1026;
          *(_DWORD *)&v49[6] = 1;
          _os_log_impl(&dword_18F1DC000, v39, OS_LOG_TYPE_ERROR, "gyro-interrupt-calibration version (%{public}u) less than expected version (%{public}u)", buf, 0xEu);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_34;
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE68 == -1)
        {
LABEL_70:
          v38 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "CoreLocation: %s\n", v38);
LABEL_71:
          if (v38 != (char *)buf)
            free(v38);
LABEL_34:
          CFRelease(CFProperty);
          goto LABEL_36;
        }
      }
      else
      {
        if (qword_1ECEDEE68 != -1)
          dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
        v29 = qword_1ECEDEE60;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134349312;
          *(_QWORD *)v49 = v28;
          *(_WORD *)&v49[8] = 1026;
          v50[0] = 8;
          _os_log_impl(&dword_18F1DC000, v29, OS_LOG_TYPE_ERROR, "gyro-interrupt-calibration length %{public}lu less than expected length %{public}u", buf, 0x12u);
        }
        if (!sub_18F1FCA08(115, 0))
          goto LABEL_34;
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE68 == -1)
          goto LABEL_70;
      }
      dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
      goto LABEL_70;
    }
  }
  if (qword_1ECEDEE68 != -1)
    dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
  v30 = qword_1ECEDEE60;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_ERROR, "Cannot get gyro-interrupt-calibration property", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
    v41 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static BOOL CLGyro::getGyroDtScaleFactor(double &)", "CoreLocation: %s\n", v41);
    if (v41 != (char *)buf)
      free(v41);
  }
  if (CFProperty)
    goto LABEL_34;
LABEL_36:
  qword_1ECEDF848 = v0;
}

void sub_18F1E7C0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  sub_18F2A8438((uint64_t)(v1 + 10));
  sub_18F3DB8A0(v1);
  MEMORY[0x194001438](v1, 0x10F1C40A1449BFALL);
  _Unwind_Resume(a1);
}

void sub_18F1E7C88()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *global_queue;

  v0 = operator new();
  sub_18F1E5748((char *)v0);
  *(_QWORD *)v0 = &off_1E294BAC8;
  *(_DWORD *)(v0 + 152) = 0;
  *(_WORD *)(v0 + 156) = 0;
  *(_OWORD *)(v0 + 160) = xmmword_18F505D80;
  *(_DWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = *MEMORY[0x1E0C80C10];
  *(_QWORD *)(v0 + 216) = 0;
  *(_QWORD *)(v0 + 224) = 0;
  MEMORY[0x1940012AC](v0 + 104, ".log");
  v1 = dispatch_queue_create("com.apple.locationd.log.compression", 0);
  *(_QWORD *)(v0 + 208) = v1;
  global_queue = dispatch_get_global_queue(-32768, 0);
  dispatch_set_target_queue(v1, global_queue);
  qword_1ECEDFE30 = v0;
}

void sub_18F1E7D4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  sub_18F2A8438(v3);
  sub_18F494CAC(v1);
  MEMORY[0x194001438](v1, 0x10B3C4059D1D8F6);
  _Unwind_Resume(a1);
}

void sub_18F1E7D8C()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  int v3;

  v0 = (const __CFBoolean *)MGCopyAnswer();
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1))
      v3 = 4;
    else
      v3 = sub_18F1EF7E4();
    dword_1ECEDEF5C = v3;
    CFRelease(v1);
  }
  else
  {
    dword_1ECEDEF5C = sub_18F1EF7E4();
  }
}

void sub_18F1E7E0C(uint64_t a1)
{
  uint64_t v2;

  *(_BYTE *)(a1 + 8) = 0;
  bzero((void *)(a1 + 16), 0x20uLL);
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  bzero((void *)(a1 + 64), 0x30uLL);
  bzero(*(void **)(a1 + 120), 0x18uLL);
  bzero(*(void **)(a1 + 112), 0x3CuLL);
  v2 = *(_QWORD *)(a1 + 120);
  memset_pattern16((void *)v2, &unk_18F5071C0, 0xCuLL);
  memset_pattern16((void *)(v2 + 12), &unk_18F5071D0, 0xCuLL);
  *(_BYTE *)(a1 + 10) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = _Q0;
  bzero((void *)(a1 + 184), 0xCuLL);
  bzero((void *)(a1 + 156), 0xCuLL);
  bzero((void *)(a1 + 136), 0xCuLL);
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  bzero((void *)(a1 + 560), 0xCuLL);
  bzero((void *)(a1 + 576), 0x18uLL);
  *(_DWORD *)(a1 + 600) = 0;
  *(_QWORD *)(a1 + 608) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 616) = 0;
  sub_18F1E7F08((_QWORD *)(a1 + 320));
  sub_18F1E7F08((_QWORD *)(a1 + 400));
  sub_18F1E7F08((_QWORD *)(a1 + 480));
  sub_18F1E6174((_QWORD *)(a1 + 232));
}

void sub_18F1E7F08(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (void **)a1[5];
  v3 = a1[6];
  a1[9] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[6];
      v2 = (void **)(a1[5] + 8);
      a1[5] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 512;
LABEL_7:
    a1[8] = v6;
  }
  a1[2] = 0;
  a1[3] = 0;
}

void sub_18F1E8148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_18F1E816C(uint64_t a1)
{
  const char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *DictionaryOfClasses;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  const char *v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const char *v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  id v73;
  id obj;
  char v75;
  uint64_t v76;
  CLConnectionMessage *v77;
  CLConnectionMessage *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  CLConnectionMessage *v87[2];
  const __CFString *v88;
  uint64_t v89;
  _QWORD v90[2];
  _QWORD v91[2];
  _BYTE v92[128];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v73 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v87[0] = 0;
  v87[1] = 0;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  obj = *(id *)(a1 + 32);
  v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v83, (uint64_t)v92, 16);
  if (!v7)
    goto LABEL_38;
  v75 = 0;
  v76 = *(_QWORD *)v84;
LABEL_3:
  v8 = 0;
  while (1)
  {
    if (*(_QWORD *)v84 != v76)
      objc_enumerationMutation(obj);
    v9 = *(void **)(*((_QWORD *)&v83 + 1) + 8 * v8);
    v82 = 0;
    v90[0] = CFSTR("CMMotionActivityStartTime");
    v10 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend_timeIntervalSinceReferenceDate(v9, v3, v4, v5, v6);
    v91[0] = objc_msgSend_numberWithDouble_(v10, v11, v12, v13, v14);
    v90[1] = CFSTR("CMMotionActivityStopTime");
    v15 = (void *)MEMORY[0x1E0CB37E8];
    v19 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v16, 0, v17, v18);
    objc_msgSend_timeIntervalSinceReferenceDate(v19, v20, v21, v22, v23);
    v91[1] = objc_msgSend_numberWithDouble_(v15, v24, v25, v26, v27);
    v82 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v28, (uint64_t)v91, (uint64_t)v90, 2);
    sub_18F3515BC("kCLConnectionMessageMotionActivityQuery", &v82, &v81);
    v79 = v81;
    if (*((_QWORD *)&v81 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    CLConnectionClient::sendMessageSync();
    v31 = v80;
    v80 = 0uLL;
    v32 = (std::__shared_weak_count *)v87[1];
    *(_OWORD *)v87 = v31;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (*((_QWORD *)&v80 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
      }
    }
    if (*((_QWORD *)&v79 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v79 + 1) + 16))(*((_QWORD *)&v79 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v79 + 1));
      }
    }
    v39 = (void *)MEMORY[0x1E0C99E60];
    v40 = objc_opt_class();
    v41 = objc_opt_class();
    v42 = objc_opt_class();
    v43 = objc_opt_class();
    v3 = (char *)objc_msgSend_setWithObjects_(v39, v44, v40, v45, v46, v41, v42, v43, 0);
    if (v87[0]
      && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v87[0], (NSSet *)v3)) != 0
      && (v4 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v3, (uint64_t)CFSTR("CMMotionActivityDataArray"), v5, v6)) != 0)
    {
      objc_msgSend_addObjectsFromArray_(v73, v3, v4, v5, v6);
      objc_msgSend_removeObjectAtIndex_(*(void **)(a1 + 40), v48, 0, v49, v50);
      v51 = 1;
    }
    else
    {
      v51 = 0;
      v75 = 1;
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (!v51)
      break;
    if (++v8 == v7)
    {
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v83, (uint64_t)v92, 16);
      if (v7)
        goto LABEL_3;
      break;
    }
  }
  if ((v75 & 1) == 0)
  {
LABEL_38:
    v88 = CFSTR("CMMotionActivityDataArray");
    v89 = objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v3, (uint64_t)v73, v5, v6);
    *(_QWORD *)&v80 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v55, (uint64_t)&v89, (uint64_t)&v88, 1);
    sub_18F352BEC("kCLConnectionMessageMotionActivityQuery", &v80, &v81);
    v56 = v81;
    v81 = 0uLL;
    v57 = (std::__shared_weak_count *)v87[1];
    *(_OWORD *)v87 = v56;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }

  v64 = *(void **)(a1 + 48);
  v77 = v87[0];
  v78 = v87[1];
  if (v87[1])
  {
    v65 = (unint64_t *)((char *)v87[1] + 8);
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  objc_msgSend__handleQueryResponse_onQueue_withHandler_(v64, v63, (uint64_t)&v77, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v67 = (std::__shared_weak_count *)v78;
  if (v78)
  {
    v68 = (unint64_t *)((char *)v78 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)v87[1];
  if (v87[1])
  {
    v71 = (unint64_t *)((char *)v87[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
}

void sub_18F1E865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_18F2A8438((uint64_t)&a37);
  _Unwind_Resume(a1);
}

double sub_18F1E86BC(_QWORD *a1, unsigned int a2, uint64_t *a3)
{
  NSObject *v5;
  uint64_t v6;
  int v7;
  char v8;
  double v9;
  char v10;
  double v11;
  BOOL v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  NSObject *v18;
  char *v19;
  uint64_t *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v30;
  char *v31;
  __int128 buf;
  void *v33;
  void *v34;
  uint64_t v35;
  _BYTE v36[12];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a2 <= 1)
  {
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
    v5 = qword_1EE16D6C0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_INFO))
    {
      v6 = *a3;
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "Setting pressure data update interval to %{public}f", (uint8_t *)&buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
      v30 = *a3;
      *(_DWORD *)v36 = 134349056;
      *(_QWORD *)&v36[4] = v30;
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLPressure::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v31);
      if (v31 != (char *)&buf)
        free(v31);
    }
    v7 = 0;
    v8 = 1;
    v9 = 0.0;
    do
    {
      v10 = v8;
      v11 = sub_18F202D88((uint64_t)a1, v7);
      if (v9 == 0.0 || (v11 > 0.0 ? (v12 = v11 < v9) : (v12 = 0), v12))
        v9 = v11;
      v8 = 0;
      v7 = 1;
    }
    while ((v10 & 1) != 0);
    a1[7] = 0;
    if (a1[5])
    {
      v13 = sub_18F202D88((uint64_t)a1, 1);
      v14 = a1[5];
      v15 = *(NSObject **)(v14 + 8);
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      if (v13 == 0.0)
        v16 = sub_18F2073FC;
      else
        v16 = sub_18F1E62B8;
      *((_QWORD *)&buf + 1) = 3221225472;
      v33 = v16;
      v34 = &unk_1E2955738;
      v35 = v14;
      dispatch_sync(v15, &buf);
    }
    v20 = a1 + 14;
    if (!a1[14] && (sub_18F1F781C() & 0x10) != 0)
    {
      v21 = (_QWORD *)sub_18F1E0F30();
      *(_QWORD *)v36 = 0x3100000020;
      v36[8] = 0;
      sub_18F1E9BC8(v21, (uint64_t)v36, (uint64_t *)&buf);
      sub_18F346DC8((uint64_t)(a1 + 14), &buf);
      v22 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      sub_18F203148(a1[14], (uint64_t)sub_18F2027F4, (uint64_t)a1);
    }
    v25 = rint(v9 * 1000000.0);
    if (v9 < 0.0)
      v26 = 0;
    else
      v26 = (uint64_t)v25;
    sub_18F203AF8(*v20, v26);
    v27 = sub_18F203A68(*v20, v9);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
    v28 = qword_1EE16D6C0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 134349056;
      *(_QWORD *)((char *)&buf + 4) = v27;
      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_INFO, "Setting pressure batch interval to: %{public}ld us", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_18F1FCA08(115, 2))
      return v9;
    bzero(&buf, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CFTimeInterval CLPressure::setPressureUpdateInterval()", "CoreLocation: %s\n", v19);
LABEL_53:
    if (v19 != (char *)&buf)
      free(v19);
    return v9;
  }
  if (qword_1EE16D6C8 != -1)
    dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
  v18 = qword_1EE16D6C0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_FAULT))
  {
    LODWORD(buf) = 67240192;
    DWORD1(buf) = a2;
    _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_FAULT, "Unrecognized pressure notification %{public}d", (uint8_t *)&buf, 8u);
  }
  v9 = 0.0;
  if (sub_18F1FCA08(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
    *(_DWORD *)v36 = 67240192;
    *(_DWORD *)&v36[4] = a2;
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLPressure::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v19);
    goto LABEL_53;
  }
  return v9;
}

uint64_t sub_18F1E8C74(uint64_t a1, const char *a2, int a3, char a4)
{
  uint64_t v8;
  char *v9;
  int v10;
  pthread_mutexattr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E2948F38;
  v8 = operator new();
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_BYTE *)(v8 + 88) = a4;
  *(_QWORD *)(v8 + 96) = 0;
  if (a2)
    v9 = strdup(a2);
  else
    v9 = 0;
  *(_QWORD *)(v8 + 104) = v9;
  *(_QWORD *)(v8 + 64) = 0;
  if ((byte_1ECEDFE18 & 1) == 0)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_1ECEDFE10);
    qword_1ECEDFE20 = 1000000000 * (unint64_t)*(unsigned int *)algn_1ECEDFE14 / dword_1ECEDFE10;
    qword_1ECEDFE28 = qword_1ECEDFE20;
    byte_1ECEDFE18 = 1;
  }
  pthread_mutexattr_init(&v12);
  if (a3)
    v10 = 2;
  else
    v10 = 0;
  pthread_mutexattr_settype(&v12, v10);
  pthread_mutex_init(*(pthread_mutex_t **)(a1 + 8), &v12);
  pthread_mutexattr_destroy(&v12);
  return a1;
}

void sub_18F1E8DB8()
{
  uint64_t v0;
  _opaque_pthread_t *v1;
  NSObject *v2;
  char *v3;
  NSObject *v4;
  char *v5;
  _QWORD v6[4];
  char v7;
  int v8;
  sched_param v9;
  uint8_t buf[1640];
  pthread_attr_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_DWORD *)(v0 + 48) = 0;
  qword_1ECEDFE08 = v0;
  v8 = 0;
  pthread_attr_init(&v11);
  v1 = pthread_self();
  if (pthread_getschedparam(v1, &v8, &v9))
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
    v2 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_FAULT, "Could not get parent thread parameters", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
      LOWORD(v6[0]) = 0;
      v3 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static void CLMotionCore::create()", "CoreLocation: %s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
  }
  else
  {
    pthread_attr_setschedparam(&v11, &v9);
  }
  v6[0] = 0;
  v6[1] = 0;
  v6[2] = qword_1ECEDFE08 + 8;
  v6[3] = &unk_1ECEDEF28;
  v7 = 0;
  pthread_create((pthread_t *)(qword_1ECEDFE08 + 8), &v11, (void *(__cdecl *)(void *))sub_18F1EB578, v6);
  sub_18F20C92C((uint64_t)v6);
  pthread_dependency_wait_np();
  if (!*(_QWORD *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
    v4 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Motion runloop ref still not set!", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static void CLMotionCore::create()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

void sub_18F1E9118(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  uint64_t v4;
  const void *v5;
  char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  const __CFURL *v23;
  const __CFURL *v24;
  const __CFString *v25;
  const __CFString *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[3];

  v2 = (const char *)a1;
  v29[2] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
LABEL_7:
      v4 = CFCopyUserName();
      goto LABEL_8;
    }
    v2 = *(const char **)a1;
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    goto LABEL_7;
  }
  v4 = (uint64_t)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0x8000100u);
LABEL_8:
  v5 = (const void *)v4;
  sub_18F1F77DC();
  if (sub_18F375B58() && (v6 = getenv("_SET_CLPERSISTENTSTORE_TEST_PATH")) != 0)
  {
    v10 = (void *)MEMORY[0x1E0CB3940];
    v29[0] = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v7, (uint64_t)v6, v8, v9);
    v29[1] = v5;
    v13 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v11, (uint64_t)v29, 2, v12);
    v17 = (void *)objc_msgSend_pathWithComponents_(v10, v14, v13, v15, v16);
    v22 = (char *)objc_msgSend_UTF8String(v17, v18, v19, v20, v21);
    sub_18F270374(&v27, v22);
    *(_OWORD *)a2 = v27;
    a2[2] = v28;
  }
  else if (v5)
  {
    v23 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
    v24 = v23;
    if (v23)
    {
      v25 = CFURLCopyFileSystemPath(v23, kCFURLPOSIXPathStyle);
      v26 = v25;
      if (v25)
      {
        sub_18F1ED06C(v25, (uint64_t)&v27);
        *(_OWORD *)a2 = v27;
        a2[2] = v28;
        CFRelease(v26);
      }
      CFRelease(v24);
    }
    CFRelease(v5);
  }
}

void sub_18F1E9290(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_18F1E92C0(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F1E92E4(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F1E9308(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F1E932C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E294C238;

  return a1;
}

double sub_18F1E9364(uint64_t a1, int a2, _QWORD *a3)
{
  NSObject *v3;
  double v4;
  char *v5;
  NSObject *v8;
  double v9;
  double v10;
  uint64_t v11;
  char *v13;
  uint8_t buf[4];
  double v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE48 != -1)
      dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
    v3 = qword_1ECEDEE40;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    v4 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE48 != -1)
        dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  else
  {
    v4 = 0.0;
    if (sub_18F1F729C(a1))
    {
      if (qword_1ECEDEE48 != -1)
        dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
      v8 = qword_1ECEDEE40;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_INFO))
      {
        v9 = *(double *)a3;
        *(_DWORD *)buf = 134349056;
        v15 = v9;
        _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "Setting accelerometer update interval to %{public}f", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE48 != -1)
          dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
        v13 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      v10 = rint(*(double *)a3 * 1000000.0);
      if (*(double *)a3 < 0.0)
        v11 = 0;
      else
        v11 = (uint64_t)v10;
      sub_18F203AF8(*(_QWORD *)(a1 + 40), v11);
      return *(double *)a3;
    }
  }
  return v4;
}

double sub_18F1E9694(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  NSObject *v9;
  double v10;
  char *v12;
  uint8_t buf[4];
  double v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE48 != -1)
      dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
    v4 = qword_1ECEDEE40;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v14) = a2;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unrecognized notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE48 != -1)
        dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    v5 = 0.0;
    if (sub_18F1F729C(a1))
    {
      if (qword_1ECEDEE48 != -1)
        dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
      v9 = qword_1ECEDEE40;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_INFO))
      {
        v10 = *a3;
        *(_DWORD *)buf = 134349056;
        v14 = v10;
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "Setting batch interval to %{public}f", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE48 != -1)
          dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
        v12 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
      sub_18F203A68(*(_QWORD *)(a1 + 40), *a3);
      return *a3;
    }
  }
  return v5;
}

void sub_18F1E9BC8(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;

  v13 = a1;
  sub_18F346E34((int *)a2, (int *)(a2 + 4), (char *)(a2 + 8), (uint64_t *)&v13, a3);
  v5 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_18F1E9C88(a1, &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_18F1E9C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_18F2A8438((uint64_t)&a9);
  sub_18F2A8438(v9);
  _Unwind_Resume(a1);
}

void sub_18F1E9C88(_QWORD *a1, _QWORD *a2)
{
  CFRunLoopRef Current;
  NSObject *v5;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  NSObject *v23;
  NSObject *v24;
  NSObject *v25;
  char *v26;
  __int128 v27;
  uint8_t buf[8];
  _BYTE v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      goto LABEL_41;
    while (1)
    {
      v23 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2082;
        *(_QWORD *)&v29[12] = "assert";
        *(_WORD *)&v29[20] = 2081;
        *(_QWORD *)&v29[22] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
        _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] addDevice should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      }
      v24 = off_1ECEDEE90;
      if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2082;
        *(_QWORD *)&v29[12] = "assert";
        *(_WORD *)&v29[20] = 2081;
        *(_QWORD *)&v29[22] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
        _os_signpost_emit_with_name_impl(&dword_18F1DC000, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] addDevice should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] addDevice should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      }
      v25 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v29 = 2082;
        *(_QWORD *)&v29[2] = "";
        *(_WORD *)&v29[10] = 2082;
        *(_QWORD *)&v29[12] = "assert";
        *(_WORD *)&v29[20] = 2081;
        *(_QWORD *)&v29[22] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
        _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] addDevice should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }
      abort_report_np();
      __break(1u);
LABEL_41:
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
  v5 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(*a2 + 16);
    v7 = *(_DWORD *)(*a2 + 20);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = v7;
    *(_WORD *)v29 = 1026;
    *(_DWORD *)&v29[2] = v6;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Adding new Device with usage pair {%{public}d, %{public}d}", buf, 0xEu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v26 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::addDevice(std::shared_ptr<CLIoHidInterface::Device>)", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
  v8 = *(_OWORD *)a2;
  v9 = a2[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a1[3];
  v13 = (char *)a1[2];
  if ((unint64_t)v13 >= v12)
  {
    v15 = (char *)a1[1];
    v16 = (v13 - v15) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      sub_18F26F8C0();
    v27 = v8;
    if ((uint64_t)(v12 - (_QWORD)v15) >> 3 > v17)
      v17 = (uint64_t)(v12 - (_QWORD)v15) >> 3;
    if (v12 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v18 = 0xFFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    *(_QWORD *)&v29[24] = a1 + 3;
    if (v18 >> 60)
      sub_18F26F97C();
    v19 = (char *)operator new(16 * v18);
    v20 = &v19[16 * v16];
    *(_OWORD *)v20 = v27;
    v14 = v20 + 16;
    if (v13 == v15)
    {
      v22 = vdupq_n_s64((unint64_t)v13);
    }
    else
    {
      do
      {
        v21 = *((_OWORD *)v13 - 1);
        v13 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
      }
      while (v13 != v15);
      v22 = *(int64x2_t *)(a1 + 1);
      v12 = a1[3];
    }
    a1[1] = v20;
    a1[2] = v14;
    *(int64x2_t *)v29 = v22;
    a1[3] = &v19[16 * v18];
    *(_QWORD *)&v29[16] = v12;
    *(_QWORD *)buf = v22.i64[0];
    sub_18F1EA1D4((uint64_t)buf);
  }
  else
  {
    *(_QWORD *)v13 = v8;
    *((_QWORD *)v13 + 1) = v9;
    v14 = v13 + 16;
    a1[2] = v13 + 16;
  }
  a1[2] = v14;
}

void sub_18F1EA1B4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F1EA1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 16;
    v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_18F1EA230(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  *(_QWORD *)a1 = &off_1E294C200;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = -1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = objc_opt_new();
  return a1;
}

uint64_t sub_18F1EA294(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  void *v16;
  uint64_t v17;
  char *v19;
  char *v20;
  _OWORD buf[102];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F1E61EC(a1, (uint64_t)"CLCompass", 2);
  *(_QWORD *)v2 = &off_1E294BB38;
  *(_WORD *)(v2 + 28) = 0;
  *(_QWORD *)(v2 + 32) = 0x3F847AE140000000;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_BYTE *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 0;
  LOBYTE(buf[0]) = 0;
  sub_18F1EA828((_BYTE *)(v2 + 80), (uint64_t)"ForceResetCompassOnChargingEvent", buf, 0);
  LOBYTE(buf[0]) = 0;
  sub_18F1EA828((_BYTE *)(a1 + 83), (uint64_t)"CompassForceCoverAttach", buf, 0);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  v3 = sub_18F204AE4();
  v4 = *(_QWORD *)(v3 + 24);
  v5 = *(std::__shared_weak_count **)(v3 + 32);
  *(_QWORD *)&buf[0] = v4;
  *((_QWORD *)&buf[0] + 1) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_18F1EE944(v4, "LogCompass", (BOOL *)(a1 + 29));
  v9 = v8;
  if (!v5)
    goto LABEL_8;
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_8:
    if ((v8 & 1) != 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if ((v9 & 1) == 0)
LABEL_9:
    *(_BYTE *)(a1 + 29) = 0;
LABEL_10:
  if (qword_1EE16E910 != -1)
    dispatch_once(&qword_1EE16E910, &unk_1E2953BA8);
  *(double *)(a1 + 72) = (*(double (**)(uint64_t))(*(_QWORD *)qword_1EE16E900 + 56))(qword_1EE16E900);
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E2954AE8);
  v12 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a1 + 72);
    LODWORD(buf[0]) = 134217984;
    *(_QWORD *)((char *)buf + 4) = v13;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEBUG, "Retrieved cached cover state timestamp,%f", (uint8_t *)buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2954AE8);
    v19 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLCompass::CLCompass()", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  v14 = (_QWORD *)operator new();
  *v14 = off_1E294C238;
  *v14 = &off_1E294C858;
  v14[1] = 0;
  v14[2] = sub_18F4607C0;
  v14[3] = a1;
  *(_QWORD *)(a1 + 88) = v14;
  if (qword_1EE16E910 != -1)
    dispatch_once(&qword_1EE16E910, &unk_1E2953BA8);
  sub_18F1F4F0C(qword_1EE16E900, 0, *(_QWORD *)(a1 + 88), -1.0);
  if (qword_1EE16D698 != -1)
    dispatch_once(&qword_1EE16D698, &unk_1E2954AE8);
  v15 = qword_1EE16D690;
  if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEBUG, "Registered for cover state notifications", (uint8_t *)buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2954AE8);
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLCompass::CLCompass()", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
  v16 = (void *)sub_18F20CA68();
  sub_18F1DF558((uint64_t)sub_18F460A4C, a1, v16, buf);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)&buf[0];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return a1;
}

void sub_18F1EA798(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1[15];
  v1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v1[5];
  v1[5] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_18F3DB8A0(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_18F1EA828(_BYTE *a1, uint64_t a2, _BYTE *a3, char a4)
{
  NSObject *v6;
  char *v8;
  uint8_t buf[4];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = *a3;
  a1[2] = a4;
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E29560E0);
  v6 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v10 = a2;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_INFO, "motion default ignored,'%{public}s'.", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E29560E0);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLMotionDefaultsWrite<BOOL>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = BOOL]", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  return a1;
}

uint64_t sub_18F1EA9E8(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char *v9;
  __int128 buf;
  uint64_t *(*v11)(uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954568);
  v2 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    sub_18F204AE4();
    v3 = *(_QWORD *)_CFGetProgname();
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_INFO, "%{public}s is disabling power conservation for parallax.", (uint8_t *)&buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954568);
    sub_18F204AE4();
    _CFGetProgname();
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionService3AxisDynamicGyro::stop()", "CoreLocation: %s\n", v9);
    if (v9 != (char *)&buf)
      free(v9);
  }
  sub_18F209F74((uint64_t)(a1 + 25));
  sub_18F1EAC4C(a1 + 25);
  if (a1[36])
  {
    v4 = sub_18F1EF73C();
    v5 = a1[36];
    v6 = sub_18F204AE4();
    *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
    *((_QWORD *)&buf + 1) = 3221225472;
    v11 = sub_18F1F5EE0;
    v12 = &unk_1E2956E98;
    v15 = 0;
    v13 = v4;
    v14 = v5;
    sub_18F1F5E28(v6, (uint64_t)&buf);
    v7 = a1[36];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    a1[36] = 0;
  }
  sub_18F209DDC(a1 + 25);
  result = a1[35];
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    a1[35] = 0;
  }
  return result;
}

_QWORD *sub_18F1EAC4C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];
  int v6;

  if (result[2])
  {
    v1 = result;
    v2 = sub_18F1EF73C();
    v3 = v1[2];
    v4 = sub_18F204AE4();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_18F1F5EE0;
    v5[3] = &unk_1E2956E98;
    v6 = 0;
    v5[4] = v2;
    v5[5] = v3;
    sub_18F1F5E28(v4, (uint64_t)v5);
    result = (_QWORD *)v1[2];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[2] = 0;
  }
  return result;
}

long double sub_18F1EACE4(double *a1)
{
  double v1;

  v1 = a1[3];
  return -atan2(a1[1] * (a1[2] + a1[2]) - *a1 * (v1 + v1), 1.0 - a1[1] * (a1[1] + a1[1]) - v1 * (v1 + v1));
}

long double sub_18F1EAD24(double *a1)
{
  double v1;

  v1 = a1[2];
  return -atan2(a1[1] * (a1[3] + a1[3]) - *a1 * (v1 + v1), 1.0 - a1[1] * (a1[1] + a1[1]) - v1 * (v1 + v1));
}

_QWORD *sub_18F1EB0F0(_QWORD *a1)
{
  *a1 = &off_1E294A890;
  a1[20] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 23);
  a1[11] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 14);
  a1[2] = &off_1E294AC98;
  sub_18F3CBA50(a1 + 5);
  return a1;
}

uint64_t sub_18F1EB148(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t sub_18F1EB578(uint64_t a1)
{
  void *v2;
  const char **v3;
  BOOL v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *info;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t *v14;
  _opaque_pthread_t *v15;
  int v16;
  NSObject *v17;
  char *v18;
  int sched_priority;
  int priority_max;
  _opaque_pthread_t *v21;
  _opaque_pthread_t *v22;
  const __CFAllocator *v23;
  __CFRunLoopSource *v24;
  NSObject *v25;
  const __CFString *v26;
  int v27;
  NSObject *v28;
  __CFRunLoopObserver *v29;
  __CFRunLoopObserver *v30;
  CFMutableArrayRef Mutable;
  CFAbsoluteTime Current;
  __CFRunLoopTimer *v33;
  NSObject *v34;
  char *v36;
  char *v37;
  char *v38;
  int v39;
  sched_param v40;
  int v41;
  int v42;
  int v43;
  CFRunLoopSourceContext context;
  CFRunLoopObserverContext buf[40];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v2 = (void *)MEMORY[0x194001B4C]();
  v3 = (const char **)_CFGetProgname();
  v4 = strcmp(*v3, "locationd") == 0;
  *(_BYTE *)(qword_1ECEDFE08 + 16) = v4;
  pthread_setname_np("com.apple.CoreMotion.MotionThread");
  if (!*(_BYTE *)(qword_1ECEDFE08 + 16))
  {
    v12 = (char *)operator new();
    sub_18F20CC1C(v12, CFSTR("com.apple.CoreMotion"), 0);
    buf[0].version = (CFIndex)v12;
    v13 = (_QWORD *)operator new();
    *v13 = &off_1E29527A0;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v12;
    buf[0].info = v13;
    sub_18F346DC8(qword_1ECEDFE08 + 24, (__int128 *)&buf[0].version);
    info = (std::__shared_weak_count *)buf[0].info;
    if (!buf[0].info)
      goto LABEL_16;
    v14 = (unint64_t *)((char *)buf[0].info + 8);
    do
      v11 = __ldaxr(v14);
    while (__stlxr(v11 - 1, v14));
    goto LABEL_14;
  }
  sub_18F3796B4(buf);
  v5 = *(_OWORD *)&buf[0].version;
  buf[0].version = 0;
  buf[0].info = 0;
  v6 = *(std::__shared_weak_count **)(qword_1ECEDFE08 + 32);
  *(_OWORD *)(qword_1ECEDFE08 + 24) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  info = (std::__shared_weak_count *)buf[0].info;
  if (buf[0].info)
  {
    v10 = (unint64_t *)((char *)buf[0].info + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
LABEL_14:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))info->__on_zero_shared)(info);
      std::__shared_weak_count::__release_weak(info);
    }
  }
LABEL_16:
  v41 = 0;
  if ((sub_18F1E4DFC(*(_QWORD *)(qword_1ECEDFE08 + 24), "MotionThreadPriority", &v41) & 1) == 0)
    v41 = -1;
  v39 = 0;
  v15 = pthread_self();
  v16 = pthread_getschedparam(v15, &v39, &v40);
  if (v16)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
    v17 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      LODWORD(buf[0].version) = 67240192;
      HIDWORD(buf[0].version) = v16;
      _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "Could not get scheduling parameters for motion thread, error = %{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
      LODWORD(context.version) = 67240192;
      HIDWORD(context.version) = v16;
      v18 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  else
  {
    sched_priority = v41;
    if (v41 <= 0)
    {
      priority_max = sched_get_priority_max(v39);
      sched_priority = v40.sched_priority;
      if (priority_max > v40.sched_priority)
        sched_priority = priority_max;
    }
    v40.sched_priority = sched_priority;
    v21 = pthread_self();
    pthread_setschedparam(v21, v39, &v40);
    v22 = pthread_self();
    pthread_getschedparam(v22, &v39, &v40);
  }
  *(_QWORD *)qword_1ECEDFE08 = CFRunLoopGetCurrent();
  sub_18F20C92C(a1);
  pthread_dependency_fulfill_np();
  memset(&context, 0, sizeof(context));
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v24 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &context);
  if (!v24)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
    v25 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].version) = 0;
      _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_FAULT, "could not create runloop source", (uint8_t *)buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
      LOWORD(v42) = 0;
      v38 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v38);
      if (v38 != (char *)buf)
        free(v38);
    }
  }
  v26 = (const __CFString *)*MEMORY[0x1E0C9B270];
  CFRunLoopAddSource(*(CFRunLoopRef *)qword_1ECEDFE08, v24, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
  v27 = _CFRunLoopSetPerCalloutAutoreleasepoolEnabled();
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
  v28 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0].version) = 67174657;
    HIDWORD(buf[0].version) = v27;
    _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEBUG, "_CFRunLoopSetPerCalloutAutoreleasepoolEnabled() returned a value of, %{private}d.", (uint8_t *)buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
    v42 = 67174657;
    v43 = v27;
    v36 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  if (v27)
  {
    v29 = 0;
    v30 = 0;
    Mutable = 0;
  }
  else
  {
    Mutable = CFArrayCreateMutable(0, 0, 0);
    buf[0].version = 0;
    buf[0].info = Mutable;
    buf[0].retain = (const void *(__cdecl *)(const void *))MEMORY[0x1E0C98BD0];
    buf[0].release = (void (__cdecl *)(const void *))MEMORY[0x1E0C98BC0];
    buf[0].copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x1E0C98350];
    v30 = CFRunLoopObserverCreate(0, 1uLL, 1u, -2147483647, (CFRunLoopObserverCallBack)sub_18F3DE970, buf);
    v29 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 0x7FFFFFFFLL, (CFRunLoopObserverCallBack)sub_18F3DE970, buf);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1ECEDFE08, v30, v26);
    CFRunLoopAddObserver(*(CFRunLoopRef *)qword_1ECEDFE08, v29, v26);
  }
  *(_QWORD *)(qword_1ECEDFE08 + 40) = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v33 = CFRunLoopTimerCreateWithHandler(v23, Current + 1.0, 5.0, 0, 0, &unk_1E29437C0);
  CFRunLoopAddTimer(*(CFRunLoopRef *)qword_1ECEDFE08, v33, v26);
  objc_autoreleasePoolPop(v2);
  CFRunLoopRun();
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
  v34 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf[0].version) = 0;
    _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_FAULT, "Motion thread exiting", (uint8_t *)buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2954FA8);
    LOWORD(context.version) = 0;
    v37 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)", "CoreLocation: %s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
  }
  if (v33)
  {
    CFRunLoopRemoveTimer(*(CFRunLoopRef *)qword_1ECEDFE08, v33, v26);
    CFRelease(v33);
  }
  if (v29)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1ECEDFE08, v29, v26);
    CFRelease(v29);
  }
  if (v30)
  {
    CFRunLoopRemoveObserver(*(CFRunLoopRef *)qword_1ECEDFE08, v30, v26);
    CFRelease(v30);
  }
  if (Mutable)
    CFRelease(Mutable);
  if (v24)
  {
    CFRunLoopRemoveSource(*(CFRunLoopRef *)qword_1ECEDFE08, v24, v26);
    CFRelease(v24);
  }
  return 0;
}

void sub_18F1EBEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_18F1EBF28()
{
  NSObject *v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  dispatch_time_t v4;
  NSObject *v5;
  char *v6;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
  v0 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_DEBUG, "Ping timer fired, resetting watchdog", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  v1 = qword_1ECEDFE08;
  v2 = *(NSObject **)(qword_1ECEDFE08 + 40);
  if (v2
    || (v3 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, MEMORY[0x1E0C80D38]),
        *(_QWORD *)(qword_1ECEDFE08 + 40) = v3,
        dispatch_source_set_event_handler(v3, &unk_1E2954CA8),
        dispatch_resume(*(dispatch_object_t *)(qword_1ECEDFE08 + 40)),
        v1 = qword_1ECEDFE08,
        (v2 = *(NSObject **)(qword_1ECEDFE08 + 40)) != 0))
  {
    ++*(_DWORD *)(v1 + 48);
    v4 = dispatch_time(0, 60000000000);
    dispatch_source_set_timer(v2, v4, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
    v5 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_ERROR, "Failed to create watchdog timer", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2944FA0);
      v6 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

void sub_18F1EC488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18F1EC6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1EC720(uint64_t a1, const __CFString *a2, char a3, uint64_t a4)
{
  _QWORD *v8;
  void **v9;
  const char *v10;
  passwd *v11;
  NSObject *v12;
  __int128 *v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  const std::string::value_type *p_p;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  uint64_t v25;
  std::string *v26;
  __int128 v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  uint64_t v37;
  passwd *v38;
  passwd *v39;
  uid_t pw_uid;
  gid_t pw_gid;
  BOOL v42;
  __int128 *v44;
  std::string *v45;
  void *v46[2];
  uint64_t v47;
  void *__p;
  std::string::size_type v49;
  unsigned __int8 v50;
  void *v51;
  std::string::size_type v52;
  unsigned __int8 v53;
  void *__dst[2];
  uint64_t v55;
  std::string v56;
  __int128 v57;
  uint64_t v58;
  std::string v59;
  _QWORD v60[2];
  std::string buf[68];
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v8 = sub_18F1ECEA0((_QWORD *)a1);
  *v8 = &off_1E2949710;
  *((_BYTE *)v8 + 16) = 0;
  *(_OWORD *)(v8 + 3) = 0u;
  v9 = (void **)(v8 + 3);
  *(_OWORD *)(v8 + 5) = 0u;
  *(_OWORD *)(v8 + 7) = 0u;
  v8[10] = a4;
  v8[11] = -1;
  *((_BYTE *)v8 + 96) = a3;
  sub_18F1ECEA0(v8 + 13);
  *(_QWORD *)(a1 + 104) = &off_1E294BBC8;
  sub_18F1ECEA0((_QWORD *)(a1 + 120));
  *(_QWORD *)(a1 + 120) = &off_1E294BBC8;
  *(_QWORD *)(a1 + 72) = a2;
  CFRetain(a2);
  CFRetain(*(CFTypeRef *)(a1 + 80));
  sub_18F1ED06C(*(const __CFString **)(a1 + 80), (uint64_t)&v57);
  if (v58 >= 0)
    v10 = (const char *)&v57;
  else
    v10 = (const char *)v57;
  v11 = getpwnam(v10);
  if (v11)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)&v11->pw_uid;
  }
  else
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
    v12 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v13 = &v57;
      if (v58 < 0)
        v13 = (__int128 *)v57;
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "could not read user %{public}s uid/gid", (uint8_t *)buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2953048);
      v44 = &v57;
      if (v58 < 0)
        v44 = (__int128 *)v57;
      LODWORD(v59.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
      v45 = (std::string *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CLPreferences::CLPreferences(CFStringRef, BOOL, CFStringRef)", "CoreLocation: %s\n", (const char *)v45);
      if (v45 != buf)
        free(v45);
    }
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_18F26F9A4(__dst, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)__dst = v57;
    v55 = v58;
  }
  sub_18F1E9118((uint64_t)__dst, &v56);
  v14 = std::string::append(&v56, "/Library/Preferences/");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_18F1ED06C(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0)
    v16 = (const std::string::value_type *)&v51;
  else
    v16 = (const std::string::value_type *)v51;
  if ((v53 & 0x80u) == 0)
    v17 = v53;
  else
    v17 = v52;
  v18 = std::string::append(&v59, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_18F270374(&__p, ".plist");
  if ((v50 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v50 & 0x80u) == 0)
    v21 = v50;
  else
    v21 = v49;
  v22 = std::string::append(buf, p_p, v21);
  v23 = v22->__r_.__value_.__r.__words[0];
  v60[0] = v22->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v9);
  v25 = v60[0];
  *(_QWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 39) = *(_QWORD *)((char *)v60 + 7);
  *(_BYTE *)(a1 + 47) = v24;
  if ((char)v50 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if ((char)v53 < 0)
    operator delete(v51);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst[0]);
  if (SHIBYTE(v58) < 0)
  {
    sub_18F26F9A4(v46, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    *(_OWORD *)v46 = v57;
    v47 = v58;
  }
  sub_18F1E5474((uint64_t)v46, &v56);
  v26 = std::string::append(&v56, "/");
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  sub_18F1ED06C(a2, (uint64_t)&v51);
  if ((v53 & 0x80u) == 0)
    v28 = (const std::string::value_type *)&v51;
  else
    v28 = (const std::string::value_type *)v51;
  if ((v53 & 0x80u) == 0)
    v29 = v53;
  else
    v29 = v52;
  v30 = std::string::append(&v59, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  sub_18F270374(&__p, ".plist");
  if ((v50 & 0x80u) == 0)
    v32 = (const std::string::value_type *)&__p;
  else
    v32 = (const std::string::value_type *)__p;
  if ((v50 & 0x80u) == 0)
    v33 = v50;
  else
    v33 = v49;
  v34 = std::string::append(buf, v32, v33);
  v35 = v34->__r_.__value_.__r.__words[0];
  v60[0] = v34->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
  v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v37 = v60[0];
  *(_QWORD *)(a1 + 48) = v35;
  *(_QWORD *)(a1 + 56) = v37;
  *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v60 + 7);
  *(_BYTE *)(a1 + 71) = v36;
  if ((char)v50 < 0)
    operator delete(__p);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if ((char)v53 < 0)
    operator delete(v51);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v47) < 0)
    operator delete(v46[0]);
  v38 = getpwnam("root");
  v42 = 0;
  if (v38)
  {
    v39 = v38;
    pw_uid = v38->pw_uid;
    if (pw_uid == getuid())
    {
      pw_gid = v39->pw_gid;
      if (pw_gid == getgid())
        v42 = 1;
    }
  }
  *(_BYTE *)(a1 + 16) = v42;
  sub_18F1E4D5C(a1);
  if (SHIBYTE(v58) < 0)
    operator delete((void *)v57);
  return a1;
}

void sub_18F1ECD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void **v66;

  if (a48 < 0)
    operator delete(__p);
  sub_18F1EDCB4(v65);
  sub_18F1EDCB4(v64);
  if (*(char *)(v63 + 71) < 0)
    operator delete(*(void **)(v63 + 48));
  if (*(char *)(v63 + 47) < 0)
    operator delete(*v66);
  sub_18F1EDCB4((_QWORD *)v63);
  _Unwind_Resume(a1);
}

_QWORD *sub_18F1ECEA0(_QWORD *a1)
{
  CFMutableDictionaryRef Mutable;
  NSObject *v3;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E2949C70;
  a1[1] = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  a1[1] = Mutable;
  if (!Mutable)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v3 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  return a1;
}

BOOL sub_18F1ED06C@<W0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_18F1ED0D8(a1, a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_18F1ED0BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F1ED0D8(const __CFString *cf, uint64_t a2)
{
  CFTypeID v4;
  const char *CStringPtr;
  _BOOL8 v6;
  CFTypeID v7;
  const char *BytePtr;
  int Length;
  xmlBuffer *v10;
  xmlBuffer *v11;
  xmlTextWriter *v12;
  xmlTextWriter *v13;
  int v14;
  xmlChar *v15;
  int v16;
  NSObject *v17;
  NSObject *v18;
  CFTypeID v19;
  char *v20;
  int CString;
  NSObject *v23;
  char *v24;
  NSObject *v25;
  CFTypeID v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE bufferSize[12];
  __int16 v31;
  int v32;
  __int16 v33;
  xmlChar *v34;
  _BYTE buf[1624];
  uint64_t v36;
  CFRange v37;

  v36 = *MEMORY[0x1E0C80C00];
  if (!cf)
    goto LABEL_19;
  v4 = CFGetTypeID(cf);
  if (v4 == CFStringGetTypeID())
  {
    CStringPtr = CFStringGetCStringPtr(cf, 0x8000100u);
    if (CStringPtr)
    {
      MEMORY[0x1940012AC](a2, CStringPtr);
      return 1;
    }
    else
    {
      *(_QWORD *)bufferSize = 0;
      v37.length = CFStringGetLength(cf);
      v37.location = 0;
      CFStringGetBytes(cf, v37, 0x8000100u, 0, 0, 0, 0, (CFIndex *)bufferSize);
      ++*(_QWORD *)bufferSize;
      v20 = (char *)operator new[]();
      CString = CFStringGetCString(cf, v20, *(CFIndex *)bufferSize, 0x8000100u);
      v6 = CString != 0;
      if (CString)
      {
        MEMORY[0x1940012AC](a2, v20);
      }
      else
      {
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        v25 = off_1ECEDEE80;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_FAULT, "could not convert to C string", buf, 2u);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE88 != -1)
            dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
          v28 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v28);
          if (v28 != buf)
            free(v28);
        }
      }
      MEMORY[0x194001420](v20, 0x1000C8077774924);
    }
    return v6;
  }
  v7 = CFGetTypeID(cf);
  if (v7 != CFDataGetTypeID())
  {
LABEL_19:
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v18 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEFAULT))
    {
      if (cf)
        v19 = CFGetTypeID(cf);
      else
        v19 = -1;
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_DEFAULT, "#Warning type IDs do not match - %{public}lu", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      if (cf)
        v26 = CFGetTypeID(cf);
      else
        v26 = -1;
      *(_DWORD *)bufferSize = 134349056;
      *(_QWORD *)&bufferSize[4] = v26;
      v27 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v27);
      if (v27 != buf)
        free(v27);
    }
    MEMORY[0x1940012AC](a2, "");
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)cf);
  Length = CFDataGetLength((CFDataRef)cf);
  if (!BytePtr)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v23 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = Length;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_FAULT, "can't convert %{public}u data bytes", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      *(_DWORD *)bufferSize = 67240192;
      *(_DWORD *)&bufferSize[4] = Length;
      v24 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, std::string &)", "CoreLocation: %s\n", v24);
      if (v24 != buf)
        free(v24);
    }
    return 0;
  }
  v10 = xmlBufferCreate();
  if (!v10)
    return 0;
  v11 = v10;
  v12 = xmlNewTextWriterMemory(v10, 0);
  if (v12)
  {
    v13 = v12;
    v14 = xmlTextWriterWriteBase64(v12, BytePtr, 0, Length);
    v6 = v14 != -1;
    if (v14 != -1)
    {
      xmlTextWriterFlush(v13);
      v15 = (xmlChar *)xmlBufferContent(v11);
      v16 = xmlBufferLength(v11);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v17 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v15;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v15;
        _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_DEBUG, "processed %p %d to (%s)", buf, 0x1Cu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE88 != -1)
          dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
        *(_DWORD *)bufferSize = 134218498;
        *(_QWORD *)&bufferSize[4] = v15;
        v31 = 1024;
        v32 = v16;
        v33 = 2080;
        v34 = v15;
        v29 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "static BOOL CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)", "CoreLocation: %s\n", v29);
        if (v29 != buf)
          free(v29);
      }
      sub_18F371394(buf, v15, v16);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)&buf[16];
    }
    xmlFreeTextWriter(v13);
  }
  else
  {
    v6 = 0;
  }
  xmlBufferFree(v11);
  return v6;
}

void sub_18F1ED898(uint64_t a1, uint64_t a2)
{
  CLConnectionMessage *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(float *, uint64_t);
  const __CFDictionary *Dictionary;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  float v15[3];
  float v16;
  BOOL v17;
  _QWORD v18[2];
  uint8_t buf[1640];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = *(CLConnectionMessage **)a2;
  v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(void (**)(float *, uint64_t))(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(v3);
  sub_18F1EDCF0(v18, Dictionary);
  if ((*(int (**)(_QWORD *))(v18[0] + 856))(v18) <= 0)
  {
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2954A88);
    v10 = qword_1ECEDEE60;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "Could not get dictionary for message", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_20;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2954A88);
    LOWORD(v15[0]) = 0;
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CLGyroBiasEstimatorClientRemote::onGyroBiasEstimation(std::shared_ptr<CLConnectionMessage>, CLGyroBiasEstimatorClientCallback, void *)", "CoreLocation: %s\n", v11);
LABEL_29:
    if (v11 != (char *)buf)
      free(v11);
    goto LABEL_20;
  }
  if ((sub_18F1EDECC(v15, &v16, &v17, (uint64_t)v18) & 1) != 0)
  {
    v8(v15, v7);
    goto LABEL_20;
  }
  if (qword_1ECEDEE68 != -1)
    dispatch_once(&qword_1ECEDEE68, &unk_1E2954A88);
  v12 = qword_1ECEDEE60;
  if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "Message does not contain a valid gyro bias object", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2954A88);
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CLGyroBiasEstimatorClientRemote::onGyroBiasEstimation(std::shared_ptr<CLConnectionMessage>, CLGyroBiasEstimatorClientCallback, void *)", "CoreLocation: %s\n", v11);
    goto LABEL_29;
  }
LABEL_20:
  sub_18F1EDCB4(v18);
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_18F1EDBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_18F1EDCB4((uint64_t *)va1);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

CFIndex sub_18F1EDC2C(uint64_t a1)
{
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
}

void sub_18F1EDC44(_OWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[5];
  _OWORD v5[2];

  v5[0] = *a1;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)a1 + 12);
  v3 = sub_18F204AE4();
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = sub_18F1F5360;
  v4[3] = &unk_1E2955CB8;
  v4[4] = a2;
  sub_18F1F6514(v3, (uint64_t)v4);
}

_QWORD *sub_18F1EDCB4(_QWORD *a1)
{
  const void *v2;

  *a1 = &off_1E2949C70;
  v2 = (const void *)a1[1];
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *sub_18F1EDCF0(_QWORD *a1, CFDictionaryRef theDict)
{
  const __CFAllocator *v3;
  CFMutableDictionaryRef MutableCopy;
  NSObject *v5;
  char *v7;
  uint8_t buf[1640];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E2949C70;
  a1[1] = 0;
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theDict)
    MutableCopy = CFDictionaryCreateMutableCopy(v3, 0, theDict);
  else
    MutableCopy = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  a1[1] = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v5 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v7 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair(CFDictionaryRef)", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
  return a1;
}

uint64_t sub_18F1EDECC(float *a1, float *a2, BOOL *a3, uint64_t a4)
{
  if (sub_18F1EDFCC(a4, "kCLBiasXKey", a1)
    && sub_18F1EDFCC(a4, "kCLBiasYKey", a1 + 1)
    && sub_18F1EDFCC(a4, "kCLBiasZKey", a1 + 2)
    && sub_18F1EDFCC(a4, "kCLVarianceXKey", a2)
    && sub_18F1EDFCC(a4, "kCLVarianceYKey", a2 + 1)
    && sub_18F1EDFCC(a4, "kCLVarianceZKey", a2 + 2))
  {
    return sub_18F1EE944(a4, "KCLDoingBiasEstimationKey", a3);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_18F1EDFCC(uint64_t a1, const char *a2, float *a3)
{
  CFStringRef v5;
  uint64_t v6;
  float v7;
  double v9;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v9 = 0.0;
  v6 = sub_18F1EEBEC(a1, (uint64_t)v5, &v9);
  if ((_DWORD)v6)
  {
    v7 = v9;
    *a3 = v7;
  }
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F1EE054(uint64_t a1, int a2)
{
  BOOL *v3;
  uint64_t *v4;
  _QWORD *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char v13;
  char v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  char v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  char v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  char v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  double v52;
  NSObject *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  int v95;
  char *v96;
  uint64_t v97;
  char *v98;
  _QWORD v99[5];
  BOOL v100;
  _BYTE buf[616];
  uint64_t v102;
  uint64_t v103;
  char v104;
  _BYTE v105[24];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E294ADB0;
  *(_BYTE *)(a1 + 8) = 0;
  v3 = (BOOL *)(a1 + 8);
  *(_DWORD *)(a1 + 12) = a2;
  *(_OWORD *)(a1 + 16) = xmmword_18F509850;
  v4 = (uint64_t *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = xmmword_18F509850;
  v5 = (_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_18F1FFE94((float32x4_t *)(a1 + 104), (float32x4_t)0);
  *(_DWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 156) = xmmword_18F506750;
  *(_QWORD *)(a1 + 172) = 0x1FF00000000;
  *(_DWORD *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
  v6 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "Starting device motion service %{public}d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
    v95 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)v105 = 67240192;
    *(_DWORD *)&v105[4] = v95;
    v96 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "CoreLocation: %s\n", v96);
    if (v96 != buf)
      free(v96);
  }
  v8 = sub_18F204AE4();
  v9 = *(_QWORD *)(v8 + 24);
  v10 = *(std::__shared_weak_count **)(v8 + 32);
  *(_QWORD *)buf = v9;
  *(_QWORD *)&buf[8] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = sub_18F1EE944(v9, "LogDeviceMotion", v3);
  v14 = v13;
  if (!v10)
    goto LABEL_13;
  v15 = (unint64_t *)&v10->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (v16)
  {
LABEL_13:
    if ((v13 & 1) != 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  if ((v14 & 1) == 0)
LABEL_14:
    *v3 = 0;
LABEL_15:
  sub_18F204AE4();
  v100 = *(_BYTE *)(qword_1ECEDFE08 + 16);
  v17 = sub_18F204AE4();
  v18 = *(_QWORD *)(v17 + 24);
  v19 = *(std::__shared_weak_count **)(v17 + 32);
  *(_QWORD *)buf = v18;
  *(_QWORD *)&buf[8] = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_18F1EE944(v18, "DeviceMotionUseThrottledInterval", &v100);
  if (v19)
  {
    v22 = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v24 = sub_18F204AE4();
  v25 = *(_QWORD *)(v24 + 24);
  v26 = *(std::__shared_weak_count **)(v24 + 32);
  *(_QWORD *)buf = v25;
  *(_QWORD *)&buf[8] = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = sub_18F1EE8D4(v25, "DeviceMotionAccelerometerUpdateInterval", v4);
  v30 = v29;
  if (!v26)
    goto LABEL_30;
  v31 = (unint64_t *)&v26->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_30:
    if ((v29 & 1) != 0)
      goto LABEL_32;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  if ((v30 & 1) == 0)
LABEL_31:
    *v4 = qword_18F509860[!v100];
LABEL_32:
  v33 = sub_18F204AE4();
  v34 = *(_QWORD *)(v33 + 24);
  v35 = *(std::__shared_weak_count **)(v33 + 32);
  *(_QWORD *)buf = v34;
  *(_QWORD *)&buf[8] = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = sub_18F1EE8D4(v34, "DeviceMotionGyroUpdateInterval", (void *)(a1 + 24));
  v39 = v38;
  if (!v35)
    goto LABEL_39;
  v40 = (unint64_t *)&v35->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_39:
    if ((v38 & 1) != 0)
      goto LABEL_41;
    goto LABEL_40;
  }
  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
  std::__shared_weak_count::__release_weak(v35);
  if ((v39 & 1) == 0)
LABEL_40:
    *(_QWORD *)(a1 + 24) = qword_18F509870[!v100];
LABEL_41:
  v42 = sub_18F204AE4();
  v43 = *(_QWORD *)(v42 + 24);
  v44 = *(std::__shared_weak_count **)(v42 + 32);
  *(_QWORD *)buf = v43;
  *(_QWORD *)&buf[8] = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  v47 = sub_18F1EE8D4(v43, "DeviceMotionCompassUpdateInterval", v5);
  v48 = v47;
  if (!v44)
    goto LABEL_48;
  v49 = (unint64_t *)&v44->__shared_owners_;
  do
    v50 = __ldaxr(v49);
  while (__stlxr(v50 - 1, v49));
  if (v50)
  {
LABEL_48:
    if ((v47 & 1) != 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
  std::__shared_weak_count::__release_weak(v44);
  if ((v48 & 1) == 0)
LABEL_49:
    *v5 = 0x3F847AE147AE147BLL;
LABEL_50:
  v51 = sub_18F1EF73C();
  v52 = sub_18F1F723C(v51, (double *)(a1 + 24));
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
  v53 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v54 = *v4;
    *(_DWORD *)buf = 134349312;
    *(double *)&buf[4] = v52;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v54;
    _os_log_impl(&dword_18F1DC000, v53, OS_LOG_TYPE_DEBUG, "GyroUpdateInterval,%{public}.4f,AccelerometerUpdateInterval,%{public}.4f", buf, 0x16u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
    v97 = *v4;
    *(_DWORD *)v105 = 134349312;
    *(double *)&v105[4] = v52;
    *(_WORD *)&v105[12] = 2050;
    *(_QWORD *)&v105[14] = v97;
    v98 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "CLSensorFusionService::CLSensorFusionService(int)", "CoreLocation: %s\n", v98);
    if (v98 != buf)
      free(v98);
  }
  if (*v3)
  {
    *(_QWORD *)v105 = &off_1E294C180;
    *(_QWORD *)&v105[8] = CFAbsoluteTimeGetCurrent();
    v55 = v52;
    *(float *)&v105[20] = v55;
    v56 = sub_18F47400C();
    sub_18F475D9C(v56, (uint64_t)v105);
    sub_18F2B6BD0(buf);
    sub_18F2C70A0(buf);
    v104 |= 1u;
    v102 = *(_QWORD *)&v105[8];
    v57 = v103;
    *(_BYTE *)(v103 + 12) |= 1u;
    *(float *)(v57 + 8) = v55;
    sub_18F2B9670((PB::Base *)buf);
  }
  sub_18F204AE4();
  if (*(_BYTE *)(qword_1ECEDFE08 + 16))
  {
    v58 = sub_18F204AE4();
    v59 = *(_QWORD *)(v58 + 24);
    v60 = *(std::__shared_weak_count **)(v58 + 32);
    *(_QWORD *)buf = v59;
    *(_QWORD *)&buf[8] = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    v105[0] = 0;
    v63 = sub_18F1EE944(v59, "DumpGyroCalibrationDatabaseOnDeviceMotionStart", v105);
    if (v105[0])
      v68 = v63;
    else
      v68 = 0;
    if (v60)
    {
      v69 = (unint64_t *)&v60->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
        if (!v68)
          return a1;
        goto LABEL_69;
      }
    }
    if (v68)
    {
LABEL_69:
      v71 = (void *)MEMORY[0x1E0CB3940];
      v72 = (void *)objc_msgSend_date(MEMORY[0x1E0C99D68], v64, v65, v66, v67);
      objc_msgSend_timeIntervalSinceReferenceDate(v72, v73, v74, v75, v76);
      v81 = objc_msgSend_stringWithFormat_(v71, v77, (uint64_t)CFSTR("%.0f"), v78, v79, v80);
      v82 = (void *)sub_18F20CA68();
      v87 = (void *)objc_msgSend_vendor(v82, v83, v84, v85, v86);
      v91 = (void *)objc_msgSend_proxyForService_(v87, v88, (uint64_t)CFSTR("CLGyroCalibrationDatabase"), v89, v90);
      v99[0] = MEMORY[0x1E0C809B0];
      v99[1] = 3221225472;
      v99[2] = sub_18F4B2CA4;
      v99[3] = &unk_1E2959040;
      v99[4] = v81;
      objc_msgSend_dumpDatabase_onCompletion_(v91, v92, v81, (uint64_t)v99, v93);
    }
  }
  return a1;
}

void sub_18F1EE890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_18F2A8438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1EE8D4(uint64_t a1, const char *a2, void *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F1EEBEC(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F1EE944(uint64_t a1, const char *a2, BOOL *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, 0x8000100u);
  v6 = sub_18F1EE9B4(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_18F1EE9B4(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F1EF77C(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, BOOL &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F1EEBEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F1EF3E8(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, double &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

BOOL sub_18F1EEE24(uint64_t a1, const __CFString *a2, _QWORD *a3)
{
  CFPropertyListRef v6;

  if (sub_18F1EF3A8(a1 + 120, a2, a3))
    return 1;
  v6 = CFPreferencesCopyValue(a2, *(CFStringRef *)(a1 + 72), *(CFStringRef *)(a1 + 80), (CFStringRef)*MEMORY[0x1E0C9B250]);
  *a3 = v6;
  return v6 || sub_18F1EF3A8(a1 + 104, a2, a3);
}

uint64_t sub_18F1EEE9C(uint64_t a1, const __CFString *a2, uint64_t *a3, int a4)
{
  uint64_t result;
  CFTypeID v8;
  CFIndex v9;
  const void *ValueAtIndex;
  NSObject *v11;
  CFTypeID v12;
  _BYTE *v13;
  CFTypeID v14;
  void **v15;
  char *v16;
  NSObject *v17;
  int v18;
  _BYTE *v19;
  CFIndex Count;
  _BYTE *v21;
  int v22;
  void **v23;
  CFIndex v24;
  void **v25;
  void *v26[2];
  char v27;
  CFTypeRef cf;
  _BYTE __p[18];
  __int16 v30;
  CFIndex v31;
  uint8_t buf[4];
  _BYTE v33[14];
  __int16 v34;
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  cf = 0;
  result = (*(uint64_t (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf);
  if ((_DWORD)result)
  {
    *a3 = 0;
    v8 = CFGetTypeID(cf);
    if (v8 == CFArrayGetTypeID())
    {
      v9 = a4 & ~(a4 >> 31);
      if (CFArrayGetCount((CFArrayRef)cf) > v9)
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v9);
LABEL_34:
        *a3 = (uint64_t)ValueAtIndex;
        CFRetain(ValueAtIndex);
        CFRelease(cf);
        return 1;
      }
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v17 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        sub_18F1ED06C(a2, (uint64_t)__p);
        v18 = SBYTE3(v31);
        v19 = *(_BYTE **)__p;
        Count = CFArrayGetCount((CFArrayRef)cf);
        v21 = __p;
        *(_DWORD *)buf = 136446722;
        if (v18 < 0)
          v21 = v19;
        *(_QWORD *)v33 = v21;
        *(_WORD *)&v33[8] = 1026;
        *(_DWORD *)&v33[10] = v9;
        v34 = 2050;
        v35 = (_BYTE *)Count;
        _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "specified index is out of range for key %{public}s (%{public}d of %{public}ld)", buf, 0x1Cu);
        if (SBYTE3(v31) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_31;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      sub_18F1ED06C(a2, (uint64_t)v26);
      v22 = v27;
      v23 = (void **)v26[0];
      v24 = CFArrayGetCount((CFArrayRef)cf);
      v25 = v26;
      *(_DWORD *)__p = 136446722;
      if (v22 < 0)
        v25 = v23;
      *(_QWORD *)&__p[4] = v25;
      *(_WORD *)&__p[12] = 1026;
      *(_DWORD *)&__p[14] = v9;
      v30 = 2050;
      v31 = v24;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0)
        operator delete(v26[0]);
    }
    else
    {
      if (a4 < 1)
      {
        ValueAtIndex = cf;
        goto LABEL_34;
      }
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v11 = off_1ECEDEE80;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
      {
        v12 = CFGetTypeID(cf);
        sub_18F1ED06C(a2, (uint64_t)__p);
        v13 = (v31 & 0x80000000) == 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 67240706;
        *(_DWORD *)v33 = a4;
        *(_WORD *)&v33[4] = 2050;
        *(_QWORD *)&v33[6] = v12;
        v34 = 2082;
        v35 = v13;
        _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_FAULT, "specified index %{public}d not applicable to type %{public}lu for key %{public}s", buf, 0x1Cu);
        if (SBYTE3(v31) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_18F1FCA08(115, 0))
        goto LABEL_31;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v14 = CFGetTypeID(cf);
      sub_18F1ED06C(a2, (uint64_t)v26);
      if (v27 >= 0)
        v15 = v26;
      else
        v15 = (void **)v26[0];
      *(_DWORD *)__p = 67240706;
      *(_DWORD *)&__p[4] = a4;
      *(_WORD *)&__p[8] = 2050;
      *(_QWORD *)&__p[10] = v14;
      v30 = 2082;
      v31 = (CFIndex)v15;
      v16 = (char *)_os_log_send_and_compose_impl();
      if (v27 < 0)
        operator delete(v26[0]);
    }
    sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const", "CoreLocation: %s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
LABEL_31:
    CFRelease(cf);
    result = *a3;
    if (*a3)
    {
      CFRelease((CFTypeRef)result);
      return 0;
    }
  }
  return result;
}

void sub_18F1EF370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_18F1EF3A8(uint64_t a1, const void *a2, _QWORD *a3)
{
  const void *Value;
  const void *v5;

  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 8), a2);
  v5 = Value;
  *a3 = Value;
  if (Value)
    CFRetain(Value);
  return v5 != 0;
}

uint64_t sub_18F1EF3E8(const void *a1, void *a2)
{
  CFTypeID v4;
  uint64_t result;
  NSObject *v6;
  int v7;
  char *v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  CFTypeID v12;
  __int16 v13;
  CFTypeID TypeID;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v6 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v12 = CFGetTypeID(a1);
      v13 = 2050;
      TypeID = CFNumberGetTypeID();
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    v7 = sub_18F1FCA08(115, 0);
    result = 0;
    if (!v7)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    CFGetTypeID(a1);
    CFNumberGetTypeID();
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf)
      return 0;
LABEL_12:
    free(v8);
    return 0;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, a2))
    return 1;
  if (qword_1ECEDEE88 != -1)
    dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
  v9 = off_1ECEDEE80;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v10 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v10)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v8 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, double &)", "CoreLocation: %s\n", v8);
    if (v8 == (char *)buf)
      return 0;
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_18F1EF73C()
{
  if (qword_1ECEDF850 != -1)
    dispatch_once(&qword_1ECEDF850, &unk_1E2953408);
  return qword_1ECEDF848;
}

uint64_t sub_18F1EF77C(const void *a1, BOOL *a2)
{
  CFTypeID v4;

  v4 = CFGetTypeID(a1);
  if (v4 != CFBooleanGetTypeID() && v4 != CFNumberGetTypeID())
    return 0;
  *a2 = CFBooleanGetValue((CFBooleanRef)a1) != 0;
  return 1;
}

uint64_t sub_18F1EF7E4()
{
  uint64_t result;
  const void *v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t *v4;
  char *v5;
  uint8_t *v6;
  char *v7;
  uint8_t v8[16];
  int v9;
  char v10;
  int v11;
  uint8_t *v12;
  uint8_t buf[16];
  int v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if ((MGIsDeviceOfType() & 1) != 0)
    return 2;
  v14 = 1244490093;
  *(_OWORD *)buf = xmmword_18F5049F0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 5;
  v9 = 1377801277;
  *(_OWORD *)v8 = xmmword_18F504A04;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 5;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 19;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 20;
  v14 = 1839812531;
  *(_OWORD *)buf = xmmword_18F504A18;
  if ((MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0)
    return 20;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 52;
  v14 = -435113336;
  *(_OWORD *)buf = xmmword_18F504A2C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 53;
  v14 = -1997581659;
  *(_OWORD *)buf = xmmword_18F504A40;
  if ((MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType() & 1) != 0)
    return 158;
  v14 = -1441055153;
  *(_OWORD *)buf = xmmword_18F504A54;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 159;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 160;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 3;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 6;
  v14 = 1602014129;
  *(_OWORD *)buf = xmmword_18F504A68;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 7;
  v14 = -810116762;
  *(_OWORD *)buf = xmmword_18F504A7C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 8;
  v14 = -1195351767;
  *(_OWORD *)buf = xmmword_18F504A90;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 9;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 10;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 11;
  v14 = 1789837692;
  *(_OWORD *)buf = xmmword_18F504AA4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 13;
  v14 = 48355600;
  *(_OWORD *)buf = xmmword_18F504AB8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 14;
  v14 = -1239654590;
  *(_OWORD *)buf = xmmword_18F504ACC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 15;
  v14 = -679691073;
  *(_OWORD *)buf = xmmword_18F504AE0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 16;
  v14 = -1579092758;
  *(_OWORD *)buf = xmmword_18F504AF4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 17;
  v14 = 1430379884;
  *(_OWORD *)buf = xmmword_18F504B08;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 18;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 21;
  v14 = -798153473;
  *(_OWORD *)buf = xmmword_18F504B1C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 22;
  v14 = -776721724;
  *(_OWORD *)buf = xmmword_18F504B30;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 23;
  v14 = -1403227947;
  *(_OWORD *)buf = xmmword_18F504B44;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 24;
  v14 = 729118884;
  *(_OWORD *)buf = xmmword_18F504B58;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 25;
  v14 = 1046806126;
  *(_OWORD *)buf = xmmword_18F504B6C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 26;
  v9 = -188760945;
  *(_OWORD *)v8 = xmmword_18F504B80;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 26;
  v14 = -489993439;
  *(_OWORD *)buf = xmmword_18F504B94;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 27;
  v14 = 886875686;
  *(_OWORD *)buf = xmmword_18F504BA8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 28;
  v14 = -1639077591;
  *(_OWORD *)buf = xmmword_18F504BBC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 29;
  v14 = 338555555;
  *(_OWORD *)buf = xmmword_18F504BD0;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 30;
  v14 = 1032708406;
  *(_OWORD *)buf = xmmword_18F504BE4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 31;
  v14 = 729903963;
  *(_OWORD *)buf = xmmword_18F504BF8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 32;
  v14 = 1278131292;
  *(_OWORD *)buf = xmmword_18F504C0C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 33;
  v14 = -1841712216;
  *(_OWORD *)buf = xmmword_18F504C20;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 34;
  v14 = 1275676051;
  *(_OWORD *)buf = xmmword_18F504C34;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 35;
  v14 = 1908474541;
  *(_OWORD *)buf = xmmword_18F504C48;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 36;
  v14 = -1022451852;
  *(_OWORD *)buf = xmmword_18F504C5C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 62;
  v14 = 1729782187;
  *(_OWORD *)buf = xmmword_18F504C70;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 63;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 37;
  v14 = 368885834;
  *(_OWORD *)buf = xmmword_18F504C84;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 38;
  v14 = -414334491;
  *(_OWORD *)buf = xmmword_18F504C98;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 39;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 40;
  v14 = -526227167;
  *(_OWORD *)buf = xmmword_18F504CAC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 41;
  v14 = -1509831889;
  *(_OWORD *)buf = xmmword_18F504CC0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 42;
  v14 = 1960366092;
  *(_OWORD *)buf = xmmword_18F504CD4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 43;
  v14 = -2114570942;
  *(_OWORD *)buf = xmmword_18F504CE8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 148;
  v14 = -1527788847;
  *(_OWORD *)buf = xmmword_18F504CFC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 44;
  v14 = 1532898719;
  *(_OWORD *)buf = xmmword_18F504D10;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 45;
  v14 = 996646949;
  *(_OWORD *)buf = xmmword_18F504D24;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 46;
  v14 = -563086000;
  *(_OWORD *)buf = xmmword_18F504D38;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 47;
  v14 = 659506830;
  *(_OWORD *)buf = xmmword_18F504D4C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 48;
  v14 = 213746202;
  *(_OWORD *)buf = xmmword_18F504D60;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 49;
  v14 = 289690957;
  *(_OWORD *)buf = xmmword_18F504D74;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 50;
  v14 = 586720268;
  *(_OWORD *)buf = xmmword_18F504D88;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 51;
  v14 = -350584140;
  *(_OWORD *)buf = xmmword_18F504D9C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 54;
  v14 = 368778837;
  *(_OWORD *)buf = xmmword_18F504DB0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 55;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 56;
  v14 = -1418383976;
  *(_OWORD *)buf = xmmword_18F504DC4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 57;
  v14 = -1213485500;
  *(_OWORD *)buf = xmmword_18F504DD8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 58;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 59;
  v14 = 1425254930;
  *(_OWORD *)buf = xmmword_18F504DEC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 60;
  v14 = 1899561076;
  *(_OWORD *)buf = xmmword_18F504E00;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 61;
  v14 = -199226823;
  *(_OWORD *)buf = xmmword_18F504E14;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 64;
  v9 = 1412427398;
  *(_OWORD *)v8 = xmmword_18F504E28;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 64;
  v14 = -1283070668;
  *(_OWORD *)buf = xmmword_18F504E3C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 65;
  v9 = 160260070;
  *(_OWORD *)v8 = xmmword_18F504E50;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 65;
  v14 = 1711910369;
  *(_OWORD *)buf = xmmword_18F504E64;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 66;
  v14 = -1282800328;
  *(_OWORD *)buf = xmmword_18F504E78;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 67;
  v14 = 897736383;
  *(_OWORD *)buf = xmmword_18F504E8C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 68;
  v14 = -453987047;
  *(_OWORD *)buf = xmmword_18F504EA0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 69;
  v14 = 450980336;
  *(_OWORD *)buf = xmmword_18F504EB4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 70;
  v14 = 414393924;
  *(_OWORD *)buf = xmmword_18F504EC8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 71;
  v14 = -996295886;
  *(_OWORD *)buf = xmmword_18F504EDC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 72;
  v14 = -337121064;
  *(_OWORD *)buf = xmmword_18F504EF0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 73;
  v14 = -2092955395;
  *(_OWORD *)buf = xmmword_18F504F04;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 74;
  v14 = 674998600;
  *(_OWORD *)buf = xmmword_18F504F18;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 75;
  v14 = 317289457;
  *(_OWORD *)buf = xmmword_18F504F2C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 76;
  v14 = 401945557;
  *(_OWORD *)buf = xmmword_18F504F40;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 77;
  v14 = -232427879;
  *(_OWORD *)buf = xmmword_18F504F54;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 78;
  v14 = -427474227;
  *(_OWORD *)buf = xmmword_18F504F68;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 79;
  v9 = 1477534141;
  *(_OWORD *)v8 = xmmword_18F504F7C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 79;
  v14 = -1843102369;
  *(_OWORD *)buf = xmmword_18F504F90;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 80;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 81;
  v14 = 470738981;
  *(_OWORD *)buf = xmmword_18F504FA4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 82;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 83;
  v14 = 710807826;
  *(_OWORD *)buf = xmmword_18F504FB8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 84;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 85;
  v14 = 1860682089;
  *(_OWORD *)buf = xmmword_18F504FCC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 86;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 87;
  v14 = -2085056298;
  *(_OWORD *)buf = xmmword_18F504FE0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 88;
  v14 = 2146530832;
  *(_OWORD *)buf = xmmword_18F504FF4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 89;
  v14 = -1742178852;
  *(_OWORD *)buf = xmmword_18F505008;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 90;
  v14 = 617174804;
  *(_OWORD *)buf = xmmword_18F50501C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 91;
  v14 = 1330813729;
  *(_OWORD *)buf = xmmword_18F505030;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 92;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 93;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 94;
  v14 = 152704997;
  *(_OWORD *)buf = xmmword_18F505044;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 95;
  v14 = -338255497;
  *(_OWORD *)buf = xmmword_18F505058;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 96;
  v14 = -1040127899;
  *(_OWORD *)buf = xmmword_18F50506C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 97;
  v14 = 283967174;
  *(_OWORD *)buf = xmmword_18F505080;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 98;
  v14 = 1530707451;
  *(_OWORD *)buf = xmmword_18F505094;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 99;
  v14 = -871113647;
  *(_OWORD *)buf = xmmword_18F5050A8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 100;
  v14 = 483476120;
  *(_OWORD *)buf = xmmword_18F5050BC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 101;
  v14 = 1472775220;
  *(_OWORD *)buf = xmmword_18F5050D0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 102;
  v14 = 56502976;
  *(_OWORD *)buf = xmmword_18F5050E4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 103;
  v14 = 282158961;
  *(_OWORD *)buf = xmmword_18F5050F8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 104;
  v14 = 1282132887;
  *(_OWORD *)buf = xmmword_18F50510C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 105;
  v14 = -961843768;
  *(_OWORD *)buf = xmmword_18F505120;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 106;
  v14 = 1326690998;
  *(_OWORD *)buf = xmmword_18F505134;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 107;
  v14 = -441172408;
  *(_OWORD *)buf = xmmword_18F505148;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 108;
  v14 = -126099363;
  *(_OWORD *)buf = xmmword_18F50515C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 109;
  v14 = 1756484512;
  *(_OWORD *)buf = xmmword_18F505170;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 110;
  v14 = 763775061;
  *(_OWORD *)buf = xmmword_18F505184;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 111;
  v14 = -1092155788;
  *(_OWORD *)buf = xmmword_18F505198;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 112;
  v14 = -557458837;
  *(_OWORD *)buf = xmmword_18F5051AC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 113;
  v14 = -63049871;
  *(_OWORD *)buf = xmmword_18F5051C0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 114;
  v14 = 1730000236;
  *(_OWORD *)buf = xmmword_18F5051D4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 115;
  v14 = 406601745;
  *(_OWORD *)buf = xmmword_18F5051E8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 116;
  v14 = 1530338216;
  *(_OWORD *)buf = xmmword_18F5051FC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 117;
  v14 = -1930811061;
  *(_OWORD *)buf = xmmword_18F505210;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 118;
  v14 = 1654218604;
  *(_OWORD *)buf = xmmword_18F505224;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 119;
  v14 = -182498503;
  *(_OWORD *)buf = xmmword_18F505238;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 124;
  v14 = -2030489149;
  *(_OWORD *)buf = xmmword_18F50524C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 120;
  v14 = 841005628;
  *(_OWORD *)buf = xmmword_18F505260;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 121;
  v14 = 223445260;
  *(_OWORD *)buf = xmmword_18F505274;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 122;
  v14 = 1219348060;
  *(_OWORD *)buf = xmmword_18F505288;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 123;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 125;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 126;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 127;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 128;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 129;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 130;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 131;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 132;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 133;
  v14 = 2030516999;
  *(_OWORD *)buf = xmmword_18F50529C;
  *(_OWORD *)v8 = xmmword_18F5052B0;
  v9 = -1276010597;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 134;
  v14 = -762483149;
  *(_OWORD *)buf = xmmword_18F5052C4;
  *(_OWORD *)v8 = xmmword_18F5052D8;
  v9 = -1926937532;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 135;
  v14 = -1902732724;
  *(_OWORD *)buf = xmmword_18F5052EC;
  *(_OWORD *)v8 = xmmword_18F505300;
  v9 = -342357580;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 136;
  v14 = 300442574;
  *(_OWORD *)buf = xmmword_18F505314;
  *(_OWORD *)v8 = xmmword_18F505328;
  v9 = -1294188889;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 137;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 138;
  v14 = -61007701;
  *(_OWORD *)buf = xmmword_18F50533C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 139;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 140;
  v14 = -235416490;
  *(_OWORD *)buf = xmmword_18F505350;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 141;
  v14 = -820493242;
  *(_OWORD *)buf = xmmword_18F505364;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 143;
  v14 = -1157300313;
  *(_OWORD *)buf = xmmword_18F505378;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 144;
  v14 = -2132668294;
  *(_OWORD *)buf = xmmword_18F50538C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 145;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 146;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 147;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 149;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 150;
  v14 = 1737149739;
  *(_OWORD *)buf = xmmword_18F5053A0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 151;
  v14 = 1577888303;
  *(_OWORD *)buf = xmmword_18F5053B4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 152;
  v14 = -1918230744;
  *(_OWORD *)buf = xmmword_18F5053C8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 153;
  v14 = 1126727276;
  *(_OWORD *)buf = xmmword_18F5053DC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 154;
  v14 = 300130091;
  *(_OWORD *)buf = xmmword_18F5053F0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 155;
  v14 = 343814884;
  *(_OWORD *)buf = xmmword_18F505404;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 156;
  v14 = -1675932945;
  *(_OWORD *)buf = xmmword_18F505418;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 157;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 161;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 162;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 166;
  v14 = -1840391155;
  *(_OWORD *)buf = xmmword_18F50542C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 167;
  v14 = -121925081;
  *(_OWORD *)buf = xmmword_18F505440;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 142;
  v14 = 1071957977;
  *(_OWORD *)buf = xmmword_18F505454;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 168;
  v14 = 438437663;
  *(_OWORD *)buf = xmmword_18F505468;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 169;
  v14 = 1575123478;
  *(_OWORD *)buf = xmmword_18F50547C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 170;
  v14 = -382792827;
  *(_OWORD *)buf = xmmword_18F505490;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 171;
  v14 = 123138233;
  *(_OWORD *)buf = xmmword_18F5054A4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 172;
  v14 = 681511593;
  *(_OWORD *)buf = xmmword_18F5054B8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 173;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 174;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 175;
  v14 = 713503427;
  *(_OWORD *)buf = xmmword_18F5054CC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 176;
  v14 = -1632750650;
  *(_OWORD *)buf = xmmword_18F5054E0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 177;
  v14 = -1820426635;
  *(_OWORD *)buf = xmmword_18F5054F4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 178;
  v14 = -937652876;
  *(_OWORD *)buf = xmmword_18F505508;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 179;
  v14 = 1874287171;
  *(_OWORD *)buf = xmmword_18F50551C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 180;
  v14 = -781324731;
  *(_OWORD *)buf = xmmword_18F505530;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 181;
  v14 = 1214880059;
  *(_OWORD *)buf = xmmword_18F505544;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 182;
  v14 = 426359977;
  *(_OWORD *)buf = xmmword_18F505558;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 183;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 180;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 184;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 163;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 185;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 164;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 165;
  v14 = 345196535;
  *(_OWORD *)buf = xmmword_18F50556C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 186;
  v14 = 440949464;
  *(_OWORD *)buf = xmmword_18F505580;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 187;
  v14 = 688565114;
  *(_OWORD *)buf = xmmword_18F505594;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 188;
  v14 = -493418906;
  *(_OWORD *)buf = xmmword_18F5055A8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 189;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 190;
  v14 = -584398440;
  *(_OWORD *)buf = xmmword_18F5055BC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 195;
  v14 = -879476163;
  *(_OWORD *)buf = xmmword_18F5055D0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 196;
  v14 = -695298128;
  *(_OWORD *)buf = xmmword_18F5055E4;
  *(_OWORD *)v8 = xmmword_18F5055F8;
  v9 = 804488105;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 197;
  v14 = 1614584579;
  *(_OWORD *)buf = xmmword_18F50560C;
  *(_OWORD *)v8 = xmmword_18F505620;
  v9 = 324288768;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 198;
  v14 = 460218192;
  *(_OWORD *)buf = xmmword_18F505634;
  *(_OWORD *)v8 = xmmword_18F505648;
  v9 = 2144905009;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 199;
  v14 = 127894440;
  *(_OWORD *)buf = xmmword_18F50565C;
  *(_OWORD *)v8 = xmmword_18F505670;
  v9 = 1070997468;
  if ((MGIsDeviceOneOfType() & 1) != 0)
    return 200;
  v14 = 372777383;
  *(_OWORD *)buf = xmmword_18F505684;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 201;
  v14 = -858079590;
  *(_OWORD *)buf = xmmword_18F505698;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 202;
  v14 = -212523443;
  *(_OWORD *)buf = xmmword_18F5056AC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 203;
  v14 = 646100384;
  *(_OWORD *)buf = xmmword_18F5056C0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 204;
  v14 = -340360463;
  *(_OWORD *)buf = xmmword_18F5056D4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 205;
  v14 = 1605231531;
  *(_OWORD *)buf = xmmword_18F5056E8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 206;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 207;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 208;
  v14 = -545612308;
  *(_OWORD *)buf = xmmword_18F5056FC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 209;
  v14 = 1178062702;
  *(_OWORD *)buf = xmmword_18F505710;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 210;
  v14 = 958549802;
  *(_OWORD *)buf = xmmword_18F505724;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 211;
  v14 = 1377540371;
  *(_OWORD *)buf = xmmword_18F505738;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 212;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 213;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 214;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 215;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 216;
  v14 = -1431778695;
  *(_OWORD *)buf = xmmword_18F50574C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 217;
  v14 = 533419158;
  *(_OWORD *)buf = xmmword_18F505760;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 218;
  v14 = 1106979518;
  *(_OWORD *)buf = xmmword_18F505774;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 219;
  v14 = -609570151;
  *(_OWORD *)buf = xmmword_18F505788;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 220;
  v14 = -874769875;
  *(_OWORD *)buf = xmmword_18F50579C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 221;
  v14 = 1223847566;
  *(_OWORD *)buf = xmmword_18F5057B0;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 222;
  v14 = 185580364;
  *(_OWORD *)buf = xmmword_18F5057C4;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 223;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 224;
  v14 = 1878025452;
  *(_OWORD *)buf = xmmword_18F5057D8;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 225;
  v14 = 1725957070;
  *(_OWORD *)buf = xmmword_18F5057EC;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 226;
  v14 = 538967431;
  *(_OWORD *)buf = xmmword_18F505800;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 227;
  v14 = 2060712151;
  *(_OWORD *)buf = xmmword_18F505814;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 228;
  v14 = 802516499;
  *(_OWORD *)buf = xmmword_18F505828;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 229;
  v14 = -1919324456;
  *(_OWORD *)buf = xmmword_18F50583C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 230;
  v14 = 1127969586;
  *(_OWORD *)buf = xmmword_18F505850;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 231;
  v14 = 1292009573;
  *(_OWORD *)buf = xmmword_18F505864;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 232;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 233;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 234;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 235;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 236;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 142;
  if (qword_1ECEDEF68 != -1)
    dispatch_once(&qword_1ECEDEF68, &unk_1E2952F48);
  if (sub_18F374F94())
    return 1;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 237;
  v14 = -12497897;
  *(_OWORD *)buf = xmmword_18F505878;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 238;
  v14 = -518121279;
  *(_OWORD *)buf = xmmword_18F50588C;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 239;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 240;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 241;
  if ((MGIsDeviceOfType() & 1) != 0)
    return 258;
  v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    if (qword_1EE16D988 != -1)
      dispatch_once(&qword_1EE16D988, &unk_1E2956080);
    v2 = qword_1EE16D990;
    if (os_log_type_enabled((os_log_t)qword_1EE16D990, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138477827;
      *(_QWORD *)&buf[4] = v1;
      _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_ERROR, "unknown HW model %{private}@; file radar to CoreMotion Factory | 1.0",
        buf,
        0xCu);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D988 != -1)
        dispatch_once(&qword_1EE16D988, &unk_1E2956080);
      *(_DWORD *)v8 = 138477827;
      *(_QWORD *)&v8[4] = v1;
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    CFRelease(v1);
    return 0;
  }
  if (qword_1EE16D988 != -1)
    dispatch_once(&qword_1EE16D988, &unk_1E2956080);
  v3 = qword_1EE16D990;
  if (os_log_type_enabled((os_log_t)qword_1EE16D990, OS_LOG_TYPE_ERROR))
  {
    sub_18F1ED06C(CFSTR("HWModelStr"), (uint64_t)buf);
    v4 = v15 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v8 = 136380675;
    *(_QWORD *)&v8[4] = v4;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_ERROR, "unknown HW model %{private}s; file radar to CoreMotion Factory | 1.0",
      v8,
      0xCu);
    if (v15 < 0)
      operator delete(*(void **)buf);
  }
  result = sub_18F1FCA08(115, 0);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D988 != -1)
      dispatch_once(&qword_1EE16D988, &unk_1E2956080);
    sub_18F1ED06C(CFSTR("HWModelStr"), (uint64_t)v8);
    if (v10 >= 0)
      v6 = v8;
    else
      v6 = *(uint8_t **)v8;
    v11 = 136380675;
    v12 = v6;
    v7 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0)
      operator delete(*(void **)v8);
    sub_18F419700("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

void sub_18F1F232C(uint64_t a1, char *a2, __IOHIDServiceClient *a3)
{
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t i;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  char *v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2 == "ADDED")
  {
    v5 = (void *)MEMORY[0x194001B4C]();
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
    {
      v6 = (id)IOHIDServiceClientCopyProperty(a3, CFSTR("PrimaryUsagePage"));
      v11 = objc_msgSend_intValue(v6, v7, v8, v9, v10);
      v12 = (id)IOHIDServiceClientCopyProperty(a3, CFSTR("PrimaryUsage"));
      v17 = objc_msgSend_intValue(v12, v13, v14, v15, v16);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v18 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240448;
        v31 = v11;
        v32 = 1026;
        v33 = v17;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] New IOHIDServiceClientRef for usage pair {%{public}d, %{public}d} just became available.", buf, 0xEu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        v29 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::onServiceRegistration(void *, IOHIDServiceClientRef)", "CoreLocation: %s\n", v29);
        if (v29 != (char *)buf)
          free(v29);
      }
    }
    v19 = *(_QWORD *)(a1 + 8);
    for (i = *(_QWORD *)(a1 + 16); v19 != i; v19 += 16)
    {
      v21 = *(std::__shared_weak_count **)(v19 + 8);
      if (v21)
      {
        v22 = *(_QWORD **)v19;
        p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
        do
          v24 = __ldxr(p_shared_weak_owners);
        while (__stxr(v24 + 1, p_shared_weak_owners));
        v25 = std::__shared_weak_count::lock(v21);
        if (v25)
        {
          v26 = v25;
          if (v22)
          {
            if ((sub_18F1F40DC((uint64_t)v22, a3) & 1) != 0)
            {
              sub_18F1F46B4(v22, (char *)a3, 1);
              if (v22[10])
                IOHIDServiceClientRegisterRemovalCallback();
            }
          }
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    objc_autoreleasePoolPop(v5);
  }
}

void sub_18F1F265C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_18F1F26A8(NSObject *a1)
{
  CFRunLoopRef Current;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Class v9;
  _QWORD *isa;
  const char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  const char *v40;
  NSObject *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  char *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  void *context;
  _QWORD v52[2];
  _QWORD v53[2];
  int v54;
  int v55;
  __int16 v56;
  int v57;
  uint8_t buf[4];
  _BYTE v59[14];
  __int16 v60;
  const char *v61;
  __int16 v62;
  const char *v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  v3 = sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v45 = off_1ECEDEE90;
    v11 = "";
    v8 = "assert";
    v40 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v59 = 0;
      *(_WORD *)&v59[4] = 2082;
      *(_QWORD *)&v59[6] = "";
      v60 = 2082;
      v61 = "assert";
      v62 = 2081;
      v63 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v45, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingForDevices should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v46 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v59 = 0;
      *(_WORD *)&v59[4] = 2082;
      *(_QWORD *)&v59[6] = "";
      v60 = 2082;
      v61 = "assert";
      v62 = 2081;
      v63 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setMatchingForDevices should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingForDevices should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    a1 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v59 = 0;
      *(_WORD *)&v59[4] = 2082;
      *(_QWORD *)&v59[6] = "";
      v60 = 2082;
      v61 = "assert";
      v62 = 2081;
      v63 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setMatchingForDevices should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v49 = 281;
    v50 = "setMatchingForDevices";
    v48 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/IO/CLIoHidInterface.mm";
    abort_report_np();
    __break(1u);
LABEL_65:
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
LABEL_47:
    v41 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v59 = v11;
      _os_log_impl(&dword_18F1DC000, v41, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Setting matching multiple for %{public}lu events", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (*((_QWORD *)v40 + 467) != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      LODWORD(v64) = 134349056;
      *(_QWORD *)((char *)&v64 + 4) = v11;
      LODWORD(v49) = 12;
      v47 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "CoreLocation: %s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
    objc_msgSend_arrayWithArray_(MEMORY[0x1E0C99D20], v42, (uint64_t)v8, v43, v44, v48, v49, v50);
    IOHIDEventSystemClientSetMatchingMultiple();
    objc_autoreleasePoolPop(context);
    goto LABEL_51;
  }
  context = (void *)MEMORY[0x194001B4C](v3);
  v4 = sub_18F1F7BFC();
  v8 = (char *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v5, (a1[2].isa - a1[1].isa) >> 4, v6, v7);
  isa = a1[1].isa;
  v9 = a1[2].isa;
  if (isa == (_QWORD *)v9)
  {
    v11 = 0;
LABEL_46:
    v40 = (const char *)CMVO2MaxRetrocomputeState;
    if (qword_1ECEDEE98 == -1)
      goto LABEL_47;
    goto LABEL_65;
  }
  v11 = 0;
  while (1)
  {
    v12 = (std::__shared_weak_count *)isa[1];
    if (v12)
      break;
LABEL_35:
    isa += 2;
    if (isa == (_QWORD *)v9)
      goto LABEL_46;
  }
  v13 = *isa;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = std::__shared_weak_count::lock(v12);
  *((_QWORD *)&v64 + 1) = v16;
  if (!v16)
  {
    std::__shared_weak_count::__release_weak(v12);
    goto LABEL_35;
  }
  v17 = v16;
  *(_QWORD *)&v64 = v13;
  if (v13)
  {
    if ((v4 & 0x800000000000) == 0 && *(_DWORD *)(v13 + 20) == 65280 && *(_DWORD *)(v13 + 16) == 8)
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v18 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Prox: remove set matching multiple", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        LOWORD(v54) = 0;
        LODWORD(v49) = 2;
        v39 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "CoreLocation: %s\n", v39);
        if (v39 != (char *)buf)
          free(v39);
      }
      IOHIDEventSystemClientSetMatchingMultiple();
      sub_18F1F2F4C((const char *)a1);
      sub_18F1F393C((const char *)a1, 0);
      LODWORD(v13) = 0;
      v19 = 1;
    }
    else
    {
      if (*(_QWORD *)(v13 + 48))
      {
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        v20 = off_1ECEDEE90;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
        {
          v22 = *(_DWORD *)(v13 + 16);
          v21 = *(_DWORD *)(v13 + 20);
          *(_DWORD *)buf = 67240448;
          *(_DWORD *)v59 = v21;
          *(_WORD *)&v59[4] = 1026;
          *(_DWORD *)&v59[6] = v22;
          _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Adding match entry for usage pair {%{public}d, %{public}d}", buf, 0xEu);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE98 != -1)
            dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
          v37 = *(_DWORD *)(v13 + 16);
          v36 = *(_DWORD *)(v13 + 20);
          v54 = 67240448;
          v55 = v36;
          v56 = 1026;
          v57 = v37;
          LODWORD(v49) = 14;
          v38 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::setMatchingForDevices()", "CoreLocation: %s\n", v38);
          if (v38 != (char *)buf)
            free(v38);
        }
        v52[0] = CFSTR("PrimaryUsagePage");
        v26 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v23, *(unsigned int *)(v13 + 20), v24, v25);
        v52[1] = CFSTR("PrimaryUsage");
        v53[0] = v26;
        v53[1] = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v27, *(unsigned int *)(v13 + 16), v28, v29);
        v31 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v30, (uint64_t)v53, (uint64_t)v52, 2);
        objc_msgSend_setObject_atIndexedSubscript_(v8, v32, v31, (uint64_t)v11, v33);
        v19 = 0;
        ++v11;
      }
      else
      {
        v19 = 0;
      }
      LODWORD(v13) = 1;
    }
  }
  else
  {
    v19 = 9;
  }
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v12);
  if (v19 == 9 || !v19)
    goto LABEL_35;
  objc_autoreleasePoolPop(context);
  if ((_DWORD)v13)
  {
LABEL_51:
    sub_18F1F2F4C((const char *)a1);
    sub_18F1F393C((const char *)a1, 0);
  }
}

void sub_18F1F2F20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  sub_18F2A8438(v2 - 112);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_18F1F2F4C(const char *a1)
{
  CFRunLoopRef Current;
  NSObject *v3;
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  const char *v11;
  std::__shared_weak_count *v12;
  NSObject *v13;
  int v14;
  int v15;
  _BOOL4 v16;
  uint64_t v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  int v53;
  int v54;
  _BOOL4 v55;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  char *v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  uint8_t buf[4];
  _BYTE v80[26];
  const char *v81;
  _DWORD v82[2];
  __int16 v83;
  int v84;
  __int16 v85;
  _BOOL4 v86;
  __int16 v87;
  uint64_t v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current == *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v58 = off_1ECEDEE90;
    a1 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v80 = 0;
      *(_WORD *)&v80[4] = 2082;
      *(_QWORD *)&v80[6] = "";
      *(_WORD *)&v80[14] = 2082;
      *(_QWORD *)&v80[16] = "assert";
      *(_WORD *)&v80[24] = 2081;
      v81 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v58, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v59 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v80 = 0;
      *(_WORD *)&v80[4] = 2082;
      *(_QWORD *)&v80[6] = "";
      *(_WORD *)&v80[14] = 2082;
      *(_QWORD *)&v80[16] = "assert";
      *(_WORD *)&v80[24] = 2081;
      v81 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v59, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v60 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v80 = 0;
      *(_WORD *)&v80[4] = 2082;
      *(_QWORD *)&v80[6] = "";
      *(_WORD *)&v80[14] = 2082;
      *(_QWORD *)&v80[16] = "assert";
      *(_WORD *)&v80[24] = 2081;
      v81 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v60, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] invalidateDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v63 = 187;
    v64 = "invalidateDeviceServiceRefs";
    v62 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/IO/CLIoHidInterface.mm";
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
LABEL_3:
  v3 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Invalidating hid service refs", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    LOWORD(v82[0]) = 0;
    LODWORD(v63) = 2;
    v61 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::invalidateDeviceServiceRefs()", "CoreLocation: %s\n", v61);
    if (v61 != (char *)buf)
      free(v61);
  }
  v4 = (uint64_t *)*((_QWORD *)a1 + 1);
  v5 = (uint64_t *)*((_QWORD *)a1 + 2);
  if (v4 != v5)
  {
    v65 = v5;
    do
    {
      v6 = (std::__shared_weak_count *)v4[1];
      if (v6)
      {
        v7 = *v4;
        p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v68 = v6;
        v10 = std::__shared_weak_count::lock(v6);
        if (v10)
        {
          v12 = v10;
          if (v7)
          {
            v66 = v10;
            v67 = v4;
            sub_18F1F383C(v7, v11);
            if (qword_1ECEDEE98 != -1)
              dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
            v13 = off_1ECEDEE90;
            if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
            {
              v15 = *(_DWORD *)(v7 + 16);
              v14 = *(_DWORD *)(v7 + 20);
              v16 = *(_QWORD *)(v7 + 48) != 0;
              v17 = *(_QWORD *)(v7 + 24);
              *(_DWORD *)buf = 67240961;
              *(_DWORD *)v80 = v14;
              *(_WORD *)&v80[4] = 1026;
              *(_DWORD *)&v80[6] = v15;
              *(_WORD *)&v80[10] = 1026;
              *(_DWORD *)&v80[12] = v16;
              *(_WORD *)&v80[16] = 2049;
              *(_QWORD *)&v80[18] = v17;
              _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Device,hidUsagePage,%{public}d,hidUsage,%{public}d,hasCallback,%{public}d,serviceRef,%{private}p", buf, 0x1Eu);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE98 != -1)
                dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
              v54 = *(_DWORD *)(v7 + 16);
              v53 = *(_DWORD *)(v7 + 20);
              v55 = *(_QWORD *)(v7 + 48) != 0;
              v56 = *(_QWORD *)(v7 + 24);
              v82[0] = 67240961;
              v82[1] = v53;
              v83 = 1026;
              v84 = v54;
              v85 = 1026;
              v86 = v55;
              v87 = 2049;
              v88 = v56;
              LODWORD(v63) = 30;
              v57 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::Device::print() const", "CoreLocation: %s\n", v57);
              if (v57 != (char *)buf)
                free(v57);
            }
            if (qword_1ECEDEE98 != -1)
              dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
            if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
            {
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v19 = *(void **)(v7 + 160);
              v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v18, (uint64_t)&v69, (uint64_t)v82, 16);
              if (v23)
              {
                v24 = *(_QWORD *)v70;
                do
                {
                  v25 = 0;
                  do
                  {
                    if (*(_QWORD *)v70 != v24)
                      objc_enumerationMutation(v19);
                    v26 = *(_QWORD *)(*((_QWORD *)&v69 + 1) + 8 * v25);
                    v27 = (void *)objc_msgSend_objectForKeyedSubscript_(*(void **)(v7 + 160), v20, v26, v21, v22, v62, v63, v64);
                    if (qword_1ECEDEE98 != -1)
                      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                    v28 = off_1ECEDEE90;
                    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
                    {
                      v33 = objc_msgSend_value(v27, v29, v30, v31, v32);
                      v38 = objc_msgSend_dirty(v27, v34, v35, v36, v37);
                      *(_DWORD *)buf = 138543874;
                      *(_QWORD *)v80 = v26;
                      *(_WORD *)&v80[8] = 2114;
                      *(_QWORD *)&v80[10] = v33;
                      *(_WORD *)&v80[18] = 1026;
                      *(_DWORD *)&v80[20] = v38;
                      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] \tProperty: %{public}@ = %{public}@,dirty,%{public}d", buf, 0x1Cu);
                    }
                    if (sub_18F1FCA08(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1ECEDEE98 != -1)
                        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                      v43 = objc_msgSend_value(v27, v39, v40, v41, v42);
                      v48 = objc_msgSend_dirty(v27, v44, v45, v46, v47);
                      v73 = 138543874;
                      v74 = v26;
                      v75 = 2114;
                      v76 = v43;
                      v77 = 1026;
                      v78 = v48;
                      LODWORD(v63) = 28;
                      v49 = (char *)_os_log_send_and_compose_impl();
                      sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::Device::printProperties() const", "CoreLocation: %s\n", v49);
                      if (v49 != (char *)buf)
                        free(v49);
                    }
                    ++v25;
                  }
                  while (v23 != v25);
                  v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v69, (uint64_t)v82, 16);
                  v23 = v50;
                }
                while (v50);
              }
            }
            v12 = v66;
            v4 = v67;
            v5 = v65;
          }
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v52 = __ldaxr(p_shared_owners);
          while (__stlxr(v52 - 1, p_shared_owners));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::__shared_weak_count::__release_weak(v68);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_18F1F3810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_18F2A8438((uint64_t)&a21);
  std::__shared_weak_count::__release_weak(a18);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1F383C(uint64_t a1, const char *a2)
{
  const void *v3;
  void *v4;
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v4 = *(void **)(a1 + 160);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, a2, (uint64_t)&v16, (uint64_t)v20, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v17;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v17 != v10)
          objc_enumerationMutation(v4);
        v12 = (void *)objc_msgSend_objectForKeyedSubscript_(*(void **)(a1 + 160), v6, *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v11), v7, v8);
        objc_msgSend_setDirty_(v12, v13, 1, v14, v15);
        ++v11;
      }
      while (v9 != v11);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v6, (uint64_t)&v16, (uint64_t)v20, 16);
      v9 = result;
    }
    while (result);
  }
  return result;
}

void sub_18F1F393C(const char *a1, __IOHIDServiceClient *a2)
{
  CFRunLoopRef Current;
  NSObject *v4;
  CFArrayRef v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __IOHIDServiceClient *v12;
  const char *v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  id v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  unint64_t *p_shared_weak_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  char *v48;
  void *context;
  CFArrayRef obj;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  __IOHIDServiceClient *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  uint8_t v64[128];
  _BYTE buf[18];
  __int16 v66;
  _BYTE v67[10];
  const char *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current == *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v45 = off_1ECEDEE90;
    a1 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v66 = 2082;
      *(_QWORD *)v67 = "assert";
      *(_WORD *)&v67[8] = 2081;
      v68 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v45, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v46 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v66 = 2082;
      *(_QWORD *)v67 = "assert";
      *(_WORD *)&v67[8] = 2081;
      v68 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v47 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      v66 = 2082;
      *(_QWORD *)v67 = "assert";
      *(_WORD *)&v67[8] = 2081;
      v68 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v47, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] refreshDeviceServiceRefs should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
LABEL_3:
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Refreshing service refs", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    LOWORD(v56) = 0;
    v48 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "CoreLocation: %s\n", v48);
    if (v48 != buf)
      free(v48);
  }
  v5 = IOHIDEventSystemClientCopyServices(*((IOHIDEventSystemClientRef *)a1 + 5));
  obj = v5;
  if (v5)
  {
    context = (void *)MEMORY[0x194001B4C](v5, v6, v7);
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v9 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v52, (uint64_t)v64, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v53;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v53 != v10)
            objc_enumerationMutation(obj);
          v12 = *(__IOHIDServiceClient **)(*((_QWORD *)&v52 + 1) + 8 * v11);
          if (qword_1ECEDEE98 != -1)
            dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
          if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
          {
            v14 = (id)IOHIDServiceClientCopyProperty(v12, CFSTR("PrimaryUsagePage"));
            v19 = objc_msgSend_intValue(v14, v15, v16, v17, v18);
            v20 = (id)IOHIDServiceClientCopyProperty(v12, CFSTR("PrimaryUsage"));
            v25 = objc_msgSend_intValue(v20, v21, v22, v23, v24);
            v26 = (id)IOHIDServiceClientCopyProperty(v12, CFSTR("LocationID"));
            v31 = objc_msgSend_intValue(v26, v27, v28, v29, v30);
            if (qword_1ECEDEE98 != -1)
              dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
            v32 = off_1ECEDEE90;
            if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134284289;
              *(_QWORD *)&buf[4] = v12;
              *(_WORD *)&buf[12] = 1026;
              *(_DWORD *)&buf[14] = v19;
              v66 = 1026;
              *(_DWORD *)v67 = v25;
              *(_WORD *)&v67[4] = 1026;
              *(_DWORD *)&v67[6] = v31;
              _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Check service ref %{private}p with usage pair {%{public}d, %{public}d} locationID %{public}d as a potential match", buf, 0x1Eu);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE98 != -1)
                dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
              v56 = 134284289;
              v57 = v12;
              v58 = 1026;
              v59 = v19;
              v60 = 1026;
              v61 = v25;
              v62 = 1026;
              v63 = v31;
              v43 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::refreshDeviceServiceRefs(const IOHIDServiceClientRef)", "CoreLocation: %s\n", v43);
              if (v43 != buf)
                free(v43);
            }
          }
          if (v12 != a2)
          {
            v34 = *((_QWORD *)a1 + 1);
            v33 = *((_QWORD *)a1 + 2);
            while (v34 != v33)
            {
              v35 = *(std::__shared_weak_count **)(v34 + 8);
              if (v35)
              {
                v36 = *(_QWORD **)v34;
                p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
                do
                  v38 = __ldxr(p_shared_weak_owners);
                while (__stxr(v38 + 1, p_shared_weak_owners));
                v39 = std::__shared_weak_count::lock(v35);
                *(_QWORD *)&buf[8] = v39;
                if (v39)
                {
                  v40 = v39;
                  *(_QWORD *)buf = v36;
                  if (v36)
                  {
                    if ((sub_18F1F40DC((uint64_t)v36, v12) & 1) != 0)
                    {
                      sub_18F1F46B4(v36, (char *)v12, 0);
                      if (v36[10])
                        IOHIDServiceClientRegisterRemovalCallback();
                    }
                  }
                  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
                  do
                    v42 = __ldaxr(p_shared_owners);
                  while (__stlxr(v42 - 1, p_shared_owners));
                  if (!v42)
                  {
                    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
                    std::__shared_weak_count::__release_weak(v40);
                  }
                }
                std::__shared_weak_count::__release_weak(v35);
              }
              v34 += 16;
            }
          }
          ++v11;
        }
        while (v11 != v9);
        v44 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v52, (uint64_t)v64, 16);
        v9 = v44;
      }
      while (v44);
    }
    objc_autoreleasePoolPop(context);

  }
}

void sub_18F1F40B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  std::__shared_weak_count *v45;

  sub_18F2A8438((uint64_t)&a45);
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1F40DC(uint64_t a1, IOHIDServiceClientRef service)
{
  uint64_t result;

  result = IOHIDServiceClientConformsTo(service, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 16));
  if ((_DWORD)result)
    return sub_18F1F4120(service, *(void **)(a1 + 152));
  return result;
}

uint64_t sub_18F1F4120(__IOHIDServiceClient *a1, void *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  const void *v12;
  NSObject *v13;
  CFTypeRef v14;
  const void *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  NSObject *v19;
  char *v20;
  NSObject *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  const __CFString *v28;
  __int16 v29;
  const void *v30;
  __int16 v31;
  __IOHIDServiceClient *v32;
  uint8_t buf[4];
  const __CFString *v34;
  __int16 v35;
  const void *v36;
  __int16 v37;
  __IOHIDServiceClient *v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, (const char *)a2, (uint64_t)&v23, (uint64_t)v39, 16);
  if (!v4)
    return 1;
  v8 = v4;
  v9 = *(_QWORD *)v24;
LABEL_3:
  v10 = 0;
  while (1)
  {
    if (*(_QWORD *)v24 != v9)
      objc_enumerationMutation(a2);
    v11 = *(const __CFString **)(*((_QWORD *)&v23 + 1) + 8 * v10);
    v12 = (const void *)objc_msgSend_objectForKeyedSubscript_(a2, v5, (uint64_t)v11, v6, v7);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v13 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543875;
      v34 = v11;
      v35 = 2113;
      v36 = v12;
      v37 = 2049;
      v38 = a1;
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Checking matching property %{public}@ = %{private}@ for service ref %{private}p", buf, 0x20u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v27 = 138543875;
      v28 = v11;
      v29 = 2113;
      v30 = v12;
      v31 = 2049;
      v32 = a1;
      v16 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v16);
      if (v16 != (char *)buf)
        free(v16);
    }
    v14 = IOHIDServiceClientCopyProperty(a1, v11);
    if (!v14)
      break;
    v15 = v14;
    if (!CFEqual(v14, v12))
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v21 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138543875;
        v34 = v11;
        v35 = 2114;
        v36 = v15;
        v37 = 2049;
        v38 = a1;
        _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Property mismatch! %{public}@ = %{public}@ for service ref %{private}p", buf, 0x20u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        v27 = 138543875;
        v28 = v11;
        v29 = 2114;
        v30 = v15;
        v31 = 2049;
        v32 = a1;
        v22 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v22);
        if (v22 != (char *)buf)
          free(v22);
      }
      CFRelease(v15);
      return 0;
    }
    CFRelease(v15);
    if (v8 == ++v10)
    {
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(a2, v5, (uint64_t)&v23, (uint64_t)v39, 16);
      v8 = v17;
      result = 1;
      if (!v8)
        return result;
      goto LABEL_3;
    }
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
  v19 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543875;
    v34 = v11;
    v35 = 2114;
    v36 = v12;
    v37 = 2049;
    v38 = a1;
    _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Invalid matching property %{public}@ = %{public}@ for service ref %{private}p", buf, 0x20u);
  }
  result = sub_18F1FCA08(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v27 = 138543875;
    v28 = v11;
    v29 = 2114;
    v30 = v12;
    v31 = 2049;
    v32 = a1;
    v20 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "static BOOL CLIoHidInterface::Device::serviceMatchesProperties(IOHIDServiceClientRef, NSDictionary<NSString *,id> *)", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
    return 0;
  }
  return result;
}

void sub_18F1F46B4(void *a1, char *a2, int a3)
{
  const char *v3;
  CFRunLoopRef Current;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  int v16;
  int v17;
  uint64_t v18;
  const __CFNumber *RegistryID;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v32[5];
  int v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[8];
  __int16 v44;
  _BYTE v45[34];
  uint64_t v46;

  LODWORD(v3) = a3;
  v46 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v21 = off_1ECEDEE90;
    v14 = "l22MagneticAccessoryType2E";
    a2 = "assert";
    v3 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v44 = 2082;
      *(_QWORD *)v45 = "";
      *(_WORD *)&v45[8] = 2082;
      *(_QWORD *)&v45[10] = "assert";
      *(_WORD *)&v45[18] = 2081;
      *(_QWORD *)&v45[20] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v22 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v44 = 2082;
      *(_QWORD *)v45 = "";
      *(_WORD *)&v45[8] = 2082;
      *(_QWORD *)&v45[10] = "assert";
      *(_WORD *)&v45[18] = 2081;
      *(_QWORD *)&v45[20] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] Should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    a1 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      v44 = 2082;
      *(_QWORD *)v45 = "";
      *(_WORD *)&v45[8] = 2082;
      *(_QWORD *)&v45[10] = "assert";
      *(_WORD *)&v45[18] = 2081;
      *(_QWORD *)&v45[20] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_43:
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
LABEL_19:
    v15 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *((_DWORD *)a1 + 4);
      v16 = *((_DWORD *)a1 + 5);
      v18 = *((_QWORD *)a1 + 19);
      *(_DWORD *)buf = 67240963;
      *(_DWORD *)&buf[4] = v16;
      v44 = 1026;
      *(_DWORD *)v45 = v17;
      *(_WORD *)&v45[4] = 2049;
      *(_QWORD *)&v45[6] = a2;
      *(_WORD *)&v45[14] = 2113;
      *(_QWORD *)&v45[16] = v18;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service ref with usage pair {%{public}d, %{public}d} is %{private}p with matching properties %{private}@", buf, 0x22u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (*((_QWORD *)v14 + 467) != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v24 = *((_DWORD *)a1 + 4);
      v23 = *((_DWORD *)a1 + 5);
      v25 = (char *)*((_QWORD *)a1 + 19);
      v33 = 67240963;
      v34 = v23;
      v35 = 1026;
      v36 = v24;
      v37 = 2049;
      v38 = a2;
      v39 = 2113;
      v40 = v25;
      v26 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
    *((_QWORD *)a1 + 3) = CFRetain(a2);
    if (!(_DWORD)v3)
      goto LABEL_24;
    goto LABEL_23;
  }
  v7 = (char *)*((_QWORD *)a1 + 3);
  if (v7 == a2)
    return;
  if (!v7)
  {
    v14 = (char *)CMVO2MaxRetrocomputeState;
    if (qword_1ECEDEE98 == -1)
      goto LABEL_19;
    goto LABEL_43;
  }
  if (!(_DWORD)v3)
    return;
  if (*((_BYTE *)a1 + 40)
    && (sub_18F205968(*((__IOHIDServiceClient **)a1 + 3), CFSTR("ReportInterval"), &unk_1E298C4A0) & 1) == 0)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v8 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] Failed to stop streaming from the old service before switching to the new one", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      LOWORD(v33) = 0;
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
  v9 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    v11 = *((_DWORD *)a1 + 4);
    v10 = *((_DWORD *)a1 + 5);
    v12 = *((_QWORD *)a1 + 19);
    *(_DWORD *)buf = 67241219;
    *(_DWORD *)&buf[4] = v10;
    v44 = 1026;
    *(_DWORD *)v45 = v11;
    *(_WORD *)&v45[4] = 2049;
    *(_QWORD *)&v45[6] = v7;
    *(_WORD *)&v45[14] = 2049;
    *(_QWORD *)&v45[16] = a2;
    *(_WORD *)&v45[24] = 2113;
    *(_QWORD *)&v45[26] = v12;
    _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Device,usagePage,%{public}d,usage,%{public}d,hidserviceref,old,%{private}p,new,%{private}p,matchingProperties,%{private}@", buf, 0x2Cu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v28 = *((_DWORD *)a1 + 4);
    v27 = *((_DWORD *)a1 + 5);
    v29 = *((_QWORD *)a1 + 19);
    v33 = 67241219;
    v34 = v27;
    v35 = 1026;
    v36 = v28;
    v37 = 2049;
    v38 = v7;
    v39 = 2049;
    v40 = a2;
    v41 = 2113;
    v42 = v29;
    v30 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "CoreLocation: %s\n", v30);
    if (v30 != (char *)buf)
      free(v30);
  }
  sub_18F1F383C((uint64_t)a1, v13);
  *((_QWORD *)a1 + 3) = CFRetain(a2);
LABEL_23:
  sub_18F204B88(*((const char **)a1 + 4));
LABEL_24:
  if (*((_QWORD *)a1 + 14))
  {
    *(_QWORD *)buf = 0;
    RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID((IOHIDServiceClientRef)a2);
    CFNumberGetValue(RegistryID, kCFNumberSInt64Type, buf);
    if (*(_QWORD *)buf != *((_QWORD *)a1 + 1))
      (*((void (**)(_QWORD))a1 + 14))(*((_QWORD *)a1 + 15));
  }
  if (*((_QWORD *)a1 + 8) && ((v3 & 1) != 0 || *((_BYTE *)a1 + 40)))
  {
    v20 = sub_18F204AE4();
    v32[0] = MEMORY[0x1E0C809B0];
    v32[1] = 3221225472;
    v32[2] = sub_18F4D4CA4;
    v32[3] = &unk_1E2955738;
    v32[4] = a1;
    sub_18F1F6514(v20, (uint64_t)v32);
  }
}

void sub_18F1F4EA8(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x194001B4C]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

uint64_t sub_18F1F4EDC(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return pthread_dependency_fulfill_np();
}

uint64_t sub_18F1F4F0C(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[8];
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v13 = 0;
  v14 = &v13;
  v15 = 0x2020000000;
  v16 = 0;
  v8 = sub_18F204AE4();
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_18F1F659C;
  v11[3] = &unk_1E2956E78;
  v11[4] = &v13;
  v11[5] = a1;
  v12 = a2;
  v11[6] = a3;
  *(double *)&v11[7] = a4;
  sub_18F1F5E28(v8, (uint64_t)v11);
  v9 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_18F1F4FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1F4FDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  result = objc_msgSend_initPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = result;
  return result;
}

void sub_18F1F52D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x1080C40E5CA5B2BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1F52FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 v6;
  const __CFString *v7;

  *(_BYTE *)a1 = 0;
  v6 = xmmword_18F5093A0;
  *(_OWORD *)(a1 + 8) = xmmword_18F5093A0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    v7 = (const __CFString *)objc_msgSend_copy(a2, (const char *)a2, a3, a4, a5);
    v6 = xmmword_18F5093A0;
  }
  else
  {
    v7 = CFSTR("BundleIdNotAvailable");
  }
  *(_QWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  return a1;
}

void sub_18F1F5360(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  NSObject *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  char *v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[44];
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v2 + 28) = v3;
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2952DA8);
  v4 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(float *)(a1 + 40);
    v6 = *(float *)(a1 + 44);
    v7 = *(float *)(a1 + 48);
    v8 = *(float *)(a1 + 52);
    v9 = *(float *)(a1 + 56);
    v10 = *(float *)(a1 + 60);
    v11 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 136316930;
    v36 = "GyroBias";
    v37 = 2048;
    v38 = v5;
    v39 = 2048;
    v40 = v6;
    v41 = 2048;
    v42 = v7;
    v43 = 2048;
    v44 = v8;
    v45 = 2048;
    v46 = v9;
    v47 = 2048;
    v48 = v10;
    v49 = 1024;
    v50 = v11;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d", buf, 0x4Eu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2952DA8);
    v27 = *(float *)(a1 + 40);
    v28 = *(float *)(a1 + 44);
    v29 = *(float *)(a1 + 48);
    v30 = *(float *)(a1 + 52);
    v31 = *(float *)(a1 + 56);
    v32 = *(float *)(a1 + 60);
    v33 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)v54 = 136316930;
    *(_QWORD *)&v54[4] = "GyroBias";
    *(_WORD *)&v54[12] = 2048;
    *(double *)&v54[14] = v27;
    *(_WORD *)&v54[22] = 2048;
    *(double *)&v54[24] = v28;
    *(_WORD *)&v54[32] = 2048;
    *(double *)&v54[34] = v29;
    *(_WORD *)&v54[42] = 2048;
    v55 = v30;
    v56 = 2048;
    v57 = v31;
    v58 = 2048;
    v59 = v32;
    v60 = 1024;
    v61 = v33;
    v34 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSensorFusionServiceAP::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke", "CoreLocation: %s\n", v34);
    if (v34 != (char *)buf)
      free(v34);
  }
  if (*(_BYTE *)(v2 + 73))
  {
    *(_QWORD *)v54 = &off_1E294C0C0;
    *(_QWORD *)&v54[8] = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v54[20] = *(_OWORD *)(a1 + 40);
    *(_QWORD *)&v54[36] = *(_QWORD *)(a1 + 56);
    LOBYTE(v55) = *(_BYTE *)(a1 + 64);
    v12 = sub_18F47400C();
    sub_18F475D9C(v12, (uint64_t)v54);
    sub_18F2B6BD0(buf);
    sub_18F2C703C(buf);
    v53 |= 1u;
    v51 = *(_QWORD *)&v54[8];
    v13 = v52;
    v14 = *(_DWORD *)(a1 + 40);
    *(_BYTE *)(v52 + 36) |= 1u;
    *(_DWORD *)(v13 + 8) = v14;
    v15 = v52;
    v16 = *(_DWORD *)(a1 + 44);
    *(_BYTE *)(v52 + 36) |= 2u;
    *(_DWORD *)(v15 + 12) = v16;
    v17 = v52;
    v18 = *(_DWORD *)(a1 + 48);
    *(_BYTE *)(v52 + 36) |= 4u;
    *(_DWORD *)(v17 + 16) = v18;
    v19 = v52;
    v20 = *(_DWORD *)(a1 + 52);
    *(_BYTE *)(v52 + 36) |= 0x10u;
    *(_DWORD *)(v19 + 24) = v20;
    v21 = v52;
    v22 = *(_DWORD *)(a1 + 56);
    *(_BYTE *)(v52 + 36) |= 0x20u;
    *(_DWORD *)(v21 + 28) = v22;
    v23 = v52;
    v24 = *(_DWORD *)(a1 + 60);
    *(_BYTE *)(v52 + 36) |= 0x40u;
    *(_DWORD *)(v23 + 32) = v24;
    v25 = v52;
    v26 = *(unsigned __int8 *)(a1 + 64);
    *(_BYTE *)(v52 + 36) |= 8u;
    *(_DWORD *)(v25 + 20) = v26;
    sub_18F2B9670((PB::Base *)buf);
  }
  if (*(_BYTE *)(v2 + 25))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, a1 + 40, a1 + 52);
}

void sub_18F1F573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1F5758(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_startDeviceMotionUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, *(_QWORD *)(a1 + 40), 0, 0);
}

uint64_t sub_18F1F576C(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setDeviceMotionCallback_info_interval_fsync_, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64));
}

uint64_t sub_18F1F5784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setDeviceMotionUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F1F5794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_didBecomeActivePrivate_, *(_QWORD *)(a1 + 40), a4, a5);
}

void sub_18F1F57A0(uint64_t a1, float32x2_t *a2, float *a3)
{
  sub_18F1F57A8(a1 + 96, a2, a3);
}

void sub_18F1F57A8(uint64_t a1, float32x2_t *a2, float *a3)
{
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  float v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  float v20;
  uint64_t i;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  char *v28;
  float32x2_t v29;
  float v30;
  uint64_t v31;
  int v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  _DWORD v55[397];
  _BYTE v56[48];
  uint64_t v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
    v6 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v7 = a2->f32[0];
      v8 = a2->f32[1];
      v9 = a2[1].f32[0];
      v10 = *a3;
      v11 = a3[1];
      v12 = a3[2];
      *(_DWORD *)buf = 134219264;
      v46 = v7;
      v47 = 2048;
      v48 = v8;
      v49 = 2048;
      v50 = v9;
      v51 = 2048;
      v52 = v10;
      v53 = 2048;
      v54 = v11;
      LOWORD(v55[0]) = 2048;
      *(double *)((char *)v55 + 2) = v12;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEBUG, "[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f", buf, 0x3Eu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
      v22 = a2->f32[0];
      v23 = a2->f32[1];
      v24 = a2[1].f32[0];
      v25 = *a3;
      v26 = a3[1];
      v27 = a3[2];
      v33 = 134219264;
      v34 = v22;
      v35 = 2048;
      v36 = v23;
      v37 = 2048;
      v38 = v24;
      v39 = 2048;
      v40 = v25;
      v41 = 2048;
      v42 = v26;
      v43 = 2048;
      v44 = v27;
      v28 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
  }
  if (*(_BYTE *)(a1 + 10))
  {
    v13 = 0;
    v31 = *(_QWORD *)a3;
    v32 = *((_DWORD *)a3 + 2);
    do
    {
      v14 = *(float *)((char *)&v31 + v13);
      if (v14 < 0.000001)
        v14 = 0.000001;
      *(float *)((char *)&v31 + v13) = v14;
      v13 += 4;
    }
    while (v13 != 12);
    v15 = *(_DWORD *)(a1 + 152);
    if (v15 >= 1)
    {
      v16 = 0;
      if (v15 >= 50)
        v17 = 50;
      else
        v17 = *(_DWORD *)(a1 + 152);
      v18 = v31;
      v19 = v32;
      do
      {
        v29 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(*a2), *(float64x2_t *)(a1 + 88)));
        v20 = a2[1].f32[0] - *(double *)(a1 + 104);
        v30 = v20;
        bzero(buf, 0x48uLL);
        *(_DWORD *)((char *)&v52 + 2) = 1065353216;
        v55[0] = 1065353216;
        v55[4] = 1065353216;
        v57 = v18;
        v58 = v19;
        sub_18F1F5B7C(&v33, (uint64_t *)(a1 + 112), (uint64_t)buf, (uint64_t)&v57, (uint64_t)&v29, 6, 3, (uint64_t)v56);
        for (i = 0; i != 24; i += 8)
          *(double *)(a1 + i + 88) = *(double *)((char *)&v38 + i) + *(double *)(a1 + i + 88);
        ++v16;
      }
      while (v16 != v17);
    }
    *(_DWORD *)(a1 + 152) = 0;
  }
  else
  {
    *(float64x2_t *)(a1 + 88) = vcvtq_f64_f32(*a2);
    *(double *)(a1 + 104) = a2[1].f32[0];
    *(_BYTE *)(a1 + 10) = 1;
  }
}

void sub_18F1F5B7C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  float v30;
  float v31;
  float *v32;
  double *v33;
  uint64_t v34;
  float v35;

  bzero(a1, 8 * a6);
  if (a7 >= 1)
  {
    v13 = 0;
    v14 = a8 + 4 * a6;
    do
    {
      sub_18F1F5D30(a8, *a2, a3 + 4 * v13, a7, a6);
      if (a6 >= 1)
      {
        v15 = (float *)a2[1];
        v16 = v15;
        v17 = (float *)a8;
        v18 = a6;
        do
        {
          v19 = *v16++;
          v17[a6] = v19 * *v17;
          ++v17;
          --v18;
        }
        while (v18);
        v20 = 0;
        v21 = *(float *)(a5 + 4 * v13);
        v22 = *(float *)(a4 + 4 * v13);
        v23 = *a2;
        v24 = 1.0 / v22;
        do
        {
          v25 = v22;
          v26 = *(float *)(a8 + 4 * v20);
          v22 = v22 + (float)(v26 * *(float *)(v14 + 4 * v20));
          v15[v20] = v15[v20] * (float)(v25 * (float)(1.0 / v22));
          if (v20)
          {
            v27 = 0;
            v28 = -(float)(v26 * v24);
            v29 = v23 + 4 * (((int)v20 - 1) * (int)v20 / 2);
            do
            {
              v30 = *(float *)(v29 + 4 * v27);
              *(float *)(v29 + 4 * v27) = v30 + (float)(*(float *)(v14 + 4 * v27) * v28);
              *(float *)(v14 + 4 * v27) = *(float *)(v14 + 4 * v27) + (float)(*(float *)(v14 + 4 * v20) * v30);
              ++v27;
            }
            while (v20 != v27);
          }
          ++v20;
          v24 = 1.0 / v22;
        }
        while (v20 != a6);
        v31 = v21 * (float)(1.0 / v22);
        v32 = (float *)(a8 + 4 * a6);
        v33 = (double *)a1;
        v34 = a6;
        do
        {
          v35 = *v32++;
          *v33 = *v33 + (float)(v31 * v35);
          ++v33;
          --v34;
        }
        while (v34);
      }
      ++v13;
    }
    while (v13 != a7);
  }
}

uint64_t sub_18F1F5D30(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  float *v6;
  float v7;
  float *v8;
  uint64_t v9;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = (float *)(a3 - 4 * a4);
    do
    {
      v7 = *(float *)(a3 + 4 * v5 * a4);
      *(float *)(result + 4 * v5) = v7;
      if (v5)
      {
        v8 = v6;
        v9 = v5;
        do
        {
          v7 = v7 + (float)(*v8 * *(float *)(a2 - 4 + 4 * (((int)v5 - 1) * (int)v5 / 2) + 4 * v9));
          *(float *)(result + 4 * v5) = v7;
          v8 -= a4;
        }
        while (v9-- > 1);
      }
      ++v5;
      v6 += a4;
    }
    while (v5 != a5);
  }
  return result;
}

void sub_18F1F5DB4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD v7[6];
  int v8;

  v6 = sub_18F204AE4();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = sub_18F1F5EE0;
  v7[3] = &unk_1E2956E98;
  v8 = a2;
  v7[4] = a1;
  v7[5] = a3;
  sub_18F1F5E28(v6, (uint64_t)v7);
}

void sub_18F1F5E28(uint64_t a1, uint64_t a2)
{
  uint64_t inited;
  void *v4;
  _QWORD v5[6];
  char v6;

  if (CFRunLoopGetCurrent() == *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    v4 = (void *)MEMORY[0x194001B4C]();
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    objc_autoreleasePoolPop(v4);
  }
  else
  {
    inited = pthread_dependency_init_np();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_18F1F4EDC;
    v5[3] = &unk_1E2955AA8;
    v5[4] = a2;
    v5[5] = &v6;
    sub_18F1F6514(inited, (uint64_t)v5);
    pthread_dependency_wait_np();
  }
}

uint64_t *sub_18F1F5EE0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *result;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  double v24;
  double v25;
  double *v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;

  v1 = *(int *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = v3[2];
  v5 = v4 + 80 * (int)v1;
  v8 = *(uint64_t **)(v5 + 40);
  v7 = (uint64_t *)(v5 + 40);
  v6 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = (uint64_t **)(v7 - 1);
  v10 = v7;
  v11 = v6;
  do
  {
    v12 = v11[4];
    v13 = v12 >= v2;
    if (v12 >= v2)
      v14 = (uint64_t **)v11;
    else
      v14 = (uint64_t **)(v11 + 1);
    if (v13)
      v10 = v11;
    v11 = *v14;
  }
  while (*v14);
  if (v10 != v7 && v10[4] <= v2)
  {
    v19 = (uint64_t *)v10[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      v21 = v10;
      do
      {
        v20 = (uint64_t *)v21[2];
        v22 = *v20 == (_QWORD)v21;
        v21 = v20;
      }
      while (!v22);
    }
    if (*v9 == v10)
      *v9 = v20;
    --v7[1];
    sub_18F3BEC40(v6, v10);
    operator delete(v10);
    v23 = v3[2];
    v24 = sub_18F1F63F4(v23, v1);
    v32 = v24;
    v25 = sub_18F1F6484(v23, v1);
    v31 = v25;
    v26 = (double *)(v23 + 80 * (int)v1);
    if (v24 != *v26)
    {
      *v26 = v24;
      *(double *)(v3[2] + 80 * (int)v1 + 16) = (*(double (**)(_QWORD *, uint64_t, double *))(*v3 + 16))(v3, v1, &v32);
      sub_18F1F6130((uint64_t)v3, v1);
      v23 = v3[2];
    }
    v27 = v23 + 80 * (int)v1;
    v29 = *(double *)(v27 + 8);
    v28 = (double *)(v27 + 8);
    if (v25 != v29)
    {
      *v28 = v25;
      v30 = (*(double (**)(_QWORD *, uint64_t, double *))(*v3 + 24))(v3, v1, &v31);
      v23 = v3[2];
      *(double *)(v23 + 80 * (int)v1 + 24) = v30;
    }
    return (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*v3 + 40))(v3, v1, *(_QWORD *)(v23 + 80 * (int)v1 + 48) + 1);
  }
  else
  {
LABEL_12:
    v15 = v4 + 80 * (int)v1;
    v16 = (uint64_t *)(v15 + 56);
    for (result = *(uint64_t **)(v15 + 64); result != v16; result = (uint64_t *)result[1])
    {
      if (result[2] == v2)
      {
        if (result != v16)
        {
          v18 = *result;
          *(_QWORD *)(v18 + 8) = result[1];
          *(_QWORD *)result[1] = v18;
          --v16[2];
          operator delete(result);
          return (uint64_t *)(*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*v3 + 32))(v3, v1, *(_QWORD *)(v3[2] + 80 * (int)v1 + 72));
        }
        return result;
      }
    }
  }
  return result;
}

void sub_18F1F6130(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  double v7;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint8_t buf[4];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 + 80 * a2;
  v6 = *(_QWORD **)(v3 + 32);
  v4 = v3 + 32;
  v5 = v6;
  v7 = *(double *)(v4 - 16);
  if (v7 <= 0.0)
  {
    if (v5 != (_QWORD *)(v4 + 8))
    {
      do
      {
        *((_DWORD *)v5 + 11) = 1;
        v17 = (_QWORD *)v5[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v5[2];
            v15 = *v18 == (_QWORD)v5;
            v5 = v18;
          }
          while (!v15);
        }
        v5 = v18;
      }
      while (v18 != (_QWORD *)(v4 + 8));
    }
  }
  else if (v5 != (_QWORD *)(v2 + 80 * a2 + 40))
  {
    do
    {
      if (v7 <= 0.0)
      {
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
        v10 = off_1ECEDEE90;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 16);
          *(_DWORD *)buf = 134217984;
          v20 = v11;
          _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "CLMotionNotifier::updateSamplePeriod UpdateInterval:%f", buf, 0xCu);
        }
        if (sub_18F1FCA08(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE98 != -1)
            dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
          v16 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 0, "void CLMotionNotifier::updateSamplePeriods(int)", "CoreLocation: %s\n", v16);
          if (v16 != (char *)buf)
            free(v16);
        }
      }
      v12 = *(_QWORD *)(a1 + 16);
      v7 = *(double *)(v12 + 80 * a2 + 16);
      *((_DWORD *)v5 + 11) = llround(*((double *)v5 + 6) / v7);
      v13 = (_QWORD *)v5[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v5[2];
          v15 = *v14 == (_QWORD)v5;
          v5 = v14;
        }
        while (!v15);
      }
      v5 = v14;
    }
    while (v14 != (_QWORD *)(v12 + 80 * a2 + 40));
  }
}

double sub_18F1F63F4(uint64_t a1, int a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double result;
  double v6;
  double *v8;
  double *v9;
  BOOL v10;

  v2 = a1 + 80 * a2;
  v3 = *(double **)(v2 + 32);
  v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    result = 1.79769313e308;
  }
  else
  {
    result = 1.79769313e308;
    do
    {
      v6 = v3[6];
      if (v6 < result && v6 > 0.0)
        result = v3[6];
      v8 = (double *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (double *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308)
    return 0.0;
  return result;
}

double sub_18F1F6484(uint64_t a1, int a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double result;
  double v6;
  double *v8;
  double *v9;
  BOOL v10;

  v2 = a1 + 80 * a2;
  v3 = *(double **)(v2 + 32);
  v4 = (double *)(v2 + 40);
  if (v3 == v4)
  {
    result = 1.79769313e308;
  }
  else
  {
    result = 1.79769313e308;
    do
    {
      v6 = v3[7];
      if (v6 < result && v6 > 0.0)
        result = v3[7];
      v8 = (double *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(double **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (double *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  if (result == 1.79769313e308)
    return 0.0;
  return result;
}

void sub_18F1F6514(uint64_t a1, uint64_t a2)
{
  __CFRunLoop *v2;
  const void *v3;
  _QWORD block[5];

  v2 = *(__CFRunLoop **)qword_1ECEDFE08;
  v3 = (const void *)*MEMORY[0x1E0C9B280];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F1F4EA8;
  block[3] = &unk_1E2955B10;
  block[4] = a2;
  CFRunLoopPerformBlock(v2, v3, block);
  CFRunLoopWakeUp(*(CFRunLoopRef *)qword_1ECEDFE08);
}

double sub_18F1F6594()
{
  return -1.0;
}

void sub_18F1F659C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned int v5;
  double *v6;
  double v7;
  double v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  NSObject *v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  uint64_t v26;
  NSObject *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  double v33;
  int v34;
  int v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  uint8_t buf[8];
  _BYTE v41[24];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 64);
  v3 = *(_QWORD **)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v4 + 24))(v4);
  v6 = (double *)(a1 + 56);
  v7 = *(double *)(a1 + 56);
  v8 = v7 * (double)v5;
  v33 = v8;
  if (v7 != 0.0)
  {
    if (v7 >= 0.0)
    {
      v14 = v3[2];
      if (v8 > 0.0
        && ((v15 = v14 + 80 * (int)v2, v17 = *(double *)(v15 + 8), v16 = (double *)(v15 + 8), v18 = v17, v8 < v17)
         || v18 <= 0.0))
      {
        *v16 = v8;
        v20 = (*(double (**)(_QWORD *, uint64_t, double *))(*v3 + 24))(v3, v2, &v33);
        v14 = v3[2];
        *(double *)(v14 + 80 * (int)v2 + 24) = v20;
        v19 = *v6;
        v8 = v33;
      }
      else
      {
        v19 = v7;
      }
      v21 = (double *)(v14 + 80 * (int)v2);
      if (v19 < *v21 || *v21 <= 0.0)
      {
        *v21 = v19;
        v25 = (*(double (**)(_QWORD *, uint64_t, uint64_t))(*v3 + 16))(v3, v2, a1 + 56);
        v26 = v3[2] + 80 * (int)v2;
        *(double *)(v26 + 16) = v25;
        *(_QWORD *)buf = v4;
        *(_QWORD *)v41 = 0x100000000;
        *(double *)&v41[8] = v19;
        *(double *)&v41[16] = v8;
        sub_18F1F6C0C((uint64_t *)(v26 + 32), v4, (uint64_t)buf);
        sub_18F1F6130((uint64_t)v3, v2);
      }
      else
      {
        if (*(double *)(v14 + 80 * (int)v2 + 16) <= 0.0)
        {
          if (qword_1ECEDEE98 != -1)
            dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
          v22 = off_1ECEDEE90;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_FAULT, "CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!", buf, 2u);
          }
          if (sub_18F1FCA08(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE98 != -1)
              dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
            LOWORD(v34) = 0;
            v32 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v32);
            if (v32 != (char *)buf)
              free(v32);
          }
        }
        v23 = v3[2] + 80 * (int)v2;
        v24 = llround(*v6 / *(double *)(v23 + 16));
        *(_QWORD *)buf = v4;
        *(_DWORD *)v41 = 0;
        *(_DWORD *)&v41[4] = v24;
        *(double *)&v41[8] = v19;
        *(double *)&v41[16] = v8;
        sub_18F1F6C0C((uint64_t *)(v23 + 32), v4, (uint64_t)buf);
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v3 + 40))(v3, v2, *(_QWORD *)(v3[2] + 80 * (int)v2 + 48) - 1);
    }
    else
    {
      v9 = (_QWORD *)(v3[2] + 80 * (int)v2);
      v10 = operator new(0x18uLL);
      v10[2] = v4;
      v11 = v9[7];
      v9 += 7;
      *v10 = v11;
      v10[1] = v9;
      *(_QWORD *)(v11 + 8) = v10;
      *v9 = v10;
      ++v9[2];
      (*(void (**)(_QWORD *, uint64_t))(*v3 + 32))(v3, v2);
    }
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
    v27 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
    {
      v28 = *v6;
      v29 = 0.0;
      if (*v6 > 0.0)
        v29 = 1.0 / v28;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v2;
      *(_WORD *)v41 = 2048;
      *(double *)&v41[2] = v28;
      *(_WORD *)&v41[10] = 2048;
      *(double *)&v41[12] = v29;
      _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_DEBUG, "CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)", buf, 0x1Cu);
    }
    if (!sub_18F1FCA08(115, 2))
      goto LABEL_35;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
    v30 = *v6;
    v31 = 0.0;
    if (*v6 > 0.0)
      v31 = 1.0 / v30;
    v34 = 67109632;
    v35 = v2;
    v36 = 2048;
    v37 = v30;
    v38 = 2048;
    v39 = v31;
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
LABEL_41:
    if (v13 != (char *)buf)
      free(v13);
    goto LABEL_35;
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
  v12 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_FAULT, "Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
    LOWORD(v34) = 0;
    v13 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "BOOL CLMotionNotifier::addDispatcherPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
    goto LABEL_41;
  }
LABEL_35:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v7 != 0.0;
}

uint64_t sub_18F1F6C00()
{
  return 1;
}

uint64_t *sub_18F1F6C0C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = operator new(0x40uLL);
    v9[4] = *(_QWORD *)a3;
    v9[5] = *(_QWORD *)(a3 + 8);
    *((_OWORD *)v9 + 3) = *(_OWORD *)(a3 + 16);
    *v9 = 0;
    v9[1] = 0;
    v9[2] = v7;
    *v6 = v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = v9;
    }
    result = sub_18F3BE62C((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

double sub_18F1F6CD4(uint64_t a1, int a2, double *a3)
{
  double v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  double v12;
  char *v13;
  NSObject *v14;
  double v15;
  double v16;
  NSObject *v18;
  double v20;
  char *v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
    v14 = qword_1ECEDEE60;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_INFO))
    {
      v15 = *a3;
      *(_DWORD *)buf = 134349056;
      v23 = v15;
      _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_INFO, "Setting gyro temperature update interval to %{public}f", buf, 0xCu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
      v20 = *a3;
      *(_DWORD *)v29 = 134349056;
      *(double *)&v29[4] = v20;
      v21 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v21);
      if (v21 != (char *)buf)
        free(v21);
    }
    v16 = *a3;
    if (*a3 < 1.0 && v16 != 0.0)
      v16 = 1.0;
    *(double *)(a1 + 72) = v16;
    sub_18F203474(a1, *(_DWORD *)(a1 + 32));
    return *(double *)(a1 + 72);
  }
  else if (a2)
  {
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
    v18 = qword_1ECEDEE60;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v23) = a2;
      _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_FAULT, "Unrecognized gyro notification %{public}d", buf, 8u);
    }
    v6 = 0.0;
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
      *(_DWORD *)v29 = 67240192;
      *(_DWORD *)&v29[4] = a2;
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
      goto LABEL_37;
    }
  }
  else
  {
    *(double *)(a1 + 64) = *a3;
    sub_18F203474(a1, *(_DWORD *)(a1 + 32));
    v6 = sub_18F1F723C(a1, (double *)(a1 + 64));
    if (*(_BYTE *)(a1 + 96))
    {
      *(_QWORD *)v29 = &off_1E294C180;
      *(_QWORD *)&v29[8] = CFAbsoluteTimeGetCurrent();
      v7 = v6;
      *(float *)&v29[20] = v7;
      v8 = sub_18F47400C();
      sub_18F475D9C(v8, (uint64_t)v29);
      sub_18F2B6BD0(buf);
      sub_18F2C70A0(buf);
      v28 |= 1u;
      v26 = *(_QWORD *)&v29[8];
      v9 = v27;
      *(_BYTE *)(v27 + 12) |= 1u;
      *(float *)(v9 + 8) = v7;
      sub_18F2B9670((PB::Base *)buf);
    }
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
    v10 = qword_1ECEDEE60;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_INFO))
    {
      v11 = *a3;
      *(_DWORD *)buf = 134349312;
      v23 = v11;
      v24 = 2050;
      v25 = v6;
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_INFO, "Set gyro data update interval to %{public}f,dt,%{public}f", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
      v12 = *a3;
      *(_DWORD *)v29 = 134349312;
      *(double *)&v29[4] = v12;
      *(_WORD *)&v29[12] = 2050;
      *(double *)&v29[14] = v6;
      v13 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v13);
LABEL_37:
      if (v13 != (char *)buf)
        free(v13);
    }
  }
  return v6;
}

void sub_18F1F7220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

double sub_18F1F723C(uint64_t a1, double *a2)
{
  double result;

  if ((sub_18F1F7BFC() & 1) != 0 || (sub_18F1F7BFC() & 2) != 0)
  {
    result = *(double *)(a1 + 40);
    return result * *a2;
  }
  result = *a2;
  if (*a2 <= 0.01 && result > 0.0)
  {
    a2 = (double *)(a1 + 40);
    return result * *a2;
  }
  return result;
}

uint64_t sub_18F1F729C(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  char *v31;
  char *v32;
  unsigned int v33;
  uint64_t v34;
  char v35;
  int v36;
  unsigned int v37;
  uint8_t buf[1640];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F1F781C();
  if ((v2 & 4) != 0)
  {
    if (!*(_QWORD *)(a1 + 40))
    {
      v3 = (_QWORD *)sub_18F1E0F30();
      v34 = 0x30000FF00;
      v35 = 0;
      sub_18F1E9BC8(v3, (uint64_t)&v34, (uint64_t *)buf);
      sub_18F346DC8(a1 + 40, (__int128 *)buf);
      v8 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v11 = (void *)objc_msgSend_mutableCopy(&unk_1E298C0C8, v4, v5, v6, v7);
      v33 = 0;
      v12 = sub_18F204AE4();
      v13 = *(_QWORD *)(v12 + 24);
      v14 = *(std::__shared_weak_count **)(v12 + 32);
      *(_QWORD *)buf = v13;
      *(_QWORD *)&buf[8] = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
      v17 = sub_18F1E312C(v13, "IMULocationID", &v33);
      if (v33)
        v21 = 1;
      else
        v21 = v17;
      if (!v14)
        goto LABEL_18;
      v22 = (unint64_t *)&v14->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (v21)
          goto LABEL_19;
      }
      else
      {
LABEL_18:
        if (v21)
        {
LABEL_19:
          v24 = v33;
          v25 = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v18, v33, v19, v20);
          objc_msgSend_setObject_forKey_(v11, v26, v25, (uint64_t)CFSTR("LocationID"), v27);
          if (qword_1ECEDEE48 != -1)
            dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
          v28 = qword_1ECEDEE40;
          if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v24;
            _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEFAULT, "Setting Accel matching properties with IMULocationID %d", buf, 8u);
          }
          if (sub_18F1FCA08(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1ECEDEE48 != -1)
              dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
            v36 = 67109120;
            v37 = v24;
            v32 = (char *)_os_log_send_and_compose_impl();
            sub_18F419700("Generic", 1, 0, 2, "BOOL CLAccelerometer::openHidDevice()", "CoreLocation: %s\n", v32);
            if (v32 != (char *)buf)
              free(v32);
          }
        }
      }
      sub_18F1E4538(*(void **)(a1 + 40), v11);
      sub_18F203148(*(_QWORD *)(a1 + 40), (uint64_t)sub_18F1FC598, a1);

    }
  }
  else
  {
    if (qword_1ECEDEE48 != -1)
      dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
    v29 = qword_1ECEDEE40;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v29, OS_LOG_TYPE_FAULT, "Accel unavailable, unable to establish hid interface", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE48 != -1)
        dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
      LOWORD(v36) = 0;
      v31 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CLAccelerometer::openHidDevice()", "CoreLocation: %s\n", v31);
      if (v31 != (char *)buf)
        free(v31);
    }
  }
  return (v2 >> 2) & 1;
}

void sub_18F1F76F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F1F7758()
{
  if (qword_1ECEDEFC0 != -1)
    dispatch_once(&qword_1ECEDEFC0, &unk_1E2955F80);
  return byte_1ECEDEF51;
}

uint64_t sub_18F1F77DC()
{
  if (qword_1ECEDEF68 != -1)
    dispatch_once(&qword_1ECEDEF68, &unk_1E2952F48);
  return qword_1ECEDEF60;
}

uint64_t sub_18F1F781C()
{
  uint64_t result;
  int v1;
  BOOL v2;
  unsigned int v3;
  NSObject *v4;
  int v5;
  char *v6;
  NSObject *v7;
  int v8;
  uint8_t buf[4];
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEF70 != -1)
    dispatch_once(&qword_1ECEDEF70, &unk_1E2944F60);
  result = 0;
  v1 = dword_1ECEDEF5C;
  switch(dword_1ECEDEF5C)
  {
    case 0:
    case 259:
      if (qword_1EE16D988 != -1)
        dispatch_once(&qword_1EE16D988, &unk_1E2956080);
      v7 = qword_1EE16D990;
      if (os_log_type_enabled((os_log_t)qword_1EE16D990, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        v10 = v1;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "Unsupported HW type %d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      v8 = sub_18F1FCA08(115, 0);
      result = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D988 != -1)
          goto LABEL_36;
        goto LABEL_15;
      }
      break;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_1EE16D988 != -1)
        dispatch_once(&qword_1EE16D988, &unk_1E2956080);
      v4 = qword_1EE16D990;
      if (os_log_type_enabled((os_log_t)qword_1EE16D990, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        v10 = v1;
        _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      v5 = sub_18F1FCA08(115, 0);
      result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D988 != -1)
LABEL_36:
          dispatch_once(&qword_1EE16D988, &unk_1E2956080);
LABEL_15:
        v6 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "static CLPlatformInfo::MotionProviders CLPlatformInfo::motionProviders()", "CoreLocation: %s\n", v6);
        if (v6 != (char *)buf)
          free(v6);
        result = 0;
      }
      break;
    case 6:
    case 60:
    case 61:
    case 196:
      result = 4;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
    case 217:
      result = 31;
      break;
    case 26:
      result = 15;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 76:
    case 77:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
      result = 23;
      break;
    case 39:
    case 42:
    case 148:
    case 149:
    case 191:
    case 192:
    case 193:
    case 194:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
      result = 6;
      break;
    case 50:
    case 51:
    case 66:
    case 67:
    case 74:
    case 75:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 150:
    case 151:
    case 152:
    case 153:
      if (qword_1ECEDEFF0 != -1)
        dispatch_once(&qword_1ECEDEFF0, &unk_1E2956040);
      v2 = byte_1ECEDEF57 == 0;
      v3 = 22;
      goto LABEL_21;
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 258:
      if (qword_1ECEDEFF0 != -1)
        dispatch_once(&qword_1ECEDEFF0, &unk_1E2956040);
      v2 = byte_1ECEDEF57 == 0;
      v3 = 54;
LABEL_21:
      if (v2)
        result = v3;
      else
        result = v3 + 1;
      break;
    case 169:
    case 175:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
      result = 63;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_18F1F7BD4()
{
  if ((sub_18F1F7BFC() & 0x20) != 0)
    return 1;
  else
    return ((unint64_t)sub_18F1F7BFC() >> 4) & 1;
}

uint64_t sub_18F1F7BFC()
{
  if (qword_1ECEDEFF8 != -1)
    dispatch_once(&qword_1ECEDEFF8, &unk_1E2956060);
  return qword_1ECEDF000;
}

void sub_18F1F7C3C(char *a1, int a2, unint64_t a3, unint64_t a4)
{
  __objc2_class *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  void *v27;
  uint64_t v28;
  char v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  char *v33;
  NSObject *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  NSObject *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _BYTE buf[42];
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v8 = CMVO2MaxRetrocomputeState;
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v9 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = a3;
    *(_WORD *)&buf[18] = 2050;
    *(_QWORD *)&buf[20] = a4;
    _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_INFO, "CLDeviceMotion::numberOfClientsChanged notification:%{public}d, from:%{public}zu, to:%{public}zu", buf, 0x1Cu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v40 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "CoreLocation: %s\n", v40);
    if (v40 != buf)
      free(v40);
  }
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v10 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    v45 = sub_18F1F889C((uint64_t)a1, 0);
    v46 = a2;
    v11 = sub_18F1F889C((uint64_t)a1, 9);
    v12 = sub_18F1F889C((uint64_t)a1, 1);
    v13 = sub_18F1F889C((uint64_t)a1, 10);
    v14 = sub_18F1F889C((uint64_t)a1, 2);
    v15 = a3;
    v16 = a4;
    v17 = sub_18F1F889C((uint64_t)a1, 3);
    v18 = sub_18F1F889C((uint64_t)a1, 4);
    v19 = sub_18F1F889C((uint64_t)a1, 5);
    *(_DWORD *)buf = 134350848;
    *(_QWORD *)&buf[4] = v45;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v11;
    a2 = v46;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v12;
    *(_WORD *)&buf[32] = 2050;
    *(_QWORD *)&buf[34] = v13;
    v48 = 2050;
    v49 = v14;
    v8 = CMVO2MaxRetrocomputeState;
    v50 = 2050;
    v51 = v17;
    a4 = v16;
    a3 = v15;
    v52 = 2050;
    v53 = v18;
    v54 = 2050;
    v55 = v19;
    _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_INFO, "numberOfClients GyroOnly:%{public}zd, 3AxisDynamicGyro:%{public}zd, 6Axis:%{public}zd, 6AxisThrottledGyro:%{public}zd, 9Axis:%{public}zd, 9AxisWithNorthReference:%{public}zd, 9AxisWithTrueNorthReference:%{public}zd, BuildGYTT:%{public}zd", buf, 0x52u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    sub_18F1F889C((uint64_t)a1, 0);
    sub_18F1F889C((uint64_t)a1, 9);
    sub_18F1F889C((uint64_t)a1, 1);
    sub_18F1F889C((uint64_t)a1, 10);
    sub_18F1F889C((uint64_t)a1, 2);
    sub_18F1F889C((uint64_t)a1, 3);
    sub_18F1F889C((uint64_t)a1, 4);
    sub_18F1F889C((uint64_t)a1, 5);
    v41 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "CoreLocation: %s\n", v41);
    if (v41 != buf)
      free(v41);
    v8 = CMVO2MaxRetrocomputeState;
  }
  v20 = a2;
  if (a2 == 10)
    LODWORD(v21) = 1;
  else
    LODWORD(v21) = a2;
  v22 = sub_18F1F889C((uint64_t)a1, 2);
  v23 = sub_18F1F889C((uint64_t)a1, 3);
  v24 = sub_18F1F889C((uint64_t)a1, 4);
  v25 = sub_18F1F7BFC();
  if (v21 > 9)
    goto LABEL_36;
  if (((1 << (char)v21) & 0x223) == 0)
  {
    if (((1 << (char)v21) & 0xC) != 0)
      goto LABEL_55;
    if ((_DWORD)v21 == 4)
    {
      if (a3 || a4 != 1)
      {
        if (a3 != 1 || a4 || !*((_QWORD *)a1 + 10))
          goto LABEL_55;
        v44 = 1;
        v29 = v25;
        if (v8[92].vtable != (void *)-1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
        v34 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_INFO, "Unregistering for geomagnetic model updates", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v8[92].vtable != (void *)-1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          v43 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLDeviceMotion::unregisterForGeomagneticModelNotification()", "CoreLocation: %s\n", v43);
          if (v43 != buf)
            free(v43);
          a4 = 0;
        }
        objc_msgSend_unregister_forNotification_(*(void **)(*((_QWORD *)a1 + 10) + 16), v35, *(_QWORD *)(*((_QWORD *)a1 + 10) + 8), 0, v36);
        *(_OWORD *)(a1 + 88) = xmmword_18F504210;
      }
      else
      {
        if (!*((_QWORD *)a1 + 10))
        {
          v26 = v25;
          v27 = (void *)sub_18F20CA68();
          sub_18F1DF558((uint64_t)sub_18F473A38, (uint64_t)a1, v27, buf);
          v28 = *((_QWORD *)a1 + 10);
          *((_QWORD *)a1 + 10) = *(_QWORD *)buf;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v25 = v26;
        }
        v44 = 0;
        v29 = v25;
        if (v8[92].vtable != (void *)-1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
        v30 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_INFO, "Registering for geomagnetic model updates", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (v8[92].vtable != (void *)-1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          v42 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLDeviceMotion::registerForGeomagneticModelNotification()", "CoreLocation: %s\n", v42);
          if (v42 != buf)
            free(v42);
          a4 = 1;
        }
        objc_msgSend_register_forNotification_registrationInfo_(*(void **)(*((_QWORD *)a1 + 10) + 16), v31, *(_QWORD *)(*((_QWORD *)a1 + 10) + 8), 0, 0);
      }
      a3 = v44;
      v25 = v29;
LABEL_55:
      v37 = v23 + v22 + v24;
      if (a3 < a4)
      {
        if (v37 == 1)
        {
          *(_DWORD *)buf = sub_18F1F8A68(v21);
          sub_18F1FA6C8((uint64_t)a1, (int *)buf);
        }
        if (*(_QWORD *)(*((_QWORD *)a1 + 9) + 56))
          return;
        if (v8[92].vtable != (void *)-1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
        v38 = off_1ECEDEE70;
        v21 = "l22MagneticAccessoryType2E";
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "assert";
          *(_WORD *)&buf[28] = 2081;
          *(_QWORD *)&buf[30] = "fSensorFusionService9Axis->isRunning()";
          _os_log_impl(&dword_18F1DC000, v38, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (v8[92].vtable != (void *)-1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
        }
        v39 = off_1ECEDEE70;
        if (os_signpost_enabled((os_log_t)off_1ECEDEE70))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "assert";
          *(_WORD *)&buf[28] = 2081;
          *(_QWORD *)&buf[30] = "fSensorFusionService9Axis->isRunning()";
          _os_signpost_emit_with_name_impl(&dword_18F1DC000, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "9Axis should be running", "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          if (v8[92].vtable != (void *)-1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
        }
        a1 = (char *)off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = "assert";
          *(_WORD *)&buf[28] = 2081;
          *(_QWORD *)&buf[30] = "fSensorFusionService9Axis->isRunning()";
          _os_log_impl(&dword_18F1DC000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"9Axis should be running\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }
        v25 = abort_report_np();
      }
      if (v37 != ((v25 & 0x10) == 0))
        return;
LABEL_71:
      *(_DWORD *)buf = sub_18F1F8A68(v21);
      sub_18F1F8C3C(a1, (int *)buf);
      return;
    }
LABEL_36:
    if (v8[92].vtable != (void *)-1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v32 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v20;
      _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, can't process client change", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v8[92].vtable != (void *)-1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
      v33 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)", "CoreLocation: %s\n", v33);
      if (v33 != buf)
        free(v33);
    }
    return;
  }
  if (!a3 && a4 == 1)
  {
    *(_DWORD *)buf = sub_18F1F8A68(v21);
    sub_18F1FA6C8((uint64_t)a1, (int *)buf);
    return;
  }
  if (a3 == 1 && !a4)
    goto LABEL_71;
}

uint64_t sub_18F1F889C(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 24) > a2)
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * a2 + 48);
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "ssize_t CLMotionNotifier::numberOfClients(int)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
  }
  return -1;
}

uint64_t sub_18F1F8A68(unsigned int a1)
{
  NSObject *v2;
  int v3;
  uint64_t result;
  char *v5;
  uint8_t buf[4];
  unsigned int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1 < 0xB && ((0x63Fu >> a1) & 1) != 0)
    return dword_18F5091AC[a1];
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v2 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v7 = a1;
    _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_FAULT, "No viable conversion for notification %{public}#x", buf, 8u);
  }
  v3 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v3)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v5 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static CLMotionTypeDeviceMotionMode CLDeviceMotion::CLDeviceMotionNotificationToCLMotionTypeDeviceMotionMode(const int)", "CoreLocation: %s\n", v5);
    if (v5 != (char *)buf)
      free(v5);
    return 0;
  }
  return result;
}

void sub_18F1F8C3C(_QWORD *a1, int *a2)
{
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  char *v10;
  char *v11;
  uint8_t buf[4];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v4 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 67240192;
    v13 = v5;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEFAULT, "Stopping device motion, mode=%{public}#x", buf, 8u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v11 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  if (sub_18F1F9D94(a2))
  {
    v6 = *a2;
    if (*a2 <= 18)
    {
      if (v6 <= 6)
      {
        if (v6 != 2)
        {
          if (v6 != 3)
            goto LABEL_19;
          goto LABEL_33;
        }
        sub_18F1F77DC();
        if ((sub_18F1F7BFC() & 0x80) != 0)
        {
          v7 = a1[7];
          if (!v7)
            return;
        }
        else
        {
          v7 = a1[5];
          if (!v7)
            return;
        }
LABEL_31:
        sub_18F1F9000(v7);
        return;
      }
      if (v6 != 7 && v6 != 15)
        goto LABEL_19;
LABEL_30:
      v7 = a1[9];
      if (!v7)
        return;
      goto LABEL_31;
    }
    if (v6 > 66)
    {
      if (v6 == 67)
      {
LABEL_33:
        v7 = a1[8];
        if (!v7)
          return;
        goto LABEL_31;
      }
      if (v6 == 143)
        goto LABEL_30;
    }
    else
    {
      if (v6 == 19)
      {
        v7 = a1[4];
        if (!v7)
          return;
        goto LABEL_31;
      }
      if (v6 == 34)
      {
        v7 = a1[6];
        if (!v7)
          return;
        goto LABEL_31;
      }
    }
LABEL_19:
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v8 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      v9 = *a2;
      *(_DWORD *)buf = 67240192;
      v13 = v9;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, unable to disable sensor fusion", buf, 8u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
  }
}

__n128 sub_18F1F9000(uint64_t a1)
{
  float32x4_t v2;
  __n128 result;
  float32x4_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[28];
  __n128 v8;

  *(double *)v2.i64 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v4 = 0uLL;
  sub_18F1FFE94(&v4, v2);
  *(_DWORD *)v7 = 0;
  v5 = 0u;
  v6 = 0u;
  *(_OWORD *)&v7[4] = xmmword_18F506750;
  *(_QWORD *)&v7[20] = 0x1FF00000000;
  v8.n128_u32[0] = 0;
  v8.n128_u8[4] = 0;
  v8.n128_u32[3] = 0;
  *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
  *(float32x4_t *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 152) = *(_OWORD *)v7;
  *(_OWORD *)(a1 + 164) = *(_OWORD *)&v7[12];
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  result = v8;
  *(_DWORD *)(a1 + 196) = 0;
  *(__n128 *)(a1 + 180) = result;
  return result;
}

void sub_18F1F9320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1F9458(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = a1[4];
  if (v4)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  v5 = a1[7];
  if (v5)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, a2);
  v6 = a1[8];
  if (v6)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 40))(v6, a2);
  v7 = a1[6];
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, a2);
  v8 = a1[9];
  if (v8)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a2);
  result = a1[5];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a2);
  return result;
}

void sub_18F1F955C(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  Class isa;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  Class v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  _BYTE buf[40];
  Class v26;
  NSObject *v27;
  int v28;
  uint64_t v29;

  v1 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(const char **)(a1 + 32);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  if (v3)
  {
    v4 = (char *)v3;
    if (qword_1ECEDEE78 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v19 = off_1ECEDEE70;
    v2 = "";
    v4 = "properties != nullptr";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "properties != nullptr";
      _os_log_impl(&dword_18F1DC000, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    }
    v20 = off_1ECEDEE70;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE70))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "properties != nullptr";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    }
    v1 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "properties != nullptr";
      _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v23 = 180;
    v24 = "setDeviceMotionUpdateInterval_block_invoke";
    v22 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/Notifiers/CLDeviceMotion.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
LABEL_3:
  v5 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    isa = v1[6].isa;
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)&buf[4] = isa;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::setDeviceMotionUpdateInterval changing update interval to: %{public}f", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    LODWORD(v23) = 12;
    v21 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLDeviceMotion::setDeviceMotionUpdateInterval(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke", "CoreLocation: %s\n", v21);
    if (v21 != buf)
      free(v21);
  }
  *(_DWORD *)buf = objc_msgSend_mode(v4, v7, v8, v9, v10, v22, v23, v24);
  if (sub_18F1F9D94((int *)buf))
  {
    v15 = objc_msgSend_mode(v4, v11, v12, v13, v14);
    v16 = sub_18F1FB264(v15);
    v17 = v1[5].isa;
    v18 = sub_18F204AE4();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_18F20741C;
    *(_QWORD *)&buf[24] = &unk_1E2956EB8;
    v28 = v16;
    *(_QWORD *)&buf[32] = v2;
    v26 = v17;
    v27 = v1 + 6;
    sub_18F1F5E28(v18, (uint64_t)buf);
  }
}

uint64_t sub_18F1F998C(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint8_t buf[4];
  _BYTE v43[14];
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  uint64_t v48;

  v1 = (void *)a1;
  v48 = *MEMORY[0x1E0C80C00];
  v2 = *(const char **)(a1 + 32);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  if (v3)
  {
    v4 = (char *)v3;
    if (qword_1ECEDEE78 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v27 = off_1ECEDEE70;
    v4 = "assert";
    v2 = "properties != nullptr";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v43 = 0;
      *(_WORD *)&v43[4] = 2082;
      *(_QWORD *)&v43[6] = "";
      v44 = 2082;
      v45 = "assert";
      v46 = 2081;
      v47 = "properties != nullptr";
      _os_log_impl(&dword_18F1DC000, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    }
    v28 = off_1ECEDEE70;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE70))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v43 = 0;
      *(_WORD *)&v43[4] = 2082;
      *(_QWORD *)&v43[6] = "";
      v44 = 2082;
      v45 = "assert";
      v46 = 2081;
      v47 = "properties != nullptr";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    }
    v1 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v43 = 0;
      *(_WORD *)&v43[4] = 2082;
      *(_QWORD *)&v43[6] = "";
      v44 = 2082;
      v45 = "assert";
      v46 = 2081;
      v47 = "properties != nullptr";
      _os_log_impl(&dword_18F1DC000, (os_log_t)v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v40 = 192;
    v41 = "addDeviceMotionDispatcher_block_invoke";
    v39 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/Notifiers/CLDeviceMotion.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
LABEL_3:
  v5 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    v10 = (void *)objc_msgSend_description(v4, v6, v7, v8, v9);
    v15 = objc_msgSend_UTF8String(v10, v11, v12, v13, v14);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v43 = v15;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v33 = (void *)objc_msgSend_description(v4, v29, v30, v31, v32, v39, v40, v41);
    objc_msgSend_UTF8String(v33, v34, v35, v36, v37);
    LODWORD(v40) = 12;
    v38 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLDeviceMotion::addDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke", "CoreLocation: %s\n", v38);
    if (v38 != (char *)buf)
      free(v38);
  }
  *(_DWORD *)buf = objc_msgSend_mode(v4, v16, v17, v18, v19, v39, v40);
  result = sub_18F1F9D94((int *)buf);
  if ((_DWORD)result)
  {
    v25 = objc_msgSend_mode(v4, v21, v22, v23, v24);
    v26 = sub_18F1FB264(v25);
    return sub_18F1F4F0C((uint64_t)v2, v26, *((_QWORD *)v1 + 5), *((double *)v1 + 6));
  }
  return result;
}

uint64_t sub_18F1F9D94(int *a1)
{
  int v2;
  BOOL v3;
  NSObject *v4;
  int v5;
  int v6;
  uint64_t result;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (*a1 - 7) > 0x3C || ((1 << (*a1 - 7)) & 0x1000000008001101) == 0;
  if (v3 && (v2 - 2) >= 2 && v2 != 143)
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v11 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 67240192;
      v16 = v12;
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Returning.", buf, 8u);
    }
    v13 = sub_18F1FCA08(115, 0);
    result = 0;
    if (!v13)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 == -1)
    {
LABEL_34:
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CLDeviceMotion::isModeValid(const CLMotionTypeDeviceMotionMode &) const", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
      return 0;
    }
LABEL_37:
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    goto LABEL_34;
  }
  if ((v2 & 4) == 0)
    goto LABEL_11;
  if (!sub_18F2009D4())
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v8 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      v9 = *a1;
      *(_DWORD *)buf = 67240192;
      v16 = v9;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Compass not found. Returning.", buf, 8u);
    }
    v10 = sub_18F1FCA08(115, 0);
    result = 0;
    if (!v10)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 == -1)
      goto LABEL_34;
    goto LABEL_37;
  }
  v2 = *a1;
LABEL_11:
  if ((v2 & 2) != 0)
    return 1;
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v4 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v16 = v5;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unsupported mode (%{public}d). Couldn't do DeviceMotion without Gyro. Returning.", buf, 8u);
  }
  v6 = sub_18F1FCA08(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 == -1)
      goto LABEL_34;
    goto LABEL_37;
  }
  return result;
}

void sub_18F1FA1A4(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  Class isa;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  _BYTE buf[40];
  Class v44;
  int v45;
  uint64_t v46;

  v1 = a1;
  v46 = *MEMORY[0x1E0C80C00];
  v2 = *(const char **)(a1 + 32);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40));
  if (v3)
  {
    v4 = (char *)v3;
    if (qword_1ECEDEE78 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v28 = off_1ECEDEE70;
    v2 = "";
    v4 = "properties != nullptr";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "properties != nullptr";
      _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    }
    v29 = off_1ECEDEE70;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE70))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "properties != nullptr";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    }
    v1 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(_QWORD *)&buf[30] = "properties != nullptr";
      _os_log_impl(&dword_18F1DC000, v1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v41 = 204;
    v42 = "removeDeviceMotionDispatcher_block_invoke";
    v40 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/Notifiers/CLDeviceMotion.mm";
    abort_report_np();
  }
  dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
LABEL_3:
  v5 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    v10 = (void *)objc_msgSend_description(v4, v6, v7, v8, v9);
    v15 = objc_msgSend_UTF8String(v10, v11, v12, v13, v14);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v15;
    _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %{public}s", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v34 = (void *)objc_msgSend_description(v4, v30, v31, v32, v33, v40, v41, v42);
    objc_msgSend_UTF8String(v34, v35, v36, v37, v38);
    LODWORD(v41) = 12;
    v39 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLDeviceMotion::removeDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *)_block_invoke", "CoreLocation: %s\n", v39);
    if (v39 != buf)
      free(v39);
  }
  *(_DWORD *)buf = objc_msgSend_mode(v4, v16, v17, v18, v19, v40, v41);
  if (sub_18F1F9D94((int *)buf))
  {
    v24 = objc_msgSend_mode(v4, v20, v21, v22, v23);
    v25 = sub_18F1FB264(v24);
    isa = v1[5].isa;
    v27 = sub_18F204AE4();
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = sub_18F1F5EE0;
    *(_QWORD *)&buf[24] = &unk_1E2956E98;
    v45 = v25;
    *(_QWORD *)&buf[32] = v2;
    v44 = isa;
    sub_18F1F5E28(v27, (uint64_t)buf);
  }
}

uint64_t sub_18F1FA5E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_18F1FA6C8(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  int v26;
  uint64_t v27;
  int v28;
  char v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  int v34;
  int v35;
  char *v36;
  NSObject *v37;
  NSObject *v38;
  NSObject *v39;
  _DWORD v40[2];
  __int16 v41;
  int v42;
  __int16 v43;
  unsigned int v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  unsigned int v50;
  uint8_t buf[8];
  _BYTE v52[12];
  const char *v53;
  _DWORD v54[403];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if ((*a2 & 4) != 0)
    *(_BYTE *)(a1 + 28) = (*a2 & 8) != 0;
  v5 = v4 & 1;
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v6 = v4 & 2;
  v7 = v4 & 4;
  v8 = v4 & 0x10;
  v9 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *a2;
    v11 = *(unsigned __int8 *)(a1 + 28);
    *(_DWORD *)buf = 67241472;
    *(_DWORD *)&buf[4] = v10;
    *(_WORD *)v52 = 1026;
    *(_DWORD *)&v52[2] = v5;
    *(_WORD *)&v52[6] = 1026;
    *(_DWORD *)&v52[8] = v6 >> 1;
    LOWORD(v53) = 1026;
    *(_DWORD *)((char *)&v53 + 2) = v7 >> 2;
    HIWORD(v53) = 1026;
    v54[0] = v11;
    LOWORD(v54[1]) = 1026;
    *(_DWORD *)((char *)&v54[1] + 2) = v8 >> 4;
    _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_DEFAULT, "Starting device motion, mode=%{public}#x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d", buf, 0x26u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v34 = *a2;
    v35 = *(unsigned __int8 *)(a1 + 28);
    v40[0] = 67241472;
    v40[1] = v34;
    v41 = 1026;
    v42 = v5;
    v43 = 1026;
    v44 = v6 >> 1;
    v45 = 1026;
    v46 = v7 >> 2;
    v47 = 1026;
    v48 = v35;
    v49 = 1026;
    v50 = v8 >> 4;
    v36 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLDeviceMotion::enableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)", "CoreLocation: %s\n", v36);
    if (v36 != (char *)buf)
      free(v36);
  }
  result = sub_18F1F9D94(a2);
  if ((_DWORD)result)
  {
    LOBYTE(v40[0]) = 0;
    v13 = sub_18F204AE4();
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(std::__shared_weak_count **)(v13 + 32);
    *(_QWORD *)buf = v14;
    *(_QWORD *)v52 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = sub_18F1EE944(v14, "LogSensorFusion", (BOOL *)v40);
    if (v15)
    {
      v19 = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if ((v18 & 1) == 0)
      LOBYTE(v40[0]) = 0;
    result = *a2;
    if ((int)result > 18)
    {
      if ((int)result <= 66)
      {
        if ((_DWORD)result == 19)
        {
          v21 = *(_QWORD **)(a1 + 32);
          if (!v21)
          {
            v21 = (_QWORD *)operator new();
            result = sub_18F4C21EC((uint64_t)v21, v40[0], 5, 1, 1);
            *(_QWORD *)(a1 + 32) = v21;
          }
        }
        else
        {
          if ((_DWORD)result != 34)
            return result;
          v21 = *(_QWORD **)(a1 + 48);
          if (!v21)
          {
            v21 = (_QWORD *)operator new();
            result = sub_18F1E19F0((uint64_t)v21, v40[0], 9);
            *(_QWORD *)(a1 + 48) = v21;
          }
          v21[9] = sub_18F1E5B5C;
          v21[10] = a1;
        }
        goto LABEL_68;
      }
      if ((_DWORD)result == 67)
        goto LABEL_38;
      if ((_DWORD)result != 143)
        return result;
    }
    else
    {
      if ((int)result <= 6)
      {
        if ((_DWORD)result != 2)
        {
          if ((_DWORD)result != 3)
            return result;
LABEL_38:
          v23 = *(_QWORD *)(a1 + 64);
          if (v23)
          {
LABEL_67:
            v33 = sub_18F1FB264(result);
            *(_QWORD *)buf = sub_18F202D88(a1, v33);
            result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v23 + 16))(v23, buf);
            v21 = *(_QWORD **)(a1 + 64);
            goto LABEL_68;
          }
          if ((sub_18F1F7BFC() & 8) == 0)
          {
            if ((sub_18F1F7BFC() & 0x10) != 0)
            {
              v23 = operator new();
              sub_18F3D6F74(v23, 1);
            }
            else
            {
              v23 = operator new();
              sub_18F4C21EC(v23, v40[0], 1, 1, 0);
            }
            goto LABEL_66;
          }
          v23 = operator new();
          sub_18F1F77DC();
          v29 = sub_18F20C9EC();
          sub_18F1EE054(v23, 1);
          *(_BYTE *)(v23 + 200) = 5;
          *(_BYTE *)(v23 + 201) = v29;
          *(_BYTE *)(v23 + 202) = 0;
          *(_QWORD *)(v23 + 208) = 0;
          *(_QWORD *)(v23 + 216) = 0;
          *(_QWORD *)v23 = &off_1E294B418;
          if ((sub_18F1F7BFC() & 8) != 0)
          {
LABEL_66:
            *(_QWORD *)(a1 + 64) = v23;
            LODWORD(result) = *a2;
            goto LABEL_67;
          }
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          v30 = off_1ECEDEE70;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v52 = 2082;
            *(_QWORD *)&v52[2] = "";
            *(_WORD *)&v52[10] = 2082;
            v53 = "assert";
            LOWORD(v54[0]) = 2081;
            *(_QWORD *)((char *)v54 + 2) = "CLPlatformInfo::motionCaps().deviceMotion6Service";
            _os_log_impl(&dword_18F1DC000, v30, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            if (qword_1ECEDEE78 != -1)
              dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          }
          v31 = off_1ECEDEE70;
          if (os_signpost_enabled((os_log_t)off_1ECEDEE70))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v52 = 2082;
            *(_QWORD *)&v52[2] = "";
            *(_WORD *)&v52[10] = 2082;
            v53 = "assert";
            LOWORD(v54[0]) = 2081;
            *(_QWORD *)((char *)v54 + 2) = "CLPlatformInfo::motionCaps().deviceMotion6Service";
            _os_signpost_emit_with_name_impl(&dword_18F1DC000, v31, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Device motion service 6 is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            if (qword_1ECEDEE78 != -1)
              dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          }
          v32 = off_1ECEDEE70;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v52 = 2082;
            *(_QWORD *)&v52[2] = "";
            *(_WORD *)&v52[10] = 2082;
            v53 = "assert";
            LOWORD(v54[0]) = 2081;
            *(_QWORD *)((char *)v54 + 2) = "CLPlatformInfo::motionCaps().deviceMotion6Service";
            _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Device motion service 6 is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }
LABEL_86:
          abort_report_np();
          __break(1u);
        }
        result = sub_18F1F7BFC();
        if ((result & 0x80) == 0)
        {
          if (*(_QWORD *)(a1 + 40))
            return result;
          v21 = (_QWORD *)operator new();
          result = sub_18F4C21EC((uint64_t)v21, v40[0], 0, 0, 0);
          *(_QWORD *)(a1 + 40) = v21;
          goto LABEL_68;
        }
        if (*(_QWORD *)(a1 + 56))
          return result;
        v27 = operator new();
        sub_18F473C18(v27);
        *(_QWORD *)(a1 + 56) = v27;
        v25 = (_QWORD **)(a1 + 56);
        v28 = sub_18F1FB264(*a2);
        *(_QWORD *)buf = sub_18F202D88(a1, v28);
        result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v27 + 16))(v27, buf);
LABEL_50:
        v21 = *v25;
LABEL_68:
        if ((void (*)(float32x2_t *, uint64_t, uint64_t))v21[7] != sub_18F2007DC || v21[8] != a1)
        {
          v21[7] = sub_18F2007DC;
          v21[8] = a1;
          return (*(uint64_t (**)(_QWORD *))(*v21 + 48))(v21);
        }
        return result;
      }
      if ((_DWORD)result != 7 && (_DWORD)result != 15)
        return result;
    }
    v22 = *(_QWORD *)(a1 + 72);
    if (!v22)
    {
      if ((sub_18F1F7BFC() & 0x10) != 0)
      {
        v22 = operator new();
        sub_18F1EE054(v22, 2);
        *(_WORD *)(v22 + 200) = 260;
        *(_BYTE *)(v22 + 202) = 0;
        *(_QWORD *)(v22 + 208) = 0;
        *(_QWORD *)(v22 + 216) = 0;
        *(_QWORD *)v22 = &off_1E294B468;
        if ((sub_18F1F7BFC() & 0x10) == 0)
        {
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          v37 = off_1ECEDEE70;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v52 = 2082;
            *(_QWORD *)&v52[2] = "";
            *(_WORD *)&v52[10] = 2082;
            v53 = "assert";
            LOWORD(v54[0]) = 2081;
            *(_QWORD *)((char *)v54 + 2) = "CLPlatformInfo::motionCaps().deviceMotionService";
            _os_log_impl(&dword_18F1DC000, v37, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            if (qword_1ECEDEE78 != -1)
              dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          }
          v38 = off_1ECEDEE70;
          if (os_signpost_enabled((os_log_t)off_1ECEDEE70))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v52 = 2082;
            *(_QWORD *)&v52[2] = "";
            *(_WORD *)&v52[10] = 2082;
            v53 = "assert";
            LOWORD(v54[0]) = 2081;
            *(_QWORD *)((char *)v54 + 2) = "CLPlatformInfo::motionCaps().deviceMotionService";
            _os_signpost_emit_with_name_impl(&dword_18F1DC000, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Device motion service is not supported on this platform!", "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            if (qword_1ECEDEE78 != -1)
              dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
          }
          v39 = off_1ECEDEE70;
          if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v52 = 2082;
            *(_QWORD *)&v52[2] = "";
            *(_WORD *)&v52[10] = 2082;
            v53 = "assert";
            LOWORD(v54[0]) = 2081;
            *(_QWORD *)((char *)v54 + 2) = "CLPlatformInfo::motionCaps().deviceMotionService";
            _os_log_impl(&dword_18F1DC000, v39, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Device motion service is not supported on this platform!\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
          }
          goto LABEL_86;
        }
      }
      else
      {
        v22 = operator new();
        sub_18F372384((double *)v22, v40[0], 2, *(_BYTE *)(a1 + 28));
      }
      *(_QWORD *)(a1 + 72) = v22;
    }
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 24))(v22, *(unsigned __int8 *)(a1 + 28));
    v25 = (_QWORD **)(a1 + 72);
    v24 = *(_QWORD *)(a1 + 72);
    v26 = sub_18F1FB264(*a2);
    *(_QWORD *)buf = sub_18F202D88(a1, v26);
    result = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v24 + 16))(v24, buf);
    goto LABEL_50;
  }
  return result;
}

void sub_18F1FB19C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10E1C407F10D4D4);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1FB264(int a1)
{
  NSObject *v3;
  char *v4;
  uint8_t buf[4];
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1 > 18)
  {
    if (a1 > 66)
    {
      if (a1 == 67)
        return 10;
      if (a1 == 143)
        return 4;
    }
    else
    {
      if (a1 == 19)
        return 5;
      if (a1 == 34)
        return 9;
    }
  }
  else if (a1 > 6)
  {
    if (a1 == 7)
      return 2;
    if (a1 == 15)
      return 3;
  }
  else
  {
    if (a1 == 2)
      return 0;
    if (a1 == 3)
      return 1;
  }
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v3 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v6 = a1;
    _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_FAULT, "No viable conversion for mode %{public}#x", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v4 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static CLDeviceMotion::CLDeviceMotionNotification CLDeviceMotion::CLMotionTypeDeviceMotionModeToCLDeviceMotionNotification(const CLMotionTypeDeviceMotionMode)", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return 11;
}

void sub_18F1FB4A8(uint64_t a1)
{
  _BOOL4 v2;
  NSObject *v3;
  uint64_t v4;
  char *v5;
  uint8_t buf[4];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  sub_18F202F6C(a1, (double *)(a1 + 40));
  if (*(_BYTE *)(a1 + 201))
  {
    v2 = sub_18F1FB688(*(_QWORD *)(a1 + 208), 0);
    *(_BYTE *)(a1 + 202) = v2;
    if (v2)
    {
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
      v3 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEFAULT))
      {
        v4 = sub_18F1FBD7C(*(_QWORD *)(a1 + 208));
        *(_DWORD *)buf = 134349056;
        v7 = v4;
        _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_DEFAULT, "Fast path has been initialized,serviceRef,%{public}p", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
        sub_18F1FBD7C(*(_QWORD *)(a1 + 208));
        v5 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceSPU::start()", "CoreLocation: %s\n", v5);
        if (v5 != (char *)buf)
          free(v5);
      }
    }
  }
}

BOOL sub_18F1FB688(uint64_t a1, uint64_t a2)
{
  CFRunLoopRef Current;
  NSObject *v5;
  _BOOL8 result;
  NSObject *v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  char *v14;
  char *v15;
  uint8_t buf[4];
  _BYTE v17[24];
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
    v10 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = "";
      *(_WORD *)&v17[14] = 2082;
      *(_QWORD *)&v17[16] = "assert";
      v18 = 2081;
      v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
    }
    v11 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = "";
      *(_WORD *)&v17[14] = 2082;
      *(_QWORD *)&v17[16] = "assert";
      v18 = 2081;
      v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[FastPathDevice] initializeFastPath should be running on motion thread", "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
    }
    v12 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v17 = 0;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = "";
      *(_WORD *)&v17[14] = 2082;
      *(_QWORD *)&v17[16] = "assert";
      v18 = 2081;
      v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[FastPathDevice] initializeFastPath should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_33;
  }
  if (*(_BYTE *)(a1 + 172))
  {
    if (qword_1ECEDEE98 == -1)
    {
LABEL_4:
      v5 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_FAULT, "[FastPath] Already initialized", buf, 2u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
        v13 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "CoreLocation: %s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      return 1;
    }
LABEL_33:
    dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
    goto LABEL_4;
  }
  if ((sub_18F1FBFFC((void *)a1) & 1) != 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    sub_18F1FBD7C(a1);
    *(_BYTE *)(a1 + 172) = IOHIDServiceClientFastPathInit() != 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 168));
    if (!*(_BYTE *)(a1 + 172))
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
      v7 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)v17 = sub_18F1FBD7C(a1);
        *(_WORD *)&v17[8] = 2112;
        *(_QWORD *)&v17[10] = a2;
        _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_ERROR, "[FastPath] Initialization failed,serviceRef,%@,properties,%@", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
        sub_18F1FBD7C(a1);
        v15 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "CoreLocation: %s\n", v15);
        if (v15 != (char *)buf)
          free(v15);
      }
    }
    return *(_BYTE *)(a1 + 172) != 0;
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
    v8 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_ERROR, "[FastPath] Couldn't initialize FastPath due null service ref", buf, 2u);
    }
    v9 = sub_18F1FCA08(115, 0);
    result = 0;
    if (v9)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL FastPathDevice::initializeFastPath(NSDictionary *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
      return 0;
    }
  }
  return result;
}

uint64_t sub_18F1FBD7C(uint64_t a1)
{
  CFRunLoopRef Current;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v4 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "assert";
      v13 = 2081;
      v14 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v5 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "assert";
      v13 = 2081;
      v14 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] Should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v6 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "assert";
      v13 = 2081;
      v14 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
  }
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_18F1FBFFC(void *a1)
{
  CFRunLoopRef Current;
  uint64_t result;
  NSObject *v4;
  int v5;
  int v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  uint8_t buf[4];
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v8 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v9 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] Should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    a1 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v14 = 2082;
      v15 = "assert";
      v16 = 2081;
      v17 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, (os_log_t)a1, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] Should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_26:
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    goto LABEL_7;
  }
  sub_18F2044F4(*((_QWORD *)a1 + 4));
  if (*((_QWORD *)a1 + 3))
    return 1;
  sub_18F1F393C(*((const char **)a1 + 4), 0);
  if (*((_QWORD *)a1 + 3))
    return 1;
  if (qword_1ECEDEE98 != -1)
    goto LABEL_26;
LABEL_7:
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *((_DWORD *)a1 + 4);
    v5 = *((_DWORD *)a1 + 5);
    *(_DWORD *)buf = 67240448;
    v11 = v5;
    v12 = 1026;
    LODWORD(v13) = v6;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
  }
  result = sub_18F1FCA08(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v7 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CLIoHidInterface::Device::initializeServiceRef()", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
    return 0;
  }
  return result;
}

void sub_18F1FC598(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  double v4;
  float v5;
  double v6;
  float v7;
  double v8;
  float v9;
  unint64_t TimeStamp;
  double v11;
  NSObject *v12;
  CFAbsoluteTime Current;
  uint64_t v14;
  double v15;
  char v16;
  char *v17;
  double v18;
  float v19;
  float v20;
  float v21;
  uint8_t buf[4];
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  double v29;
  uint64_t v30;
  char v31;
  _BYTE v32[22];
  __int16 v33;
  double v34;
  _BYTE v35[12];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (IOHIDEventGetType() == 13)
  {
    if (IOHIDEventGetIntegerValue() == 1)
    {
      if (qword_1ECEDEE48 != -1)
        dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
      v2 = qword_1ECEDEE40;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v2, OS_LOG_TYPE_DEBUG, "Received shake data, discarding.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE48 != -1)
          dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
        *(_WORD *)v32 = 0;
        v3 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "static void CLAccelerometer::onAccelerometerIohidEvent(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v3);
        if (v3 != (char *)buf)
          free(v3);
      }
    }
    else
    {
      IOHIDEventGetFloatValue();
      v5 = v4;
      IOHIDEventGetFloatValue();
      v7 = v6;
      IOHIDEventGetFloatValue();
      v9 = v8;
      TimeStamp = IOHIDEventGetTimeStamp();
      v11 = sub_18F1FD20C(TimeStamp);
      v18 = v11;
      v19 = v5;
      v20 = v7;
      v21 = v9;
      if (qword_1ECEDEE48 != -1)
        dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
      v12 = qword_1ECEDEE40;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218752;
        v23 = v5;
        v24 = 2048;
        v25 = v7;
        v26 = 2048;
        v27 = v9;
        v28 = 2048;
        v29 = v11;
        _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEBUG, "[Accelerometer] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f", buf, 0x2Au);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE48 != -1)
          dispatch_once(&qword_1ECEDEE48, &unk_1E2954948);
        *(_DWORD *)v32 = 134218752;
        *(double *)&v32[4] = v5;
        *(_WORD *)&v32[12] = 2048;
        *(double *)&v32[14] = v7;
        v33 = 2048;
        v34 = v9;
        *(_WORD *)v35 = 2048;
        *(double *)&v35[2] = v11;
        v17 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLAccelerometer::onAccelerometerData(const CLMotionTypeAcceleration &, const CLMotionTypeTimestamp &)", "CoreLocation: %s\n", v17);
        if (v17 != (char *)buf)
          free(v17);
      }
      if (*(_BYTE *)(a1 + 32))
      {
        *(_QWORD *)v32 = &off_1E294C140;
        Current = CFAbsoluteTimeGetCurrent();
        *(float *)v35 = v5;
        *(float *)&v35[4] = v7;
        *(float *)&v35[8] = v9;
        *(CFAbsoluteTime *)&v32[8] = Current;
        v34 = v11;
        v14 = sub_18F47400C();
        sub_18F475D9C(v14, (uint64_t)v32);
        sub_18F2B6BD0(buf);
        sub_18F2C6F10(buf);
        v31 |= 1u;
        v30 = *(_QWORD *)&v32[8];
        v15 = v27;
        v16 = *(_BYTE *)(*(_QWORD *)&v27 + 32);
        *(double *)(*(_QWORD *)&v27 + 8) = v11;
        *(float *)(*(_QWORD *)&v15 + 20) = v5;
        *(float *)(*(_QWORD *)&v15 + 24) = v7;
        *(_BYTE *)(*(_QWORD *)&v15 + 32) = v16 | 0x1D;
        *(float *)(*(_QWORD *)&v15 + 28) = v9;
        sub_18F2B9670((PB::Base *)buf);
      }
      sub_18F1FD2C8(a1, 0, (uint64_t)&v18, 24);
    }
  }
}

void sub_18F1FC9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F1FCA08(uint64_t a1, int a2)
{
  if (qword_1ECEDFE38 != -1)
    dispatch_once(&qword_1ECEDFE38, &unk_1E29535E8);
  if (*(_DWORD *)(qword_1ECEDFE30 + 160) >= a2
    || *(_DWORD *)(qword_1ECEDFE30 + 164) >= a2
    || *(_DWORD *)(qword_1ECEDFE30 + 168) >= a2)
  {
    return 1;
  }
  else
  {
    return *(unsigned __int8 *)(qword_1ECEDFE30 + 152);
  }
}

void sub_18F1FCA84(uint64_t a1, uint64_t a2, __IOHIDServiceClient *a3, uint64_t a4)
{
  int Type;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  void (*v18)(_QWORD, uint64_t, __IOHIDServiceClient *, uint64_t);
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  NSObject *v22;
  const __CFNumber *RegistryID;
  NSObject *v24;
  uint64_t *i;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  NSObject *v33;
  NSObject *v34;
  unint64_t *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t valuePtr;
  int v42;
  __IOHIDServiceClient *v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  __IOHIDServiceClient *v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    Type = IOHIDEventGetType();
    if (Type)
    {
      v9 = *(uint64_t **)(a1 + 8);
      v10 = *(uint64_t **)(a1 + 16);
      if (v9 != v10)
      {
        v11 = Type;
        do
        {
          v12 = (std::__shared_weak_count *)v9[1];
          if (v12)
          {
            v13 = *v9;
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v15 = __ldxr(p_shared_weak_owners);
            while (__stxr(v15 + 1, p_shared_weak_owners));
            v16 = std::__shared_weak_count::lock(v12);
            if (v16)
            {
              v17 = v16;
              if (v13)
              {
                v18 = *(void (**)(_QWORD, uint64_t, __IOHIDServiceClient *, uint64_t))(v13 + 48);
                if (v18)
                {
                  if (*(__IOHIDServiceClient **)(v13 + 24) == a3 || (v19 = *(_DWORD *)(v13 + 144)) != 0 && v19 == v11)
                    v18(*(_QWORD *)(v13 + 56), a2, a3, a4);
                }
              }
              p_shared_owners = (unint64_t *)&v17->__shared_owners_;
              do
                v21 = __ldaxr(p_shared_owners);
              while (__stlxr(v21 - 1, p_shared_owners));
              if (!v21)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            std::__shared_weak_count::__release_weak(v12);
          }
          v9 += 2;
        }
        while (v9 != v10);
      }
    }
    else
    {
      valuePtr = 0;
      RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(a3);
      CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v24 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        v47 = a3;
        v48 = 2050;
        v49 = valuePtr;
        _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Got null event,sender %{private}p,registryID %{public}llx", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
        v42 = 134283777;
        v43 = a3;
        v44 = 2050;
        v45 = valuePtr;
        v40 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v40);
        if (v40 != (char *)buf)
          free(v40);
      }
      v26 = *(uint64_t **)(a1 + 8);
      for (i = *(uint64_t **)(a1 + 16); v26 != i; v26 += 2)
      {
        v27 = (std::__shared_weak_count *)v26[1];
        if (v27)
        {
          v28 = *v26;
          v29 = (unint64_t *)&v27->__shared_weak_owners_;
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v31 = std::__shared_weak_count::lock(v27);
          if (v31)
          {
            v32 = v31;
            if (v28)
            {
              if (*(_QWORD *)(v28 + 8) == valuePtr && *(_QWORD *)(v28 + 128))
              {
                if (qword_1ECEDEE98 != -1)
                  dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                v33 = off_1ECEDEE90;
                if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F1DC000, v33, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Fetching historical events", buf, 2u);
                }
                if (sub_18F1FCA08(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1ECEDEE98 != -1)
                    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                  LOWORD(v42) = 0;
                  v38 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v38);
                  if (v38 != (char *)buf)
                    free(v38);
                }
                (*(void (**)(_QWORD))(v28 + 128))(*(_QWORD *)(v28 + 136));
              }
              else
              {
                if (qword_1ECEDEE98 != -1)
                  dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                v34 = off_1ECEDEE90;
                if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18F1DC000, v34, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Did not fetch historical events", buf, 2u);
                }
                if (sub_18F1FCA08(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1ECEDEE98 != -1)
                    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                  LOWORD(v42) = 0;
                  v37 = (char *)_os_log_send_and_compose_impl();
                  sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v37);
                  if (v37 != (char *)buf)
                    free(v37);
                }
              }
            }
            v35 = (unint64_t *)&v32->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v22 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v22, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Received null sender", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      LOWORD(v42) = 0;
      v39 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::onEvent(void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v39);
      if (v39 != (char *)buf)
        free(v39);
    }
  }
}

void sub_18F1FD17C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

double sub_18F1FD20C(unint64_t a1)
{
  double v2;
  uint32_t denom;
  uint32_t numer;
  uint32_t v5;
  unsigned int v6;
  uint32_t v7;
  uint32_t v8;
  mach_timebase_info info;

  v2 = *(double *)&qword_1ECEDFDF8;
  if (*(double *)&qword_1ECEDFDF8 == 0.0)
  {
    mach_timebase_info(&info);
    if (info.denom)
    {
      denom = info.denom;
      numer = info.numer;
      do
      {
        v5 = denom;
        denom = numer % denom;
        numer = v5;
      }
      while (denom);
    }
    else
    {
      v5 = info.numer;
    }
    v6 = 1000000000;
    v7 = info.numer / v5;
    do
    {
      v8 = v7;
      v7 = v6;
      v6 = v8 % v6;
    }
    while (v6);
    v2 = (double)(info.numer / v5 / v7) / (double)(0x3B9ACA00 / v7 * (unint64_t)(info.denom / v5));
    *(double *)&qword_1ECEDFDF8 = v2;
  }
  return v2 * (double)a1;
}

uint64_t sub_18F1FD2C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v7 = result;
  v8 = *(_QWORD *)(result + 16);
  v9 = a2;
  v10 = v8 + 80 * (int)a2;
  v11 = *(_QWORD **)(v10 + 32);
  if (v11 != (_QWORD *)(v10 + 40))
  {
    do
    {
      v12 = *((_DWORD *)v11 + 10);
      if (!v12)
      {
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11[4] + 16))(v11[4], a2, a3, a4);
        v12 = *((_DWORD *)v11 + 10);
      }
      *((_DWORD *)v11 + 10) = (v12 + 1) % *((_DWORD *)v11 + 11);
      v13 = (_QWORD *)v11[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v11[2];
          v15 = *v14 == (_QWORD)v11;
          v11 = v14;
        }
        while (!v15);
      }
      v8 = *(_QWORD *)(v7 + 16);
      v11 = v14;
    }
    while (v14 != (_QWORD *)(v8 + 80 * v9 + 40));
  }
  v16 = v8 + 80 * v9;
  v17 = *(_QWORD *)(v16 + 64);
  if (v17 != v16 + 56)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v17 + 16) + 16))(*(_QWORD *)(v17 + 16), a2, a3, a4);
      v17 = *(_QWORD *)(v17 + 8);
    }
    while (v17 != *(_QWORD *)(v7 + 16) + 80 * v9 + 56);
  }
  return result;
}

uint64_t sub_18F1FD3FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

double sub_18F1FD408(uint64_t a1, uint64_t a2)
{
  return sub_18F1FD410(a1 - 200, a2);
}

double sub_18F1FD410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  unint64_t v7;
  float v8;
  float v9;
  unint64_t v10;
  float v11;
  unint64_t v12;
  float v13;
  float v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];

  v4 = *(_QWORD *)(a1 + 280);
  sub_18F1FD65C(v4 + 16, (float *)(a2 + 8));
  sub_18F1FD65C(v4 + 88, (float *)(a2 + 12));
  sub_18F1FD65C(v4 + 160, (float *)(a2 + 16));
  v6 = *(_QWORD *)(a1 + 280);
  v7 = *(_QWORD *)(v6 + 80);
  if (v7 < *(_QWORD *)(v6 + 24))
    goto LABEL_16;
  LODWORD(result) = 0;
  v8 = 0.0;
  if (v7 >= 2)
  {
    v9 = (float)((float)v7 * *(float *)(v6 + 36)) - (float)(*(float *)(v6 + 32) * *(float *)(v6 + 32));
    v8 = 0.0;
    if (v9 >= 0.0)
      v8 = v9 / (float)((v7 - 1) * v7);
  }
  v10 = *(_QWORD *)(v6 + 152);
  if (v10 >= 2)
  {
    v11 = (float)((float)v10 * *(float *)(v6 + 108)) - (float)(*(float *)(v6 + 104) * *(float *)(v6 + 104));
    if (v11 >= 0.0)
      *(float *)&result = v11 / (float)((v10 - 1) * v10);
  }
  v12 = *(_QWORD *)(v6 + 224);
  v13 = 0.0;
  if (v12 >= 2)
  {
    v14 = (float)((float)v12 * *(float *)(v6 + 180)) - (float)(*(float *)(v6 + 176) * *(float *)(v6 + 176));
    if (v14 >= 0.0)
      v13 = v14 / (float)((v12 - 1) * v12);
  }
  if (v8 >= *(float *)&result)
    *(float *)&result = v8;
  if (*(float *)&result < v13)
    *(float *)&result = v13;
  if (*(float *)&result > *(float *)(a1 + 944))
  {
LABEL_16:
    result = *(double *)a2;
    *(_QWORD *)(a1 + 936) = *(_QWORD *)a2;
    if (*(_QWORD *)(a1 + 48) == 2)
      return result;
    v15 = sub_18F204AE4();
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_18F4E62E4;
    v20[3] = &unk_1E2955738;
    v20[4] = a1;
    v16 = v20;
    goto LABEL_18;
  }
  v17 = *(_QWORD *)(a1 + 48);
  if (v17 == 1)
  {
    result = *(double *)a2;
    if (*(double *)a2 > *(double *)(a1 + 936) + *(double *)(a1 + 928))
    {
      v15 = sub_18F204AE4();
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 3221225472;
      v18[2] = sub_18F1DF344;
      v18[3] = &unk_1E2955738;
      v18[4] = a1;
      v16 = v18;
      goto LABEL_18;
    }
  }
  else if (v17 == 2)
  {
    result = *(double *)a2;
    if (*(double *)a2 > *(double *)(a1 + 936) + *(double *)(a1 + 920))
    {
      v15 = sub_18F204AE4();
      v19[0] = MEMORY[0x1E0C809B0];
      v19[1] = 3221225472;
      v19[2] = sub_18F20725C;
      v19[3] = &unk_1E2955738;
      v19[4] = a1;
      v16 = v19;
LABEL_18:
      sub_18F1F6514(v15, (uint64_t)v16);
    }
  }
  return result;
}

float sub_18F1FD65C(uint64_t a1, float *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  v4 = a1 + 24;
  sub_18F1FD700((_QWORD *)(a1 + 24), a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 > *(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
    v8 = *(float *)(a1 + 16) - v7;
    v9 = *(float *)(a1 + 20) - (float)(v7 * v7);
    *(float *)(a1 + 16) = v8;
    *(float *)(a1 + 20) = v9;
    *(_QWORD *)(a1 + 56) = v6 + 1;
    *(_QWORD *)(a1 + 64) = v5 - 1;
    sub_18F3CBAE4(v4, 1);
  }
  v10 = *(float *)(a1 + 20);
  *(float *)(a1 + 16) = *a2 + *(float *)(a1 + 16);
  result = v10 + (float)(*a2 * *a2);
  *(float *)(a1 + 20) = result;
  return result;
}

float sub_18F1FD700(_QWORD *a1, float *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float result;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_18F201DB8(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  result = *a2;
  *(float *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
  return result;
}

uint64_t sub_18F1FD784(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

uint64_t sub_18F1FD79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

uint64_t sub_18F1FD7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a2, sel_onDeviceMotion_, a1, a4, a5);
}

double sub_18F1FDF60(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  v4 = a2[2];
  v3 = a2[3];
  v5 = a3[2];
  v6 = a3[3];
  v7 = *a2;
  v8 = *a3;
  a1[1] = v3 * v5 + *a2 * a3[1] - v4 * v6 + a2[1] * *a3;
  v9 = a3[1];
  v10 = a2[1];
  a1[2] = v7 * v5 - v3 * v9 + v10 * v6 + v4 * v8;
  v11 = a2[2];
  v12 = a3[2];
  a1[3] = v11 * v9 - v10 * v12 + v7 * v6 + v3 * v8;
  result = -(v11 * v12) - v10 * v9 - a2[3] * a3[3] + v7 * v8;
  *a1 = result;
  return result;
}

float sub_18F1FE3CC(double *a1)
{
  float v1;

  v1 = a1[1] * (a1[3] + a1[3]) - *a1 * (a1[2] + a1[2]);
  return -v1;
}

uint64_t sub_18F1FE420()
{
  if (qword_1ECEDFB98 != -1)
    dispatch_once(&qword_1ECEDFB98, &unk_1E2953DE8);
  return qword_1ECEDFB90;
}

float sub_18F1FE474@<S0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, float32x4_t a4@<Q0>)
{
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t v10;
  float result;
  double v12;
  float v13;
  unint64_t v14;
  float32x4_t v15[3];
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  int v23;
  uint8_t buf[4];
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v15[0] = 0uLL;
  v14 = 0xBFF0000000000000;
  sub_18F1FFE94(v15, a4);
  v16 = 0;
  memset(&v15[1], 0, 32);
  v17 = xmmword_18F506750;
  v18 = 0x1FF00000000;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  if (a2 <= 18)
  {
    if (a2 <= 6)
    {
      if (a2 == 2)
      {
        if ((sub_18F1F7BFC() & 0x80) != 0)
        {
          v7 = *(_QWORD *)(a1 + 56);
          if (!v7)
            return sub_18F2008FC(a3, (float32x2_t *)&v14);
        }
        else
        {
          v7 = *(_QWORD *)(a1 + 40);
          if (!v7)
            return sub_18F2008FC(a3, (float32x2_t *)&v14);
        }
        goto LABEL_30;
      }
      if (a2 != 3)
        goto LABEL_13;
      goto LABEL_29;
    }
    if (a2 != 7 && a2 != 15)
      goto LABEL_13;
    goto LABEL_24;
  }
  if (a2 > 66)
  {
    if (a2 == 67)
    {
LABEL_29:
      v7 = *(_QWORD *)(a1 + 64);
      if (!v7)
        return sub_18F2008FC(a3, (float32x2_t *)&v14);
LABEL_30:
      (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v7 + 32))(v7, &v14);
      return sub_18F2008FC(a3, (float32x2_t *)&v14);
    }
    if (a2 == 143)
    {
LABEL_24:
      v10 = *(_QWORD *)(a1 + 72);
      if (v10)
        (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v10 + 32))(v10, &v14);
      goto LABEL_26;
    }
  }
  else
  {
    if (a2 == 19)
    {
      v7 = *(_QWORD *)(a1 + 32);
      if (!v7)
        return sub_18F2008FC(a3, (float32x2_t *)&v14);
      goto LABEL_30;
    }
    if (a2 == 34)
    {
      v7 = *(_QWORD *)(a1 + 48);
      if (!v7)
        return sub_18F2008FC(a3, (float32x2_t *)&v14);
      goto LABEL_30;
    }
  }
LABEL_13:
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v8 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    v25 = a2;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "Device motion mode (%{public}d) not supported, unable to get device motion", buf, 8u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v22 = 67240192;
    v23 = a2;
    v9 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "CLDeviceMotion::Sample CLDeviceMotion::getLastSample(const CLMotionTypeDeviceMotionMode)", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
LABEL_26:
  result = sub_18F2008FC(a3, (float32x2_t *)&v14);
  if (a2 == 143)
  {
    v12 = *(double *)(a1 + 88);
    if (v12 >= 0.0)
    {
      v13 = *(double *)(a1 + 96);
      sub_18F3EEC08(a3 + 8, v13, v12);
    }
    else
    {
      *(_DWORD *)(a3 + 96) = 1127481344;
    }
  }
  return result;
}

void sub_18F1FE780(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  const void *v8;
  float32x4_t v9;

  v5 = *(_QWORD *)(a1 + 208);
  if (v5)
  {
    if (*(_BYTE *)(a1 + 202) && (v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5)) != 0)
    {
      v8 = (const void *)v6;
      sub_18F1FF6C8(v6, a2, v7);
      CFRelease(v8);
    }
    else
    {
      sub_18F4B3028(a1, a2);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0xBFF0000000000000;
    v9 = 0uLL;
    sub_18F1FFE94(&v9, a3);
    *(float32x4_t *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 36) = 0;
    *(_QWORD *)(a2 + 52) = 0;
    *(_QWORD *)(a2 + 44) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 88) = 0;
  }
}

uint64_t sub_18F1FE84C(uint64_t a1)
{
  os_unfair_lock_s *v1;
  int v2;
  NSObject *v3;
  char *v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 24))
    return 0;
  if (*(_BYTE *)(a1 + 172))
  {
    v1 = (os_unfair_lock_s *)(a1 + 168);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 168));
    v2 = IOHIDServiceClientFastPathCopyEventWithStatus();
    os_unfair_lock_unlock(v1);
    if (v2)
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
      v3 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        v7 = v2;
        _os_log_impl(&dword_18F1DC000, v3, OS_LOG_TYPE_INFO, "[FastPath] copyEvent Failed (%{public}x)", buf, 8u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E29543E8);
        v5 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual IOHIDEventRef FastPathDevice::copyEvent()", "CoreLocation: %s\n", v5);
        if (v5 != (char *)buf)
          free(v5);
      }
    }
  }
  return 0;
}

void sub_18F1FEA40(uint64_t a1, uint64_t a2)
{
  sub_18F1FF4A0(a1 - 200, a2);
}

uint64_t sub_18F1FEA48(uint64_t a1)
{
  uint64_t result;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  unint64_t TimeStamp;
  double v10;
  unsigned int IntegerValue;
  double v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  _BOOL4 v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  NSObject *v32;
  uint64_t v33;
  double v34;
  NSObject *v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  double v53;
  float v54;
  float v55;
  float v56;
  __int16 v57;
  BOOL v58;
  _BYTE v59[24];
  double v60;
  _BYTE v61[12];
  unsigned int v62;
  __int16 v63;
  unsigned int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  double v70;
  uint8_t buf[4];
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  unsigned int v80;
  __int16 v81;
  unsigned int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  result = IOHIDEventGetType();
  if ((_DWORD)result == 20)
  {
    IOHIDEventGetFloatValue();
    v4 = v3;
    IOHIDEventGetFloatValue();
    v6 = v5;
    IOHIDEventGetFloatValue();
    v8 = v7;
    TimeStamp = IOHIDEventGetTimeStamp();
    v10 = sub_18F1FD20C(TimeStamp);
    IntegerValue = IOHIDEventGetIntegerValue();
    v12 = *(double *)(a1 + 72);
    if (v12 > 0.0 && v10 > v12 + *(double *)(a1 + 48))
    {
      v53 = v10;
      if (sub_18F203718(a1))
      {
        v13 = (void *)(*(uint64_t (**)(_QWORD, const __CFString *))(**(_QWORD **)(a1 + 80) + 24))(*(_QWORD *)(a1 + 80), CFSTR("AppleVoltageDictionary"));
        v17 = (void *)objc_msgSend_objectForKeyedSubscript_(v13, v14, (uint64_t)CFSTR("GYRO_TEMP"), v15, v16);
        objc_msgSend_floatValue(v17, v18, v19, v20, v21);
        v54 = v22 / 100.0;

        v23 = v17 != 0;
      }
      else
      {
        v23 = 0;
      }
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2956E28);
      v24 = qword_1EE16D6D0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v72 = COERCE_DOUBLE("CLGyro");
        v73 = 1026;
        LODWORD(v74) = v23;
        _os_log_impl(&dword_18F1DC000, v24, OS_LOG_TYPE_DEBUG, "Type,%{public}s,ret=%{public}d", buf, 0x12u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2956E28);
        *(_DWORD *)v59 = 136446466;
        *(_QWORD *)&v59[4] = "CLGyro";
        *(_WORD *)&v59[12] = 1026;
        *(_DWORD *)&v59[14] = v23;
        v51 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "CoreLocation: %s\n", v51);
        if (v51 != (char *)buf)
          free(v51);
      }
      if (v23)
      {
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2956E28);
        v25 = qword_1EE16D6D0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v72 = COERCE_DOUBLE("GyroTemperature");
          v73 = 2050;
          v74 = v54;
          _os_log_impl(&dword_18F1DC000, v25, OS_LOG_TYPE_DEBUG, "Type,%{public}s,temperature,%{public}f", buf, 0x16u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6D8 != -1)
            dispatch_once(&qword_1EE16D6D8, &unk_1E2956E28);
          *(_DWORD *)v59 = 136446466;
          *(_QWORD *)&v59[4] = "GyroTemperature";
          *(_WORD *)&v59[12] = 2050;
          *(double *)&v59[14] = v54;
          v52 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "CoreLocation: %s\n", v52);
          if (v52 != (char *)buf)
            free(v52);
        }
        if (*(_BYTE *)(a1 + 96))
        {
          *(_QWORD *)v59 = &off_1E294C000;
          *(_QWORD *)&v59[8] = CFAbsoluteTimeGetCurrent();
          *(float *)&v59[20] = v54;
          v26 = sub_18F47400C();
          sub_18F475D9C(v26, (uint64_t)v59);
          sub_18F2B6BD0(buf);
          sub_18F2C6FD8(buf);
          v92 |= 1u;
          v89 = *(_QWORD *)&v59[8];
          v27 = v91;
          v28 = v54;
          *(_BYTE *)(v91 + 16) |= 2u;
          *(float *)(v27 + 12) = v28;
          sub_18F2B9670((PB::Base *)buf);
        }
        sub_18F1FD2C8(a1, 1, (uint64_t)&v53, 16);
      }
      *(double *)(a1 + 48) = v10;
    }
    v29 = v4;
    v30 = v6;
    v31 = v8;
    v53 = v10;
    v54 = v29;
    v55 = v30;
    v56 = v31;
    v57 = HIWORD(IntegerValue);
    v58 = (~IntegerValue & 0x300) == 0;
    if (qword_1ECEDEE68 != -1)
      dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
    v32 = qword_1ECEDEE60;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_DEBUG))
    {
      v33 = mach_absolute_time();
      v34 = sub_18F1FD20C(v33);
      *(_DWORD *)buf = 134220032;
      v72 = v29;
      v73 = 2048;
      v74 = v30;
      v75 = 2048;
      v76 = v31;
      v77 = 2048;
      v78 = v10;
      v79 = 1024;
      v80 = IntegerValue;
      v81 = 1024;
      v82 = HIWORD(IntegerValue) % 3u;
      v83 = 1024;
      v84 = (IntegerValue >> 8) & 1;
      v85 = 1024;
      v86 = (IntegerValue >> 9) & 1;
      v87 = 2048;
      v88 = v34;
      _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_DEBUG, "[CLGyro] x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d,now,%f", buf, 0x4Cu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
      v46 = mach_absolute_time();
      v47 = sub_18F1FD20C(v46);
      *(_DWORD *)v59 = 134220032;
      *(double *)&v59[4] = v29;
      *(_WORD *)&v59[12] = 2048;
      *(double *)&v59[14] = v30;
      *(_WORD *)&v59[22] = 2048;
      v60 = v31;
      *(_WORD *)v61 = 2048;
      *(double *)&v61[2] = v10;
      *(_WORD *)&v61[10] = 1024;
      v62 = IntegerValue;
      v63 = 1024;
      v64 = HIWORD(IntegerValue) % 3u;
      v65 = 1024;
      v66 = (IntegerValue >> 8) & 1;
      v67 = 1024;
      v68 = (IntegerValue >> 9) & 1;
      v69 = 2048;
      v70 = v47;
      v48 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "CoreLocation: %s\n", v48);
      if (v48 != (char *)buf)
        free(v48);
    }
    if (v10 < *(double *)(a1 + 56))
    {
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
      v35 = qword_1ECEDEE60;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_ERROR))
      {
        v36 = *(double *)(a1 + 56);
        *(_DWORD *)buf = 134218240;
        v72 = v36;
        v73 = 2048;
        v74 = v10;
        _os_log_impl(&dword_18F1DC000, v35, OS_LOG_TYPE_ERROR, "Gyro time rollback, last timestamp, %f, current timestamp, %f", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE68 != -1)
          dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
        v49 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)v59 = 134218240;
        *(_QWORD *)&v59[4] = v49;
        *(_WORD *)&v59[12] = 2048;
        *(double *)&v59[14] = v10;
        v50 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CLGyro::onGyroData(const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)", "CoreLocation: %s\n", v50);
        if (v50 != (char *)buf)
          free(v50);
      }
    }
    if (*(_BYTE *)(a1 + 96))
    {
      *(_QWORD *)v59 = &off_1E294C100;
      *(_QWORD *)&v59[8] = CFAbsoluteTimeGetCurrent();
      v60 = v10;
      *(float *)v61 = v29;
      *(float *)&v61[4] = v30;
      *(float *)&v61[8] = v8;
      v62 = IntegerValue;
      LOBYTE(v63) = HIWORD(IntegerValue) % 3u;
      HIBYTE(v63) = BYTE1(IntegerValue) & 1;
      LOBYTE(v64) = (IntegerValue & 0x200) != 0;
      v37 = sub_18F47400C();
      sub_18F475D9C(v37, (uint64_t)v59);
      sub_18F2B6BD0(buf);
      sub_18F2C6F74(buf);
      v92 |= 1u;
      v89 = *(_QWORD *)&v59[8];
      v38 = v90;
      *(_WORD *)(v90 + 44) |= 1u;
      *(double *)(v38 + 8) = v10;
      v39 = v90;
      *(_WORD *)(v90 + 44) |= 0x10u;
      *(float *)(v39 + 28) = v29;
      v40 = v90;
      *(_WORD *)(v90 + 44) |= 0x20u;
      *(float *)(v40 + 32) = v30;
      v41 = v90;
      *(_WORD *)(v90 + 44) |= 0x40u;
      *(float *)(v41 + 36) = v31;
      v42 = v90;
      *(_WORD *)(v90 + 44) |= 8u;
      *(_DWORD *)(v42 + 24) = IntegerValue;
      v43 = v90;
      *(_WORD *)(v90 + 44) |= 4u;
      *(_DWORD *)(v43 + 20) = HIWORD(IntegerValue) % 3u;
      v44 = v90;
      *(_WORD *)(v90 + 44) |= 0x80u;
      *(_BYTE *)(v44 + 40) = BYTE1(IntegerValue) & 1;
      v45 = v90;
      *(_WORD *)(v90 + 44) |= 0x100u;
      *(_BYTE *)(v45 + 41) = (IntegerValue & 0x200) != 0;
      sub_18F2B9670((PB::Base *)buf);
    }
    result = sub_18F1FD2C8(a1, 0, (uint64_t)&v53, 24);
    *(double *)(a1 + 56) = v10;
  }
  return result;
}

void sub_18F1FF478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_18F1FF4A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  float32x4_t v6;
  float v7;
  float v8;
  float v9;
  double v10;
  double v11;
  double v12;
  double v13;
  int v14;
  float32x4_t v15;
  float32x4_t v16;
  double v17;
  float32x4_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  char v26;
  char v27;
  __int16 v28;
  int v29;
  char v30;
  uint64_t v31;
  double v32;

  v4 = a1 + 312;
  v5 = *(float *)(a2 + 12);
  v17 = *(float *)(a2 + 8);
  *(double *)v16.i64 = v5;
  v32 = *(float *)(a2 + 16);
  sub_18F200B54(a1 + 296, (float64x2_t *)&v17, (uint64_t)&v16, &v32, (_QWORD *)a2);
  v6.i64[0] = *(_QWORD *)(a1 + 472);
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  if (*(double *)v6.i64 > 0.0)
  {
    v10 = *(double *)(a1 + 336);
    v11 = *(double *)(a1 + 328) + *(double *)(a1 + 328);
    v12 = *(double *)(a1 + 312);
    v13 = *(double *)(a1 + 320);
    v7 = *(float *)(a1 + 480) - (v10 * (v13 + v13) - v12 * v11);
    v8 = *(float *)(a1 + 484) - (-(v10 * (v12 + v12)) - v13 * v11);
    *(double *)v6.i64 = *(float *)(a1 + 488) - (v12 * (v12 + v12) + -1.0 + v13 * (v13 + v13));
    v9 = *(double *)v6.i64;
  }
  v14 = *(_DWORD *)(a1 + 460);
  v18 = 0uLL;
  v17 = -1.0;
  sub_18F1FFE94(&v18, v6);
  v27 = 1;
  v17 = *(double *)a2;
  v15 = *(float32x4_t *)(v4 + 16);
  v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)v4), (float64x2_t)v15);
  sub_18F1FFE94(&v16, v15);
  v18 = v16;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = *(_QWORD *)(v4 + 140);
  v23 = v14;
  v26 = -1;
  v24 = xmmword_18F506760;
  v25 = xmmword_18F507C30;
  v28 = (*(unsigned __int8 *)(a1 + 304) << 8) | (16 * *(unsigned __int8 *)(a1 + 252));
  v29 = 2;
  v31 = 0;
  v30 = 0;
  sub_18F1FFEF8(a1, (uint64_t)&v17);
}

void sub_18F1FF640(uint64_t a1, float32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  float32x4_t v8[3];
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;

  v8[0] = 0uLL;
  v7 = 0xBFF0000000000000;
  sub_18F1FFE94(v8, a2);
  v9 = 0;
  memset(&v8[1], 0, 32);
  v10 = xmmword_18F506750;
  v11 = 0x1FF00000000;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (sub_18F1FF6C8(a5, (uint64_t)&v7, (float32x4_t)xmmword_18F506750))
    sub_18F1FFEF8(a1, (uint64_t)&v7);
}

uint64_t sub_18F1FF6C8(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  NSObject *v5;
  uint64_t result;
  NSObject *v7;
  uint8_t *v8;
  __int16 __dst;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[16];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = 0xBFF0000000000000;
  memset(buf, 0, sizeof(buf));
  sub_18F1FFE94((float32x4_t *)buf, a3);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)buf;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  if (a1)
  {
    v10 = 0;
    v11 = 0;
    IOHIDEventGetVendorDefinedData();
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
    v7 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    result = sub_18F1FCA08(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
      __dst = 0;
LABEL_19:
      v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "static BOOL CLSensorFusionServiceSPU::populateDeviceMotion(IOHIDEventRef, uint32_t, CLSensorFusionService::Sample &)", "CoreLocation: %s\n");
      if (v8 != buf)
        free(v8);
      return 0;
    }
  }
  else
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
    v5 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v5, OS_LOG_TYPE_INFO, "#Warning Device motion event ref invalid", buf, 2u);
    }
    result = sub_18F1FCA08(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2953268);
      __dst = 0;
      goto LABEL_19;
    }
  }
  return result;
}

float32x4_t sub_18F1FFE94(float32x4_t *a1, float32x4_t result)
{
  float v2;

  result.f32[0] = sqrtf((float)((float)((float)(a1->f32[1] * a1->f32[1]) + (float)(a1->f32[0] * a1->f32[0]))+ (float)(a1->f32[2] * a1->f32[2]))+ (float)(a1->f32[3] * a1->f32[3]));
  v2 = result.f32[0] + -1.0;
  if ((float)(result.f32[0] + -1.0) <= 0.0)
    v2 = -(float)(result.f32[0] + -1.0);
  if (v2 >= 0.00000011921)
  {
    if (result.f32[0] == 0.0)
    {
      a1->i64[0] = 0;
      a1->i64[1] = 0x3F80000000000000;
    }
    else
    {
      result = vdivq_f32(*a1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result.f32, 0));
      *a1 = result;
    }
  }
  return result;
}

void sub_18F1FFEF8(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t, _QWORD, _QWORD);
  __int128 v5;

  sub_18F1FFFE8(a1, a2);
  v4 = *(void (**)(uint64_t, _QWORD, _QWORD))(a1 + 56);
  if (v4)
    v4(a2, *(unsigned int *)(a1 + 12), *(_QWORD *)(a1 + 64));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a2;
  if (a1 + 96 != a2)
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 156) = *(_QWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 196) = *(_DWORD *)(a2 + 100);
  *(_OWORD *)(a1 + 180) = v5;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
}

void sub_18F1FFFE8(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  NSObject *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  double v33;
  CFAbsoluteTime Current;
  double v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  double v90;
  char *v91;
  uint8_t buf[4];
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  double v97;
  __int16 v98;
  double v99;
  __int16 v100;
  double v101;
  __int16 v102;
  double v103;
  __int16 v104;
  double v105;
  __int16 v106;
  double v107;
  __int16 v108;
  double v109;
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  double v115;
  __int16 v116;
  double v117;
  __int16 v118;
  double v119;
  __int16 v120;
  double v121;
  __int16 v122;
  double v123;
  __int16 v124;
  double v125;
  __int16 v126;
  double v127;
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  uint64_t v137;
  __int16 v138;
  double v139;
  __int16 v140;
  double v141;
  __int16 v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  _BYTE v147[22];
  __int16 v148;
  double v149;
  _BYTE v150[40];
  _BYTE v151[12];
  double v152;
  __int16 v153;
  _BYTE v154[10];
  double v155;
  __int16 v156;
  double v157;
  __int16 v158;
  double v159;
  __int16 v160;
  double v161;
  __int16 v162;
  double v163;
  __int16 v164;
  double v165;
  __int16 v166;
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  int v171;
  __int16 v172;
  int v173;
  __int16 v174;
  int v175;
  __int16 v176;
  int v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  double v181;
  __int16 v182;
  double v183;
  __int16 v184;
  double v185;
  uint64_t v186;

  v186 = *MEMORY[0x1E0C80C00];
  if (*(double *)(a1 + 96) <= 0.0)
  {
    v4 = OS_LOG_TYPE_DEFAULT;
  }
  else if ((((*(unsigned __int16 *)(a1 + 178) ^ *(unsigned __int16 *)(a2 + 82)) >> 8) & 1) != 0)
  {
    v4 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    v4 = OS_LOG_TYPE_DEBUG;
  }
  v5 = mach_absolute_time();
  v6 = sub_18F1FD20C(v5);
  v7 = *(double *)a2;
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
  v8 = v6 - v7;
  v9 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, v4))
  {
    v10 = *(float *)(a2 + 8);
    v11 = *(float *)(a2 + 12);
    v12 = *(float *)(a2 + 16);
    v13 = *(float *)(a2 + 20);
    v14 = *(float *)(a2 + 24);
    v15 = *(float *)(a2 + 28);
    v16 = *(float *)(a2 + 32);
    v17 = (float)(*(float *)(a2 + 36) * 57.296);
    v18 = (float)(*(float *)(a2 + 40) * 57.296);
    v19 = (float)(*(float *)(a2 + 44) * 57.296);
    v20 = *(float *)(a2 + 48);
    v21 = *(float *)(a2 + 52);
    v22 = *(float *)(a2 + 56);
    v23 = *(float *)(a2 + 68);
    v24 = *(float *)(a2 + 72);
    v25 = *(float *)(a2 + 76);
    v26 = *(float *)(a2 + 60);
    v27 = *(float *)(a2 + 64);
    v28 = *(char *)(a2 + 80);
    v29 = *(_DWORD *)(a2 + 84);
    v30 = *(unsigned __int8 *)(a2 + 81);
    v31 = *(unsigned __int16 *)(a2 + 82);
    v32 = *(_QWORD *)(a2 + 96);
    v33 = *(double *)a2;
    *(_DWORD *)buf = 134224384;
    v93 = v10;
    v94 = 2048;
    v95 = v11;
    v96 = 2048;
    v97 = v12;
    v98 = 2048;
    v99 = v13;
    v100 = 2048;
    v101 = v14;
    v102 = 2048;
    v103 = v15;
    v104 = 2048;
    v105 = v16;
    v106 = 2048;
    v107 = v17;
    v108 = 2048;
    v109 = v18;
    v110 = 2048;
    v111 = v19;
    v112 = 2048;
    v113 = v20;
    v114 = 2048;
    v115 = v21;
    v116 = 2048;
    v117 = v22;
    v118 = 2048;
    v119 = v23;
    v120 = 2048;
    v121 = v24;
    v122 = 2048;
    v123 = v25;
    v124 = 2048;
    v125 = v26;
    v126 = 2048;
    v127 = v27;
    v128 = 1026;
    v129 = v28;
    v130 = 1026;
    v131 = v29;
    v132 = 1026;
    v133 = v30;
    v134 = 1026;
    v135 = v31;
    v136 = 2050;
    v137 = v32;
    v138 = 2050;
    v139 = v33;
    v140 = 2050;
    v141 = v6;
    v142 = 2050;
    v143 = v8;
    _os_log_impl(&dword_18F1DC000, v9, v4, "[CLSensorFusionService] q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magBiasEstVar.x,%10.10f,magBiasEstVar.y,%10.10f,magBiasEstVar.z,%10.10f,heading,%.3f,accuracy,%.3f,level,%{public}d,variant,%{public}d,mode,%{public}d,status,%{public}#02x,clientID,%{public}llu,timestamp,%{public}lf,now,%{public}lf,latency,%{public}lf", buf, 0xF6u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954248);
    v67 = *(float *)(a2 + 8);
    v68 = *(float *)(a2 + 12);
    v69 = *(float *)(a2 + 16);
    v70 = *(float *)(a2 + 20);
    v71 = *(float *)(a2 + 24);
    v72 = *(float *)(a2 + 28);
    v73 = *(float *)(a2 + 32);
    v74 = (float)(*(float *)(a2 + 36) * 57.296);
    v75 = (float)(*(float *)(a2 + 40) * 57.296);
    v76 = (float)(*(float *)(a2 + 44) * 57.296);
    v77 = *(float *)(a2 + 48);
    v78 = *(float *)(a2 + 52);
    v79 = *(float *)(a2 + 56);
    v80 = *(float *)(a2 + 68);
    v81 = *(float *)(a2 + 72);
    v82 = *(float *)(a2 + 76);
    v83 = *(float *)(a2 + 60);
    v84 = *(float *)(a2 + 64);
    v85 = *(char *)(a2 + 80);
    v86 = *(_DWORD *)(a2 + 84);
    v87 = *(unsigned __int8 *)(a2 + 81);
    v88 = *(unsigned __int16 *)(a2 + 82);
    v89 = *(_QWORD *)(a2 + 96);
    v90 = *(double *)a2;
    *(_DWORD *)v147 = 134224384;
    *(double *)&v147[4] = v67;
    *(_WORD *)&v147[12] = 2048;
    *(double *)&v147[14] = v68;
    v148 = 2048;
    v149 = v69;
    *(_WORD *)v150 = 2048;
    *(double *)&v150[2] = v70;
    *(_WORD *)&v150[10] = 2048;
    *(double *)&v150[12] = v71;
    *(_WORD *)&v150[20] = 2048;
    *(double *)&v150[22] = v72;
    *(_WORD *)&v150[30] = 2048;
    *(double *)&v150[32] = v73;
    *(_WORD *)v151 = 2048;
    *(double *)&v151[2] = v74;
    *(_WORD *)&v151[10] = 2048;
    v152 = v75;
    v153 = 2048;
    *(double *)v154 = v76;
    *(_WORD *)&v154[8] = 2048;
    v155 = v77;
    v156 = 2048;
    v157 = v78;
    v158 = 2048;
    v159 = v79;
    v160 = 2048;
    v161 = v80;
    v162 = 2048;
    v163 = v81;
    v164 = 2048;
    v165 = v82;
    v166 = 2048;
    v167 = v83;
    v168 = 2048;
    v169 = v84;
    v170 = 1026;
    v171 = v85;
    v172 = 1026;
    v173 = v86;
    v174 = 1026;
    v175 = v87;
    v176 = 1026;
    v177 = v88;
    v178 = 2050;
    v179 = v89;
    v180 = 2050;
    v181 = v90;
    v182 = 2050;
    v183 = v6;
    v184 = 2050;
    v185 = v8;
    v91 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLSensorFusionService::logSample(const CLSensorFusionService::Sample *)", "CoreLocation: %s\n", v91);
    if (v91 != (char *)buf)
      free(v91);
  }
  if (*(_BYTE *)(a1 + 8))
  {
    *(_QWORD *)v147 = &off_1E294BF80;
    Current = CFAbsoluteTimeGetCurrent();
    v35 = *(double *)a2;
    *(CFAbsoluteTime *)&v147[8] = Current;
    v149 = v35;
    *(_OWORD *)v150 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)&v150[16] = *(_QWORD *)(a2 + 24);
    LODWORD(Current) = *(_DWORD *)(a2 + 32);
    *(float32x2_t *)&v150[28] = vmul_f32(*(float32x2_t *)(a2 + 36), (float32x2_t)vdup_n_s32(0x42652EE1u));
    *(float *)&v35 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)&v150[24] = LODWORD(Current);
    *(_DWORD *)&v150[36] = LODWORD(v35);
    *(_QWORD *)v151 = *(_QWORD *)(a2 + 48);
    LODWORD(v35) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)&v151[8] = *(_DWORD *)(a2 + 56);
    LOBYTE(v152) = *(_BYTE *)(a2 + 80);
    LODWORD(Current) = *(_DWORD *)(a2 + 64);
    HIDWORD(v152) = LODWORD(v35);
    *(_DWORD *)&v154[2] = LODWORD(Current);
    v36 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)&v154[6] = *(_DWORD *)(a2 + 84);
    LODWORD(v155) = v36;
    HIDWORD(v155) = *(_QWORD *)(a2 + 96);
    v156 = *(_WORD *)(a2 + 82);
    v37 = sub_18F47400C();
    sub_18F475D9C(v37, (uint64_t)v147);
    sub_18F2B6BD0(buf);
    sub_18F2C72F8(buf);
    v146 |= 1u;
    v144 = *(_QWORD *)&v147[8];
    v38 = v145;
    v39 = *(double *)a2;
    *(_DWORD *)(v145 + 124) |= 0x10u;
    *(double *)(v38 + 40) = v39;
    v40 = v145;
    v41 = *(float *)(a2 + 8);
    *(_DWORD *)(v145 + 124) |= 2u;
    *(double *)(v40 + 16) = v41;
    v42 = v145;
    v43 = *(float *)(a2 + 12);
    *(_DWORD *)(v145 + 124) |= 4u;
    *(double *)(v42 + 24) = v43;
    v44 = v145;
    v45 = *(float *)(a2 + 16);
    *(_DWORD *)(v145 + 124) |= 8u;
    *(double *)(v44 + 32) = v45;
    v46 = v145;
    v47 = *(float *)(a2 + 20);
    *(_DWORD *)(v145 + 124) |= 1u;
    *(double *)(v46 + 8) = v47;
    v48 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v145 + 124) |= 0x40000u;
    *(_DWORD *)(v48 + 100) = LODWORD(v47);
    v49 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(v145 + 124) |= 0x80000u;
    *(_DWORD *)(v49 + 104) = LODWORD(v47);
    v50 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v145 + 124) |= 0x100000u;
    *(_DWORD *)(v50 + 108) = LODWORD(v47);
    v51 = v145;
    *(float *)&v47 = *(float *)(a2 + 36) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x2000u;
    *(_DWORD *)(v51 + 80) = LODWORD(v47);
    v52 = v145;
    *(float *)&v47 = *(float *)(a2 + 40) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x4000u;
    *(_DWORD *)(v52 + 84) = LODWORD(v47);
    v53 = v145;
    *(float *)&v47 = *(float *)(a2 + 44) * 57.296;
    *(_DWORD *)(v145 + 124) |= 0x8000u;
    *(_DWORD *)(v53 + 88) = LODWORD(v47);
    v54 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v145 + 124) |= 0x100u;
    *(_DWORD *)(v54 + 60) = LODWORD(v47);
    v55 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(v145 + 124) |= 0x200u;
    *(_DWORD *)(v55 + 64) = LODWORD(v47);
    v56 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v145 + 124) |= 0x400u;
    *(_DWORD *)(v56 + 68) = LODWORD(v47);
    v57 = v145;
    v58 = *(char *)(a2 + 80);
    *(_DWORD *)(v145 + 124) |= 0x80u;
    *(_DWORD *)(v57 + 56) = v58;
    v59 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v145 + 124) |= 0x800u;
    *(_DWORD *)(v59 + 72) = LODWORD(v47);
    v60 = v145;
    LODWORD(v47) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v145 + 124) |= 0x20u;
    *(_DWORD *)(v60 + 48) = LODWORD(v47);
    v61 = v145;
    v62 = *(unsigned __int8 *)(a2 + 81);
    *(_DWORD *)(v145 + 124) |= 0x1000u;
    *(_DWORD *)(v61 + 76) = v62;
    v63 = v145;
    v64 = *(_QWORD *)(a2 + 96);
    *(_DWORD *)(v145 + 124) |= 0x40u;
    *(_DWORD *)(v63 + 52) = v64;
    v65 = v145;
    LODWORD(v64) = *(unsigned __int16 *)(a2 + 82);
    *(_DWORD *)(v145 + 124) |= 0x10000u;
    *(_DWORD *)(v65 + 92) = v64;
    v66 = v145;
    LODWORD(v64) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v145 + 124) |= 0x200000u;
    *(_DWORD *)(v66 + 112) = v64;
    sub_18F2B9670((PB::Base *)buf);
  }
}

void sub_18F2007C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_18F2007DC(float32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  float v8;
  _BYTE v9[8];
  _DWORD v10[28];

  sub_18F2008FC((uint64_t)v9, a1);
  if (a2 <= 0xA)
  {
    if (((1 << a2) & 0x1C) != 0)
    {
      sub_18F1FD2C8(a3, 2, (uint64_t)v9, 120);
      sub_18F1FD2C8(a3, 3, (uint64_t)v9, 120);
      v7 = *(double *)(a3 + 88);
      if (v7 >= 0.0)
      {
        v8 = *(double *)(a3 + 96);
        sub_18F3EEC08((uint64_t)v10, v8, v7);
      }
      else
      {
        v10[22] = 1127481344;
      }
      v5 = a3;
      v6 = 4;
    }
    else if (((1 << a2) & 0x221) != 0)
    {
      v5 = a3;
      v6 = a2;
    }
    else
    {
      if (((1 << a2) & 0x402) == 0)
        return;
      sub_18F1FD2C8(a3, 1, (uint64_t)v9, 120);
      v5 = a3;
      v6 = 10;
    }
    sub_18F1FD2C8(v5, v6, (uint64_t)v9, 120);
  }
}

float sub_18F2008FC(uint64_t a1, float32x2_t *a2)
{
  float32x2_t v2;
  float v3;
  __int32 v4;
  int v5;
  __int16 v6;
  float result;

  v2 = *a2;
  *(float64x2_t *)(a1 + 16) = vcvtq_f64_f32(a2[1]);
  v3 = a2[2].f32[1];
  *(double *)(a1 + 32) = a2[2].f32[0];
  *(float32x2_t *)a1 = v2;
  *(double *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 40) = a2[3].i32[0];
  *(_DWORD *)(a1 + 44) = a2[3].i32[1];
  *(_DWORD *)(a1 + 48) = a2[4].i32[0];
  *(_DWORD *)(a1 + 52) = a2[4].i32[1];
  *(_DWORD *)(a1 + 56) = a2[5].i32[0];
  *(_DWORD *)(a1 + 60) = a2[5].i32[1];
  *(_DWORD *)(a1 + 64) = a2[6].i32[0];
  *(_DWORD *)(a1 + 68) = a2[6].i32[1];
  v4 = a2[7].i32[1];
  *(_DWORD *)(a1 + 72) = a2[7].i32[0];
  *(_WORD *)(a1 + 110) = 0;
  v5 = a2[10].i8[0];
  if ((v5 + 1) >= 8)
    v5 = 0;
  *(_DWORD *)(a1 + 76) = v5;
  v6 = a2[10].i16[1];
  *(_BYTE *)(a1 + 81) = (v6 & 0x10) != 0;
  *(_BYTE *)(a1 + 80) = (v6 & 8) != 0;
  *(_BYTE *)(a1 + 82) = HIBYTE(v6) & 1;
  *(_DWORD *)(a1 + 84) = v4;
  *(_BYTE *)(a1 + 88) = (v6 & 0x4000) != 0;
  *(_BYTE *)(a1 + 89) = (v6 & 0x40) != 0;
  result = a2[8].f32[0];
  *(float *)(a1 + 96) = result;
  *(_DWORD *)(a1 + 92) = 0;
  *(_BYTE *)(a1 + 100) = a2[11].i8[0];
  *(_WORD *)(a1 + 110) = v6;
  *(_BYTE *)(a1 + 108) = a2[10].i8[1];
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_18F2009D4()
{
  if (qword_1ECEDFB88 != -1)
    dispatch_once(&qword_1ECEDFB88, &unk_1E2953C28);
  return qword_1ECEDFB80;
}

float sub_18F200A14(float *a1)
{
  uint64_t v1;
  float v2;
  float v3;
  float v4;
  float result;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  float v10;
  _DWORD v11[3];

  v1 = 0;
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[1];
  result = (float)((float)(v3 * v4) - (float)(*a1 * v2)) + (float)((float)(v3 * v4) - (float)(*a1 * v2));
  v6 = (float)-(float)(v3 * *a1) - (float)(v4 * v2);
  v7 = (float)((float)((float)(v4 * v4) + (float)(*a1 * *a1)) * 2.0) + -1.0;
  *(float *)v11 = result;
  *(float *)&v11[1] = v6 + v6;
  *(float *)&v11[2] = v7;
  v8 = 0.0;
  do
  {
    v8 = v8 + (float)(*(float *)&v11[v1] * *(float *)&v11[v1]);
    ++v1;
  }
  while (v1 != 3);
  if (sqrtf(v8) > 0.00000011921)
  {
    v9 = 0;
    v10 = 0.0;
    do
    {
      v10 = v10 + (float)(*(float *)&v11[v9] * *(float *)&v11[v9]);
      ++v9;
    }
    while (v9 != 3);
    return result / sqrtf(v10);
  }
  return result;
}

void sub_18F200AC4(uint64_t a1, float a2, float a3)
{
  if (a2 != -1.0 && *(_BYTE *)(a1 + 272) && a3 > 0.0)
    asinf(5.0 / a3);
}

uint64_t sub_18F200B3C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

void sub_18F200B54(uint64_t a1, float64x2_t *a2, uint64_t a3, double *a4, _QWORD *a5)
{
  float v7;
  float32x2_t v8;
  float v9;
  float v10;
  NSObject *v11;
  __int128 v12;
  float32x2_t v13;
  double v14;
  NSObject *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  char *v27;
  double v28;
  float32x2_t v29;
  _BYTE v30[32];
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  float64x2_t v45;
  double v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 168) = *a5;
  ++*(_DWORD *)(a1 + 152);
  v7 = *a4;
  v8 = vcvt_f32_f64(vsubq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(*a2), (float32x2_t)vdup_n_s32(0x3C8EFA35u))), *(float64x2_t *)(a1 + 88)));
  v9 = (float)(v7 * 0.017453) - *(double *)(a1 + 104);
  *(float32x2_t *)(a1 + 156) = v8;
  *(float *)(a1 + 164) = v9;
  v29 = v8;
  if (*(_BYTE *)(a1 + 224))
  {
    v10 = v8.f32[1];
    LODWORD(v45.f64[0]) = sqrtf(vmlas_n_f32(vmuls_lane_f32(v8.f32[1], v8, 1), v8.f32[0], v8.f32[0]) + (float)(v9 * v9));
    sub_18F1FD65C(a1 + 232, (float *)&v45);
    if (*(_BYTE *)(a1 + 196))
    {
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      v11 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218752;
        v36 = (float)(*(float *)v45.f64 / 0.017453);
        v37 = 2048;
        v38 = (float)(v29.f32[0] * 57.296);
        v39 = 2048;
        v40 = (float)(v10 * 57.296);
        v41 = 2048;
        v42 = (float)(v9 * 57.296);
        _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_INFO, "omegaMag6, %.3f, omega, %.3f, %.3f, %.3f", buf, 0x2Au);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
        *(_DWORD *)v30 = 134218752;
        *(double *)&v30[4] = (float)(*(float *)v45.f64 / 0.017453);
        *(_WORD *)&v30[12] = 2048;
        *(double *)&v30[14] = (float)(v29.f32[0] * 57.296);
        *(_WORD *)&v30[22] = 2048;
        *(double *)&v30[24] = (float)(v10 * 57.296);
        v31 = 2048;
        v32 = (float)(v9 * 57.296);
        v27 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v27);
        if (v27 != (char *)buf)
          free(v27);
      }
    }
    v8 = v29;
  }
  v28 = *(double *)(a1 + 200);
  v45 = vmulq_n_f64(vcvtq_f64_f32(v8), v28);
  v46 = v28 * v9;
  sub_18F201124((double *)buf, v45.f64);
  sub_18F2010A8((double *)v30, (double *)buf, (double *)(a1 + 16));
  v12 = *(_OWORD *)&v30[16];
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v30;
  *(_OWORD *)(a1 + 32) = v12;
  v13 = vadd_f32(*(float32x2_t *)(a1 + 136), v29);
  *(float32x2_t *)(a1 + 136) = v13;
  *(float *)&v12 = *(float *)(a1 + 144) + v9;
  *(_DWORD *)(a1 + 144) = v12;
  ++*(_DWORD *)(a1 + 148);
  v14 = v28
      * (v28
       * (float)(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v13, v13).i32[1]), v13.f32[0], v13.f32[0])
               + (float)(*(float *)&v12 * *(float *)&v12)));
  if (v14 > 0.122500002)
    sub_18F3D5DE0(a1, v14, (int32x2_t)0x3FBF5C2900000000);
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
    v15 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(double *)(a1 + 16);
      v17 = *(double *)(a1 + 24);
      v18 = *(double *)(a1 + 32);
      v19 = *(double *)(a1 + 40);
      v20 = *a5;
      *(_DWORD *)buf = 134219008;
      v36 = v16;
      v37 = 2048;
      v38 = v17;
      v39 = 2048;
      v40 = v18;
      v41 = 2048;
      v42 = v19;
      v43 = 2048;
      v44 = v20;
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_DEBUG, "[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f", buf, 0x34u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
      v21 = *(_QWORD *)(a1 + 16);
      v22 = *(_QWORD *)(a1 + 24);
      v23 = *(_QWORD *)(a1 + 32);
      v24 = *(double *)(a1 + 40);
      v25 = *a5;
      *(_DWORD *)v30 = 134219008;
      *(_QWORD *)&v30[4] = v21;
      *(_WORD *)&v30[12] = 2048;
      *(_QWORD *)&v30[14] = v22;
      *(_WORD *)&v30[22] = 2048;
      *(_QWORD *)&v30[24] = v23;
      v31 = 2048;
      v32 = v24;
      v33 = 2048;
      v34 = v25;
      v26 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v26);
      if (v26 != (char *)buf)
        free(v26);
    }
  }
}

double sub_18F2010A8(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double result;

  v4 = a2[2];
  v3 = a2[3];
  v5 = a3[1];
  v6 = a2[1];
  v7 = a3[2];
  v8 = a3[3];
  *a1 = v4 * v5 + v3 * *a3 - v6 * v7 + *a2 * v8;
  v9 = *a3;
  v10 = *a2;
  a1[1] = v3 * v5 - v4 * *a3 + *a2 * v7 + v6 * v8;
  v11 = a2[1];
  v12 = a3[1];
  a1[2] = v11 * v9 - v10 * v12 + v3 * v7 + v4 * v8;
  result = -(v11 * v12) - v10 * v9 - a2[2] * a3[2] + v3 * v8;
  a1[3] = result;
  return result;
}

void sub_18F201124(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double cosval;
  __double2 v13;

  v4 = *a2;
  v5 = sqrt(a2[1] * a2[1] + v4 * v4 + a2[2] * a2[2]);
  if (v5 >= 0.00000002)
  {
    v13 = __sincos_stret(v5 * 0.5);
    cosval = v13.__cosval;
    *a1 = v4 * v13.__sinval / v5;
    a1[1] = v13.__sinval * a2[1] / v5;
    v11 = v13.__sinval * a2[2] / v5;
  }
  else
  {
    *a1 = v4 * 0.5;
    v6 = a2[1] * 0.5;
    a1[1] = v6;
    v7 = a2[2] * 0.5;
    v8 = v5 * v5 * 0.125;
    v9 = 1.0 - v8;
    v10 = sqrt(v8 + 1.0);
    *a1 = v4 * 0.5 / v10;
    a1[1] = v6 / v10;
    v11 = v7 / v10;
    cosval = v9 / v10;
  }
  a1[2] = v11;
  a1[3] = cosval;
}

uint64_t sub_18F201200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

uint64_t sub_18F20120C(uint64_t result, uint64_t a2)
{
  uint64_t (*v2)(_OWORD *, _QWORD);
  __int128 v3;
  __int128 v4;
  _OWORD v5[5];
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(uint64_t (**)(_OWORD *, _QWORD))(a2 + 520);
  if (v2)
  {
    v3 = *(_OWORD *)(result + 56);
    v5[2] = *(_OWORD *)(result + 40);
    v5[3] = v3;
    v5[4] = *(_OWORD *)(result + 72);
    v6 = *(_QWORD *)(result + 88);
    v4 = *(_OWORD *)(result + 24);
    v5[0] = *(_OWORD *)(result + 8);
    v5[1] = v4;
    v7 = *(_QWORD *)result;
    v8 = *(_BYTE *)(result + 100);
    return v2(v5, *(_QWORD *)(a2 + 528));
  }
  return result;
}

void sub_18F201410(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unint64_t v5;
  float v6;
  float v7;
  NSObject *v8;
  CFAbsoluteTime Current;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  float v16;
  float v17;
  uint8_t buf[4];
  _BYTE v19[18];
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  uint64_t v24;
  _QWORD *v25;
  char v26;
  _BYTE v27[22];
  __int16 v28;
  double v29;
  _BYTE v30[10];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (_DWORD *)(a2 + 56);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 8);
  *(_DWORD *)v19 = 0;
  *(_QWORD *)&v19[4] = (unint64_t)(*(double *)a1 * 1000000.0);
  sub_18F201790(a2 + 56, (uint64_t)buf);
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(float *)(a2 + 64);
  if ((*(_DWORD *)(a2 + 60) == 2 || *v4 == 2) && v5 > *(_QWORD *)(a2 + 48))
  {
    v15 = (double)v5 / 1000000.0;
    v16 = v6;
    v7 = *(float *)(a1 + 12);
    v17 = v7;
    if (qword_1EE16D6C8 != -1)
      dispatch_once(&qword_1EE16D6C8, &unk_1E2955CE0);
    v8 = qword_1EE16D6C0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)v19 = "PressureFiltered";
      *(_WORD *)&v19[8] = 2048;
      *(double *)&v19[10] = v6;
      v20 = 2048;
      v21 = v7;
      v22 = 2048;
      v23 = (double)v5 / 1000000.0;
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_DEBUG, "Type,%s,pressure,%.6f,temperature,%.3f,timestamp,%f", buf, 0x2Au);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6C8 != -1)
        dispatch_once(&qword_1EE16D6C8, &unk_1E2955CE0);
      *(_DWORD *)v27 = 136315906;
      *(_QWORD *)&v27[4] = "PressureFiltered";
      *(_WORD *)&v27[12] = 2048;
      *(double *)&v27[14] = v6;
      v28 = 2048;
      v29 = v7;
      *(_WORD *)v30 = 2048;
      *(double *)&v30[2] = (double)v5 / 1000000.0;
      v14 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLFilteredPressure::onPressureData(const CLPressure::Sample *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    if (*(_BYTE *)(a2 + 40))
    {
      *(_QWORD *)v27 = &off_1E294C080;
      Current = CFAbsoluteTimeGetCurrent();
      *(float *)v30 = v6;
      *(float *)&v30[4] = v7;
      *(CFAbsoluteTime *)&v27[8] = Current;
      v29 = (double)v5 / 1000000.0;
      v10 = sub_18F47400C();
      sub_18F475D9C(v10, (uint64_t)v27);
      sub_18F2B6BD0(buf);
      sub_18F2C7230(buf);
      v26 |= 1u;
      v24 = *(_QWORD *)&v27[8];
      sub_18F3203CC(v25);
      v11 = v25[1];
      *(_BYTE *)(v11 + 24) |= 1u;
      *(double *)(v11 + 8) = (double)v5 / 1000000.0;
      v12 = v25[1];
      *(_BYTE *)(v12 + 24) |= 2u;
      *(float *)(v12 + 16) = v6;
      v13 = v25[1];
      *(_BYTE *)(v13 + 24) |= 4u;
      *(float *)(v13 + 20) = v7;
      sub_18F2B9670((PB::Base *)buf);
    }
    sub_18F1FD2C8(a2, 0, (uint64_t)&v15, 16);
    *(_QWORD *)(a2 + 48) = v5;
  }
}

void sub_18F201774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_18F201790(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 736);
  if (v4)
  {
    v5 = (float)(unint64_t)(*(_QWORD *)(a2 + 8) - v4) / 1000000.0;
    *(float *)(a1 + 28) = v5;
    if (v5 >= 0.08)
    {
      if (*(_DWORD *)(a1 + 4))
      {
        *(_DWORD *)(a1 + 4) = 0;
        *(_DWORD *)(a1 + 48) = 0;
        *(_DWORD *)(a1 + 824) = 0;
        *(_QWORD *)(a1 + 712) = 0;
        *(_DWORD *)(a1 + 720) = 0;
        *(_QWORD *)(a1 + 728) = 0;
        *(_QWORD *)(a1 + 752) = 0;
      }
      goto LABEL_9;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 28) = 1025758986;
  }
  sub_18F2018C0(a1, a2);
  if (*(_DWORD *)(a1 + 4) != 2)
  {
LABEL_9:
    sub_18F201C3C(a1, a2);
    goto LABEL_10;
  }
  if (*(_DWORD *)a1)
  {
    *(_DWORD *)a1 = 0;
    *(_DWORD *)(a1 + 36) = 0;
    *(_DWORD *)(a1 + 44) = 0;
  }
LABEL_10:
  v6 = *(_QWORD *)(a1 + 736);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 8) - v6;
    v8 = *(unsigned __int16 *)(a1 + 794);
    v9 = *(unsigned int *)(a1 + 796);
    v10 = *(unsigned __int16 *)(a1 + 792);
    if (v10 + v8 >= v9)
      v11 = *(unsigned int *)(a1 + 796);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 792 + 8 * (v10 + v8 - v11) + 8) = v7;
    if (v9 <= v8)
    {
      if (v10 + 1 < v9)
        LOWORD(v9) = 0;
      *(_WORD *)(a1 + 792) = v10 + 1 - v9;
    }
    else
    {
      *(_WORD *)(a1 + 794) = v8 + 1;
    }
  }
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 8);
}

void sub_18F2018C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  float *v10;
  unsigned __int16 *v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  int v21;
  float v22;
  float v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;

  if (!*(_WORD *)(a1 + 50))
  {
    *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 8);
    *(_DWORD *)(a1 + 4) = 1;
  }
  sub_18F201BDC((unsigned __int16 *)(a1 + 824), (_DWORD *)a2);
  if (*(_DWORD *)(a1 + 4) == 2 && *(float *)(a1 + 756) <= 22.5)
  {
    v13 = *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 824), 0);
    v14 = *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 824), 1uLL);
    v15 = *(float *)sub_18F3410E0((unsigned __int16 *)(a1 + 824), 2uLL);
    if (v13 >= v14)
      v16 = v14;
    else
      v16 = v13;
    if (v13 <= v14)
      v17 = v14;
    else
      v17 = v13;
    if (v17 < v15)
      v15 = v17;
    if (v16 > v15)
      v15 = v16;
    v18 = *(unsigned __int16 *)(a1 + 48);
    v4 = *(unsigned __int16 *)(a1 + 50);
    v5 = *(unsigned int *)(a1 + 52);
    if (v18 + v4 >= v5)
      v19 = *(unsigned int *)(a1 + 52);
    else
      v19 = 0;
    *(float *)(a1 + 48 + 4 * (v18 + v4 - v19) + 8) = v15;
    if (v5 <= v4)
    {
      v24 = v18 + 1;
      if (v24 >= v5)
        v25 = v5;
      else
        v25 = 0;
      *(_WORD *)(a1 + 48) = v24 - v25;
    }
    else
    {
      LOWORD(v4) = v4 + 1;
      *(_WORD *)(a1 + 50) = v4;
    }
  }
  else
  {
    sub_18F201BDC((unsigned __int16 *)(a1 + 48), (_DWORD *)a2);
    LOWORD(v4) = *(_WORD *)(a1 + 50);
    LODWORD(v5) = *(_DWORD *)(a1 + 52);
  }
  v6 = *(_DWORD *)(a1 + 752);
  *(_DWORD *)(a1 + 752) = v6 + 1;
  if ((_DWORD)v5 == (unsigned __int16)v4 && v6 >= 163)
  {
    if (*(_DWORD *)(a1 + 4) == 2)
    {
      v7 = *(_DWORD *)(a1 + 712);
      v8 = *(_DWORD *)(a1 + 764);
      v9 = *(_DWORD *)(a1 + 760);
      if (*(_BYTE *)(a1 + 768))
      {
LABEL_10:
        v10 = (float *)&unk_18F507E94;
        v11 = (unsigned __int16 *)(a1 + 48);
        v12 = 7;
LABEL_40:
        v27 = sub_18F49D434(v11, v7, v8, v9, v10, v12);
        *(float *)(a1 + 772) = v27;
        v28 = sub_18F3412D8((unsigned __int16 *)(a1 + 48), (unsigned int (*)(float, float))sub_18F3414D4, 0x8EuLL);
        v29 = sub_18F3412D8((unsigned __int16 *)(a1 + 48), (unsigned int (*)(float, float))sub_18F3414E0, 0x8EuLL);
        v30 = *(_QWORD *)(a2 + 8) - *(int *)(a1 + 720);
        *(float *)(a1 + 8) = v27;
        *(float *)(a1 + 12) = v28 - v29;
        *(_QWORD *)(a1 + 16) = v30;
        *(_DWORD *)(a1 + 752) -= *(_DWORD *)(a1 + 716);
        *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 8);
        return;
      }
LABEL_39:
      v10 = (float *)&unk_18F507E7C;
      v11 = (unsigned __int16 *)(a1 + 48);
      v12 = 6;
      goto LABEL_40;
    }
    v20 = 163000000.0 / (float)(unint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)(a1 + 728));
    *(float *)(a1 + 756) = v20;
    v21 = *(unsigned __int8 *)(a1 + 768);
    if (*(_BYTE *)(a1 + 768))
    {
      v7 = 150;
      *(_DWORD *)(a1 + 712) = 150;
      v9 = (int)v20;
      *(_DWORD *)(a1 + 760) = (int)v20;
      v8 = 14;
      *(_DWORD *)(a1 + 764) = 14;
      v22 = (float)(int)v20;
      v23 = 14.0;
      goto LABEL_38;
    }
    if (v20 <= 28.5)
    {
      if (v20 > 22.5)
      {
        v7 = 36;
        *(_DWORD *)(a1 + 712) = 36;
        *(_QWORD *)(a1 + 760) = 0x8000000019;
        v22 = 25.0;
        v8 = 128;
        v9 = 25;
        v23 = 128.0;
        goto LABEL_38;
      }
      v7 = 60;
      *(_DWORD *)(a1 + 712) = 60;
      *(_QWORD *)(a1 + 760) = 0x6800000014;
      v22 = 20.0;
      v8 = 104;
      v9 = 20;
      *(float *)&v26 = 104.0;
    }
    else
    {
      v7 = 0;
      *(_DWORD *)(a1 + 712) = 0;
      *(_QWORD *)(a1 + 760) = 0xA400000020;
      v8 = 164;
      v9 = 32;
      v22 = 32.0;
      *(float *)&v26 = 164.0;
    }
    v23 = *(float *)&v26;
LABEL_38:
    *(_DWORD *)(a1 + 716) = (int)(float)(v22 * *(float *)(a1 + 24));
    *(_DWORD *)(a1 + 720) = (int)(float)((float)((float)(1000000.0 / v20) * v23) * 0.5);
    *(_DWORD *)(a1 + 4) = 2;
    if (v21)
      goto LABEL_10;
    goto LABEL_39;
  }
}

unsigned __int16 *sub_18F201BDC(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = result[1];
  v3 = *((unsigned int *)result + 1);
  v4 = *result;
  if (v4 + v2 >= v3)
    v5 = *((unsigned int *)result + 1);
  else
    v5 = 0;
  *(_DWORD *)&result[2 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3)
      LOWORD(v3) = 0;
    *result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

uint64_t sub_18F201C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 16))(a3, *(_QWORD *)(a1 + 24));
}

void sub_18F201C3C(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;

  v4 = (float)(unint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)(a1 + 744)) / 1000000.0;
  if (*(_DWORD *)a1)
  {
    v5 = *(float *)(a1 + 776);
    v6 = 1.0;
    if (v5 != 0.0)
      v6 = 1.0 - expf((float)-*(float *)(a1 + 28) / v5);
    *(float *)(a1 + 40) = v6;
    *(_DWORD *)(a1 + 36) = 3;
LABEL_9:
    v9 = *(float *)a2;
    *(_DWORD *)(a1 + 36) = 4;
    v10 = *(float *)(a1 + 44) - (float)(v6 * (float)(*(float *)(a1 + 44) - v9));
    goto LABEL_10;
  }
  v7 = *(float *)(a1 + 8);
  v8 = *(float *)(a1 + 776);
  if (v7 > -1.0)
  {
    v6 = 1.0;
    if (v8 != 0.0)
      v6 = 1.0 - expf((float)-v4 / v8);
    *(float *)(a1 + 40) = v6;
    *(float *)(a1 + 44) = v7;
    *(_DWORD *)(a1 + 36) = 3;
    *(_DWORD *)a1 = 1;
    goto LABEL_9;
  }
  v12 = 1.0;
  if (v8 != 0.0)
    v12 = 1.0 - expf((float)-*(float *)(a1 + 28) / v8);
  *(_DWORD *)(a1 + 36) = 0;
  *(float *)(a1 + 40) = v12;
  *(_DWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)a1 = 1;
  v13 = *(float *)a2;
  *(_DWORD *)(a1 + 36) = 1;
  v4 = 0.0;
  v10 = v13 + 0.0;
LABEL_10:
  *(float *)(a1 + 44) = v10;
  if (v4 > *(float *)(a1 + 24))
  {
    *(_DWORD *)a1 = 2;
    v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(a1 + 784);
    *(float *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 12) = -1082130432;
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 8);
  }
}

void sub_18F201DB0()
{
  JUMPOUT(0x194001048);
}

void sub_18F201DB8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18F26F8D4(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_18F2B5CA8(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_18F2B5DBC((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_18F26F8D4((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_18F26F8D4((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_18F2020CC(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18F2B5ED8((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_18F202080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_18F2020CC(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_18F26F8D4(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_18F2021E0(_QWORD *a1, int a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  void (*v26)(void);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _BYTE buf[22];
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v6 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    v7 = *a3;
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v7;
    _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_INFO, "CLDeviceMotion::minimumUpdateIntervalChanged,notification,%{public}d,minimumUpdateInterval,%{public}f", buf, 0x12u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    v29 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v29);
    if (v29 != buf)
      free(v29);
  }
  if (qword_1ECEDEE78 != -1)
    dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
  v8 = off_1ECEDEE70;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_INFO))
  {
    v9 = sub_18F202D88((uint64_t)a1, 0);
    v10 = sub_18F202D88((uint64_t)a1, 9);
    v11 = sub_18F202D88((uint64_t)a1, 1);
    v12 = sub_18F202D88((uint64_t)a1, 10);
    v13 = sub_18F202D88((uint64_t)a1, 2);
    v14 = sub_18F202D88((uint64_t)a1, 3);
    v15 = sub_18F202D88((uint64_t)a1, 4);
    v16 = sub_18F202D88((uint64_t)a1, 5);
    *(_DWORD *)buf = 134350848;
    *(double *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2050;
    *(double *)&buf[14] = v10;
    v32 = 2050;
    v33 = v11;
    v34 = 2050;
    v35 = v12;
    v36 = 2050;
    v37 = v13;
    v38 = 2050;
    v39 = v14;
    v40 = 2050;
    v41 = v15;
    v42 = 2050;
    v43 = v16;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_INFO, "minimumUpdateInterval GyroOnly:%{public}f, 3AxisDynamicGyro:%{public}f, 6Axis:%{public}f, 6AxisThrottledGyro:%{public}f, 9Axis:%{public}f, 9AxisWithNorthReference:%{public}f, 9AxisWithTrueNorthReference:%{public}f, BuildGYTT:%{public}f", buf, 0x52u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2954EC8);
    sub_18F202D88((uint64_t)a1, 0);
    sub_18F202D88((uint64_t)a1, 9);
    sub_18F202D88((uint64_t)a1, 1);
    sub_18F202D88((uint64_t)a1, 10);
    sub_18F202D88((uint64_t)a1, 2);
    sub_18F202D88((uint64_t)a1, 3);
    sub_18F202D88((uint64_t)a1, 4);
    sub_18F202D88((uint64_t)a1, 5);
    v30 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "CoreLocation: %s\n", v30);
    if (v30 != buf)
      free(v30);
  }
  switch(a2)
  {
    case 0:
      v27 = a1[7];
      if (v27)
      {
        *(_QWORD *)buf = sub_18F202D88((uint64_t)a1, 0);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v27 + 16))(v27, buf);
      }
      v28 = a1[5];
      if (v28)
        goto LABEL_47;
      break;
    case 1:
    case 10:
      if (a1[8])
      {
        v23 = sub_18F202D88((uint64_t)a1, 1);
        v24 = sub_18F202D88((uint64_t)a1, 10);
        if (v23 <= 0.0)
          v25 = 1.79769313e308;
        else
          v25 = v23;
        if (v24 <= 0.0)
          v24 = 1.79769313e308;
        if (v24 >= v25)
          v24 = v25;
        if (v24 == 1.79769313e308)
          v24 = 0.0;
        *(double *)buf = v24;
        v22 = a1[8];
        goto LABEL_39;
      }
      break;
    case 2:
    case 3:
    case 4:
      if (a1[9])
      {
        v17 = sub_18F202D88((uint64_t)a1, 2);
        v18 = sub_18F202D88((uint64_t)a1, 3);
        if (v17 <= 0.0)
          v19 = 1.79769313e308;
        else
          v19 = v17;
        if (v18 <= 0.0)
          v18 = 1.79769313e308;
        if (v18 >= v19)
          v20 = v19;
        else
          v20 = v18;
        v21 = sub_18F202D88((uint64_t)a1, 4);
        if (v21 <= 0.0)
          v21 = 1.79769313e308;
        if (v21 >= v20)
          v21 = v20;
        if (v21 == 1.79769313e308)
          v21 = 0.0;
        *(double *)buf = v21;
        v22 = a1[9];
LABEL_39:
        v26 = *(void (**)(void))(*(_QWORD *)v22 + 16);
        goto LABEL_48;
      }
      break;
    case 5:
      v28 = a1[4];
      if (v28)
        goto LABEL_47;
      break;
    case 9:
      v28 = a1[6];
      if (v28)
      {
LABEL_47:
        v26 = *(void (**)(void))(*(_QWORD *)v28 + 16);
LABEL_48:
        v26();
      }
      break;
    default:
      return;
  }
}

void sub_18F2027F4(uint64_t a1)
{
  double v2;
  double v3;
  unint64_t TimeStamp;
  double v5;
  float v6;
  double v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  _BOOL4 v19;
  NSObject *v20;
  int v21;
  CFAbsoluteTime Current;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  char *v27;
  char *v28;
  double v29;
  uint64_t v30;
  int v31;
  const char *v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  CFAbsoluteTime v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (IOHIDEventGetType() == 31)
  {
    IOHIDEventGetFloatValue();
    v3 = v2;
    TimeStamp = IOHIDEventGetTimeStamp();
    v5 = sub_18F1FD20C(TimeStamp);
    if (sub_18F202D88(a1, 0) != 0.0 || sub_18F202D88(a1, 1) != 0.0)
    {
      v6 = v3;
      v29 = v5;
      v30 = LODWORD(v6);
      v7 = *(double *)(a1 + 56);
      if (v7 == 0.0 || v5 - v7 > *(double *)(a1 + 104))
      {
        v8 = *(_QWORD *)(a1 + 112);
        if (v8)
        {
          v9 = (void *)(*(uint64_t (**)(uint64_t, const __CFString *))(*(_QWORD *)v8 + 24))(v8, CFSTR("AppleVoltageDictionary"));
          v13 = (void *)objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)CFSTR("PRESSURE_TEMP"), v11, v12);
          objc_msgSend_floatValue(v13, v14, v15, v16, v17);
          *(float *)(a1 + 64) = v18 / 100.0;

          v19 = v13 != 0;
        }
        else
        {
          v19 = 0;
        }
        if (qword_1EE16D6C8 != -1)
          dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
        v20 = qword_1EE16D6C0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6C0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v42) = v19;
          _os_log_impl(&dword_18F1DC000, v20, OS_LOG_TYPE_DEBUG, "Pressure Temperature=%d", buf, 8u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6C8 != -1)
            dispatch_once(&qword_1EE16D6C8, &unk_1E2954C48);
          v31 = 67109120;
          LODWORD(v32) = v19;
          v28 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "void CLPressure::onPressureData(const CLMotionTypePressure &, const CLMotionTypeTimestamp &)", "CoreLocation: %s\n", v28);
          if (v28 != (char *)buf)
            free(v28);
        }
        *(double *)(a1 + 56) = v5;
      }
      v21 = *(_DWORD *)(a1 + 64);
      HIDWORD(v30) = v21;
      if (*(_BYTE *)(a1 + 48))
      {
        sub_18F2B6BD0(buf);
        sub_18F2C6934(buf);
        Current = CFAbsoluteTimeGetCurrent();
        v53 |= 1u;
        v51 = Current;
        sub_18F3203CC(v52);
        v23 = v52[1];
        *(_BYTE *)(v23 + 24) |= 1u;
        *(double *)(v23 + 8) = v5;
        v24 = v52[1];
        *(_BYTE *)(v24 + 24) |= 2u;
        *(float *)(v24 + 16) = v6;
        v25 = v52[1];
        *(_BYTE *)(v25 + 24) |= 4u;
        *(_DWORD *)(v25 + 20) = v21;
        sub_18F2B9670((PB::Base *)buf);
      }
      if (sub_18F202D88(a1, 0) != 0.0)
        sub_18F1FD2C8(a1, 0, (uint64_t)&v29, 16);
      if (*(_BYTE *)(a1 + 49))
        *(float *)&v30 = *(float *)&v30
                       + (float)((float)-(float)(*(float *)(a1 + 76)
                                               - (float)(*(float *)(a1 + 72)
                                                       * fminf(*(float *)(a1 + 80), *((float *)&v30 + 1))))
                               / -1000.0);
      if (sub_18F202D88(a1, 1) != 0.0)
        sub_18F1FD2C8(a1, 1, (uint64_t)&v29, 16);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2954928);
      v26 = qword_1EE16D6D0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136316162;
        v42 = "Pressure";
        v43 = 2048;
        v44 = *(float *)&v30;
        v45 = 2048;
        v46 = *((float *)&v30 + 1);
        v47 = 2048;
        v48 = v29;
        v49 = 2048;
        v50 = v6;
        _os_log_impl(&dword_18F1DC000, v26, OS_LOG_TYPE_DEBUG, "Type,%s,pressure,%.6f,temperature,%.3f,timestamp,%f,rawPressure,%.6f", buf, 0x34u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2954928);
        v31 = 136316162;
        v32 = "Pressure";
        v33 = 2048;
        v34 = *(float *)&v30;
        v35 = 2048;
        v36 = *((float *)&v30 + 1);
        v37 = 2048;
        v38 = v29;
        v39 = 2048;
        v40 = v6;
        v27 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "void CLPressure::onPressureData(const CLMotionTypePressure &, const CLMotionTypeTimestamp &)", "CoreLocation: %s\n", v27);
        if (v27 != (char *)buf)
          free(v27);
      }
    }
  }
}

void sub_18F202D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_18F2B9670((PB::Base *)va);
  _Unwind_Resume(a1);
}

double sub_18F202D88(uint64_t a1, int a2)
{
  double v3;
  NSObject *v4;
  char *v6;
  uint8_t buf[4];
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 24) > a2)
    return *(double *)(*(_QWORD *)(a1 + 16) + 80 * a2);
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    v8 = a2;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "Unknown notification %d", buf, 8u);
  }
  v3 = -1.0;
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "CFTimeInterval CLMotionNotifier::minimumUpdateInterval(int)", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return v3;
}

double sub_18F202F60(uint64_t a1, double *a2)
{
  double result;

  result = *a2;
  *(double *)(a1 + 40) = *a2;
  return result;
}

void sub_18F202F6C(uint64_t a1, double *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *(_QWORD *)(a1 + 208);
  if (!v4)
  {
    v5 = *(unsigned __int8 *)(a1 + 200);
    v6 = (_QWORD *)sub_18F1E0F30();
    v7 = operator new(0xC8uLL);
    v7[1] = 0;
    v8 = v7 + 1;
    v7[2] = 0;
    *v7 = &off_1E2952650;
    v9 = sub_18F1EA230((uint64_t)(v7 + 3), 65292, v5, 0, (uint64_t)v6);
    v7[3] = &off_1E2949BA8;
    *((_DWORD *)v7 + 48) = 0;
    *((_BYTE *)v7 + 196) = 0;
    *(_QWORD *)&v19 = v9;
    *((_QWORD *)&v19 + 1) = v7;
    v20 = v9;
    v21 = (std::__shared_weak_count *)v7;
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
    sub_18F1E9C88(v6, &v20);
    v11 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = *(std::__shared_weak_count **)(a1 + 216);
    *(_OWORD *)(a1 + 208) = v19;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v4 = *(_QWORD *)(a1 + 208);
  }
  v17 = rint(*a2 * 1000000.0);
  if (*a2 < 0.0)
    v18 = 0;
  else
    v18 = (uint64_t)v17;
  sub_18F203AF8(v4, v18);
  sub_18F203148(*(_QWORD *)(a1 + 208), (uint64_t)sub_18F1FF640, a1);
}

void sub_18F203118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_18F2A8438((uint64_t)&a11);
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_18F203148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFRunLoopRef Current;
  _BOOL4 v7;
  NSObject *v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v8 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      v10 = *(_DWORD *)(a1 + 16);
      v9 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v9;
      v23 = 1026;
      v24 = v10;
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v11 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      v13 = *(_DWORD *)(a1 + 16);
      v12 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v12;
      v23 = 1026;
      v24 = v13;
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setCallback should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v14 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      v16 = *(_DWORD *)(a1 + 16);
      v15 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 1026;
      v22 = v15;
      v23 = 1026;
      v24 = v16;
      v25 = 2082;
      v26 = "assert";
      v27 = 2081;
      v28 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setCallback should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  sub_18F2044F4(*(_QWORD *)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 48) != 0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = a3;
  if ((((a2 == 0) ^ v7) & 1) == 0)
    sub_18F1F26A8(*(NSObject **)(a1 + 32));
}

BOOL sub_18F203474(uint64_t a1, int a2)
{
  _BOOL8 v4;
  double v5;
  double v6;
  BOOL v7;
  void *v8;
  double v9;
  double v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v20;
  uint8_t buf[4];
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = sub_18F203718(a1);
  if (v4)
  {
    v6 = *(double *)(a1 + 64);
    v5 = *(double *)(a1 + 72);
    if (v6 == 0.0 || (v5 != 0.0 ? (v7 = v5 < v6) : (v7 = 0), v7))
      v6 = *(double *)(a1 + 72);
    v8 = (void *)MEMORY[0x194001B4C]();
    (*(void (**)(_QWORD, const __CFString *, void *))(**(_QWORD **)(a1 + 80) + 16))(*(_QWORD *)(a1 + 80), CFSTR("GyroProperties"), &unk_1E298C118);
    v9 = 0.0;
    if (v6 != 1.79769313e308)
      v9 = v6;
    v10 = rint(v9 * 1000000.0);
    if (v9 < 0.0)
      v11 = 0;
    else
      v11 = (uint64_t)v10;
    sub_18F203AF8(*(_QWORD *)(a1 + 80), v11);
    if ((a2 & 0x80000000) == 0)
    {
      v15 = *(_QWORD *)(a1 + 80);
      v16 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v12, a2 != 0, v13, v14);
      (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(_QWORD *)v15 + 16))(v15, CFSTR("GyroExtLevelTriggerSync"), v16);
      *(_DWORD *)(a1 + 32) = a2;
    }
    objc_autoreleasePoolPop(v8);
    if (sub_18F203718(a1))
    {
      v17 = sub_18F203A68(*(_QWORD *)(a1 + 80), 0.015);
      if (qword_1ECEDEE68 != -1)
        dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
      v18 = qword_1ECEDEE60;
      if (os_log_type_enabled((os_log_t)qword_1ECEDEE60, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349056;
        v22 = v17;
        _os_log_impl(&dword_18F1DC000, v18, OS_LOG_TYPE_INFO, "Setting gyro batch interval to: %{public}ld us", buf, 0xCu);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE68 != -1)
          dispatch_once(&qword_1ECEDEE68, &unk_1E2945000);
        v20 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "BOOL CLGyro::setGyroBatchInterval(const CFTimeInterval &)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
    }
  }
  return v4;
}

BOOL sub_18F203718(uint64_t a1)
{
  void **v1;
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  int v34;
  unsigned int v35;
  uint8_t buf[1640];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v1 = (void **)(a1 + 80);
  if (!*(_QWORD *)(a1 + 80) && (sub_18F1F781C() & 2) != 0)
  {
    v3 = (_QWORD *)sub_18F1E0F30();
    v32 = 0x90000FF00;
    v33 = 0;
    sub_18F1E9BC8(v3, (uint64_t)&v32, (uint64_t *)buf);
    sub_18F346DC8((uint64_t)v1, (__int128 *)buf);
    v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v11 = (void *)objc_msgSend_mutableCopy(&unk_1E298C0F0, v4, v5, v6, v7);
    v31 = 0;
    v12 = sub_18F204AE4();
    v13 = *(_QWORD *)(v12 + 24);
    v14 = *(std::__shared_weak_count **)(v12 + 32);
    *(_QWORD *)buf = v13;
    *(_QWORD *)&buf[8] = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v17 = sub_18F1E312C(v13, "IMULocationID", &v31);
    if (v31)
      v21 = 1;
    else
      v21 = v17;
    if (!v14)
      goto LABEL_18;
    v22 = (unint64_t *)&v14->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v21)
        goto LABEL_19;
    }
    else
    {
LABEL_18:
      if (v21)
      {
LABEL_19:
        v24 = v31;
        v25 = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v18, v31, v19, v20);
        objc_msgSend_setObject_forKey_(v11, v26, v25, (uint64_t)CFSTR("LocationID"), v27);
        if (qword_1ECEDEE48 != -1)
          dispatch_once(&qword_1ECEDEE48, &unk_1E2956E08);
        v28 = qword_1ECEDEE40;
        if (os_log_type_enabled((os_log_t)qword_1ECEDEE40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v24;
          _os_log_impl(&dword_18F1DC000, v28, OS_LOG_TYPE_DEFAULT, "Setting Gyro matching properties with IMULocationID %d", buf, 8u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE48 != -1)
            dispatch_once(&qword_1ECEDEE48, &unk_1E2956E08);
          v34 = 67109120;
          v35 = v24;
          v30 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "BOOL CLGyro::openHidDevice()", "CoreLocation: %s\n", v30);
          if (v30 != (char *)buf)
            free(v30);
        }
      }
    }
    sub_18F1E4538(*v1, v11);
    sub_18F203148(*(_QWORD *)(a1 + 80), (uint64_t)sub_18F1FEA48, a1);

  }
  return *v1 != 0;
}

void sub_18F203A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F203A68(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = (uint64_t)rint(a2 * 1000000.0);
  if (v3 >= 1000000)
    v3 = 1000000;
  if (v3 <= 10000)
    v4 = 10000;
  else
    v4 = v3;
  v5 = objc_alloc(MEMORY[0x1E0CB37E8]);
  v9 = (void *)objc_msgSend_initWithLong_(v5, v6, v4, v7, v8);
  (*(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)a1 + 16))(a1, CFSTR("BatchInterval"), v9);

  return v4;
}

uint64_t sub_18F203AF8(uint64_t a1, uint64_t a2)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = objc_alloc(MEMORY[0x1E0CB37E8]);
  v8 = (void *)objc_msgSend_initWithLong_(v4, v5, a2, v6, v7);
  (*(void (**)(uint64_t, const __CFString *, void *))(*(_QWORD *)a1 + 16))(a1, CFSTR("ReportInterval"), v8);

  return a2;
}

void sub_18F203B5C(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 40) = *a2;
  sub_18F202F6C(a1, (double *)(a1 + 40));
}

void sub_18F204040(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_18F20406C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  CFRunLoopRef Current;
  CLPropertyValue *v7;
  const char *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  uint8_t buf[4];
  _BYTE v24[14];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v14 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      v16 = *(_DWORD *)(a1 + 16);
      v15 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)v24 = 0;
      *(_WORD *)&v24[4] = 2082;
      *(_QWORD *)&v24[6] = "";
      v25 = 1026;
      v26 = v15;
      v27 = 1026;
      v28 = v16;
      v29 = 2082;
      v30 = "assert";
      v31 = 2081;
      v32 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v17 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      v19 = *(_DWORD *)(a1 + 16);
      v18 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)v24 = 0;
      *(_WORD *)&v24[4] = 2082;
      *(_QWORD *)&v24[6] = "";
      v25 = 1026;
      v26 = v18;
      v27 = 1026;
      v28 = v19;
      v29 = 2082;
      v30 = "assert";
      v31 = 2081;
      v32 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setProperty should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    a2 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      v21 = *(_DWORD *)(a1 + 16);
      v20 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      *(_DWORD *)v24 = 0;
      *(_WORD *)&v24[4] = 2082;
      *(_QWORD *)&v24[6] = "";
      v25 = 1026;
      v26 = v20;
      v27 = 1026;
      v28 = v21;
      v29 = 2082;
      v30 = "assert";
      v31 = 2081;
      v32 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, a2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
LABEL_20:
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    goto LABEL_5;
  }
  sub_18F2044F4(*(_QWORD *)(a1 + 32));
  if (a3)
  {
    v7 = [CLPropertyValue alloc];
    v10 = (id)objc_msgSend_initWithValue_dirty_(v7, v8, a3, 1, v9);
    objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 160), v11, (uint64_t)v10, (uint64_t)a2, v12);
    goto LABEL_8;
  }
  if (qword_1ECEDEE98 != -1)
    goto LABEL_20;
LABEL_5:
  v13 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v24 = a2;
    _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set property value for %{public}@", buf, 0xCu);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v22 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "virtual void CLIoHidInterface::Device::setProperty(NSString *, id)", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf)
      free(v22);
  }
LABEL_8:
  sub_18F204B88(*(const char **)(a1 + 32));
}

void sub_18F2044F4(uint64_t a1)
{
  CFRunLoopRef Current;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint8_t *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  const __CFString *v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v9 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "assert";
      v18 = 2081;
      v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v10 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "assert";
      v18 = 2081;
      v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v11 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "assert";
      v18 = 2081;
      v19 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] initializeHidIfNecessary should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_30:
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
LABEL_7:
    v6 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Event system client initialized successfully", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v7 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::initializeHidIfNecessary()", "CoreLocation: %s\n");
LABEL_34:
      if (v7 != buf)
        free(v7);
      return;
    }
    return;
  }
  if (*(_QWORD *)(a1 + 40))
    return;
  v20 = CFSTR("HighFrequency");
  v4 = MEMORY[0x1E0C9AAB0];
  if (!*(_BYTE *)(a1 + 48))
    v4 = MEMORY[0x1E0C9AAA0];
  v21[0] = v4;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v3, (uint64_t)v21, (uint64_t)&v20, 1);
  v5 = IOHIDEventSystemClientCreateWithType();
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    sub_18F204AE4();
    IOHIDEventSystemClientScheduleWithRunLoop();
    IOHIDEventSystemClientRegisterEventCallback();
    IOHIDEventSystemClientRegisterResetCallback();
    IOHIDEventSystemClientRegisterDeviceMatchingCallback();
    sub_18F1F26A8(a1);
    IOHIDEventSystemClientSetProperty(*(IOHIDEventSystemClientRef *)(a1 + 40), CFSTR("PreserveTimestamp"), (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    if (qword_1ECEDEE98 == -1)
      goto LABEL_7;
    goto LABEL_30;
  }
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
  v8 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v8, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not create event system client. All bets are off", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v7 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CLIoHidInterface::initializeHidIfNecessary()", "CoreLocation: %s\n");
    goto LABEL_34;
  }
}

uint64_t sub_18F204AE4()
{
  if (qword_1ECEDEF30 != -1)
    dispatch_once(&qword_1ECEDEF30, &unk_1E29534C8);
  return qword_1ECEDFE08;
}

void sub_18F204B88(const char *a1)
{
  CFRunLoopRef Current;
  __objc2_class *v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __IOHIDServiceClient *v26;
  const void *v27;
  int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  int v38;
  int v39;
  NSObject *superclass;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  const char *v66;
  char *v67;
  int v68;
  int v69;
  char *v70;
  uint64_t v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  double v74;
  int v75;
  double v76;
  NSObject *v77;
  int v78;
  double v79;
  char *v80;
  double v81;
  NSObject *v82;
  int v83;
  double v84;
  char *v85;
  NSObject *v86;
  char *v87;
  NSObject *v88;
  NSObject *v89;
  NSObject *v90;
  char *v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  const char *v99;
  id obj;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  int v108;
  _BYTE v109[10];
  __int16 v110;
  const __CFString *v111;
  __int16 v112;
  uint64_t v113;
  __int16 v114;
  const char *v115;
  uint8_t v116[128];
  uint8_t buf[4];
  _BYTE v118[40];
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  v3 = CMVO2MaxRetrocomputeState;
  if (Current == *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 == -1)
      goto LABEL_3;
  }
  else
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v88 = off_1ECEDEE90;
    a1 = "";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v118 = 0;
      *(_WORD *)&v118[4] = 2082;
      *(_QWORD *)&v118[6] = "";
      *(_WORD *)&v118[14] = 2082;
      *(_QWORD *)&v118[16] = "assert";
      *(_WORD *)&v118[24] = 2081;
      *(_QWORD *)&v118[26] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v88, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v89 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v118 = 0;
      *(_WORD *)&v118[4] = 2082;
      *(_QWORD *)&v118[6] = "";
      *(_WORD *)&v118[14] = 2082;
      *(_QWORD *)&v118[16] = "assert";
      *(_WORD *)&v118[24] = 2081;
      *(_QWORD *)&v118[26] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v89, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v90 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)v118 = 0;
      *(_WORD *)&v118[4] = 2082;
      *(_QWORD *)&v118[6] = "";
      *(_WORD *)&v118[14] = 2082;
      *(_QWORD *)&v118[16] = "assert";
      *(_WORD *)&v118[24] = 2081;
      *(_QWORD *)&v118[26] = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v90, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] applyAllDirtyDeviceProperties should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    v93 = 219;
    v94 = "applyAllDirtyDeviceProperties";
    v92 = "/Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Shared/Motion/IO/CLIoHidInterface.mm";
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
LABEL_3:
  v4 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Apply all dirty device properties", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    LOWORD(v108) = 0;
    LODWORD(v93) = 2;
    v91 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v91);
    if (v91 != (char *)buf)
      free(v91);
  }
  v5 = (_QWORD *)*((_QWORD *)a1 + 1);
  v6 = (_QWORD *)*((_QWORD *)a1 + 2);
  if (v5 == v6)
    goto LABEL_61;
  v7 = 1;
  v99 = a1;
  v95 = (_QWORD *)*((_QWORD *)a1 + 2);
  do
  {
    v8 = v5[1];
    if (v8)
    {
      v9 = *v5;
      v98 = (std::__shared_weak_count *)v5[1];
      v10 = (unint64_t *)(v8 + 16);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v12 = std::__shared_weak_count::lock(v98);
      v107 = v12;
      if (v12)
      {
        v106 = v9;
        v96 = v12;
        v97 = v5;
        if (v9)
        {
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          obj = *(id *)(v9 + 160);
          v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v13, (uint64_t)&v102, (uint64_t)v116, 16);
          if (v17)
          {
            v101 = *(_QWORD *)v103;
            do
            {
              v18 = 0;
              do
              {
                if (*(_QWORD *)v103 != v101)
                  objc_enumerationMutation(obj);
                v19 = *(const __CFString **)(*((_QWORD *)&v102 + 1) + 8 * v18);
                v20 = (void *)objc_msgSend_objectForKeyedSubscript_(*(void **)(v9 + 160), v14, (uint64_t)v19, v15, v16, v92, v93, v94);
                if (objc_msgSend_dirty(v20, v21, v22, v23, v24))
                {
                  if (!*(_QWORD *)(v9 + 24))
                    sub_18F1F393C(a1, 0);
                  if (*((int *)a1 + 13) >= 10 && *(_BYTE *)(v9 + 40))
                  {
                    v7 = 1;
                  }
                  else
                  {
                    v26 = *(__IOHIDServiceClient **)(v9 + 24);
                    if (v26)
                    {
                      v27 = (const void *)objc_msgSend_value(v20, v14, v25, v15, v16);
                      v28 = sub_18F205968(v26, v19, v27);
                      objc_msgSend_setDirty_(v20, v29, v28 ^ 1u, v30, v31);
                      if ((v7 & 1) != 0)
                        v36 = objc_msgSend_dirty(v20, v32, v33, v34, v35) ^ 1;
                      else
                        LOBYTE(v36) = 0;
                      if (qword_1ECEDEE98 != -1)
                        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                      superclass = v3[93].superclass;
                      if (os_log_type_enabled(superclass, OS_LOG_TYPE_DEFAULT))
                      {
                        v46 = *(_DWORD *)(v9 + 16);
                        v45 = *(_DWORD *)(v9 + 20);
                        v47 = objc_msgSend_value(v20, v41, v42, v43, v44);
                        v52 = objc_msgSend_dirty(v20, v48, v49, v50, v51);
                        *(_DWORD *)buf = 67241218;
                        v53 = "successfully";
                        if (v52)
                          v53 = "unsuccessfully";
                        *(_DWORD *)v118 = v45;
                        *(_WORD *)&v118[4] = 1026;
                        *(_DWORD *)&v118[6] = v46;
                        *(_WORD *)&v118[10] = 2114;
                        *(_QWORD *)&v118[12] = v19;
                        *(_WORD *)&v118[20] = 2114;
                        *(_QWORD *)&v118[22] = v47;
                        *(_WORD *)&v118[30] = 2082;
                        *(_QWORD *)&v118[32] = v53;
                        _os_log_impl(&dword_18F1DC000, superclass, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Property for usage pair {%{public}d, %{public}d}: {%{public}@ = %{public}@} was set %{public}s", buf, 0x2Cu);
                        a1 = v99;
                        v3 = CMVO2MaxRetrocomputeState;
                      }
                      v7 = v36;
                      if (sub_18F1FCA08(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1ECEDEE98 != -1)
                          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                        v59 = *(_DWORD *)(v9 + 16);
                        v58 = *(_DWORD *)(v9 + 20);
                        v60 = objc_msgSend_value(v20, v54, v55, v56, v57);
                        v65 = objc_msgSend_dirty(v20, v61, v62, v63, v64);
                        v108 = 67241218;
                        v66 = "successfully";
                        if (v65)
                          v66 = "unsuccessfully";
                        *(_DWORD *)v109 = v58;
                        *(_WORD *)&v109[4] = 1026;
                        *(_DWORD *)&v109[6] = v59;
                        v110 = 2114;
                        v111 = v19;
                        v112 = 2114;
                        v113 = v60;
                        v114 = 2082;
                        v115 = v66;
                        LODWORD(v93) = 44;
                        v67 = (char *)_os_log_send_and_compose_impl();
                        sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v67);
                        a1 = v99;
                        v3 = CMVO2MaxRetrocomputeState;
                        v7 = v36;
                        if (v67 != (char *)buf)
                          free(v67);
                      }
                    }
                    else
                    {
                      if (qword_1ECEDEE98 != -1)
                        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                      v37 = v3[93].superclass;
                      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                      {
                        v39 = *(_DWORD *)(v9 + 16);
                        v38 = *(_DWORD *)(v9 + 20);
                        *(_DWORD *)buf = 67240448;
                        *(_DWORD *)v118 = v38;
                        *(_WORD *)&v118[4] = 1026;
                        *(_DWORD *)&v118[6] = v39;
                        _os_log_impl(&dword_18F1DC000, v37, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service for device with usage pair {%{public}d, %{public}d} is not ready", buf, 0xEu);
                      }
                      if (sub_18F1FCA08(115, 2))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1ECEDEE98 != -1)
                          dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
                        v69 = *(_DWORD *)(v9 + 16);
                        v68 = *(_DWORD *)(v9 + 20);
                        v108 = 67240448;
                        *(_DWORD *)v109 = v68;
                        *(_WORD *)&v109[4] = 1026;
                        *(_DWORD *)&v109[6] = v69;
                        LODWORD(v93) = 14;
                        v70 = (char *)_os_log_send_and_compose_impl();
                        sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v70);
                        if (v70 != (char *)buf)
                          free(v70);
                      }
                      v7 = 0;
                    }
                  }
                }
                ++v18;
              }
              while (v17 != v18);
              v71 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v14, (uint64_t)&v102, (uint64_t)v116, 16);
              v17 = v71;
            }
            while (v71);
          }
        }
        p_shared_owners = (unint64_t *)&v96->__shared_owners_;
        do
          v73 = __ldaxr(p_shared_owners);
        while (__stlxr(v73 - 1, p_shared_owners));
        v5 = v97;
        v6 = v95;
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      std::__shared_weak_count::__release_weak(v98);
    }
    v5 += 2;
  }
  while (v5 != v6);
  if ((v7 & 1) != 0)
  {
LABEL_61:
    *((_DWORD *)a1 + 13) = 0;
LABEL_62:
    v74 = 1.79769313e308;
    goto LABEL_63;
  }
  v75 = *((_DWORD *)a1 + 13);
  *((_DWORD *)a1 + 13) = v75 + 1;
  if (v75 <= 4)
  {
    v76 = CFAbsoluteTimeGetCurrent();
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v77 = v3[93].superclass;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v118 = 0x3FD0000000000000;
      _os_log_impl(&dword_18F1DC000, v77, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
    }
    v78 = sub_18F1FCA08(115, 2);
    v74 = v76 + 0.25;
    if (v78)
    {
      v79 = v76 + 0.25;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v108 = 134349056;
      *(_QWORD *)v109 = 0x3FD0000000000000;
      v80 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v80);
      a1 = v99;
      if (v80 != (char *)buf)
        free(v80);
      v74 = v79;
    }
    goto LABEL_63;
  }
  if (v75 > 9)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v86 = v3[93].superclass;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v86, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Could not set all properties after too many retries. Giving up.", buf, 2u);
    }
    if (!sub_18F1FCA08(115, 0))
      goto LABEL_62;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    LOWORD(v108) = 0;
    v87 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v87);
    if (v87 != (char *)buf)
      free(v87);
    v74 = 1.79769313e308;
LABEL_96:
    a1 = v99;
    goto LABEL_63;
  }
  v81 = CFAbsoluteTimeGetCurrent();
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
  v82 = v3[93].superclass;
  if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v118 = 0x4004000000000000;
    _os_log_impl(&dword_18F1DC000, v82, OS_LOG_TYPE_INFO, "[CLIoHidInterface] Could not set all properties. Setting timer to fire %{public}f seconds from now", buf, 0xCu);
  }
  v83 = sub_18F1FCA08(115, 2);
  v74 = v81 + 2.5;
  if (v83)
  {
    v84 = v81 + 2.5;
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v108 = 134349056;
    *(_QWORD *)v109 = 0x4004000000000000;
    v85 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLIoHidInterface::applyAllDirtyDeviceProperties()", "CoreLocation: %s\n", v85);
    if (v85 != (char *)buf)
      free(v85);
    v74 = v84;
    goto LABEL_96;
  }
LABEL_63:
  CFRunLoopTimerSetNextFireDate(*((CFRunLoopTimerRef *)a1 + 7), v74);
}

void sub_18F205910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_18F2A8438((uint64_t)&a33);
  std::__shared_weak_count::__release_weak(a16);
  _Unwind_Resume(a1);
}

uint64_t sub_18F205968(__IOHIDServiceClient *a1, const __CFString *a2, const void *a3)
{
  CFRunLoopRef Current;
  uint64_t result;
  const char *v8;
  NSObject *v9;
  int v10;
  uint8_t *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v13 = off_1ECEDEE90;
    v8 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setPropertyIoHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v14 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] setPropertyIoHid should be running on motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] setPropertyIoHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v15 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "assert";
      v22 = 2081;
      v23 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] setPropertyIoHid should be running on motion thread\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    goto LABEL_29;
  }
  if (!a1)
  {
    v8 = (const char *)CMVO2MaxRetrocomputeState;
    if (qword_1ECEDEE98 == -1)
    {
LABEL_6:
      v9 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v9, OS_LOG_TYPE_FAULT, "[CLIoHidInterface] Property can not be set for null hidServiceRef", buf, 2u);
      }
      v10 = sub_18F1FCA08(115, 0);
      result = 0;
      if (!v10)
        return result;
      bzero(buf, 0x65CuLL);
      if (*((_QWORD *)v8 + 467) != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
      v11 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "CoreLocation: %s\n");
LABEL_33:
      if (v11 != buf)
        free(v11);
      return 0;
    }
LABEL_29:
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    goto LABEL_6;
  }
  if (IOHIDServiceClientSetProperty(a1, a2, a3))
    return 1;
  if (qword_1ECEDEE98 != -1)
    dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
  v12 = off_1ECEDEE90;
  if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_DEBUG, "[CLIoHidInterface] IOHIDServiceClientSetProperty() returned false", buf, 2u);
  }
  result = sub_18F1FCA08(115, 2);
  if ((_DWORD)result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v11 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "BOOL CLIoHidInterface::setPropertyIoHid(IOHIDServiceClientRef, CFStringRef, CFTypeRef)", "CoreLocation: %s\n");
    goto LABEL_33;
  }
  return result;
}

void sub_18F205EAC()
{
  NSObject *v0;
  char *v1;
  uint8_t buf[1640];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  IOHIDEventGetVendorDefinedData();
  if (qword_1EE16D430 != -1)
    dispatch_once(&qword_1EE16D430, &unk_1E2956B30);
  v0 = qword_1EE16D420;
  if (os_log_type_enabled((os_log_t)qword_1EE16D420, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v0, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
  }
  if (sub_18F1FCA08(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D430 != -1)
      dispatch_once(&qword_1EE16D430, &unk_1E2956B30);
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 0, "static void CLIspDataVisitor::onCMAData(void *, void *, void *, IOHIDEventRef)", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_18F206060(uint64_t a1, _BYTE *a2, int a3)
{
  uint64_t v3;
  void (*v4)(void);

  v3 = 0;
  switch(*a2)
  {
    case 1:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 16);
      goto LABEL_162;
    case 2:
      if (a3 != 72)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 24);
      goto LABEL_162;
    case 3:
      if (a3 != 105)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 32);
      goto LABEL_162;
    case 4:
      if (a3 != 64)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 40);
      goto LABEL_162;
    case 5:
      if (a3 != 16)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 56);
      goto LABEL_162;
    case 6:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 64);
      goto LABEL_162;
    case 7:
      if (a3 != 212)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 72);
      goto LABEL_162;
    case 8:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 80);
      goto LABEL_162;
    case 9:
      if (a3 != 212)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 88);
      goto LABEL_162;
    case 0xA:
      if (a3 != 193)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 272);
      goto LABEL_162;
    case 0xC:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 96);
      goto LABEL_162;
    case 0xD:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 104);
      goto LABEL_162;
    case 0xE:
      if (a3 != 55)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 112);
      goto LABEL_162;
    case 0xF:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 120);
      goto LABEL_162;
    case 0x11:
      if (a3 != 36)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 128);
      goto LABEL_162;
    case 0x14:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 152);
      goto LABEL_162;
    case 0x15:
      if (a3 != 48)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 160);
      goto LABEL_162;
    case 0x17:
      if (a3 != 21)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 168);
      goto LABEL_162;
    case 0x18:
      if (a3 != 89)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 176);
      goto LABEL_162;
    case 0x19:
      if (a3 != 218)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 192);
      goto LABEL_162;
    case 0x1B:
      if (a3 != 132)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 200);
      goto LABEL_162;
    case 0x1C:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 48);
      goto LABEL_162;
    case 0x1D:
      if (a3 != 32)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 136);
      goto LABEL_162;
    case 0x1F:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 184);
      goto LABEL_162;
    case 0x20:
      if (a3 != 157)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 208);
      goto LABEL_162;
    case 0x21:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 216);
      goto LABEL_162;
    case 0x22:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 224);
      goto LABEL_162;
    case 0x23:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 232);
      goto LABEL_162;
    case 0x24:
      if (a3 != 28)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 248);
      goto LABEL_162;
    case 0x25:
      if (a3 != 21)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 256);
      goto LABEL_162;
    case 0x26:
      if (a3 != 16)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 264);
      goto LABEL_162;
    case 0x27:
      if (a3 != 205)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 280);
      goto LABEL_162;
    case 0x28:
      if (a3 != 25)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 288);
      goto LABEL_162;
    case 0x29:
      if (a3 != 69)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 296);
      goto LABEL_162;
    case 0x2B:
      if (a3 != 28)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 240);
      goto LABEL_162;
    case 0x2C:
      if (a3 != 29)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 312);
      goto LABEL_162;
    case 0x2D:
      if (a3 != 37)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 320);
      goto LABEL_162;
    case 0x2E:
      if (a3 != 45)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 328);
      goto LABEL_162;
    case 0x2F:
      if (a3 != 113)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 336);
      goto LABEL_162;
    case 0x30:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 304);
      goto LABEL_162;
    case 0x31:
      if (a3 != 68)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 352);
      goto LABEL_162;
    case 0x32:
      if (a3 != 43)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 360);
      goto LABEL_162;
    case 0x33:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 368);
      goto LABEL_162;
    case 0x34:
      if (a3 != 49)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 384);
      goto LABEL_162;
    case 0x35:
      if (a3 != 20)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 392);
      goto LABEL_162;
    case 0x36:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 400);
      goto LABEL_162;
    case 0x37:
      if (a3 != 30)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 408);
      goto LABEL_162;
    case 0x38:
      if (a3 != 28)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 416);
      goto LABEL_162;
    case 0x39:
      if (a3 != 57)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 344);
      goto LABEL_162;
    case 0x3A:
      if (a3 != 232)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 376);
      goto LABEL_162;
    case 0x3B:
      if (a3 != 44)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 472);
      goto LABEL_162;
    case 0x3C:
      if (a3 != 10)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 488);
      goto LABEL_162;
    case 0x40:
      if (a3 != 29)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 424);
      goto LABEL_162;
    case 0x41:
      if (a3 != 9)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 440);
      goto LABEL_162;
    case 0x42:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 448);
      goto LABEL_162;
    case 0x43:
      if (a3 != 12)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 496);
      goto LABEL_162;
    case 0x44:
      if (a3 != 76)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 456);
      goto LABEL_162;
    case 0x45:
      if (a3 != 39)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 504);
      goto LABEL_162;
    case 0x47:
      if (a3 != 45)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 512);
      goto LABEL_162;
    case 0x48:
      if (a3 != 16)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 528);
      goto LABEL_162;
    case 0x49:
      if (a3 != 83)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 520);
      goto LABEL_162;
    case 0x4A:
      if (a3 != 51)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 544);
      goto LABEL_162;
    case 0x4B:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 552);
      goto LABEL_162;
    case 0x4C:
      if (a3 != 10)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 536);
      goto LABEL_162;
    case 0x4D:
      if (a3 != 13)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 480);
      goto LABEL_162;
    case 0x4E:
      if (a3 != 58)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 464);
      goto LABEL_162;
    case 0x4F:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 560);
      goto LABEL_162;
    case 0x50:
      if (a3 != 18)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 568);
      goto LABEL_162;
    case 0x52:
      if (a3 != 26)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 576);
      goto LABEL_162;
    case 0x53:
      if (a3 != 22)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 584);
      goto LABEL_162;
    case 0x54:
      if (a3 != 17)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 592);
      goto LABEL_162;
    case 0x55:
      if (a3 != 20)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 600);
      goto LABEL_162;
    case 0x56:
      if (a3 != 113)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 608);
      goto LABEL_162;
    case 0x57:
      if (a3 != 8)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 616);
      goto LABEL_162;
    case 0x58:
      if (a3 != 61)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 624);
      goto LABEL_162;
    case 0x59:
      if (a3 != 47)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 432);
      goto LABEL_162;
    case 0x5A:
      if (a3 != 210)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 632);
      goto LABEL_162;
    case 0x5B:
      if (a3 != 80)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 640);
      goto LABEL_162;
    case 0x5C:
      if (a3 != 17)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 648);
      goto LABEL_162;
    case 0xB0:
      if (a3 != 17)
        return 0;
      v4 = *(void (**)(void))(*(_QWORD *)a1 + 144);
LABEL_162:
      v4();
      return 1;
    default:
      return v3;
  }
}

float sub_18F20677C(uint64_t a1, double *a2)
{
  double v2;
  double v3;
  float v4;
  double v5;
  double v6;
  float v7;
  float v8;
  double v9;
  float v10;
  double v11;
  float v12;
  double v13;
  double v14;
  double v15;
  double v16;
  float v17;
  float result;

  v3 = *a2;
  v2 = a2[1];
  v4 = v2 + v2;
  v5 = a2[2];
  v6 = a2[3];
  v7 = v5 + v5;
  v8 = v6 + v6;
  v9 = v4;
  v10 = v2 * v9;
  v11 = v7;
  v12 = v5 * v11;
  v13 = v8;
  *(float *)&v6 = v6 * v13;
  v14 = v12;
  v15 = 1.0 - v10;
  v16 = *(float *)&v6;
  v17 = 1.0 - v14 - v16;
  *(float *)&v16 = v15 - v16;
  *(float *)&v15 = v15 - v14;
  *(_DWORD *)(a1 + 32) = LODWORD(v15);
  *(float *)&v5 = v5 * v13;
  *(float *)&v9 = v3 * v9;
  *(float *)&v15 = *(float *)&v5 - *(float *)&v9;
  *(_DWORD *)(a1 + 16) = LODWORD(v16);
  *(float *)(a1 + 20) = *(float *)&v5 + *(float *)&v9;
  *(float *)&v9 = v2 * v11;
  *(float *)&v5 = v3 * v13;
  *(float *)a1 = v17;
  *(float *)(a1 + 4) = *(float *)&v9 + *(float *)&v5;
  *(float *)&v2 = v2 * v13;
  *(float *)&v3 = v3 * v11;
  *(float *)(a1 + 8) = *(float *)&v2 - *(float *)&v3;
  *(float *)(a1 + 12) = *(float *)&v9 - *(float *)&v5;
  result = *(float *)&v2 + *(float *)&v3;
  *(float *)(a1 + 24) = result;
  *(_DWORD *)(a1 + 28) = LODWORD(v15);
  return result;
}

uint64_t sub_18F2068C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_18F206938()
{
  dispatch_async(MEMORY[0x1E0C80D38], &unk_1E2954BA8);
}

uint64_t CLMotionActivity::isTypePedestrian(unsigned int a1)
{
  return (a1 < 0x2A) & (0x20000000110uLL >> a1);
}

BOOL CLMotionActivity::isTypeIndoorPedestrian(int a1)
{
  return a1 == 12150 || a1 == 17150;
}

uint64_t CLMotionActivity::isTypeInVehicle(uint64_t result)
{
  unsigned int v1;

  v1 = 1;
  if ((int)result > 51)
  {
    if ((_DWORD)result == 52 || (_DWORD)result == 56)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (!(_DWORD)result)
    return result;
  if ((_DWORD)result != 5)
LABEL_7:
    v1 = 0;
LABEL_8:
  if ((result & 0xFFFFFFFE) == 0xA)
    return 1;
  else
    return v1;
}

uint64_t CLMotionActivity::isTypeStatic(unsigned int a1)
{
  return (a1 < 0xC) & (0xC06u >> a1);
}

void sub_18F206B78(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206B88(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206B94(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206BA0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void sub_18F206BAC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

void sub_18F206BB8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206BC4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206BD4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206BE0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206BEC(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206BF8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18F206C04(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void *sub_18F206C14(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x140uLL);
}

void sub_18F206C24(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F206C34(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F206C44(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void sub_18F206C54(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void sub_18F206C64(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F206C74(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

uint64_t sub_18F206C84(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = v2;
  return result;
}

void sub_18F206C98(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F206CA8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F206CB8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_18F206CC8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

double CLMotionActivity::init(CLMotionActivity *this)
{
  double result;

  result = 0.0;
  *(_QWORD *)&this->type = 0;
  *(_QWORD *)&this[1].source = 0;
  this->tilt = 0.0;
  *(_QWORD *)&this->conservativeMountedState = 0;
  *(_QWORD *)&this->mountedState = 0;
  HIDWORD(this->conservativeMountedProbability) = 0;
  this->timestamp = -1.0;
  this->exitState = 0;
  this->estExitTime = -1.0;
  *(_QWORD *)&this[1].type = 0xBFF0000000000000;
  this->isStanding = 0;
  this->isVehicleConnected = 0;
  LOBYTE(this[1].mountedConfidence) = 0;
  *(_QWORD *)&this[1].conservativeMountedState = 0;
  this->source = 0;
  this->vehicleType = 0;
  *(_QWORD *)&this[1].isStanding = 0;
  this[1].timestamp = 0.0;
  *(_DWORD *)&this[1].isVehicleConnected = 0;
  return result;
}

void sub_18F206E04(uint64_t a1, const char *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  const __CFString *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = 2139095039;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176) = 0x47EFFFFFE0000000;
  v14 = CFSTR("kCLConnectionMessageSubscribeKey");
  v15[0] = MEMORY[0x1E0C9AAA0];
  v11 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], a2, (uint64_t)v15, (uint64_t)&v14, 1);
  sub_18F39E62C("kCLConnectionMessageFilteredElevationUpdate", &v11, &v12);
  v10 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  CLConnectionClient::sendMessage();
  if (v10)
  {
    v5 = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 184) = 1;
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18F206F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_18F2A8438((uint64_t)va);
  sub_18F2A8438((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F206F94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;

  v7 = objc_msgSend_sharedServiceClient(CLLocationInternalClient_CoreMotion, a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v7, sel_timeSyncMachTimeStamp_oscarTimeStamp_, a1, a2, v8);
}

BOOL CLMotionActivity::isTypeRunning(int a1)
{
  return a1 == 8;
}

BOOL CLMotionActivity::isMounted(CLMotionActivity *this)
{
  return this->mountedState == 1;
}

uint64_t CLMotionActivity::isTypeMoving(unsigned int a1)
{
  return (a1 > 0xB) | (0x3F8u >> a1) & 1;
}

double CLMotionActivity::getInit@<D0>(CLMotionActivity *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  result = 0.0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 36) = 0;
  *(_QWORD *)(a2 + 20) = 0;
  *(_QWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 40) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 52) = 0;
  *(_QWORD *)(a2 + 56) = 0xBFF0000000000000;
  *(_QWORD *)(a2 + 80) = 0xBFF0000000000000;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 100) = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_DWORD *)(a2 + 128) = 0;
  return result;
}

BOOL CLMotionActivity::isSimilar(CLMotionActivity *this, const CLMotionActivity *a2, const CLMotionActivity *a3)
{
  return this->type == a2->type
      && this->confidence == a2->confidence
      && this->mountedState == a2->mountedState
      && this->mountedConfidence == a2->mountedConfidence
      && this->exitState == a2->exitState
      && this->isStanding == a2->isStanding
      && this->isVehicleConnected == a2->isVehicleConnected
      && ((LOBYTE(a2[1].mountedConfidence) ^ LOBYTE(this[1].mountedConfidence)) & 0x1F) == 0
      && LODWORD(this[1].conservativeMountedProbability) == LODWORD(a2[1].conservativeMountedProbability)
      && this[1].conservativeMountedState == a2[1].conservativeMountedState
      && *(_QWORD *)&this[1].timestamp == *(_QWORD *)&a2[1].timestamp
      && *(_DWORD *)&this[1].isVehicleConnected == *(_DWORD *)&a2[1].isVehicleConnected
      && this->vehicleType == a2->vehicleType;
}

uint64_t sub_18F207174()
{
  uint64_t v0;
  uint64_t result;

  if (sub_18F1F7BD4())
  {
    v0 = operator new();
    result = sub_18F20CD14(v0);
  }
  else
  {
    result = sub_18F1F781C();
    if ((result & 1) == 0)
      return result;
    v0 = operator new();
    result = sub_18F3927B8(v0);
  }
  qword_1ECEDFB80 = v0;
  return result;
}

void sub_18F2071E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C400FEECA2BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_18F207220()
{
  uint64_t result;
  char v1;

  result = sub_18F1E19B0();
  if ((result - 1) > 0xEE)
    v1 = 0;
  else
    v1 = byte_18F507238[(int)result - 1];
  byte_1ECEDF840 = v1;
  return result;
}

uint64_t sub_18F20725C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  sub_18F1EAC4C((_QWORD *)(v1 + 200));
  v3 = 1;
  return sub_18F1E5858(v1, &v3);
}

uint64_t sub_18F20729C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _QWORD v9[2];
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 24);
  v9[0] = CFSTR("bundleId");
  v9[1] = CFSTR("duration");
  v10[0] = v6;
  v10[1] = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, a5, *(double *)(v5 + 16) - *(double *)(v5 + 8));
  return objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v7, (uint64_t)v10, (uint64_t)v9, 2);
}

uint64_t sub_18F207330(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)operator new();
  result = sub_18F20CC7C((uint64_t)v2, "CLGeomagneticModelProvider", *(void **)(a1 + 32));
  *v2 = &off_1E294B6C0;
  v2[14] = 0;
  qword_1EE16E908 = (uint64_t)v2;
  return result;
}

void sub_18F207390(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10B3C40469E7843);
  _Unwind_Resume(a1);
}

uint64_t sub_18F2073B8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_18F2073C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

uint64_t sub_18F2073E4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), a1 + 40);
}

uint64_t sub_18F2073FC(uint64_t a1)
{
  return sub_18F331ACC(*(uint64_t **)(a1 + 32), 0);
}

void sub_18F207408()
{
  qword_1ECEDF070 = (uint64_t)CFSTR("/");
}

void sub_18F20741C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  double *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  _QWORD *v9;
  _QWORD *v10;
  double v11;
  double *v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  double v22;
  double v23;
  uint64_t v24;
  double *v25;
  double v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _BYTE v31[22];
  _BYTE buf[1628];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 56);
  v2 = *(_QWORD **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(double **)(a1 + 48);
  v5 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v3 + 24))(v3);
  v6 = v2[2];
  v7 = v6 + 80 * (int)v1;
  v10 = *(_QWORD **)(v7 + 40);
  v8 = (double *)(v7 + 40);
  v9 = v10;
  if (!v10)
    goto LABEL_12;
  v11 = *v4;
  v12 = v8;
  do
  {
    v13 = v9[4];
    v14 = v13 >= v3;
    if (v13 >= v3)
      v15 = v9;
    else
      v15 = v9 + 1;
    if (v14)
      v12 = (double *)v9;
    v9 = (_QWORD *)*v15;
  }
  while (*v15);
  if (v12 != v8 && *((_QWORD *)v12 + 4) <= v3)
  {
    v12[6] = v11;
    v12[7] = v11 * (double)v5;
    if (*(double *)(v6 + 80 * (int)v1 + 16) <= 0.0)
    {
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
      v17 = off_1ECEDEE90;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
      {
        v18 = *((_QWORD *)v12 + 6);
        v19 = *(_QWORD *)(v2[2] + 80 * (int)v1 + 16);
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v18;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v19;
        _os_log_impl(&dword_18F1DC000, v17, OS_LOG_TYPE_FAULT, "CLMotionNotifier::setUpdateIntervalPrivate RequestedUpdateInterval:%f, UpdateInterval:%f", buf, 0x16u);
      }
      if (sub_18F1FCA08(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE98 != -1)
          dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
        v28 = *((_QWORD *)v12 + 6);
        v29 = *(_QWORD *)(v2[2] + 80 * (int)v1 + 16);
        *(_DWORD *)v31 = 134218240;
        *(_QWORD *)&v31[4] = v28;
        *(_WORD *)&v31[12] = 2048;
        *(_QWORD *)&v31[14] = v29;
        v30 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 0, "void CLMotionNotifier::setUpdateIntervalPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v30);
        if (v30 != buf)
          free(v30);
      }
    }
    v20 = v2[2];
    v21 = (double *)(v20 + 80 * (int)v1);
    *((_DWORD *)v12 + 11) = llround(v12[6] / v21[2]);
    v22 = sub_18F1F63F4(v20, v1);
    *(double *)buf = v22;
    if (v22 != *v21)
    {
      *v21 = v22;
      *(double *)(v2[2] + 80 * (int)v1 + 16) = (*(double (**)(_QWORD *, uint64_t, _BYTE *))(*v2 + 16))(v2, v1, buf);
      sub_18F1F6130((uint64_t)v2, v1);
      v20 = v2[2];
    }
    v23 = sub_18F1F6484(v20, v1);
    *(double *)v31 = v23;
    v24 = v20 + 80 * (int)v1;
    v26 = *(double *)(v24 + 8);
    v25 = (double *)(v24 + 8);
    if (v23 != v26)
    {
      *v25 = v23;
      *(double *)(v2[2] + 80 * (int)v1 + 24) = (*(double (**)(_QWORD *, uint64_t, _BYTE *))(*v2 + 24))(v2, v1, v31);
    }
  }
  else
  {
LABEL_12:
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
    v16 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v1;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v3;
      _os_log_impl(&dword_18F1DC000, v16, OS_LOG_TYPE_FAULT, "Unknown (notification,dispatcher) pair: (%d, %p)", buf, 0x12u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2953468);
      *(_DWORD *)v31 = 67109376;
      *(_DWORD *)&v31[4] = v1;
      *(_WORD *)&v31[8] = 2048;
      *(_QWORD *)&v31[10] = v3;
      v27 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "void CLMotionNotifier::setUpdateIntervalPrivate(int, Dispatcher *, const CFTimeInterval &)", "CoreLocation: %s\n", v27);
      if (v27 != buf)
        free(v27);
    }
  }
}

CFRunLoopTimerRef *sub_18F2078C0()
{
  CFRunLoopTimerRef *v0;
  CFRunLoopTimerRef *result;

  v0 = (CFRunLoopTimerRef *)operator new();
  result = sub_18F1E1F84(v0, 3, 1);
  qword_1ECEDFD70 = (uint64_t)v0;
  return result;
}

void sub_18F207908(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10A1C40A8081CBALL);
  _Unwind_Resume(a1);
}

void sub_18F20792C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char v6;
  unint64_t *v7;
  unint64_t v8;

  if ((sub_18F1F781C() & 4) != 0)
  {
    v0 = operator new();
    sub_18F1E61EC(v0, (uint64_t)"CLAccelerometer", 1);
    *(_QWORD *)v0 = &off_1E2949BE0;
    *(_BYTE *)(v0 + 32) = 0;
    *(_QWORD *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = 0;
    v1 = sub_18F204AE4();
    v2 = *(_QWORD *)(v1 + 24);
    v3 = *(std::__shared_weak_count **)(v1 + 32);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    v6 = sub_18F1EE944(v2, "LogAccelerometer", (BOOL *)(v0 + 32));
    if (v3)
    {
      v7 = (unint64_t *)&v3->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if ((v6 & 1) == 0)
      *(_BYTE *)(v0 + 32) = 0;
    qword_1ECEDF830 = v0;
  }
}

void sub_18F207A30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_18F2A8438(v2);
  sub_18F3DB8A0(v1);
  MEMORY[0x194001438](v1, 0x10F1C40926F10A7);
  _Unwind_Resume(a1);
}

uint64_t sub_18F207AA8()
{
  return pthread_dependency_init_np();
}

_QWORD *sub_18F207ABC()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E2949B88;
  qword_1ECEDEF60 = (uint64_t)result;
  return result;
}

void sub_18F207AF8()
{
  BOOL v0;

  if (qword_1ECEDEF70 != -1)
    dispatch_once(&qword_1ECEDEF70, &unk_1E2944F60);
  v0 = 1;
  if ((dword_1ECEDEF5C - 242) >= 0x10)
    v0 = (dword_1ECEDEF5C - 191) < 4 || dword_1ECEDEF5C == 1;
  byte_1ECEDEF51 = v0;
}

double sub_18F207B60()
{
  double result;
  uint64_t v1;

  if (sub_18F1DFF7C())
  {
    if (sub_18F1EF73C())
    {
      v1 = operator new();
      sub_18F1E61EC(v1, (uint64_t)"CLDeviceMotion", 11);
      *(_QWORD *)v1 = &off_1E2949AD8;
      *(_BYTE *)(v1 + 28) = 0;
      *(_OWORD *)(v1 + 32) = 0u;
      *(_OWORD *)(v1 + 48) = 0u;
      *(_OWORD *)(v1 + 64) = 0u;
      *(_QWORD *)(v1 + 80) = 0;
      result = -1.0;
      *(_OWORD *)(v1 + 88) = xmmword_18F504210;
      qword_1ECEDFB90 = v1;
    }
  }
  return result;
}

void sub_18F207BEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C4049473D51);
  _Unwind_Resume(a1);
}

uint64_t sub_18F207C10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = (void *)MEMORY[0x1E0D44530];
  v6 = objc_msgSend_main(MEMORY[0x1E0D44548], a2, a3, a4, a5);
  result = objc_msgSend_newSharedVendorUniverseWithSilo_(v5, v7, v6, v8, v9);
  qword_1ECEDF8A8 = result;
  return result;
}

void sub_18F207C54(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  _BYTE v7[29];
  uint8_t buf[8];
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  _OWORD v13[100];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1EE16D6D8 != -1)
    dispatch_once(&qword_1EE16D6D8, &unk_1E2954928);
  v4 = qword_1EE16D6D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_DEBUG, "Received Bias Notification", buf, 2u);
  }
  if (sub_18F1FCA08(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954928);
    v6 = (char *)_os_log_send_and_compose_impl();
    sub_18F419700("Generic", 1, 0, 2, "void CLPressure::onBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  *(_OWORD *)v7 = *a2;
  *(_OWORD *)&v7[13] = *(_OWORD *)((char *)a2 + 13);
  v5 = sub_18F204AE4();
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v9 = 3221225472;
  v10 = sub_18F207E44;
  v11 = &unk_1E29564A0;
  v12 = v3;
  v13[0] = *(_OWORD *)v7;
  *(_OWORD *)((char *)v13 + 13) = *(_OWORD *)&v7[13];
  sub_18F1F6514(v5, (uint64_t)buf);
}

uint64_t sub_18F207E44(uint64_t result)
{
  uint64_t v1;
  __int128 v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_OWORD *)(result + 40);
  *(_OWORD *)(v1 + 81) = *(_OWORD *)(result + 53);
  *(_OWORD *)(v1 + 68) = v2;
  if (*(float *)(result + 52) != 3.4028e38 || *(float *)(result + 44) != 0.0 || *(float *)(result + 48) != 0.0)
    *(_BYTE *)(v1 + 49) = 1;
  return result;
}

os_log_t sub_18F207E94()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207EC0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207EEC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207F18()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207F44()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207F70()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207F9C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207FC8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F207FF4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208020()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F20804C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208078()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2080A4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2080D0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2080FC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208128()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208154()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208180()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2081AC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2081D8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208204()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208230()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F20825C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208288()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2082B4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2082E0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F20830C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208338()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208364()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208390()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2083BC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2083E8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208414()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208440()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F20846C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F208498()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
  off_1ECEDEE80 = result;
  return result;
}

os_log_t sub_18F2084C4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F2084F0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F20851C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F208548()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F208574()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F2085A0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F2085CC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F2085F8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F208624()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F208650()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F20867C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F2086A8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F2086D4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F208700()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F20872C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F208758()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F208784()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "DeviceMotion");
  off_1ECEDEE70 = result;
  return result;
}

os_log_t sub_18F2087B0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F2087DC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208808()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208834()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208860()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F20888C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F2088B8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F2088E4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208910()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F20893C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208968()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208994()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F2089C0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F2089EC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208A18()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208A44()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Compass");
  qword_1EE16D690 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208A70()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208A9C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208AC8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208AF4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208B20()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208B4C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208B78()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208BA4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208BD0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208BFC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208C28()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208C54()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208C80()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208CAC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208CD8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208D04()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208D30()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208D5C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208D88()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208DB4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208DE0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208E0C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Motion");
  off_1ECEDEE90 = result;
  return result;
}

os_log_t sub_18F208E38()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Core", "Client");
  qword_1ECEDEE50 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208E64()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accel");
  qword_1ECEDEE40 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208E90()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accel");
  qword_1ECEDEE40 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208EBC()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Accel");
  qword_1ECEDEE40 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208EE8()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208F14()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208F40()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208F6C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208F98()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208FC4()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

os_log_t sub_18F208FF0()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

os_log_t sub_18F20901C()
{
  os_log_t result;

  result = os_log_create("com.apple.locationd.Motion", "Gyro");
  qword_1ECEDEE60 = (uint64_t)result;
  return result;
}

void sub_18F209048(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[4];
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F1E816C;
  block[3] = &unk_1E2955C48;
  v4 = *(_OWORD *)(a1 + 40);
  v5 = v1;
  v6 = *(_OWORD *)(a1 + 56);
  dispatch_async(v2, block);
}

void sub_18F2090B4(_QWORD *a1, const char *a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (void *)a1[4];
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 1);
  v10 = *(_QWORD *)a2;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  objc_msgSend__handleQueryResponse_onQueue_withHandler_(v3, a2, (uint64_t)&v10, a1[5], a1[6]);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_18F209140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18F2A8438((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18F209154(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_startDeviceMotionUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, a1[7], a1[5], a1[6]);
}

void sub_18F209164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v4;
  char *v5;
  uint8_t buf[1640];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (qword_1ECEDEE58 != -1)
      dispatch_once(&qword_1ECEDEE58, &unk_1E2958720);
    v4 = qword_1ECEDEE50;
    if (os_log_type_enabled((os_log_t)qword_1ECEDEE50, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "#Spi, TimeSyncWithReplyBlock failed", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE58 != -1)
        dispatch_once(&qword_1ECEDEE58, &unk_1E2958720);
      v5 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CLLocationInternalClient_CoreMotion timeSyncMachTimeStamp:oscarTimeStamp:]_block_invoke", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  else
  {
    **(_QWORD **)(a1 + 40) = a3;
    **(_QWORD **)(a1 + 48) = a4;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

uint64_t sub_18F20930C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), 0);
}

void sub_18F209320(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  NSObject *v3;
  _QWORD block[4];
  __int128 v5;
  uint64_t v6;

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  v1 = *(_QWORD *)(a1 + 48);
  v2 = *(_OWORD *)(a1 + 32);
  v3 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 16);
  block[2] = sub_18F1E038C;
  block[3] = &unk_1E2955C70;
  v6 = v1;
  v5 = v2;
  dispatch_async(v3, block);
}

void sub_18F209384(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char isStepCountingAvailable;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  _QWORD v20[6];
  _QWORD block[5];

  isStepCountingAvailable = objc_msgSend_isStepCountingAvailable(CMPedometer, a2, a3, a4, a5);
  v11 = a1[4];
  if ((isStepCountingAvailable & 1) != 0)
  {
    *(_QWORD *)(v11 + 48) = -1;
    *(_BYTE *)(a1[4] + 136) = 0;
    v12 = (void *)a1[4];
    v13 = a1[5];
    v14 = objc_msgSend_date(MEMORY[0x1E0C99D68], v7, v8, v9, v10);
    v15 = a1[4];
    v16 = *(_QWORD *)(v15 + 8);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = sub_18F1E349C;
    v20[3] = &unk_1E2957558;
    v17 = a1[6];
    v20[4] = v15;
    v20[5] = v17;
    objc_msgSend__internalQueryPedometerDataFromDate_toDate_onQueue_withHandler_(v12, v18, v13, v14, v16, v20);
  }
  else
  {
    v19 = *(NSObject **)(v11 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F422FA0;
    block[3] = &unk_1E2955B10;
    block[4] = a1[6];
    dispatch_async(v19, block);
  }
}

uint64_t sub_18F209478(uint64_t a1)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setDeviceMotionCallback_info_interval_fsync_, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64));
}

uint64_t sub_18F209490(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int128 v16;
  uint64_t v17;

  if (objc_msgSend_authorizationStatus(CMMotionUtils, a2, a3, a4, a5) == 3)
  {
    v7 = sub_18F204AE4();
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = sub_18F4C7E9C;
    v15[3] = &unk_1E2955BD8;
    v16 = *(_OWORD *)(a1 + 32);
    v17 = *(_QWORD *)(a1 + 48);
    sub_18F1F6514(v7, (uint64_t)v15);
    return objc_msgSend__startRelativeAltitudeUpdates(*(void **)(*(_QWORD *)(a1 + 32) + 8), v8, v9, v10, v11);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 48);
    v14 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CFSTR("CMErrorDomain"), 105, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v13 + 16))(v13, 0, v14);
  }
}

uint64_t sub_18F209560()
{
  uint64_t result;

  result = sub_18F1F781C();
  if ((result & 1) != 0)
    byte_1ECEDFB20 = 1;
  return result;
}

uint64_t sub_18F209584(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;

  v6 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v6, sel__startPedometerUpdatesFromDate_withHandler_, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), v7);
}

uint64_t sub_18F2095AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setAccelerometerUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F2095BC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_setNotificationCallback_info_, a1[5], a1[6], a5);
}

void sub_18F2095CC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F1E0B50;
  block[3] = &unk_1E2955938;
  block[4] = v1;
  dispatch_async(v2, block);
}

void sub_18F209624(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  NSObject *v7;
  char *v8;
  uint8_t buf[1640];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((objc_msgSend_isDeviceMotionActive(*(void **)(a1 + 32), a2, a3, a4, a5) & 1) != 0
    || (v6 = *(_QWORD *)(a1 + 40), *(_QWORD *)(v6 + 512)))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E2956AF0);
    v7 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "DeviceMotion is active.  Cannot set power conservation mode", buf, 2u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E2956AF0);
      v8 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "-[CMMotionManager setPowerConservationMode:]_block_invoke", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
  }
  else
  {
    *(_DWORD *)(v6 + 576) = *(_DWORD *)(a1 + 48);
  }
}

uint64_t sub_18F2097D0()
{
  id v0;
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = objc_alloc(MEMORY[0x1E0D44528]);
  result = objc_msgSend_initWithIdentifier_(v0, v1, (uint64_t)CFSTR("CLGeomagneticModelProviderSilo"), v2, v3);
  qword_1ECEDFB30 = result;
  return result;
}

uint64_t sub_18F209800(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v6;

  v5 = *(void **)(a1 + 32);
  v6 = objc_msgSend_attitudeReferenceFrame(v5, a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v5, sel_startDeviceMotionUpdatesPrivateUsingReferenceFrame_toQueue_withHandler_, v6, 0, 0);
}

uint64_t sub_18F209834(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_stopDeviceMotionUpdatesPrivate(*(void **)(a1 + 32), a2, a3, a4, a5);
}

uint64_t sub_18F20983C(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v2 = sub_18F204AE4();
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = sub_18F4C7EAC;
  v8[3] = &unk_1E2955938;
  v8[4] = *(_QWORD *)(a1 + 32);
  sub_18F1F5E28(v2, (uint64_t)v8);
  return objc_msgSend__stopRelativeAltitudeUpdates(*(void **)(*(_QWORD *)(a1 + 32) + 8), v3, v4, v5, v6);
}

uint64_t sub_18F2098AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_setGyroUpdateIntervalPrivate_, a3, a4, a5);
}

uint64_t sub_18F2098BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = objc_msgSend_pedometerProxy(*(void **)(a1 + 32), a2, a3, a4, a5);
  return MEMORY[0x1E0DE7D20](v5, sel__stopPedometerUpdates, v6, v7, v8);
}

void sub_18F2098D4(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

id sub_18F2098DC(uint64_t a1)
{
  id result;

  result = objc_loadWeak((id *)(a1 + 48));
  if (result)
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return result;
}

uint64_t sub_18F209918(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend__teardown(*(void **)(a1 + 32), a2, a3, a4, a5);
}

void sub_18F209920(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F209918;
  block[3] = &unk_1E2955938;
  block[4] = v1;
  dispatch_sync(v2, block);
}

uint64_t CLMotionActivity::isStatic(CLMotionActivity *this)
{
  return (this->type < 0xCu) & (0xC06u >> this->type);
}

uint64_t sub_18F209994(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  char *v11;
  CFTypeRef cf;
  int v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_18F36B2A4(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1ECEDEE88 != -1)
      dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
    v7 = off_1ECEDEE80;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE80, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v18 = v8;
      v19 = 2112;
      v20 = a2;
      _os_log_impl(&dword_18F1DC000, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_18F1FCA08(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE88 != -1)
        dispatch_once(&qword_1ECEDEE88, &unk_1E2952EC8);
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v13 = 138412546;
      v14 = v10;
      v15 = 2112;
      v16 = a2;
      v11 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int &, int) const", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_18F209BCC(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v4;

  *a3 = 0;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 904))(a1);
  if ((_DWORD)v4 && *a3)
    CFAutorelease(*a3);
  return v4;
}

double sub_18F209C14(unsigned __int8 *a1, int a2)
{
  int v2;
  double result;

  v2 = *a1;
  *a1 = v2 & ~(_BYTE)a2;
  if ((v2 & (a2 ^ 0xFF)) == 0)
  {
    *((CFAbsoluteTime *)a1 + 2) = CFAbsoluteTimeGetCurrent();
    sub_18F209C68((uint64_t)a1);
    result = 2.22507386e-308;
    *(_OWORD *)(a1 + 8) = xmmword_18F5093A0;
  }
  return result;
}

BOOL sub_18F209C68(uint64_t a1)
{
  double v1;

  v1 = *(double *)(a1 + 8);
  if (v1 != 2.22507386e-308)
    AnalyticsSendEventLazy();
  return v1 != 2.22507386e-308;
}

uint64_t sub_18F209CEC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_18F207330;
  block[3] = &unk_1E2955938;
  block[4] = a1;
  if (qword_1EE16E470 != -1)
    dispatch_once(&qword_1EE16E470, block);
  return qword_1EE16E908;
}

void sub_18F209D60(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v9[7];
  char v10;

  v8 = sub_18F204AE4();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_18F2073C8;
  v9[3] = &unk_1E2955EE0;
  v9[4] = a1;
  v9[5] = a2;
  v10 = a3;
  v9[6] = a4;
  sub_18F1F5E28(v8, (uint64_t)v9);
}

_QWORD *sub_18F209DDC(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[6];
  int v6;

  if (result[1])
  {
    v1 = result;
    v2 = sub_18F1DFF7C();
    v3 = v1[1];
    v4 = sub_18F204AE4();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = sub_18F1F5EE0;
    v5[3] = &unk_1E2956E98;
    v6 = 0;
    v5[4] = v2;
    v5[5] = v3;
    sub_18F1F5E28(v4, (uint64_t)v5);
    result = (_QWORD *)v1[1];
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v1[1] = 0;
  }
  return result;
}

uint64_t sub_18F209E74(uint64_t result, double a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (!*(_QWORD *)(result + 16))
  {
    v3 = result;
    v4 = (_QWORD *)operator new();
    *v4 = off_1E294C238;
    *v4 = &off_1E294C820;
    v4[1] = 0;
    v4[2] = sub_18F200B3C;
    v4[3] = v3;
    *(_QWORD *)(v3 + 16) = v4;
    v5 = sub_18F1EF73C();
    return sub_18F1F4F0C(v5, 0, *(_QWORD *)(v3 + 16), a2);
  }
  return result;
}

void sub_18F209F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_18F209F30(uint64_t a1)
{
  uint64_t v2;

  if (!*(_BYTE *)(a1 + 25))
  {
    v2 = sub_18F1DF63C();
    sub_18F209D60(v2, (uint64_t)sub_18F1EDC44, *(_BYTE *)(a1 + 24), a1);
    *(_BYTE *)(a1 + 25) = 1;
  }
}

void sub_18F209F74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[5];

  if (*(_BYTE *)(a1 + 25))
  {
    v2 = sub_18F1DF63C();
    v3 = sub_18F204AE4();
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = sub_18F2073B8;
    v4[3] = &unk_1E2955738;
    v4[4] = v2;
    sub_18F1F5E28(v3, (uint64_t)v4);
    *(_BYTE *)(a1 + 25) = 0;
  }
}

uint64_t sub_18F209FE8(uint64_t result, double a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (!*(_QWORD *)(result + 8))
  {
    v3 = result;
    v4 = (_QWORD *)operator new();
    *v4 = off_1E294C238;
    *v4 = &off_1E294C3C0;
    v4[1] = 0;
    v4[2] = sub_18F1FD784;
    v4[3] = v3;
    *(_QWORD *)(v3 + 8) = v4;
    v5 = sub_18F1DFF7C();
    return sub_18F1F4F0C(v5, 0, *(_QWORD *)(v3 + 8), a2);
  }
  return result;
}

void sub_18F20A080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

double sub_18F20A0A8(double *a1, double *a2)
{
  double result;

  *a1 = a2[3] * (a2[1] + a2[1]) - *a2 * (a2[2] + a2[2]);
  a1[1] = -(a2[3] * (*a2 + *a2)) - a2[1] * (a2[2] + a2[2]);
  result = *a2 * (*a2 + *a2) + -1.0 + a2[1] * (a2[1] + a2[1]);
  a1[2] = result;
  return result;
}

void sub_18F20A100(uint64_t a1, double *a2, double *a3, double *a4, _QWORD *a5)
{
  float64x2_t v10;
  float v11;
  double v12;
  float v13;
  double v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float32x2_t v19;
  float v20;
  double v21;
  double v22;
  NSObject *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  NSObject *v31;
  double v32;
  double v33;
  double v34;
  unint64_t v35;
  float v36;
  float v37;
  double v38;
  float v39;
  double v40;
  double v41;
  double v42;
  float v43;
  int v44;
  double v45;
  double v46;
  int v47;
  NSObject *v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t i;
  float v61;
  float v62;
  float v63;
  float v64;
  double v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  BOOL v69;
  int v70;
  NSObject *v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  char *v87;
  float v88;
  float v89;
  float v90;
  unint64_t v91;
  float v92;
  float v93;
  NSObject *v94;
  char *v95;
  double v96;
  uint64_t v97;
  float v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  NSObject *v111;
  NSObject *v112;
  unint64_t v113;
  float v114;
  NSObject *v115;
  char *v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  uint64_t v123;
  char *v124;
  double v125;
  double v126;
  double v127;
  unint64_t v128;
  float v129;
  float v130;
  double v131;
  float v132;
  BOOL v133;
  double v134;
  float v135;
  NSObject *v136;
  char *v137;
  char *v138;
  char *v139;
  int v140;
  int *v141;
  double v142;
  NSObject *v143;
  NSObject *v144;
  unint64_t v145;
  NSObject *v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  float v162;
  float v163;
  _OWORD v164[2];
  double v165[4];
  _BYTE v166[24];
  double v167;
  __int16 v168;
  double v169;
  __int16 v170;
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  uint64_t v175;
  _BYTE buf[24];
  double v177;
  __int16 v178;
  double v179;
  __int16 v180;
  double v181;
  __int16 v182;
  double v183;
  __int16 v184;
  uint64_t v185;
  double v186;
  double v187;
  double v188;
  double v189;
  _DWORD v190[3];
  _DWORD v191[3];
  _DWORD v192[9];
  uint64_t v193;

  v193 = *MEMORY[0x1E0C80C00];
  v10.f64[0] = *a2;
  v11 = *a2;
  *(float *)(a1 + 184) = v11;
  v12 = *a3;
  v13 = *a3;
  *(float *)(a1 + 188) = v13;
  v14 = *a4;
  v15 = *a4;
  *(float *)(a1 + 192) = v15;
  if (*(double *)(a1 + 176) < 0.0)
  {
    sub_18F20D06C(a1 + 16, a2, a3, a4);
    *(_QWORD *)(a1 + 176) = *a5;
    v16 = *a2;
    *(float *)(a1 + 560) = v16;
    v17 = *a3;
    *(float *)(a1 + 564) = v17;
    v18 = *a4;
    *(float *)(a1 + 568) = v18;
    *(_DWORD *)(a1 + 600) = 0;
    sub_18F20A0A8((double *)(a1 + 576), (double *)(a1 + 16));
    *(_BYTE *)(a1 + 8) = 1;
    return;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v10.f64[1] = v12;
    v19 = vcvt_f32_f64(vmlaq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(a1 + 560)), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), v10));
    *(float32x2_t *)(a1 + 560) = v19;
    v20 = *(float *)(a1 + 568) * 0.1 + v14 * 0.9;
    *(float *)(a1 + 568) = v20;
    *(double *)buf = v19.f32[0];
    *(double *)v166 = v19.f32[1];
    v186 = v20;
    sub_18F3D6AC8(a1 + 320, (double *)buf);
    sub_18F3D6AC8(a1 + 400, (double *)v166);
    sub_18F3D6AC8(a1 + 480, &v186);
  }
  *(_QWORD *)(a1 + 176) = *a5;
  if (!*(_DWORD *)(a1 + 148))
    return;
  v21 = *(double *)a5;
  v22 = *(double *)(a1 + 168);
  if (*(double *)a5 < v22)
    return;
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
    v23 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a2;
      v25 = *a3;
      v26 = *a4;
      v27 = *(float *)(a1 + 560);
      v28 = *(float *)(a1 + 564);
      v29 = *(float *)(a1 + 568);
      v30 = *a5;
      *(_DWORD *)buf = 134219520;
      *(double *)&buf[4] = v24;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v25;
      *(_WORD *)&buf[22] = 2048;
      v177 = v26;
      v178 = 2048;
      v179 = v27;
      v180 = 2048;
      v181 = v28;
      v182 = 2048;
      v183 = v29;
      v184 = 2048;
      v185 = v30;
      _os_log_impl(&dword_18F1DC000, v23, OS_LOG_TYPE_DEBUG, "[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf", buf, 0x48u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
      v117 = *a2;
      v118 = *a3;
      v119 = *a4;
      v120 = *(float *)(a1 + 560);
      v121 = *(float *)(a1 + 564);
      v122 = *(float *)(a1 + 568);
      v123 = *a5;
      *(_DWORD *)v166 = 134219520;
      *(double *)&v166[4] = v117;
      *(_WORD *)&v166[12] = 2048;
      *(double *)&v166[14] = v118;
      *(_WORD *)&v166[22] = 2048;
      v167 = v119;
      v168 = 2048;
      v169 = v120;
      v170 = 2048;
      v171 = v121;
      v172 = 2048;
      v173 = v122;
      v174 = 2048;
      v175 = v123;
      v124 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v124);
      if (v124 != buf)
        free(v124);
    }
    if (qword_1EE16D6D8 != -1)
      dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
    v31 = qword_1EE16D6D0;
    if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(float *)(a1 + 156);
      v33 = *(float *)(a1 + 160);
      v34 = *(float *)(a1 + 164);
      v35 = *(_QWORD *)(a1 + 296);
      v36 = 0.0;
      if (v35)
      {
        v37 = *(float *)(a1 + 248);
        v38 = (float)(v37 / (float)v35);
        if (v35 != 1)
        {
          v39 = (float)((float)v35 * *(float *)(a1 + 252)) - (float)(v37 * v37);
          if (v39 >= 0.0)
            v36 = v39 / (float)((v35 - 1) * v35);
        }
      }
      else
      {
        v38 = 0.0;
      }
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2048;
      v177 = v34;
      v178 = 2048;
      v179 = v38;
      v180 = 2048;
      v181 = v36;
      _os_log_impl(&dword_18F1DC000, v31, OS_LOG_TYPE_DEBUG, "[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f", buf, 0x34u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EE16D6D8 != -1)
        dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
      v125 = *(float *)(a1 + 156);
      v126 = *(float *)(a1 + 160);
      v127 = *(float *)(a1 + 164);
      v128 = *(_QWORD *)(a1 + 296);
      v129 = 0.0;
      if (v128)
      {
        v130 = *(float *)(a1 + 248);
        v131 = (float)(v130 / (float)v128);
        if (v128 != 1)
        {
          v132 = (float)((float)v128 * *(float *)(a1 + 252)) - (float)(v130 * v130);
          if (v132 >= 0.0)
            v129 = v132 / (float)((v128 - 1) * v128);
        }
      }
      else
      {
        v131 = 0.0;
      }
      *(_DWORD *)v166 = 134219008;
      *(double *)&v166[4] = v125;
      *(_WORD *)&v166[12] = 2048;
      *(double *)&v166[14] = v126;
      *(_WORD *)&v166[22] = 2048;
      v167 = v127;
      v168 = 2048;
      v169 = v131;
      v170 = 2048;
      v171 = v129;
      v139 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v139);
      if (v139 != buf)
        free(v139);
    }
  }
  v40 = *a2;
  v41 = *a3;
  v42 = *a4;
  LODWORD(v22) = *(_DWORD *)(a1 + 136);
  LODWORD(v21) = *(_DWORD *)(a1 + 140);
  v43 = *(float *)(a1 + 144);
  v162 = *(float *)&v21;
  v163 = *(float *)&v22;
  v44 = *(_DWORD *)(a1 + 148);
  sub_18F3D5DE0(a1, v21, *(int32x2_t *)&v22);
  v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
  v46 = fabs(v45 + -1.0) / v45;
  if (v46 > 0.1)
    return;
  if (!*(_BYTE *)(a1 + 224) || *(_DWORD *)(a1 + 616))
    goto LABEL_26;
  v88 = fabsf(*(float *)(a1 + 156));
  if (v88 > 10.0)
    goto LABEL_92;
  v89 = fabsf(*(float *)(a1 + 160));
  if (v89 > 10.0)
    goto LABEL_92;
  v90 = fabsf(*(float *)(a1 + 164));
  if (v90 > 10.0)
    goto LABEL_92;
  v91 = *(_QWORD *)(a1 + 296);
  if (v91)
  {
    if ((float)(*(float *)(a1 + 248) / (float)v91) > 10.0)
      goto LABEL_92;
  }
  if (v88 > 3.14159265
    || v89 > 3.14159265
    || v90 > 3.14159265
    || (!v91 ? (v92 = 0.0) : (v92 = *(float *)(a1 + 248) / (float)v91), v92 > 3.14159265))
  {
    if (v91 < 2
      || (v93 = (float)((float)v91 * *(float *)(a1 + 252)) - (float)(*(float *)(a1 + 248) * *(float *)(a1 + 248)),
          v93 < 0.0)
      || (float)(v93 / (float)((v91 - 1) * v91)) < 1.25)
    {
      sub_18F20A0A8((double *)(a1 + 576), (double *)(a1 + 16));
      if (!*(_BYTE *)(a1 + 196))
      {
        *(_DWORD *)(a1 + 600) = 0;
        goto LABEL_32;
      }
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      v94 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v94, OS_LOG_TYPE_DEBUG, "rotating and going through.", buf, 2u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
        *(_WORD *)v166 = 0;
        v95 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v95);
        if (v95 != buf)
          free(v95);
      }
LABEL_26:
      v47 = *(unsigned __int8 *)(a1 + 196);
      *(_DWORD *)(a1 + 600) = 0;
      if (v47)
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
        v48 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218752;
          *(double *)&buf[4] = v40;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v41;
          *(_WORD *)&buf[22] = 2048;
          v177 = v42;
          v178 = 2048;
          v179 = v45;
          _os_log_impl(&dword_18F1DC000, v48, OS_LOG_TYPE_DEBUG, "accM, (%.4f, %.4f, %.4f), mag, %.3f", buf, 0x2Au);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
          *(_DWORD *)v166 = 134218752;
          *(double *)&v166[4] = v40;
          *(_WORD *)&v166[12] = 2048;
          *(double *)&v166[14] = v41;
          *(_WORD *)&v166[22] = 2048;
          v167 = v42;
          v168 = 2048;
          v169 = v45;
          v138 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v138);
          if (v138 != buf)
            free(v138);
        }
      }
LABEL_32:
      v49 = v46
          * (0.015
           / (exp((0.9- sqrtf((float)((float)((float)(v162 / (float)v44) * (float)(v162 / (float)v44))+ (float)((float)(v163 / (float)v44) * (float)(v163 / (float)v44)))+ (float)((float)(v43 / (float)v44) * (float)(v43 / (float)v44))))/ 0.08)+ 1.0))+ 0.00000900000032;
      if (*(_BYTE *)(a1 + 224) && !*(_DWORD *)(a1 + 616))
        v49 = v49 * 0.85;
      v50 = 0;
      v51 = 0;
      v52 = v41 / v45;
      v53 = *(double *)(a1 + 16);
      v54 = *(double *)(a1 + 24);
      v55 = *(double *)(a1 + 32) + *(double *)(a1 + 32);
      v56 = *(double *)(a1 + 40);
      v57 = v56 * (v54 + v54) - v53 * v55;
      v58 = -(v56 * (v53 + v53)) - v54 * v55;
      v59 = v53 * (v53 + v53) + -1.0 + v54 * (v54 + v54);
      *(float *)&v53 = v58;
      *(float *)&v55 = v59;
      v192[0] = 0;
      v192[1] = LODWORD(v55);
      *(float *)&v192[2] = -*(float *)&v53;
      *(float *)&v54 = v57;
      *(float *)&v192[3] = -*(float *)&v55;
      v192[4] = 0;
      v192[5] = LODWORD(v54);
      v192[6] = LODWORD(v53);
      *(float *)&v192[7] = -*(float *)&v54;
      v192[8] = 0;
      do
      {
        for (i = 0; i != 9; i += 3)
          *(_DWORD *)&buf[v50 * 4 + i * 4] = v192[v50 + i];
        ++v51;
        ++v50;
      }
      while (v51 != 3);
      bzero((char *)&v179 + 2, 0x24uLL);
      v61 = v49;
      *(float *)v191 = v61;
      *(float *)&v191[1] = v61;
      *(float *)&v191[2] = v61;
      v62 = v40 / v45 - v57;
      v63 = v52 - v58;
      *(float *)v190 = v62;
      *(float *)&v190[1] = v63;
      v64 = v42 / v45 - v59;
      *(float *)&v190[2] = v64;
      sub_18F1F5B7C(v166, (uint64_t *)(a1 + 112), (uint64_t)buf, (uint64_t)v191, (uint64_t)v190, 6, 3, (uint64_t)&v186);
      v65 = v58 * *(double *)&v166[8] + *(double *)v166 * v57 + *(double *)&v166[16] * v59;
      *(double *)v166 = *(double *)v166 - v65 * v57;
      *(double *)&v166[8] = *(double *)&v166[8] - v65 * v58;
      *(double *)&v166[16] = *(double *)&v166[16] - v65 * v59;
      sub_18F201124(v165, (double *)v166);
      sub_18F2010A8((double *)v164, v165, (double *)(a1 + 16));
      v66 = 0;
      v67 = v164[1];
      *(_OWORD *)(a1 + 16) = v164[0];
      *(_OWORD *)(a1 + 32) = v67;
      do
      {
        *(double *)(a1 + 88 + v66) = *(double *)&v166[v66 + 24] + *(double *)(a1 + 88 + v66);
        v66 += 8;
      }
      while (v66 != 24);
      if (*(_BYTE *)(a1 + 224))
        sub_18F20A0A8((double *)(a1 + 576), (double *)(a1 + 16));
      *(_QWORD *)(a1 + 608) = *a5;
      v68 = *(_DWORD *)(a1 + 616);
      v69 = __OFSUB__(v68, 1);
      v70 = v68 - 1;
      if (v70 < 0 == v69)
      {
        *(_DWORD *)(a1 + 616) = v70;
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
        v71 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v71, OS_LOG_TYPE_DEBUG, "Doing some crude updates to catch up.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
          *(_WORD *)v166 = 0;
          v137 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v137);
          if (v137 != buf)
            free(v137);
        }
      }
      if (*(_BYTE *)(a1 + 196))
      {
        if (qword_1EE16D6D8 != -1)
          dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
        v72 = qword_1EE16D6D0;
        if (os_log_type_enabled((os_log_t)qword_1EE16D6D0, OS_LOG_TYPE_DEBUG))
        {
          v73 = *(_QWORD *)(a1 + 64);
          v74 = *(_QWORD *)(a1 + 72);
          v75 = *(double *)(a1 + 80);
          v76 = *(double *)(a1 + 88);
          v77 = *(double *)(a1 + 96);
          v78 = *(double *)(a1 + 104);
          v79 = *a5;
          *(_DWORD *)buf = 134219520;
          *(_QWORD *)&buf[4] = v73;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v74;
          *(_WORD *)&buf[22] = 2048;
          v177 = v75;
          v178 = 2048;
          v179 = v76;
          v180 = 2048;
          v181 = v77;
          v182 = 2048;
          v183 = v78;
          v184 = 2048;
          v185 = v79;
          _os_log_impl(&dword_18F1DC000, v72, OS_LOG_TYPE_DEBUG, "[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f", buf, 0x48u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1EE16D6D8 != -1)
            dispatch_once(&qword_1EE16D6D8, &unk_1E2954E88);
          v80 = *(_QWORD *)(a1 + 64);
          v81 = *(_QWORD *)(a1 + 72);
          v82 = *(double *)(a1 + 80);
          v83 = *(double *)(a1 + 88);
          v84 = *(double *)(a1 + 96);
          v85 = *(double *)(a1 + 104);
          v86 = *a5;
          *(_DWORD *)v166 = 134219520;
          *(_QWORD *)&v166[4] = v80;
          *(_WORD *)&v166[12] = 2048;
          *(_QWORD *)&v166[14] = v81;
          *(_WORD *)&v166[22] = 2048;
          v167 = v82;
          v168 = 2048;
          v169 = v83;
          v170 = 2048;
          v171 = v84;
          v172 = 2048;
          v173 = v85;
          v174 = 2048;
          v175 = v86;
          v87 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v87);
LABEL_58:
          if (v87 != buf)
            free(v87);
          return;
        }
      }
      return;
    }
  }
  sub_18F3D677C(a1 + 304, (uint64_t)&v186);
  v161 = sqrt(v188 * v188 + v187 * v187 + v189 * v189);
  v96 = *(double *)(a1 + 608);
  if (v96 > 0.0 && *(double *)(a1 + 176) - v96 > 15.0 && v161 < 0.3)
  {
    sub_18F3D684C(a1 + 304, (uint64_t)buf);
    if (fabs(sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v177 * v177)+ -1.0) <= 0.1)
    {
      *(_DWORD *)(a1 + 616) = 10;
      if (!*(_BYTE *)(a1 + 196))
        goto LABEL_190;
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      v115 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v115, OS_LOG_TYPE_DEBUG, "it's been too long. go through.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_190;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 == -1)
        goto LABEL_125;
      goto LABEL_222;
    }
  }
  if (*(_DWORD *)(a1 + 392) <= (int)((double)*(unint64_t *)(a1 + 312) * 0.5))
  {
LABEL_92:
    sub_18F20A0A8((double *)(a1 + 576), (double *)(a1 + 16));
    return;
  }
  v97 = *(_QWORD *)(a1 + 296);
  if (v97)
    v98 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 264)
                               + (((unint64_t)(v97 + *(_QWORD *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v97 + *(_QWORD *)(a1 + 288) - 1) & 0x3FF));
  else
    v98 = 0.0;
  if (v98 > 0.2)
  {
    sub_18F20A0A8((double *)(a1 + 576), (double *)(a1 + 16));
    if (*(_BYTE *)(a1 + 196))
    {
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      v99 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        v100 = *(_QWORD *)(a1 + 576);
        v101 = *(_QWORD *)(a1 + 584);
        v102 = *(double *)(a1 + 592);
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v100;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v101;
        *(_WORD *)&buf[22] = 2048;
        v177 = v102;
        _os_log_impl(&dword_18F1DC000, v99, OS_LOG_TYPE_DEBUG, "grabing gravity, %.4f, %.4f, %.4f", buf, 0x20u);
      }
      if (sub_18F1FCA08(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
        v147 = *(_QWORD *)(a1 + 576);
        v148 = *(_QWORD *)(a1 + 584);
        v149 = *(double *)(a1 + 592);
        *(_DWORD *)v166 = 134218496;
        *(_QWORD *)&v166[4] = v147;
        *(_WORD *)&v166[12] = 2048;
        *(_QWORD *)&v166[14] = v148;
        *(_WORD *)&v166[22] = 2048;
        v167 = v149;
        v150 = (char *)_os_log_send_and_compose_impl();
        sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v150);
        if (v150 != buf)
          free(v150);
      }
    }
  }
  if (v161 <= *(double *)(a1 + 216) * 0.75)
    goto LABEL_190;
  v103 = *(double *)(a1 + 576);
  v104 = *(double *)(a1 + 584);
  v105 = *(double *)(a1 + 592);
  v106 = fabs(v188 * v104 + v187 * v103 + v189 * v105);
  v160 = v161 - v106;
  v107 = *(double *)(a1 + 336);
  v108 = *(double *)(a1 + 416);
  v109 = *(double *)(a1 + 496);
  v110 = v104 * v108 + v107 * v103 + v109 * v105;
  v155 = v107 - v110 * v103;
  v156 = v108 - v110 * v104;
  v157 = v109 - v110 * v105;
  v158 = v110;
  v159 = fabs(v157) + fabs(v155) + fabs(v156);
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
    v111 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219264;
      *(double *)&buf[4] = v187;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v188;
      *(_WORD *)&buf[22] = 2048;
      v177 = v189;
      v178 = 2048;
      v179 = v161;
      v180 = 2048;
      v181 = v106;
      v182 = 2048;
      v183 = v161 - v106;
      _os_log_impl(&dword_18F1DC000, v111, OS_LOG_TYPE_DEBUG, "std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f", buf, 0x3Eu);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      *(_DWORD *)v166 = 134219264;
      *(double *)&v166[4] = v187;
      *(_WORD *)&v166[12] = 2048;
      *(double *)&v166[14] = v188;
      *(_WORD *)&v166[22] = 2048;
      v167 = v189;
      v168 = 2048;
      v169 = v161;
      v170 = 2048;
      v171 = v106;
      v172 = 2048;
      v173 = v161 - v106;
      v151 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v151);
      if (v151 != buf)
        free(v151);
    }
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
    v112 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134219008;
      *(double *)&buf[4] = v155;
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = v156;
      *(_WORD *)&buf[22] = 2048;
      v177 = v157;
      v178 = 2048;
      v179 = v158;
      v180 = 2048;
      v181 = v159;
      _os_log_impl(&dword_18F1DC000, v112, OS_LOG_TYPE_DEBUG, "sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f", buf, 0x34u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      *(_DWORD *)v166 = 134219008;
      *(double *)&v166[4] = v155;
      *(_WORD *)&v166[12] = 2048;
      *(double *)&v166[14] = v156;
      *(_WORD *)&v166[22] = 2048;
      v167 = v157;
      v168 = 2048;
      v169 = v158;
      v170 = 2048;
      v171 = v159;
      v152 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v152);
      if (v152 != buf)
        free(v152);
    }
  }
  if (v160 > *(double *)(a1 + 216))
    goto LABEL_141;
  v113 = *(_QWORD *)(a1 + 296);
  if (v113)
    v114 = *(float *)(a1 + 248) / (float)v113;
  else
    v114 = 0.0;
  v133 = v114 <= 1.57079633;
  v134 = 0.0;
  if (!v133)
    v134 = 1.0;
  if (v159 > (v134 * 0.5 + 1.0) * 6.0)
  {
LABEL_141:
    *(_DWORD *)(a1 + 600) = 0;
    return;
  }
  if (v160 >= 0.01 || v159 >= 0.6)
  {
    v140 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v140;
    if (!v113)
      goto LABEL_180;
    v141 = (int *)(a1 + 600);
    v135 = *(float *)(a1 + 248) / (float)v113;
  }
  else
  {
    if (!v113)
    {
      v140 = *(_DWORD *)(a1 + 600) + 1;
      *(_DWORD *)(a1 + 600) = v140;
      goto LABEL_180;
    }
    v135 = *(float *)(a1 + 248) / (float)v113;
    if (v135 > 0.5)
    {
      if (!*(_BYTE *)(a1 + 196))
        goto LABEL_190;
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      v136 = off_1ECEDEE70;
      if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18F1DC000, v136, OS_LOG_TYPE_DEBUG, "===========Skip ahead.", buf, 2u);
      }
      if (!sub_18F1FCA08(115, 2))
        goto LABEL_190;
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 == -1)
        goto LABEL_125;
LABEL_222:
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
LABEL_125:
      *(_WORD *)v166 = 0;
      v116 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v116);
      if (v116 != buf)
        free(v116);
      goto LABEL_190;
    }
    v141 = (int *)(a1 + 600);
    v140 = *(_DWORD *)(a1 + 600) + 1;
    *(_DWORD *)(a1 + 600) = v140;
  }
  if (v135 > 1.0
    && *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 264) + (((v113 + *(_QWORD *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                + 4 * ((v113 + *(_QWORD *)(a1 + 288) - 1) & 0x3FF)) < 0.2)
  {
    sub_18F3D684C(a1 + 304, (uint64_t)buf);
    v142 = sqrt(*(double *)&buf[16] * *(double *)&buf[16] + *(double *)&buf[8] * *(double *)&buf[8] + v177 * v177);
    if (fabs(v142 + -1.0) / v142 >= 0.025)
    {
      v140 = *v141;
    }
    else
    {
      if (*(_BYTE *)(a1 + 196))
      {
        if (qword_1ECEDEE78 != -1)
          dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
        v143 = off_1ECEDEE70;
        if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18F1DC000, v143, OS_LOG_TYPE_DEBUG, "Skip ahead------.", buf, 2u);
        }
        if (sub_18F1FCA08(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1ECEDEE78 != -1)
            dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
          *(_WORD *)v166 = 0;
          v154 = (char *)_os_log_send_and_compose_impl();
          sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v154);
          if (v154 != buf)
            free(v154);
        }
      }
      v140 = *v141 + 2;
      *v141 = v140;
    }
  }
LABEL_180:
  if (v140 >= *(_DWORD *)(a1 + 208))
  {
LABEL_190:
    if (*(_BYTE *)(a1 + 224))
    {
      if (v161 > 0.2)
      {
        v145 = *(_QWORD *)(a1 + 296);
        if (!v145
          || *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 264)
                                  + (((v145 + *(_QWORD *)(a1 + 288) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v145 + *(_QWORD *)(a1 + 288) - 1) & 0x3FF)) < 0.75
          && (float)(*(float *)(a1 + 248) / (float)v145) < 1.0)
        {
          sub_18F3D684C(a1 + 304, (uint64_t)v166);
          v40 = *(double *)&v166[8];
          v41 = *(double *)&v166[16];
          v42 = v167;
          if (*(_BYTE *)(a1 + 196))
          {
            if (qword_1ECEDEE78 != -1)
              dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
            v146 = off_1ECEDEE70;
            if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_18F1DC000, v146, OS_LOG_TYPE_DEBUG, "using mean accel", buf, 2u);
            }
            if (sub_18F1FCA08(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1ECEDEE78 != -1)
                dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
              LOWORD(v186) = 0;
              v153 = (char *)_os_log_send_and_compose_impl();
              sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v153);
              if (v153 != buf)
                free(v153);
            }
          }
          v45 = sqrt(v41 * v41 + v40 * v40 + v42 * v42);
          v46 = fabs(v45 + -1.0) / v45;
        }
      }
    }
    goto LABEL_26;
  }
  if (*(_BYTE *)(a1 + 196))
  {
    if (qword_1ECEDEE78 != -1)
      dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
    v144 = off_1ECEDEE70;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE70, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18F1DC000, v144, OS_LOG_TYPE_DEBUG, "Taking another look.", buf, 2u);
    }
    if (sub_18F1FCA08(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1ECEDEE78 != -1)
        dispatch_once(&qword_1ECEDEE78, &unk_1E29533A8);
      *(_WORD *)v166 = 0;
      v87 = (char *)_os_log_send_and_compose_impl();
      sub_18F419700("Generic", 1, 0, 2, "virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)", "CoreLocation: %s\n", v87);
      goto LABEL_58;
    }
  }
}

double sub_18F20BFF8()
{
  return 0.0;
}

void sub_18F20C000(_QWORD *a1)
{
  sub_18F1EB0F0(a1);
  JUMPOUT(0x194001438);
}

double sub_18F20C024@<D0>(_QWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (qword_1ECEDF078 != -1)
    dispatch_once(&qword_1ECEDF078, &unk_1E2952F88);
  if (qword_1ECEDF070)
  {
    sub_18F1ED06C((const __CFString *)qword_1ECEDF070, (uint64_t)&v3);
    result = *(double *)&v3;
    *(_OWORD *)a1 = v3;
    a1[2] = v4;
  }
  return result;
}

void sub_18F20C0A0(uint64_t a1)
{
  sub_18F1E932C(a1);
  JUMPOUT(0x194001438);
}

void sub_18F20C0C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v9[7];
  int v10;

  v8 = sub_18F204AE4();
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_18F20741C;
  v9[3] = &unk_1E2956EB8;
  v10 = a2;
  v9[4] = a1;
  v9[5] = a3;
  v9[6] = a4;
  sub_18F1F5E28(v8, (uint64_t)v9);
}

CFTypeRef sub_18F20C140(uint64_t a1, const __CFString *a2)
{
  CFRunLoopRef Current;
  NSObject *v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  sub_18F204AE4();
  if (Current != *(CFRunLoopRef *)qword_1ECEDFE08)
  {
    if (qword_1ECEDEE98 != -1)
      dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    v6 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_DWORD *)(a1 + 16);
      v7 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v7;
      v21 = 1026;
      v22 = v8;
      v23 = 2082;
      v24 = "assert";
      v25 = 2081;
      v26 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"[CLIoHidInterface] copyProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v9 = off_1ECEDEE90;
    if (os_signpost_enabled((os_log_t)off_1ECEDEE90))
    {
      v11 = *(_DWORD *)(a1 + 16);
      v10 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v10;
      v21 = 1026;
      v22 = v11;
      v23 = 2082;
      v24 = "assert";
      v25 = 2081;
      v26 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "[CLIoHidInterface] copyProperty should be called from motion thread", "{\"msg%{public}.0s\":\"[CLIoHidInterface] copyProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
      if (qword_1ECEDEE98 != -1)
        dispatch_once(&qword_1ECEDEE98, &unk_1E2945248);
    }
    v12 = off_1ECEDEE90;
    if (os_log_type_enabled((os_log_t)off_1ECEDEE90, OS_LOG_TYPE_INFO))
    {
      v14 = *(_DWORD *)(a1 + 16);
      v13 = *(_DWORD *)(a1 + 20);
      *(_DWORD *)buf = 68290051;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      v19 = 1026;
      v20 = v13;
      v21 = 1026;
      v22 = v14;
      v23 = 2082;
      v24 = "assert";
      v25 = 2081;
      v26 = "CFRunLoopGetCurrent() == CLMotionCore::instance()->getMotionRunLoop()";
      _os_log_impl(&dword_18F1DC000, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[CLIoHidInterface] copyProperty should be called from motion thread\", \"usagePage\":%{public}d, \"usage\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x32u);
    }
    abort_report_np();
  }
  if (sub_18F1FBFFC((void *)a1))
    return IOHIDServiceClientCopyProperty(*(IOHIDServiceClientRef *)(a1 + 24), a2);
  else
    return 0;
}

BOOL sub_18F20C454(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t isDirectory;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 result;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  uint32_t v59;
  NSObject *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint8_t buf[4];
  int v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1E0C99E98];
  v8 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], a2, (uint64_t)a2, a4, a5);
  isDirectory = objc_msgSend_fileURLWithPath_isDirectory_(v7, v9, v8, 0, v10);
  v81 = 0;
  if (objc_msgSend_instancesRespondToSelector_(MEMORY[0x1E0C99D50], v12, (uint64_t)sel_dataWithContentsOfURL_options_error_, v13, v14))v18 = objc_msgSend_dataWithContentsOfURL_options_error_(MEMORY[0x1E0C99D50], v15, isDirectory, 0, (uint64_t)&v81);
  else
    v18 = objc_msgSend_dataWithContentsOfURL_(MEMORY[0x1E0C99D50], v15, isDirectory, v16, v17);
  if (!v18)
  {
    if (!v81)
      return 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 872))(a1, 0);
    v24 = (void *)objc_msgSend_domain(v81, v20, v21, v22, v23);
    if (objc_msgSend_isEqual_(v24, v25, *MEMORY[0x1E0CB28A8], v26, v27)
      && objc_msgSend_code(v81, v28, v29, v30, v31) == 260)
    {
      if (qword_1EE16D3E0 != -1)
        dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
      v32 = qword_1EE16D3D0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D3D0, OS_LOG_TYPE_ERROR))
      {
        v37 = (void *)objc_msgSend_description(v81, v33, v34, v35, v36);
        v42 = objc_msgSend_UTF8String(v37, v38, v39, v40, v41);
        *(_DWORD *)buf = 68289538;
        v83 = 0;
        v84 = 2082;
        v85 = "";
        v86 = 2082;
        v87 = a2;
        v88 = 2082;
        v89 = v42;
        _os_log_impl(&dword_18F1DC000, v32, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1EE16D3E0 != -1)
          dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
      }
      v43 = qword_1EE16D3D0;
      result = os_signpost_enabled((os_log_t)qword_1EE16D3D0);
      if (!result)
        return result;
      v48 = (void *)objc_msgSend_description(v81, v44, v45, v46, v47);
      v53 = objc_msgSend_UTF8String(v48, v49, v50, v51, v52);
      *(_DWORD *)buf = 68289538;
      v83 = 0;
      v84 = 2082;
      v85 = "";
      v86 = 2082;
      v87 = a2;
      v88 = 2082;
      v89 = v53;
      v54 = "file does not exist... clearing";
      v55 = "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error"
            "\":%{public, location:escape_only}s}";
    }
    else
    {
      if (qword_1EE16D3E0 != -1)
        dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
      v60 = qword_1EE16D3D0;
      if (os_log_type_enabled((os_log_t)qword_1EE16D3D0, OS_LOG_TYPE_ERROR))
      {
        v65 = (void *)objc_msgSend_description(v81, v61, v62, v63, v64);
        v70 = objc_msgSend_UTF8String(v65, v66, v67, v68, v69);
        *(_DWORD *)buf = 68289538;
        v83 = 0;
        v84 = 2082;
        v85 = "";
        v86 = 2082;
        v87 = a2;
        v88 = 2082;
        v89 = v70;
        _os_log_impl(&dword_18F1DC000, v60, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1EE16D3E0 != -1)
          dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
      }
      v43 = qword_1EE16D3D0;
      result = os_signpost_enabled((os_log_t)qword_1EE16D3D0);
      if (!result)
        return result;
      v75 = (void *)objc_msgSend_description(v81, v71, v72, v73, v74);
      v80 = objc_msgSend_UTF8String(v75, v76, v77, v78, v79);
      *(_DWORD *)buf = 68289538;
      v83 = 0;
      v84 = 2082;
      v85 = "";
      v86 = 2082;
      v87 = a2;
      v88 = 2082;
      v89 = v80;
      v54 = "#Warning Error reading file";
      v55 = "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%"
            "{public, location:escape_only}s}";
    }
    v58 = v43;
    v59 = 38;
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 784))(a1, v18) & 1) != 0)
    return 1;
  if (qword_1EE16D3E0 != -1)
    dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
  v56 = qword_1EE16D3D0;
  if (os_log_type_enabled((os_log_t)qword_1EE16D3D0, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289282;
    v83 = 0;
    v84 = 2082;
    v85 = "";
    v86 = 2082;
    v87 = a2;
    _os_log_impl(&dword_18F1DC000, v56, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1EE16D3E0 != -1)
      dispatch_once(&qword_1EE16D3E0, &unk_1E2955148);
  }
  v57 = qword_1EE16D3D0;
  result = os_signpost_enabled((os_log_t)qword_1EE16D3D0);
  if (result)
  {
    *(_DWORD *)buf = 68289282;
    v83 = 0;
    v84 = 2082;
    v85 = "";
    v86 = 2082;
    v87 = a2;
    v54 = "could not deserialize property list";
    v55 = "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}";
    v58 = v57;
    v59 = 28;
LABEL_32:
    _os_signpost_emit_with_name_impl(&dword_18F1DC000, v58, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v54, v55, buf, v59);
    return 0;
  }
  return result;
}

void sub_18F20C92C(uint64_t a1)
{
  dispatch_once_t *v2;
  _QWORD block[5];

  if (!*(_BYTE *)(a1 + 32))
  {
    v2 = *(dispatch_once_t **)(a1 + 24);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F207AA8;
    block[3] = &unk_1E2955738;
    block[4] = a1;
    if (*v2 != -1)
      dispatch_once(v2, block);
    *(_BYTE *)(a1 + 32) = 1;
  }
}

uint64_t sub_18F20C9AC()
{
  if (qword_1ECEDEFD0 != -1)
    dispatch_once(&qword_1ECEDEFD0, &unk_1E2955FC0);
  return byte_1ECEDEF53;
}

uint64_t sub_18F20C9EC()
{
  if (qword_1ECEDEFD0 != -1)
    dispatch_once(&qword_1ECEDEFD0, &unk_1E2955FC0);
  if ((byte_1ECEDEF53 & 1) != 0)
    return 1;
  if (qword_1ECEDEFB8 != -1)
    dispatch_once(&qword_1ECEDEFB8, &unk_1E2955F60);
  return byte_1ECEDEF50;
}

uint64_t sub_18F20CA68()
{
  if (qword_1ECEDF8B0 != -1)
    dispatch_once(&qword_1ECEDF8B0, &unk_1E2956ED8);
  return qword_1ECEDF8A8;
}

uint64_t sub_18F20CAA8()
{
  _QWORD *v0;
  uint64_t result;

  v0 = (_QWORD *)operator new();
  result = sub_18F1E61EC((uint64_t)v0, (uint64_t)"CLCoverState", 1);
  v0[4] = 0;
  v0[5] = 0;
  *v0 = &off_1E294A900;
  qword_1EE16E900 = (uint64_t)v0;
  return result;
}

void sub_18F20CB08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x194001438](v1, 0x10F1C40BE01E9BALL);
  _Unwind_Resume(a1);
}

void sub_18F20CB2C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t *v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _DWORD v18[2];
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  if (!a2)
  {
    v21 = v3;
    v22 = v4;
    v8 = (uint64_t *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      if (a3)
      {
LABEL_4:
        v9 = sub_18F45DE2C;
        v10 = a1;
LABEL_18:
        sub_18F203148(v7, (uint64_t)v9, v10);
        return;
      }
    }
    else
    {
      sub_18F1F77DC();
      v11 = sub_18F20C9AC();
      if (v11)
        v12 = 41;
      else
        v12 = 1;
      if (v11)
        v13 = 65280;
      else
        v13 = 11;
      v14 = (_QWORD *)sub_18F1E0F30();
      v18[0] = v13;
      v18[1] = v12;
      v19 = 0;
      sub_18F1E9BC8(v14, (uint64_t)v18, (uint64_t *)&v20);
      sub_18F346DC8((uint64_t)v8, &v20);
      v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
      if (*((_QWORD *)&v20 + 1))
      {
        v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v7 = *v8;
      if (a3)
        goto LABEL_4;
    }
    v9 = 0;
    v10 = 0;
    goto LABEL_18;
  }
}

char *sub_18F20CC1C(char *a1, const __CFString *a2, char a3)
{
  uint64_t v4;

  v4 = sub_18F1EC720((uint64_t)a1, a2, a3, 0x1E295B508);
  *(_QWORD *)v4 = &off_1E2949268;
  if (*(_BYTE *)(v4 + 16))
    sub_18F387D1C(a1, 1);
  return a1;
}

void sub_18F20CC68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_18F387C84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F20CC7C(uint64_t a1, char *a2, void *a3)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = off_1E2949148;
  sub_18F270374((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend_silo(a3, v5, v6, v7, v8);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_18F20CCF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_18F20CD14(uint64_t a1)
{
  uint64_t v2;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = sub_18F1EA294(a1);
  *(_QWORD *)v2 = &off_1E2948FE8;
  *(_DWORD *)(v2 + 132) = 0;
  *(_BYTE *)(v2 + 136) = 1;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 169) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = xmmword_18F504210;
  *(_BYTE *)(v2 + 272) = 0;
  *(_QWORD *)(v2 + 284) = 0;
  *(_QWORD *)(v2 + 276) = 0;
  *(_DWORD *)(v2 + 292) = 0;
  if ((sub_18F1F7BFC() & 0x10) == 0)
  {
    if (qword_1EE16D698 != -1)
      dispatch_once(&qword_1EE16D698, &unk_1E2953EE8);
    v4 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "assert";
      v13 = 2081;
      v14 = "CLPlatformInfo::motionCaps().deviceMotionService";
      _os_log_impl(&dword_18F1DC000, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953EE8);
    }
    v5 = qword_1EE16D690;
    if (os_signpost_enabled((os_log_t)qword_1EE16D690))
    {
      *(_DWORD *)buf = 68289539;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "assert";
      v13 = 2081;
      v14 = "CLPlatformInfo::motionCaps().deviceMotionService";
      _os_signpost_emit_with_name_impl(&dword_18F1DC000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLCompass7 requires deviceMotionService", "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1EE16D698 != -1)
        dispatch_once(&qword_1EE16D698, &unk_1E2953EE8);
    }
    v6 = qword_1EE16D690;
    if (os_log_type_enabled((os_log_t)qword_1EE16D690, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = "assert";
      v13 = 2081;
      v14 = "CLPlatformInfo::motionCaps().deviceMotionService";
      _os_log_impl(&dword_18F1DC000, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLCompass7 requires deviceMotionService\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  return a1;
}

void sub_18F20D00C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v1 + 288) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_18F2A8438(v1 + 168);
  sub_18F2A8438(v1 + 152);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_18F460AF0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F20D06C(uint64_t result, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v4 = sqrt(*a3 * *a3 + *a2 * *a2 + *a4 * *a4);
  v5 = -*a3 / v4;
  *(double *)result = v5;
  v6 = *a2 / v4;
  *(double *)(result + 8) = v6;
  *(_QWORD *)(result + 16) = 0;
  v7 = sqrt((1.0 - *a4 / v4) * 0.5);
  *(double *)(result + 24) = v7;
  v8 = v6 * v6 + v5 * v5;
  if (v8 <= 0.000001)
  {
    if (*a4 <= 0.0)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0x3FF0000000000000;
    }
    else
    {
      *(_QWORD *)result = 0x3FF0000000000000;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = 0;
    }
  }
  else
  {
    v9 = sqrt((1.0 - v7 * v7) / v8);
    *(double *)result = v5 * v9;
    *(float64x2_t *)(result + 8) = vmulq_n_f64((float64x2_t)*(unint64_t *)&v6, v9);
  }
  return result;
}

void sub_18F20E56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CMOdometerData.slope.getter()
{
  return sub_18F20E958((SEL *)&selRef_slope);
}

id CMOdometerData.maxAbsSlope.getter()
{
  return sub_18F20E958((SEL *)&selRef_maxAbsSlope);
}

id sub_18F20E958(SEL *a1)
{
  void *v1;
  id result;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(v1, *a1);
  v3 = result;
  if (result)
  {
    objc_msgSend(result, sel_doubleValue);
    v5 = v4;

    return (id)v5;
  }
  return result;
}

uint64_t sub_18F20E9B8()
{
  uint64_t v0;

  v0 = sub_18F4F09E8();
  sub_18F210AE0(v0, qword_1EE16E488);
  sub_18F20FF80(v0, (uint64_t)qword_1EE16E488);
  return sub_18F4F09DC();
}

uint64_t sub_18F20EA38(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x194002194]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t CMBatchedSensorManager.AccelerometerUpdates.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_18F20EA38(&qword_1EE16D700);
  *v1 = v0;
  v1[1] = sub_18F20EAE4;
  return sub_18F4F0A54();
}

uint64_t sub_18F20EAE4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18F20EB48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  sub_18F20EA38(&qword_1EE16D700);
  *v2 = v1;
  v2[1] = sub_18F20EBB8;
  return sub_18F4F0A54();
}

uint64_t sub_18F20EBB8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18F20EC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[8] = v5;
  sub_18F20EA38(&qword_1EE16D700);
  *v5 = v4;
  v5[1] = sub_18F20EC90;
  return sub_18F4F0A54();
}

uint64_t sub_18F20EC90()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18F20ECF4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    sub_18F4F0A18();
  }
  return swift_task_switch();
}

uint64_t sub_18F20ED5C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_getObjectType();
    sub_18F4F0A18();
  }
  return swift_task_switch();
}

uint64_t CMBatchedSensorManager.AccelerometerUpdates.makeAsyncIterator()()
{
  sub_18F20EA38(&qword_1EE16D710);
  return sub_18F4F0A48();
}

uint64_t sub_18F20EDE8(uint64_t a1, uint64_t a2)
{
  return sub_18F20F490(a1, a2, &qword_1EE16D710, type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates);
}

uint64_t CMBatchedSensorManager.accelerometerUpdates()()
{
  return sub_18F20F4F0(&qword_1EE16D718, &qword_1EE16D720);
}

void sub_18F20EE18(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v4 = sub_18F20EA38(&qword_1EE16D7D0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78]();
  *(_QWORD *)(swift_allocObject() + 16) = a2;
  v7 = a2;
  sub_18F4F0A24();
  if (qword_1EE16E480 != -1)
    swift_once();
  v8 = sub_18F4F09E8();
  sub_18F20FF80(v8, (uint64_t)qword_1EE16E488);
  v9 = sub_18F4F09D0();
  v10 = sub_18F4F0A84();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_18F1DC000, v9, v10, "[framework-accel-async] starting updates", v11, 2u);
    MEMORY[0x194002200](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_18F210C80;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18F20F040;
  aBlock[3] = &unk_1E29555A0;
  v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_startAccelerometerUpdatesWithHandler_, v14);
  _Block_release(v14);
}

void sub_18F20F038(uint64_t a1)
{
  uint64_t v1;

  sub_18F20EE18(a1, *(void **)(v1 + 16));
}

uint64_t sub_18F20F040(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_18F2103A4(a1, a2, a3, &qword_1EE16D7D8);
}

uint64_t CMBatchedSensorManager.DeviceMotionUpdates.Iterator.next()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 24) = v1;
  sub_18F20EA38(&qword_1EE16D728);
  *v1 = v0;
  v1[1] = sub_18F20F0C0;
  return sub_18F4F0A54();
}

uint64_t sub_18F20F0C0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18F20F124()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_18F20F130()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18F20F13C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 32) = v2;
  sub_18F20EA38(&qword_1EE16D728);
  *v2 = v1;
  v2[1] = sub_18F20F1AC;
  return sub_18F4F0A54();
}

uint64_t sub_18F20F1AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18F20F210()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18F20F224()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18F20F230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[8] = v5;
  sub_18F20EA38(&qword_1EE16D728);
  *v5 = v4;
  v5[1] = sub_18F20F2A4;
  return sub_18F4F0A54();
}

uint64_t sub_18F20F2A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_18F20F308()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[10] = v0[2];
  if (v1)
  {
    swift_getObjectType();
    sub_18F4F0A18();
  }
  return swift_task_switch();
}

uint64_t sub_18F20F370()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 32) = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_18F20F388()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
  {
    swift_getObjectType();
    sub_18F4F0A18();
  }
  return swift_task_switch();
}

uint64_t sub_18F20F3E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD **)(v0 + 56);
  *(_QWORD *)(v0 + 24) = v1;
  sub_18F20EA38(&qword_1EE16D788);
  swift_willThrowTypedImpl();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t CMBatchedSensorManager.DeviceMotionUpdates.makeAsyncIterator()()
{
  sub_18F20EA38(&qword_1EE16D738);
  return sub_18F4F0A48();
}

uint64_t sub_18F20F47C(uint64_t a1, uint64_t a2)
{
  return sub_18F20F490(a1, a2, &qword_1EE16D738, type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates);
}

uint64_t sub_18F20F490(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  sub_18F20EA38(a3);
  sub_18F4F0A48();
  return sub_18F20FF0C(v4, a4);
}

uint64_t CMBatchedSensorManager.deviceMotionUpdates()()
{
  return sub_18F20F4F0(&qword_1EE16D740, qword_1EE16D748);
}

uint64_t sub_18F20F4F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];
  uint64_t v10;

  v4 = sub_18F20EA38(a1);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v2;
  sub_18F20EA38(a2);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DF0A50], v4);
  return sub_18F4F0A60();
}

void sub_18F20F5B0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v4 = sub_18F20EA38(&qword_1EE16D7A8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78]();
  *(_QWORD *)(swift_allocObject() + 16) = a2;
  v7 = a2;
  sub_18F4F0A24();
  if (qword_1EE16E480 != -1)
    swift_once();
  v8 = sub_18F4F09E8();
  sub_18F20FF80(v8, (uint64_t)qword_1EE16E488);
  v9 = sub_18F4F09D0();
  v10 = sub_18F4F0A84();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_18F1DC000, v9, v10, "[framework-dm-async] starting updates", v11, 2u);
    MEMORY[0x194002200](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v12, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_18F21036C;
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_18F210390;
  aBlock[3] = &unk_1E29450A0;
  v14 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v7, sel_startDeviceMotionUpdatesWithHandler_, v14);
  _Block_release(v14);
}

void sub_18F20F7D0(uint64_t a1)
{
  uint64_t v1;

  sub_18F20F5B0(a1, *(void **)(v1 + 16));
}

uint64_t sub_18F20F7D8()
{
  return MEMORY[0x1E0DEDB38];
}

uint64_t sub_18F20F7E4()
{
  return sub_18F20F850(qword_1EE16D760, type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates.Iterator, (uint64_t)&protocol conformance descriptor for CMBatchedSensorManager.AccelerometerUpdates.Iterator);
}

uint64_t type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates.Iterator(uint64_t a1)
{
  return sub_18F20FBC0(a1, (uint64_t *)&unk_1EE16E6B0);
}

uint64_t sub_18F20F824()
{
  return sub_18F20F850(&qword_1EE16D778, type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates.Iterator, (uint64_t)&protocol conformance descriptor for CMBatchedSensorManager.DeviceMotionUpdates.Iterator);
}

uint64_t sub_18F20F850(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1940021AC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates.Iterator(uint64_t a1)
{
  return sub_18F20FBC0(a1, (uint64_t *)&unk_1EE16E6D0);
}

uint64_t _s20AccelerometerUpdatesVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18F20EA38(&qword_1EE16D710);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s20AccelerometerUpdatesVwxx(uint64_t a1, uint64_t a2)
{
  return sub_18F20FC5C(a1, a2, &qword_1EE16D710);
}

uint64_t _s20AccelerometerUpdatesVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FC9C(a1, a2, a3, &qword_1EE16D710);
}

uint64_t _s20AccelerometerUpdatesVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FCEC(a1, a2, a3, &qword_1EE16D710);
}

uint64_t _s20AccelerometerUpdatesVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD3C(a1, a2, a3, &qword_1EE16D710);
}

uint64_t _s20AccelerometerUpdatesVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD8C(a1, a2, a3, &qword_1EE16D710);
}

uint64_t _s20AccelerometerUpdatesVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20F92C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FDE8(a1, a2, a3, &qword_1EE16D710);
}

uint64_t _s20AccelerometerUpdatesVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20F944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18F20FE3C(a1, a2, a3, a4, &qword_1EE16D710);
}

uint64_t type metadata accessor for CMBatchedSensorManager.AccelerometerUpdates(uint64_t a1)
{
  return sub_18F20FBC0(a1, (uint64_t *)&unk_1EE16E6A0);
}

void sub_18F20F964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18F20FA8C(a1, a2, a3, &qword_1EE16D780, &qword_1EE16D720, MEMORY[0x1E0DF0AD0]);
}

uint64_t sub_18F20F980(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1940021A0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18F20EA38(&qword_1EE16D700);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwxx(uint64_t a1, uint64_t a2)
{
  return sub_18F20FC5C(a1, a2, &qword_1EE16D700);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FC9C(a1, a2, a3, &qword_1EE16D700);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FCEC(a1, a2, a3, &qword_1EE16D700);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD3C(a1, a2, a3, &qword_1EE16D700);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD8C(a1, a2, a3, &qword_1EE16D700);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20FA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FDE8(a1, a2, a3, &qword_1EE16D700);
}

uint64_t _s20AccelerometerUpdatesV8IteratorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20FA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18F20FE3C(a1, a2, a3, a4, &qword_1EE16D700);
}

void sub_18F20FA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18F20FA8C(a1, a2, a3, &qword_1EE16D790, &qword_1EE16D720, MEMORY[0x1E0DF0AB0]);
}

void sub_18F20FA8C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  unint64_t v6;

  sub_18F20FE98(319, a4, a5, a6);
  if (v6 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t _s19DeviceMotionUpdatesVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18F20EA38(&qword_1EE16D738);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s19DeviceMotionUpdatesVwxx(uint64_t a1, uint64_t a2)
{
  return sub_18F20FC5C(a1, a2, &qword_1EE16D738);
}

uint64_t _s19DeviceMotionUpdatesVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FC9C(a1, a2, a3, &qword_1EE16D738);
}

uint64_t _s19DeviceMotionUpdatesVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FCEC(a1, a2, a3, &qword_1EE16D738);
}

uint64_t _s19DeviceMotionUpdatesVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD3C(a1, a2, a3, &qword_1EE16D738);
}

uint64_t _s19DeviceMotionUpdatesVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD8C(a1, a2, a3, &qword_1EE16D738);
}

uint64_t _s19DeviceMotionUpdatesVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20FB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FDE8(a1, a2, a3, &qword_1EE16D738);
}

uint64_t _s19DeviceMotionUpdatesVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20FBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18F20FE3C(a1, a2, a3, a4, &qword_1EE16D738);
}

uint64_t type metadata accessor for CMBatchedSensorManager.DeviceMotionUpdates(uint64_t a1)
{
  return sub_18F20FBC0(a1, (uint64_t *)&unk_1EE16E6C0);
}

uint64_t sub_18F20FBC0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void sub_18F20FBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18F20FA8C(a1, a2, a3, &qword_1EE16D798, qword_1EE16D748, MEMORY[0x1E0DF0AD0]);
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_18F20EA38(&qword_1EE16D728);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwxx(uint64_t a1, uint64_t a2)
{
  return sub_18F20FC5C(a1, a2, &qword_1EE16D728);
}

uint64_t sub_18F20FC5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;

  v4 = sub_18F20EA38(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FC9C(a1, a2, a3, &qword_1EE16D728);
}

uint64_t sub_18F20FC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = sub_18F20EA38(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FCEC(a1, a2, a3, &qword_1EE16D728);
}

uint64_t sub_18F20FCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = sub_18F20EA38(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD3C(a1, a2, a3, &qword_1EE16D728);
}

uint64_t sub_18F20FD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = sub_18F20EA38(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FD8C(a1, a2, a3, &qword_1EE16D728);
}

uint64_t sub_18F20FD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = sub_18F20EA38(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  return a1;
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20FDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_18F20FDE8(a1, a2, a3, &qword_1EE16D728);
}

uint64_t sub_18F20FDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = sub_18F20EA38(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t _s19DeviceMotionUpdatesV8IteratorVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_18F20FE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_18F20FE3C(a1, a2, a3, a4, &qword_1EE16D728);
}

uint64_t sub_18F20FE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = sub_18F20EA38(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

void sub_18F20FE7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18F20FA8C(a1, a2, a3, &qword_1EE16D7A0, qword_1EE16D748, MEMORY[0x1E0DF0AB0]);
}

void sub_18F20FE98(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v7 = sub_18F20F980(a3);
    v8 = sub_18F20F980(&qword_1EE16D788);
    v9 = a4(a1, v7, v8, MEMORY[0x1E0DEDB38]);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_18F20FF0C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_18F20FF48()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_18F20FF6C(uint64_t a1)
{
  return sub_18F210B34(a1, "[framework-dm-async] terminating", (SEL *)&selRef_stopDeviceMotionUpdates);
}

uint64_t sub_18F20FF80(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_18F20FF98(unint64_t a1, void *a2, uint64_t a3, uint64_t *a4, const char *a5, uint64_t *a6, const char *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  os_log_type_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;

  v12 = sub_18F20EA38(a4);
  v13 = *(_QWORD *)(v12 - 8);
  result = MEMORY[0x1E0C80A78]();
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (qword_1EE16E480 != -1)
      swift_once();
    v17 = sub_18F4F09E8();
    sub_18F20FF80(v17, (uint64_t)qword_1EE16E488);
    v18 = sub_18F4F0A6C();
    swift_bridgeObjectRetain_n();
    v19 = sub_18F4F09D0();
    if (os_log_type_enabled(v19, v18))
    {
      v35 = a6;
      v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v20 = 134217984;
      if (a1 >> 62)
      {
        swift_bridgeObjectRetain();
        v21 = sub_18F4F0ACC();
        swift_bridgeObjectRelease();
      }
      else
      {
        v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v37 = v21;
      sub_18F4F0A90();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_18F1DC000, v19, v18, a5, v20, 0xCu);
      MEMORY[0x194002200](v20, -1, -1);

      a6 = v35;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v37 = a1;
    swift_bridgeObjectRetain();
    sub_18F20EA38(a6);
    sub_18F4F0A30();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else if (a2)
  {
    if (qword_1EE16E480 != -1)
      swift_once();
    v22 = sub_18F4F09E8();
    sub_18F20FF80(v22, (uint64_t)qword_1EE16E488);
    v23 = sub_18F4F0A78();
    v24 = a2;
    v25 = a2;
    v26 = sub_18F4F09D0();
    v27 = v23;
    if (os_log_type_enabled(v26, v23))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v36 = (uint64_t)a2;
      v37 = v29;
      *(_DWORD *)v28 = 136315138;
      v35 = (uint64_t *)(v28 + 4);
      v30 = a2;
      sub_18F20EA38(&qword_1EE16D7C0);
      v31 = sub_18F4F09F4();
      v36 = sub_18F210440(v31, v32, (uint64_t *)&v37);
      sub_18F4F0A90();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_18F1DC000, v26, v27, a7, v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x194002200](v29, -1, -1);
      MEMORY[0x194002200](v28, -1, -1);
    }
    else
    {

    }
    v37 = (unint64_t)a2;
    v33 = a2;
    sub_18F20EA38(a6);
    return sub_18F4F0A3C();
  }
  return result;
}

uint64_t sub_18F210360()
{
  return sub_18F210C24(&qword_1EE16D7A8);
}

uint64_t sub_18F21036C(unint64_t a1, void *a2)
{
  return sub_18F210CA4(a1, a2, &qword_1EE16D7A8, &qword_1EE16D7B8, "[framework-dm-async] yielding new update %ld", "[framework-dm-async] terminating with error %s");
}

uint64_t sub_18F210390(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_18F2103A4(a1, a2, a3, &qword_1EE16D7B0);
}

uint64_t sub_18F2103A4(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v5 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_18F210D24(0, a4);
    v5 = sub_18F4F0A0C();
  }
  swift_retain();
  v7 = a3;
  v6(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_18F210428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_18F210438()
{
  return swift_release();
}

uint64_t sub_18F210440(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_18F210510(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_18F2106E8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_18F2106E8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_18F2106C8((uint64_t)v12);
  return v7;
}

uint64_t sub_18F210510(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_18F4F0A9C();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_18F210724(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_18F4F0AB4();
  if (!v8)
  {
    sub_18F4F0AC0();
    __break(1u);
LABEL_17:
    result = sub_18F4F0AD8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_18F2106C8(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_18F2106E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_18F210724(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_18F2107B8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_18F210990(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_18F210990(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_18F2107B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_18F21092C(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_18F4F0AA8();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_18F4F0AC0();
      __break(1u);
LABEL_10:
      v2 = sub_18F4F0A00();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_18F4F0AD8();
    __break(1u);
LABEL_14:
    result = sub_18F4F0AC0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_18F21092C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_18F20EA38(&qword_1EE16D7C8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_18F210990(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_18F20EA38(&qword_1EE16D7C8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_18F4F0AD8();
  __break(1u);
  return result;
}

uint64_t *sub_18F210AE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id sub_18F210B20(uint64_t a1)
{
  return sub_18F210B34(a1, "[framework-accel-async] terminating", (SEL *)&selRef_stopAccelerometerUpdates);
}

id sub_18F210B34(uint64_t a1, const char *a2, SEL *a3)
{
  uint64_t v3;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v6 = *(void **)(v3 + 16);
  if (qword_1EE16E480 != -1)
    swift_once();
  v7 = sub_18F4F09E8();
  sub_18F20FF80(v7, (uint64_t)qword_1EE16E488);
  v8 = sub_18F4F09D0();
  v9 = sub_18F4F0A84();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_18F1DC000, v8, v9, a2, v10, 2u);
    MEMORY[0x194002200](v10, -1, -1);
  }

  return objc_msgSend(v6, *a3);
}

uint64_t sub_18F210C18()
{
  return sub_18F210C24(&qword_1EE16D7D0);
}

uint64_t sub_18F210C24(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_18F20EA38(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t sub_18F210C80(unint64_t a1, void *a2)
{
  return sub_18F210CA4(a1, a2, &qword_1EE16D7D0, &qword_1EE16D7E0, "[framework-accel-async] yielding new update %ld", "[framework-accel-async] terminating with error %s");
}

uint64_t sub_18F210CA4(unint64_t a1, void *a2, uint64_t *a3, uint64_t *a4, const char *a5, const char *a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = *(unsigned __int8 *)(*(_QWORD *)(sub_18F20EA38(a3) - 8) + 80);
  return sub_18F20FF98(a1, a2, v6 + ((v13 + 16) & ~v13), a4, a5, a3, a6);
}

uint64_t sub_18F210D24(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_18F210D80(uint64_t result)
{
  *(_DWORD *)result = 2147450879;
  *(_WORD *)(result + 4) = 0x7FFF;
  *(_DWORD *)(result + 6) = 2147450879;
  *(_WORD *)(result + 10) = 0x7FFF;
  *(_DWORD *)(result + 12) = 2147450879;
  *(_WORD *)(result + 16) = 0x7FFF;
  *(_DWORD *)(result + 18) = 2147450879;
  *(_WORD *)(result + 22) = 0x7FFF;
  *(_WORD *)(result + 28) = 0x7FFF;
  *(_DWORD *)(result + 24) = 2147450879;
  *(_WORD *)(result + 34) = 0x7FFF;
  *(_DWORD *)(result + 30) = 2147450879;
  *(_WORD *)(result + 40) = 0x7FFF;
  *(_DWORD *)(result + 36) = 2147450879;
  *(_WORD *)(result + 46) = 0x7FFF;
  *(_DWORD *)(result + 42) = 2147450879;
  *(_WORD *)(result + 52) = 0x7FFF;
  *(_DWORD *)(result + 48) = 2147450879;
  *(_WORD *)(result + 58) = 0x7FFF;
  *(_DWORD *)(result + 54) = 2147450879;
  *(_WORD *)(result + 64) = 0x7FFF;
  *(_DWORD *)(result + 60) = 2147450879;
  *(_WORD *)(result + 70) = 0x7FFF;
  *(_DWORD *)(result + 66) = 2147450879;
  *(_WORD *)(result + 76) = 0x7FFF;
  *(_DWORD *)(result + 72) = 2147450879;
  *(_WORD *)(result + 82) = 0x7FFF;
  *(_DWORD *)(result + 78) = 2147450879;
  *(_WORD *)(result + 88) = 0x7FFF;
  *(_DWORD *)(result + 84) = 2147450879;
  *(_WORD *)(result + 94) = 0x7FFF;
  *(_DWORD *)(result + 90) = 2147450879;
  *(_WORD *)(result + 100) = 0x7FFF;
  *(_DWORD *)(result + 96) = 2147450879;
  *(_WORD *)(result + 106) = 0x7FFF;
  *(_DWORD *)(result + 102) = 2147450879;
  *(_WORD *)(result + 112) = 0x7FFF;
  *(_DWORD *)(result + 108) = 2147450879;
  *(_WORD *)(result + 118) = 0x7FFF;
  *(_DWORD *)(result + 114) = 2147450879;
  *(_WORD *)(result + 124) = 0x7FFF;
  *(_DWORD *)(result + 120) = 2147450879;
  *(_WORD *)(result + 130) = 0x7FFF;
  *(_DWORD *)(result + 126) = 2147450879;
  *(_WORD *)(result + 136) = 0x7FFF;
  *(_DWORD *)(result + 132) = 2147450879;
  *(_WORD *)(result + 142) = 0x7FFF;
  *(_DWORD *)(result + 138) = 2147450879;
  *(_WORD *)(result + 148) = 0x7FFF;
  *(_DWORD *)(result + 144) = 2147450879;
  *(_WORD *)(result + 154) = 0x7FFF;
  *(_DWORD *)(result + 150) = 2147450879;
  *(_WORD *)(result + 160) = 0x7FFF;
  *(_DWORD *)(result + 156) = 2147450879;
  *(_WORD *)(result + 166) = 0x7FFF;
  *(_DWORD *)(result + 162) = 2147450879;
  *(_WORD *)(result + 172) = 0x7FFF;
  *(_DWORD *)(result + 168) = 2147450879;
  *(_WORD *)(result + 178) = 0x7FFF;
  *(_DWORD *)(result + 174) = 2147450879;
  *(_WORD *)(result + 184) = 0x7FFF;
  *(_DWORD *)(result + 180) = 2147450879;
  *(_WORD *)(result + 190) = 0x7FFF;
  *(_DWORD *)(result + 186) = 2147450879;
  return result;
}

uint64_t sub_18F210E94(__int16 a1, __int16 a2, __int16 a3, uint64_t a4, _WORD *a5)
{
  _WORD v6[3];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = a3;
  *a5 = 1;
  sub_18F2131D4((uint64_t)v6, 32, 1, a4);
  return 1;
}

uint64_t sub_18F210ED4(int a1, int a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v2 = 2 * a1;
  v3 = v2 >= a2;
  if (v2 >= a2)
    v4 = a2;
  else
    v4 = 0;
  v5 = 2 * (v2 - v4);
  v6 = v5 >= a2;
  if (v5 < a2)
    v7 = 0;
  else
    v7 = a2;
  v8 = 2 * (v5 - v7);
  v9 = v8 >= a2;
  if (v8 >= a2)
    v10 = a2;
  else
    v10 = 0;
  v11 = 2 * (v8 - v10);
  v12 = (4 * v6) | (8 * v3) | (2 * v9) | (v11 >= a2);
  if (v11 < a2)
    v13 = 0;
  else
    v13 = a2;
  v14 = 2 * (v11 - v13);
  v15 = v14 >= a2;
  if (v14 >= a2)
    v16 = a2;
  else
    v16 = 0;
  v17 = 2 * (v14 - v16);
  v18 = (2 * v15) | (4 * v12) | (v17 >= a2);
  if (v17 < a2)
    v19 = 0;
  else
    v19 = a2;
  v20 = 2 * (v17 - v19);
  v21 = v20 >= a2;
  if (v20 >= a2)
    v22 = a2;
  else
    v22 = 0;
  v23 = 2 * (v20 - v22);
  v24 = (2 * v21) | (4 * v18) | (v23 >= a2);
  if (v23 < a2)
    v25 = 0;
  else
    v25 = a2;
  v26 = 2 * (v23 - v25);
  v27 = v26 >= a2;
  if (v26 >= a2)
    v28 = a2;
  else
    v28 = 0;
  v29 = 2 * (v26 - v28);
  v30 = (2 * v27) | (4 * v24) | (v29 >= a2);
  if (v29 < a2)
    v31 = 0;
  else
    v31 = a2;
  v32 = 2 * (v29 - v31);
  v33 = v32 >= a2;
  if (v32 >= a2)
    v34 = a2;
  else
    v34 = 0;
  v35 = 2 * (v32 - v34);
  v36 = (2 * v33) | (4 * v30) | (v35 >= a2);
  if (v35 < a2)
    v37 = 0;
  else
    v37 = a2;
  v38 = 2 * (v35 - v37);
  v39 = v38 >= a2;
  if (v38 >= a2)
    v40 = a2;
  else
    v40 = 0;
  v41 = 2 * (v38 - v40);
  v42 = (2 * v39) | (4 * v36) | (v41 >= a2);
  if (v41 < a2)
    v43 = 0;
  else
    v43 = a2;
  return (__int16)((a2 <= 2 * (v41 - v43)) | (unsigned __int16)(2 * v42));
}

uint64_t sub_18F211050(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;

  if ((uint64_t)a1 < 1)
  {
    if (a1)
      return 0;
    else
      return 31;
  }
  else
  {
    v1 = a1 >> 30;
    if (a1 >> 30)
    {
      return 0;
    }
    else
    {
      do
      {
        v2 = a1 >> 29;
        a1 *= 2;
        LOWORD(v1) = v1 + 1;
      }
      while (!v2);
      return (__int16)v1;
    }
  }
}

uint64_t sub_18F211094(int a1)
{
  int v1;

  if (a1 >= 0)
    LOWORD(v1) = a1;
  else
    v1 = -a1;
  if (a1 == -32768)
    LOWORD(v1) = 0x7FFF;
  return (__int16)v1;
}

uint64_t sub_18F2110B0(uint64_t a1, int a2, __int16 *a3, _WORD *a4)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  uint64_t v29;
  int v30;
  __int16 *v31;
  uint64_t v32;
  uint64_t v33;
  int16x8_t *v34;
  uint64_t v35;
  const __int16 *v36;
  const __int16 *v37;
  _WORD *v38;
  __int16 *v39;
  uint64_t v40;
  uint64_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  __int16 *v45;
  uint64_t v46;
  const __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  _WORD *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 *v56;
  __int16 *v57;
  __int16 *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _WORD v80[8];
  uint64_t v81;
  _BYTE v82[2];
  _BYTE v83[206];
  int16x8x3_t v84;
  int16x8x3_t v85;
  int16x8x3_t v86;
  int16x8x3_t v87;

  *(_QWORD *)&v83[190] = *MEMORY[0x1E0C80C00];
  if (a2 > 32)
    return 0;
  v6 = sub_18F210ED4(1, a2);
  if (a2 < 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    goto LABEL_28;
  }
  v7 = v6;
  v8 = (unsigned __int16)a2;
  if (a2 == 1)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
LABEL_9:
    v31 = (__int16 *)(a1 + 6 * v9 + 4);
    v32 = (unsigned __int16)a2 - v9;
    do
    {
      v12 += *(v31 - 2) * (uint64_t)v7;
      v11 += *(v31 - 1) * (uint64_t)v7;
      v10 += *v31 * (uint64_t)v7;
      v31 += 3;
      --v32;
    }
    while (v32);
    goto LABEL_11;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v9 = (unsigned __int16)a2 & 0xFFFE;
  v28 = (__int16 *)(a1 + 6);
  v29 = v9;
  do
  {
    v26 += *(v28 - 3) * (uint64_t)v7;
    v27 += *v28 * (uint64_t)v7;
    v24 += *(v28 - 2) * (uint64_t)v7;
    v25 += v28[1] * (uint64_t)v7;
    v30 = v28[2];
    v22 += *(v28 - 1) * (uint64_t)v7;
    v28 += 6;
    v23 += v30 * (uint64_t)v7;
    v29 -= 2;
  }
  while (v29);
  v12 = v27 + v26;
  v11 = v25 + v24;
  v10 = v23 + v22;
  if (v9 != (unsigned __int16)a2)
    goto LABEL_9;
LABEL_11:
  if (a2 < 0x10)
  {
    v33 = 0;
LABEL_16:
    v38 = &v80[v33];
    v39 = (__int16 *)(a1 + 6 * v33 + 4);
    v40 = (unsigned __int16)a2 - v33;
    do
    {
      *v38++ = (*(v39 - 2) * *(v39 - 2) + *(v39 - 1) * *(v39 - 1) + *v39 * *v39) >> 11;
      v39 += 3;
      --v40;
    }
    while (v40);
    goto LABEL_18;
  }
  v33 = a2 & 0x30;
  v34 = (int16x8_t *)&v81;
  v35 = (unsigned __int16)a2 & 0xFFF0;
  v36 = (const __int16 *)a1;
  do
  {
    v37 = v36;
    v36 += 48;
    v84 = vld3q_s16(v37);
    v37 += 24;
    v85 = vld3q_s16(v37);
    v34[-1] = vshrn_high_n_s32(vshrn_n_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v84.val[1].i8, *(int16x4_t *)v84.val[1].i8), *(int16x4_t *)v84.val[0].i8, *(int16x4_t *)v84.val[0].i8), *(int16x4_t *)v84.val[2].i8, *(int16x4_t *)v84.val[2].i8), 0xBuLL), vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v84.val[1], v84.val[1]), v84.val[0], v84.val[0]), v84.val[2], v84.val[2]), 0xBuLL);
    *v34 = vshrn_high_n_s32(vshrn_n_s32(vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v85.val[1].i8, *(int16x4_t *)v85.val[1].i8), *(int16x4_t *)v85.val[0].i8, *(int16x4_t *)v85.val[0].i8), *(int16x4_t *)v85.val[2].i8, *(int16x4_t *)v85.val[2].i8), 0xBuLL), vmlal_high_s16(vmlal_high_s16(vmull_high_s16(v85.val[1], v85.val[1]), v85.val[0], v85.val[0]), v85.val[2], v85.val[2]), 0xBuLL);
    v34 += 2;
    v35 -= 16;
  }
  while (v35);
  if (v33 != (unsigned __int16)a2)
    goto LABEL_16;
LABEL_18:
  if (a2 >= 8)
  {
    v42 = vdupq_n_s16(v12 >> 15);
    v43 = vdupq_n_s16(v11 >> 15);
    v41 = (unsigned __int16)a2 & 0xFFF8;
    v44 = vdupq_n_s16(v10 >> 15);
    v45 = (__int16 *)v82;
    v46 = v41;
    v47 = (const __int16 *)a1;
    do
    {
      v86 = vld3q_s16(v47);
      v47 += 24;
      v87.val[0] = vsubq_s16(v86.val[0], v42);
      v87.val[1] = vsubq_s16(v86.val[1], v43);
      v87.val[2] = vsubq_s16(v86.val[2], v44);
      vst3q_s16(v45, v87);
      v45 += 24;
      v46 -= 8;
    }
    while (v46);
    if (v41 == (unsigned __int16)a2)
      goto LABEL_25;
  }
  else
  {
    v41 = 0;
  }
  v48 = (unsigned __int16)a2 - v41;
  v49 = 6 * v41 + 4;
  v50 = (__int16 *)(a1 + v49);
  v51 = &v82[v49];
  do
  {
    *(v51 - 2) = *(v50 - 2) - (v12 >> 15);
    *(v51 - 1) = *(v50 - 1) - (v11 >> 15);
    v52 = *v50;
    v50 += 3;
    *v51 = v52 - (v10 >> 15);
    v51 += 3;
    --v48;
  }
  while (v48);
LABEL_25:
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v56 = (__int16 *)(a1 + 4);
  v57 = (__int16 *)v83;
  v58 = v80;
  do
  {
    v21 += *(v57 - 1) * (uint64_t)*(v56 - 2);
    v20 += *v57 * (uint64_t)*(v56 - 1);
    v59 = v57[1];
    v19 += v57[1] * (uint64_t)*v56;
    v18 += *(v56 - 1) * (uint64_t)*(v57 - 1);
    v17 += *v56 * (uint64_t)*(v57 - 1);
    v16 += *v56 * (uint64_t)*v57;
    v60 = *v58++;
    v53 += v60 * (uint64_t)*(v57 - 1);
    v54 += v60 * (uint64_t)*v57;
    v56 += 3;
    v57 += 3;
    v55 += v60 * (uint64_t)v59;
    --v8;
  }
  while (v8);
  v15 = v53 >> 1;
  v14 = v54 >> 1;
  v13 = v55 >> 1;
LABEL_28:
  v61 = sub_18F211050(v21);
  v62 = sub_18F211050(v18);
  if (v61 >= v62)
    v61 = v62;
  v63 = sub_18F211050(v17);
  if (v61 >= v63)
    v61 = v63;
  v64 = sub_18F211050(v18);
  if (v61 >= v64)
    v61 = v64;
  v65 = sub_18F211050(v20);
  if (v61 >= v65)
    v61 = v65;
  v66 = sub_18F211050(v16);
  if (v61 >= v66)
    v61 = v66;
  v67 = sub_18F211050(v17);
  if (v61 >= v67)
    v61 = v67;
  v68 = sub_18F211050(v16);
  if (v61 >= v68)
    v61 = v68;
  v69 = sub_18F211050(v19);
  if (v61 >= v69)
    v61 = v69;
  v70 = sub_18F211050(v15);
  if (v61 >= v70)
    v61 = v70;
  v71 = sub_18F211050(v14);
  if (v61 >= v71)
    v61 = v71;
  v72 = sub_18F211050(v13);
  if (v61 >= v72)
    v73 = v72;
  else
    v73 = v61;
  if (v73 >= 32)
    LOBYTE(v73) = 32;
  v74 = v18 << v73 >> 18;
  a3[3] = v74;
  a3[1] = v74;
  v75 = v17 << v73 >> 18;
  a3[6] = v75;
  a3[2] = v75;
  v76 = v16 << v73 >> 18;
  a3[7] = v76;
  a3[5] = v76;
  *a3 = v21 << v73 >> 18;
  a3[4] = v20 << v73 >> 18;
  a3[8] = v19 << v73 >> 18;
  *a4 = v15 << v73 >> 18;
  a4[1] = v14 << v73 >> 18;
  a4[2] = v13 << v73 >> 18;
  if (*a3 >= 6 && a3[4] >= 6 && a3[8] > 5)
    return 4;
  return 0;
}

uint64_t sub_18F2115B0(__int16 *a1, int a2, __int16 *a3, __int16 *a4, _WORD *a5)
{
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  __int16 *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53[3];
  __int16 v54[3];
  __int16 v55;
  __int16 v56;
  __int16 v57;
  __int16 v58;
  __int16 v59;
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = a3[8];
  v8 = a3[5];
  v9 = v7 * (uint64_t)a3[4] - v8 * (uint64_t)v8;
  v10 = *a3;
  v11 = a3[6];
  v12 = *a3 * (uint64_t)v7 - v11 * (uint64_t)v11;
  v13 = a3[1];
  v14 = *a3 * (uint64_t)a3[4] - v13 * (uint64_t)v13;
  if (v12 <= v9)
    v15 = a3[8] * (uint64_t)a3[4] - a3[5] * (uint64_t)a3[5];
  else
    v15 = *a3 * (uint64_t)a3[8] - a3[6] * (uint64_t)a3[6];
  if (v14 <= v15)
    v16 = v15;
  else
    v16 = *a3 * (uint64_t)a3[4] - a3[1] * (uint64_t)a3[1];
  if (v16 >= 1)
  {
    v19 = a3[4];
    v50 = 0;
    v20 = v12 > v9;
    if (v14 > v15)
      v20 = 2;
    if (v20 == 2)
    {
      v57 = v10;
      v58 = v13;
      v55 = -v11;
      v59 = a3[3];
      v60 = v19;
      v56 = -v8;
      if (sub_18F2119E0(&v57, 2, v54, v53))
      {
        sub_18F211C54((uint64_t)&v57, 2, (uint64_t)v54, (uint64_t)v53, (uint64_t)&v55, (uint64_t)&v51);
        v21 = v51 >> 2;
        *a4 = v51 >> 2;
        v22 = v52 >> 2;
        a4[1] = v52 >> 2;
        v24 = 2048;
        goto LABEL_19;
      }
    }
    else if (v20 == 1)
    {
      v57 = v7;
      v58 = v11;
      v55 = -v8;
      v59 = v11;
      v60 = v10;
      v56 = -v13;
      if (sub_18F2119E0(&v57, 2, v54, v53))
      {
        sub_18F211C54((uint64_t)&v57, 2, (uint64_t)v54, (uint64_t)v53, (uint64_t)&v55, (uint64_t)&v51);
        v21 = v52 >> 2;
        *a4 = v52 >> 2;
        v22 = 2048;
        a4[1] = 2048;
        v23 = v51;
        goto LABEL_18;
      }
    }
    else
    {
      v57 = v19;
      v59 = v8;
      v55 = -v13;
      v58 = v8;
      v60 = v7;
      v56 = -v11;
      if (sub_18F2119E0(&v57, 2, v54, v53))
      {
        sub_18F211C54((uint64_t)&v57, 2, (uint64_t)v54, (uint64_t)v53, (uint64_t)&v55, (uint64_t)&v51);
        v21 = 2048;
        *a4 = 2048;
        v22 = v51 >> 2;
        a4[1] = v51 >> 2;
        v23 = v52;
LABEL_18:
        v24 = v23 >> 2;
LABEL_19:
        a4[2] = v24;
        v25 = sub_18F213130(v22 * (uint64_t)v22 + v21 * (uint64_t)v21 + v24 * (uint64_t)v24, &v50);
        v26 = (__int16)(v25 >> 8) * (uint64_t)*a4;
        *a4 = v26 >> 11;
        v27 = (__int16)(v25 >> 8) * (uint64_t)a4[1];
        a4[1] = v27 >> 11;
        v28 = (__int16)(v25 >> 8) * (uint64_t)a4[2];
        a4[2] = v28 >> 11;
        v29 = (uint64_t)(v26 << 37) >> 48;
        v30 = (uint64_t)(v27 << 37) >> 48;
        v31 = (int)v29 * (uint64_t)*a1 + (__int16)((int)v27 >> 11) * (uint64_t)a1[1];
        v32 = (uint64_t)(v28 << 37) >> 48;
        v33 = v31 + (__int16)((int)v28 >> 11) * (uint64_t)a1[2];
        if (a2 < 2)
        {
          LODWORD(v36) = v31 + (__int16)((int)v28 >> 11) * a1[2];
          LODWORD(v35) = v36;
        }
        else
        {
          if (a2 == 2)
          {
            v34 = 1;
            v35 = v33;
            v36 = v33;
          }
          else
          {
            v39 = 0;
            v34 = ((unsigned __int16)a2 - 1) | 1;
            v40 = a1 + 4;
            v41 = ((unsigned __int16)a2 - 1) & 0xFFFFFFFFFFFFFFFELL;
            v35 = v33;
            v42 = v33;
            v43 = v33;
            v44 = v33;
            do
            {
              v45 = (int)v29 * (uint64_t)*(v40 - 1)
                  + (int)v30 * (uint64_t)*v40
                  + (__int16)((int)v28 >> 11) * (uint64_t)v40[1];
              v46 = (int)v29 * (uint64_t)v40[2]
                  + (int)v30 * (uint64_t)v40[3]
                  + (__int16)((int)v28 >> 11) * (uint64_t)v40[4];
              if (v43 <= v45)
                v43 = (int)v29 * (uint64_t)*(v40 - 1)
                    + (int)v30 * (uint64_t)*v40
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[1];
              if (v44 <= v46)
                v44 = (int)v29 * (uint64_t)v40[2]
                    + (int)v30 * (uint64_t)v40[3]
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[4];
              if (v35 >= v45)
                v35 = (int)v29 * (uint64_t)*(v40 - 1)
                    + (int)v30 * (uint64_t)*v40
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[1];
              if (v42 >= v46)
                v42 = (int)v29 * (uint64_t)v40[2]
                    + (int)v30 * (uint64_t)v40[3]
                    + (__int16)((int)v28 >> 11) * (uint64_t)v40[4];
              LODWORD(v33) = v45 + v33;
              v39 += v46;
              v40 += 6;
              v41 -= 2;
            }
            while (v41);
            if (v43 <= v44)
              v36 = v44;
            else
              v36 = v43;
            if (v35 >= v42)
              v35 = v42;
            LODWORD(v33) = v39 + v33;
            if ((unsigned __int16)a2 - 1 == (((unsigned __int16)a2 - 1) & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_47;
          }
          v47 = &a1[3 * (int)v34 + 2];
          v48 = (unsigned __int16)a2 - v34;
          do
          {
            v49 = (int)v29 * (uint64_t)*(v47 - 2) + (int)v30 * (uint64_t)*(v47 - 1) + (int)v32 * (uint64_t)*v47;
            if (v36 <= v49)
              v36 = (int)v29 * (uint64_t)*(v47 - 2) + (int)v30 * (uint64_t)*(v47 - 1) + (int)v32 * (uint64_t)*v47;
            if (v35 >= v49)
              v35 = (int)v29 * (uint64_t)*(v47 - 2) + (int)v30 * (uint64_t)*(v47 - 1) + (int)v32 * (uint64_t)*v47;
            LODWORD(v33) = v49 + v33;
            v47 += 3;
            --v48;
          }
          while (v48);
        }
LABEL_47:
        *a5 = (v36 - v35) >> 11;
        v37 = 1;
        a4[3] = -(__int16)(((__int16)((int)v33 >> 11) * sub_18F210ED4(1, a2)) >> 15);
        return v37;
      }
    }
  }
  return 0;
}

uint64_t sub_18F2119E0(_WORD *a1, int a2, __int16 *a3, __int16 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  unint64_t v10;
  _WORD *v11;
  _WORD *v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _WORD *v18;
  _WORD *v19;
  unsigned __int16 v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  int v25;
  _WORD *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  if (a2 < 1)
    return 1;
  v29 = v4;
  v30 = v5;
  v9 = 0;
  v28 = 0;
  v10 = (unsigned __int16)a2;
  v11 = a1;
  v12 = a1;
  while (2)
  {
    v27 = v11;
    if (v9)
    {
      v13 = v9;
      while (1)
      {
        v14 = (uint64_t)(__int16)a1[3 * v9 + v13] << 15;
        if (v9 >= 2)
        {
          v16 = 0;
          v17 = 0;
          do
          {
            v18 = &a1[3 * v9];
            v19 = &a1[3 * v13];
            v14 -= 4
                 * (__int16)v18[(unsigned __int16)(v9 - v16 - 1)]
                 * (uint64_t)(__int16)v19[(unsigned __int16)(v9 - v16 - 1)];
            v17 -= 4
                 * (__int16)v18[(unsigned __int16)(v9 - v16 - 2)]
                 * (uint64_t)(__int16)v19[(unsigned __int16)(v9 - v16 - 2)];
            v16 += 2;
          }
          while ((v9 & 0xFFFFFFFE) != v16);
          v14 += v17;
          LOWORD(v15) = v9 & 1;
          if ((v9 & 0xFFFFFFFE) == (_DWORD)v9)
            goto LABEL_13;
        }
        else
        {
          LOWORD(v15) = v9;
        }
        do
        {
          v20 = v15 - 1;
          v15 = (__int16)(v15 - 1);
          v14 -= 4 * (__int16)a1[3 * v9 + v20] * (uint64_t)(__int16)a1[3 * v13 + v20];
        }
        while (v15 > 0);
LABEL_13:
        if (v9 == v13)
        {
          if (v14 < 1)
            return 0;
          v21 = sub_18F213130(v14, &v28);
          a3[v9] = HIWORD(v21);
          a4[v9] = (unsigned __int16)v21 >> 1;
          if (++v13 >= v10)
            goto LABEL_3;
        }
        else
        {
          a1[3 * v13++ + v9] = 2
                             * (WORD1(v14) * a3[v9]
                              + ((((v14 >> 1) & 0x7FFE) * a3[v9]) >> 15)
                              + ((((int)v14 >> 16) * a4[v9]) >> 15));
          if (v13 >= v10)
            goto LABEL_3;
        }
      }
    }
    v22 = 0;
    do
    {
      while (1)
      {
        v23 = (__int16)v12[v22];
        v24 = v23 << 15;
        if (!v22)
          break;
        *v11 = 2
             * ((v23 >> 1) * *a3
              + ((((v24 >> 1) & 0x4000) * *a3) >> 15)
              + (((v23 >> 1) * *a4) >> 15));
        v11 += 3;
        if (++v22 >= v10)
          goto LABEL_3;
      }
      if ((int)v23 < 1)
        return 0;
      v25 = sub_18F213130(v24, &v28);
      *a3 = HIWORD(v25);
      *a4 = (unsigned __int16)v25 >> 1;
      ++v22;
      v11 += 3;
    }
    while (v22 < v10);
LABEL_3:
    ++v9;
    v12 += 3;
    v11 = v27 + 1;
    if (v9 != v10)
      continue;
    return 1;
  }
}

uint64_t sub_18F211C54(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t i;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int16 v14;
  __int16 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  __int16 v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  __int16 *v26;
  __int16 *v27;
  uint64_t v28;
  __int16 *v29;
  int v30;

  if (a2 >= 1)
  {
    for (i = 0; i != (unsigned __int16)a2; ++i)
    {
      if (i)
      {
        if (i >= 2)
        {
          v10 = 0;
          v11 = 0;
          v12 = 0;
          LOWORD(v9) = i - (i & 0xFFFE);
          do
          {
            v13 = result + 6 * i;
            v11 += *(__int16 *)(a6 + 2 * (unsigned __int16)(i - v10 - 1))
                 * *(__int16 *)(v13 + 2 * (unsigned __int16)(i - v10 - 1));
            v12 += *(__int16 *)(a6 + 2 * (unsigned __int16)(i - v10 - 2))
                 * *(__int16 *)(v13 + 2 * (unsigned __int16)(i - v10 - 2));
            v10 += 2;
          }
          while ((i & 0xFFFFFFFE) != v10);
          v7 = v12 + v11;
          if ((i & 0xFFFFFFFE) == (_DWORD)i)
            goto LABEL_4;
        }
        else
        {
          v7 = 0;
          LOWORD(v9) = i;
        }
        do
        {
          v14 = v9 - 1;
          v9 = (__int16)(v9 - 1);
          v7 += *(__int16 *)(a6 + 2 * v14) * *(__int16 *)(result + 6 * i + 2 * v14);
        }
        while (v9 > 0);
      }
      else
      {
        v7 = 0;
      }
LABEL_4:
      v8 = (*(__int16 *)(a5 + 2 * i) << 15) - 4 * v7;
      *(_WORD *)(a6 + 2 * i) = 2
                             * (HIWORD(v8) * *(_WORD *)(a3 + 2 * i)
                              + (((v8 >> 16) * *(__int16 *)(a4 + 2 * i)) >> 15)
                              + ((((v8 >> 1) & 0x7FFE) * *(__int16 *)(a3 + 2 * i)) >> 15));
    }
  }
  if ((((_WORD)a2 - 1) & 0x8000) == 0)
  {
    v15 = 0;
    v16 = a2 - 1;
    v17 = result + 2 * (unsigned __int16)(a2 - 1);
    v18 = v17 + 6;
    v19 = -1;
    v20 = a2;
    do
    {
      v22 = *(__int16 *)(a6 + 2 * v16) << 15;
      if (a2 > v20)
      {
        v23 = v20;
        if (v15 == 1)
          goto LABEL_21;
        v24 = 0;
        v25 = (v19 + 1) & 0x1FFFE;
        v26 = (__int16 *)(v18 + 6 * v20);
        v27 = (__int16 *)(a6 + 2 + 2 * v20);
        v28 = (unsigned __int16)(v15 - 1) + 1;
        v23 = (v28 & 0x1FFFE) + v20;
        do
        {
          v22 -= 4 * *(v26 - 3) * *(v27 - 1);
          v24 -= 4 * *v26 * *v27;
          v26 += 6;
          v27 += 2;
          v25 -= 2;
        }
        while (v25);
        v22 += v24;
        if (v28 != (v28 & 0x1FFFE))
        {
LABEL_21:
          v29 = (__int16 *)(v17 + 6 * (int)v23);
          do
          {
            v30 = *v29;
            v29 += 3;
            v22 -= 4 * v30 * *(__int16 *)(a6 + 2 * v23++);
          }
          while ((unsigned __int16)v23 != (unsigned __int16)a2);
        }
      }
      result = 2 * v16;
      v21 = (__int16)v16;
      *(_WORD *)(a6 + result) = 2
                              * (HIWORD(v22) * *(_WORD *)(a3 + result)
                               + ((((v22 >> 1) & 0x7FFE) * *(__int16 *)(a3 + result)) >> 15)
                               + (((v22 >> 16) * *(__int16 *)(a4 + result)) >> 15));
      --v16;
      --v20;
      ++v15;
      ++v19;
      v18 -= 2;
      v17 -= 2;
    }
    while (v21 > 0);
  }
  return result;
}

uint64_t sub_18F211EBC(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, int a6)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 400) = a3;
  result = sub_18F211F00(a1, a5, a6, 1);
  *(_WORD *)(a1 + 396) = 0;
  *(_WORD *)(a1 + 398) = a4;
  *(_DWORD *)(a1 + 504) = 0;
  return result;
}

uint64_t sub_18F211F00(uint64_t result, uint64_t a2, int a3, int a4)
{
  __int16 v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v7;

  v4 = a3;
  v5 = result;
  if (a4)
  {
    *(_DWORD *)(result + 8) = 2147450879;
    *(_WORD *)(result + 12) = 0x7FFF;
    *(_DWORD *)(result + 14) = 2147450879;
    *(_WORD *)(result + 18) = 0x7FFF;
    *(_DWORD *)(result + 20) = 2147450879;
    *(_WORD *)(result + 24) = 0x7FFF;
    *(_DWORD *)(result + 26) = 2147450879;
    *(_WORD *)(result + 30) = 0x7FFF;
    *(_WORD *)(result + 36) = 0x7FFF;
    *(_DWORD *)(result + 32) = 2147450879;
    *(_WORD *)(result + 42) = 0x7FFF;
    *(_DWORD *)(result + 38) = 2147450879;
    *(_WORD *)(result + 48) = 0x7FFF;
    *(_DWORD *)(result + 44) = 2147450879;
    *(_WORD *)(result + 54) = 0x7FFF;
    *(_DWORD *)(result + 50) = 2147450879;
    *(_WORD *)(result + 60) = 0x7FFF;
    *(_DWORD *)(result + 56) = 2147450879;
    *(_WORD *)(result + 66) = 0x7FFF;
    *(_DWORD *)(result + 62) = 2147450879;
    *(_WORD *)(result + 72) = 0x7FFF;
    *(_DWORD *)(result + 68) = 2147450879;
    *(_WORD *)(result + 78) = 0x7FFF;
    *(_DWORD *)(result + 74) = 2147450879;
    *(_WORD *)(result + 84) = 0x7FFF;
    *(_DWORD *)(result + 80) = 2147450879;
    *(_WORD *)(result + 90) = 0x7FFF;
    *(_DWORD *)(result + 86) = 2147450879;
    *(_WORD *)(result + 96) = 0x7FFF;
    *(_DWORD *)(result + 92) = 2147450879;
    *(_WORD *)(result + 102) = 0x7FFF;
    *(_DWORD *)(result + 98) = 2147450879;
    *(_WORD *)(result + 108) = 0x7FFF;
    *(_DWORD *)(result + 104) = 2147450879;
    *(_WORD *)(result + 114) = 0x7FFF;
    *(_DWORD *)(result + 110) = 2147450879;
    *(_WORD *)(result + 120) = 0x7FFF;
    *(_DWORD *)(result + 116) = 2147450879;
    *(_WORD *)(result + 126) = 0x7FFF;
    *(_DWORD *)(result + 122) = 2147450879;
    *(_WORD *)(result + 132) = 0x7FFF;
    *(_DWORD *)(result + 128) = 2147450879;
    *(_WORD *)(result + 138) = 0x7FFF;
    *(_DWORD *)(result + 134) = 2147450879;
    *(_WORD *)(result + 144) = 0x7FFF;
    *(_DWORD *)(result + 140) = 2147450879;
    *(_WORD *)(result + 150) = 0x7FFF;
    *(_DWORD *)(result + 146) = 2147450879;
    *(_WORD *)(result + 156) = 0x7FFF;
    *(_DWORD *)(result + 152) = 2147450879;
    *(_WORD *)(result + 162) = 0x7FFF;
    *(_DWORD *)(result + 158) = 2147450879;
    *(_WORD *)(result + 168) = 0x7FFF;
    *(_DWORD *)(result + 164) = 2147450879;
    *(_WORD *)(result + 174) = 0x7FFF;
    *(_DWORD *)(result + 170) = 2147450879;
    *(_WORD *)(result + 180) = 0x7FFF;
    *(_DWORD *)(result + 176) = 2147450879;
    *(_WORD *)(result + 186) = 0x7FFF;
    *(_DWORD *)(result + 182) = 2147450879;
    *(_WORD *)(result + 192) = 0x7FFF;
    *(_DWORD *)(result + 188) = 2147450879;
    *(_WORD *)(result + 198) = 0x7FFF;
    *(_DWORD *)(result + 194) = 2147450879;
    *(_DWORD *)(result + 200) = 2147450879;
    *(_WORD *)(result + 204) = 0x7FFF;
    *(_WORD *)(result + 210) = 0x7FFF;
    *(_DWORD *)(result + 206) = 2147450879;
    *(_WORD *)(result + 216) = 0x7FFF;
    *(_DWORD *)(result + 212) = 2147450879;
    *(_WORD *)(result + 222) = 0x7FFF;
    *(_DWORD *)(result + 218) = 2147450879;
    *(_WORD *)(result + 228) = 0x7FFF;
    *(_DWORD *)(result + 224) = 2147450879;
    *(_WORD *)(result + 234) = 0x7FFF;
    *(_DWORD *)(result + 230) = 2147450879;
    *(_WORD *)(result + 240) = 0x7FFF;
    *(_DWORD *)(result + 236) = 2147450879;
    *(_WORD *)(result + 246) = 0x7FFF;
    *(_DWORD *)(result + 242) = 2147450879;
    *(_WORD *)(result + 252) = 0x7FFF;
    *(_DWORD *)(result + 248) = 2147450879;
    *(_WORD *)(result + 258) = 0x7FFF;
    *(_DWORD *)(result + 254) = 2147450879;
    *(_WORD *)(result + 264) = 0x7FFF;
    *(_DWORD *)(result + 260) = 2147450879;
    *(_WORD *)(result + 270) = 0x7FFF;
    *(_DWORD *)(result + 266) = 2147450879;
    *(_WORD *)(result + 276) = 0x7FFF;
    *(_DWORD *)(result + 272) = 2147450879;
    *(_WORD *)(result + 282) = 0x7FFF;
    *(_DWORD *)(result + 278) = 2147450879;
    *(_WORD *)(result + 288) = 0x7FFF;
    *(_DWORD *)(result + 284) = 2147450879;
    *(_WORD *)(result + 294) = 0x7FFF;
    *(_DWORD *)(result + 290) = 2147450879;
    *(_WORD *)(result + 300) = 0x7FFF;
    *(_DWORD *)(result + 296) = 2147450879;
    *(_WORD *)(result + 412) = 0x7FFF;
    *(_DWORD *)(result + 408) = 2147450879;
    *(_WORD *)(result + 306) = 0x7FFF;
    *(_DWORD *)(result + 302) = 2147450879;
    *(_WORD *)(result + 418) = 0x7FFF;
    *(_DWORD *)(result + 414) = 2147450879;
    *(_WORD *)(result + 312) = 0x7FFF;
    *(_DWORD *)(result + 308) = 2147450879;
    *(_WORD *)(result + 424) = 0x7FFF;
    *(_DWORD *)(result + 420) = 2147450879;
    *(_WORD *)(result + 318) = 0x7FFF;
    *(_DWORD *)(result + 314) = 2147450879;
    *(_WORD *)(result + 430) = 0x7FFF;
    *(_DWORD *)(result + 426) = 2147450879;
    *(_WORD *)(result + 324) = 0x7FFF;
    *(_DWORD *)(result + 320) = 2147450879;
    *(_WORD *)(result + 436) = 0x7FFF;
    *(_DWORD *)(result + 432) = 2147450879;
    *(_WORD *)(result + 330) = 0x7FFF;
    *(_DWORD *)(result + 326) = 2147450879;
    *(_WORD *)(result + 442) = 0x7FFF;
    *(_DWORD *)(result + 438) = 2147450879;
    *(_WORD *)(result + 336) = 0x7FFF;
    *(_DWORD *)(result + 332) = 2147450879;
    *(_WORD *)(result + 448) = 0x7FFF;
    *(_DWORD *)(result + 444) = 2147450879;
    *(_WORD *)(result + 342) = 0x7FFF;
    *(_DWORD *)(result + 338) = 2147450879;
    *(_WORD *)(result + 454) = 0x7FFF;
    *(_DWORD *)(result + 450) = 2147450879;
    *(_WORD *)(result + 348) = 0x7FFF;
    *(_DWORD *)(result + 344) = 2147450879;
    *(_WORD *)(result + 460) = 0x7FFF;
    *(_DWORD *)(result + 456) = 2147450879;
    *(_WORD *)(result + 354) = 0x7FFF;
    *(_DWORD *)(result + 350) = 2147450879;
    *(_WORD *)(result + 466) = 0x7FFF;
    *(_DWORD *)(result + 462) = 2147450879;
    *(_WORD *)(result + 360) = 0x7FFF;
    *(_DWORD *)(result + 356) = 2147450879;
    *(_WORD *)(result + 472) = 0x7FFF;
    *(_DWORD *)(result + 468) = 2147450879;
    *(_WORD *)(result + 366) = 0x7FFF;
    *(_DWORD *)(result + 362) = 2147450879;
    *(_WORD *)(result + 478) = 0x7FFF;
    *(_DWORD *)(result + 474) = 2147450879;
    *(_WORD *)(result + 372) = 0x7FFF;
    *(_DWORD *)(result + 368) = 2147450879;
    *(_WORD *)(result + 484) = 0x7FFF;
    *(_DWORD *)(result + 480) = 2147450879;
    *(_WORD *)(result + 378) = 0x7FFF;
    *(_DWORD *)(result + 374) = 2147450879;
    *(_WORD *)(result + 490) = 0x7FFF;
    *(_DWORD *)(result + 486) = 2147450879;
    *(_WORD *)(result + 384) = 0x7FFF;
    *(_DWORD *)(result + 380) = 2147450879;
    *(_WORD *)(result + 496) = 0x7FFF;
    *(_DWORD *)(result + 492) = 2147450879;
    *(_WORD *)(result + 390) = 0x7FFF;
    *(_DWORD *)(result + 386) = 2147450879;
    *(_WORD *)(result + 502) = 0x7FFF;
    *(_DWORD *)(result + 498) = 2147450879;
  }
  v6 = a3 << 16;
  if (a3 << 16 >= 0x10000)
  {
    *(_WORD *)(result + 392) = 1;
    result = sub_18F2131D4(a2, 16, 1, result + 296);
    if (v6 >> 18)
      v7 = 2;
    else
      v7 = v4 - 1;
    *(_WORD *)(v5 + 394) = v7;
  }
  else
  {
    *(_WORD *)(result + 392) = 0;
    *(_WORD *)(result + 394) = 0;
  }
  return result;
}

uint64_t sub_18F212220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, __int16 a6, int a7, int a8, uint64_t a9, _DWORD *a10, uint64_t a11)
{
  __int16 v11;
  unsigned __int16 v16;
  __int16 *v17;
  int v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int16 v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  __int16 *v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  uint64_t v51;
  const __int16 *v52;
  int16x8_t v53;
  int16x8_t v54;
  const __int16 *v55;
  __int16 *v56;
  uint64_t v57;
  __int16 v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  uint64_t v63;
  const __int16 *v64;
  int16x8_t v65;
  int16x8_t v66;
  const __int16 *v67;
  __int16 *v68;
  __int16 v69;
  int v70;
  int v71;
  const __int16 *v73;
  uint64_t v74;
  uint64_t v75;
  __int16 *v76;
  __int16 *v77;
  __int16 v78;
  __int16 *v79;
  __int16 v80[16];
  __int16 v81;
  int v82;
  unsigned __int16 v83;
  int16x8x3_t v84;
  int16x8x3_t v85;
  int16x8x3_t v86;
  int16x8x3_t v87;

  v11 = 0;
  v81 = 0;
  if (*((unsigned __int16 *)a4 + 199) <= 1u)
  {
    if (*((unsigned __int16 *)a4 + 197) > 2u)
      return 0;
    v83 = 0;
    v82 = 0;
    if (((a6 - 1) & 0x8000) == 0)
    {
      v78 = 0;
      v16 = a6 - 1;
      v79 = (__int16 *)(a4 + 51);
      v17 = (__int16 *)(a4 + 63);
      v76 = (__int16 *)a4 + 198;
      v77 = (__int16 *)(a4 + 25);
      v75 = (uint64_t)(a4 + 37);
      v73 = (const __int16 *)(a4 + 43);
      v74 = (uint64_t)a4 + 300;
      while (1)
      {
        v19 = *((__int16 *)a4 + 199);
        LOWORD(v20) = *((_WORD *)a4 + 197);
        if (*a4)
          v21 = *(char **)(*a4 + 8 * v19);
        else
          v21 = (char *)&unk_18F4FDE64 + 90 * *((__int16 *)a4 + 199);
        v22 = &v21[30 * *((__int16 *)a4 + 197)];
        if (!a7)
          LODWORD(v19) = 0;
        if (!a8)
          LOWORD(v20) = 0;
        v23 = a4[50];
        if (v23)
        {
          v24 = *(char **)(v23 + 8 * (int)v19);
          v20 = (__int16)v20;
        }
        else
        {
          v20 = (__int16)v20;
          v24 = (char *)&unk_18F4FDF18 + 90 * (int)v19;
        }
        v25 = &v24[30 * v20];
        v26 = *(_WORD *)v22;
        v27 = *((_WORD *)v22 + 2);
        *(_OWORD *)v80 = *(_OWORD *)v25;
        *(_OWORD *)&v80[7] = *(_OWORD *)(v25 + 14);
        v80[0] = v26;
        v80[2] = v27;
        v28 = sub_18F2127C4((_WORD *)(a5 + 6 * v16), v80, (__int16 *)a4 + 4, v79, (__int16 *)&v82, (__int16 *)a4 + 252, &v81, 0, 0);
        LODWORD(v29) = *((__int16 *)a4 + 199);
        if (v28 != 2)
          goto LABEL_27;
        if ((int)v29 > 0)
          break;
        v33 = *((__int16 *)v22 + 12);
        if (v33 < 0 || *v17 < v33)
          goto LABEL_27;
        *((_WORD *)a4 + 199) = v29 + 1;
        if ((v29 & 0x80000000) == 0)
        {
          LOWORD(v29) = 1;
          v30 = *((__int16 *)v22 + 13);
          if (v30 < 0)
          {
LABEL_27:
            v31 = *((__int16 *)a4 + 197);
            v32 = *a4;
            v29 = (__int16)v29;
            if (*a4)
              goto LABEL_28;
            goto LABEL_31;
          }
LABEL_20:
          if (*v17 <= v30)
          {
            LOWORD(v29) = v29 - 1;
            *((_WORD *)a4 + 199) = v29;
            v31 = *((__int16 *)a4 + 197);
            v32 = *a4;
            v29 = (__int16)v29;
            if (*a4)
              goto LABEL_28;
            goto LABEL_31;
          }
          goto LABEL_27;
        }
        v31 = *((__int16 *)a4 + 197);
        v32 = *a4;
        v29 = (__int16)(v29 + 1);
        if (*a4)
        {
LABEL_28:
          v34 = (__int16 *)(*(_QWORD *)(v32 + 8 * v29) + 30 * v31);
          if (v81 != 1)
            goto LABEL_6;
          goto LABEL_32;
        }
LABEL_31:
        v34 = (__int16 *)((char *)&unk_18F4FDE64 + 90 * (int)v29 + 30 * v31);
        if (v81 != 1)
          goto LABEL_6;
LABEL_32:
        if (sub_18F2127C4((_WORD *)(a5 + 6 * v16), v34, (__int16 *)a4 + 4, v77, (__int16 *)&v82, v76, &v81, 1, a11) == 2)
        {
          v35 = *((__int16 *)a4 + 196);
          if (v35 < 16)
            v36 = v35 + 1;
          else
            v36 = 16;
          *((_WORD *)a4 + 196) = v36;
          sub_18F2131D4((uint64_t)&v82, 16, 1, v75);
          if (*((__int16 *)a4 + 196) < 2 || v34[11] <= 1)
          {
            *(_DWORD *)a9 = v82;
            *(_WORD *)(a9 + 4) = v83;
LABEL_59:
            ++v78;
            if (*((__int16 *)a4 + 196) >= v34[10])
            {
              v70 = *((__int16 *)a4 + 197);
              if (v70 <= 1)
              {
                *((_WORD *)a4 + 196) = 0;
                *((_WORD *)a4 + 197) = v70 + 1;
              }
            }
            goto LABEL_6;
          }
          v37 = *((unsigned __int16 *)a4 + 196);
          v38 = (unsigned __int16)v34[11];
          v83 = 0;
          v82 = 0;
          if (v37 >= v38)
          {
            v39 = sub_18F210ED4(1, (__int16)v38);
            v40 = v82;
            v41 = HIWORD(v82);
            v42 = v83;
            if (v34[11] >= 1)
            {
              v45 = (unsigned __int16)v34[11];
              if (v45 >= 0x10)
              {
                v46 = v45 & 0x7FF0;
                v59 = 0uLL;
                v60 = (int16x8_t)(unsigned __int16)v82;
                v61 = (int16x8_t)HIWORD(v82);
                v62 = (int16x8_t)v83;
                v63 = (unsigned __int16)v45 & 0xFFF0;
                v64 = v73;
                v65 = 0uLL;
                v66 = 0uLL;
                do
                {
                  v67 = v64 - 24;
                  v85 = vld3q_s16(v67);
                  v87 = vld3q_s16(v64);
                  v60 = vaddq_s16(v60, v85.val[0]);
                  v59 = vaddq_s16(v59, v87.val[0]);
                  v61 = vaddq_s16(v61, v85.val[1]);
                  v65 = vaddq_s16(v65, v87.val[1]);
                  v62 = vaddq_s16(v62, v85.val[2]);
                  v66 = vaddq_s16(v66, v87.val[2]);
                  v64 += 48;
                  v63 -= 16;
                }
                while (v63);
                v42 = vaddvq_s16(vaddq_s16(v66, v62));
                v41 = vaddvq_s16(vaddq_s16(v65, v61));
                v40 = vaddvq_s16(vaddq_s16(v59, v60));
                if (v46 == v45)
                  goto LABEL_57;
              }
              else
              {
                v46 = 0;
              }
              v68 = (__int16 *)(v74 + 6 * v46);
              do
              {
                v40 += *(v68 - 2);
                v41 += *(v68 - 1);
                v69 = *v68;
                v68 += 3;
                v42 += v69;
                ++v46;
              }
              while (v46 < v45);
              goto LABEL_57;
            }
          }
          else
          {
            v39 = sub_18F210ED4(1, (__int16)v37);
            v40 = v82;
            v41 = HIWORD(v82);
            v42 = v83;
            if (*((__int16 *)a4 + 196) >= 1)
            {
              v43 = *((unsigned __int16 *)a4 + 196);
              if (v43 < 0x10)
              {
                v44 = 0;
                goto LABEL_49;
              }
              v44 = v43 & 0x7FF0;
              v47 = 0uLL;
              v48 = (int16x8_t)(unsigned __int16)v82;
              v49 = (int16x8_t)HIWORD(v82);
              v50 = (int16x8_t)v83;
              v51 = (unsigned __int16)v43 & 0xFFF0;
              v52 = v73;
              v53 = 0uLL;
              v54 = 0uLL;
              do
              {
                v55 = v52 - 24;
                v84 = vld3q_s16(v55);
                v86 = vld3q_s16(v52);
                v48 = vaddq_s16(v48, v84.val[0]);
                v47 = vaddq_s16(v47, v86.val[0]);
                v49 = vaddq_s16(v49, v84.val[1]);
                v53 = vaddq_s16(v53, v86.val[1]);
                v50 = vaddq_s16(v50, v84.val[2]);
                v54 = vaddq_s16(v54, v86.val[2]);
                v52 += 48;
                v51 -= 16;
              }
              while (v51);
              v42 = vaddvq_s16(vaddq_s16(v54, v50));
              v41 = vaddvq_s16(vaddq_s16(v53, v49));
              v40 = vaddvq_s16(vaddq_s16(v47, v48));
              if (v44 != v43)
              {
LABEL_49:
                v56 = (__int16 *)(v74 + 6 * v44);
                v57 = v43 - v44;
                do
                {
                  v40 += *(v56 - 2);
                  v41 += *(v56 - 1);
                  v58 = *v56;
                  v56 += 3;
                  v42 += v58;
                  --v57;
                }
                while (v57);
              }
LABEL_57:
              LOWORD(v82) = v40;
              HIWORD(v82) = v41;
              v83 = v42;
            }
          }
          *(_WORD *)a9 = (v40 * v39) >> 15;
          *(_WORD *)(a9 + 2) = (v41 * v39) >> 15;
          *(_WORD *)(a9 + 4) = (v42 * v39) >> 15;
          goto LABEL_59;
        }
LABEL_6:
        v18 = (__int16)v16--;
        if (v18 < 1)
          goto LABEL_63;
      }
      v30 = *((__int16 *)v22 + 13);
      if (v30 < 0)
        goto LABEL_27;
      goto LABEL_20;
    }
    v78 = 0;
LABEL_63:
    v71 = *((__int16 *)a4 + 197);
    if (*((_WORD *)a4 + 196))
      ++v71;
    *a10 = v71;
    return v78;
  }
  return v11;
}

uint64_t sub_18F2127C4(_WORD *a1, __int16 *a2, __int16 *a3, __int16 *a4, __int16 *a5, __int16 *a6, _WORD *a7, int a8, uint64_t a9)
{
  __int16 *v12;
  __int16 *v16;
  __int16 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  signed __int16 v24;
  __int16 *v25;
  __int16 *v26;
  int v27;
  uint64_t result;
  unsigned int v29;
  uint64_t v30;
  __int16 v31;
  __int16 v32;
  unsigned __int16 v33;
  uint64_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  uint64_t v38;
  __int16 *v39;
  uint64_t v40;
  __int16 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unint64_t v47;
  __int16 v48;
  __int16 v49;
  uint64_t v50;
  __int16 *v51;
  __int16 v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  __int16 v59;
  int v60;
  char v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  __int16 v65;
  int v66;
  int v67;
  int v68;
  int v69;
  _BOOL4 v70;
  char v71;
  char v72;
  uint64_t v73;
  __int16 v74;
  __int16 v75;
  unsigned __int16 v76;
  uint64_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  uint64_t v81;
  __int16 *v82;
  uint64_t v83;
  __int16 *v84;
  __int16 *v85;
  int v87;
  __int16 v88;
  int v89;
  unsigned __int16 v90;
  int v91;
  __int16 v92;
  int v93;
  __int16 v94;
  int v95;
  __int16 v96;
  int v97;
  __int16 v98;
  int v99;
  int v100;
  int v101;
  __int16 v102;
  int v103;
  __int16 v104;
  __int128 v105;
  __int16 v106;
  __int128 v107;
  __int16 v108;
  uint64_t v109;
  int16x8x3_t v110;
  int16x8x3_t v111;
  int16x8x3_t v112;
  int16x8x3_t v113;

  v109 = *MEMORY[0x1E0C80C00];
  if (*a2 < 1)
    return 0;
  v12 = a4;
  *a7 = 0;
  if (a8)
  {
    v16 = a2 + 14;
    if (a2[14])
    {
      if (a8 == 1)
        goto LABEL_21;
      v17 = a4;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      goto LABEL_7;
    }
    if (a8 == 1)
      goto LABEL_21;
    v17 = a4;
    v18 = 0;
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v17 = a4;
    v18 = sub_18F211094((__int16)(*a3 - *a1));
    v19 = sub_18F211094((__int16)(a3[1] - a1[1]));
    v20 = sub_18F211094((__int16)(a3[2] - a1[2]));
    v16 = a2 + 14;
    if (a2[14])
    {
LABEL_7:
      if (v19 + v18 + v20 < a2[2])
        return 0;
      goto LABEL_18;
    }
  }
  v21 = a2[2];
  if (v18 < v21 || v19 < v21 || v20 < v21)
    return 0;
LABEL_18:
  if (!a8)
  {
    sub_18F2131D4((uint64_t)a1, *a2, 1, (uint64_t)a3);
    *a7 = 1;
  }
  v12 = v17;
LABEL_21:
  v24 = *a2;
  v25 = &a3[3 * *a2];
  v27 = (unsigned __int16)*(v25 - 3);
  v26 = v25 - 3;
  if (v27 == 0x7FFF && v26[1] == 0x7FFF && v26[2] == 0x7FFF)
    return 0;
  v94 = 0;
  v93 = 0;
  v91 = 0;
  v92 = 0;
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v88 = 0;
  sub_18F21326C(a3, v24, (__int16 *)&v93, (__int16 *)&v91, &v89, &v87);
  v29 = (unsigned __int16)*a2;
  if (*a2 >= 1)
  {
    v30 = (unsigned __int16)*a2;
    v31 = v89;
    v32 = HIWORD(v89);
    v33 = v90;
    if (v29 >= 8)
    {
      v34 = v30 & 0x7FF8;
      v35 = vdupq_n_s16((unsigned __int16)v89);
      v36 = vdupq_n_s16(HIWORD(v89));
      v37 = vdupq_n_s16(v90);
      v38 = (unsigned __int16)v30 & 0xFFF8;
      v39 = a3;
      do
      {
        v110 = vld3q_s16(v39);
        v112.val[0] = vsubq_s16(v110.val[0], v35);
        v112.val[1] = vsubq_s16(v110.val[1], v36);
        v112.val[2] = vsubq_s16(v110.val[2], v37);
        vst3q_s16(v39, v112);
        v39 += 24;
        v38 -= 8;
      }
      while (v38);
      if (v34 == v30)
        goto LABEL_33;
    }
    else
    {
      v34 = 0;
    }
    v40 = v30 - v34;
    v41 = &a3[3 * v34 + 2];
    do
    {
      *(v41 - 2) -= v31;
      *(v41 - 1) -= v32;
      *v41 -= v33;
      v41 += 3;
      --v40;
    }
    while (v40);
LABEL_33:
    v29 = (unsigned __int16)*a2;
  }
  v42 = (__int16)v29;
  v43 = sub_18F2110B0((uint64_t)a3, (__int16)v29, (__int16 *)&v105, &v103);
  v107 = v105;
  v108 = v106;
  if (v43 == 4 && sub_18F2119E0(&v107, 3, (__int16 *)&v99, (__int16 *)&v97))
  {
    v85 = v12;
    sub_18F211C54((uint64_t)&v107, 3, (uint64_t)&v99, (uint64_t)&v97, (uint64_t)&v103, (uint64_t)&v101);
    v44 = (__int16)v101 >> 2;
    *a5 = v44;
    v45 = SHIWORD(v101) >> 2;
    a5[1] = v45;
    v46 = v102 >> 2;
    a5[2] = v102 >> 2;
    v47 = (*a3 - v44) * (uint64_t)(*a3 - v44)
        + (a3[1] - v45) * (uint64_t)(a3[1] - v45)
        + (a3[2] - v46) * (uint64_t)(a3[2] - v46);
    v48 = sub_18F212EE8(v47);
    v49 = v48;
    if ((__int16)v29 < 2)
    {
      v52 = v48;
    }
    else
    {
      v50 = v29 - 1;
      v51 = a3 + 5;
      v52 = v48;
      do
      {
        v53 = *(v51 - 2) - *a5;
        v54 = *(v51 - 1) - a5[1];
        v55 = v53 * (uint64_t)v53 + v54 * (uint64_t)v54;
        v56 = *v51 - a5[2];
        v57 = v55 + v56 * (uint64_t)v56;
        v47 += v57;
        v58 = sub_18F212EE8(v57);
        if (v58 > v52)
          v52 = v58;
        if (v58 < v49)
          v49 = v58;
        v51 += 3;
        --v50;
      }
      while (v50);
    }
    v60 = 1;
    v62 = sub_18F210ED4(1, v42);
    v63 = sub_18F212EE8((__int16)(((v62 >> 3) & 1) + (v62 >> 4)) * (((v47 >> 6) & 1) + (v47 >> 7)));
    v61 = 0;
    *a6 = ((v63 >> 1) & 1) + (v63 >> 2);
    v59 = v52 - v49;
    v12 = v85;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    a5[2] = 0;
    *(_DWORD *)a5 = 0;
    v61 = 1;
    *a6 = 0;
  }
  *a5 += v89;
  a5[1] += HIWORD(v89);
  a5[2] += v90;
  sub_18F2131D4((uint64_t)a5, a2[1], 1, (uint64_t)v12);
  if ((v61 & 1) != 0)
    goto LABEL_82;
  v64 = *a6;
  if (a9)
  {
    *(_DWORD *)(a9 + 12) = *(_DWORD *)(a2 + 7);
    *(_WORD *)(a9 + 16) = a2[9];
    *(_WORD *)(a9 + 18) = v59;
  }
  if (!v60 || a2[8] >= v64 || a2[7] <= v64 || a2[9] * (uint64_t)v64 <= (uint64_t)v59 << 11)
    goto LABEL_82;
  v104 = 0;
  v103 = 0;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  *(_QWORD *)&v107 = 0;
  v99 = 0;
  v97 = 0;
  v98 = 0;
  v95 = 0;
  v96 = 0;
  sub_18F21326C(v12, a2[1], (__int16 *)&v99, (__int16 *)&v97, &v95, &v101);
  if (a9)
  {
    *(_WORD *)(a9 + 2) = a2[1];
    *(_DWORD *)(a9 + 20) = v101;
    *(_WORD *)(a9 + 24) = v102;
    v65 = a2[5];
    *(_WORD *)(a9 + 8) = v65;
  }
  else
  {
    v65 = a2[5];
  }
  if ((__int16)v101 >= v65 || SHIWORD(v101) >= v65 || v102 >= v65)
  {
    if (*v16 < 2)
      goto LABEL_82;
    v69 = v65;
    v70 = (__int16)v101 < v65;
    v71 = v102 < v69 || v70;
    if (v102 >= v69)
      v70 = 0;
    v72 = SHIWORD(v101) < v69 ? v71 : 0;
    if ((v72 & 1) == 0 && !v70)
    {
LABEL_82:
      result = 0;
      goto LABEL_83;
    }
  }
  sub_18F21326C(a3, *a2, (__int16 *)&v99, (__int16 *)&v97, &v95, &v103);
  v66 = (__int16)v103;
  if (a9)
  {
    *(_WORD *)a9 = *a2;
    *(_DWORD *)(a9 + 26) = v103;
    *(_WORD *)(a9 + 30) = v104;
    *(_WORD *)(a9 + 6) = a2[4];
  }
  result = 0;
  v67 = a2[3];
  if (v66 > v67 && SHIWORD(v103) > v67 && v104 > v67)
  {
    if ((__int16)(HIWORD(v103) + v66 + v104) >= a2[4])
    {
      v68 = sub_18F2115B0(a3, *a2, (__int16 *)&v105, (__int16 *)&v107, (_WORD *)&v100 + 1);
      if (a9)
      {
        *(_WORD *)(a9 + 10) = a2[6];
        *(_WORD *)(a9 + 32) = HIWORD(v100);
      }
      if (v68 && SHIWORD(v100) > a2[6])
      {
        result = 2;
        goto LABEL_83;
      }
    }
    goto LABEL_82;
  }
LABEL_83:
  if (*a2 < 1)
    return result;
  v73 = (unsigned __int16)*a2;
  v74 = v89;
  v75 = HIWORD(v89);
  v76 = v90;
  if (v73 < 8)
  {
    v77 = 0;
LABEL_89:
    v83 = v73 - v77;
    v84 = &a3[3 * v77 + 2];
    do
    {
      *(v84 - 2) += v74;
      *(v84 - 1) += v75;
      *v84 += v76;
      v84 += 3;
      --v83;
    }
    while (v83);
    return result;
  }
  v77 = v73 & 0x7FF8;
  v78 = vdupq_n_s16((unsigned __int16)v89);
  v79 = vdupq_n_s16(HIWORD(v89));
  v80 = vdupq_n_s16(v90);
  v81 = (unsigned __int16)v73 & 0xFFF8;
  v82 = a3;
  do
  {
    v111 = vld3q_s16(v82);
    v113.val[0] = vaddq_s16(v111.val[0], v78);
    v113.val[1] = vaddq_s16(v111.val[1], v79);
    v113.val[2] = vaddq_s16(v111.val[2], v80);
    vst3q_s16(v82, v113);
    v82 += 24;
    v81 -= 8;
  }
  while (v81);
  if (v77 != v73)
    goto LABEL_89;
  return result;
}

uint64_t sub_18F212EE8(unint64_t a1)
{
  _BOOL8 v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;

  if ((a1 & 0x8000000000000000) != 0)
    return 0;
  v1 = a1 >> 30 != 0;
  v2 = ((a1 >> 28) & 0x3FFFFFFFFLL) + 4 * ((a1 >> 30) - v1);
  v3 = (4 * v1) | 1;
  if (v3 <= v2)
  {
    v4 = (8 * (a1 >> 30 != 0)) | 4;
  }
  else
  {
    v3 = 0;
    v4 = 8 * (a1 >> 30 != 0);
  }
  v5 = v2 - v3;
  v6 = v4 >> 2;
  v7 = ((a1 >> 26) & 0x3FFFFFFFFLL) + 4 * v5;
  v8 = v4 | 1;
  v9 = (v4 | 1) > v7;
  if ((v4 | 1) > v7)
    v8 = 0;
  v10 = 2 * v4;
  if (!v9)
    v10 = (8 * (v6 & 3)) | 4;
  v11 = ((a1 >> 24) & 0x3FFFFFFFFLL) + 4 * (v7 - v8);
  v12 = v10 | 1;
  v13 = (v10 | 1uLL) > v11;
  if ((v10 | 1uLL) > v11)
    v12 = 0;
  v14 = 2 * v10;
  if (!v13)
    v14 |= 4uLL;
  v15 = ((a1 >> 22) & 0x3FFFFFFFFLL) + 4 * (v11 - v12);
  v16 = v14 | 1;
  v17 = (v14 | 1uLL) > v15;
  if ((v14 | 1uLL) > v15)
    v16 = 0;
  v18 = 2 * v14;
  if (!v17)
    v18 |= 4uLL;
  v19 = ((a1 >> 20) & 0x3FFFFFFFFLL) + 4 * (v15 - v16);
  v20 = v18 | 1;
  v21 = (v18 | 1uLL) > v19;
  if ((v18 | 1uLL) > v19)
    v20 = 0;
  v22 = 2 * v18;
  if (!v21)
    v22 |= 4uLL;
  v23 = ((a1 >> 18) & 0x3FFFFFFFFLL) + 4 * (v19 - v20);
  v24 = v22 | 1;
  v25 = (v22 | 1uLL) > v23;
  if ((v22 | 1uLL) > v23)
    v24 = 0;
  v26 = 2 * v22;
  if (!v25)
    v26 |= 4uLL;
  v27 = ((a1 >> 16) & 0x3FFFFFFFFLL) + 4 * (v23 - v24);
  v28 = v26 | 1;
  v29 = (v26 | 1uLL) > v27;
  if ((v26 | 1uLL) > v27)
    v28 = 0;
  v30 = 2 * v26;
  if (!v29)
    v30 |= 4uLL;
  v31 = ((a1 >> 14) & 0x3FFFFFFFFLL) + 4 * (v27 - v28);
  v32 = v30 | 1;
  v33 = (v30 | 1uLL) > v31;
  if ((v30 | 1uLL) > v31)
    v32 = 0;
  v34 = 2 * v30;
  if (!v33)
    v34 |= 4uLL;
  v35 = ((a1 >> 12) & 0x3FFFFFFFFLL) + 4 * (v31 - v32);
  v36 = v34 | 1;
  v37 = (v34 | 1uLL) > v35;
  if ((v34 | 1uLL) > v35)
    v36 = 0;
  v38 = 2 * v34;
  if (!v37)
    v38 |= 4uLL;
  v39 = ((a1 >> 10) & 0x3FFFFFFFFLL) + 4 * (v35 - v36);
  v40 = v38 | 1;
  v41 = (v38 | 1uLL) > v39;
  if ((v38 | 1uLL) > v39)
    v40 = 0;
  v42 = 2 * v38;
  if (!v41)
    v42 |= 4uLL;
  v43 = ((a1 >> 8) & 0x3FFFFFFFFLL) + 4 * (v39 - v40);
  v44 = v42 | 1;
  v45 = (v42 | 1uLL) > v43;
  if ((v42 | 1uLL) > v43)
    v44 = 0;
  v46 = 2 * v42;
  if (!v45)
    v46 |= 4uLL;
  v47 = ((a1 >> 6) & 0x3FFFFFFFFLL) + 4 * (v43 - v44);
  v48 = v46 | 1;
  v49 = (v46 | 1uLL) > v47;
  if ((v46 | 1uLL) > v47)
    v48 = 0;
  v50 = 2 * v46;
  if (!v49)
    v50 |= 4uLL;
  v51 = ((a1 >> 4) & 0x3FFFFFFFFLL) + 4 * (v47 - v48);
  v52 = v50 | 1;
  v53 = (v50 | 1uLL) > v51;
  if ((v50 | 1uLL) > v51)
    v52 = 0;
  v54 = 2 * v50;
  if (!v53)
    v54 |= 4uLL;
  v55 = ((a1 >> 2) & 0x3FFFFFFFFLL) + 4 * (v51 - v52);
  v56 = v54 | 1;
  v57 = (v54 | 1uLL) > v55;
  if ((v54 | 1uLL) > v55)
    v56 = 0;
  v58 = 2 * v54;
  if (!v57)
    v58 |= 4uLL;
  return (__int16)((v58 >> 1) | ((v58 | 1) <= (a1 & 0x3FFFFFFFFLL) + 4 * (v55 - v56)));
}

uint64_t sub_18F213130(int64_t a1, _WORD *a2)
{
  __int16 v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t result;

  if (a1 < 1)
  {
    result = 0x40000000;
    *a2 = 0;
  }
  else
  {
    v4 = sub_18F211050(a1);
    v5 = a1 << v4 >> (((30 - v4) & 1) == 0);
    v6 = ((__int16)(30 - v4) >> 1) + 1;
    v7 = (v5 >> 10) & 0x7FFF;
    v8 = (__int16 *)((char *)&unk_18F4FDF72 + 2 * ((uint64_t)((v5 << 23) - 0x10000000000000) >> 48));
    result = (((uint64_t)*v8 << 16) - 2 * (__int16)(*v8 - v8[1]) * (uint64_t)(int)v7) >> v6;
    *a2 = v6;
  }
  return result;
}

uint64_t sub_18F2131D4(uint64_t result, int a2, int a3, uint64_t a4)
{
  int i;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  if (a3 >= 1 && a2 >= a3)
  {
    for (i = (__int16)(a2 - 1); i >= a3; i = (__int16)(i - 1))
    {
      v5 = a4 + 6 * (__int16)i;
      v6 = (int *)(a4 + 6 * ((__int16)i - a3));
      v7 = *v6;
      *(_WORD *)(v5 + 4) = *((_WORD *)v6 + 2);
      *(_DWORD *)v5 = v7;
    }
    do
    {
      v8 = 6 * (unsigned __int16)--a3;
      v9 = *(_DWORD *)(result + v8);
      v10 = *(_WORD *)(result + v8 + 4);
      v11 = a4 + v8;
      *(_WORD *)(v11 + 4) = v10;
      *(_DWORD *)v11 = v9;
    }
    while ((_WORD)a3);
  }
  return result;
}

__int16 *sub_18F21326C(__int16 *result, int a2, __int16 *a3, __int16 *a4, _WORD *a5, _WORD *a6)
{
  __int16 v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  __int16 v13;
  unsigned int v14;
  int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  __int16 *v27;
  uint64_t v28;
  int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  __int16 *v35;
  int v36;
  __int16 v37;
  unsigned int v38;

  *a4 = *result;
  v6 = *result;
  *a3 = *result;
  if (a2 > 1)
  {
    v7 = result + 3;
    v8 = (unsigned __int16)a2 - 1;
    v9 = v8;
    while (1)
    {
      v10 = *v7;
      if (v10 < *a4)
      {
        *a4 = v10;
        LOWORD(v10) = *v7;
        v6 = *a3;
        if (*v7 > *a3)
        {
LABEL_8:
          *a3 = v10;
          v6 = v10;
        }
      }
      else if ((__int16)v10 > v6)
      {
        goto LABEL_8;
      }
      v7 += 3;
      if (!--v9)
      {
        v22 = (*a4 >> 1) + (v6 >> 1);
        *a5 = (*a4 >> 1) + (v6 >> 1);
        v23 = *a3;
        if ((*a3 & 1) != 0 || (v24 = *a4, (*a4 & 1) != 0))
        {
          *a5 = v22 + 1;
          v23 = *a3;
          v24 = *a4;
        }
        v25 = (unsigned __int16)(v23 - v24);
        if (v25 >= 0x7FFF)
          LOWORD(v25) = 0x7FFF;
        *a6 = v25;
        a4[1] = result[1];
        v26 = result[1];
        a3[1] = v26;
        v27 = result + 4;
        v28 = (unsigned __int16)a2 - 1;
        while (2)
        {
          v29 = *v27;
          if (v29 < a4[1])
          {
            a4[1] = v29;
            LOWORD(v29) = *v27;
            v26 = a3[1];
            if (*v27 > v26)
              goto LABEL_32;
          }
          else if ((__int16)v29 > v26)
          {
LABEL_32:
            a3[1] = v29;
            v26 = v29;
          }
          v27 += 3;
          if (--v28)
            continue;
          break;
        }
        v30 = (a4[1] >> 1) + (v26 >> 1);
        a5[1] = (a4[1] >> 1) + (v26 >> 1);
        v31 = a3[1];
        if ((v31 & 1) != 0 || (v32 = a4[1], (v32 & 1) != 0))
        {
          a5[1] = v30 + 1;
          v31 = a3[1];
          v32 = a4[1];
        }
        v33 = (unsigned __int16)(v31 - v32);
        if (v33 >= 0x7FFF)
          LOWORD(v33) = 0x7FFF;
        a6[1] = v33;
        a4[2] = result[2];
        v34 = result[2];
        a3[2] = v34;
        v35 = result + 5;
        while (2)
        {
          v36 = *v35;
          if (v36 < a4[2])
          {
            a4[2] = v36;
            LOWORD(v36) = *v35;
            v34 = a3[2];
            if (*v35 > v34)
              goto LABEL_44;
          }
          else if ((__int16)v36 > v34)
          {
LABEL_44:
            a3[2] = v36;
            v34 = v36;
          }
          v35 += 3;
          if (!--v8)
          {
            v20 = (a4[2] >> 1) + (v34 >> 1);
            a5[2] = v20;
            v21 = (unsigned __int16)a3[2];
            if ((v21 & 1) == 0)
              goto LABEL_46;
LABEL_47:
            a5[2] = v20 + 1;
            LOWORD(v21) = a3[2];
            v37 = a4[2];
            goto LABEL_48;
          }
          continue;
        }
      }
    }
  }
  v11 = (*a4 >> 1) + (v6 >> 1);
  *a5 = (*a4 >> 1) + (v6 >> 1);
  v12 = *a3;
  if ((*a3 & 1) != 0 || (v13 = *a4, (*a4 & 1) != 0))
  {
    *a5 = v11 + 1;
    v12 = *a3;
    v13 = *a4;
  }
  v14 = (unsigned __int16)(v12 - v13);
  if (v14 >= 0x7FFF)
    LOWORD(v14) = 0x7FFF;
  *a6 = v14;
  a4[1] = result[1];
  v15 = result[1];
  a3[1] = v15;
  v16 = (a4[1] >> 1) + (v15 >> 1);
  a5[1] = (a4[1] >> 1) + (v15 >> 1);
  v17 = a3[1];
  if ((v17 & 1) != 0 || (v18 = a4[1], (v18 & 1) != 0))
  {
    a5[1] = v16 + 1;
    v17 = a3[1];
    v18 = a4[1];
  }
  v19 = (unsigned __int16)(v17 - v18);
  if (v19 >= 0x7FFF)
    LOWORD(v19) = 0x7FFF;
  a6[1] = v19;
  a4[2] = result[2];
  LODWORD(v21) = result[2];
  a3[2] = v21;
  v20 = (a4[2] >> 1) + ((int)v21 >> 1);
  a5[2] = (a4[2] >> 1) + ((int)v21 >> 1);
  LOWORD(v21) = a3[2];
  if ((v21 & 1) != 0)
    goto LABEL_47;
LABEL_46:
  v37 = a4[2];
  if ((v37 & 1) != 0)
    goto LABEL_47;
LABEL_48:
  v38 = (unsigned __int16)(v21 - v37);
  if (v38 >= 0x7FFF)
    LOWORD(v38) = 0x7FFF;
  a6[2] = v38;
  return result;
}

void sub_18F213574(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_18F213584(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951778;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F21359C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2135C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cyclingState");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cyclingStateSummary");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "motionType");
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "distanceTraveledOverTimeWindow", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F213690(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F213BF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

_QWORD *sub_18F213CA4(_QWORD *result)
{
  *result = &off_1E294F868;
  *(_QWORD *)((char *)result + 156) = 0;
  return result;
}

void sub_18F213CBC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F213CE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "crown");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isFall");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isNearFall");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "maxAbsX", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "maxAbsY", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "maxAbsZ", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "maxJerkVM", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "multiPeakAccelPathLengthWithPeak", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "multiPeakPathLengthDecorrelation", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "multiPeakPathLengthDelaySpread", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "multiPeakPathLengthHarmonicMean", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "sensorTime");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "timeto3rdZC", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
LABEL_75:
    PB::TextFormatter::format(this, "withinCyclingImpactThresholds");
    if ((*(_QWORD *)(a1 + 156) & 0x1000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_38;
  }
LABEL_74:
  PB::TextFormatter::format(this, "type");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000000) != 0)
    goto LABEL_75;
LABEL_37:
  if ((v5 & 0x1000000000) != 0)
LABEL_38:
    PB::TextFormatter::format(this, "withinHardThresholds");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2141B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  int v57;
  BOOL v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)(a1 + 156) |= 1uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_196;
            case 2u:
              *(_QWORD *)(a1 + 156) |= 4uLL;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_205:
                    v2 = v61 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_205;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_206;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_206:
              *(_QWORD *)(a1 + 24) = v25;
              goto LABEL_197;
            case 3u:
              *(_QWORD *)(a1 + 156) |= 2uLL;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_210:
                    v2 = v65 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_210;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_211;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_211:
              *(_QWORD *)(a1 + 16) = v31;
              goto LABEL_197;
            case 4u:
              *(_QWORD *)(a1 + 156) |= 0x40uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 5u:
              *(_QWORD *)(a1 + 156) |= 0x20uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 6u:
              *(_QWORD *)(a1 + 156) |= 0x20000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 7u:
              *(_QWORD *)(a1 + 156) |= 0x2000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 8u:
              *(_QWORD *)(a1 + 156) |= 0x10000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 9u:
              *(_QWORD *)(a1 + 156) |= 0x80000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xAu:
              *(_QWORD *)(a1 + 156) |= 0x10uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xBu:
              *(_QWORD *)(a1 + 156) |= 0x8000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xCu:
              *(_QWORD *)(a1 + 156) |= 0x4000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xDu:
              *(_QWORD *)(a1 + 156) |= 0x4000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xEu:
              *(_QWORD *)(a1 + 156) |= 0x10000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0xFu:
              *(_QWORD *)(a1 + 156) |= 0x40000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x10u:
              *(_QWORD *)(a1 + 156) |= 0x20000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x11u:
              *(_QWORD *)(a1 + 156) |= 0x80uLL;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_216;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_215:
                    v2 = v69 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_215;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_216;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_197;
            case 0x12u:
              *(_QWORD *)(a1 + 156) |= 0x8000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x13u:
              *(_QWORD *)(a1 + 156) |= 0x200000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 152) = v40;
              goto LABEL_197;
            case 0x14u:
              *(_QWORD *)(a1 + 156) |= 0x100000000uLL;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_221;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_220:
                    v2 = v73 + 1;
                    goto LABEL_221;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_220;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_221;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_221:
              *(_DWORD *)(a1 + 148) = v45;
              goto LABEL_197;
            case 0x15u:
              *(_QWORD *)(a1 + 156) |= 0x80000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x16u:
              *(_QWORD *)(a1 + 156) |= 0x400uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x17u:
              *(_QWORD *)(a1 + 156) |= 0x800uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x18u:
              *(_QWORD *)(a1 + 156) |= 0x1000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x19u:
              *(_QWORD *)(a1 + 156) |= 0x400000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 153) = v48;
              goto LABEL_197;
            case 0x1Au:
              *(_QWORD *)(a1 + 156) |= 0x800000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Bu:
              *(_QWORD *)(a1 + 156) |= 0x400000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Cu:
              *(_QWORD *)(a1 + 156) |= 0x1000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Du:
              *(_QWORD *)(a1 + 156) |= 0x200000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x1Eu:
              *(_QWORD *)(a1 + 156) |= 0x1000000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 155) = v50;
              goto LABEL_197;
            case 0x1Fu:
              *(_QWORD *)(a1 + 156) |= 0x100000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x20u:
              *(_QWORD *)(a1 + 156) |= 0x2000000uLL;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_226;
                  }
                  v77 = v51++;
                  v78 = *(_BYTE *)(v52 + v77);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_225:
                    v2 = v77 + 1;
                    goto LABEL_226;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_225;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_226;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_226:
              *(_DWORD *)(a1 + 120) = v55;
LABEL_197:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x21u:
              *(_QWORD *)(a1 + 156) |= 0x200uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x22u:
              *(_QWORD *)(a1 + 156) |= 0x100uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x23u:
              *(_QWORD *)(a1 + 156) |= 0x800000000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v58 = v57 != 0;
              }
              *(_BYTE *)(a1 + 154) = v58;
              goto LABEL_197;
            case 0x24u:
              *(_QWORD *)(a1 + 156) |= 0x40000uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_150;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_195;
            case 0x25u:
              *(_QWORD *)(a1 + 156) |= 8uLL;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_195:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_196:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_150:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_197;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_197;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F214F24(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 156);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 32));
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  if ((*(_QWORD *)(v3 + 156) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 32));
  return result;
}

uint64_t sub_18F215354(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951468;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F21536C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F215390(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroOn");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2153F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  int v26;
  BOOL v27;
  uint64_t result;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v27 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v27 = v26 != 0;
        }
        *(_BYTE *)(a1 + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v29 = 0;
          v30 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_48;
            }
            v31 = v20++;
            v32 = *(_BYTE *)(v21 + v31);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v14 = v30++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_47:
          v2 = v31 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_48:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F215678(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F2156D0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F360;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_18F2156E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F21570C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "consideredAlert");
    v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "consideredRecovery");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "consideredSOS");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "droppedAlert");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "droppedRecovery");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "droppedSOS");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "fallTime");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "impactOperatingMode");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isOtherStateMachineProcessingNearbyImpact");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "refereeOperatingMode");
    if ((*(_WORD *)(a1 + 52) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "refereeCyclingStateDecision");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 4) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "sensorTime");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2158DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  char v49;
  int v50;
  BOOL v51;
  uint64_t result;
  int v53;
  BOOL v54;
  int v55;
  BOOL v56;
  int v57;
  BOOL v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  int v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 52) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_151;
            case 2u:
              *(_WORD *)(a1 + 52) |= 4u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v67 = v20++;
                  v68 = *(_BYTE *)(v21 + v67);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    v24 = 0;
LABEL_129:
                    v2 = v67 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
                goto LABEL_129;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)this + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_130;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              v24 = 0;
LABEL_130:
              *(_QWORD *)(a1 + 24) = v24;
              goto LABEL_151;
            case 3u:
              *(_WORD *)(a1 + 52) |= 1u;
              v26 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v27 = *(_QWORD *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    v30 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v71 = v26++;
                  v72 = *(_BYTE *)(v27 + v71);
                  *((_QWORD *)this + 1) = v26;
                  v30 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v30 = 0;
LABEL_134:
                    v2 = v71 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v30 = 0;
                goto LABEL_134;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_135;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              v30 = 0;
LABEL_135:
              *(_QWORD *)(a1 + 8) = v30;
              goto LABEL_151;
            case 4u:
              *(_WORD *)(a1 + 52) |= 8u;
              v32 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v33 = *(_QWORD *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v36 = 0;
                if (v2 <= v32)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  v75 = v32++;
                  v76 = *(_BYTE *)(v33 + v75);
                  *((_QWORD *)this + 1) = v32;
                  v36 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_139:
                    v2 = v75 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v36) = 0;
                goto LABEL_139;
              }
              v34 = 0;
              v35 = 0;
              v36 = 0;
              do
              {
                v2 = v32 + 1;
                *((_QWORD *)this + 1) = v32 + 1;
                v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0)
                  goto LABEL_140;
                v34 += 7;
                v32 = v2;
                v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 32) = v36;
              goto LABEL_151;
            case 5u:
              *(_WORD *)(a1 + 52) |= 0x20u;
              v38 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v39 = *(_QWORD *)this;
              if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v42 = 0;
                if (v2 <= v38)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v38)
                  {
                    LODWORD(v42) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v79 = v38++;
                  v80 = *(_BYTE *)(v39 + v79);
                  *((_QWORD *)this + 1) = v38;
                  v42 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v42) = 0;
LABEL_144:
                    v2 = v79 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v42) = 0;
                goto LABEL_144;
              }
              v40 = 0;
              v41 = 0;
              v42 = 0;
              do
              {
                v2 = v38 + 1;
                *((_QWORD *)this + 1) = v38 + 1;
                v43 = *(_BYTE *)(v39 + v38);
                v42 |= (unint64_t)(v43 & 0x7F) << v40;
                if ((v43 & 0x80) == 0)
                  goto LABEL_145;
                v40 += 7;
                v38 = v2;
                v14 = v41++ > 8;
              }
              while (!v14);
              LODWORD(v42) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 40) = v42;
              goto LABEL_151;
            case 6u:
              *(_WORD *)(a1 + 52) |= 0x10u;
              v44 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v45 = *(_QWORD *)this;
              if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v48 = 0;
                if (v2 <= v44)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v44)
                  {
                    LODWORD(v48) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v83 = v44++;
                  v84 = *(_BYTE *)(v45 + v83);
                  *((_QWORD *)this + 1) = v44;
                  v48 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v48) = 0;
LABEL_149:
                    v2 = v83 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v48) = 0;
                goto LABEL_149;
              }
              v46 = 0;
              v47 = 0;
              v48 = 0;
              do
              {
                v2 = v44 + 1;
                *((_QWORD *)this + 1) = v44 + 1;
                v49 = *(_BYTE *)(v45 + v44);
                v48 |= (unint64_t)(v49 & 0x7F) << v46;
                if ((v49 & 0x80) == 0)
                  goto LABEL_150;
                v46 += 7;
                v44 = v2;
                v14 = v47++ > 8;
              }
              while (!v14);
              LODWORD(v48) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 36) = v48;
LABEL_151:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 7u:
              *(_WORD *)(a1 + 52) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v51 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v50 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v51 = v50 != 0;
              }
              *(_BYTE *)(a1 + 50) = v51;
              goto LABEL_151;
            case 0xBu:
              *(_WORD *)(a1 + 52) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v54 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v53 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v54 = v53 != 0;
              }
              *(_BYTE *)(a1 + 44) = v54;
              goto LABEL_151;
            case 0xCu:
              *(_WORD *)(a1 + 52) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v56 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v55 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v56 = v55 != 0;
              }
              *(_BYTE *)(a1 + 45) = v56;
              goto LABEL_151;
            case 0xDu:
              *(_WORD *)(a1 + 52) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v58 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v57 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v58 = v57 != 0;
              }
              *(_BYTE *)(a1 + 46) = v58;
              goto LABEL_151;
            case 0x15u:
              *(_WORD *)(a1 + 52) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v60 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v59 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v60 = v59 != 0;
              }
              *(_BYTE *)(a1 + 47) = v60;
              goto LABEL_151;
            case 0x16u:
              *(_WORD *)(a1 + 52) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v62 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v61 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v62 = v61 != 0;
              }
              *(_BYTE *)(a1 + 48) = v62;
              goto LABEL_151;
            case 0x17u:
              *(_WORD *)(a1 + 52) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v64 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v63 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v64 = v63 != 0;
              }
              *(_BYTE *)(a1 + 49) = v64;
              goto LABEL_151;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_151;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F216108(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 52);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_26:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 52) & 0x800) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F216298(_QWORD *result)
{
  *result = &off_1E294EE90;
  *(_QWORD *)((char *)result + 364) = 0;
  return result;
}

void sub_18F2162B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2162D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 364);
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "alertCanceledBecauseOfAbsenceOfQuiessence");
    v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alertCanceledBecauseOfActive");
  v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfChargerState");
  v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfCyclingPostImpact");
  v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDecimatedLowFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDistanceTraveledPostImpact");
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfHighFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLockedNoMotionPre");
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLowFrequencyFFT");
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfNumberOfPeaksFFT");
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfOffBody");
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRepetitiveMotion");
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRetraction");
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSimilarPeaks");
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfStand");
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSteps");
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristState");
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePost");
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePre");
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "fallStatsDispatchResetOnAccelSensorTime");
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "fallStatsDispatchRestoredOnAccelSensorTime");
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "hkWorkoutId");
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "impactCanceledBecauseOfExistingAlert");
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfCyclingImpactThresholds");
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMaxAccelNormThreshold");
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMultiPeaks");
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfNaiveBayesClassifier");
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfOtherHardThresholds");
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactNewImpact");
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactOldImpact");
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "operatingMode");
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "skippedFallStatsSensorTime");
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "skippedGyroSensorTime");
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfAbsenceOfLongLie");
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfActive");
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfStand");
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfSteps");
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "sosConsideredFallTimestamp");
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "sosConsideredIOSTime", *(double *)(a1 + 304));
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "sosConsideredSensorTime");
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "workoutId");
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "workoutTransitionPause");
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_45;
LABEL_91:
    PB::TextFormatter::format(this, "workoutTransitionStart");
    if ((*v5 & 0x80000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_46;
  }
LABEL_90:
  PB::TextFormatter::format(this, "workoutTransitionResume");
  v6 = *v5;
  if ((*v5 & 0x40000000000) != 0)
    goto LABEL_91;
LABEL_45:
  if ((v6 & 0x80000000000) != 0)
LABEL_46:
    PB::TextFormatter::format(this, "workoutTransitionStop");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2168B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t result;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char v137;
  unsigned int v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  unint64_t v148;
  char v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char v177;
  unsigned int v178;
  uint64_t v179;
  unint64_t v180;
  char v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char v265;
  unsigned int v266;
  uint64_t v267;
  unint64_t v268;
  char v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  char v273;
  unsigned int v274;
  uint64_t v275;
  unint64_t v276;
  char v277;
  unint64_t v278;
  unint64_t v279;
  uint64_t v280;
  char v281;
  unsigned int v282;
  uint64_t v283;
  unint64_t v284;
  char v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  char v289;
  unsigned int v290;
  uint64_t v291;
  unint64_t v292;
  char v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  char v297;
  unsigned int v298;
  uint64_t v299;
  unint64_t v300;
  char v301;
  unint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char v305;
  unsigned int v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  unint64_t v316;
  char v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  char v321;
  unsigned int v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  char v337;
  unsigned int v338;
  uint64_t v339;
  unint64_t v340;
  char v341;
  unint64_t v342;
  unint64_t v343;
  uint64_t v344;
  char v345;
  unsigned int v346;
  uint64_t v347;
  unint64_t v348;
  char v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  char v353;
  unsigned int v354;
  uint64_t v355;
  unint64_t v356;
  char v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  char v361;
  unsigned int v362;
  uint64_t v363;
  unint64_t v364;
  char v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  char v369;
  unsigned int v370;
  uint64_t v371;
  unint64_t v372;
  char v373;
  unint64_t v374;
  char v375;
  unsigned int v376;
  unint64_t v377;
  char v378;
  char v379;
  unsigned int v380;
  unint64_t v381;
  char v382;
  char v383;
  unsigned int v384;
  unint64_t v385;
  char v386;
  char v387;
  unsigned int v388;
  unint64_t v389;
  char v390;
  char v391;
  unsigned int v392;
  unint64_t v393;
  char v394;
  char v395;
  unsigned int v396;
  unint64_t v397;
  char v398;
  char v399;
  unsigned int v400;
  unint64_t v401;
  char v402;
  char v403;
  unsigned int v404;
  unint64_t v405;
  char v406;
  char v407;
  unsigned int v408;
  unint64_t v409;
  char v410;
  char v411;
  unsigned int v412;
  unint64_t v413;
  char v414;
  char v415;
  unsigned int v416;
  unint64_t v417;
  char v418;
  char v419;
  unsigned int v420;
  unint64_t v421;
  char v422;
  char v423;
  unsigned int v424;
  unint64_t v425;
  char v426;
  char v427;
  unsigned int v428;
  unint64_t v429;
  char v430;
  char v431;
  unsigned int v432;
  unint64_t v433;
  char v434;
  char v435;
  unsigned int v436;
  unint64_t v437;
  char v438;
  char v439;
  unsigned int v440;
  unint64_t v441;
  char v442;
  char v443;
  unsigned int v444;
  unint64_t v445;
  char v446;
  char v447;
  unsigned int v448;
  unint64_t v449;
  char v450;
  char v451;
  unsigned int v452;
  unint64_t v453;
  char v454;
  char v455;
  unsigned int v456;
  unint64_t v457;
  char v458;
  char v459;
  unsigned int v460;
  unint64_t v461;
  char v462;
  char v463;
  unsigned int v464;
  unint64_t v465;
  char v466;
  char v467;
  unsigned int v468;
  unint64_t v469;
  char v470;
  char v471;
  unsigned int v472;
  unint64_t v473;
  char v474;
  char v475;
  unsigned int v476;
  unint64_t v477;
  char v478;
  char v479;
  unsigned int v480;
  unint64_t v481;
  char v482;
  char v483;
  unsigned int v484;
  unint64_t v485;
  char v486;
  char v487;
  unsigned int v488;
  unint64_t v489;
  char v490;
  char v491;
  unsigned int v492;
  unint64_t v493;
  char v494;
  char v495;
  unsigned int v496;
  unint64_t v497;
  char v498;
  char v499;
  unsigned int v500;
  unint64_t v501;
  char v502;
  char v503;
  unsigned int v504;
  unint64_t v505;
  char v506;
  char v507;
  unsigned int v508;
  unint64_t v509;
  char v510;
  char v511;
  unsigned int v512;
  unint64_t v513;
  char v514;
  char v515;
  unsigned int v516;
  unint64_t v517;
  char v518;
  char v519;
  unsigned int v520;
  unint64_t v521;
  char v522;
  char v523;
  unsigned int v524;
  unint64_t v525;
  char v526;
  char v527;
  unsigned int v528;
  unint64_t v529;
  char v530;
  char v531;
  unsigned int v532;
  unint64_t v533;
  char v534;
  char v535;
  unsigned int v536;
  unint64_t v537;
  char v538;
  char v539;
  unsigned int v540;
  unint64_t v541;
  char v542;
  char v543;
  unsigned int v544;
  unint64_t v545;
  char v546;
  char v547;
  unsigned int v548;
  unint64_t v549;
  char v550;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)(a1 + 364);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *v8 |= 0x40000000uLL;
          v21 = *((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 2);
          v23 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            v375 = 0;
            v376 = 0;
            v26 = 0;
            if (v22 <= v21)
              v22 = *((_QWORD *)this + 1);
            do
            {
              if (v22 == v21)
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_648;
              }
              v377 = v21 + 1;
              v378 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)this + 1) = v377;
              v26 |= (unint64_t)(v378 & 0x7F) << v375;
              if ((v378 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  v26 = 0;
                goto LABEL_648;
              }
              v375 += 7;
              v21 = v377;
              v15 = v376++ > 8;
            }
            while (!v15);
LABEL_342:
            v26 = 0;
          }
          else
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            while (1)
            {
              v27 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                break;
              v24 += 7;
              v21 = v27;
              v15 = v25++ > 8;
              if (v15)
                goto LABEL_342;
            }
          }
LABEL_648:
          *(_QWORD *)(a1 + 248) = v26;
          goto LABEL_821;
        case 2u:
          *v8 |= 0x80000000uLL;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_652;
              v32 += 7;
              v29 = v35;
              v15 = v33++ > 8;
            }
            while (!v15);
LABEL_349:
            v34 = 0;
            goto LABEL_652;
          }
          v379 = 0;
          v380 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v381 = v29 + 1;
              v382 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v381;
              v34 |= (unint64_t)(v382 & 0x7F) << v379;
              if (v382 < 0)
              {
                v379 += 7;
                v29 = v381;
                v15 = v380++ > 8;
                if (v15)
                  goto LABEL_349;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_652:
          *(_QWORD *)(a1 + 256) = v34;
          goto LABEL_821;
        case 0x15u:
          *v8 |= 0x80000uLL;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          v40 = *(_QWORD *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v38 + 1;
              *((_QWORD *)this + 1) = v38 + 1;
              v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0)
                goto LABEL_656;
              v41 += 7;
              v38 = v44;
              v15 = v42++ > 8;
            }
            while (!v15);
LABEL_356:
            v43 = 0;
            goto LABEL_656;
          }
          v383 = 0;
          v384 = 0;
          v43 = 0;
          if (v39 <= v38)
            v39 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v39 == v38)
            {
              v43 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v385 = v38 + 1;
              v386 = *(_BYTE *)(v40 + v38);
              *((_QWORD *)this + 1) = v385;
              v43 |= (unint64_t)(v386 & 0x7F) << v383;
              if (v386 < 0)
              {
                v383 += 7;
                v38 = v385;
                v15 = v384++ > 8;
                if (v15)
                  goto LABEL_356;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v43 = 0;
            }
            break;
          }
LABEL_656:
          *(_QWORD *)(a1 + 160) = v43;
          goto LABEL_821;
        case 0x16u:
          *v8 |= 0x100000uLL;
          v46 = *((_QWORD *)this + 1);
          v47 = *((_QWORD *)this + 2);
          v48 = *(_QWORD *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            v49 = 0;
            v50 = 0;
            v51 = 0;
            do
            {
              v52 = v46 + 1;
              *((_QWORD *)this + 1) = v46 + 1;
              v53 = *(_BYTE *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0)
                goto LABEL_660;
              v49 += 7;
              v46 = v52;
              v15 = v50++ > 8;
            }
            while (!v15);
LABEL_363:
            v51 = 0;
            goto LABEL_660;
          }
          v387 = 0;
          v388 = 0;
          v51 = 0;
          if (v47 <= v46)
            v47 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v47 == v46)
            {
              v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v389 = v46 + 1;
              v390 = *(_BYTE *)(v48 + v46);
              *((_QWORD *)this + 1) = v389;
              v51 |= (unint64_t)(v390 & 0x7F) << v387;
              if (v390 < 0)
              {
                v387 += 7;
                v46 = v389;
                v15 = v388++ > 8;
                if (v15)
                  goto LABEL_363;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v51 = 0;
            }
            break;
          }
LABEL_660:
          *(_QWORD *)(a1 + 168) = v51;
          goto LABEL_821;
        case 0x2Cu:
          *v8 |= 0x200000uLL;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          v56 = *(_QWORD *)this;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v60 = v54 + 1;
              *((_QWORD *)this + 1) = v54 + 1;
              v61 = *(_BYTE *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0)
                goto LABEL_664;
              v57 += 7;
              v54 = v60;
              v15 = v58++ > 8;
            }
            while (!v15);
LABEL_370:
            v59 = 0;
            goto LABEL_664;
          }
          v391 = 0;
          v392 = 0;
          v59 = 0;
          if (v55 <= v54)
            v55 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v55 == v54)
            {
              v59 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v393 = v54 + 1;
              v394 = *(_BYTE *)(v56 + v54);
              *((_QWORD *)this + 1) = v393;
              v59 |= (unint64_t)(v394 & 0x7F) << v391;
              if (v394 < 0)
              {
                v391 += 7;
                v54 = v393;
                v15 = v392++ > 8;
                if (v15)
                  goto LABEL_370;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v59 = 0;
            }
            break;
          }
LABEL_664:
          *(_QWORD *)(a1 + 176) = v59;
          goto LABEL_821;
        case 0x2Du:
          *v8 |= 0x8000000000uLL;
          v62 = *((_QWORD *)this + 1);
          v63 = *((_QWORD *)this + 2);
          v64 = *(_QWORD *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v68 = v62 + 1;
              *((_QWORD *)this + 1) = v62 + 1;
              v69 = *(_BYTE *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0)
                goto LABEL_668;
              v65 += 7;
              v62 = v68;
              v15 = v66++ > 8;
            }
            while (!v15);
LABEL_377:
            v67 = 0;
            goto LABEL_668;
          }
          v395 = 0;
          v396 = 0;
          v67 = 0;
          if (v63 <= v62)
            v63 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v63 == v62)
            {
              v67 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v397 = v62 + 1;
              v398 = *(_BYTE *)(v64 + v62);
              *((_QWORD *)this + 1) = v397;
              v67 |= (unint64_t)(v398 & 0x7F) << v395;
              if (v398 < 0)
              {
                v395 += 7;
                v62 = v397;
                v15 = v396++ > 8;
                if (v15)
                  goto LABEL_377;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v67 = 0;
            }
            break;
          }
LABEL_668:
          *(_QWORD *)(a1 + 320) = v67;
          goto LABEL_821;
        case 0x2Eu:
          *v8 |= 0x40000000000uLL;
          v70 = *((_QWORD *)this + 1);
          v71 = *((_QWORD *)this + 2);
          v72 = *(_QWORD *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)this + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_672;
              v73 += 7;
              v70 = v76;
              v15 = v74++ > 8;
            }
            while (!v15);
LABEL_384:
            v75 = 0;
            goto LABEL_672;
          }
          v399 = 0;
          v400 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v71 == v70)
            {
              v75 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v401 = v70 + 1;
              v402 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)this + 1) = v401;
              v75 |= (unint64_t)(v402 & 0x7F) << v399;
              if (v402 < 0)
              {
                v399 += 7;
                v70 = v401;
                v15 = v400++ > 8;
                if (v15)
                  goto LABEL_384;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v75 = 0;
            }
            break;
          }
LABEL_672:
          *(_QWORD *)(a1 + 344) = v75;
          goto LABEL_821;
        case 0x2Fu:
          *v8 |= 0x10000000000uLL;
          v78 = *((_QWORD *)this + 1);
          v79 = *((_QWORD *)this + 2);
          v80 = *(_QWORD *)this;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            v81 = 0;
            v82 = 0;
            v83 = 0;
            do
            {
              v84 = v78 + 1;
              *((_QWORD *)this + 1) = v78 + 1;
              v85 = *(_BYTE *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0)
                goto LABEL_676;
              v81 += 7;
              v78 = v84;
              v15 = v82++ > 8;
            }
            while (!v15);
LABEL_391:
            v83 = 0;
            goto LABEL_676;
          }
          v403 = 0;
          v404 = 0;
          v83 = 0;
          if (v79 <= v78)
            v79 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v79 == v78)
            {
              v83 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v405 = v78 + 1;
              v406 = *(_BYTE *)(v80 + v78);
              *((_QWORD *)this + 1) = v405;
              v83 |= (unint64_t)(v406 & 0x7F) << v403;
              if (v406 < 0)
              {
                v403 += 7;
                v78 = v405;
                v15 = v404++ > 8;
                if (v15)
                  goto LABEL_391;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v83 = 0;
            }
            break;
          }
LABEL_676:
          *(_QWORD *)(a1 + 328) = v83;
          goto LABEL_821;
        case 0x30u:
          *v8 |= 0x20000000000uLL;
          v86 = *((_QWORD *)this + 1);
          v87 = *((_QWORD *)this + 2);
          v88 = *(_QWORD *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v92 = v86 + 1;
              *((_QWORD *)this + 1) = v86 + 1;
              v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0)
                goto LABEL_680;
              v89 += 7;
              v86 = v92;
              v15 = v90++ > 8;
            }
            while (!v15);
LABEL_398:
            v91 = 0;
            goto LABEL_680;
          }
          v407 = 0;
          v408 = 0;
          v91 = 0;
          if (v87 <= v86)
            v87 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v87 == v86)
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v409 = v86 + 1;
              v410 = *(_BYTE *)(v88 + v86);
              *((_QWORD *)this + 1) = v409;
              v91 |= (unint64_t)(v410 & 0x7F) << v407;
              if (v410 < 0)
              {
                v407 += 7;
                v86 = v409;
                v15 = v408++ > 8;
                if (v15)
                  goto LABEL_398;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v91 = 0;
            }
            break;
          }
LABEL_680:
          *(_QWORD *)(a1 + 336) = v91;
          goto LABEL_821;
        case 0x31u:
          *v8 |= 0x80000000000uLL;
          v94 = *((_QWORD *)this + 1);
          v95 = *((_QWORD *)this + 2);
          v96 = *(_QWORD *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            v97 = 0;
            v98 = 0;
            v99 = 0;
            do
            {
              v100 = v94 + 1;
              *((_QWORD *)this + 1) = v94 + 1;
              v101 = *(_BYTE *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0)
                goto LABEL_684;
              v97 += 7;
              v94 = v100;
              v15 = v98++ > 8;
            }
            while (!v15);
LABEL_405:
            v99 = 0;
            goto LABEL_684;
          }
          v411 = 0;
          v412 = 0;
          v99 = 0;
          if (v95 <= v94)
            v95 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v95 == v94)
            {
              v99 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v413 = v94 + 1;
              v414 = *(_BYTE *)(v96 + v94);
              *((_QWORD *)this + 1) = v413;
              v99 |= (unint64_t)(v414 & 0x7F) << v411;
              if (v414 < 0)
              {
                v411 += 7;
                v94 = v413;
                v15 = v412++ > 8;
                if (v15)
                  goto LABEL_405;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v99 = 0;
            }
            break;
          }
LABEL_684:
          *(_QWORD *)(a1 + 352) = v99;
          goto LABEL_821;
        case 0x32u:
          *v8 |= 0x100000000000uLL;
          v102 = *((_QWORD *)this + 1);
          v103 = *((_QWORD *)this + 2);
          v104 = *(_QWORD *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v108 = v102 + 1;
              *((_QWORD *)this + 1) = v102 + 1;
              v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0)
                goto LABEL_688;
              v105 += 7;
              v102 = v108;
              v15 = v106++ > 8;
            }
            while (!v15);
LABEL_412:
            LODWORD(v107) = 0;
            goto LABEL_688;
          }
          v415 = 0;
          v416 = 0;
          v107 = 0;
          if (v103 <= v102)
            v103 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v417 = v102 + 1;
              v418 = *(_BYTE *)(v104 + v102);
              *((_QWORD *)this + 1) = v417;
              v107 |= (unint64_t)(v418 & 0x7F) << v415;
              if (v418 < 0)
              {
                v415 += 7;
                v102 = v417;
                v15 = v416++ > 8;
                if (v15)
                  goto LABEL_412;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v107) = 0;
            }
            break;
          }
LABEL_688:
          *(_DWORD *)(a1 + 360) = v107;
          goto LABEL_821;
        case 0x33u:
          *v8 |= 0x1000000uLL;
          v110 = *((_QWORD *)this + 1);
          v111 = *((_QWORD *)this + 2);
          v112 = *(_QWORD *)this;
          if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
          {
            v113 = 0;
            v114 = 0;
            v115 = 0;
            do
            {
              v116 = v110 + 1;
              *((_QWORD *)this + 1) = v110 + 1;
              v117 = *(_BYTE *)(v112 + v110);
              v115 |= (unint64_t)(v117 & 0x7F) << v113;
              if ((v117 & 0x80) == 0)
                goto LABEL_692;
              v113 += 7;
              v110 = v116;
              v15 = v114++ > 8;
            }
            while (!v15);
LABEL_419:
            v115 = 0;
            goto LABEL_692;
          }
          v419 = 0;
          v420 = 0;
          v115 = 0;
          if (v111 <= v110)
            v111 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v111 == v110)
            {
              v115 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v421 = v110 + 1;
              v422 = *(_BYTE *)(v112 + v110);
              *((_QWORD *)this + 1) = v421;
              v115 |= (unint64_t)(v422 & 0x7F) << v419;
              if (v422 < 0)
              {
                v419 += 7;
                v110 = v421;
                v15 = v420++ > 8;
                if (v15)
                  goto LABEL_419;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v115 = 0;
            }
            break;
          }
LABEL_692:
          *(_QWORD *)(a1 + 200) = v115;
          goto LABEL_821;
        case 0x34u:
          *v8 |= 0x8000000uLL;
          v118 = *((_QWORD *)this + 1);
          v119 = *((_QWORD *)this + 2);
          v120 = *(_QWORD *)this;
          if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
          {
            v121 = 0;
            v122 = 0;
            v123 = 0;
            do
            {
              v124 = v118 + 1;
              *((_QWORD *)this + 1) = v118 + 1;
              v125 = *(_BYTE *)(v120 + v118);
              v123 |= (unint64_t)(v125 & 0x7F) << v121;
              if ((v125 & 0x80) == 0)
                goto LABEL_696;
              v121 += 7;
              v118 = v124;
              v15 = v122++ > 8;
            }
            while (!v15);
LABEL_426:
            v123 = 0;
            goto LABEL_696;
          }
          v423 = 0;
          v424 = 0;
          v123 = 0;
          if (v119 <= v118)
            v119 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v119 == v118)
            {
              v123 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v425 = v118 + 1;
              v426 = *(_BYTE *)(v120 + v118);
              *((_QWORD *)this + 1) = v425;
              v123 |= (unint64_t)(v426 & 0x7F) << v423;
              if (v426 < 0)
              {
                v423 += 7;
                v118 = v425;
                v15 = v424++ > 8;
                if (v15)
                  goto LABEL_426;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v123 = 0;
            }
            break;
          }
LABEL_696:
          *(_QWORD *)(a1 + 224) = v123;
          goto LABEL_821;
        case 0x35u:
          *v8 |= 0x2000000uLL;
          v126 = *((_QWORD *)this + 1);
          v127 = *((_QWORD *)this + 2);
          v128 = *(_QWORD *)this;
          if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
          {
            v129 = 0;
            v130 = 0;
            v131 = 0;
            do
            {
              v132 = v126 + 1;
              *((_QWORD *)this + 1) = v126 + 1;
              v133 = *(_BYTE *)(v128 + v126);
              v131 |= (unint64_t)(v133 & 0x7F) << v129;
              if ((v133 & 0x80) == 0)
                goto LABEL_700;
              v129 += 7;
              v126 = v132;
              v15 = v130++ > 8;
            }
            while (!v15);
LABEL_433:
            v131 = 0;
            goto LABEL_700;
          }
          v427 = 0;
          v428 = 0;
          v131 = 0;
          if (v127 <= v126)
            v127 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v127 == v126)
            {
              v131 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v429 = v126 + 1;
              v430 = *(_BYTE *)(v128 + v126);
              *((_QWORD *)this + 1) = v429;
              v131 |= (unint64_t)(v430 & 0x7F) << v427;
              if (v430 < 0)
              {
                v427 += 7;
                v126 = v429;
                v15 = v428++ > 8;
                if (v15)
                  goto LABEL_433;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v131 = 0;
            }
            break;
          }
LABEL_700:
          *(_QWORD *)(a1 + 208) = v131;
          goto LABEL_821;
        case 0x36u:
          *v8 |= 0x4000000uLL;
          v134 = *((_QWORD *)this + 1);
          v135 = *((_QWORD *)this + 2);
          v136 = *(_QWORD *)this;
          if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
          {
            v137 = 0;
            v138 = 0;
            v139 = 0;
            do
            {
              v140 = v134 + 1;
              *((_QWORD *)this + 1) = v134 + 1;
              v141 = *(_BYTE *)(v136 + v134);
              v139 |= (unint64_t)(v141 & 0x7F) << v137;
              if ((v141 & 0x80) == 0)
                goto LABEL_704;
              v137 += 7;
              v134 = v140;
              v15 = v138++ > 8;
            }
            while (!v15);
LABEL_440:
            v139 = 0;
            goto LABEL_704;
          }
          v431 = 0;
          v432 = 0;
          v139 = 0;
          if (v135 <= v134)
            v135 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v135 == v134)
            {
              v139 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v433 = v134 + 1;
              v434 = *(_BYTE *)(v136 + v134);
              *((_QWORD *)this + 1) = v433;
              v139 |= (unint64_t)(v434 & 0x7F) << v431;
              if (v434 < 0)
              {
                v431 += 7;
                v134 = v433;
                v15 = v432++ > 8;
                if (v15)
                  goto LABEL_440;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v139 = 0;
            }
            break;
          }
LABEL_704:
          *(_QWORD *)(a1 + 216) = v139;
          goto LABEL_821;
        case 0x37u:
          *v8 |= 0x400000uLL;
          v142 = *((_QWORD *)this + 1);
          v143 = *((_QWORD *)this + 2);
          v144 = *(_QWORD *)this;
          if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
          {
            v145 = 0;
            v146 = 0;
            v147 = 0;
            do
            {
              v148 = v142 + 1;
              *((_QWORD *)this + 1) = v142 + 1;
              v149 = *(_BYTE *)(v144 + v142);
              v147 |= (unint64_t)(v149 & 0x7F) << v145;
              if ((v149 & 0x80) == 0)
                goto LABEL_708;
              v145 += 7;
              v142 = v148;
              v15 = v146++ > 8;
            }
            while (!v15);
LABEL_447:
            v147 = 0;
            goto LABEL_708;
          }
          v435 = 0;
          v436 = 0;
          v147 = 0;
          if (v143 <= v142)
            v143 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v143 == v142)
            {
              v147 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v437 = v142 + 1;
              v438 = *(_BYTE *)(v144 + v142);
              *((_QWORD *)this + 1) = v437;
              v147 |= (unint64_t)(v438 & 0x7F) << v435;
              if (v438 < 0)
              {
                v435 += 7;
                v142 = v437;
                v15 = v436++ > 8;
                if (v15)
                  goto LABEL_447;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v147 = 0;
            }
            break;
          }
LABEL_708:
          *(_QWORD *)(a1 + 184) = v147;
          goto LABEL_821;
        case 0x38u:
          *v8 |= 0x800000uLL;
          v150 = *((_QWORD *)this + 1);
          v151 = *((_QWORD *)this + 2);
          v152 = *(_QWORD *)this;
          if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
          {
            v153 = 0;
            v154 = 0;
            v155 = 0;
            do
            {
              v156 = v150 + 1;
              *((_QWORD *)this + 1) = v150 + 1;
              v157 = *(_BYTE *)(v152 + v150);
              v155 |= (unint64_t)(v157 & 0x7F) << v153;
              if ((v157 & 0x80) == 0)
                goto LABEL_712;
              v153 += 7;
              v150 = v156;
              v15 = v154++ > 8;
            }
            while (!v15);
LABEL_454:
            v155 = 0;
            goto LABEL_712;
          }
          v439 = 0;
          v440 = 0;
          v155 = 0;
          if (v151 <= v150)
            v151 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v151 == v150)
            {
              v155 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v441 = v150 + 1;
              v442 = *(_BYTE *)(v152 + v150);
              *((_QWORD *)this + 1) = v441;
              v155 |= (unint64_t)(v442 & 0x7F) << v439;
              if (v442 < 0)
              {
                v439 += 7;
                v150 = v441;
                v15 = v440++ > 8;
                if (v15)
                  goto LABEL_454;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v155 = 0;
            }
            break;
          }
LABEL_712:
          *(_QWORD *)(a1 + 192) = v155;
          goto LABEL_821;
        case 0x3Bu:
          *v8 |= 0x20uLL;
          v158 = *((_QWORD *)this + 1);
          v159 = *((_QWORD *)this + 2);
          v160 = *(_QWORD *)this;
          if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
          {
            v161 = 0;
            v162 = 0;
            v163 = 0;
            do
            {
              v164 = v158 + 1;
              *((_QWORD *)this + 1) = v158 + 1;
              v165 = *(_BYTE *)(v160 + v158);
              v163 |= (unint64_t)(v165 & 0x7F) << v161;
              if ((v165 & 0x80) == 0)
                goto LABEL_716;
              v161 += 7;
              v158 = v164;
              v15 = v162++ > 8;
            }
            while (!v15);
LABEL_461:
            v163 = 0;
            goto LABEL_716;
          }
          v443 = 0;
          v444 = 0;
          v163 = 0;
          if (v159 <= v158)
            v159 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v159 == v158)
            {
              v163 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v445 = v158 + 1;
              v446 = *(_BYTE *)(v160 + v158);
              *((_QWORD *)this + 1) = v445;
              v163 |= (unint64_t)(v446 & 0x7F) << v443;
              if (v446 < 0)
              {
                v443 += 7;
                v158 = v445;
                v15 = v444++ > 8;
                if (v15)
                  goto LABEL_461;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v163 = 0;
            }
            break;
          }
LABEL_716:
          *(_QWORD *)(a1 + 48) = v163;
          goto LABEL_821;
        case 0x3Cu:
          *v8 |= 8uLL;
          v166 = *((_QWORD *)this + 1);
          v167 = *((_QWORD *)this + 2);
          v168 = *(_QWORD *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            v169 = 0;
            v170 = 0;
            v171 = 0;
            do
            {
              v172 = v166 + 1;
              *((_QWORD *)this + 1) = v166 + 1;
              v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0)
                goto LABEL_720;
              v169 += 7;
              v166 = v172;
              v15 = v170++ > 8;
            }
            while (!v15);
LABEL_468:
            v171 = 0;
            goto LABEL_720;
          }
          v447 = 0;
          v448 = 0;
          v171 = 0;
          if (v167 <= v166)
            v167 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v167 == v166)
            {
              v171 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v449 = v166 + 1;
              v450 = *(_BYTE *)(v168 + v166);
              *((_QWORD *)this + 1) = v449;
              v171 |= (unint64_t)(v450 & 0x7F) << v447;
              if (v450 < 0)
              {
                v447 += 7;
                v166 = v449;
                v15 = v448++ > 8;
                if (v15)
                  goto LABEL_468;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v171 = 0;
            }
            break;
          }
LABEL_720:
          *(_QWORD *)(a1 + 32) = v171;
          goto LABEL_821;
        case 0x3Du:
          *v8 |= 1uLL;
          v174 = *((_QWORD *)this + 1);
          v175 = *((_QWORD *)this + 2);
          v176 = *(_QWORD *)this;
          if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
          {
            v177 = 0;
            v178 = 0;
            v179 = 0;
            do
            {
              v180 = v174 + 1;
              *((_QWORD *)this + 1) = v174 + 1;
              v181 = *(_BYTE *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0)
                goto LABEL_724;
              v177 += 7;
              v174 = v180;
              v15 = v178++ > 8;
            }
            while (!v15);
LABEL_475:
            v179 = 0;
            goto LABEL_724;
          }
          v451 = 0;
          v452 = 0;
          v179 = 0;
          if (v175 <= v174)
            v175 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v175 == v174)
            {
              v179 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v453 = v174 + 1;
              v454 = *(_BYTE *)(v176 + v174);
              *((_QWORD *)this + 1) = v453;
              v179 |= (unint64_t)(v454 & 0x7F) << v451;
              if (v454 < 0)
              {
                v451 += 7;
                v174 = v453;
                v15 = v452++ > 8;
                if (v15)
                  goto LABEL_475;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v179 = 0;
            }
            break;
          }
LABEL_724:
          *(_QWORD *)(a1 + 8) = v179;
          goto LABEL_821;
        case 0x3Eu:
          *v8 |= 0x40uLL;
          v182 = *((_QWORD *)this + 1);
          v183 = *((_QWORD *)this + 2);
          v184 = *(_QWORD *)this;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            v185 = 0;
            v186 = 0;
            v187 = 0;
            do
            {
              v188 = v182 + 1;
              *((_QWORD *)this + 1) = v182 + 1;
              v189 = *(_BYTE *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0)
                goto LABEL_728;
              v185 += 7;
              v182 = v188;
              v15 = v186++ > 8;
            }
            while (!v15);
LABEL_482:
            v187 = 0;
            goto LABEL_728;
          }
          v455 = 0;
          v456 = 0;
          v187 = 0;
          if (v183 <= v182)
            v183 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v183 == v182)
            {
              v187 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v457 = v182 + 1;
              v458 = *(_BYTE *)(v184 + v182);
              *((_QWORD *)this + 1) = v457;
              v187 |= (unint64_t)(v458 & 0x7F) << v455;
              if (v458 < 0)
              {
                v455 += 7;
                v182 = v457;
                v15 = v456++ > 8;
                if (v15)
                  goto LABEL_482;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v187 = 0;
            }
            break;
          }
LABEL_728:
          *(_QWORD *)(a1 + 56) = v187;
          goto LABEL_821;
        case 0x3Fu:
          *v8 |= 0x100uLL;
          v190 = *((_QWORD *)this + 1);
          v191 = *((_QWORD *)this + 2);
          v192 = *(_QWORD *)this;
          if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
          {
            v193 = 0;
            v194 = 0;
            v195 = 0;
            do
            {
              v196 = v190 + 1;
              *((_QWORD *)this + 1) = v190 + 1;
              v197 = *(_BYTE *)(v192 + v190);
              v195 |= (unint64_t)(v197 & 0x7F) << v193;
              if ((v197 & 0x80) == 0)
                goto LABEL_732;
              v193 += 7;
              v190 = v196;
              v15 = v194++ > 8;
            }
            while (!v15);
LABEL_489:
            v195 = 0;
            goto LABEL_732;
          }
          v459 = 0;
          v460 = 0;
          v195 = 0;
          if (v191 <= v190)
            v191 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v191 == v190)
            {
              v195 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v461 = v190 + 1;
              v462 = *(_BYTE *)(v192 + v190);
              *((_QWORD *)this + 1) = v461;
              v195 |= (unint64_t)(v462 & 0x7F) << v459;
              if (v462 < 0)
              {
                v459 += 7;
                v190 = v461;
                v15 = v460++ > 8;
                if (v15)
                  goto LABEL_489;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v195 = 0;
            }
            break;
          }
LABEL_732:
          *(_QWORD *)(a1 + 72) = v195;
          goto LABEL_821;
        case 0x40u:
          *v8 |= 0x10uLL;
          v198 = *((_QWORD *)this + 1);
          v199 = *((_QWORD *)this + 2);
          v200 = *(_QWORD *)this;
          if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
          {
            v201 = 0;
            v202 = 0;
            v203 = 0;
            do
            {
              v204 = v198 + 1;
              *((_QWORD *)this + 1) = v198 + 1;
              v205 = *(_BYTE *)(v200 + v198);
              v203 |= (unint64_t)(v205 & 0x7F) << v201;
              if ((v205 & 0x80) == 0)
                goto LABEL_736;
              v201 += 7;
              v198 = v204;
              v15 = v202++ > 8;
            }
            while (!v15);
LABEL_496:
            v203 = 0;
            goto LABEL_736;
          }
          v463 = 0;
          v464 = 0;
          v203 = 0;
          if (v199 <= v198)
            v199 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v199 == v198)
            {
              v203 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v465 = v198 + 1;
              v466 = *(_BYTE *)(v200 + v198);
              *((_QWORD *)this + 1) = v465;
              v203 |= (unint64_t)(v466 & 0x7F) << v463;
              if (v466 < 0)
              {
                v463 += 7;
                v198 = v465;
                v15 = v464++ > 8;
                if (v15)
                  goto LABEL_496;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v203 = 0;
            }
            break;
          }
LABEL_736:
          *(_QWORD *)(a1 + 40) = v203;
          goto LABEL_821;
        case 0x41u:
          *v8 |= 0x200uLL;
          v206 = *((_QWORD *)this + 1);
          v207 = *((_QWORD *)this + 2);
          v208 = *(_QWORD *)this;
          if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
          {
            v209 = 0;
            v210 = 0;
            v211 = 0;
            do
            {
              v212 = v206 + 1;
              *((_QWORD *)this + 1) = v206 + 1;
              v213 = *(_BYTE *)(v208 + v206);
              v211 |= (unint64_t)(v213 & 0x7F) << v209;
              if ((v213 & 0x80) == 0)
                goto LABEL_740;
              v209 += 7;
              v206 = v212;
              v15 = v210++ > 8;
            }
            while (!v15);
LABEL_503:
            v211 = 0;
            goto LABEL_740;
          }
          v467 = 0;
          v468 = 0;
          v211 = 0;
          if (v207 <= v206)
            v207 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v207 == v206)
            {
              v211 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v469 = v206 + 1;
              v470 = *(_BYTE *)(v208 + v206);
              *((_QWORD *)this + 1) = v469;
              v211 |= (unint64_t)(v470 & 0x7F) << v467;
              if (v470 < 0)
              {
                v467 += 7;
                v206 = v469;
                v15 = v468++ > 8;
                if (v15)
                  goto LABEL_503;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v211 = 0;
            }
            break;
          }
LABEL_740:
          *(_QWORD *)(a1 + 80) = v211;
          goto LABEL_821;
        case 0x42u:
          *v8 |= 0x400uLL;
          v214 = *((_QWORD *)this + 1);
          v215 = *((_QWORD *)this + 2);
          v216 = *(_QWORD *)this;
          if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
          {
            v217 = 0;
            v218 = 0;
            v219 = 0;
            do
            {
              v220 = v214 + 1;
              *((_QWORD *)this + 1) = v214 + 1;
              v221 = *(_BYTE *)(v216 + v214);
              v219 |= (unint64_t)(v221 & 0x7F) << v217;
              if ((v221 & 0x80) == 0)
                goto LABEL_744;
              v217 += 7;
              v214 = v220;
              v15 = v218++ > 8;
            }
            while (!v15);
LABEL_510:
            v219 = 0;
            goto LABEL_744;
          }
          v471 = 0;
          v472 = 0;
          v219 = 0;
          if (v215 <= v214)
            v215 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v215 == v214)
            {
              v219 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v473 = v214 + 1;
              v474 = *(_BYTE *)(v216 + v214);
              *((_QWORD *)this + 1) = v473;
              v219 |= (unint64_t)(v474 & 0x7F) << v471;
              if (v474 < 0)
              {
                v471 += 7;
                v214 = v473;
                v15 = v472++ > 8;
                if (v15)
                  goto LABEL_510;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v219 = 0;
            }
            break;
          }
LABEL_744:
          *(_QWORD *)(a1 + 88) = v219;
          goto LABEL_821;
        case 0x43u:
          *v8 |= 0x800uLL;
          v222 = *((_QWORD *)this + 1);
          v223 = *((_QWORD *)this + 2);
          v224 = *(_QWORD *)this;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            v225 = 0;
            v226 = 0;
            v227 = 0;
            do
            {
              v228 = v222 + 1;
              *((_QWORD *)this + 1) = v222 + 1;
              v229 = *(_BYTE *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0)
                goto LABEL_748;
              v225 += 7;
              v222 = v228;
              v15 = v226++ > 8;
            }
            while (!v15);
LABEL_517:
            v227 = 0;
            goto LABEL_748;
          }
          v475 = 0;
          v476 = 0;
          v227 = 0;
          if (v223 <= v222)
            v223 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v223 == v222)
            {
              v227 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v477 = v222 + 1;
              v478 = *(_BYTE *)(v224 + v222);
              *((_QWORD *)this + 1) = v477;
              v227 |= (unint64_t)(v478 & 0x7F) << v475;
              if (v478 < 0)
              {
                v475 += 7;
                v222 = v477;
                v15 = v476++ > 8;
                if (v15)
                  goto LABEL_517;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v227 = 0;
            }
            break;
          }
LABEL_748:
          *(_QWORD *)(a1 + 96) = v227;
          goto LABEL_821;
        case 0x44u:
          *v8 |= 0x4000uLL;
          v230 = *((_QWORD *)this + 1);
          v231 = *((_QWORD *)this + 2);
          v232 = *(_QWORD *)this;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            v233 = 0;
            v234 = 0;
            v235 = 0;
            do
            {
              v236 = v230 + 1;
              *((_QWORD *)this + 1) = v230 + 1;
              v237 = *(_BYTE *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0)
                goto LABEL_752;
              v233 += 7;
              v230 = v236;
              v15 = v234++ > 8;
            }
            while (!v15);
LABEL_524:
            v235 = 0;
            goto LABEL_752;
          }
          v479 = 0;
          v480 = 0;
          v235 = 0;
          if (v231 <= v230)
            v231 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v231 == v230)
            {
              v235 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v481 = v230 + 1;
              v482 = *(_BYTE *)(v232 + v230);
              *((_QWORD *)this + 1) = v481;
              v235 |= (unint64_t)(v482 & 0x7F) << v479;
              if (v482 < 0)
              {
                v479 += 7;
                v230 = v481;
                v15 = v480++ > 8;
                if (v15)
                  goto LABEL_524;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v235 = 0;
            }
            break;
          }
LABEL_752:
          *(_QWORD *)(a1 + 120) = v235;
          goto LABEL_821;
        case 0x45u:
          *v8 |= 2uLL;
          v238 = *((_QWORD *)this + 1);
          v239 = *((_QWORD *)this + 2);
          v240 = *(_QWORD *)this;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            v241 = 0;
            v242 = 0;
            v243 = 0;
            do
            {
              v244 = v238 + 1;
              *((_QWORD *)this + 1) = v238 + 1;
              v245 = *(_BYTE *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0)
                goto LABEL_756;
              v241 += 7;
              v238 = v244;
              v15 = v242++ > 8;
            }
            while (!v15);
LABEL_531:
            v243 = 0;
            goto LABEL_756;
          }
          v483 = 0;
          v484 = 0;
          v243 = 0;
          if (v239 <= v238)
            v239 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v239 == v238)
            {
              v243 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v485 = v238 + 1;
              v486 = *(_BYTE *)(v240 + v238);
              *((_QWORD *)this + 1) = v485;
              v243 |= (unint64_t)(v486 & 0x7F) << v483;
              if (v486 < 0)
              {
                v483 += 7;
                v238 = v485;
                v15 = v484++ > 8;
                if (v15)
                  goto LABEL_531;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v243 = 0;
            }
            break;
          }
LABEL_756:
          *(_QWORD *)(a1 + 16) = v243;
          goto LABEL_821;
        case 0x46u:
          *v8 |= 0x8000uLL;
          v246 = *((_QWORD *)this + 1);
          v247 = *((_QWORD *)this + 2);
          v248 = *(_QWORD *)this;
          if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
          {
            v249 = 0;
            v250 = 0;
            v251 = 0;
            do
            {
              v252 = v246 + 1;
              *((_QWORD *)this + 1) = v246 + 1;
              v253 = *(_BYTE *)(v248 + v246);
              v251 |= (unint64_t)(v253 & 0x7F) << v249;
              if ((v253 & 0x80) == 0)
                goto LABEL_760;
              v249 += 7;
              v246 = v252;
              v15 = v250++ > 8;
            }
            while (!v15);
LABEL_538:
            v251 = 0;
            goto LABEL_760;
          }
          v487 = 0;
          v488 = 0;
          v251 = 0;
          if (v247 <= v246)
            v247 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v247 == v246)
            {
              v251 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v489 = v246 + 1;
              v490 = *(_BYTE *)(v248 + v246);
              *((_QWORD *)this + 1) = v489;
              v251 |= (unint64_t)(v490 & 0x7F) << v487;
              if (v490 < 0)
              {
                v487 += 7;
                v246 = v489;
                v15 = v488++ > 8;
                if (v15)
                  goto LABEL_538;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v251 = 0;
            }
            break;
          }
LABEL_760:
          *(_QWORD *)(a1 + 128) = v251;
          goto LABEL_821;
        case 0x47u:
          *v8 |= 0x800000000uLL;
          v254 = *((_QWORD *)this + 1);
          v255 = *((_QWORD *)this + 2);
          v256 = *(_QWORD *)this;
          if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
          {
            v257 = 0;
            v258 = 0;
            v259 = 0;
            do
            {
              v260 = v254 + 1;
              *((_QWORD *)this + 1) = v254 + 1;
              v261 = *(_BYTE *)(v256 + v254);
              v259 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0)
                goto LABEL_764;
              v257 += 7;
              v254 = v260;
              v15 = v258++ > 8;
            }
            while (!v15);
LABEL_545:
            v259 = 0;
            goto LABEL_764;
          }
          v491 = 0;
          v492 = 0;
          v259 = 0;
          if (v255 <= v254)
            v255 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v255 == v254)
            {
              v259 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v493 = v254 + 1;
              v494 = *(_BYTE *)(v256 + v254);
              *((_QWORD *)this + 1) = v493;
              v259 |= (unint64_t)(v494 & 0x7F) << v491;
              if (v494 < 0)
              {
                v491 += 7;
                v254 = v493;
                v15 = v492++ > 8;
                if (v15)
                  goto LABEL_545;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v259 = 0;
            }
            break;
          }
LABEL_764:
          *(_QWORD *)(a1 + 288) = v259;
          goto LABEL_821;
        case 0x48u:
          *v8 |= 0x400000000uLL;
          v262 = *((_QWORD *)this + 1);
          v263 = *((_QWORD *)this + 2);
          v264 = *(_QWORD *)this;
          if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
          {
            v265 = 0;
            v266 = 0;
            v267 = 0;
            do
            {
              v268 = v262 + 1;
              *((_QWORD *)this + 1) = v262 + 1;
              v269 = *(_BYTE *)(v264 + v262);
              v267 |= (unint64_t)(v269 & 0x7F) << v265;
              if ((v269 & 0x80) == 0)
                goto LABEL_768;
              v265 += 7;
              v262 = v268;
              v15 = v266++ > 8;
            }
            while (!v15);
LABEL_552:
            v267 = 0;
            goto LABEL_768;
          }
          v495 = 0;
          v496 = 0;
          v267 = 0;
          if (v263 <= v262)
            v263 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v263 == v262)
            {
              v267 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v497 = v262 + 1;
              v498 = *(_BYTE *)(v264 + v262);
              *((_QWORD *)this + 1) = v497;
              v267 |= (unint64_t)(v498 & 0x7F) << v495;
              if (v498 < 0)
              {
                v495 += 7;
                v262 = v497;
                v15 = v496++ > 8;
                if (v15)
                  goto LABEL_552;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v267 = 0;
            }
            break;
          }
LABEL_768:
          *(_QWORD *)(a1 + 280) = v267;
          goto LABEL_821;
        case 0x49u:
          *v8 |= 0x200000000uLL;
          v270 = *((_QWORD *)this + 1);
          v271 = *((_QWORD *)this + 2);
          v272 = *(_QWORD *)this;
          if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
          {
            v273 = 0;
            v274 = 0;
            v275 = 0;
            do
            {
              v276 = v270 + 1;
              *((_QWORD *)this + 1) = v270 + 1;
              v277 = *(_BYTE *)(v272 + v270);
              v275 |= (unint64_t)(v277 & 0x7F) << v273;
              if ((v277 & 0x80) == 0)
                goto LABEL_772;
              v273 += 7;
              v270 = v276;
              v15 = v274++ > 8;
            }
            while (!v15);
LABEL_559:
            v275 = 0;
            goto LABEL_772;
          }
          v499 = 0;
          v500 = 0;
          v275 = 0;
          if (v271 <= v270)
            v271 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v271 == v270)
            {
              v275 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v501 = v270 + 1;
              v502 = *(_BYTE *)(v272 + v270);
              *((_QWORD *)this + 1) = v501;
              v275 |= (unint64_t)(v502 & 0x7F) << v499;
              if (v502 < 0)
              {
                v499 += 7;
                v270 = v501;
                v15 = v500++ > 8;
                if (v15)
                  goto LABEL_559;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v275 = 0;
            }
            break;
          }
LABEL_772:
          *(_QWORD *)(a1 + 272) = v275;
          goto LABEL_821;
        case 0x4Au:
          *v8 |= 0x100000000uLL;
          v278 = *((_QWORD *)this + 1);
          v279 = *((_QWORD *)this + 2);
          v280 = *(_QWORD *)this;
          if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
          {
            v281 = 0;
            v282 = 0;
            v283 = 0;
            do
            {
              v284 = v278 + 1;
              *((_QWORD *)this + 1) = v278 + 1;
              v285 = *(_BYTE *)(v280 + v278);
              v283 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0)
                goto LABEL_776;
              v281 += 7;
              v278 = v284;
              v15 = v282++ > 8;
            }
            while (!v15);
LABEL_566:
            v283 = 0;
            goto LABEL_776;
          }
          v503 = 0;
          v504 = 0;
          v283 = 0;
          if (v279 <= v278)
            v279 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v279 == v278)
            {
              v283 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v505 = v278 + 1;
              v506 = *(_BYTE *)(v280 + v278);
              *((_QWORD *)this + 1) = v505;
              v283 |= (unint64_t)(v506 & 0x7F) << v503;
              if (v506 < 0)
              {
                v503 += 7;
                v278 = v505;
                v15 = v504++ > 8;
                if (v15)
                  goto LABEL_566;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v283 = 0;
            }
            break;
          }
LABEL_776:
          *(_QWORD *)(a1 + 264) = v283;
          goto LABEL_821;
        case 0x51u:
          *v8 |= 0x20000000uLL;
          v286 = *((_QWORD *)this + 1);
          v287 = *((_QWORD *)this + 2);
          v288 = *(_QWORD *)this;
          if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
          {
            v289 = 0;
            v290 = 0;
            v291 = 0;
            do
            {
              v292 = v286 + 1;
              *((_QWORD *)this + 1) = v286 + 1;
              v293 = *(_BYTE *)(v288 + v286);
              v291 |= (unint64_t)(v293 & 0x7F) << v289;
              if ((v293 & 0x80) == 0)
                goto LABEL_780;
              v289 += 7;
              v286 = v292;
              v15 = v290++ > 8;
            }
            while (!v15);
LABEL_573:
            v291 = 0;
            goto LABEL_780;
          }
          v507 = 0;
          v508 = 0;
          v291 = 0;
          if (v287 <= v286)
            v287 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v287 == v286)
            {
              v291 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v509 = v286 + 1;
              v510 = *(_BYTE *)(v288 + v286);
              *((_QWORD *)this + 1) = v509;
              v291 |= (unint64_t)(v510 & 0x7F) << v507;
              if (v510 < 0)
              {
                v507 += 7;
                v286 = v509;
                v15 = v508++ > 8;
                if (v15)
                  goto LABEL_573;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v291 = 0;
            }
            break;
          }
LABEL_780:
          *(_QWORD *)(a1 + 240) = v291;
          goto LABEL_821;
        case 0x52u:
          *v8 |= 0x10000000uLL;
          v294 = *((_QWORD *)this + 1);
          v295 = *((_QWORD *)this + 2);
          v296 = *(_QWORD *)this;
          if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
          {
            v297 = 0;
            v298 = 0;
            v299 = 0;
            do
            {
              v300 = v294 + 1;
              *((_QWORD *)this + 1) = v294 + 1;
              v301 = *(_BYTE *)(v296 + v294);
              v299 |= (unint64_t)(v301 & 0x7F) << v297;
              if ((v301 & 0x80) == 0)
                goto LABEL_784;
              v297 += 7;
              v294 = v300;
              v15 = v298++ > 8;
            }
            while (!v15);
LABEL_580:
            v299 = 0;
            goto LABEL_784;
          }
          v511 = 0;
          v512 = 0;
          v299 = 0;
          if (v295 <= v294)
            v295 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v295 == v294)
            {
              v299 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v513 = v294 + 1;
              v514 = *(_BYTE *)(v296 + v294);
              *((_QWORD *)this + 1) = v513;
              v299 |= (unint64_t)(v514 & 0x7F) << v511;
              if (v514 < 0)
              {
                v511 += 7;
                v294 = v513;
                v15 = v512++ > 8;
                if (v15)
                  goto LABEL_580;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v299 = 0;
            }
            break;
          }
LABEL_784:
          *(_QWORD *)(a1 + 232) = v299;
          goto LABEL_821;
        case 0x53u:
          *v8 |= 0x2000uLL;
          v302 = *((_QWORD *)this + 1);
          v303 = *((_QWORD *)this + 2);
          v304 = *(_QWORD *)this;
          if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
          {
            v305 = 0;
            v306 = 0;
            v307 = 0;
            do
            {
              v308 = v302 + 1;
              *((_QWORD *)this + 1) = v302 + 1;
              v309 = *(_BYTE *)(v304 + v302);
              v307 |= (unint64_t)(v309 & 0x7F) << v305;
              if ((v309 & 0x80) == 0)
                goto LABEL_788;
              v305 += 7;
              v302 = v308;
              v15 = v306++ > 8;
            }
            while (!v15);
LABEL_587:
            v307 = 0;
            goto LABEL_788;
          }
          v515 = 0;
          v516 = 0;
          v307 = 0;
          if (v303 <= v302)
            v303 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v303 == v302)
            {
              v307 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v517 = v302 + 1;
              v518 = *(_BYTE *)(v304 + v302);
              *((_QWORD *)this + 1) = v517;
              v307 |= (unint64_t)(v518 & 0x7F) << v515;
              if (v518 < 0)
              {
                v515 += 7;
                v302 = v517;
                v15 = v516++ > 8;
                if (v15)
                  goto LABEL_587;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v307 = 0;
            }
            break;
          }
LABEL_788:
          *(_QWORD *)(a1 + 112) = v307;
          goto LABEL_821;
        case 0x54u:
          *v8 |= 0x10000uLL;
          v310 = *((_QWORD *)this + 1);
          v311 = *((_QWORD *)this + 2);
          v312 = *(_QWORD *)this;
          if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
          {
            v313 = 0;
            v314 = 0;
            v315 = 0;
            do
            {
              v316 = v310 + 1;
              *((_QWORD *)this + 1) = v310 + 1;
              v317 = *(_BYTE *)(v312 + v310);
              v315 |= (unint64_t)(v317 & 0x7F) << v313;
              if ((v317 & 0x80) == 0)
                goto LABEL_792;
              v313 += 7;
              v310 = v316;
              v15 = v314++ > 8;
            }
            while (!v15);
LABEL_594:
            v315 = 0;
            goto LABEL_792;
          }
          v519 = 0;
          v520 = 0;
          v315 = 0;
          if (v311 <= v310)
            v311 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v311 == v310)
            {
              v315 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v521 = v310 + 1;
              v522 = *(_BYTE *)(v312 + v310);
              *((_QWORD *)this + 1) = v521;
              v315 |= (unint64_t)(v522 & 0x7F) << v519;
              if (v522 < 0)
              {
                v519 += 7;
                v310 = v521;
                v15 = v520++ > 8;
                if (v15)
                  goto LABEL_594;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v315 = 0;
            }
            break;
          }
LABEL_792:
          *(_QWORD *)(a1 + 136) = v315;
          goto LABEL_821;
        case 0x55u:
          *v8 |= 4uLL;
          v318 = *((_QWORD *)this + 1);
          v319 = *((_QWORD *)this + 2);
          v320 = *(_QWORD *)this;
          if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
          {
            v321 = 0;
            v322 = 0;
            v323 = 0;
            do
            {
              v324 = v318 + 1;
              *((_QWORD *)this + 1) = v318 + 1;
              v325 = *(_BYTE *)(v320 + v318);
              v323 |= (unint64_t)(v325 & 0x7F) << v321;
              if ((v325 & 0x80) == 0)
                goto LABEL_796;
              v321 += 7;
              v318 = v324;
              v15 = v322++ > 8;
            }
            while (!v15);
LABEL_601:
            v323 = 0;
            goto LABEL_796;
          }
          v523 = 0;
          v524 = 0;
          v323 = 0;
          if (v319 <= v318)
            v319 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v319 == v318)
            {
              v323 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v525 = v318 + 1;
              v526 = *(_BYTE *)(v320 + v318);
              *((_QWORD *)this + 1) = v525;
              v323 |= (unint64_t)(v526 & 0x7F) << v523;
              if (v526 < 0)
              {
                v523 += 7;
                v318 = v525;
                v15 = v524++ > 8;
                if (v15)
                  goto LABEL_601;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v323 = 0;
            }
            break;
          }
LABEL_796:
          *(_QWORD *)(a1 + 24) = v323;
          goto LABEL_821;
        case 0x56u:
          *v8 |= 0x40000uLL;
          v326 = *((_QWORD *)this + 1);
          v327 = *((_QWORD *)this + 2);
          v328 = *(_QWORD *)this;
          if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
          {
            v329 = 0;
            v330 = 0;
            v331 = 0;
            do
            {
              v332 = v326 + 1;
              *((_QWORD *)this + 1) = v326 + 1;
              v333 = *(_BYTE *)(v328 + v326);
              v331 |= (unint64_t)(v333 & 0x7F) << v329;
              if ((v333 & 0x80) == 0)
                goto LABEL_800;
              v329 += 7;
              v326 = v332;
              v15 = v330++ > 8;
            }
            while (!v15);
LABEL_608:
            v331 = 0;
            goto LABEL_800;
          }
          v527 = 0;
          v528 = 0;
          v331 = 0;
          if (v327 <= v326)
            v327 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v327 == v326)
            {
              v331 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v529 = v326 + 1;
              v530 = *(_BYTE *)(v328 + v326);
              *((_QWORD *)this + 1) = v529;
              v331 |= (unint64_t)(v530 & 0x7F) << v527;
              if (v530 < 0)
              {
                v527 += 7;
                v326 = v529;
                v15 = v528++ > 8;
                if (v15)
                  goto LABEL_608;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v331 = 0;
            }
            break;
          }
LABEL_800:
          *(_QWORD *)(a1 + 152) = v331;
          goto LABEL_821;
        case 0x57u:
          *v8 |= 0x20000uLL;
          v334 = *((_QWORD *)this + 1);
          v335 = *((_QWORD *)this + 2);
          v336 = *(_QWORD *)this;
          if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
          {
            v337 = 0;
            v338 = 0;
            v339 = 0;
            do
            {
              v340 = v334 + 1;
              *((_QWORD *)this + 1) = v334 + 1;
              v341 = *(_BYTE *)(v336 + v334);
              v339 |= (unint64_t)(v341 & 0x7F) << v337;
              if ((v341 & 0x80) == 0)
                goto LABEL_804;
              v337 += 7;
              v334 = v340;
              v15 = v338++ > 8;
            }
            while (!v15);
LABEL_615:
            v339 = 0;
            goto LABEL_804;
          }
          v531 = 0;
          v532 = 0;
          v339 = 0;
          if (v335 <= v334)
            v335 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v335 == v334)
            {
              v339 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v533 = v334 + 1;
              v534 = *(_BYTE *)(v336 + v334);
              *((_QWORD *)this + 1) = v533;
              v339 |= (unint64_t)(v534 & 0x7F) << v531;
              if (v534 < 0)
              {
                v531 += 7;
                v334 = v533;
                v15 = v532++ > 8;
                if (v15)
                  goto LABEL_615;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v339 = 0;
            }
            break;
          }
LABEL_804:
          *(_QWORD *)(a1 + 144) = v339;
          goto LABEL_821;
        case 0x58u:
          *v8 |= 0x80uLL;
          v342 = *((_QWORD *)this + 1);
          v343 = *((_QWORD *)this + 2);
          v344 = *(_QWORD *)this;
          if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
          {
            v345 = 0;
            v346 = 0;
            v347 = 0;
            do
            {
              v348 = v342 + 1;
              *((_QWORD *)this + 1) = v342 + 1;
              v349 = *(_BYTE *)(v344 + v342);
              v347 |= (unint64_t)(v349 & 0x7F) << v345;
              if ((v349 & 0x80) == 0)
                goto LABEL_808;
              v345 += 7;
              v342 = v348;
              v15 = v346++ > 8;
            }
            while (!v15);
LABEL_622:
            v347 = 0;
            goto LABEL_808;
          }
          v535 = 0;
          v536 = 0;
          v347 = 0;
          if (v343 <= v342)
            v343 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v343 == v342)
            {
              v347 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v537 = v342 + 1;
              v538 = *(_BYTE *)(v344 + v342);
              *((_QWORD *)this + 1) = v537;
              v347 |= (unint64_t)(v538 & 0x7F) << v535;
              if (v538 < 0)
              {
                v535 += 7;
                v342 = v537;
                v15 = v536++ > 8;
                if (v15)
                  goto LABEL_622;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v347 = 0;
            }
            break;
          }
LABEL_808:
          *(_QWORD *)(a1 + 64) = v347;
          goto LABEL_821;
        case 0x59u:
          *v8 |= 0x1000uLL;
          v350 = *((_QWORD *)this + 1);
          v351 = *((_QWORD *)this + 2);
          v352 = *(_QWORD *)this;
          if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
          {
            v353 = 0;
            v354 = 0;
            v355 = 0;
            do
            {
              v356 = v350 + 1;
              *((_QWORD *)this + 1) = v350 + 1;
              v357 = *(_BYTE *)(v352 + v350);
              v355 |= (unint64_t)(v357 & 0x7F) << v353;
              if ((v357 & 0x80) == 0)
                goto LABEL_812;
              v353 += 7;
              v350 = v356;
              v15 = v354++ > 8;
            }
            while (!v15);
LABEL_629:
            v355 = 0;
            goto LABEL_812;
          }
          v539 = 0;
          v540 = 0;
          v355 = 0;
          if (v351 <= v350)
            v351 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v351 == v350)
            {
              v355 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v541 = v350 + 1;
              v542 = *(_BYTE *)(v352 + v350);
              *((_QWORD *)this + 1) = v541;
              v355 |= (unint64_t)(v542 & 0x7F) << v539;
              if (v542 < 0)
              {
                v539 += 7;
                v350 = v541;
                v15 = v540++ > 8;
                if (v15)
                  goto LABEL_629;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v355 = 0;
            }
            break;
          }
LABEL_812:
          *(_QWORD *)(a1 + 104) = v355;
          goto LABEL_821;
        case 0x64u:
          *v8 |= 0x4000000000uLL;
          v358 = *((_QWORD *)this + 1);
          v359 = *((_QWORD *)this + 2);
          v360 = *(_QWORD *)this;
          if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
          {
            v361 = 0;
            v362 = 0;
            v363 = 0;
            do
            {
              v364 = v358 + 1;
              *((_QWORD *)this + 1) = v358 + 1;
              v365 = *(_BYTE *)(v360 + v358);
              v363 |= (unint64_t)(v365 & 0x7F) << v361;
              if ((v365 & 0x80) == 0)
                goto LABEL_816;
              v361 += 7;
              v358 = v364;
              v15 = v362++ > 8;
            }
            while (!v15);
LABEL_636:
            v363 = 0;
            goto LABEL_816;
          }
          v543 = 0;
          v544 = 0;
          v363 = 0;
          if (v359 <= v358)
            v359 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v359 == v358)
            {
              v363 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v545 = v358 + 1;
              v546 = *(_BYTE *)(v360 + v358);
              *((_QWORD *)this + 1) = v545;
              v363 |= (unint64_t)(v546 & 0x7F) << v543;
              if (v546 < 0)
              {
                v543 += 7;
                v358 = v545;
                v15 = v544++ > 8;
                if (v15)
                  goto LABEL_636;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v363 = 0;
            }
            break;
          }
LABEL_816:
          *(_QWORD *)(a1 + 312) = v363;
          goto LABEL_821;
        case 0x65u:
          *v8 |= 0x1000000000uLL;
          v366 = *((_QWORD *)this + 1);
          v367 = *((_QWORD *)this + 2);
          v368 = *(_QWORD *)this;
          if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
          {
            v369 = 0;
            v370 = 0;
            v371 = 0;
            do
            {
              v372 = v366 + 1;
              *((_QWORD *)this + 1) = v366 + 1;
              v373 = *(_BYTE *)(v368 + v366);
              v371 |= (unint64_t)(v373 & 0x7F) << v369;
              if ((v373 & 0x80) == 0)
                goto LABEL_820;
              v369 += 7;
              v366 = v372;
              v15 = v370++ > 8;
            }
            while (!v15);
LABEL_643:
            v371 = 0;
            goto LABEL_820;
          }
          v547 = 0;
          v548 = 0;
          v371 = 0;
          if (v367 <= v366)
            v367 = *((_QWORD *)this + 1);
          break;
        case 0x66u:
          *v8 |= 0x2000000000uLL;
          v374 = *((_QWORD *)this + 1);
          if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 304) = *(_QWORD *)(*(_QWORD *)this + v374);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_821;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_821;
      }
      while (1)
      {
        if (v367 == v366)
        {
          v371 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_820;
        }
        v549 = v366 + 1;
        v550 = *(_BYTE *)(v368 + v366);
        *((_QWORD *)this + 1) = v549;
        v371 |= (unint64_t)(v550 & 0x7F) << v547;
        if ((v550 & 0x80) == 0)
          break;
        v547 += 7;
        v366 = v549;
        v15 = v548++ > 8;
        if (v15)
          goto LABEL_643;
      }
      if (*((_BYTE *)this + 24))
        v371 = 0;
LABEL_820:
      *(_QWORD *)(a1 + 296) = v371;
LABEL_821:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F219248(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v3 = result;
  v4 = (uint64_t *)(result + 364);
  v5 = *(_QWORD *)(result + 364);
  if ((v5 & 0x40000000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0)
      goto LABEL_6;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_7;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_8;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_9;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_10;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_11;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_12;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_13;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_14;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0)
      goto LABEL_18;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0)
      goto LABEL_20;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0)
      goto LABEL_21;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0)
      goto LABEL_23;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0)
      goto LABEL_24;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0)
      goto LABEL_26;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0)
      goto LABEL_29;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0)
      goto LABEL_30;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_33;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_36;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0)
      goto LABEL_38;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0)
      goto LABEL_39;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0)
      goto LABEL_40;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0)
      goto LABEL_41;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0)
      goto LABEL_42;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0)
      goto LABEL_43;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_44;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_45;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 304));
  }
LABEL_90:
  result = PB::Writer::writeVarInt(this);
  if ((*v4 & 0x2000000000) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 304));
  return result;
}

_QWORD *sub_18F219768(_QWORD *result)
{
  *result = &off_1E29505F8;
  *(_QWORD *)((char *)result + 156) = 0;
  return result;
}

void sub_18F219780(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2197A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "conisderedSOS");
    v5 = *(_QWORD *)(a1 + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "didCancelSOS");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "distanceTraveled", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "fallAlertUndelayedTimestamp", *(double *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "fallTime");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "fromState");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isActive");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isStand");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "maxNumQuiescentBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxNumStaticBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "nominalQuiescentThreshold");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "numActiveBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "numCyclingEpochs");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "numNonzeroStepEpochs");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "numPeaks");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "numQuiescentBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "numSharpPeaks");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "numStandBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "numStaticBins");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "onBodyFeature", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0)
      goto LABEL_30;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "quiescentThreshold");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_31;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "sensorTime");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "sentFallAlert");
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "sharpPeaksDelaySpread", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_34;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_35;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_36;
LABEL_73:
    PB::TextFormatter::format(this, "toState");
    if ((*(_QWORD *)(a1 + 156) & 0x80000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_37;
  }
LABEL_72:
  PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 156);
  if ((v5 & 0x40000000) != 0)
    goto LABEL_73;
LABEL_36:
  if ((v5 & 0x80000000) != 0)
LABEL_37:
    PB::TextFormatter::format(this, "totalNumStaticBins");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F219C54(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  BOOL v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  unint64_t v115;
  char v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  BOOL v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  char v128;
  unsigned int v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char v152;
  unsigned int v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  unint64_t v163;
  char v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  char v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char v186;
  unsigned int v187;
  uint64_t v188;
  unint64_t v189;
  char v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  unint64_t v199;
  char v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  char v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  char v208;
  unint64_t v209;
  char v211;
  unsigned int v212;
  unint64_t v213;
  char v214;
  char v215;
  unsigned int v216;
  unint64_t v217;
  char v218;
  char v219;
  unsigned int v220;
  unint64_t v221;
  char v222;
  char v223;
  unsigned int v224;
  unint64_t v225;
  char v226;
  char v227;
  unsigned int v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  unint64_t v233;
  char v234;
  char v235;
  unsigned int v236;
  unint64_t v237;
  char v238;
  char v239;
  unsigned int v240;
  unint64_t v241;
  char v242;
  char v243;
  unsigned int v244;
  unint64_t v245;
  char v246;
  char v247;
  unsigned int v248;
  unint64_t v249;
  char v250;
  char v251;
  unsigned int v252;
  unint64_t v253;
  char v254;
  char v255;
  unsigned int v256;
  unint64_t v257;
  char v258;
  char v259;
  unsigned int v260;
  unint64_t v261;
  char v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  char v266;
  char v267;
  unsigned int v268;
  unint64_t v269;
  char v270;
  char v271;
  unsigned int v272;
  unint64_t v273;
  char v274;
  char v275;
  unsigned int v276;
  unint64_t v277;
  char v278;
  char v279;
  unsigned int v280;
  unint64_t v281;
  char v282;
  char v283;
  unsigned int v284;
  unint64_t v285;
  char v286;
  char v287;
  unsigned int v288;
  unint64_t v289;
  char v290;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 156) |= 4uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v20);
          goto LABEL_364;
        case 2u:
          *(_QWORD *)(a1 + 156) |= 8uLL;
          v22 = *((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
          v24 = *(_QWORD *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v28 = v22 + 1;
              *((_QWORD *)this + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                goto LABEL_368;
              v25 += 7;
              v22 = v28;
              v14 = v26++ > 8;
            }
            while (!v14);
LABEL_221:
            v27 = 0;
            goto LABEL_368;
          }
          v211 = 0;
          v212 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v23 == v22)
            {
              v27 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v213 = v22 + 1;
              v214 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)this + 1) = v213;
              v27 |= (unint64_t)(v214 & 0x7F) << v211;
              if (v214 < 0)
              {
                v211 += 7;
                v22 = v213;
                v14 = v212++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v27 = 0;
            }
            break;
          }
LABEL_368:
          *(_QWORD *)(a1 + 32) = v27;
          goto LABEL_210;
        case 3u:
          *(_QWORD *)(a1 + 156) |= 2uLL;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          v32 = *(_QWORD *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)this + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_372;
              v33 += 7;
              v30 = v36;
              v14 = v34++ > 8;
            }
            while (!v14);
LABEL_228:
            v35 = 0;
            goto LABEL_372;
          }
          v215 = 0;
          v216 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v31 == v30)
            {
              v35 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v217 = v30 + 1;
              v218 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)this + 1) = v217;
              v35 |= (unint64_t)(v218 & 0x7F) << v215;
              if (v218 < 0)
              {
                v215 += 7;
                v30 = v217;
                v14 = v216++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v35 = 0;
            }
            break;
          }
LABEL_372:
          *(_QWORD *)(a1 + 16) = v35;
          goto LABEL_210;
        case 4u:
          *(_QWORD *)(a1 + 156) |= 0x400uLL;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_191;
        case 5u:
          *(_QWORD *)(a1 + 156) |= 0x200uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_191;
        case 6u:
          *(_QWORD *)(a1 + 156) |= 0x100uLL;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_191;
        case 7u:
          *(_QWORD *)(a1 + 156) |= 0x800uLL;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_376;
              v44 += 7;
              v41 = v47;
              v14 = v45++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v46) = 0;
            goto LABEL_376;
          }
          v219 = 0;
          v220 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v221 = v41 + 1;
              v222 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v221;
              v46 |= (unint64_t)(v222 & 0x7F) << v219;
              if (v222 < 0)
              {
                v219 += 7;
                v41 = v221;
                v14 = v220++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 68) = v46;
          goto LABEL_210;
        case 8u:
          *(_QWORD *)(a1 + 156) |= 0x80000000uLL;
          v49 = *((_QWORD *)this + 1);
          v50 = *((_QWORD *)this + 2);
          v51 = *(_QWORD *)this;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            v52 = 0;
            v53 = 0;
            v54 = 0;
            do
            {
              v55 = v49 + 1;
              *((_QWORD *)this + 1) = v49 + 1;
              v56 = *(_BYTE *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0)
                goto LABEL_380;
              v52 += 7;
              v49 = v55;
              v14 = v53++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v54) = 0;
            goto LABEL_380;
          }
          v223 = 0;
          v224 = 0;
          v54 = 0;
          if (v50 <= v49)
            v50 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v225 = v49 + 1;
              v226 = *(_BYTE *)(v51 + v49);
              *((_QWORD *)this + 1) = v225;
              v54 |= (unint64_t)(v226 & 0x7F) << v223;
              if (v226 < 0)
              {
                v223 += 7;
                v49 = v225;
                v14 = v224++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v54) = 0;
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 148) = v54;
          goto LABEL_210;
        case 9u:
          *(_QWORD *)(a1 + 156) |= 0x1000uLL;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          v59 = *(_QWORD *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_384;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v62) = 0;
            goto LABEL_384;
          }
          v227 = 0;
          v228 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v229 = v57 + 1;
              v230 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)this + 1) = v229;
              v62 |= (unint64_t)(v230 & 0x7F) << v227;
              if (v230 < 0)
              {
                v227 += 7;
                v57 = v229;
                v14 = v228++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 72) = v62;
          goto LABEL_210;
        case 0xAu:
          *(_QWORD *)(a1 + 156) |= 0x10000000uLL;
          v65 = *((_QWORD *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v65);
          goto LABEL_191;
        case 0xBu:
          *(_QWORD *)(a1 + 156) |= 0x20000000uLL;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v66);
          goto LABEL_191;
        case 0xCu:
          *(_QWORD *)(a1 + 156) |= 0x8000000uLL;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v67);
          goto LABEL_191;
        case 0xDu:
          *(_QWORD *)(a1 + 156) |= 0x40000uLL;
          v68 = *((_QWORD *)this + 1);
          v69 = *((_QWORD *)this + 2);
          v70 = *(_QWORD *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)this + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_388;
              v71 += 7;
              v68 = v74;
              v14 = v72++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v73) = 0;
            goto LABEL_388;
          }
          v231 = 0;
          v232 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v233 = v68 + 1;
              v234 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)this + 1) = v233;
              v73 |= (unint64_t)(v234 & 0x7F) << v231;
              if (v234 < 0)
              {
                v231 += 7;
                v68 = v233;
                v14 = v232++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 96) = v73;
          goto LABEL_210;
        case 0xEu:
          *(_QWORD *)(a1 + 156) |= 0x4000uLL;
          v76 = *((_QWORD *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v76);
          goto LABEL_191;
        case 0xFu:
          *(_QWORD *)(a1 + 156) |= 0x20uLL;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_392;
              v80 += 7;
              v77 = v83;
              v14 = v81++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v82) = 0;
            goto LABEL_392;
          }
          v235 = 0;
          v236 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v237 = v77 + 1;
              v238 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v237;
              v82 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                v77 = v237;
                v14 = v236++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v82) = 0;
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 44) = v82;
          goto LABEL_210;
        case 0x10u:
          *(_QWORD *)(a1 + 156) |= 0x400000000uLL;
          v85 = *((_QWORD *)this + 1);
          if (v85 >= *((_QWORD *)this + 2))
          {
            v88 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v86 = v85 + 1;
            v87 = *(unsigned __int8 *)(*(_QWORD *)this + v85);
            *((_QWORD *)this + 1) = v86;
            v88 = v87 != 0;
          }
          *(_BYTE *)(a1 + 154) = v88;
          goto LABEL_210;
        case 0x11u:
          *(_QWORD *)(a1 + 156) |= 0x200000000uLL;
          v89 = *((_QWORD *)this + 1);
          if (v89 >= *((_QWORD *)this + 2))
          {
            v92 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v90 = v89 + 1;
            v91 = *(unsigned __int8 *)(*(_QWORD *)this + v89);
            *((_QWORD *)this + 1) = v90;
            v92 = v91 != 0;
          }
          *(_BYTE *)(a1 + 153) = v92;
          goto LABEL_210;
        case 0x12u:
          *(_QWORD *)(a1 + 156) |= 0x80uLL;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_396;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v98) = 0;
            goto LABEL_396;
          }
          v239 = 0;
          v240 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v241 = v93 + 1;
              v242 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v241;
              v98 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                v93 = v241;
                v14 = v240++ > 8;
                if (v14)
                  goto LABEL_274;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v98) = 0;
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 52) = v98;
          goto LABEL_210;
        case 0x13u:
          *(_QWORD *)(a1 + 156) |= 0x40000000uLL;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_400;
              v104 += 7;
              v101 = v107;
              v14 = v105++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v106) = 0;
            goto LABEL_400;
          }
          v243 = 0;
          v244 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v245 = v101 + 1;
              v246 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v245;
              v106 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                v101 = v245;
                v14 = v244++ > 8;
                if (v14)
                  goto LABEL_281;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 144) = v106;
          goto LABEL_210;
        case 0x14u:
          *(_QWORD *)(a1 + 156) |= 0x2000000uLL;
          v109 = *((_QWORD *)this + 1);
          v110 = *((_QWORD *)this + 2);
          v111 = *(_QWORD *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            v112 = 0;
            v113 = 0;
            v114 = 0;
            do
            {
              v115 = v109 + 1;
              *((_QWORD *)this + 1) = v109 + 1;
              v116 = *(_BYTE *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0)
                goto LABEL_404;
              v112 += 7;
              v109 = v115;
              v14 = v113++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v114) = 0;
            goto LABEL_404;
          }
          v247 = 0;
          v248 = 0;
          v114 = 0;
          if (v110 <= v109)
            v110 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v249 = v109 + 1;
              v250 = *(_BYTE *)(v111 + v109);
              *((_QWORD *)this + 1) = v249;
              v114 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                v109 = v249;
                v14 = v248++ > 8;
                if (v14)
                  goto LABEL_288;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v114) = 0;
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 124) = v114;
          goto LABEL_210;
        case 0x15u:
          *(_QWORD *)(a1 + 156) |= 0x800000000uLL;
          v117 = *((_QWORD *)this + 1);
          if (v117 >= *((_QWORD *)this + 2))
          {
            v120 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v118 = v117 + 1;
            v119 = *(unsigned __int8 *)(*(_QWORD *)this + v117);
            *((_QWORD *)this + 1) = v118;
            v120 = v119 != 0;
          }
          *(_BYTE *)(a1 + 155) = v120;
          goto LABEL_210;
        case 0x16u:
          *(_QWORD *)(a1 + 156) |= 0x100000000uLL;
          v121 = *((_QWORD *)this + 1);
          if (v121 >= *((_QWORD *)this + 2))
          {
            v124 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v122 = v121 + 1;
            v123 = *(unsigned __int8 *)(*(_QWORD *)this + v121);
            *((_QWORD *)this + 1) = v122;
            v124 = v123 != 0;
          }
          *(_BYTE *)(a1 + 152) = v124;
          goto LABEL_210;
        case 0x17u:
          *(_QWORD *)(a1 + 156) |= 0x20000uLL;
          v125 = *((_QWORD *)this + 1);
          v126 = *((_QWORD *)this + 2);
          v127 = *(_QWORD *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            do
            {
              v131 = v125 + 1;
              *((_QWORD *)this + 1) = v125 + 1;
              v132 = *(_BYTE *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0)
                goto LABEL_408;
              v128 += 7;
              v125 = v131;
              v14 = v129++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v130) = 0;
            goto LABEL_408;
          }
          v251 = 0;
          v252 = 0;
          v130 = 0;
          if (v126 <= v125)
            v126 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v253 = v125 + 1;
              v254 = *(_BYTE *)(v127 + v125);
              *((_QWORD *)this + 1) = v253;
              v130 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                v125 = v253;
                v14 = v252++ > 8;
                if (v14)
                  goto LABEL_299;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v130) = 0;
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 92) = v130;
          goto LABEL_210;
        case 0x18u:
          *(_QWORD *)(a1 + 156) |= 0x200000uLL;
          v133 = *((_QWORD *)this + 1);
          v134 = *((_QWORD *)this + 2);
          v135 = *(_QWORD *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            v136 = 0;
            v137 = 0;
            v138 = 0;
            do
            {
              v139 = v133 + 1;
              *((_QWORD *)this + 1) = v133 + 1;
              v140 = *(_BYTE *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0)
                goto LABEL_412;
              v136 += 7;
              v133 = v139;
              v14 = v137++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v138) = 0;
            goto LABEL_412;
          }
          v255 = 0;
          v256 = 0;
          v138 = 0;
          if (v134 <= v133)
            v134 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v257 = v133 + 1;
              v258 = *(_BYTE *)(v135 + v133);
              *((_QWORD *)this + 1) = v257;
              v138 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                v133 = v257;
                v14 = v256++ > 8;
                if (v14)
                  goto LABEL_306;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v138) = 0;
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 108) = v138;
          goto LABEL_210;
        case 0x19u:
          *(_QWORD *)(a1 + 156) |= 0x400000uLL;
          v141 = *((_QWORD *)this + 1);
          v142 = *((_QWORD *)this + 2);
          v143 = *(_QWORD *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            v144 = 0;
            v145 = 0;
            v146 = 0;
            do
            {
              v147 = v141 + 1;
              *((_QWORD *)this + 1) = v141 + 1;
              v148 = *(_BYTE *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0)
                goto LABEL_416;
              v144 += 7;
              v141 = v147;
              v14 = v145++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v146) = 0;
            goto LABEL_416;
          }
          v259 = 0;
          v260 = 0;
          v146 = 0;
          if (v142 <= v141)
            v142 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v261 = v141 + 1;
              v262 = *(_BYTE *)(v143 + v141);
              *((_QWORD *)this + 1) = v261;
              v146 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                v141 = v261;
                v14 = v260++ > 8;
                if (v14)
                  goto LABEL_313;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v146) = 0;
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 112) = v146;
          goto LABEL_210;
        case 0x1Au:
          *(_QWORD *)(a1 + 156) |= 0x80000uLL;
          v149 = *((_QWORD *)this + 1);
          v150 = *((_QWORD *)this + 2);
          v151 = *(_QWORD *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            v152 = 0;
            v153 = 0;
            v154 = 0;
            do
            {
              v155 = v149 + 1;
              *((_QWORD *)this + 1) = v149 + 1;
              v156 = *(_BYTE *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0)
                goto LABEL_420;
              v152 += 7;
              v149 = v155;
              v14 = v153++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v154) = 0;
            goto LABEL_420;
          }
          v263 = 0;
          v264 = 0;
          v154 = 0;
          if (v150 <= v149)
            v150 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v265 = v149 + 1;
              v266 = *(_BYTE *)(v151 + v149);
              *((_QWORD *)this + 1) = v265;
              v154 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                v149 = v265;
                v14 = v264++ > 8;
                if (v14)
                  goto LABEL_320;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v154) = 0;
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 100) = v154;
          goto LABEL_210;
        case 0x1Bu:
          *(_QWORD *)(a1 + 156) |= 0x8000uLL;
          v157 = *((_QWORD *)this + 1);
          v158 = *((_QWORD *)this + 2);
          v159 = *(_QWORD *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            v160 = 0;
            v161 = 0;
            v162 = 0;
            do
            {
              v163 = v157 + 1;
              *((_QWORD *)this + 1) = v157 + 1;
              v164 = *(_BYTE *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0)
                goto LABEL_424;
              v160 += 7;
              v157 = v163;
              v14 = v161++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v162) = 0;
            goto LABEL_424;
          }
          v267 = 0;
          v268 = 0;
          v162 = 0;
          if (v158 <= v157)
            v158 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v269 = v157 + 1;
              v270 = *(_BYTE *)(v159 + v157);
              *((_QWORD *)this + 1) = v269;
              v162 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                v157 = v269;
                v14 = v268++ > 8;
                if (v14)
                  goto LABEL_327;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v162) = 0;
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 84) = v162;
          goto LABEL_210;
        case 0x1Cu:
          *(_QWORD *)(a1 + 156) |= 0x800000uLL;
          v165 = *((_QWORD *)this + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v165);
          goto LABEL_191;
        case 0x1Du:
          *(_QWORD *)(a1 + 156) |= 0x100000uLL;
          v166 = *((_QWORD *)this + 1);
          v167 = *((_QWORD *)this + 2);
          v168 = *(_QWORD *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            v169 = 0;
            v170 = 0;
            v171 = 0;
            do
            {
              v172 = v166 + 1;
              *((_QWORD *)this + 1) = v166 + 1;
              v173 = *(_BYTE *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0)
                goto LABEL_428;
              v169 += 7;
              v166 = v172;
              v14 = v170++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v171) = 0;
            goto LABEL_428;
          }
          v271 = 0;
          v272 = 0;
          v171 = 0;
          if (v167 <= v166)
            v167 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v273 = v166 + 1;
              v274 = *(_BYTE *)(v168 + v166);
              *((_QWORD *)this + 1) = v273;
              v171 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                v166 = v273;
                v14 = v272++ > 8;
                if (v14)
                  goto LABEL_334;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v171) = 0;
            }
            break;
          }
LABEL_428:
          *(_DWORD *)(a1 + 104) = v171;
          goto LABEL_210;
        case 0x1Eu:
          *(_QWORD *)(a1 + 156) |= 0x4000000uLL;
          v174 = *((_QWORD *)this + 1);
          if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v174);
          goto LABEL_191;
        case 0x1Fu:
          *(_QWORD *)(a1 + 156) |= 0x1000000uLL;
          v175 = *((_QWORD *)this + 1);
          v176 = *((_QWORD *)this + 2);
          v177 = *(_QWORD *)this;
          if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
          {
            v178 = 0;
            v179 = 0;
            v180 = 0;
            do
            {
              v181 = v175 + 1;
              *((_QWORD *)this + 1) = v175 + 1;
              v182 = *(_BYTE *)(v177 + v175);
              v180 |= (unint64_t)(v182 & 0x7F) << v178;
              if ((v182 & 0x80) == 0)
                goto LABEL_432;
              v178 += 7;
              v175 = v181;
              v14 = v179++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v180) = 0;
            goto LABEL_432;
          }
          v275 = 0;
          v276 = 0;
          v180 = 0;
          if (v176 <= v175)
            v176 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v176 == v175)
            {
              LODWORD(v180) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v277 = v175 + 1;
              v278 = *(_BYTE *)(v177 + v175);
              *((_QWORD *)this + 1) = v277;
              v180 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                v175 = v277;
                v14 = v276++ > 8;
                if (v14)
                  goto LABEL_341;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v180) = 0;
            }
            break;
          }
LABEL_432:
          *(_DWORD *)(a1 + 120) = v180;
          goto LABEL_210;
        case 0x20u:
          *(_QWORD *)(a1 + 156) |= 0x10uLL;
          v183 = *((_QWORD *)this + 1);
          v184 = *((_QWORD *)this + 2);
          v185 = *(_QWORD *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            v186 = 0;
            v187 = 0;
            v188 = 0;
            do
            {
              v189 = v183 + 1;
              *((_QWORD *)this + 1) = v183 + 1;
              v190 = *(_BYTE *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0)
                goto LABEL_436;
              v186 += 7;
              v183 = v189;
              v14 = v187++ > 8;
            }
            while (!v14);
LABEL_348:
            LODWORD(v188) = 0;
            goto LABEL_436;
          }
          v279 = 0;
          v280 = 0;
          v188 = 0;
          if (v184 <= v183)
            v184 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v184 == v183)
            {
              LODWORD(v188) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v281 = v183 + 1;
              v282 = *(_BYTE *)(v185 + v183);
              *((_QWORD *)this + 1) = v281;
              v188 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                v183 = v281;
                v14 = v280++ > 8;
                if (v14)
                  goto LABEL_348;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v188) = 0;
            }
            break;
          }
LABEL_436:
          *(_DWORD *)(a1 + 40) = v188;
          goto LABEL_210;
        case 0x21u:
          *(_QWORD *)(a1 + 156) |= 0x40uLL;
          v191 = *((_QWORD *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((_QWORD *)this + 2))
            goto LABEL_209;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v191);
LABEL_191:
          v192 = *((_QWORD *)this + 1) + 4;
          goto LABEL_192;
        case 0x22u:
          *(_QWORD *)(a1 + 156) |= 0x10000uLL;
          v193 = *((_QWORD *)this + 1);
          v194 = *((_QWORD *)this + 2);
          v195 = *(_QWORD *)this;
          if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
          {
            v196 = 0;
            v197 = 0;
            v198 = 0;
            do
            {
              v199 = v193 + 1;
              *((_QWORD *)this + 1) = v193 + 1;
              v200 = *(_BYTE *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0)
                goto LABEL_440;
              v196 += 7;
              v193 = v199;
              v14 = v197++ > 8;
            }
            while (!v14);
LABEL_355:
            LODWORD(v198) = 0;
            goto LABEL_440;
          }
          v283 = 0;
          v284 = 0;
          v198 = 0;
          if (v194 <= v193)
            v194 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v198) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v285 = v193 + 1;
              v286 = *(_BYTE *)(v195 + v193);
              *((_QWORD *)this + 1) = v285;
              v198 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                v193 = v285;
                v14 = v284++ > 8;
                if (v14)
                  goto LABEL_355;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v198) = 0;
            }
            break;
          }
LABEL_440:
          *(_DWORD *)(a1 + 88) = v198;
          goto LABEL_210;
        case 0x23u:
          *(_QWORD *)(a1 + 156) |= 0x2000uLL;
          v201 = *((_QWORD *)this + 1);
          v202 = *((_QWORD *)this + 2);
          v203 = *(_QWORD *)this;
          if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
          {
            v204 = 0;
            v205 = 0;
            v206 = 0;
            do
            {
              v207 = v201 + 1;
              *((_QWORD *)this + 1) = v201 + 1;
              v208 = *(_BYTE *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0)
                goto LABEL_444;
              v204 += 7;
              v201 = v207;
              v14 = v205++ > 8;
            }
            while (!v14);
LABEL_362:
            LODWORD(v206) = 0;
            goto LABEL_444;
          }
          v287 = 0;
          v288 = 0;
          v206 = 0;
          if (v202 <= v201)
            v202 = *((_QWORD *)this + 1);
          break;
        case 0x24u:
          *(_QWORD *)(a1 + 156) |= 1uLL;
          v209 = *((_QWORD *)this + 1);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v209);
LABEL_364:
            v192 = *((_QWORD *)this + 1) + 8;
LABEL_192:
            *((_QWORD *)this + 1) = v192;
          }
          else
          {
LABEL_209:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_210;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_210;
      }
      while (1)
      {
        if (v202 == v201)
        {
          LODWORD(v206) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_444;
        }
        v289 = v201 + 1;
        v290 = *(_BYTE *)(v203 + v201);
        *((_QWORD *)this + 1) = v289;
        v206 |= (unint64_t)(v290 & 0x7F) << v287;
        if ((v290 & 0x80) == 0)
          break;
        v287 += 7;
        v201 = v289;
        v14 = v288++ > 8;
        if (v14)
          goto LABEL_362;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v206) = 0;
LABEL_444:
      *(_DWORD *)(a1 + 76) = v206;
LABEL_210:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F21B3B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 156);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_QWORD *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_11;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_12;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_17;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_18;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_20;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_21;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_22;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_23;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0)
      goto LABEL_27;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0)
      goto LABEL_30;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_32;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0)
      goto LABEL_33;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0)
      goto LABEL_34;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0)
      goto LABEL_35;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0)
      goto LABEL_36;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_36:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_72:
  result = PB::Writer::writeVarInt(this);
  if ((*(_QWORD *)(v3 + 156) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

double sub_18F21B7C8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2951008;
  *(_DWORD *)(a1 + 396) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  return result;
}

void sub_18F21B818(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_1E2951008;
  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 19);
  if (v4)
  {
    *((_QWORD *)this + 20) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 16);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 13);
  if (v6)
  {
    *((_QWORD *)this + 14) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {
    *((_QWORD *)this + 11) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 7);
  if (v8)
  {
    *((_QWORD *)this + 8) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 4);
  if (v9)
  {
    *((_QWORD *)this + 5) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 2) = v10;
    operator delete(v10);
  }
  PB::Base::~Base(this);
}

void sub_18F21B8D8(PB::Base *a1)
{
  sub_18F21B818(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F21B8FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  int v15;
  double *v16;
  double *v17;
  double v18;
  double *v19;
  double *v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  int v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double *v32;
  double *v33;
  double v34;
  int v35;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "absoluteTimestampOfImpact", *(double *)(a1 + 224));
    v5 = *(_DWORD *)(a1 + 396);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_60;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "anyOffWristAfterImpact");
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "aopTimestampOfImpact");
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "continuousLockedBeforeImpact");
  v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_62:
  PB::TextFormatter::format(this, "continuousOffWristBeforeImpact");
  if ((*(_DWORD *)(a1 + 396) & 0x800000) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "continuousStaticAndVerticalBeforeImpact");
LABEL_8:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryState", v14);
  }
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(this, "gatingEnabled");
    v15 = *(_DWORD *)(a1 + 396);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0)
        goto LABEL_17;
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "gatingLockedNoMotionPreImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "gatingMotionPreImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "gatingOffWristPostImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "gatingOffWristPreImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "gatingOnCharger");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "hasMotionBeforeImpact");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "lastChargerState");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "lastChargerStateDuration", *(double *)(a1 + 240));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "lastChargerStateDurationThreshold", *(double *)(a1 + 248));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "lastCoreMotionWristState");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDuration", *(double *)(a1 + 264));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostEnd", *(double *)(a1 + 272));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostStart", *(double *)(a1 + 280));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostThreshold", *(double *)(a1 + 288));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreEnd", *(double *)(a1 + 296));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreStart", *(double *)(a1 + 304));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreEnd", *(double *)(a1 + 312));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreStart", *(double *)(a1 + 320));
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "lastMotionState");
  v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_84:
  PB::TextFormatter::format(this, "lastMotionStateEndTime");
  if ((*(_DWORD *)(a1 + 396) & 0x8000) != 0)
LABEL_36:
    PB::TextFormatter::format(this, "lastMotionStateStartTime");
LABEL_37:
  v16 = *(double **)(a1 + 80);
  v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "lockStateHistoryEndTimestamp", v18);
  }
  v19 = *(double **)(a1 + 104);
  v20 = *(double **)(a1 + 112);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "lockStateHistoryStartTimestamp", v21);
  }
  v22 = *(double **)(a1 + 128);
  v23 = *(double **)(a1 + 136);
  while (v22 != v23)
  {
    v24 = *v22++;
    PB::TextFormatter::format(this, "lockStateHistoryState", v24);
  }
  v25 = *(_DWORD *)(a1 + 396);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactEndOfInterval");
    v25 = *(_DWORD *)(a1 + 396);
  }
  if ((v25 & 0x20000) != 0)
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactStartOfInterval");
  v26 = *(double **)(a1 + 152);
  v27 = *(double **)(a1 + 160);
  while (v26 != v27)
  {
    v28 = *v26++;
    PB::TextFormatter::format(this, "motionStateHistoryEndTimestamp", v28);
  }
  v29 = *(double **)(a1 + 176);
  v30 = *(double **)(a1 + 184);
  while (v29 != v30)
  {
    v31 = *v29++;
    PB::TextFormatter::format(this, "motionStateHistoryStartTimestamp", v31);
  }
  v32 = *(double **)(a1 + 200);
  v33 = *(double **)(a1 + 208);
  while (v32 != v33)
  {
    v34 = *v32++;
    PB::TextFormatter::format(this, "motionStateHistoryState", v34);
  }
  v35 = *(_DWORD *)(a1 + 396);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(this, "relativeTimestampToImpact", *(double *)(a1 + 368));
    v35 = *(_DWORD *)(a1 + 396);
  }
  if ((v35 & 0x80000) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F21BEB8(uint64_t a1, PB::Reader *this)
{
  __int16 *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  BOOL v54;
  uint64_t v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  __int16 *v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  char *v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  char *v164;
  _QWORD *v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  BOOL v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  char v192;
  unsigned int v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char v216;
  unsigned int v217;
  uint64_t v218;
  unint64_t v219;
  char v220;
  unint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  char v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char v232;
  unsigned int v233;
  uint64_t v234;
  unint64_t v235;
  char v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char v240;
  unsigned int v241;
  uint64_t v242;
  unint64_t v243;
  char v244;
  unint64_t v245;
  unint64_t v246;
  int v247;
  BOOL v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  BOOL v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  unint64_t v267;
  unint64_t v268;
  int v269;
  BOOL v270;
  unint64_t v271;
  unint64_t v272;
  int v273;
  BOOL v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  unint64_t v283;
  unint64_t v284;
  int v285;
  BOOL v286;
  unint64_t v287;
  char *v288;
  _QWORD *v289;
  unint64_t v290;
  char *v291;
  unint64_t v292;
  char *v293;
  unint64_t v294;
  char *v295;
  unint64_t v296;
  char *v297;
  unint64_t v298;
  char *v299;
  unint64_t v300;
  char *v301;
  unint64_t v302;
  char *v303;
  unint64_t v304;
  char *v305;
  char v306;
  unsigned int v307;
  unint64_t v308;
  char v309;
  char v310;
  unsigned int v311;
  unint64_t v312;
  char v313;
  char v314;
  unsigned int v315;
  unint64_t v316;
  char v317;
  char v318;
  unsigned int v319;
  unint64_t v320;
  char v321;
  char v322;
  unsigned int v323;
  unint64_t v324;
  char v325;
  char v326;
  unsigned int v327;
  unint64_t v328;
  char v329;
  char v330;
  unsigned int v331;
  unint64_t v332;
  char v333;
  char v334;
  unsigned int v335;
  unint64_t v336;
  char v337;
  char *v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  char *v344;
  uint64_t v345;
  unint64_t v346;
  uint64_t v347;
  unint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  unint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  unint64_t v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  char *v374;
  uint64_t v375;
  unint64_t v376;
  uint64_t v377;
  unint64_t v378;
  char *v379;
  char *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t v383;
  unint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  unint64_t v388;
  uint64_t v389;
  unint64_t v390;
  char *v391;
  char *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  char *v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  char *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  void **v422;
  void **v423;
  void **v424;
  void **v425;

  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((unsigned __int8 *)this + 24);
  if (v4 < v5 && v6 == 0)
  {
    v421 = a1 + 216;
    v424 = (void **)(a1 + 152);
    v425 = (void **)(a1 + 200);
    v423 = (void **)(a1 + 176);
    v419 = a1 + 192;
    v420 = a1 + 168;
    v422 = (void **)(a1 + 128);
    v10 = (void **)(a1 + 80);
    v417 = a1 + 96;
    v418 = a1 + 144;
    v11 = (void **)(a1 + 104);
    v12 = (void **)(a1 + 56);
    v415 = a1 + 72;
    v416 = a1 + 120;
    v13 = (void **)(a1 + 8);
    v14 = (void **)(a1 + 32);
    v413 = a1 + 48;
    v414 = a1 + 24;
    while (1)
    {
      v15 = *(_QWORD *)this;
      if (v4 > 0xFFFFFFFFFFFFFFF5 || v4 + 10 > v5)
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = v4 + 1;
        *((_QWORD *)this + 1) = v4 + 1;
        v20 = *(_BYTE *)(v15 + v4);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0)
          break;
        v16 += 7;
        v4 = v19;
        v21 = v17++ > 8;
        if (v21)
          goto LABEL_20;
      }
LABEL_21:
      v27 = v18 & 7;
      if (v27 == 4)
      {
        v6 = 0;
        return v6 == 0;
      }
      v28 = v18 >> 3;
      switch((v18 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 396) |= 0x80000u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_542;
              v32 += 7;
              v29 = v35;
              v21 = v33++ > 8;
            }
            while (!v21);
LABEL_385:
            v34 = 0;
            goto LABEL_542;
          }
          v306 = 0;
          v307 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v308 = v29 + 1;
              v309 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v308;
              v34 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                v29 = v308;
                v21 = v307++ > 8;
                if (v21)
                  goto LABEL_385;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_542:
          *(_QWORD *)(a1 + 376) = v34;
          goto LABEL_641;
        case 2u:
          *(_DWORD *)(a1 + 396) |= 0x1000000u;
          v175 = *((_QWORD *)this + 1);
          if (v175 >= *((_QWORD *)this + 2))
          {
            v178 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v176 = v175 + 1;
            v177 = *(unsigned __int8 *)(*(_QWORD *)this + v175);
            *((_QWORD *)this + 1) = v176;
            v178 = v177 != 0;
          }
          *(_BYTE *)(a1 + 388) = v178;
          goto LABEL_641;
        case 3u:
          *(_DWORD *)(a1 + 396) |= 1u;
          v179 = *((_QWORD *)this + 1);
          if (v179 > 0xFFFFFFFFFFFFFFF7 || v179 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 224) = *(_QWORD *)(*(_QWORD *)this + v179);
          goto LABEL_640;
        case 4u:
          *(_DWORD *)(a1 + 396) |= 0x40000u;
          v180 = *((_QWORD *)this + 1);
          if (v180 > 0xFFFFFFFFFFFFFFF7 || v180 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 368) = *(_QWORD *)(*(_QWORD *)this + v180);
          goto LABEL_640;
        case 5u:
          *(_DWORD *)(a1 + 396) |= 2u;
          v181 = *((_QWORD *)this + 1);
          v182 = *((_QWORD *)this + 2);
          v183 = *(_QWORD *)this;
          if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
          {
            v184 = 0;
            v185 = 0;
            v186 = 0;
            do
            {
              v187 = v181 + 1;
              *((_QWORD *)this + 1) = v181 + 1;
              v188 = *(_BYTE *)(v183 + v181);
              v186 |= (unint64_t)(v188 & 0x7F) << v184;
              if ((v188 & 0x80) == 0)
                goto LABEL_545;
              v184 += 7;
              v181 = v187;
              v21 = v185++ > 8;
            }
            while (!v21);
LABEL_394:
            v186 = 0;
            goto LABEL_545;
          }
          v310 = 0;
          v311 = 0;
          v186 = 0;
          if (v182 <= v181)
            v182 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v182 == v181)
            {
              v186 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v312 = v181 + 1;
              v313 = *(_BYTE *)(v183 + v181);
              *((_QWORD *)this + 1) = v312;
              v186 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                v181 = v312;
                v21 = v311++ > 8;
                if (v21)
                  goto LABEL_394;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v186 = 0;
            }
            break;
          }
LABEL_545:
          *(_QWORD *)(a1 + 232) = v186;
          goto LABEL_641;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
LABEL_58:
          v55 = v3;
          v56 = v14;
          v57 = v13;
          v58 = v12;
          v59 = v11;
          v60 = v10;
          v61 = v2;
          v62 = PB::Reader::skip(this);
          v2 = v61;
          v10 = v60;
          v11 = v59;
          v12 = v58;
          v13 = v57;
          v14 = v56;
          v3 = v55;
          if ((v62 & 1) == 0)
            return 0;
          goto LABEL_641;
        case 0x15u:
          *(_DWORD *)(a1 + 396) |= 0x10u;
          v189 = *((_QWORD *)this + 1);
          v190 = *((_QWORD *)this + 2);
          v191 = *(_QWORD *)this;
          if (v189 <= 0xFFFFFFFFFFFFFFF5 && v189 + 10 <= v190)
          {
            v192 = 0;
            v193 = 0;
            v194 = 0;
            do
            {
              v195 = v189 + 1;
              *((_QWORD *)this + 1) = v189 + 1;
              v196 = *(_BYTE *)(v191 + v189);
              v194 |= (unint64_t)(v196 & 0x7F) << v192;
              if ((v196 & 0x80) == 0)
                goto LABEL_548;
              v192 += 7;
              v189 = v195;
              v21 = v193++ > 8;
            }
            while (!v21);
LABEL_401:
            v194 = 0;
            goto LABEL_548;
          }
          v314 = 0;
          v315 = 0;
          v194 = 0;
          if (v190 <= v189)
            v190 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v190 == v189)
            {
              v194 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v316 = v189 + 1;
              v317 = *(_BYTE *)(v191 + v189);
              *((_QWORD *)this + 1) = v316;
              v194 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                v189 = v316;
                v21 = v315++ > 8;
                if (v21)
                  goto LABEL_401;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v194 = 0;
            }
            break;
          }
LABEL_548:
          *(_QWORD *)(a1 + 256) = v194;
          goto LABEL_641;
        case 0x16u:
          *(_DWORD *)(a1 + 396) |= 0x20u;
          v197 = *((_QWORD *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFF7 || v197 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 264) = *(_QWORD *)(*(_QWORD *)this + v197);
          goto LABEL_640;
        case 0x17u:
          *(_DWORD *)(a1 + 396) |= 0x100u;
          v198 = *((_QWORD *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFF7 || v198 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 288) = *(_QWORD *)(*(_QWORD *)this + v198);
          goto LABEL_640;
        case 0x18u:
          *(_DWORD *)(a1 + 396) |= 0x400u;
          v199 = *((_QWORD *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFF7 || v199 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 304) = *(_QWORD *)(*(_QWORD *)this + v199);
          goto LABEL_640;
        case 0x19u:
          *(_DWORD *)(a1 + 396) |= 0x200u;
          v200 = *((_QWORD *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFF7 || v200 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(*(_QWORD *)this + v200);
          goto LABEL_640;
        case 0x1Au:
          *(_DWORD *)(a1 + 396) |= 0x80u;
          v201 = *((_QWORD *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFF7 || v201 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 280) = *(_QWORD *)(*(_QWORD *)this + v201);
          goto LABEL_640;
        case 0x1Bu:
          *(_DWORD *)(a1 + 396) |= 0x40u;
          v202 = *((_QWORD *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFF7 || v202 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 272) = *(_QWORD *)(*(_QWORD *)this + v202);
          goto LABEL_640;
        case 0x1Cu:
          *(_DWORD *)(a1 + 396) |= 0x1000u;
          v203 = *((_QWORD *)this + 1);
          if (v203 > 0xFFFFFFFFFFFFFFF7 || v203 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 320) = *(_QWORD *)(*(_QWORD *)this + v203);
          goto LABEL_640;
        case 0x1Du:
          *(_DWORD *)(a1 + 396) |= 0x800u;
          v204 = *((_QWORD *)this + 1);
          if (v204 > 0xFFFFFFFFFFFFFFF7 || v204 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 312) = *(_QWORD *)(*(_QWORD *)this + v204);
          goto LABEL_640;
        case 0x1Eu:
          *(_DWORD *)(a1 + 396) |= 0x20000u;
          v205 = *((_QWORD *)this + 1);
          v206 = *((_QWORD *)this + 2);
          v207 = *(_QWORD *)this;
          if (v205 <= 0xFFFFFFFFFFFFFFF5 && v205 + 10 <= v206)
          {
            v208 = 0;
            v209 = 0;
            v210 = 0;
            do
            {
              v211 = v205 + 1;
              *((_QWORD *)this + 1) = v205 + 1;
              v212 = *(_BYTE *)(v207 + v205);
              v210 |= (unint64_t)(v212 & 0x7F) << v208;
              if ((v212 & 0x80) == 0)
                goto LABEL_551;
              v208 += 7;
              v205 = v211;
              v21 = v209++ > 8;
            }
            while (!v21);
LABEL_408:
            v210 = 0;
            goto LABEL_551;
          }
          v318 = 0;
          v319 = 0;
          v210 = 0;
          if (v206 <= v205)
            v206 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v206 == v205)
            {
              v210 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v320 = v205 + 1;
              v321 = *(_BYTE *)(v207 + v205);
              *((_QWORD *)this + 1) = v320;
              v210 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                v205 = v320;
                v21 = v319++ > 8;
                if (v21)
                  goto LABEL_408;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v210 = 0;
            }
            break;
          }
LABEL_551:
          *(_QWORD *)(a1 + 360) = v210;
          goto LABEL_641;
        case 0x1Fu:
          *(_DWORD *)(a1 + 396) |= 0x10000u;
          v213 = *((_QWORD *)this + 1);
          v214 = *((_QWORD *)this + 2);
          v215 = *(_QWORD *)this;
          if (v213 <= 0xFFFFFFFFFFFFFFF5 && v213 + 10 <= v214)
          {
            v216 = 0;
            v217 = 0;
            v218 = 0;
            do
            {
              v219 = v213 + 1;
              *((_QWORD *)this + 1) = v213 + 1;
              v220 = *(_BYTE *)(v215 + v213);
              v218 |= (unint64_t)(v220 & 0x7F) << v216;
              if ((v220 & 0x80) == 0)
                goto LABEL_554;
              v216 += 7;
              v213 = v219;
              v21 = v217++ > 8;
            }
            while (!v21);
LABEL_415:
            v218 = 0;
            goto LABEL_554;
          }
          v322 = 0;
          v323 = 0;
          v218 = 0;
          if (v214 <= v213)
            v214 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v214 == v213)
            {
              v218 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v324 = v213 + 1;
              v325 = *(_BYTE *)(v215 + v213);
              *((_QWORD *)this + 1) = v324;
              v218 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                v213 = v324;
                v21 = v323++ > 8;
                if (v21)
                  goto LABEL_415;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v218 = 0;
            }
            break;
          }
LABEL_554:
          *(_QWORD *)(a1 + 352) = v218;
          goto LABEL_641;
        case 0x20u:
          *(_DWORD *)(a1 + 396) |= 0x8000u;
          v221 = *((_QWORD *)this + 1);
          v222 = *((_QWORD *)this + 2);
          v223 = *(_QWORD *)this;
          if (v221 <= 0xFFFFFFFFFFFFFFF5 && v221 + 10 <= v222)
          {
            v224 = 0;
            v225 = 0;
            v226 = 0;
            do
            {
              v227 = v221 + 1;
              *((_QWORD *)this + 1) = v221 + 1;
              v228 = *(_BYTE *)(v223 + v221);
              v226 |= (unint64_t)(v228 & 0x7F) << v224;
              if ((v228 & 0x80) == 0)
                goto LABEL_557;
              v224 += 7;
              v221 = v227;
              v21 = v225++ > 8;
            }
            while (!v21);
LABEL_422:
            v226 = 0;
            goto LABEL_557;
          }
          v326 = 0;
          v327 = 0;
          v226 = 0;
          if (v222 <= v221)
            v222 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v222 == v221)
            {
              v226 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v328 = v221 + 1;
              v329 = *(_BYTE *)(v223 + v221);
              *((_QWORD *)this + 1) = v328;
              v226 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                v221 = v328;
                v21 = v327++ > 8;
                if (v21)
                  goto LABEL_422;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v226 = 0;
            }
            break;
          }
LABEL_557:
          *(_QWORD *)(a1 + 344) = v226;
          goto LABEL_641;
        case 0x21u:
          *(_DWORD *)(a1 + 396) |= 0x4000u;
          v229 = *((_QWORD *)this + 1);
          v230 = *((_QWORD *)this + 2);
          v231 = *(_QWORD *)this;
          if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
          {
            v232 = 0;
            v233 = 0;
            v234 = 0;
            do
            {
              v235 = v229 + 1;
              *((_QWORD *)this + 1) = v229 + 1;
              v236 = *(_BYTE *)(v231 + v229);
              v234 |= (unint64_t)(v236 & 0x7F) << v232;
              if ((v236 & 0x80) == 0)
                goto LABEL_560;
              v232 += 7;
              v229 = v235;
              v21 = v233++ > 8;
            }
            while (!v21);
LABEL_429:
            v234 = 0;
            goto LABEL_560;
          }
          v330 = 0;
          v331 = 0;
          v234 = 0;
          if (v230 <= v229)
            v230 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v230 == v229)
            {
              v234 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v332 = v229 + 1;
              v333 = *(_BYTE *)(v231 + v229);
              *((_QWORD *)this + 1) = v332;
              v234 |= (unint64_t)(v333 & 0x7F) << v330;
              if (v333 < 0)
              {
                v330 += 7;
                v229 = v332;
                v21 = v331++ > 8;
                if (v21)
                  goto LABEL_429;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v234 = 0;
            }
            break;
          }
LABEL_560:
          *(_QWORD *)(a1 + 336) = v234;
          goto LABEL_641;
        case 0x22u:
          *(_DWORD *)(a1 + 396) |= 0x2000u;
          v237 = *((_QWORD *)this + 1);
          v238 = *((_QWORD *)this + 2);
          v239 = *(_QWORD *)this;
          if (v237 <= 0xFFFFFFFFFFFFFFF5 && v237 + 10 <= v238)
          {
            v240 = 0;
            v241 = 0;
            v242 = 0;
            do
            {
              v243 = v237 + 1;
              *((_QWORD *)this + 1) = v237 + 1;
              v244 = *(_BYTE *)(v239 + v237);
              v242 |= (unint64_t)(v244 & 0x7F) << v240;
              if ((v244 & 0x80) == 0)
                goto LABEL_563;
              v240 += 7;
              v237 = v243;
              v21 = v241++ > 8;
            }
            while (!v21);
LABEL_436:
            v242 = 0;
            goto LABEL_563;
          }
          v334 = 0;
          v335 = 0;
          v242 = 0;
          if (v238 <= v237)
            v238 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v238 == v237)
            {
              v242 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v336 = v237 + 1;
              v337 = *(_BYTE *)(v239 + v237);
              *((_QWORD *)this + 1) = v336;
              v242 |= (unint64_t)(v337 & 0x7F) << v334;
              if (v337 < 0)
              {
                v334 += 7;
                v237 = v336;
                v21 = v335++ > 8;
                if (v21)
                  goto LABEL_436;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v242 = 0;
            }
            break;
          }
LABEL_563:
          *(_QWORD *)(a1 + 328) = v242;
          goto LABEL_641;
        case 0x29u:
          *(_DWORD *)(a1 + 396) |= 0x80000000;
          v245 = *((_QWORD *)this + 1);
          if (v245 >= *((_QWORD *)this + 2))
          {
            v248 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v246 = v245 + 1;
            v247 = *(unsigned __int8 *)(*(_QWORD *)this + v245);
            *((_QWORD *)this + 1) = v246;
            v248 = v247 != 0;
          }
          *(_BYTE *)(a1 + 395) = v248;
          goto LABEL_641;
        case 0x2Au:
          *(_DWORD *)(a1 + 396) |= 4u;
          v249 = *((_QWORD *)this + 1);
          if (v249 > 0xFFFFFFFFFFFFFFF7 || v249 + 8 > *((_QWORD *)this + 2))
            goto LABEL_342;
          *(_QWORD *)(a1 + 240) = *(_QWORD *)(*(_QWORD *)this + v249);
          goto LABEL_640;
        case 0x2Bu:
          *(_DWORD *)(a1 + 396) |= 8u;
          v250 = *((_QWORD *)this + 1);
          if (v250 > 0xFFFFFFFFFFFFFFF7 || v250 + 8 > *((_QWORD *)this + 2))
          {
LABEL_342:
            *((_BYTE *)this + 24) = 1;
            goto LABEL_641;
          }
          *(_QWORD *)(a1 + 248) = *(_QWORD *)(*(_QWORD *)this + v250);
          goto LABEL_640;
        case 0x33u:
          *(_DWORD *)(a1 + 396) |= 0x100000u;
          v251 = *((_QWORD *)this + 1);
          if (v251 >= *((_QWORD *)this + 2))
          {
            v254 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v252 = v251 + 1;
            v253 = *(unsigned __int8 *)(*(_QWORD *)this + v251);
            *((_QWORD *)this + 1) = v252;
            v254 = v253 != 0;
          }
          *(_BYTE *)(a1 + 384) = v254;
          goto LABEL_641;
        case 0x34u:
          *(_DWORD *)(a1 + 396) |= 0x400000u;
          v255 = *((_QWORD *)this + 1);
          if (v255 >= *((_QWORD *)this + 2))
          {
            v258 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v256 = v255 + 1;
            v257 = *(unsigned __int8 *)(*(_QWORD *)this + v255);
            *((_QWORD *)this + 1) = v256;
            v258 = v257 != 0;
          }
          *(_BYTE *)(a1 + 386) = v258;
          goto LABEL_641;
        case 0x35u:
          *(_DWORD *)(a1 + 396) |= 0x40000000u;
          v259 = *((_QWORD *)this + 1);
          if (v259 >= *((_QWORD *)this + 2))
          {
            v262 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v260 = v259 + 1;
            v261 = *(unsigned __int8 *)(*(_QWORD *)this + v259);
            *((_QWORD *)this + 1) = v260;
            v262 = v261 != 0;
          }
          *(_BYTE *)(a1 + 394) = v262;
          goto LABEL_641;
        case 0x36u:
          *(_DWORD *)(a1 + 396) |= 0x200000u;
          v263 = *((_QWORD *)this + 1);
          if (v263 >= *((_QWORD *)this + 2))
          {
            v266 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v264 = v263 + 1;
            v265 = *(unsigned __int8 *)(*(_QWORD *)this + v263);
            *((_QWORD *)this + 1) = v264;
            v266 = v265 != 0;
          }
          *(_BYTE *)(a1 + 385) = v266;
          goto LABEL_641;
        case 0x37u:
          *(_DWORD *)(a1 + 396) |= 0x800000u;
          v267 = *((_QWORD *)this + 1);
          if (v267 >= *((_QWORD *)this + 2))
          {
            v270 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v268 = v267 + 1;
            v269 = *(unsigned __int8 *)(*(_QWORD *)this + v267);
            *((_QWORD *)this + 1) = v268;
            v270 = v269 != 0;
          }
          *(_BYTE *)(a1 + 387) = v270;
          goto LABEL_641;
        default:
          switch((int)v28)
          {
            case 151:
              if (v27 != 2)
              {
                v288 = *(char **)(a1 + 40);
                v287 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v288 >= v287)
                {
                  v338 = (char *)*v14;
                  v339 = (v288 - (_BYTE *)*v14) >> 3;
                  v340 = v339 + 1;
                  if ((unint64_t)(v339 + 1) >> 61)
LABEL_651:
                    sub_18F26F8C0();
                  v341 = v287 - (_QWORD)v338;
                  if (v341 >> 2 > v340)
                    v340 = v341 >> 2;
                  if ((unint64_t)v341 >= 0x7FFFFFFFFFFFFFF8)
                    v342 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v342 = v340;
                  if (v342)
                  {
                    v343 = (char *)sub_18F26F8D4(v413, v342);
                    v338 = *(char **)(a1 + 32);
                    v288 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v343 = 0;
                  }
                  v392 = &v343[8 * v339];
                  *(_QWORD *)v392 = 0;
                  v289 = v392 + 8;
                  while (v288 != v338)
                  {
                    v393 = *((_QWORD *)v288 - 1);
                    v288 -= 8;
                    *((_QWORD *)v392 - 1) = v393;
                    v392 -= 8;
                  }
                  *(_QWORD *)(a1 + 32) = v392;
                  *(_QWORD *)(a1 + 40) = v289;
                  *(_QWORD *)(a1 + 48) = &v343[8 * v342];
                  if (v338)
                    operator delete(v338);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v288 = 0;
                  v289 = v288 + 8;
                }
                *(_QWORD *)(a1 + 40) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v37 = *((_QWORD *)this + 1);
              v38 = *((_QWORD *)this + 2);
              while (v37 < v38 && !*((_BYTE *)this + 24))
              {
                v40 = *(char **)(a1 + 40);
                v39 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v40 >= v39)
                {
                  v42 = (char *)*v14;
                  v43 = (v40 - (_BYTE *)*v14) >> 3;
                  v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 61)
                    goto LABEL_651;
                  v45 = v39 - (_QWORD)v42;
                  if (v45 >> 2 > v44)
                    v44 = v45 >> 2;
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8)
                    v46 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v46 = v44;
                  if (v46)
                  {
                    v47 = (char *)sub_18F26F8D4(v413, v46);
                    v42 = *(char **)(a1 + 32);
                    v40 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v47 = 0;
                  }
                  v48 = &v47[8 * v43];
                  *(_QWORD *)v48 = 0;
                  v41 = v48 + 8;
                  while (v40 != v42)
                  {
                    v49 = *((_QWORD *)v40 - 1);
                    v40 -= 8;
                    *((_QWORD *)v48 - 1) = v49;
                    v48 -= 8;
                  }
                  *(_QWORD *)(a1 + 32) = v48;
                  *(_QWORD *)(a1 + 40) = v41;
                  *(_QWORD *)(a1 + 48) = &v47[8 * v46];
                  if (v42)
                    operator delete(v42);
                }
                else
                {
                  *(_QWORD *)v40 = 0;
                  v41 = v40 + 8;
                }
                *(_QWORD *)(a1 + 40) = v41;
                v50 = *((_QWORD *)this + 1);
                if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v41 - 1) = *(_QWORD *)(*(_QWORD *)this + v50);
                v38 = *((_QWORD *)this + 2);
                v37 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v37;
              }
              goto LABEL_253;
            case 152:
              if (v27 != 2)
              {
                v291 = *(char **)(a1 + 16);
                v290 = *(_QWORD *)(a1 + 24);
                if ((unint64_t)v291 >= v290)
                {
                  v344 = (char *)*v13;
                  v345 = (v291 - (_BYTE *)*v13) >> 3;
                  v346 = v345 + 1;
                  if ((unint64_t)(v345 + 1) >> 61)
LABEL_652:
                    sub_18F26F8C0();
                  v347 = v290 - (_QWORD)v344;
                  if (v347 >> 2 > v346)
                    v346 = v347 >> 2;
                  if ((unint64_t)v347 >= 0x7FFFFFFFFFFFFFF8)
                    v348 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v348 = v346;
                  if (v348)
                  {
                    v349 = (char *)sub_18F26F8D4(v414, v348);
                    v344 = *(char **)(a1 + 8);
                    v291 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v349 = 0;
                  }
                  v394 = &v349[8 * v345];
                  *(_QWORD *)v394 = 0;
                  v289 = v394 + 8;
                  while (v291 != v344)
                  {
                    v395 = *((_QWORD *)v291 - 1);
                    v291 -= 8;
                    *((_QWORD *)v394 - 1) = v395;
                    v394 -= 8;
                  }
                  *(_QWORD *)(a1 + 8) = v394;
                  *(_QWORD *)(a1 + 16) = v289;
                  *(_QWORD *)(a1 + 24) = &v349[8 * v348];
                  if (v344)
                    operator delete(v344);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v291 = 0;
                  v289 = v291 + 8;
                }
                *(_QWORD *)(a1 + 16) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v63 = *((_QWORD *)this + 1);
              v64 = *((_QWORD *)this + 2);
              while (v63 < v64 && !*((_BYTE *)this + 24))
              {
                v66 = *(char **)(a1 + 16);
                v65 = *(_QWORD *)(a1 + 24);
                if ((unint64_t)v66 >= v65)
                {
                  v68 = (char *)*v13;
                  v69 = (v66 - (_BYTE *)*v13) >> 3;
                  v70 = v69 + 1;
                  if ((unint64_t)(v69 + 1) >> 61)
                    goto LABEL_652;
                  v71 = v65 - (_QWORD)v68;
                  if (v71 >> 2 > v70)
                    v70 = v71 >> 2;
                  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
                    v72 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v72 = v70;
                  if (v72)
                  {
                    v73 = (char *)sub_18F26F8D4(v414, v72);
                    v68 = *(char **)(a1 + 8);
                    v66 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v73 = 0;
                  }
                  v74 = &v73[8 * v69];
                  *(_QWORD *)v74 = 0;
                  v67 = v74 + 8;
                  while (v66 != v68)
                  {
                    v75 = *((_QWORD *)v66 - 1);
                    v66 -= 8;
                    *((_QWORD *)v74 - 1) = v75;
                    v74 -= 8;
                  }
                  *(_QWORD *)(a1 + 8) = v74;
                  *(_QWORD *)(a1 + 16) = v67;
                  *(_QWORD *)(a1 + 24) = &v73[8 * v72];
                  if (v68)
                    operator delete(v68);
                }
                else
                {
                  *(_QWORD *)v66 = 0;
                  v67 = v66 + 8;
                }
                *(_QWORD *)(a1 + 16) = v67;
                v76 = *((_QWORD *)this + 1);
                if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v67 - 1) = *(_QWORD *)(*(_QWORD *)this + v76);
                v64 = *((_QWORD *)this + 2);
                v63 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v63;
              }
              goto LABEL_253;
            case 153:
              if (v27 != 2)
              {
                v293 = *(char **)(a1 + 64);
                v292 = *(_QWORD *)(a1 + 72);
                if ((unint64_t)v293 >= v292)
                {
                  v350 = (char *)*v12;
                  v351 = (v293 - (_BYTE *)*v12) >> 3;
                  v352 = v351 + 1;
                  if ((unint64_t)(v351 + 1) >> 61)
LABEL_653:
                    sub_18F26F8C0();
                  v353 = v292 - (_QWORD)v350;
                  if (v353 >> 2 > v352)
                    v352 = v353 >> 2;
                  if ((unint64_t)v353 >= 0x7FFFFFFFFFFFFFF8)
                    v354 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v354 = v352;
                  if (v354)
                  {
                    v355 = (char *)sub_18F26F8D4(v415, v354);
                    v350 = *(char **)(a1 + 56);
                    v293 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v355 = 0;
                  }
                  v396 = &v355[8 * v351];
                  *(_QWORD *)v396 = 0;
                  v289 = v396 + 8;
                  while (v293 != v350)
                  {
                    v397 = *((_QWORD *)v293 - 1);
                    v293 -= 8;
                    *((_QWORD *)v396 - 1) = v397;
                    v396 -= 8;
                  }
                  *(_QWORD *)(a1 + 56) = v396;
                  *(_QWORD *)(a1 + 64) = v289;
                  *(_QWORD *)(a1 + 72) = &v355[8 * v354];
                  if (v350)
                    operator delete(v350);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v293 = 0;
                  v289 = v293 + 8;
                }
                *(_QWORD *)(a1 + 64) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v77 = *((_QWORD *)this + 1);
              v78 = *((_QWORD *)this + 2);
              while (v77 < v78 && !*((_BYTE *)this + 24))
              {
                v80 = *(char **)(a1 + 64);
                v79 = *(_QWORD *)(a1 + 72);
                if ((unint64_t)v80 >= v79)
                {
                  v82 = (char *)*v12;
                  v83 = (v80 - (_BYTE *)*v12) >> 3;
                  v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 61)
                    goto LABEL_653;
                  v85 = v79 - (_QWORD)v82;
                  if (v85 >> 2 > v84)
                    v84 = v85 >> 2;
                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
                    v86 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v86 = v84;
                  if (v86)
                  {
                    v87 = (char *)sub_18F26F8D4(v415, v86);
                    v82 = *(char **)(a1 + 56);
                    v80 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v87 = 0;
                  }
                  v88 = &v87[8 * v83];
                  *(_QWORD *)v88 = 0;
                  v81 = v88 + 8;
                  while (v80 != v82)
                  {
                    v89 = *((_QWORD *)v80 - 1);
                    v80 -= 8;
                    *((_QWORD *)v88 - 1) = v89;
                    v88 -= 8;
                  }
                  *(_QWORD *)(a1 + 56) = v88;
                  *(_QWORD *)(a1 + 64) = v81;
                  *(_QWORD *)(a1 + 72) = &v87[8 * v86];
                  if (v82)
                    operator delete(v82);
                }
                else
                {
                  *(_QWORD *)v80 = 0;
                  v81 = v80 + 8;
                }
                *(_QWORD *)(a1 + 64) = v81;
                v90 = *((_QWORD *)this + 1);
                if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v81 - 1) = *(_QWORD *)(*(_QWORD *)this + v90);
                v78 = *((_QWORD *)this + 2);
                v77 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v77;
              }
              goto LABEL_253;
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
              goto LABEL_58;
            case 161:
              if (v27 != 2)
              {
                v295 = *(char **)(a1 + 112);
                v294 = *(_QWORD *)(a1 + 120);
                if ((unint64_t)v295 >= v294)
                {
                  v356 = (char *)*v11;
                  v357 = (v295 - (_BYTE *)*v11) >> 3;
                  v358 = v357 + 1;
                  if ((unint64_t)(v357 + 1) >> 61)
LABEL_654:
                    sub_18F26F8C0();
                  v359 = v294 - (_QWORD)v356;
                  if (v359 >> 2 > v358)
                    v358 = v359 >> 2;
                  if ((unint64_t)v359 >= 0x7FFFFFFFFFFFFFF8)
                    v360 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v360 = v358;
                  if (v360)
                  {
                    v361 = (char *)sub_18F26F8D4(v416, v360);
                    v356 = *(char **)(a1 + 104);
                    v295 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v361 = 0;
                  }
                  v398 = &v361[8 * v357];
                  *(_QWORD *)v398 = 0;
                  v289 = v398 + 8;
                  while (v295 != v356)
                  {
                    v399 = *((_QWORD *)v295 - 1);
                    v295 -= 8;
                    *((_QWORD *)v398 - 1) = v399;
                    v398 -= 8;
                  }
                  *(_QWORD *)(a1 + 104) = v398;
                  *(_QWORD *)(a1 + 112) = v289;
                  *(_QWORD *)(a1 + 120) = &v361[8 * v360];
                  if (v356)
                    operator delete(v356);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v295 = 0;
                  v289 = v295 + 8;
                }
                *(_QWORD *)(a1 + 112) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v91 = *((_QWORD *)this + 1);
              v92 = *((_QWORD *)this + 2);
              while (v91 < v92 && !*((_BYTE *)this + 24))
              {
                v94 = *(char **)(a1 + 112);
                v93 = *(_QWORD *)(a1 + 120);
                if ((unint64_t)v94 >= v93)
                {
                  v96 = (char *)*v11;
                  v97 = (v94 - (_BYTE *)*v11) >> 3;
                  v98 = v97 + 1;
                  if ((unint64_t)(v97 + 1) >> 61)
                    goto LABEL_654;
                  v99 = v93 - (_QWORD)v96;
                  if (v99 >> 2 > v98)
                    v98 = v99 >> 2;
                  if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
                    v100 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v100 = v98;
                  if (v100)
                  {
                    v101 = (char *)sub_18F26F8D4(v416, v100);
                    v96 = *(char **)(a1 + 104);
                    v94 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v101 = 0;
                  }
                  v102 = &v101[8 * v97];
                  *(_QWORD *)v102 = 0;
                  v95 = v102 + 8;
                  while (v94 != v96)
                  {
                    v103 = *((_QWORD *)v94 - 1);
                    v94 -= 8;
                    *((_QWORD *)v102 - 1) = v103;
                    v102 -= 8;
                  }
                  *(_QWORD *)(a1 + 104) = v102;
                  *(_QWORD *)(a1 + 112) = v95;
                  *(_QWORD *)(a1 + 120) = &v101[8 * v100];
                  if (v96)
                    operator delete(v96);
                }
                else
                {
                  *(_QWORD *)v94 = 0;
                  v95 = v94 + 8;
                }
                *(_QWORD *)(a1 + 112) = v95;
                v104 = *((_QWORD *)this + 1);
                if (v104 > 0xFFFFFFFFFFFFFFF7 || v104 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v95 - 1) = *(_QWORD *)(*(_QWORD *)this + v104);
                v92 = *((_QWORD *)this + 2);
                v91 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v91;
              }
              goto LABEL_253;
            case 162:
              if (v27 != 2)
              {
                v297 = *(char **)(a1 + 88);
                v296 = *(_QWORD *)(a1 + 96);
                if ((unint64_t)v297 >= v296)
                {
                  v362 = (char *)*v10;
                  v363 = (v297 - (_BYTE *)*v10) >> 3;
                  v364 = v363 + 1;
                  if ((unint64_t)(v363 + 1) >> 61)
LABEL_655:
                    sub_18F26F8C0();
                  v365 = v296 - (_QWORD)v362;
                  if (v365 >> 2 > v364)
                    v364 = v365 >> 2;
                  if ((unint64_t)v365 >= 0x7FFFFFFFFFFFFFF8)
                    v366 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v366 = v364;
                  if (v366)
                  {
                    v367 = (char *)sub_18F26F8D4(v417, v366);
                    v362 = *(char **)(a1 + 80);
                    v297 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v367 = 0;
                  }
                  v400 = &v367[8 * v363];
                  *(_QWORD *)v400 = 0;
                  v289 = v400 + 8;
                  while (v297 != v362)
                  {
                    v401 = *((_QWORD *)v297 - 1);
                    v297 -= 8;
                    *((_QWORD *)v400 - 1) = v401;
                    v400 -= 8;
                  }
                  *(_QWORD *)(a1 + 80) = v400;
                  *(_QWORD *)(a1 + 88) = v289;
                  *(_QWORD *)(a1 + 96) = &v367[8 * v366];
                  if (v362)
                    operator delete(v362);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v297 = 0;
                  v289 = v297 + 8;
                }
                *(_QWORD *)(a1 + 88) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v105 = *((_QWORD *)this + 1);
              v106 = *((_QWORD *)this + 2);
              while (v105 < v106 && !*((_BYTE *)this + 24))
              {
                v108 = *(char **)(a1 + 88);
                v107 = *(_QWORD *)(a1 + 96);
                if ((unint64_t)v108 >= v107)
                {
                  v110 = (char *)*v10;
                  v111 = (v108 - (_BYTE *)*v10) >> 3;
                  v112 = v111 + 1;
                  if ((unint64_t)(v111 + 1) >> 61)
                    goto LABEL_655;
                  v113 = v107 - (_QWORD)v110;
                  if (v113 >> 2 > v112)
                    v112 = v113 >> 2;
                  if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                    v114 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v114 = v112;
                  if (v114)
                  {
                    v115 = (char *)sub_18F26F8D4(v417, v114);
                    v110 = *(char **)(a1 + 80);
                    v108 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v115 = 0;
                  }
                  v116 = &v115[8 * v111];
                  *(_QWORD *)v116 = 0;
                  v109 = v116 + 8;
                  while (v108 != v110)
                  {
                    v117 = *((_QWORD *)v108 - 1);
                    v108 -= 8;
                    *((_QWORD *)v116 - 1) = v117;
                    v116 -= 8;
                  }
                  *(_QWORD *)(a1 + 80) = v116;
                  *(_QWORD *)(a1 + 88) = v109;
                  *(_QWORD *)(a1 + 96) = &v115[8 * v114];
                  if (v110)
                    operator delete(v110);
                }
                else
                {
                  *(_QWORD *)v108 = 0;
                  v109 = v108 + 8;
                }
                *(_QWORD *)(a1 + 88) = v109;
                v118 = *((_QWORD *)this + 1);
                if (v118 > 0xFFFFFFFFFFFFFFF7 || v118 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v109 - 1) = *(_QWORD *)(*(_QWORD *)this + v118);
                v106 = *((_QWORD *)this + 2);
                v105 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v105;
              }
              goto LABEL_253;
            case 163:
              if (v27 != 2)
              {
                v299 = *(char **)(a1 + 136);
                v298 = *(_QWORD *)(a1 + 144);
                if ((unint64_t)v299 >= v298)
                {
                  v368 = (char *)*v422;
                  v369 = (v299 - (_BYTE *)*v422) >> 3;
                  v370 = v369 + 1;
                  if ((unint64_t)(v369 + 1) >> 61)
LABEL_656:
                    sub_18F26F8C0();
                  v371 = v298 - (_QWORD)v368;
                  if (v371 >> 2 > v370)
                    v370 = v371 >> 2;
                  if ((unint64_t)v371 >= 0x7FFFFFFFFFFFFFF8)
                    v372 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v372 = v370;
                  if (v372)
                  {
                    v373 = (char *)sub_18F26F8D4(v418, v372);
                    v368 = *(char **)(a1 + 128);
                    v299 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    v373 = 0;
                  }
                  v402 = &v373[8 * v369];
                  *(_QWORD *)v402 = 0;
                  v289 = v402 + 8;
                  while (v299 != v368)
                  {
                    v403 = *((_QWORD *)v299 - 1);
                    v299 -= 8;
                    *((_QWORD *)v402 - 1) = v403;
                    v402 -= 8;
                  }
                  *(_QWORD *)(a1 + 128) = v402;
                  *(_QWORD *)(a1 + 136) = v289;
                  *(_QWORD *)(a1 + 144) = &v373[8 * v372];
                  if (v368)
                    operator delete(v368);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v299 = 0;
                  v289 = v299 + 8;
                }
                *(_QWORD *)(a1 + 136) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v119 = *((_QWORD *)this + 1);
              v120 = *((_QWORD *)this + 2);
              while (v119 < v120 && !*((_BYTE *)this + 24))
              {
                v122 = *(char **)(a1 + 136);
                v121 = *(_QWORD *)(a1 + 144);
                if ((unint64_t)v122 >= v121)
                {
                  v124 = (char *)*v422;
                  v125 = (v122 - (_BYTE *)*v422) >> 3;
                  v126 = v125 + 1;
                  if ((unint64_t)(v125 + 1) >> 61)
                    goto LABEL_656;
                  v127 = v121 - (_QWORD)v124;
                  if (v127 >> 2 > v126)
                    v126 = v127 >> 2;
                  if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
                    v128 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v128 = v126;
                  if (v128)
                  {
                    v129 = (char *)sub_18F26F8D4(v418, v128);
                    v124 = *(char **)(a1 + 128);
                    v122 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    v129 = 0;
                  }
                  v130 = &v129[8 * v125];
                  *(_QWORD *)v130 = 0;
                  v123 = v130 + 8;
                  while (v122 != v124)
                  {
                    v131 = *((_QWORD *)v122 - 1);
                    v122 -= 8;
                    *((_QWORD *)v130 - 1) = v131;
                    v130 -= 8;
                  }
                  *(_QWORD *)(a1 + 128) = v130;
                  *(_QWORD *)(a1 + 136) = v123;
                  *(_QWORD *)(a1 + 144) = &v129[8 * v128];
                  if (v124)
                    operator delete(v124);
                }
                else
                {
                  *(_QWORD *)v122 = 0;
                  v123 = v122 + 8;
                }
                *(_QWORD *)(a1 + 136) = v123;
                v132 = *((_QWORD *)this + 1);
                if (v132 > 0xFFFFFFFFFFFFFFF7 || v132 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v123 - 1) = *(_QWORD *)(*(_QWORD *)this + v132);
                v120 = *((_QWORD *)this + 2);
                v119 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v119;
              }
              goto LABEL_253;
            case 164:
              if (v27 != 2)
              {
                v301 = *(char **)(a1 + 184);
                v300 = *(_QWORD *)(a1 + 192);
                if ((unint64_t)v301 >= v300)
                {
                  v374 = (char *)*v423;
                  v375 = (v301 - (_BYTE *)*v423) >> 3;
                  v376 = v375 + 1;
                  if ((unint64_t)(v375 + 1) >> 61)
LABEL_657:
                    sub_18F26F8C0();
                  v377 = v300 - (_QWORD)v374;
                  if (v377 >> 2 > v376)
                    v376 = v377 >> 2;
                  if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFF8)
                    v378 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v378 = v376;
                  if (v378)
                  {
                    v379 = (char *)sub_18F26F8D4(v419, v378);
                    v374 = *(char **)(a1 + 176);
                    v301 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    v379 = 0;
                  }
                  v404 = &v379[8 * v375];
                  *(_QWORD *)v404 = 0;
                  v289 = v404 + 8;
                  while (v301 != v374)
                  {
                    v405 = *((_QWORD *)v301 - 1);
                    v301 -= 8;
                    *((_QWORD *)v404 - 1) = v405;
                    v404 -= 8;
                  }
                  *(_QWORD *)(a1 + 176) = v404;
                  *(_QWORD *)(a1 + 184) = v289;
                  *(_QWORD *)(a1 + 192) = &v379[8 * v378];
                  if (v374)
                    operator delete(v374);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v301 = 0;
                  v289 = v301 + 8;
                }
                *(_QWORD *)(a1 + 184) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v133 = *((_QWORD *)this + 1);
              v134 = *((_QWORD *)this + 2);
              while (v133 < v134 && !*((_BYTE *)this + 24))
              {
                v136 = *(char **)(a1 + 184);
                v135 = *(_QWORD *)(a1 + 192);
                if ((unint64_t)v136 >= v135)
                {
                  v138 = (char *)*v423;
                  v139 = (v136 - (_BYTE *)*v423) >> 3;
                  v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 61)
                    goto LABEL_657;
                  v141 = v135 - (_QWORD)v138;
                  if (v141 >> 2 > v140)
                    v140 = v141 >> 2;
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF8)
                    v142 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v142 = v140;
                  if (v142)
                  {
                    v143 = (char *)sub_18F26F8D4(v419, v142);
                    v138 = *(char **)(a1 + 176);
                    v136 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    v143 = 0;
                  }
                  v144 = &v143[8 * v139];
                  *(_QWORD *)v144 = 0;
                  v137 = v144 + 8;
                  while (v136 != v138)
                  {
                    v145 = *((_QWORD *)v136 - 1);
                    v136 -= 8;
                    *((_QWORD *)v144 - 1) = v145;
                    v144 -= 8;
                  }
                  *(_QWORD *)(a1 + 176) = v144;
                  *(_QWORD *)(a1 + 184) = v137;
                  *(_QWORD *)(a1 + 192) = &v143[8 * v142];
                  if (v138)
                    operator delete(v138);
                }
                else
                {
                  *(_QWORD *)v136 = 0;
                  v137 = v136 + 8;
                }
                *(_QWORD *)(a1 + 184) = v137;
                v146 = *((_QWORD *)this + 1);
                if (v146 > 0xFFFFFFFFFFFFFFF7 || v146 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v137 - 1) = *(_QWORD *)(*(_QWORD *)this + v146);
                v134 = *((_QWORD *)this + 2);
                v133 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v133;
              }
              goto LABEL_253;
            case 165:
              if (v27 != 2)
              {
                v303 = *(char **)(a1 + 160);
                v302 = *(_QWORD *)(a1 + 168);
                if ((unint64_t)v303 >= v302)
                {
                  v380 = (char *)*v424;
                  v381 = (v303 - (_BYTE *)*v424) >> 3;
                  v382 = v381 + 1;
                  if ((unint64_t)(v381 + 1) >> 61)
LABEL_658:
                    sub_18F26F8C0();
                  v383 = v302 - (_QWORD)v380;
                  if (v383 >> 2 > v382)
                    v382 = v383 >> 2;
                  if ((unint64_t)v383 >= 0x7FFFFFFFFFFFFFF8)
                    v384 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v384 = v382;
                  if (v384)
                  {
                    v385 = (char *)sub_18F26F8D4(v420, v384);
                    v380 = *(char **)(a1 + 152);
                    v303 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    v385 = 0;
                  }
                  v406 = &v385[8 * v381];
                  *(_QWORD *)v406 = 0;
                  v289 = v406 + 8;
                  while (v303 != v380)
                  {
                    v407 = *((_QWORD *)v303 - 1);
                    v303 -= 8;
                    *((_QWORD *)v406 - 1) = v407;
                    v406 -= 8;
                  }
                  *(_QWORD *)(a1 + 152) = v406;
                  *(_QWORD *)(a1 + 160) = v289;
                  *(_QWORD *)(a1 + 168) = &v385[8 * v384];
                  if (v380)
                    operator delete(v380);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v303 = 0;
                  v289 = v303 + 8;
                }
                *(_QWORD *)(a1 + 160) = v289;
                goto LABEL_636;
              }
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v147 = *((_QWORD *)this + 1);
              v148 = *((_QWORD *)this + 2);
              while (v147 < v148 && !*((_BYTE *)this + 24))
              {
                v150 = *(char **)(a1 + 160);
                v149 = *(_QWORD *)(a1 + 168);
                if ((unint64_t)v150 >= v149)
                {
                  v152 = (char *)*v424;
                  v153 = (v150 - (_BYTE *)*v424) >> 3;
                  v154 = v153 + 1;
                  if ((unint64_t)(v153 + 1) >> 61)
                    goto LABEL_658;
                  v155 = v149 - (_QWORD)v152;
                  if (v155 >> 2 > v154)
                    v154 = v155 >> 2;
                  if ((unint64_t)v155 >= 0x7FFFFFFFFFFFFFF8)
                    v156 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v156 = v154;
                  if (v156)
                  {
                    v157 = (char *)sub_18F26F8D4(v420, v156);
                    v152 = *(char **)(a1 + 152);
                    v150 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    v157 = 0;
                  }
                  v158 = &v157[8 * v153];
                  *(_QWORD *)v158 = 0;
                  v151 = v158 + 8;
                  while (v150 != v152)
                  {
                    v159 = *((_QWORD *)v150 - 1);
                    v150 -= 8;
                    *((_QWORD *)v158 - 1) = v159;
                    v158 -= 8;
                  }
                  *(_QWORD *)(a1 + 152) = v158;
                  *(_QWORD *)(a1 + 160) = v151;
                  *(_QWORD *)(a1 + 168) = &v157[8 * v156];
                  if (v152)
                    operator delete(v152);
                }
                else
                {
                  *(_QWORD *)v150 = 0;
                  v151 = v150 + 8;
                }
                *(_QWORD *)(a1 + 160) = v151;
                v160 = *((_QWORD *)this + 1);
                if (v160 > 0xFFFFFFFFFFFFFFF7 || v160 + 8 > *((_QWORD *)this + 2))
                  goto LABEL_252;
                *(v151 - 1) = *(_QWORD *)(*(_QWORD *)this + v160);
                v148 = *((_QWORD *)this + 2);
                v147 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v147;
              }
              goto LABEL_253;
            case 166:
              if (v27 == 2)
              {
                if ((PB::Reader::placeMark() & 1) != 0)
                  return 0;
                v161 = *((_QWORD *)this + 1);
                v162 = *((_QWORD *)this + 2);
                while (v161 < v162 && !*((_BYTE *)this + 24))
                {
                  v164 = *(char **)(a1 + 208);
                  v163 = *(_QWORD *)(a1 + 216);
                  if ((unint64_t)v164 >= v163)
                  {
                    v166 = (char *)*v425;
                    v167 = (v164 - (_BYTE *)*v425) >> 3;
                    v168 = v167 + 1;
                    if ((unint64_t)(v167 + 1) >> 61)
                      goto LABEL_659;
                    v169 = v163 - (_QWORD)v166;
                    if (v169 >> 2 > v168)
                      v168 = v169 >> 2;
                    if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFF8)
                      v170 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v170 = v168;
                    if (v170)
                    {
                      v171 = (char *)sub_18F26F8D4(v421, v170);
                      v166 = *(char **)(a1 + 200);
                      v164 = *(char **)(a1 + 208);
                    }
                    else
                    {
                      v171 = 0;
                    }
                    v172 = &v171[8 * v167];
                    *(_QWORD *)v172 = 0;
                    v165 = v172 + 8;
                    while (v164 != v166)
                    {
                      v173 = *((_QWORD *)v164 - 1);
                      v164 -= 8;
                      *((_QWORD *)v172 - 1) = v173;
                      v172 -= 8;
                    }
                    *(_QWORD *)(a1 + 200) = v172;
                    *(_QWORD *)(a1 + 208) = v165;
                    *(_QWORD *)(a1 + 216) = &v171[8 * v170];
                    if (v166)
                      operator delete(v166);
                  }
                  else
                  {
                    *(_QWORD *)v164 = 0;
                    v165 = v164 + 8;
                  }
                  *(_QWORD *)(a1 + 208) = v165;
                  v174 = *((_QWORD *)this + 1);
                  if (v174 > 0xFFFFFFFFFFFFFFF7 || v174 + 8 > *((_QWORD *)this + 2))
                  {
LABEL_252:
                    *((_BYTE *)this + 24) = 1;
                    break;
                  }
                  *(v165 - 1) = *(_QWORD *)(*(_QWORD *)this + v174);
                  v162 = *((_QWORD *)this + 2);
                  v161 = *((_QWORD *)this + 1) + 8;
                  *((_QWORD *)this + 1) = v161;
                }
LABEL_253:
                PB::Reader::recallMark();
                v2 = &jpt_18F21C050;
              }
              else
              {
                v305 = *(char **)(a1 + 208);
                v304 = *(_QWORD *)(a1 + 216);
                if ((unint64_t)v305 >= v304)
                {
                  v386 = (char *)*v425;
                  v387 = (v305 - (_BYTE *)*v425) >> 3;
                  v388 = v387 + 1;
                  if ((unint64_t)(v387 + 1) >> 61)
LABEL_659:
                    sub_18F26F8C0();
                  v389 = v304 - (_QWORD)v386;
                  if (v389 >> 2 > v388)
                    v388 = v389 >> 2;
                  if ((unint64_t)v389 >= 0x7FFFFFFFFFFFFFF8)
                    v390 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v390 = v388;
                  if (v390)
                  {
                    v391 = (char *)sub_18F26F8D4(v421, v390);
                    v386 = *(char **)(a1 + 200);
                    v305 = *(char **)(a1 + 208);
                  }
                  else
                  {
                    v391 = 0;
                  }
                  v408 = &v391[8 * v387];
                  *(_QWORD *)v408 = 0;
                  v289 = v408 + 8;
                  while (v305 != v386)
                  {
                    v409 = *((_QWORD *)v305 - 1);
                    v305 -= 8;
                    *((_QWORD *)v408 - 1) = v409;
                    v408 -= 8;
                  }
                  *(_QWORD *)(a1 + 200) = v408;
                  *(_QWORD *)(a1 + 208) = v289;
                  *(_QWORD *)(a1 + 216) = &v391[8 * v390];
                  if (v386)
                    operator delete(v386);
                  v2 = &jpt_18F21C050;
                }
                else
                {
                  *(_QWORD *)v305 = 0;
                  v289 = v305 + 8;
                }
                *(_QWORD *)(a1 + 208) = v289;
LABEL_636:
                v410 = *((_QWORD *)this + 1);
                if (v410 <= 0xFFFFFFFFFFFFFFF7 && v410 + 8 <= *((_QWORD *)this + 2))
                {
                  *(v289 - 1) = *(_QWORD *)(*(_QWORD *)this + v410);
LABEL_640:
                  *((_QWORD *)this + 1) += 8;
                }
                else
                {
                  *((_BYTE *)this + 24) = 1;
                }
              }
LABEL_641:
              v4 = *((_QWORD *)this + 1);
              v5 = *((_QWORD *)this + 2);
              v6 = *((unsigned __int8 *)this + 24);
              if (v4 >= v5 || v6 != 0)
                return v6 == 0;
              break;
            default:
              switch((int)v28)
              {
                case 'e':
                  *(_DWORD *)(a1 + 396) |= 0x10000000u;
                  v51 = *((_QWORD *)this + 1);
                  if (v51 >= *((_QWORD *)this + 2))
                  {
                    v54 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v52 = v51 + 1;
                    v53 = *(unsigned __int8 *)(*(_QWORD *)this + v51);
                    *((_QWORD *)this + 1) = v52;
                    v54 = v53 != 0;
                  }
                  *(_BYTE *)(a1 + 392) = v54;
                  goto LABEL_641;
                case 'f':
                  *(_DWORD *)(a1 + 396) |= 0x8000000u;
                  v271 = *((_QWORD *)this + 1);
                  if (v271 >= *((_QWORD *)this + 2))
                  {
                    v274 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v272 = v271 + 1;
                    v273 = *(unsigned __int8 *)(*(_QWORD *)this + v271);
                    *((_QWORD *)this + 1) = v272;
                    v274 = v273 != 0;
                  }
                  *(_BYTE *)(a1 + 391) = v274;
                  goto LABEL_641;
                case 'g':
                  *(_DWORD *)(a1 + 396) |= 0x20000000u;
                  v275 = *((_QWORD *)this + 1);
                  if (v275 >= *((_QWORD *)this + 2))
                  {
                    v278 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v276 = v275 + 1;
                    v277 = *(unsigned __int8 *)(*(_QWORD *)this + v275);
                    *((_QWORD *)this + 1) = v276;
                    v278 = v277 != 0;
                  }
                  *(_BYTE *)(a1 + 393) = v278;
                  goto LABEL_641;
                case 'h':
                  *(_DWORD *)(a1 + 396) |= 0x2000000u;
                  v279 = *((_QWORD *)this + 1);
                  if (v279 >= *((_QWORD *)this + 2))
                  {
                    v282 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v280 = v279 + 1;
                    v281 = *(unsigned __int8 *)(*(_QWORD *)this + v279);
                    *((_QWORD *)this + 1) = v280;
                    v282 = v281 != 0;
                  }
                  *(_BYTE *)(a1 + 389) = v282;
                  goto LABEL_641;
                case 'i':
                  *(_DWORD *)(a1 + 396) |= 0x4000000u;
                  v283 = *((_QWORD *)this + 1);
                  if (v283 >= *((_QWORD *)this + 2))
                  {
                    v286 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v284 = v283 + 1;
                    v285 = *(unsigned __int8 *)(*(_QWORD *)this + v283);
                    *((_QWORD *)this + 1) = v284;
                    v286 = v285 != 0;
                  }
                  *(_BYTE *)(a1 + 390) = v286;
                  goto LABEL_641;
                default:
                  goto LABEL_58;
              }
          }
          break;
      }
    }
    v22 = 0;
    v23 = 0;
    v18 = 0;
    if (v4 > v5)
      v5 = v4;
    while (v5 != v4)
    {
      v24 = v4 + 1;
      v25 = *(_BYTE *)(v15 + v4);
      *((_QWORD *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0)
        goto LABEL_21;
      v22 += 7;
      v4 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        v18 = 0;
        goto LABEL_21;
      }
    }
    v6 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v6 == 0;
}

uint64_t sub_18F21DECC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double *v17;
  double *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double *v26;
  double *v27;
  double v28;
  double *v29;
  double *v30;
  double v31;

  v3 = result;
  v4 = *(_DWORD *)(result + 396);
  if ((v4 & 0x80000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0)
      goto LABEL_5;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(double *)(v3 + 224));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(double *)(v3 + 368));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this, *(double *)(v3 + 264));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(double *)(v3 + 288));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(double *)(v3 + 304));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(double *)(v3 + 296));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(double *)(v3 + 280));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(double *)(v3 + 272));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(double *)(v3 + 320));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(double *)(v3 + 312));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0)
      goto LABEL_23;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(double *)(v3 + 240));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(double *)(v3 + 248));
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_32;
LABEL_92:
    result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_91:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0)
    goto LABEL_92;
LABEL_32:
  if ((v4 & 0x4000000) != 0)
LABEL_33:
    result = PB::Writer::write(this);
LABEL_34:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(double **)(v3 + 104);
  v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    v16 = *v14++;
    result = PB::Writer::write(this, v16);
  }
  v17 = *(double **)(v3 + 80);
  v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19);
  }
  v20 = *(double **)(v3 + 128);
  v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    v22 = *v20++;
    result = PB::Writer::write(this, v22);
  }
  v23 = *(double **)(v3 + 176);
  v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    v25 = *v23++;
    result = PB::Writer::write(this, v25);
  }
  v26 = *(double **)(v3 + 152);
  v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    v28 = *v26++;
    result = PB::Writer::write(this, v28);
  }
  v30 = *(double **)(v3 + 200);
  v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    v31 = *v30++;
    result = PB::Writer::write(this, v31);
  }
  return result;
}

uint64_t sub_18F21E394(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EA30;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_18F21E3AC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F21E3D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "afterElevationMedian", *(float *)(a1 + 56));
    v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "beforeElevationMedian", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "endTimestampOfWindow");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "impactTimestamp");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pressureTimestamp");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "rangeOfElevationInWindow", *(float *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "startTimestampOfWindow");
    if ((*(_WORD *)(a1 + 72) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "startTimestampOfLastInspectedWindow");
  v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x200) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F21E540(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  uint64_t result;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_122;
            case 2u:
              *(_WORD *)(a1 + 72) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  v59 = v20++;
                  v60 = *(_BYTE *)(v21 + v59);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    v24 = 0;
LABEL_126:
                    v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
                goto LABEL_126;
              }
              v22 = 0;
              v23 = 0;
              v24 = 0;
              do
              {
                v2 = v20 + 1;
                *((_QWORD *)this + 1) = v20 + 1;
                v25 = *(_BYTE *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0)
                  goto LABEL_127;
                v22 += 7;
                v20 = v2;
                v14 = v23++ > 8;
              }
              while (!v14);
              v24 = 0;
LABEL_127:
              *(_QWORD *)(a1 + 32) = v24;
              goto LABEL_153;
            case 3u:
              *(_WORD *)(a1 + 72) |= 2u;
              v26 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v27 = *(_QWORD *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v30 = 0;
                if (v2 <= v26)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v26)
                  {
                    v30 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v63 = v26++;
                  v64 = *(_BYTE *)(v27 + v63);
                  *((_QWORD *)this + 1) = v26;
                  v30 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    v30 = 0;
LABEL_131:
                    v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v30 = 0;
                goto LABEL_131;
              }
              v28 = 0;
              v29 = 0;
              v30 = 0;
              do
              {
                v2 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v31 = *(_BYTE *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0)
                  goto LABEL_132;
                v28 += 7;
                v26 = v2;
                v14 = v29++ > 8;
              }
              while (!v14);
              v30 = 0;
LABEL_132:
              *(_QWORD *)(a1 + 16) = v30;
              goto LABEL_153;
            case 4u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              v32 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v33 = *(_QWORD *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v36 = 0;
                if (v2 <= v32)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v32++;
                  v68 = *(_BYTE *)(v33 + v67);
                  *((_QWORD *)this + 1) = v32;
                  v36 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_136:
                    v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v36) = 0;
                goto LABEL_136;
              }
              v34 = 0;
              v35 = 0;
              v36 = 0;
              do
              {
                v2 = v32 + 1;
                *((_QWORD *)this + 1) = v32 + 1;
                v37 = *(_BYTE *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0)
                  goto LABEL_137;
                v34 += 7;
                v32 = v2;
                v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 68) = v36;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_141:
                    v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_141;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_142;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_142:
              *(_QWORD *)(a1 + 40) = v43;
              goto LABEL_153;
            case 0xCu:
              *(_WORD *)(a1 + 72) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    v49 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    v49 = 0;
LABEL_146:
                    v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v49 = 0;
                goto LABEL_146;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_147;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              v49 = 0;
LABEL_147:
              *(_QWORD *)(a1 + 48) = v49;
              goto LABEL_153;
            case 0xDu:
              *(_WORD *)(a1 + 72) |= 1u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_151:
                    v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v55 = 0;
                goto LABEL_151;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_152;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_152:
              *(_QWORD *)(a1 + 8) = v55;
LABEL_153:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x14u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_121;
            case 0x15u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_121:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_122:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_153;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_153;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F21ED2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 72);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 56));
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  if ((*(_WORD *)(v3 + 72) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 56));
  return result;
}

uint64_t sub_18F21EE68(uint64_t result)
{
  *(_QWORD *)result = &off_1E29516D0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_18F21EE80(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F21EEA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aopTsImpact");
    v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsNow");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "aopTsSensor");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "nPeaks");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "repetitiveMotion");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "repetitiveMotionEndTs");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "repetitiveMotionStartTs");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "seq");
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
LABEL_27:
    PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 72));
    if ((*(_WORD *)(a1 + 80) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_26:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 68));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) != 0)
    goto LABEL_27;
LABEL_13:
  if ((v5 & 0x1000) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 76));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F21F074(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 4u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  v77 = v20++;
                  v78 = *(_BYTE *)(v21 + v77);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_167:
                v2 = v77 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_168;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_168:
              *(_QWORD *)(a1 + 24) = v24;
              goto LABEL_209;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_173;
                  }
                  v81 = v27++;
                  v82 = *(_BYTE *)(v28 + v81);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_172:
                    v2 = v81 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_172;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_173;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_173:
              *(_QWORD *)(a1 + 16) = v31;
              goto LABEL_209;
            case 3u:
              *(_WORD *)(a1 + 80) |= 1u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  v85 = v33++;
                  v86 = *(_BYTE *)(v34 + v85);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_177:
                    v2 = v85 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_177;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_178;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_178:
              *(_QWORD *)(a1 + 8) = v37;
              goto LABEL_209;
            case 4u:
              *(_WORD *)(a1 + 80) |= 0x200u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  v89 = v39++;
                  v90 = *(_BYTE *)(v40 + v89);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_182:
                    v2 = v89 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_182;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_183;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 64) = v43;
              goto LABEL_209;
            case 5u:
              *(_WORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_163;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_163;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_70;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_163;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  v93 = v45++;
                  v94 = *(_BYTE *)(v46 + v93);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_187:
                    v2 = v93 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_187;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_188;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_188:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_209;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_163:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_70:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0xAu:
              *(_WORD *)(a1 + 80) |= 0x100u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  v97 = v51++;
                  v98 = *(_BYTE *)(v52 + v97);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_192:
                    v2 = v97 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_192;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_193;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_193:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_209;
            case 0xBu:
              *(_WORD *)(a1 + 80) |= 0x10u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    v61 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  v101 = v57++;
                  v102 = *(_BYTE *)(v58 + v101);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    v61 = 0;
LABEL_197:
                    v2 = v101 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v61 = 0;
                goto LABEL_197;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_198;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              v61 = 0;
LABEL_198:
              *(_QWORD *)(a1 + 40) = v61;
              goto LABEL_209;
            case 0xCu:
              *(_WORD *)(a1 + 80) |= 8u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v103 = 0;
                v104 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    v67 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  v105 = v63++;
                  v106 = *(_BYTE *)(v64 + v105);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0)
                    break;
                  v103 += 7;
                  v14 = v104++ > 8;
                  if (v14)
                  {
                    v67 = 0;
LABEL_202:
                    v2 = v105 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v67 = 0;
                goto LABEL_202;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_203;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              v67 = 0;
LABEL_203:
              *(_QWORD *)(a1 + 32) = v67;
              goto LABEL_209;
            case 0xDu:
              *(_WORD *)(a1 + 80) |= 0x80u;
              v69 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v70 = *(_QWORD *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v107 = 0;
                v108 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  v109 = v69++;
                  v110 = *(_BYTE *)(v70 + v109);
                  *((_QWORD *)this + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0)
                    break;
                  v107 += 7;
                  v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_207:
                    v2 = v109 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v73) = 0;
                goto LABEL_207;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)this + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_208;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_208:
              *(_DWORD *)(a1 + 56) = v73;
LABEL_209:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_209;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F21FB1C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 80);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 80) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_18F21FCB0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F21FCD4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "crownUpDown");
    v5 = *(_DWORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fallType");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "impactMaxAccelNormAlertThreshold", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHeartRateThreshold", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingStatsThreshold", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isADLImpact");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isFallDetectionFeatureEnabled");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isNearFall");
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "metMinutePercentile90", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "metMinutePercentile95", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "metMinutePercentile98", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "metMinutePercentileActual", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "otherFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "slipFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "userAgeBucket");
    if ((*(_DWORD *)(a1 + 72) & 0x4000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "tripFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x2000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 0x4000) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F21FF44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 72) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_131;
                  }
                  v53 = v20++;
                  v54 = *(_BYTE *)(v21 + v53);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_130:
                v2 = v53 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_131;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_131:
              *(_DWORD *)(a1 + 8) = v24;
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 72) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 70) = v28;
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 72) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_136;
                  }
                  v57 = v29++;
                  v58 = *(_BYTE *)(v30 + v57);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_135:
                    v2 = v57 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_135;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_136;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_136:
              *(_DWORD *)(a1 + 12) = v33;
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 72) |= 0x2000u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_141;
                  }
                  v61 = v35++;
                  v62 = *(_BYTE *)(v36 + v61);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_140:
                    v2 = v61 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_140;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_141;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_141:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_147;
            case 5u:
              *(_DWORD *)(a1 + 72) |= 0x4000u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  v65 = v41++;
                  v66 = *(_BYTE *)(v42 + v65);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_145:
                    v2 = v65 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_145;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_146;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 64) = v45;
LABEL_147:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_DWORD *)(a1 + 72) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 7u:
              *(_DWORD *)(a1 + 72) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_DWORD *)(a1 + 72) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 9u:
              *(_DWORD *)(a1 + 72) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xAu:
              *(_DWORD *)(a1 + 72) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xBu:
              *(_DWORD *)(a1 + 72) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xCu:
              *(_DWORD *)(a1 + 72) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xDu:
              *(_DWORD *)(a1 + 72) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xEu:
              *(_DWORD *)(a1 + 72) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0xFu:
              *(_DWORD *)(a1 + 72) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_86;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_126;
            case 0x10u:
              *(_DWORD *)(a1 + 72) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_126:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_86:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 72) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 69) = v48;
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 72) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 68) = v50;
              goto LABEL_147;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_147;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2207A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 72);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_36:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 72) & 0x8000) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_18F2209C0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E294CBC8;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  return result;
}

void sub_18F2209E8(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E294CBC8;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  PB::Base::~Base(this);
}

void sub_18F220B68(PB::Base *a1)
{
  sub_18F2209E8(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F220B8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "accel100");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "accel800");
  if ((*(_BYTE *)(a1 + 128) & 1) != 0)
    PB::TextFormatter::format(this, "aopTimestamp");
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "dm");
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "dmAlwaysOn");
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "fallState");
  v10 = *(_QWORD *)(a1 + 56);
  if (v10)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "fallStats");
  v11 = *(_QWORD *)(a1 + 64);
  if (v11)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "gyro100");
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v12 + 32))(v12, this, "gyro200");
  v13 = *(_QWORD *)(a1 + 80);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "heartRate");
  v14 = *(_QWORD *)(a1 + 88);
  if (v14)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "meta");
  v15 = *(_QWORD *)(a1 + 96);
  if (v15)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v15 + 32))(v15, this, "odometerEntry");
  v16 = *(_QWORD *)(a1 + 104);
  if (v16)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v16 + 32))(v16, this, "pressure");
  v17 = *(_QWORD *)(a1 + 112);
  if (v17)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "suppressionFeatures");
  v18 = *(_QWORD *)(a1 + 120);
  if (v18)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v18 + 32))(v18, this, "wristState");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F220D98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 2u:
        *(_BYTE *)(a1 + 128) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v45 = 0;
          v46 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          do
          {
            if (v21 == v20)
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_77;
            }
            v47 = v20 + 1;
            v48 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)this + 1) = v47;
            v25 |= (unint64_t)(v48 & 0x7F) << v45;
            if ((v48 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                v25 = 0;
              goto LABEL_77;
            }
            v45 += 7;
            v20 = v47;
            v14 = v46++ > 8;
          }
          while (!v14);
LABEL_73:
          v25 = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_73;
          }
        }
LABEL_77:
        *(_QWORD *)(a1 + 24) = v25;
        goto LABEL_62;
      case 3u:
        v29 = operator new();
        *(_QWORD *)v29 = &off_1E294CE68;
        *(_DWORD *)(v29 + 72) = 0;
        v30 = *(_QWORD *)(a1 + 88);
        *(_QWORD *)(a1 + 88) = v29;
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v29 = *(_QWORD *)(a1 + 88);
        }
        goto LABEL_59;
      case 4u:
        v29 = operator new();
        sub_18F2718AC(v29);
        v31 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v29;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v29 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_59;
      case 5u:
        v29 = operator new();
        sub_18F2718AC(v29);
        v32 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v29;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v29 = *(_QWORD *)(a1 + 16);
        }
        goto LABEL_59;
      case 6u:
        v29 = operator new();
        *(_QWORD *)v29 = &off_1E2951AF8;
        *(_DWORD *)(v29 + 44) = 0;
        v33 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v29;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v29 = *(_QWORD *)(a1 + 64);
        }
        goto LABEL_59;
      case 7u:
        v29 = operator new();
        *(_QWORD *)v29 = &off_1E2951AF8;
        *(_DWORD *)(v29 + 44) = 0;
        v34 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = v29;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          v29 = *(_QWORD *)(a1 + 72);
        }
        goto LABEL_59;
      case 8u:
        v29 = operator new();
        sub_18F276134(v29);
        v35 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v29;
        if (v35)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
          v29 = *(_QWORD *)(a1 + 32);
        }
        goto LABEL_59;
      case 9u:
        v29 = operator new();
        sub_18F31F8C0(v29);
        v36 = *(_QWORD *)(a1 + 104);
        *(_QWORD *)(a1 + 104) = v29;
        if (v36)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          v29 = *(_QWORD *)(a1 + 104);
        }
        goto LABEL_59;
      case 0xAu:
        v29 = operator new();
        sub_18F2D8FA8((_QWORD *)v29);
        v37 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v29;
        if (v37)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          v29 = *(_QWORD *)(a1 + 80);
        }
        goto LABEL_59;
      case 0xBu:
        v29 = operator new();
        sub_18F2EE9B0(v29);
        v38 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v29;
        if (v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          v29 = *(_QWORD *)(a1 + 120);
        }
        goto LABEL_59;
      case 0xCu:
        v29 = operator new();
        *(_QWORD *)v29 = &off_1E29520E8;
        *(_DWORD *)(v29 + 48) = 0;
        v39 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = v29;
        if (v39)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v29 = *(_QWORD *)(a1 + 48);
        }
        goto LABEL_59;
      case 0xDu:
        v29 = operator new();
        *(_QWORD *)v29 = &off_1E2952120;
        *(_QWORD *)(v29 + 216) = 0;
        v40 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v29;
        if (v40)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          v29 = *(_QWORD *)(a1 + 56);
        }
        goto LABEL_59;
      case 0xEu:
        v29 = operator new();
        *(_QWORD *)v29 = &off_1E29516D0;
        *(_DWORD *)(v29 + 80) = 0;
        v41 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v29;
        if (v41)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
          v29 = *(_QWORD *)(a1 + 112);
        }
        goto LABEL_59;
      case 0xFu:
        v29 = operator new();
        sub_18F276134(v29);
        v42 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v29;
        if (v42)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          v29 = *(_QWORD *)(a1 + 40);
        }
        goto LABEL_59;
      case 0x10u:
        v29 = operator new();
        sub_18F30BAE4(v29);
        v43 = *(_QWORD *)(a1 + 96);
        *(_QWORD *)(a1 + 96) = v29;
        if (v43)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
          v29 = *(_QWORD *)(a1 + 96);
        }
LABEL_59:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v29 + 16))(v29, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_62:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_62;
    }
  }
}

uint64_t sub_18F2213FC(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951AF8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

_QWORD *sub_18F221410(_QWORD *result)
{
  *result = &off_1E2952120;
  result[27] = 0;
  return result;
}

uint64_t sub_18F221424(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  const PB::Base *v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  const PB::Base *v10;
  const PB::Base *v11;
  const PB::Base *v12;
  const PB::Base *v13;
  const PB::Base *v14;
  const PB::Base *v15;
  const PB::Base *v16;
  const PB::Base *v17;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 128) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = (const PB::Base *)v3[11];
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = (const PB::Base *)v3[1];
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = (const PB::Base *)v3[2];
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = (const PB::Base *)v3[8];
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7);
  v8 = (const PB::Base *)v3[9];
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8);
  v9 = (const PB::Base *)v3[4];
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9);
  v10 = (const PB::Base *)v3[13];
  if (v10)
    result = PB::Writer::writeSubmessage(this, v10);
  v11 = (const PB::Base *)v3[10];
  if (v11)
    result = PB::Writer::writeSubmessage(this, v11);
  v12 = (const PB::Base *)v3[15];
  if (v12)
    result = PB::Writer::writeSubmessage(this, v12);
  v13 = (const PB::Base *)v3[6];
  if (v13)
    result = PB::Writer::writeSubmessage(this, v13);
  v14 = (const PB::Base *)v3[7];
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14);
  v15 = (const PB::Base *)v3[14];
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15);
  v16 = (const PB::Base *)v3[5];
  if (v16)
    result = PB::Writer::writeSubmessage(this, v16);
  v17 = (const PB::Base *)v3[12];
  if (v17)
    return PB::Writer::writeSubmessage(this, v17);
  return result;
}

void sub_18F221580(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2215A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aopTsNow");
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsSensor");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "fallAlertSentFromReferee");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isFall");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "response");
    if ((*(_BYTE *)(a1 + 48) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "resolution");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) != 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2216D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  int v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  unint64_t v87;
  char v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 2u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v20++;
                  v68 = *(_BYTE *)(v21 + v67);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_136;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_136:
                v3 = v67 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_137;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_137:
              *(_QWORD *)(a1 + 16) = v24;
              goto LABEL_168;
            case 2u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v27++;
                  v72 = *(_BYTE *)(v28 + v71);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_141:
                    v3 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_141;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_142;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_142:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_168;
            case 3u:
              *(_BYTE *)(a1 + 48) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v33++;
                  v76 = *(_BYTE *)(v34 + v75);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    v3 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_146;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_147;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_168;
            case 4u:
              *(_BYTE *)(a1 + 48) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v39++;
                  v80 = *(_BYTE *)(v40 + v79);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    v3 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_151;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_152;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_168;
            case 5u:
              *(_BYTE *)(a1 + 48) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v81 = 0;
                v82 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  v83 = v45++;
                  v84 = *(_BYTE *)(v46 + v83);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0)
                    break;
                  v81 += 7;
                  v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_156:
                    v3 = v83 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_156;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_157;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 36) = v49;
              goto LABEL_168;
            case 6u:
              *(_BYTE *)(a1 + 48) |= 0x10u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v85 = 0;
                v86 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  v87 = v51++;
                  v88 = *(_BYTE *)(v52 + v87);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0)
                    break;
                  v85 += 7;
                  v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_161:
                    v3 = v87 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_161;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v3 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_162;
                v53 += 7;
                v51 = v3;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 32) = v55;
              goto LABEL_168;
            case 7u:
              *(_BYTE *)(a1 + 48) |= 8u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v89 = 0;
                v90 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  v91 = v57++;
                  v92 = *(_BYTE *)(v58 + v91);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0)
                    break;
                  v89 += 7;
                  v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_166:
                    v3 = v91 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_166;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v3 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_167;
                v59 += 7;
                v57 = v3;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_168:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            case 8u:
              *(_BYTE *)(a1 + 48) |= 0x80u;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              if (v3 >= v2)
              {
                v64 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v63 = *(unsigned __int8 *)(*(_QWORD *)this + v3++);
                *((_QWORD *)this + 1) = v3;
                v64 = v63 != 0;
              }
              *(_BYTE *)(a1 + 44) = v64;
              goto LABEL_168;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_168;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F221EF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 48) & 0x80) != 0)
    return PB::Writer::write(this);
  return result;
}

void sub_18F221FF8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22201C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    v5 = *(_QWORD *)(a1 + 216);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_54;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "accelPathLengthWithPeak", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0)
      goto LABEL_8;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "aopTsNow");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "aopTsSensor");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "crown");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "extrapolatedMaxAccelNorm", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "extrapolatedMaxMinusMin", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "fallType");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "isFall");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "isNearFall");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "jerkVectorMagMax", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "magMax", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0)
      goto LABEL_23;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0)
      goto LABEL_24;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_26;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_27;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "operatingMode");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "pathLengthDecorrelation", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "pathLengthDelaySpread", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0)
      goto LABEL_30;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "pathLengthHarmonicMean", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_34;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "seq");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_35;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "simulated");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_36;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_37;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 156));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_38;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 160));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_39;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "trialCount");
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_40;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "xJerkScalarMagMax", *(float *)(a1 + 168));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_41;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "xMax", *(float *)(a1 + 172));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_42;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "xMin", *(float *)(a1 + 176));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_43;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "xZCTime", *(float *)(a1 + 180));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_44;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "yJerkScalarMagMax", *(float *)(a1 + 184));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_45;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "yMax", *(float *)(a1 + 188));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_46;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "yMin", *(float *)(a1 + 192));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_47;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "yZCTime", *(float *)(a1 + 196));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_48;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "zJerkScalarMagMax", *(float *)(a1 + 200));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_49;
LABEL_99:
    PB::TextFormatter::format(this, "zMin", *(float *)(a1 + 208));
    if ((*(_QWORD *)(a1 + 216) & 0x1000000000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_50;
  }
LABEL_98:
  PB::TextFormatter::format(this, "zMax", *(float *)(a1 + 204));
  v5 = *(_QWORD *)(a1 + 216);
  if ((v5 & 0x800000000000) != 0)
    goto LABEL_99;
LABEL_49:
  if ((v5 & 0x1000000000000) != 0)
LABEL_50:
    PB::TextFormatter::format(this, "zZCTime", *(float *)(a1 + 212));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22266C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;
  char v175;
  unsigned int v176;
  unint64_t v177;
  char v178;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 216) |= 0x80000000uLL;
          v20 = *((_QWORD *)this + 1);
          v21 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            v147 = 0;
            v148 = 0;
            v25 = 0;
            if (v21 <= v20)
              v21 = *((_QWORD *)this + 1);
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_302;
              }
              v149 = v20 + 1;
              v150 = *(_BYTE *)(v22 + v20);
              *((_QWORD *)this + 1) = v149;
              v25 |= (unint64_t)(v150 & 0x7F) << v147;
              if ((v150 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_302;
              }
              v147 += 7;
              v20 = v149;
              v14 = v148++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v25) = 0;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v26 = v20 + 1;
              *((_QWORD *)this + 1) = v20 + 1;
              v27 = *(_BYTE *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0)
                break;
              v23 += 7;
              v20 = v26;
              v14 = v24++ > 8;
              if (v14)
                goto LABEL_221;
            }
          }
LABEL_302:
          *(_DWORD *)(a1 + 144) = v25;
          goto LABEL_294;
        case 2u:
          *(_QWORD *)(a1 + 216) |= 1uLL;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_306;
              v32 += 7;
              v29 = v35;
              v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            v34 = 0;
            goto LABEL_306;
          }
          v151 = 0;
          v152 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v153 = v29 + 1;
              v154 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v153;
              v34 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                v29 = v153;
                v14 = v152++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v34 = 0;
            }
            break;
          }
LABEL_306:
          *(_QWORD *)(a1 + 8) = v34;
          goto LABEL_294;
        case 3u:
          *(_QWORD *)(a1 + 216) |= 2uLL;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_310;
              v40 += 7;
              v37 = v43;
              v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            v42 = 0;
            goto LABEL_310;
          }
          v155 = 0;
          v156 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              v42 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v157 = v37 + 1;
              v158 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v157;
              v42 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                v37 = v157;
                v14 = v156++ > 8;
                if (v14)
                  goto LABEL_235;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v42 = 0;
            }
            break;
          }
LABEL_310:
          *(_QWORD *)(a1 + 16) = v42;
          goto LABEL_294;
        case 4u:
          *(_QWORD *)(a1 + 216) |= 0x20000uLL;
          v45 = *((_QWORD *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v45);
          goto LABEL_293;
        case 5u:
          *(_QWORD *)(a1 + 216) |= 0x8000000000uLL;
          v46 = *((_QWORD *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v46);
          goto LABEL_293;
        case 6u:
          *(_QWORD *)(a1 + 216) |= 0x4000000000uLL;
          v47 = *((_QWORD *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v47);
          goto LABEL_293;
        case 7u:
          *(_QWORD *)(a1 + 216) |= 0x80000000000uLL;
          v48 = *((_QWORD *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v48);
          goto LABEL_293;
        case 8u:
          *(_QWORD *)(a1 + 216) |= 0x40000000000uLL;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_293;
        case 9u:
          *(_QWORD *)(a1 + 216) |= 0x800000000000uLL;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_293;
        case 0xAu:
          *(_QWORD *)(a1 + 216) |= 0x400000000000uLL;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_293;
        case 0xBu:
          *(_QWORD *)(a1 + 216) |= 0x10000000000uLL;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_293;
        case 0xCu:
          *(_QWORD *)(a1 + 216) |= 0x100000000000uLL;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_293;
        case 0xDu:
          *(_QWORD *)(a1 + 216) |= 0x1000000000000uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(_QWORD *)this + v54);
          goto LABEL_293;
        case 0xEu:
          *(_QWORD *)(a1 + 216) |= 0x10000uLL;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v55);
          goto LABEL_293;
        case 0xFu:
          *(_QWORD *)(a1 + 216) |= 0x2000000000uLL;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_293;
        case 0x10u:
          *(_QWORD *)(a1 + 216) |= 0x20000000000uLL;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_293;
        case 0x11u:
          *(_QWORD *)(a1 + 216) |= 0x200000000000uLL;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v58);
          goto LABEL_293;
        case 0x12u:
          *(_QWORD *)(a1 + 216) |= 4uLL;
          v59 = *((_QWORD *)this + 1);
          v60 = *((_QWORD *)this + 2);
          v61 = *(_QWORD *)this;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            do
            {
              v65 = v59 + 1;
              *((_QWORD *)this + 1) = v59 + 1;
              v66 = *(_BYTE *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0)
                goto LABEL_314;
              v62 += 7;
              v59 = v65;
              v14 = v63++ > 8;
            }
            while (!v14);
LABEL_242:
            v64 = 0;
            goto LABEL_314;
          }
          v159 = 0;
          v160 = 0;
          v64 = 0;
          if (v60 <= v59)
            v60 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v60 == v59)
            {
              v64 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v161 = v59 + 1;
              v162 = *(_BYTE *)(v61 + v59);
              *((_QWORD *)this + 1) = v161;
              v64 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                v59 = v161;
                v14 = v160++ > 8;
                if (v14)
                  goto LABEL_242;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v64 = 0;
            }
            break;
          }
LABEL_314:
          *(_QWORD *)(a1 + 24) = v64;
          goto LABEL_294;
        case 0x13u:
          *(_QWORD *)(a1 + 216) |= 0x10uLL;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v67);
          goto LABEL_293;
        case 0x14u:
          *(_QWORD *)(a1 + 216) |= 0x800000uLL;
          v68 = *((_QWORD *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v68);
          goto LABEL_293;
        case 0x15u:
          *(_QWORD *)(a1 + 216) |= 0x80uLL;
          v69 = *((_QWORD *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v69);
          goto LABEL_293;
        case 0x16u:
          *(_QWORD *)(a1 + 216) |= 0x40uLL;
          v70 = *((_QWORD *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v70);
          goto LABEL_293;
        case 0x17u:
          *(_QWORD *)(a1 + 216) |= 0x100000uLL;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v71);
          goto LABEL_293;
        case 0x18u:
          *(_QWORD *)(a1 + 216) |= 0x80000uLL;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v72);
          goto LABEL_293;
        case 0x19u:
          *(_QWORD *)(a1 + 216) |= 0x40000000uLL;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v73);
          goto LABEL_293;
        case 0x1Au:
          *(_QWORD *)(a1 + 216) |= 0x1000uLL;
          v74 = *((_QWORD *)this + 1);
          v75 = *((_QWORD *)this + 2);
          v76 = *(_QWORD *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v80 = v74 + 1;
              *((_QWORD *)this + 1) = v74 + 1;
              v81 = *(_BYTE *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0)
                goto LABEL_318;
              v77 += 7;
              v74 = v80;
              v14 = v78++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v79) = 0;
            goto LABEL_318;
          }
          v163 = 0;
          v164 = 0;
          v79 = 0;
          if (v75 <= v74)
            v75 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v165 = v74 + 1;
              v166 = *(_BYTE *)(v76 + v74);
              *((_QWORD *)this + 1) = v165;
              v79 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                v74 = v165;
                v14 = v164++ > 8;
                if (v14)
                  goto LABEL_249;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v79) = 0;
            }
            break;
          }
LABEL_318:
          *(_DWORD *)(a1 + 68) = v79;
          goto LABEL_294;
        case 0x1Bu:
          *(_QWORD *)(a1 + 216) |= 0x4000uLL;
          v82 = *((_QWORD *)this + 1);
          v83 = *((_QWORD *)this + 2);
          v84 = *(_QWORD *)this;
          if (v82 <= 0xFFFFFFFFFFFFFFF5 && v82 + 10 <= v83)
          {
            v85 = 0;
            v86 = 0;
            v87 = 0;
            do
            {
              v88 = v82 + 1;
              *((_QWORD *)this + 1) = v82 + 1;
              v89 = *(_BYTE *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0)
                goto LABEL_322;
              v85 += 7;
              v82 = v88;
              v14 = v86++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v87) = 0;
            goto LABEL_322;
          }
          v167 = 0;
          v168 = 0;
          v87 = 0;
          if (v83 <= v82)
            v83 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v169 = v82 + 1;
              v170 = *(_BYTE *)(v84 + v82);
              *((_QWORD *)this + 1) = v169;
              v87 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                v82 = v169;
                v14 = v168++ > 8;
                if (v14)
                  goto LABEL_256;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v87) = 0;
            }
            break;
          }
LABEL_322:
          *(_DWORD *)(a1 + 76) = v87;
          goto LABEL_294;
        case 0x1Cu:
          *(_QWORD *)(a1 + 216) |= 0x100000000uLL;
          v90 = *((_QWORD *)this + 1);
          v91 = *((_QWORD *)this + 2);
          v92 = *(_QWORD *)this;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            do
            {
              v96 = v90 + 1;
              *((_QWORD *)this + 1) = v90 + 1;
              v97 = *(_BYTE *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0)
                goto LABEL_326;
              v93 += 7;
              v90 = v96;
              v14 = v94++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v95) = 0;
            goto LABEL_326;
          }
          v171 = 0;
          v172 = 0;
          v95 = 0;
          if (v91 <= v90)
            v91 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v173 = v90 + 1;
              v174 = *(_BYTE *)(v92 + v90);
              *((_QWORD *)this + 1) = v173;
              v95 |= (unint64_t)(v174 & 0x7F) << v171;
              if (v174 < 0)
              {
                v171 += 7;
                v90 = v173;
                v14 = v172++ > 8;
                if (v14)
                  goto LABEL_263;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v95) = 0;
            }
            break;
          }
LABEL_326:
          *(_DWORD *)(a1 + 148) = v95;
          goto LABEL_294;
        case 0x1Du:
          *(_QWORD *)(a1 + 216) |= 0x1000000000uLL;
          v98 = *((_QWORD *)this + 1);
          v99 = *((_QWORD *)this + 2);
          v100 = *(_QWORD *)this;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            v101 = 0;
            v102 = 0;
            v103 = 0;
            do
            {
              v104 = v98 + 1;
              *((_QWORD *)this + 1) = v98 + 1;
              v105 = *(_BYTE *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0)
                goto LABEL_330;
              v101 += 7;
              v98 = v104;
              v14 = v102++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v103) = 0;
            goto LABEL_330;
          }
          v175 = 0;
          v176 = 0;
          v103 = 0;
          if (v99 <= v98)
            v99 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v177 = v98 + 1;
              v178 = *(_BYTE *)(v100 + v98);
              *((_QWORD *)this + 1) = v177;
              v103 |= (unint64_t)(v178 & 0x7F) << v175;
              if (v178 < 0)
              {
                v175 += 7;
                v98 = v177;
                v14 = v176++ > 8;
                if (v14)
                  goto LABEL_270;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v103) = 0;
            }
            break;
          }
LABEL_330:
          *(_DWORD *)(a1 + 164) = v103;
          goto LABEL_294;
        case 0x1Eu:
          *(_QWORD *)(a1 + 216) |= 0x100uLL;
          v106 = *((_QWORD *)this + 1);
          v107 = *((_QWORD *)this + 2);
          v108 = *(_QWORD *)this;
          if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
          {
            v109 = 0;
            v110 = 0;
            v111 = 0;
            do
            {
              v112 = v106 + 1;
              *((_QWORD *)this + 1) = v106 + 1;
              v113 = *(_BYTE *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0)
                goto LABEL_334;
              v109 += 7;
              v106 = v112;
              v14 = v110++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v111) = 0;
            goto LABEL_334;
          }
          v179 = 0;
          v180 = 0;
          v111 = 0;
          if (v107 <= v106)
            v107 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v181 = v106 + 1;
              v182 = *(_BYTE *)(v108 + v106);
              *((_QWORD *)this + 1) = v181;
              v111 |= (unint64_t)(v182 & 0x7F) << v179;
              if (v182 < 0)
              {
                v179 += 7;
                v106 = v181;
                v14 = v180++ > 8;
                if (v14)
                  goto LABEL_277;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v111) = 0;
            }
            break;
          }
LABEL_334:
          *(_DWORD *)(a1 + 52) = v111;
          goto LABEL_294;
        case 0x1Fu:
          *(_QWORD *)(a1 + 216) |= 0x200000000uLL;
          v114 = *((_QWORD *)this + 1);
          if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v114);
          goto LABEL_293;
        case 0x20u:
          *(_QWORD *)(a1 + 216) |= 0x800uLL;
          v115 = *((_QWORD *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v115);
          goto LABEL_293;
        case 0x21u:
          *(_QWORD *)(a1 + 216) |= 0x400uLL;
          v116 = *((_QWORD *)this + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v116);
          goto LABEL_293;
        case 0x22u:
          *(_QWORD *)(a1 + 216) |= 0x200000uLL;
          v117 = *((_QWORD *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v117);
          goto LABEL_293;
        case 0x23u:
          *(_QWORD *)(a1 + 216) |= 0x40000uLL;
          v118 = *((_QWORD *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v118);
          goto LABEL_293;
        case 0x24u:
          *(_QWORD *)(a1 + 216) |= 0x20000000uLL;
          v119 = *((_QWORD *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v119);
          goto LABEL_293;
        case 0x25u:
          *(_QWORD *)(a1 + 216) |= 0x800000000uLL;
          v120 = *((_QWORD *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v120);
          goto LABEL_293;
        case 0x26u:
          *(_QWORD *)(a1 + 216) |= 0x400000000uLL;
          v121 = *((_QWORD *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v121);
          goto LABEL_293;
        case 0x27u:
          *(_QWORD *)(a1 + 216) |= 0x8000uLL;
          v122 = *((_QWORD *)this + 1);
          v123 = *((_QWORD *)this + 2);
          v124 = *(_QWORD *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)this + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_338;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v127) = 0;
            goto LABEL_338;
          }
          v183 = 0;
          v184 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v123 == v122)
            {
              LODWORD(v127) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v185 = v122 + 1;
              v186 = *(_BYTE *)(v124 + v122);
              *((_QWORD *)this + 1) = v185;
              v127 |= (unint64_t)(v186 & 0x7F) << v183;
              if (v186 < 0)
              {
                v183 += 7;
                v122 = v185;
                v14 = v184++ > 8;
                if (v14)
                  goto LABEL_284;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v127) = 0;
            }
            break;
          }
LABEL_338:
          *(_DWORD *)(a1 + 80) = v127;
          goto LABEL_294;
        case 0x28u:
          *(_QWORD *)(a1 + 216) |= 0x10000000uLL;
          v130 = *((_QWORD *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v130);
          goto LABEL_293;
        case 0x29u:
          *(_QWORD *)(a1 + 216) |= 0x4000000uLL;
          v131 = *((_QWORD *)this + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v131);
          goto LABEL_293;
        case 0x2Au:
          *(_QWORD *)(a1 + 216) |= 0x8000000uLL;
          v132 = *((_QWORD *)this + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v132);
          goto LABEL_293;
        case 0x2Bu:
          *(_QWORD *)(a1 + 216) |= 0x20uLL;
          v133 = *((_QWORD *)this + 1);
          if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v133);
          goto LABEL_293;
        case 0x2Cu:
          *(_QWORD *)(a1 + 216) |= 0x1000000uLL;
          v134 = *((_QWORD *)this + 1);
          if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v134);
          goto LABEL_293;
        case 0x2Du:
          *(_QWORD *)(a1 + 216) |= 0x2000000uLL;
          v135 = *((_QWORD *)this + 1);
          v136 = *((_QWORD *)this + 2);
          v137 = *(_QWORD *)this;
          if (v135 <= 0xFFFFFFFFFFFFFFF5 && v135 + 10 <= v136)
          {
            v138 = 0;
            v139 = 0;
            v140 = 0;
            do
            {
              v141 = v135 + 1;
              *((_QWORD *)this + 1) = v135 + 1;
              v142 = *(_BYTE *)(v137 + v135);
              v140 |= (unint64_t)(v142 & 0x7F) << v138;
              if ((v142 & 0x80) == 0)
                goto LABEL_342;
              v138 += 7;
              v135 = v141;
              v14 = v139++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v140) = 0;
            goto LABEL_342;
          }
          v187 = 0;
          v188 = 0;
          v140 = 0;
          if (v136 <= v135)
            v136 = *((_QWORD *)this + 1);
          break;
        case 0x2Eu:
          *(_QWORD *)(a1 + 216) |= 0x2000uLL;
          v143 = *((_QWORD *)this + 1);
          if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v143);
          goto LABEL_293;
        case 0x2Fu:
          *(_QWORD *)(a1 + 216) |= 0x200uLL;
          v144 = *((_QWORD *)this + 1);
          if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v144);
          goto LABEL_293;
        case 0x30u:
          *(_QWORD *)(a1 + 216) |= 0x400000uLL;
          v145 = *((_QWORD *)this + 1);
          if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)this + 2))
            goto LABEL_214;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v145);
          goto LABEL_293;
        case 0x31u:
          *(_QWORD *)(a1 + 216) |= 8uLL;
          v146 = *((_QWORD *)this + 1);
          if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v146);
LABEL_293:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_214:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_294;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_294;
      }
      while (1)
      {
        if (v136 == v135)
        {
          LODWORD(v140) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_342;
        }
        v189 = v135 + 1;
        v190 = *(_BYTE *)(v137 + v135);
        *((_QWORD *)this + 1) = v189;
        v140 |= (unint64_t)(v190 & 0x7F) << v187;
        if ((v190 & 0x80) == 0)
          break;
        v187 += 7;
        v135 = v189;
        v14 = v188++ > 8;
        if (v14)
          goto LABEL_291;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v140) = 0;
LABEL_342:
      *(_DWORD *)(a1 + 120) = v140;
LABEL_294:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F223A2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 216);
  if ((v4 & 0x80000000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_QWORD *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0)
      goto LABEL_5;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_6;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_7;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_8;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_9;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 192));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_10;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 188));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 208));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 204));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_13;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 180));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_14;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 196));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 212));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_16;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_17;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_18;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this, *(float *)(v3 + 184));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0)
      goto LABEL_19;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 200));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      goto LABEL_22;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_26;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0)
      goto LABEL_27;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_29;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_30;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0)
      goto LABEL_31;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_32;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0)
      goto LABEL_33;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0)
      goto LABEL_34;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0)
      goto LABEL_35;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_37;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_38;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 160));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0)
      goto LABEL_40;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_42;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_43;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_45;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_46;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0)
      goto LABEL_48;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0)
      goto LABEL_49;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_49:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 32));
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  if ((*(_QWORD *)(v3 + 216) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 32));
  return result;
}

uint64_t sub_18F223FAC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E528;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F223FC4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F223FE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "aggAccelZDelta", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "arcLength", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "firstLoftAngleDeg", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 44) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "curveDistance", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "stepResult");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2240B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F224400(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2244B0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EA68;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_18F2244C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2244EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "cadenceDeviceIdentification", *(double *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadenceUpdateTime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "externalMachineType");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "inclination", *(double *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "instantaneousCadence", *(double *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "instantaneousPower", *(double *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(double *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "powerMeterIdentification");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "powerUpdateTime", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "resistanceLevel", *(double *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "speedDeviceIdentification", *(double *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "speedUpdateTime", *(double *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "totalDistance", *(double *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "totalElevationAscended", *(double *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "totalEnergy", *(double *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "totalFloorsClimbed");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(this, "totalStrokeCount");
    if ((*(_DWORD *)(a1 + 176) & 0x80000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(this, "totalStrideCount");
  v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x80000) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2247DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 176) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 2u:
              *(_DWORD *)(a1 + 176) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 3u:
              *(_DWORD *)(a1 + 176) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 4u:
              *(_DWORD *)(a1 + 176) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 5u:
              *(_DWORD *)(a1 + 176) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 6u:
              *(_DWORD *)(a1 + 176) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 7u:
              *(_DWORD *)(a1 + 176) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 8u:
              *(_DWORD *)(a1 + 176) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 9u:
              *(_DWORD *)(a1 + 176) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0xAu:
              *(_DWORD *)(a1 + 176) |= 0x10000u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_155:
                    v2 = v53 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_155;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_156;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_156:
              *(_QWORD *)(a1 + 136) = v25;
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 176) |= 0x20000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_160:
                    v2 = v57 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_160;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_161;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_161:
              *(_QWORD *)(a1 + 144) = v31;
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 176) |= 0x40000u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_165:
                    v2 = v61 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_165;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_166;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_166:
              *(_QWORD *)(a1 + 152) = v37;
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 176) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0xEu:
              *(_DWORD *)(a1 + 176) |= 0x100000u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_171;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_170:
                    v2 = v65 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_170;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_171;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 168) = v43;
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 176) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x10u:
              *(_DWORD *)(a1 + 176) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x11u:
              *(_DWORD *)(a1 + 176) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x12u:
              *(_DWORD *)(a1 + 176) |= 0x200000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_175:
                    v2 = v69 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_175;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_176;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 172) = v49;
LABEL_147:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 176) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x14u:
              *(_DWORD *)(a1 + 176) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x15u:
              *(_DWORD *)(a1 + 176) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_109;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_146;
            case 0x16u:
              *(_DWORD *)(a1 + 176) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_146:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_109:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_147;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_147;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2251AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 176);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 160));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 1) == 0)
  {
LABEL_22:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 96));
  }
LABEL_44:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_DWORD *)(v3 + 176) & 0x800) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 96));
  return result;
}

uint64_t sub_18F225438(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F398;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_18F225450(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F225474(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "averageCadence", *(float *)(a1 + 32));
    v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageHeartRate", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "averagePace", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "averagePower", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "averageSpeed", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "crossTrainerDistance", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "elevationGain", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "energy", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "floors");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "indoorBikeDistance", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "instantaneousCadence", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "instantaneousHeartRate", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "instantaneousPace", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "instantaneousPower", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "resistanceLevel", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0)
      goto LABEL_23;
LABEL_47:
    PB::TextFormatter::format(this, "strideCount", *(float *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 112) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_46:
  PB::TextFormatter::format(this, "stepCount");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200000) != 0)
    goto LABEL_47;
LABEL_23:
  if ((v5 & 0x400000) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "treadmillDistance", *(float *)(a1 + 108));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F225784(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_33:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_118;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_128;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_127:
                    v2 = v35 + 1;
                    goto LABEL_128;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_127;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_128;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_128:
              *(_DWORD *)(a1 + 64) = v25;
              goto LABEL_119;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x100000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_133;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_132:
                    v2 = v39 + 1;
                    goto LABEL_133;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_132;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_133;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_133:
              *(_DWORD *)(a1 + 100) = v31;
LABEL_119:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x14u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x15u:
              *(_DWORD *)(a1 + 112) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x16u:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_101;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_117;
            case 0x17u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_117:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_118:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_101:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F225F78(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 112);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  if ((*(_DWORD *)(v3 + 112) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

uint64_t sub_18F226220(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E294C960;
  return result;
}

void sub_18F226238(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E294C960;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_18F26F7EC((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

void sub_18F22628C(PB::Base *a1)
{
  sub_18F226238(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2262B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "modeSemanticType");
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "modeUpdateReason");
  if ((*(_BYTE *)(a1 + 48) & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "modeUpdateSource");
LABEL_7:
  if (*(_QWORD *)(a1 + 16))
    PB::TextFormatter::format();
  v6 = *(_BYTE *)(a1 + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "starting");
    v6 = *(_BYTE *)(a1 + 48);
  }
  if ((v6 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2263A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  uint64_t v71;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 16);
    v9 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = (_QWORD *)operator new();
          v22[1] = 0;
          v22[2] = 0;
          *v22 = 0;
          v71 = 0;
          v23 = *v9;
          *v9 = (uint64_t)v22;
          if (v23)
          {
            sub_18F26F7EC((uint64_t)v9, v23);
            v24 = v71;
            v71 = 0;
            if (v24)
              sub_18F26F7EC((uint64_t)&v71, v24);
          }
          goto LABEL_32;
        case 2u:
          v26 = (_QWORD *)operator new();
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          v71 = 0;
          v27 = *v8;
          *v8 = (uint64_t)v26;
          if (v27)
          {
            sub_18F26F7EC((uint64_t)v8, v27);
            v28 = v71;
            v71 = 0;
            if (v28)
              sub_18F26F7EC((uint64_t)&v71, v28);
          }
LABEL_32:
          PB::Reader::read();
          goto LABEL_95;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v30 = *((_QWORD *)this + 2);
          v31 = *(_QWORD *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            v32 = 0;
            v33 = 0;
            v34 = 0;
            do
            {
              v35 = v29 + 1;
              *((_QWORD *)this + 1) = v29 + 1;
              v36 = *(_BYTE *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0)
                goto LABEL_86;
              v32 += 7;
              v29 = v35;
              v16 = v33++ > 8;
            }
            while (!v16);
LABEL_65:
            LODWORD(v34) = 0;
            goto LABEL_86;
          }
          v58 = 0;
          v59 = 0;
          v34 = 0;
          if (v30 <= v29)
            v30 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v60 = v29 + 1;
              v61 = *(_BYTE *)(v31 + v29);
              *((_QWORD *)this + 1) = v60;
              v34 |= (unint64_t)(v61 & 0x7F) << v58;
              if (v61 < 0)
              {
                v58 += 7;
                v29 = v60;
                v16 = v59++ > 8;
                if (v16)
                  goto LABEL_65;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v34) = 0;
            }
            break;
          }
LABEL_86:
          *(_DWORD *)(a1 + 36) = v34;
          goto LABEL_95;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_90;
              v40 += 7;
              v37 = v43;
              v16 = v41++ > 8;
            }
            while (!v16);
LABEL_72:
            LODWORD(v42) = 0;
            goto LABEL_90;
          }
          v62 = 0;
          v63 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v64 = v37 + 1;
              v65 = *(_BYTE *)(v39 + v37);
              *((_QWORD *)this + 1) = v64;
              v42 |= (unint64_t)(v65 & 0x7F) << v62;
              if (v65 < 0)
              {
                v62 += 7;
                v37 = v64;
                v16 = v63++ > 8;
                if (v16)
                  goto LABEL_72;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v42) = 0;
            }
            break;
          }
LABEL_90:
          *(_DWORD *)(a1 + 32) = v42;
          goto LABEL_95;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_94;
              v48 += 7;
              v45 = v51;
              v16 = v49++ > 8;
            }
            while (!v16);
LABEL_79:
            LODWORD(v50) = 0;
            goto LABEL_94;
          }
          v66 = 0;
          v67 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          break;
        case 6u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v53 = *((_QWORD *)this + 1);
          if (v53 >= *((_QWORD *)this + 2))
          {
            v56 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v54 = v53 + 1;
            v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
            *((_QWORD *)this + 1) = v54;
            v56 = v55 != 0;
          }
          *(_BYTE *)(a1 + 44) = v56;
          goto LABEL_95;
        case 7u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v57 = *((_QWORD *)this + 1);
          if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v57);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_95;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_95;
      }
      while (1)
      {
        if (v46 == v45)
        {
          LODWORD(v50) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_94;
        }
        v68 = v45 + 1;
        v69 = *(_BYTE *)(v47 + v45);
        *((_QWORD *)this + 1) = v68;
        v50 |= (unint64_t)(v69 & 0x7F) << v66;
        if ((v69 & 0x80) == 0)
          break;
        v66 += 7;
        v45 = v68;
        v16 = v67++ > 8;
        if (v16)
          goto LABEL_79;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v50) = 0;
LABEL_94:
      *(_DWORD *)(a1 + 40) = v50;
LABEL_95:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F226910(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  if (*(_QWORD *)(result + 8))
    result = PB::Writer::write();
  if (*(_QWORD *)(v3 + 16))
    result = PB::Writer::write();
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_14:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

double sub_18F2269E8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294E560;
  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F226A0C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E294E560;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F226A5C(PB::Base *a1)
{
  sub_18F226A0C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F226A80(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "freq", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "mag", v10);
  }
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F226B34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  int v74;
  char *v75;
  int v76;
  unint64_t v77;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          while (v42 < v43 && !*((_BYTE *)this + 24))
          {
            v45 = *(char **)(a1 + 16);
            v44 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v10;
              v48 = (v45 - (_BYTE *)*v10) >> 2;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62)
                goto LABEL_128;
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 1 > v49)
                v49 = v50 >> 1;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                v51 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_18F26FB8C(v11, v51);
                v47 = *(char **)(a1 + 8);
                v45 = *(char **)(a1 + 16);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[4 * v48];
              *(_DWORD *)v53 = 0;
              v46 = v53 + 4;
              while (v45 != v47)
              {
                v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v53;
              *(_QWORD *)(a1 + 16) = v46;
              *(_QWORD *)(a1 + 24) = &v52[4 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_DWORD *)v45 = 0;
              v46 = v45 + 4;
            }
            *(_QWORD *)(a1 + 16) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v46 - 1) = *(_DWORD *)(*(_QWORD *)this + v55);
            v43 = *((_QWORD *)this + 2);
            v42 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v42;
          }
          goto LABEL_83;
        }
        v60 = *(char **)(a1 + 16);
        v59 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v60 >= v59)
        {
          v67 = (char *)*v10;
          v68 = (v60 - (_BYTE *)*v10) >> 2;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
LABEL_128:
            sub_18F26F8C0();
          v70 = v59 - (_QWORD)v67;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v71 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v71 = v69;
          if (v71)
          {
            v72 = (char *)sub_18F26FB8C(v11, v71);
            v67 = *(char **)(a1 + 8);
            v60 = *(char **)(a1 + 16);
          }
          else
          {
            v72 = 0;
          }
          v75 = &v72[4 * v68];
          *(_DWORD *)v75 = 0;
          v58 = v75 + 4;
          while (v60 != v67)
          {
            v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *(_QWORD *)(a1 + 8) = v75;
          *(_QWORD *)(a1 + 16) = v58;
          *(_QWORD *)(a1 + 24) = &v72[4 * v71];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_DWORD *)v60 = 0;
          v58 = v60 + 4;
        }
        *(_QWORD *)(a1 + 16) = v58;
LABEL_114:
        v77 = *((_QWORD *)this + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
        {
LABEL_116:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v77);
        v27 = *((_QWORD *)this + 1) + 4;
        goto LABEL_118;
      }
      if ((_DWORD)v25 == 1)
      {
        *(_BYTE *)(a1 + 64) |= 1u;
        v26 = *((_QWORD *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v26);
        v27 = *((_QWORD *)this + 1) + 8;
LABEL_118:
        *((_QWORD *)this + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if (v24 == 2)
    {
      if ((PB::Reader::placeMark() & 1) != 0)
        return 0;
      v28 = *((_QWORD *)this + 1);
      v29 = *((_QWORD *)this + 2);
      while (v28 < v29 && !*((_BYTE *)this + 24))
      {
        v31 = *(char **)(a1 + 40);
        v30 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v31 >= v30)
        {
          v33 = (char *)*v8;
          v34 = (v31 - (_BYTE *)*v8) >> 2;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            goto LABEL_127;
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)sub_18F26FB8C(v9, v37);
            v33 = *(char **)(a1 + 32);
            v31 = *(char **)(a1 + 40);
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v34];
          *(_DWORD *)v39 = 0;
          v32 = v39 + 4;
          while (v31 != v33)
          {
            v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(_QWORD *)(a1 + 32) = v39;
          *(_QWORD *)(a1 + 40) = v32;
          *(_QWORD *)(a1 + 48) = &v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *(_DWORD *)v31 = 0;
          v32 = v31 + 4;
        }
        *(_QWORD *)(a1 + 40) = v32;
        v41 = *((_QWORD *)this + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
        {
LABEL_82:
          *((_BYTE *)this + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(_QWORD *)this + v41);
        v29 = *((_QWORD *)this + 2);
        v28 = *((_QWORD *)this + 1) + 4;
        *((_QWORD *)this + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    v57 = *(char **)(a1 + 40);
    v56 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v57 >= v56)
    {
      v61 = (char *)*v8;
      v62 = (v57 - (_BYTE *)*v8) >> 2;
      v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62)
LABEL_127:
        sub_18F26F8C0();
      v64 = v56 - (_QWORD)v61;
      if (v64 >> 1 > v63)
        v63 = v64 >> 1;
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
        v65 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v65 = v63;
      if (v65)
      {
        v66 = (char *)sub_18F26FB8C(v9, v65);
        v61 = *(char **)(a1 + 32);
        v57 = *(char **)(a1 + 40);
      }
      else
      {
        v66 = 0;
      }
      v73 = &v66[4 * v62];
      *(_DWORD *)v73 = 0;
      v58 = v73 + 4;
      while (v57 != v61)
      {
        v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *(_QWORD *)(a1 + 32) = v73;
      *(_QWORD *)(a1 + 40) = v58;
      *(_QWORD *)(a1 + 48) = &v66[4 * v65];
      if (v61)
        operator delete(v61);
    }
    else
    {
      *(_DWORD *)v57 = 0;
      v58 = v57 + 4;
    }
    *(_QWORD *)(a1 + 40) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_18F2270AC(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 64) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 56));
  v4 = (float *)v3[1];
  v5 = (float *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v8 = (float *)v3[4];
  v7 = (float *)v3[5];
  while (v8 != v7)
  {
    v9 = *v8++;
    result = PB::Writer::write(this, v9);
  }
  return result;
}

_QWORD *sub_18F22712C(_QWORD *result)
{
  *result = &off_1E2950E10;
  result[1] = 0;
  return result;
}

void sub_18F22713C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950E10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F22717C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950E10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2271D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F227220(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2883B8(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2273E8(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F227404(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DFB0;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_18F22741C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F227440(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 40));
    v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "horizontalRotationRateMax", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "impulseMagnitude", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "impulseStartTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "isCadenceConcordant");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "isFeasibleWalkingSpeed");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isNotRunning");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isPendular");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isSufficientVerticalTwist");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isSwingStanceCycle");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isValid");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "loftEndTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "loftMagnitude", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "loftStartTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0)
      goto LABEL_19;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "pendulumResidual", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0)
      goto LABEL_20;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "previousImpulseStartTime");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "rawLoftSpeed", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "sqrtMaxAbsLoftAccel", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "stanceProbability", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
LABEL_49:
    PB::TextFormatter::format(this, "verticalRotationRateMean", *(float *)(a1 + 84));
    if ((*(_DWORD *)(a1 + 100) & 0x10000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_25;
  }
LABEL_48:
  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) != 0)
    goto LABEL_49;
LABEL_24:
  if ((v5 & 0x10000) != 0)
LABEL_25:
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F227770(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  BOOL v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_153;
                  }
                  v61 = v20++;
                  v62 = *(_BYTE *)(v21 + v61);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_152:
                v2 = v61 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_153;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_153:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_169;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_158;
                  }
                  v65 = v27++;
                  v66 = *(_BYTE *)(v28 + v65);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_157:
                    v2 = v65 + 1;
                    goto LABEL_158;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_157;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_158;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_158:
              *(_QWORD *)(a1 + 24) = v31;
              goto LABEL_169;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_163;
                  }
                  v69 = v33++;
                  v70 = *(_BYTE *)(v34 + v69);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_162:
                    v2 = v69 + 1;
                    goto LABEL_163;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_162;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_163;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_163:
              *(_QWORD *)(a1 + 16) = v37;
              goto LABEL_169;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 98) = v40;
              goto LABEL_169;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 97) = v42;
              goto LABEL_169;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v44 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v44 = v43 != 0;
              }
              *(_BYTE *)(a1 + 94) = v44;
              goto LABEL_169;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v46 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v45 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v46 = v45 != 0;
              }
              *(_BYTE *)(a1 + 93) = v46;
              goto LABEL_169;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v47 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v48 = v47 != 0;
              }
              *(_BYTE *)(a1 + 95) = v48;
              goto LABEL_169;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_104;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 100) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v49 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v50 = v49 != 0;
              }
              *(_BYTE *)(a1 + 96) = v50;
              goto LABEL_169;
            case 0x16u:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v52 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v51 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v52 = v51 != 0;
              }
              *(_BYTE *)(a1 + 92) = v52;
              goto LABEL_169;
            case 0x17u:
              *(_DWORD *)(a1 + 100) |= 8u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  v73 = v53++;
                  v74 = *(_BYTE *)(v54 + v73);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_167:
                    v2 = v73 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_167;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_168;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_168:
              *(_QWORD *)(a1 + 32) = v57;
LABEL_169:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x18u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_148:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_104:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_169;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_169;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F228150(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 100);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 72));
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 100) & 0x1000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 72));
  return result;
}

uint64_t sub_18F228414(uint64_t result)
{
  *(_QWORD *)result = &off_1E29507F0;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_18F22842C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F228450(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "curImpulseStartTime");
    v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_27;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "curLoftEndTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "curLoftStartTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "currentHorzRotRateMax", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "currentImpulseMagnitude", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "currentLoftMagnitude", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "currentMax", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "currentMin", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "currentWalkSpeedEstimate", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "firstLoft");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "impulseStartTimeWalkingSpeed");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0)
      goto LABEL_15;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "impulseStopTimeWalkingSpeed");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "lastZeroTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "loftEndDetected");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "loftStartDetected");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "prevLoftStartTime");
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "previousHorzRotRateMax", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "previousMax", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
LABEL_45:
    PB::TextFormatter::format(this, "vertRotationRateMean", *(float *)(a1 + 108));
    if ((*(_DWORD *)(a1 + 116) & 0x200000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_23;
  }
LABEL_44:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) != 0)
    goto LABEL_45;
LABEL_22:
  if ((v5 & 0x200000) != 0)
LABEL_23:
    PB::TextFormatter::format(this, "waitingToConfirmLoft");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F228740(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_173;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 114) = v22;
              goto LABEL_209;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 113) = v24;
              goto LABEL_209;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 115) = v26;
              goto LABEL_209;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 112) = v28;
              goto LABEL_209;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    v33 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  v73 = v29++;
                  v74 = *(_BYTE *)(v30 + v73);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v33 = 0;
LABEL_177:
                    v2 = v73 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v33 = 0;
                goto LABEL_177;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_178;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              v33 = 0;
LABEL_178:
              *(_QWORD *)(a1 + 24) = v33;
              goto LABEL_209;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 2u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    v39 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  v77 = v35++;
                  v78 = *(_BYTE *)(v36 + v77);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v39 = 0;
LABEL_182:
                    v2 = v77 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v39 = 0;
                goto LABEL_182;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_183;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              v39 = 0;
LABEL_183:
              *(_QWORD *)(a1 + 16) = v39;
              goto LABEL_209;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 1u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  v81 = v41++;
                  v82 = *(_BYTE *)(v42 + v81);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_187:
                    v2 = v81 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_187;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_188;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_188:
              *(_QWORD *)(a1 + 8) = v45;
              goto LABEL_209;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  v85 = v47++;
                  v86 = *(_BYTE *)(v48 + v85);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_192:
                    v2 = v85 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
                goto LABEL_192;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_193;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_193:
              *(_QWORD *)(a1 + 48) = v51;
              goto LABEL_209;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  v89 = v53++;
                  v90 = *(_BYTE *)(v54 + v89);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_197:
                    v2 = v89 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_197;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_198;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_198:
              *(_QWORD *)(a1 + 56) = v57;
              goto LABEL_209;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_99;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_172;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_172:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_173:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_99:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 8u;
              v59 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v60 = *(_QWORD *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    v63 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  v93 = v59++;
                  v94 = *(_BYTE *)(v60 + v93);
                  *((_QWORD *)this + 1) = v59;
                  v63 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    v63 = 0;
LABEL_202:
                    v2 = v93 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v63 = 0;
                goto LABEL_202;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_203;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              v63 = 0;
LABEL_203:
              *(_QWORD *)(a1 + 32) = v63;
              goto LABEL_209;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              v65 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v66 = *(_QWORD *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v69 = 0;
                if (v2 <= v65)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v65)
                  {
                    v69 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  v97 = v65++;
                  v98 = *(_BYTE *)(v66 + v97);
                  *((_QWORD *)this + 1) = v65;
                  v69 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    v69 = 0;
LABEL_207:
                    v2 = v97 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v69 = 0;
                goto LABEL_207;
              }
              v67 = 0;
              v68 = 0;
              v69 = 0;
              do
              {
                v2 = v65 + 1;
                *((_QWORD *)this + 1) = v65 + 1;
                v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0)
                  goto LABEL_208;
                v67 += 7;
                v65 = v2;
                v14 = v68++ > 8;
              }
              while (!v14);
              v69 = 0;
LABEL_208:
              *(_QWORD *)(a1 + 40) = v69;
LABEL_209:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_209;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2292B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 64));
    v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0)
      goto LABEL_22;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 116) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F22953C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EAA0;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_18F229554(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F229578(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "emptyField2", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(a1 + 76) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField3");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "hasValidGroundContactTime");
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "leftGroundContactTime", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "leftGroundContactTimePercentage", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "rightGroundContactTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
    if ((*(_WORD *)(a1 + 76) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "rightGroundContactTimePercentage", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 0x80) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2296E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  int v23;
  BOOL v24;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 2u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 3u:
          *(_WORD *)(a1 + 76) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 5u:
          *(_WORD *)(a1 + 76) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_49;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_57;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 73) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v24 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v24 = v23 != 0;
          }
          *(_BYTE *)(a1 + 72) = v24;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          {
LABEL_49:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_57:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F229AAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 76);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_20:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 76) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F229BE8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F8A0;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_18F229C00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F229C24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "crownOrientation");
    v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isSuccessful");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isValidSide");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isValidToeOff");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "meanRotationZ", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "relativeInitialContactTime", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "relativeToeOffTime", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "stepSide");
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 88) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x400) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "wristOrientation");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F229E14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 84) = v21;
              goto LABEL_119;
            case 2u:
              *(_WORD *)(a1 + 88) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v47 = v23++;
                  v48 = *(_BYTE *)(v24 + v47);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_107:
                    v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_107;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_108;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v27;
              goto LABEL_119;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 85) = v30;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 86) = v32;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v51 = v33++;
                  v52 = *(_BYTE *)(v34 + v51);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_112;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_113;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 80) = v37;
              goto LABEL_119;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x100u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v55 = v39++;
                  v56 = *(_BYTE *)(v40 + v55);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_117;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_118;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 72) = v43;
LABEL_119:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_103:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_119;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F22A4E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x800) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 88) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

uint64_t sub_18F22A68C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950BE0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F22A6A4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22A6C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "isSuccessful");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 48) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "stepSide");
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22A7B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 48) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 44) = v21;
              goto LABEL_61;
            case 2u:
              *(_BYTE *)(a1 + 48) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_44;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 5u:
              *(_BYTE *)(a1 + 48) |= 0x10u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_59:
                    v2 = v31 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_59;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_60;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 40) = v27;
LABEL_61:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 48) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_55:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_61;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_61;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F22AB44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 32));
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 48) & 8) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 32));
  return result;
}

uint64_t sub_18F22AC10(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DBC0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_18F22AC28(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22AC4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(float *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "decimalYear", *(float *)(a1 + 12));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "declination", *(float *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "latitude", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "longitude", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 44));
    if ((*(_WORD *)(a1 + 52) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x400) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 48));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22ADDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 52) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 52) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 52) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_54;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_58:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_54:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22B1C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 28));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_WORD *)(v3 + 52) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_18F22B318(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951040;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F22B334(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22B358(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "measSource");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "stateProbability", *(double *)(a1 + 8));
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "state");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22B408(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_59;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    v2 = v35 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_63;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_64;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_70;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    v2 = v39 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_68;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_69;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = v31;
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_59:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F22B7CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

double sub_18F22B860(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294F8D8;
  *(_DWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  return result;
}

void sub_18F22B898(void **a1)
{
  void **v2;
  void **v3;

  *a1 = &off_1E294F8D8;
  v2 = a1 + 3;
  v3 = a1 + 15;
  sub_18F26F770(&v3);
  v3 = a1 + 12;
  sub_18F26F770(&v3);
  v3 = a1 + 9;
  sub_18F26F770(&v3);
  v3 = a1 + 6;
  sub_18F26F770(&v3);
  v3 = v2;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_18F22B924(void **a1)
{
  sub_18F22B898(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22B948(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 152);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "lifespan", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 152);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "machTime", *(double *)(a1 + 16));
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *(uint64_t **)(a1 + 32);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "satInfoBeidou");
  }
  v9 = *(uint64_t **)(a1 + 48);
  v10 = *(uint64_t **)(a1 + 56);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "satInfoGalileo");
  }
  v12 = *(uint64_t **)(a1 + 72);
  v13 = *(uint64_t **)(a1 + 80);
  while (v12 != v13)
  {
    v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v14 + 32))(v14, this, "satInfoGlonass");
  }
  v15 = *(uint64_t **)(a1 + 96);
  v16 = *(uint64_t **)(a1 + 104);
  while (v15 != v16)
  {
    v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v17 + 32))(v17, this, "satInfoGps");
  }
  v18 = *(uint64_t **)(a1 + 120);
  v19 = *(uint64_t **)(a1 + 128);
  while (v18 != v19)
  {
    v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v20 + 32))(v20, this, "satInfoQzss");
  }
  if ((*(_BYTE *)(a1 + 152) & 4) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 144));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22BAE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  unint64_t v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)(a1 + 24);
  v9 = (uint64_t **)(a1 + 48);
  v10 = (uint64_t **)(a1 + 120);
  v11 = (uint64_t **)(a1 + 72);
  v12 = (uint64_t **)(a1 + 96);
  while (2)
  {
    v13 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v20 = 0;
      v21 = 0;
      v16 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v22 = v2 + 1;
        v23 = *(_BYTE *)(v13 + v2);
        *((_QWORD *)this + 1) = v22;
        v16 |= (unint64_t)(v23 & 0x7F) << v20;
        if ((v23 & 0x80) == 0)
          goto LABEL_21;
        v20 += 7;
        v2 = v22;
        if (v21++ >= 9)
        {
LABEL_20:
          v16 = 0;
          goto LABEL_21;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v18 = *(_BYTE *)(v13 + v2);
      v16 |= (unint64_t)(v18 & 0x7F) << v14;
      if ((v18 & 0x80) == 0)
        break;
      v14 += 7;
      v2 = v17;
      if (v15++ > 8)
        goto LABEL_20;
    }
LABEL_21:
    if ((v16 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v16 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 152) |= 4u;
        v25 = *((_QWORD *)this + 1);
        if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v25);
        goto LABEL_43;
      case 2u:
        sub_18F22BDC4(v12);
        v26 = *(_QWORD *)(a1 + 104);
        goto LABEL_31;
      case 3u:
        sub_18F22BDC4(v11);
        v26 = *(_QWORD *)(a1 + 80);
        goto LABEL_31;
      case 4u:
        sub_18F22BDC4(v10);
        v26 = *(_QWORD *)(a1 + 128);
        goto LABEL_31;
      case 5u:
        sub_18F22BDC4(v9);
        v26 = *(_QWORD *)(a1 + 56);
        goto LABEL_31;
      case 6u:
        sub_18F22BDC4(v8);
        v26 = *(_QWORD *)(a1 + 32);
LABEL_31:
        v27 = *(_QWORD *)(v26 - 8);
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v27 + 16))(v27, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_44:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          continue;
        }
        return 0;
      case 7u:
        *(_BYTE *)(a1 + 152) |= 2u;
        v30 = *((_QWORD *)this + 1);
        if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((_QWORD *)this + 2))
          goto LABEL_41;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v30);
        goto LABEL_43;
      case 8u:
        *(_BYTE *)(a1 + 152) |= 1u;
        v28 = *((_QWORD *)this + 1);
        if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((_QWORD *)this + 2))
        {
LABEL_41:
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v28);
LABEL_43:
          *((_QWORD *)this + 1) += 8;
        }
        goto LABEL_44;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_44;
    }
  }
}

uint64_t sub_18F22BDC4(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  sub_18F2CB9E8(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F22BEF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F22BF0C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;
  const PB::Base **v7;
  const PB::Base **v8;
  const PB::Base *v9;
  const PB::Base **v10;
  const PB::Base **v11;
  const PB::Base *v12;
  const PB::Base **v13;
  const PB::Base **v14;
  const PB::Base *v15;
  const PB::Base **v16;
  const PB::Base **v17;
  const PB::Base *v18;
  char v19;

  v3 = result;
  if ((*(_BYTE *)(result + 152) & 4) != 0)
    result = PB::Writer::write(this, *(double *)(result + 144));
  v4 = *(const PB::Base ***)(v3 + 96);
  v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  v7 = *(const PB::Base ***)(v3 + 72);
  v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::writeSubmessage(this, v9);
  }
  v10 = *(const PB::Base ***)(v3 + 120);
  v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::writeSubmessage(this, v12);
  }
  v13 = *(const PB::Base ***)(v3 + 48);
  v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::writeSubmessage(this, v15);
  }
  v16 = *(const PB::Base ***)(v3 + 24);
  v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    v18 = *v16++;
    result = PB::Writer::writeSubmessage(this, v18);
  }
  v19 = *(_BYTE *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 16));
    v19 = *(_BYTE *)(v3 + 152);
  }
  if ((v19 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_18F22C028(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EAD8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F22C040(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22C064(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "magnitudeVar", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22C134(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 32) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_40:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_41:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22C3D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_18F22C480(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E598;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F22C494(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E598;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F22C4D4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E598;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22C528(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "isAvgGrav");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22C594(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v23 = *((_QWORD *)this + 1);
        if (v23 >= *((_QWORD *)this + 2))
        {
          v26 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v24 = v23 + 1;
          v25 = *(unsigned __int8 *)(*(_QWORD *)this + v23);
          *((_QWORD *)this + 1) = v24;
          v26 = v25 != 0;
        }
        *(_BYTE *)(a1 + 16) = v26;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_18F281E90(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22C7AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

void sub_18F22C804(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22C828(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_WORD *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleNumMod3");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "subType");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "triggerEnabled");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "triggerOn");
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 32));
    if ((*(_WORD *)(a1 + 44) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x20) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x40) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 36));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22C978(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_88;
            case 2u:
              *(_WORD *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_87;
            case 3u:
              *(_WORD *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_87;
            case 4u:
              *(_WORD *)(a1 + 44) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_87:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_88:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 44) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v45 = v21++;
                  v46 = *(_BYTE *)(v22 + v45);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    v2 = v45 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_92;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_93;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 6u:
              *(_WORD *)(a1 + 44) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v49 = v27++;
                  v50 = *(_BYTE *)(v28 + v49);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_97:
                    v2 = v49 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_97;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_98;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 7u:
              *(_WORD *)(a1 + 44) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 40) = v34;
              goto LABEL_104;
            case 8u:
              *(_WORD *)(a1 + 44) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 41) = v36;
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 44) |= 2u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v53 = v37++;
                  v54 = *(_BYTE *)(v38 + v53);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_102:
                    v2 = v53 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_102;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_103;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v41;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F22CF28(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_18:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 44) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F22D048(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EEC8;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F22D060(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22D084(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "doingBiasEstimation");
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "varianceY", *(float *)(a1 + 28));
    if ((*(_BYTE *)(a1 + 36) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "varianceX", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x20) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 0x40) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "varianceZ", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22D194(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_41;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_57;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_57:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_41:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_63;
            case 7u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_62;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_61:
                    v2 = v29 + 1;
                    goto LABEL_62;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_61;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_62;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_62:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_63:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_63;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F22D54C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F22D634(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294EF00;
  *(_DWORD *)(a1 + 116) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_18F22D664(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E294EF00;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_18F22D6D4(PB::Base *a1)
{
  sub_18F22D664(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22D6F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accelVariance", v7);
  }
  if ((*(_BYTE *)(a1 + 116) & 2) != 0)
    PB::TextFormatter::format(this, "allowRelaxedGyroMean");
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "gyroMean", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "gyroVariance", v13);
  }
  if ((*(_BYTE *)(a1 + 116) & 4) != 0)
    PB::TextFormatter::format(this, "stillOnAll");
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "temperatureBias", v16);
  }
  if ((*(_BYTE *)(a1 + 116) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F22D83C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  _DWORD *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _DWORD *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  int v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  int v125;
  char *v126;
  int v127;
  char *v128;
  int v129;
  char *v130;
  int v131;
  unint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (void **)(a1 + 80);
    v136 = a1 + 96;
    v137 = a1 + 24;
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 32);
    v134 = a1 + 48;
    v135 = a1 + 72;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 116) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_204;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(_BYTE *)(a1 + 116) |= 4u;
          v27 = *((_QWORD *)this + 1);
          if (v27 >= *((_QWORD *)this + 2))
          {
            v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v28 = v27 + 1;
            v29 = *(unsigned __int8 *)(*(_QWORD *)this + v27);
            *((_QWORD *)this + 1) = v28;
            v30 = v29 != 0;
          }
          *(_BYTE *)(a1 + 113) = v30;
          goto LABEL_207;
        case 3u:
          *(_BYTE *)(a1 + 116) |= 2u;
          v31 = *((_QWORD *)this + 1);
          if (v31 >= *((_QWORD *)this + 2))
          {
            v34 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v32 = v31 + 1;
            v33 = *(unsigned __int8 *)(*(_QWORD *)this + v31);
            *((_QWORD *)this + 1) = v32;
            v34 = v33 != 0;
          }
          *(_BYTE *)(a1 + 112) = v34;
          goto LABEL_207;
        case 4u:
          if (v24 != 2)
          {
            v92 = *(char **)(a1 + 40);
            v91 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v92 >= v91)
            {
              v100 = (char *)*v11;
              v101 = (v92 - (_BYTE *)*v11) >> 2;
              v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 62)
LABEL_215:
                sub_18F26F8C0();
              v103 = v91 - (_QWORD)v100;
              if (v103 >> 1 > v102)
                v102 = v103 >> 1;
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
                v104 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v104 = v102;
              if (v104)
              {
                v105 = (char *)sub_18F26FB8C(v134, v104);
                v100 = *(char **)(a1 + 32);
                v92 = *(char **)(a1 + 40);
              }
              else
              {
                v105 = 0;
              }
              v124 = &v105[4 * v101];
              *(_DWORD *)v124 = 0;
              v93 = v124 + 4;
              while (v92 != v100)
              {
                v125 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v124 - 1) = v125;
                v124 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v124;
              *(_QWORD *)(a1 + 40) = v93;
              *(_QWORD *)(a1 + 48) = &v105[4 * v104];
              if (v100)
                operator delete(v100);
            }
            else
            {
              *(_DWORD *)v92 = 0;
              v93 = v92 + 4;
            }
            *(_QWORD *)(a1 + 40) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          while (v35 < v36 && !*((_BYTE *)this + 24))
          {
            v38 = *(char **)(a1 + 40);
            v37 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v38 >= v37)
            {
              v40 = (char *)*v11;
              v41 = (v38 - (_BYTE *)*v11) >> 2;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62)
                goto LABEL_215;
              v43 = v37 - (_QWORD)v40;
              if (v43 >> 1 > v42)
                v42 = v43 >> 1;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                v44 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
              {
                v45 = (char *)sub_18F26FB8C(v134, v44);
                v40 = *(char **)(a1 + 32);
                v38 = *(char **)(a1 + 40);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[4 * v41];
              *(_DWORD *)v46 = 0;
              v39 = v46 + 4;
              while (v38 != v40)
              {
                v47 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v46;
              *(_QWORD *)(a1 + 40) = v39;
              *(_QWORD *)(a1 + 48) = &v45[4 * v44];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_DWORD *)v38 = 0;
              v39 = v38 + 4;
            }
            *(_QWORD *)(a1 + 40) = v39;
            v48 = *((_QWORD *)this + 1);
            if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v39 - 1) = *(_DWORD *)(*(_QWORD *)this + v48);
            v36 = *((_QWORD *)this + 2);
            v35 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v35;
          }
          goto LABEL_129;
        case 5u:
          if (v24 != 2)
          {
            v95 = *(char **)(a1 + 64);
            v94 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v95 >= v94)
            {
              v106 = (char *)*v10;
              v107 = (v95 - (_BYTE *)*v10) >> 2;
              v108 = v107 + 1;
              if ((unint64_t)(v107 + 1) >> 62)
LABEL_216:
                sub_18F26F8C0();
              v109 = v94 - (_QWORD)v106;
              if (v109 >> 1 > v108)
                v108 = v109 >> 1;
              if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                v110 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v110 = v108;
              if (v110)
              {
                v111 = (char *)sub_18F26FB8C(v135, v110);
                v106 = *(char **)(a1 + 56);
                v95 = *(char **)(a1 + 64);
              }
              else
              {
                v111 = 0;
              }
              v126 = &v111[4 * v107];
              *(_DWORD *)v126 = 0;
              v93 = v126 + 4;
              while (v95 != v106)
              {
                v127 = *((_DWORD *)v95 - 1);
                v95 -= 4;
                *((_DWORD *)v126 - 1) = v127;
                v126 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v126;
              *(_QWORD *)(a1 + 64) = v93;
              *(_QWORD *)(a1 + 72) = &v111[4 * v110];
              if (v106)
                operator delete(v106);
            }
            else
            {
              *(_DWORD *)v95 = 0;
              v93 = v95 + 4;
            }
            *(_QWORD *)(a1 + 64) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v49 = *((_QWORD *)this + 1);
          v50 = *((_QWORD *)this + 2);
          while (v49 < v50 && !*((_BYTE *)this + 24))
          {
            v52 = *(char **)(a1 + 64);
            v51 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v52 >= v51)
            {
              v54 = (char *)*v10;
              v55 = (v52 - (_BYTE *)*v10) >> 2;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62)
                goto LABEL_216;
              v57 = v51 - (_QWORD)v54;
              if (v57 >> 1 > v56)
                v56 = v57 >> 1;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
                v58 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                v59 = (char *)sub_18F26FB8C(v135, v58);
                v54 = *(char **)(a1 + 56);
                v52 = *(char **)(a1 + 64);
              }
              else
              {
                v59 = 0;
              }
              v60 = &v59[4 * v55];
              *(_DWORD *)v60 = 0;
              v53 = v60 + 4;
              while (v52 != v54)
              {
                v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v60;
              *(_QWORD *)(a1 + 64) = v53;
              *(_QWORD *)(a1 + 72) = &v59[4 * v58];
              if (v54)
                operator delete(v54);
            }
            else
            {
              *(_DWORD *)v52 = 0;
              v53 = v52 + 4;
            }
            *(_QWORD *)(a1 + 64) = v53;
            v62 = *((_QWORD *)this + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v53 - 1) = *(_DWORD *)(*(_QWORD *)this + v62);
            v50 = *((_QWORD *)this + 2);
            v49 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v49;
          }
          goto LABEL_129;
        case 6u:
          if (v24 != 2)
          {
            v97 = *(char **)(a1 + 88);
            v96 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v97 >= v96)
            {
              v112 = (char *)*v9;
              v113 = (v97 - (_BYTE *)*v9) >> 2;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 62)
LABEL_217:
                sub_18F26F8C0();
              v115 = v96 - (_QWORD)v112;
              if (v115 >> 1 > v114)
                v114 = v115 >> 1;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL)
                v116 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              if (v116)
              {
                v117 = (char *)sub_18F26FB8C(v136, v116);
                v112 = *(char **)(a1 + 80);
                v97 = *(char **)(a1 + 88);
              }
              else
              {
                v117 = 0;
              }
              v128 = &v117[4 * v113];
              *(_DWORD *)v128 = 0;
              v93 = v128 + 4;
              while (v97 != v112)
              {
                v129 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v128 - 1) = v129;
                v128 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v128;
              *(_QWORD *)(a1 + 88) = v93;
              *(_QWORD *)(a1 + 96) = &v117[4 * v116];
              if (v112)
                operator delete(v112);
            }
            else
            {
              *(_DWORD *)v97 = 0;
              v93 = v97 + 4;
            }
            *(_QWORD *)(a1 + 88) = v93;
            goto LABEL_202;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v63 = *((_QWORD *)this + 1);
          v64 = *((_QWORD *)this + 2);
          while (v63 < v64 && !*((_BYTE *)this + 24))
          {
            v66 = *(char **)(a1 + 88);
            v65 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v66 >= v65)
            {
              v68 = (char *)*v9;
              v69 = (v66 - (_BYTE *)*v9) >> 2;
              v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 62)
                goto LABEL_217;
              v71 = v65 - (_QWORD)v68;
              if (v71 >> 1 > v70)
                v70 = v71 >> 1;
              if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                v72 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v72 = v70;
              if (v72)
              {
                v73 = (char *)sub_18F26FB8C(v136, v72);
                v68 = *(char **)(a1 + 80);
                v66 = *(char **)(a1 + 88);
              }
              else
              {
                v73 = 0;
              }
              v74 = &v73[4 * v69];
              *(_DWORD *)v74 = 0;
              v67 = v74 + 4;
              while (v66 != v68)
              {
                v75 = *((_DWORD *)v66 - 1);
                v66 -= 4;
                *((_DWORD *)v74 - 1) = v75;
                v74 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v74;
              *(_QWORD *)(a1 + 88) = v67;
              *(_QWORD *)(a1 + 96) = &v73[4 * v72];
              if (v68)
                operator delete(v68);
            }
            else
            {
              *(_DWORD *)v66 = 0;
              v67 = v66 + 4;
            }
            *(_QWORD *)(a1 + 88) = v67;
            v76 = *((_QWORD *)this + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v67 - 1) = *(_DWORD *)(*(_QWORD *)this + v76);
            v64 = *((_QWORD *)this + 2);
            v63 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v63;
          }
          goto LABEL_129;
        case 7u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v77 = *((_QWORD *)this + 1);
            v78 = *((_QWORD *)this + 2);
            while (v77 < v78 && !*((_BYTE *)this + 24))
            {
              v80 = *(char **)(a1 + 16);
              v79 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v80 >= v79)
              {
                v82 = (char *)*v8;
                v83 = (v80 - (_BYTE *)*v8) >> 2;
                v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 62)
                  goto LABEL_218;
                v85 = v79 - (_QWORD)v82;
                if (v85 >> 1 > v84)
                  v84 = v85 >> 1;
                if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
                  v86 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v86 = v84;
                if (v86)
                {
                  v87 = (char *)sub_18F26FB8C(v137, v86);
                  v82 = *(char **)(a1 + 8);
                  v80 = *(char **)(a1 + 16);
                }
                else
                {
                  v87 = 0;
                }
                v88 = &v87[4 * v83];
                *(_DWORD *)v88 = 0;
                v81 = v88 + 4;
                while (v80 != v82)
                {
                  v89 = *((_DWORD *)v80 - 1);
                  v80 -= 4;
                  *((_DWORD *)v88 - 1) = v89;
                  v88 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v88;
                *(_QWORD *)(a1 + 16) = v81;
                *(_QWORD *)(a1 + 24) = &v87[4 * v86];
                if (v82)
                  operator delete(v82);
              }
              else
              {
                *(_DWORD *)v80 = 0;
                v81 = v80 + 4;
              }
              *(_QWORD *)(a1 + 16) = v81;
              v90 = *((_QWORD *)this + 1);
              if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)this + 2))
              {
LABEL_128:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v81 - 1) = *(_DWORD *)(*(_QWORD *)this + v90);
              v78 = *((_QWORD *)this + 2);
              v77 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v77;
            }
LABEL_129:
            PB::Reader::recallMark();
          }
          else
          {
            v99 = *(char **)(a1 + 16);
            v98 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v99 >= v98)
            {
              v118 = (char *)*v8;
              v119 = (v99 - (_BYTE *)*v8) >> 2;
              v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 62)
LABEL_218:
                sub_18F26F8C0();
              v121 = v98 - (_QWORD)v118;
              if (v121 >> 1 > v120)
                v120 = v121 >> 1;
              if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL)
                v122 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v122 = v120;
              if (v122)
              {
                v123 = (char *)sub_18F26FB8C(v137, v122);
                v118 = *(char **)(a1 + 8);
                v99 = *(char **)(a1 + 16);
              }
              else
              {
                v123 = 0;
              }
              v130 = &v123[4 * v119];
              *(_DWORD *)v130 = 0;
              v93 = v130 + 4;
              while (v99 != v118)
              {
                v131 = *((_DWORD *)v99 - 1);
                v99 -= 4;
                *((_DWORD *)v130 - 1) = v131;
                v130 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v130;
              *(_QWORD *)(a1 + 16) = v93;
              *(_QWORD *)(a1 + 24) = &v123[4 * v122];
              if (v118)
                operator delete(v118);
            }
            else
            {
              *(_DWORD *)v99 = 0;
              v93 = v99 + 4;
            }
            *(_QWORD *)(a1 + 16) = v93;
LABEL_202:
            v132 = *((_QWORD *)this + 1);
            if (v132 <= 0xFFFFFFFFFFFFFFFBLL && v132 + 4 <= *((_QWORD *)this + 2))
            {
              *(v93 - 1) = *(_DWORD *)(*(_QWORD *)this + v132);
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_206:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_204:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_207:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_207;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22E1BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;

  v3 = result;
  v4 = *(_BYTE *)(result + 116);
  if ((v4 & 1) == 0)
  {
    if ((*(_BYTE *)(result + 116) & 4) == 0)
      goto LABEL_3;
LABEL_19:
    result = PB::Writer::write(this);
    if ((*(_BYTE *)(v3 + 116) & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::write(this, *(double *)(result + 104));
  v4 = *(_BYTE *)(v3 + 116);
  if ((v4 & 4) != 0)
    goto LABEL_19;
LABEL_3:
  if ((v4 & 2) != 0)
LABEL_4:
    result = PB::Writer::write(this);
LABEL_5:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(float **)(v3 + 80);
  v12 = *(float **)(v3 + 88);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v15 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v15 != v14)
  {
    v16 = *v15++;
    result = PB::Writer::write(this, v16);
  }
  return result;
}

uint64_t sub_18F22E2B8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EB10;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F22E2CC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EB10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F22E30C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EB10;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22E360(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "axis");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22E3CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  char v32;
  unsigned int v33;
  unint64_t v34;
  char v35;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        v25 = *(_QWORD *)this;
        if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
        {
          v32 = 0;
          v33 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v34 = v23 + 1;
            v35 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)this + 1) = v34;
            v28 |= (unint64_t)(v35 & 0x7F) << v32;
            if ((v35 & 0x80) == 0)
              break;
            v32 += 7;
            v23 = v34;
            v14 = v33++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v28) = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v28) = 0;
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = v23 + 1;
            *((_QWORD *)this + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              break;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v28;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_18F281E90(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22E684(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F22E6D8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294F910;
  *(_DWORD *)(a1 + 92) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_18F22E704(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E294F910;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F22E764(PB::Base *a1)
{
  sub_18F22E704(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22E788(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "dynamicBiasEstimate", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "estimateErrorMetric", v10);
  }
  if ((*(_BYTE *)(a1 + 92) & 2) != 0)
    PB::TextFormatter::format(this, "rawGyroTemperature", *(float *)(a1 + 88));
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "subFitError", v13);
  }
  if ((*(_BYTE *)(a1 + 92) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F22E884(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  unint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  int v96;
  char *v97;
  int v98;
  char *v99;
  int v100;
  unint64_t v101;
  uint64_t v103;
  uint64_t v104;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 32);
    v103 = a1 + 48;
    v104 = a1 + 72;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 92) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_158;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_161;
        case 2u:
          if (v24 != 2)
          {
            v71 = *(char **)(a1 + 16);
            v70 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v71 >= v70)
            {
              v77 = (char *)*v10;
              v78 = (v71 - (_BYTE *)*v10) >> 2;
              v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 62)
LABEL_170:
                sub_18F26F8C0();
              v80 = v70 - (_QWORD)v77;
              if (v80 >> 1 > v79)
                v79 = v80 >> 1;
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
                v81 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v81 = v79;
              if (v81)
              {
                v82 = (char *)sub_18F26FB8C(v11, v81);
                v77 = *(char **)(a1 + 8);
                v71 = *(char **)(a1 + 16);
              }
              else
              {
                v82 = 0;
              }
              v95 = &v82[4 * v78];
              *(_DWORD *)v95 = 0;
              v72 = v95 + 4;
              while (v71 != v77)
              {
                v96 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *((_DWORD *)v95 - 1) = v96;
                v95 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v95;
              *(_QWORD *)(a1 + 16) = v72;
              *(_QWORD *)(a1 + 24) = &v82[4 * v81];
              if (v77)
                operator delete(v77);
            }
            else
            {
              *(_DWORD *)v71 = 0;
              v72 = v71 + 4;
            }
            *(_QWORD *)(a1 + 16) = v72;
            goto LABEL_156;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_170;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_18F26FB8C(v11, v36);
                v32 = *(char **)(a1 + 8);
                v30 = *(char **)(a1 + 16);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v38;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 16) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_109;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_110;
        case 3u:
          if (v24 != 2)
          {
            v74 = *(char **)(a1 + 40);
            v73 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v74 >= v73)
            {
              v83 = (char *)*v9;
              v84 = (v74 - (_BYTE *)*v9) >> 2;
              v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 62)
LABEL_171:
                sub_18F26F8C0();
              v86 = v73 - (_QWORD)v83;
              if (v86 >> 1 > v85)
                v85 = v86 >> 1;
              if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
                v87 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v87 = v85;
              if (v87)
              {
                v88 = (char *)sub_18F26FB8C(v103, v87);
                v83 = *(char **)(a1 + 32);
                v74 = *(char **)(a1 + 40);
              }
              else
              {
                v88 = 0;
              }
              v97 = &v88[4 * v84];
              *(_DWORD *)v97 = 0;
              v72 = v97 + 4;
              while (v74 != v83)
              {
                v98 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v97 - 1) = v98;
                v97 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v97;
              *(_QWORD *)(a1 + 40) = v72;
              *(_QWORD *)(a1 + 48) = &v88[4 * v87];
              if (v83)
                operator delete(v83);
            }
            else
            {
              *(_DWORD *)v74 = 0;
              v72 = v74 + 4;
            }
            *(_QWORD *)(a1 + 40) = v72;
            goto LABEL_156;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 40);
            v43 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v9;
              v47 = (v44 - (_BYTE *)*v9) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_171;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_18F26FB8C(v103, v50);
                v46 = *(char **)(a1 + 32);
                v44 = *(char **)(a1 + 40);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v52;
              *(_QWORD *)(a1 + 40) = v45;
              *(_QWORD *)(a1 + 48) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 40) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_109;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_110;
        case 4u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v55 = *((_QWORD *)this + 1);
            v56 = *((_QWORD *)this + 2);
            while (v55 < v56 && !*((_BYTE *)this + 24))
            {
              v58 = *(char **)(a1 + 64);
              v57 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v58 >= v57)
              {
                v60 = (char *)*v8;
                v61 = (v58 - (_BYTE *)*v8) >> 2;
                v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 62)
                  goto LABEL_172;
                v63 = v57 - (_QWORD)v60;
                if (v63 >> 1 > v62)
                  v62 = v63 >> 1;
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                  v64 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v64 = v62;
                if (v64)
                {
                  v65 = (char *)sub_18F26FB8C(v104, v64);
                  v60 = *(char **)(a1 + 56);
                  v58 = *(char **)(a1 + 64);
                }
                else
                {
                  v65 = 0;
                }
                v66 = &v65[4 * v61];
                *(_DWORD *)v66 = 0;
                v59 = v66 + 4;
                while (v58 != v60)
                {
                  v67 = *((_DWORD *)v58 - 1);
                  v58 -= 4;
                  *((_DWORD *)v66 - 1) = v67;
                  v66 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v66;
                *(_QWORD *)(a1 + 64) = v59;
                *(_QWORD *)(a1 + 72) = &v65[4 * v64];
                if (v60)
                  operator delete(v60);
              }
              else
              {
                *(_DWORD *)v58 = 0;
                v59 = v58 + 4;
              }
              *(_QWORD *)(a1 + 64) = v59;
              v68 = *((_QWORD *)this + 1);
              if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              {
LABEL_109:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
              v56 = *((_QWORD *)this + 2);
              v55 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v55;
            }
LABEL_110:
            PB::Reader::recallMark();
          }
          else
          {
            v76 = *(char **)(a1 + 64);
            v75 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v76 >= v75)
            {
              v89 = (char *)*v8;
              v90 = (v76 - (_BYTE *)*v8) >> 2;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 62)
LABEL_172:
                sub_18F26F8C0();
              v92 = v75 - (_QWORD)v89;
              if (v92 >> 1 > v91)
                v91 = v92 >> 1;
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
                v93 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v93 = v91;
              if (v93)
              {
                v94 = (char *)sub_18F26FB8C(v104, v93);
                v89 = *(char **)(a1 + 56);
                v76 = *(char **)(a1 + 64);
              }
              else
              {
                v94 = 0;
              }
              v99 = &v94[4 * v90];
              *(_DWORD *)v99 = 0;
              v72 = v99 + 4;
              while (v76 != v89)
              {
                v100 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v99 - 1) = v100;
                v99 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v99;
              *(_QWORD *)(a1 + 64) = v72;
              *(_QWORD *)(a1 + 72) = &v94[4 * v93];
              if (v89)
                operator delete(v89);
            }
            else
            {
              *(_DWORD *)v76 = 0;
              v72 = v76 + 4;
            }
            *(_QWORD *)(a1 + 64) = v72;
LABEL_156:
            v101 = *((_QWORD *)this + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *((_QWORD *)this + 2))
            {
              *(v72 - 1) = *(_DWORD *)(*(_QWORD *)this + v101);
LABEL_160:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_161:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_158:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_162:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 5u:
          *(_BYTE *)(a1 + 92) |= 2u;
          v69 = *((_QWORD *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
            goto LABEL_158;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v69);
          goto LABEL_160;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_162;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22EFF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;

  v3 = result;
  if ((*(_BYTE *)(result + 92) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 80));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 56);
  v11 = *(float **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  if ((*(_BYTE *)(v3 + 92) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 88));
  return result;
}

double sub_18F22F0BC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294CC00;
  *(_DWORD *)(a1 + 60) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F22F0E0(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E294CC00;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F22F130(PB::Base *a1)
{
  sub_18F22F0E0(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F22F154(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "intercept", v7);
  }
  if ((*(_BYTE *)(a1 + 60) & 1) != 0)
    PB::TextFormatter::format(this, "lastMiniCal", *(float *)(a1 + 56));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "slope", v10);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F22F208(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  char *v74;
  int v75;
  unint64_t v76;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
        break;
      if ((_DWORD)v25 == 2)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 16);
            v43 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v8;
              v47 = (v44 - (_BYTE *)*v8) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_128;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_18F26FB8C(v9, v50);
                v46 = *(char **)(a1 + 8);
                v44 = *(char **)(a1 + 16);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v52;
              *(_QWORD *)(a1 + 16) = v45;
              *(_QWORD *)(a1 + 24) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 16) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            {
LABEL_82:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_83;
            }
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        v59 = *(char **)(a1 + 16);
        v58 = *(_QWORD *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          v66 = (char *)*v8;
          v67 = (v59 - (_BYTE *)*v8) >> 2;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 62)
LABEL_128:
            sub_18F26F8C0();
          v69 = v58 - (_QWORD)v66;
          if (v69 >> 1 > v68)
            v68 = v69 >> 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
            v70 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)sub_18F26FB8C(v9, v70);
            v66 = *(char **)(a1 + 8);
            v59 = *(char **)(a1 + 16);
          }
          else
          {
            v71 = 0;
          }
          v74 = &v71[4 * v67];
          *(_DWORD *)v74 = 0;
          v57 = v74 + 4;
          while (v59 != v66)
          {
            v75 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *(_QWORD *)(a1 + 8) = v74;
          *(_QWORD *)(a1 + 16) = v57;
          *(_QWORD *)(a1 + 24) = &v71[4 * v70];
          if (v66)
            operator delete(v66);
        }
        else
        {
          *(_DWORD *)v59 = 0;
          v57 = v59 + 4;
        }
        *(_QWORD *)(a1 + 16) = v57;
LABEL_114:
        v76 = *((_QWORD *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
          goto LABEL_116;
        *(v57 - 1) = *(_DWORD *)(*(_QWORD *)this + v76);
LABEL_118:
        *((_QWORD *)this + 1) += 4;
        goto LABEL_119;
      }
      if ((_DWORD)v25 == 1)
      {
        if (v24 == 2)
        {
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 40);
            v28 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_127;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_18F26FB8C(v11, v35);
                v31 = *(char **)(a1 + 32);
                v29 = *(char **)(a1 + 40);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v37;
              *(_QWORD *)(a1 + 40) = v30;
              *(_QWORD *)(a1 + 48) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *(_QWORD *)(a1 + 40) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
              goto LABEL_82;
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v26;
          }
LABEL_83:
          PB::Reader::recallMark();
          goto LABEL_119;
        }
        v56 = *(char **)(a1 + 40);
        v55 = *(_QWORD *)(a1 + 48);
        if ((unint64_t)v56 >= v55)
        {
          v60 = (char *)*v10;
          v61 = (v56 - (_BYTE *)*v10) >> 2;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62)
LABEL_127:
            sub_18F26F8C0();
          v63 = v55 - (_QWORD)v60;
          if (v63 >> 1 > v62)
            v62 = v63 >> 1;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
            v64 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            v65 = (char *)sub_18F26FB8C(v11, v64);
            v60 = *(char **)(a1 + 32);
            v56 = *(char **)(a1 + 40);
          }
          else
          {
            v65 = 0;
          }
          v72 = &v65[4 * v61];
          *(_DWORD *)v72 = 0;
          v57 = v72 + 4;
          while (v56 != v60)
          {
            v73 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          *(_QWORD *)(a1 + 32) = v72;
          *(_QWORD *)(a1 + 40) = v57;
          *(_QWORD *)(a1 + 48) = &v65[4 * v64];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *(_DWORD *)v56 = 0;
          v57 = v56 + 4;
        }
        *(_QWORD *)(a1 + 40) = v57;
        goto LABEL_114;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_119:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 60) |= 1u;
    v40 = *((_QWORD *)this + 1);
    if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
    {
LABEL_116:
      *((_BYTE *)this + 24) = 1;
      goto LABEL_119;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v40);
    goto LABEL_118;
  }
  return v4 == 0;
}

uint64_t sub_18F22F778(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;

  v3 = result;
  v4 = *(float **)(result + 32);
  v5 = *(float **)(result + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  if ((*(_BYTE *)(v3 + 60) & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 56));
  return result;
}

_QWORD *sub_18F22F804(_QWORD *result)
{
  *result = off_1E2950828;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F22F818(void **a1)
{
  void **v2;

  *a1 = off_1E2950828;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F22F860(void **a1)
{
  void **v3;

  *a1 = off_1E2950828;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F22F8BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "sample");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22F928(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_18F22FAC8(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22FAC8(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E294F948;
  *(_DWORD *)(v2 + 24) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F22FC00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F22FC1C(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

_QWORD *sub_18F22FC64(_QWORD *result)
{
  *result = off_1E29518C8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F22FC78(void **a1)
{
  void **v2;

  *a1 = off_1E29518C8;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F22FCC0(void **a1)
{
  void **v3;

  *a1 = off_1E29518C8;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F22FD1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "sample");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F22FD88(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_18F22FF28(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F22FF28(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E2951158;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F230060(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F23007C(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_18F2300C4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F948;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F2300DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F230100(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 24) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2301B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 24) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 24) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 24) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 24) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23040C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_18F2304A0(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951158;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F2304B4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951158;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2304F4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951158;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F230548(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2305B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v22 = *((_QWORD *)this + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v22);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E294F948;
        v20[6] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2307E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F23083C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CC38;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_18F230854(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F230878(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "calibrationLevel");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 60) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F230A28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_73;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_72;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_72:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_73:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_56:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_79;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_78;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_77:
                    v2 = v29 + 1;
                    goto LABEL_78;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_77;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_78;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_78:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_79:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_79;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F230F00(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_WORD *)(v3 + 60) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F231074(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951C48;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F23108C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2310B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "dt", *(float *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2310FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F231294(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(float *)(result + 8));
  return result;
}

uint64_t sub_18F2312B0(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950860;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F2312C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2312EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 24);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 24) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 20));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23139C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 24) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 24) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 24) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 24) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2315F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_BYTE *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 20));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 24) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 20));
  return result;
}

uint64_t sub_18F23168C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951D68;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F2316A4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2316C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F231778(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2319DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_18F231A70(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CEA0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F231A88(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F231AAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "fsync");
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleNum");
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 36) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 8) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x10) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F231B9C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_56;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_55;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_55:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_56:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_62;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_61;
                  }
                  v31 = v21++;
                  v32 = *(_BYTE *)(v22 + v31);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_60:
                    v2 = v31 + 1;
                    goto LABEL_61;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_60;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_61;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_61:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_62:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 36) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 32) = v28;
              goto LABEL_62;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_62;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F231F30(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 36) & 0x20) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F231FFC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DBF8;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_18F232014(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F232038(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2320A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23232C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 12));
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F232384(uint64_t result)
{
  *(_QWORD *)result = &off_1E2943B08;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F23239C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2323C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "inShower");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F232428(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23260C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F232664(uint64_t result)
{
  *(_QWORD *)result = &off_1E29445C0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F23267C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2326A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "hapticOn");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F232708(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2328EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F232944(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DC30;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F23295C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F232980(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 28));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 32));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "thetaAPDirRad", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 1) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F232AB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_65;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_64:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_65;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_65:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_66;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_51;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_60;
            case 8u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_60:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_66;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_66:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F232EA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 44) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

double sub_18F232FA4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944E48;
  *(_QWORD *)(a1 + 168) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_18F232FD4(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E2944E48;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_18F233044(PB::Base *a1)
{
  sub_18F232FD4(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F233068(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  __int16 v19;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 172);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "covTraceAfterCorrection", *(double *)(a1 + 104));
    v5 = *(_WORD *)(a1 + 172);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "covTraceBeforeCorrection", *(double *)(a1 + 112));
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "dX", v8);
  }
  v9 = *(_WORD *)(a1 + 172);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 120));
    v9 = *(_WORD *)(a1 + 172);
    if ((v9 & 8) == 0)
    {
LABEL_9:
      if ((v9 & 0x100) == 0)
        goto LABEL_11;
      goto LABEL_10;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "lidAngleDeg", *(double *)(a1 + 128));
  if ((*(_WORD *)(a1 + 172) & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "measurementUpdateType");
LABEL_11:
  v10 = *(double **)(a1 + 32);
  v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "residual", v12);
  }
  v13 = *(double **)(a1 + 56);
  v14 = *(double **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "stateQfbAfterCorrection", v15);
  }
  v16 = *(double **)(a1 + 80);
  v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    v18 = *v16++;
    PB::TextFormatter::format(this, "stateQfbBeforeCorrection", v18);
  }
  v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
    v19 = *(_WORD *)(a1 + 172);
    if ((v19 & 0x20) == 0)
    {
LABEL_19:
      if ((v19 & 0x40) == 0)
        goto LABEL_20;
LABEL_28:
      PB::TextFormatter::format(this, "wAuxFaceNormMeanDps", *(double *)(a1 + 152));
      if ((*(_WORD *)(a1 + 172) & 0x80) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_21;
    }
  }
  else if ((v19 & 0x20) == 0)
  {
    goto LABEL_19;
  }
  PB::TextFormatter::format(this, "wAuxBudNormMeanDps", *(double *)(a1 + 144));
  v19 = *(_WORD *)(a1 + 172);
  if ((v19 & 0x40) != 0)
    goto LABEL_28;
LABEL_20:
  if ((v19 & 0x80) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "wSrcNormMeanDps", *(double *)(a1 + 160));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F233270(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  unsigned int v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  char *v102;
  _QWORD *v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  char *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (void **)(a1 + 32);
    v147 = a1 + 48;
    v148 = a1 + 24;
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 80);
    v145 = a1 + 96;
    v146 = a1 + 72;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 172) |= 0x10u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_237;
        case 2u:
          *(_WORD *)(a1 + 172) |= 0x100u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_204;
              v29 += 7;
              v26 = v32;
              v18 = v30++ > 8;
            }
            while (!v18);
LABEL_160:
            LODWORD(v31) = 0;
            goto LABEL_204;
          }
          v97 = 0;
          v98 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v99 = v26 + 1;
              v100 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v99;
              v31 |= (unint64_t)(v100 & 0x7F) << v97;
              if (v100 < 0)
              {
                v97 += 7;
                v26 = v99;
                v18 = v98++ > 8;
                if (v18)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_204:
          *(_DWORD *)(a1 + 168) = v31;
          goto LABEL_238;
        case 3u:
          if (v24 != 2)
          {
            v102 = *(char **)(a1 + 88);
            v101 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v102 >= v101)
            {
              v110 = (char *)*v11;
              v111 = (v102 - (_BYTE *)*v11) >> 3;
              v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 61)
LABEL_248:
                sub_18F26F8C0();
              v113 = v101 - (_QWORD)v110;
              if (v113 >> 2 > v112)
                v112 = v113 >> 2;
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
                v114 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v114 = v112;
              if (v114)
              {
                v115 = (char *)sub_18F26F8D4(v145, v114);
                v110 = *(char **)(a1 + 80);
                v102 = *(char **)(a1 + 88);
              }
              else
              {
                v115 = 0;
              }
              v134 = &v115[8 * v111];
              *(_QWORD *)v134 = 0;
              v103 = v134 + 8;
              while (v102 != v110)
              {
                v135 = *((_QWORD *)v102 - 1);
                v102 -= 8;
                *((_QWORD *)v134 - 1) = v135;
                v134 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v134;
              *(_QWORD *)(a1 + 88) = v103;
              *(_QWORD *)(a1 + 96) = &v115[8 * v114];
              if (v110)
                operator delete(v110);
            }
            else
            {
              *(_QWORD *)v102 = 0;
              v103 = v102 + 8;
            }
            *(_QWORD *)(a1 + 88) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          while (v34 < v35 && !*((_BYTE *)this + 24))
          {
            v37 = *(char **)(a1 + 88);
            v36 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v37 >= v36)
            {
              v39 = (char *)*v11;
              v40 = (v37 - (_BYTE *)*v11) >> 3;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61)
                goto LABEL_248;
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 2 > v41)
                v41 = v42 >> 2;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                v43 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_18F26F8D4(v145, v43);
                v39 = *(char **)(a1 + 80);
                v37 = *(char **)(a1 + 88);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[8 * v40];
              *(_QWORD *)v45 = 0;
              v38 = v45 + 8;
              while (v37 != v39)
              {
                v46 = *((_QWORD *)v37 - 1);
                v37 -= 8;
                *((_QWORD *)v45 - 1) = v46;
                v45 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v45;
              *(_QWORD *)(a1 + 88) = v38;
              *(_QWORD *)(a1 + 96) = &v44[8 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_QWORD *)v37 = 0;
              v38 = v37 + 8;
            }
            *(_QWORD *)(a1 + 88) = v38;
            v47 = *((_QWORD *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v38 - 1) = *(_QWORD *)(*(_QWORD *)this + v47);
            v35 = *((_QWORD *)this + 2);
            v34 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v34;
          }
          goto LABEL_153;
        case 4u:
          if (v24 != 2)
          {
            v105 = *(char **)(a1 + 64);
            v104 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v105 >= v104)
            {
              v116 = (char *)*v10;
              v117 = (v105 - (_BYTE *)*v10) >> 3;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 61)
LABEL_249:
                sub_18F26F8C0();
              v119 = v104 - (_QWORD)v116;
              if (v119 >> 2 > v118)
                v118 = v119 >> 2;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
                v120 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                v121 = (char *)sub_18F26F8D4(v146, v120);
                v116 = *(char **)(a1 + 56);
                v105 = *(char **)(a1 + 64);
              }
              else
              {
                v121 = 0;
              }
              v136 = &v121[8 * v117];
              *(_QWORD *)v136 = 0;
              v103 = v136 + 8;
              while (v105 != v116)
              {
                v137 = *((_QWORD *)v105 - 1);
                v105 -= 8;
                *((_QWORD *)v136 - 1) = v137;
                v136 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v136;
              *(_QWORD *)(a1 + 64) = v103;
              *(_QWORD *)(a1 + 72) = &v121[8 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_QWORD *)v105 = 0;
              v103 = v105 + 8;
            }
            *(_QWORD *)(a1 + 64) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          while (v48 < v49 && !*((_BYTE *)this + 24))
          {
            v51 = *(char **)(a1 + 64);
            v50 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v51 >= v50)
            {
              v53 = (char *)*v10;
              v54 = (v51 - (_BYTE *)*v10) >> 3;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61)
                goto LABEL_249;
              v56 = v50 - (_QWORD)v53;
              if (v56 >> 2 > v55)
                v55 = v56 >> 2;
              if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
              {
                v58 = (char *)sub_18F26F8D4(v146, v57);
                v53 = *(char **)(a1 + 56);
                v51 = *(char **)(a1 + 64);
              }
              else
              {
                v58 = 0;
              }
              v59 = &v58[8 * v54];
              *(_QWORD *)v59 = 0;
              v52 = v59 + 8;
              while (v51 != v53)
              {
                v60 = *((_QWORD *)v51 - 1);
                v51 -= 8;
                *((_QWORD *)v59 - 1) = v60;
                v59 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v59;
              *(_QWORD *)(a1 + 64) = v52;
              *(_QWORD *)(a1 + 72) = &v58[8 * v57];
              if (v53)
                operator delete(v53);
            }
            else
            {
              *(_QWORD *)v51 = 0;
              v52 = v51 + 8;
            }
            *(_QWORD *)(a1 + 64) = v52;
            v61 = *((_QWORD *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v52 - 1) = *(_QWORD *)(*(_QWORD *)this + v61);
            v49 = *((_QWORD *)this + 2);
            v48 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v48;
          }
          goto LABEL_153;
        case 5u:
          *(_WORD *)(a1 + 172) |= 2u;
          v62 = *((_QWORD *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFF7 || v62 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v62);
          goto LABEL_237;
        case 6u:
          *(_WORD *)(a1 + 172) |= 1u;
          v63 = *((_QWORD *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v63);
          goto LABEL_237;
        case 7u:
          if (v24 != 2)
          {
            v107 = *(char **)(a1 + 40);
            v106 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v107 >= v106)
            {
              v122 = (char *)*v9;
              v123 = (v107 - (_BYTE *)*v9) >> 3;
              v124 = v123 + 1;
              if ((unint64_t)(v123 + 1) >> 61)
LABEL_250:
                sub_18F26F8C0();
              v125 = v106 - (_QWORD)v122;
              if (v125 >> 2 > v124)
                v124 = v125 >> 2;
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8)
                v126 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v126 = v124;
              if (v126)
              {
                v127 = (char *)sub_18F26F8D4(v147, v126);
                v122 = *(char **)(a1 + 32);
                v107 = *(char **)(a1 + 40);
              }
              else
              {
                v127 = 0;
              }
              v138 = &v127[8 * v123];
              *(_QWORD *)v138 = 0;
              v103 = v138 + 8;
              while (v107 != v122)
              {
                v139 = *((_QWORD *)v107 - 1);
                v107 -= 8;
                *((_QWORD *)v138 - 1) = v139;
                v138 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v138;
              *(_QWORD *)(a1 + 40) = v103;
              *(_QWORD *)(a1 + 48) = &v127[8 * v126];
              if (v122)
                operator delete(v122);
            }
            else
            {
              *(_QWORD *)v107 = 0;
              v103 = v107 + 8;
            }
            *(_QWORD *)(a1 + 40) = v103;
            goto LABEL_233;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v64 = *((_QWORD *)this + 1);
          v65 = *((_QWORD *)this + 2);
          while (v64 < v65 && !*((_BYTE *)this + 24))
          {
            v67 = *(char **)(a1 + 40);
            v66 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v67 >= v66)
            {
              v69 = (char *)*v9;
              v70 = (v67 - (_BYTE *)*v9) >> 3;
              v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 61)
                goto LABEL_250;
              v72 = v66 - (_QWORD)v69;
              if (v72 >> 2 > v71)
                v71 = v72 >> 2;
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                v73 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v73 = v71;
              if (v73)
              {
                v74 = (char *)sub_18F26F8D4(v147, v73);
                v69 = *(char **)(a1 + 32);
                v67 = *(char **)(a1 + 40);
              }
              else
              {
                v74 = 0;
              }
              v75 = &v74[8 * v70];
              *(_QWORD *)v75 = 0;
              v68 = v75 + 8;
              while (v67 != v69)
              {
                v76 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v75;
              *(_QWORD *)(a1 + 40) = v68;
              *(_QWORD *)(a1 + 48) = &v74[8 * v73];
              if (v69)
                operator delete(v69);
            }
            else
            {
              *(_QWORD *)v67 = 0;
              v68 = v67 + 8;
            }
            *(_QWORD *)(a1 + 40) = v68;
            v77 = *((_QWORD *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)this + 2))
              goto LABEL_152;
            *(v68 - 1) = *(_QWORD *)(*(_QWORD *)this + v77);
            v65 = *((_QWORD *)this + 2);
            v64 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v64;
          }
          goto LABEL_153;
        case 8u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v78 = *((_QWORD *)this + 1);
            v79 = *((_QWORD *)this + 2);
            while (v78 < v79 && !*((_BYTE *)this + 24))
            {
              v81 = *(char **)(a1 + 16);
              v80 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v81 >= v80)
              {
                v83 = (char *)*v8;
                v84 = (v81 - (_BYTE *)*v8) >> 3;
                v85 = v84 + 1;
                if ((unint64_t)(v84 + 1) >> 61)
                  goto LABEL_251;
                v86 = v80 - (_QWORD)v83;
                if (v86 >> 2 > v85)
                  v85 = v86 >> 2;
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF8)
                  v87 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v87 = v85;
                if (v87)
                {
                  v88 = (char *)sub_18F26F8D4(v148, v87);
                  v83 = *(char **)(a1 + 8);
                  v81 = *(char **)(a1 + 16);
                }
                else
                {
                  v88 = 0;
                }
                v89 = &v88[8 * v84];
                *(_QWORD *)v89 = 0;
                v82 = v89 + 8;
                while (v81 != v83)
                {
                  v90 = *((_QWORD *)v81 - 1);
                  v81 -= 8;
                  *((_QWORD *)v89 - 1) = v90;
                  v89 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v89;
                *(_QWORD *)(a1 + 16) = v82;
                *(_QWORD *)(a1 + 24) = &v88[8 * v87];
                if (v83)
                  operator delete(v83);
              }
              else
              {
                *(_QWORD *)v81 = 0;
                v82 = v81 + 8;
              }
              *(_QWORD *)(a1 + 16) = v82;
              v91 = *((_QWORD *)this + 1);
              if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)this + 2))
              {
LABEL_152:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v82 - 1) = *(_QWORD *)(*(_QWORD *)this + v91);
              v79 = *((_QWORD *)this + 2);
              v78 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v78;
            }
LABEL_153:
            PB::Reader::recallMark();
          }
          else
          {
            v109 = *(char **)(a1 + 16);
            v108 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v109 >= v108)
            {
              v128 = (char *)*v8;
              v129 = (v109 - (_BYTE *)*v8) >> 3;
              v130 = v129 + 1;
              if ((unint64_t)(v129 + 1) >> 61)
LABEL_251:
                sub_18F26F8C0();
              v131 = v108 - (_QWORD)v128;
              if (v131 >> 2 > v130)
                v130 = v131 >> 2;
              if ((unint64_t)v131 >= 0x7FFFFFFFFFFFFFF8)
                v132 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v132 = v130;
              if (v132)
              {
                v133 = (char *)sub_18F26F8D4(v148, v132);
                v128 = *(char **)(a1 + 8);
                v109 = *(char **)(a1 + 16);
              }
              else
              {
                v133 = 0;
              }
              v140 = &v133[8 * v129];
              *(_QWORD *)v140 = 0;
              v103 = v140 + 8;
              while (v109 != v128)
              {
                v141 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v140 - 1) = v141;
                v140 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v140;
              *(_QWORD *)(a1 + 16) = v103;
              *(_QWORD *)(a1 + 24) = &v133[8 * v132];
              if (v128)
                operator delete(v128);
            }
            else
            {
              *(_QWORD *)v109 = 0;
              v103 = v109 + 8;
            }
            *(_QWORD *)(a1 + 16) = v103;
LABEL_233:
            v142 = *((_QWORD *)this + 1);
            if (v142 <= 0xFFFFFFFFFFFFFFF7 && v142 + 8 <= *((_QWORD *)this + 2))
            {
              *(v103 - 1) = *(_QWORD *)(*(_QWORD *)this + v142);
LABEL_237:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_235:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_238:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 9u:
          *(_WORD *)(a1 + 172) |= 0x80u;
          v92 = *((_QWORD *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v92);
          goto LABEL_237;
        case 0xAu:
          *(_WORD *)(a1 + 172) |= 0x20u;
          v93 = *((_QWORD *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v93);
          goto LABEL_237;
        case 0xBu:
          *(_WORD *)(a1 + 172) |= 0x40u;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v94);
          goto LABEL_237;
        case 0xCu:
          *(_WORD *)(a1 + 172) |= 8u;
          v95 = *((_QWORD *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFF7 || v95 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v95);
          goto LABEL_237;
        case 0xDu:
          *(_WORD *)(a1 + 172) |= 4u;
          v96 = *((_QWORD *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((_QWORD *)this + 2))
            goto LABEL_235;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v96);
          goto LABEL_237;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_238;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F233DDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  __int16 v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  __int16 v18;

  v3 = result;
  v4 = *(_WORD *)(result + 172);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 136));
    v4 = *(_WORD *)(v3 + 172);
  }
  if ((v4 & 0x100) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(double **)(v3 + 80);
  v6 = *(double **)(v3 + 88);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(double **)(v3 + 56);
  v9 = *(double **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(_WORD *)(v3 + 172);
  if ((v11 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 112));
    v11 = *(_WORD *)(v3 + 172);
  }
  if ((v11 & 1) != 0)
    result = PB::Writer::write(this, *(double *)(v3 + 104));
  v12 = *(double **)(v3 + 32);
  v13 = *(double **)(v3 + 40);
  while (v12 != v13)
  {
    v14 = *v12++;
    result = PB::Writer::write(this, v14);
  }
  v15 = *(double **)(v3 + 8);
  v16 = *(double **)(v3 + 16);
  while (v15 != v16)
  {
    v17 = *v15++;
    result = PB::Writer::write(this, v17);
  }
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 160));
    v18 = *(_WORD *)(v3 + 172);
    if ((v18 & 0x20) == 0)
    {
LABEL_23:
      if ((v18 & 0x40) == 0)
        goto LABEL_24;
      goto LABEL_29;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_23;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 0x40) == 0)
  {
LABEL_24:
    if ((v18 & 8) == 0)
      goto LABEL_25;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  v18 = *(_WORD *)(v3 + 172);
  if ((v18 & 8) == 0)
  {
LABEL_25:
    if ((v18 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 120));
  }
LABEL_30:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  if ((*(_WORD *)(v3 + 172) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 120));
  return result;
}

double sub_18F233F78(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E29515F0;
  *(_DWORD *)(a1 + 80) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F233F9C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E29515F0;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F233FEC(PB::Base *a1)
{
  sub_18F233F9C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F234010(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
    PB::TextFormatter::format(this, "lastUpdateTimestamp", *(double *)(a1 + 56));
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "stateCov", v7);
  }
  if ((*(_BYTE *)(a1 + 80) & 2) != 0)
    PB::TextFormatter::format(this, "stateCovTrace", *(double *)(a1 + 64));
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "stateQfb", v10);
  }
  if ((*(_BYTE *)(a1 + 80) & 4) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F2340FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 80) |= 4u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_120;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_122;
        case 2u:
          if (v24 != 2)
          {
            v57 = *(char **)(a1 + 40);
            v56 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v57 >= v56)
            {
              v61 = (char *)*v10;
              v62 = (v57 - (_BYTE *)*v10) >> 3;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 61)
LABEL_131:
                sub_18F26F8C0();
              v64 = v56 - (_QWORD)v61;
              if (v64 >> 2 > v63)
                v63 = v64 >> 2;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                v65 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_18F26F8D4(v11, v65);
                v61 = *(char **)(a1 + 32);
                v57 = *(char **)(a1 + 40);
              }
              else
              {
                v66 = 0;
              }
              v73 = &v66[8 * v62];
              *(_QWORD *)v73 = 0;
              v58 = v73 + 8;
              while (v57 != v61)
              {
                v74 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v73 - 1) = v74;
                v73 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v73;
              *(_QWORD *)(a1 + 40) = v58;
              *(_QWORD *)(a1 + 48) = &v66[8 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_QWORD *)v57 = 0;
              v58 = v57 + 8;
            }
            *(_QWORD *)(a1 + 40) = v58;
            goto LABEL_118;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 40);
            v28 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_131;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_18F26F8D4(v11, v35);
                v31 = *(char **)(a1 + 32);
                v29 = *(char **)(a1 + 40);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v37;
              *(_QWORD *)(a1 + 40) = v30;
              *(_QWORD *)(a1 + 48) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 40) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
              goto LABEL_86;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_87;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v40 = *((_QWORD *)this + 1);
            v41 = *((_QWORD *)this + 2);
            while (v40 < v41 && !*((_BYTE *)this + 24))
            {
              v43 = *(char **)(a1 + 16);
              v42 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*v8;
                v46 = (v43 - (_BYTE *)*v8) >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_132;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_18F26F8D4(v9, v49);
                  v45 = *(char **)(a1 + 8);
                  v43 = *(char **)(a1 + 16);
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = 0;
                v44 = v51 + 8;
                while (v43 != v45)
                {
                  v52 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v51;
                *(_QWORD *)(a1 + 16) = v44;
                *(_QWORD *)(a1 + 24) = &v50[8 * v49];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v43 = 0;
                v44 = v43 + 8;
              }
              *(_QWORD *)(a1 + 16) = v44;
              v53 = *((_QWORD *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
              {
LABEL_86:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)this + v53);
              v41 = *((_QWORD *)this + 2);
              v40 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v40;
            }
LABEL_87:
            PB::Reader::recallMark();
          }
          else
          {
            v60 = *(char **)(a1 + 16);
            v59 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v60 >= v59)
            {
              v67 = (char *)*v8;
              v68 = (v60 - (_BYTE *)*v8) >> 3;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 61)
LABEL_132:
                sub_18F26F8C0();
              v70 = v59 - (_QWORD)v67;
              if (v70 >> 2 > v69)
                v69 = v70 >> 2;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                v71 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v71 = v69;
              if (v71)
              {
                v72 = (char *)sub_18F26F8D4(v9, v71);
                v67 = *(char **)(a1 + 8);
                v60 = *(char **)(a1 + 16);
              }
              else
              {
                v72 = 0;
              }
              v75 = &v72[8 * v68];
              *(_QWORD *)v75 = 0;
              v58 = v75 + 8;
              while (v60 != v67)
              {
                v76 = *((_QWORD *)v60 - 1);
                v60 -= 8;
                *((_QWORD *)v75 - 1) = v76;
                v75 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v75;
              *(_QWORD *)(a1 + 16) = v58;
              *(_QWORD *)(a1 + 24) = &v72[8 * v71];
              if (v67)
                operator delete(v67);
            }
            else
            {
              *(_QWORD *)v60 = 0;
              v58 = v60 + 8;
            }
            *(_QWORD *)(a1 + 16) = v58;
LABEL_118:
            v77 = *((_QWORD *)this + 1);
            if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *((_QWORD *)this + 2))
            {
              *(v58 - 1) = *(_QWORD *)(*(_QWORD *)this + v77);
LABEL_122:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_120:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_123:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 80) |= 2u;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_120;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v54);
          goto LABEL_122;
        case 5u:
          *(_BYTE *)(a1 + 80) |= 1u;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((_QWORD *)this + 2))
            goto LABEL_120;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v55);
          goto LABEL_122;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_123;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2346F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  char v10;

  v3 = result;
  if ((*(_BYTE *)(result + 80) & 4) != 0)
    result = PB::Writer::write(this, *(double *)(result + 72));
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_BYTE *)(v3 + 80);
  if ((v10 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 64));
    v10 = *(_BYTE *)(v3 + 80);
  }
  if ((v10 & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56));
  return result;
}

_QWORD *sub_18F2347B0(_QWORD *result)
{
  *result = &off_1E2950898;
  result[1] = 0;
  return result;
}

void sub_18F2347C4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2347E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "trackingBehavior");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F234834(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F234A68(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F234A88(_QWORD *result)
{
  *result = &off_1E2950E48;
  result[1] = 0;
  return result;
}

void sub_18F234A9C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F234AC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "clientMode");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F234B0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F234D40(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F234D60(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EB48;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F234D78(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F234D9C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "bpm");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F234E2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 32) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if ((_DWORD)v20 != 2)
      {
        if ((_DWORD)v20 == 1)
        {
          *(_BYTE *)(a1 + 32) |= 1u;
          v21 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v28 = 0;
            v29 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v21)
              {
                v25 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_52;
              }
              v30 = v21++;
              v31 = *(_BYTE *)(v22 + v30);
              *((_QWORD *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0)
                break;
              v28 += 7;
              v14 = v29++ > 8;
              if (v14)
              {
                v25 = 0;
                goto LABEL_51;
              }
            }
            if (*((_BYTE *)this + 24))
              v25 = 0;
LABEL_51:
            v2 = v30 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                v25 = 0;
                break;
              }
            }
          }
LABEL_52:
          *(_QWORD *)(a1 + 8) = v25;
        }
        else
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
        }
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 32) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_18F2350F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

_QWORD *sub_18F235170(_QWORD *result)
{
  *result = &off_1E2951DA0;
  result[1] = 0;
  return result;
}

void sub_18F235180(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951DA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2351C0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951DA0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F235214(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F235264(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F2718AC(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23542C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F235448(uint64_t result)
{
  *(_QWORD *)result = &off_1E2952158;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_18F235460(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F235484(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "accelUnfilteredX", *(float *)(a1 + 40));
    v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelUnfilteredY", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "accelUnfilteredZ", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "accelX", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "accelY", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "accelZ", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "flags");
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "gravityX", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "gravityY", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "gyroBiasErrorEstimate", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "quaternionPredictedW", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "quaternionPredictedX", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "quaternionPredictedY", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0)
      goto LABEL_17;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "quaternionPredictedZ", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0)
      goto LABEL_18;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0)
      goto LABEL_20;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 1) == 0)
      goto LABEL_24;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 124));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_24:
    if ((v5 & 2) == 0)
      goto LABEL_25;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0)
      goto LABEL_26;
LABEL_53:
    PB::TextFormatter::format(this, "timestampAccelUnfiltered", *(double *)(a1 + 24));
    if ((*(_DWORD *)(a1 + 128) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_52:
  PB::TextFormatter::format(this, "timestampAccel", *(double *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) != 0)
    goto LABEL_53;
LABEL_26:
  if ((v5 & 8) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "timestampPrediction", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2357F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_125:
                    v2 = v29 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_125;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_126;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_117:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_97;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x17u:
              *(_DWORD *)(a1 + 128) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_97:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_116;
            case 0x18u:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x19u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_106;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_115;
            case 0x1Au:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_115:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_116:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_117;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F235FE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 128);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0)
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x80000) == 0)
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0)
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0)
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0)
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0)
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0)
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 2) == 0)
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0)
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v4 & 4) == 0)
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_24:
    if ((v4 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_25:
    if ((v4 & 0x20) == 0)
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_26:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 48));
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 128) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 48));
  return result;
}

uint64_t sub_18F2362DC(uint64_t result)
{
  *(_QWORD *)result = off_1E294F3D0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F2362F4(void **a1)
{
  void **v2;

  *a1 = off_1E294F3D0;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F23633C(void **a1)
{
  void **v3;

  *a1 = off_1E294F3D0;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F236398(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
    PB::TextFormatter::format(this, "lastSampleId");
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "slowOptical");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F236420(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 36) |= 1u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v31 = 0;
          v32 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_46;
            }
            v33 = v22 + 1;
            v34 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v33;
            v27 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v22 = v33;
            v15 = v32++ > 8;
            if (v15)
            {
LABEL_42:
              LODWORD(v27) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v15 = v26++ > 8;
            if (v15)
              goto LABEL_42;
          }
        }
LABEL_46:
        *(_DWORD *)(a1 + 32) = v27;
      }
      else if ((v12 >> 3) == 1)
      {
        sub_18F2366B8(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2366B8(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  sub_18F292114(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F2367E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F236800(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base **v4;
  const PB::Base **v5;
  const PB::Base *v6;

  v3 = result;
  v4 = *(const PB::Base ***)(result + 8);
  v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::writeSubmessage(this, v6);
  }
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F23686C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294D3E0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_18F236894(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)a1 = &off_1E294D3E0;
  v4 = (void **)(a1 + 24);
  sub_18F26F770(&v4);
  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_18F236910(uint64_t a1)
{
  sub_18F236894(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F236934(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "conchaMinAccepted");
    v5 = *(_BYTE *)(a1 + 60);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "location");
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "newOpenLid");
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "oldOpenLid");
  v8 = *(uint64_t **)(a1 + 24);
  v9 = *(uint64_t **)(a1 + 32);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v10 + 32))(v10, this, "optical");
  }
  v11 = *(_BYTE *)(a1 + 60);
  if ((v11 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v11 = *(_BYTE *)(a1 + 60);
  }
  if ((v11 & 8) != 0)
    PB::TextFormatter::format(this, "tragusMinAccepted");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F236A58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)(a1 + 24);
  while (2)
  {
    v9 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v16 = 0;
      v17 = 0;
      v12 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v18 = v2 + 1;
        v19 = *(_BYTE *)(v9 + v2);
        *((_QWORD *)this + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0)
          goto LABEL_21;
        v16 += 7;
        v2 = v18;
        if (v17++ >= 9)
        {
LABEL_20:
          v12 = 0;
          goto LABEL_21;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_21:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 60) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v49 = 0;
          v50 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          do
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_72;
            }
            v51 = v21 + 1;
            v52 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v51;
            v26 |= (unint64_t)(v52 & 0x7F) << v49;
            if ((v52 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                LODWORD(v26) = 0;
              goto LABEL_72;
            }
            v49 += 7;
            v21 = v51;
            v15 = v50++ > 8;
          }
          while (!v15);
LABEL_57:
          LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v15 = v25++ > 8;
            if (v15)
              goto LABEL_57;
          }
        }
LABEL_72:
        *(_DWORD *)(a1 + 48) = v26;
        goto LABEL_77;
      case 2u:
        *(_BYTE *)(a1 + 60) |= 2u;
        v30 = *((_QWORD *)this + 1);
        v31 = *((_QWORD *)this + 2);
        v32 = *(_QWORD *)this;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)this + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_76;
            v33 += 7;
            v30 = v36;
            v15 = v34++ > 8;
          }
          while (!v15);
LABEL_64:
          LODWORD(v35) = 0;
          goto LABEL_76;
        }
        v53 = 0;
        v54 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v55 = v30 + 1;
            v56 = *(_BYTE *)(v32 + v30);
            *((_QWORD *)this + 1) = v55;
            v35 |= (unint64_t)(v56 & 0x7F) << v53;
            if (v56 < 0)
            {
              v53 += 7;
              v30 = v55;
              v15 = v54++ > 8;
              if (v15)
                goto LABEL_64;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v35) = 0;
          }
          break;
        }
LABEL_76:
        *(_DWORD *)(a1 + 52) = v35;
        goto LABEL_77;
      case 3u:
        sub_18F2366B8(v8);
        v38 = *(_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
        goto LABEL_44;
      case 4u:
        v38 = operator new();
        sub_18F292114(v38);
        v39 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v38;
        if (v39)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v38 = *(_QWORD *)(a1 + 16);
        }
        goto LABEL_44;
      case 5u:
        v38 = operator new();
        sub_18F292114(v38);
        v40 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v38;
        if (v40)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          v38 = *(_QWORD *)(a1 + 8);
        }
LABEL_44:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v38 + 16))(v38, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_77:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 6u:
        *(_BYTE *)(a1 + 60) |= 4u;
        v41 = *((_QWORD *)this + 1);
        if (v41 >= *((_QWORD *)this + 2))
        {
          v44 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v42 = v41 + 1;
          v43 = *(unsigned __int8 *)(*(_QWORD *)this + v41);
          *((_QWORD *)this + 1) = v42;
          v44 = v43 != 0;
        }
        *(_BYTE *)(a1 + 56) = v44;
        goto LABEL_77;
      case 7u:
        *(_BYTE *)(a1 + 60) |= 8u;
        v45 = *((_QWORD *)this + 1);
        if (v45 >= *((_QWORD *)this + 2))
        {
          v48 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v46 = v45 + 1;
          v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
          *((_QWORD *)this + 1) = v46;
          v48 = v47 != 0;
        }
        *(_BYTE *)(a1 + 57) = v48;
        goto LABEL_77;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_77;
    }
  }
}

uint64_t sub_18F236EF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  const PB::Base *v8;
  const PB::Base *v9;
  char v10;

  v3 = result;
  v4 = *(_BYTE *)(result + 60);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 60);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base ***)(v3 + 24);
  v6 = *(const PB::Base ***)(v3 + 32);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeSubmessage(this, v7);
  }
  v8 = *(const PB::Base **)(v3 + 16);
  if (v8)
    result = PB::Writer::writeSubmessage(this, v8);
  v9 = *(const PB::Base **)(v3 + 8);
  if (v9)
    result = PB::Writer::writeSubmessage(this, v9);
  v10 = *(_BYTE *)(v3 + 60);
  if ((v10 & 4) != 0)
  {
    result = PB::Writer::write(this);
    v10 = *(_BYTE *)(v3 + 60);
  }
  if ((v10 & 8) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F236FCC(uint64_t result)
{
  *(_DWORD *)(result + 56) = 0;
  *(_QWORD *)result = &off_1E294DC68;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void sub_18F236FE4(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E294DC68;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

void sub_18F23705C(PB::Base *a1)
{
  sub_18F236FE4(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F237080(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "baseline");
  v6 = *(_BYTE *)(a1 + 56);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "conchaOpenResponse", *(float *)(a1 + 40));
    v6 = *(_BYTE *)(a1 + 56);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(this, "filter", *(float *)(a1 + 44));
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "lastBaseline");
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
    PB::TextFormatter::format(this, "location");
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "minimum");
  v9 = *(_BYTE *)(a1 + 56);
  if ((v9 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "rho", *(float *)(a1 + 52));
    v9 = *(_BYTE *)(a1 + 56);
  }
  if ((v9 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23719C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 56) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_51;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v20);
        v21 = *((_QWORD *)this + 1) + 8;
        goto LABEL_61;
      case 2u:
        *(_BYTE *)(a1 + 56) |= 8u;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        v25 = *(_QWORD *)this;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          do
          {
            v29 = v23 + 1;
            *((_QWORD *)this + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_65;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
          }
          while (!v14);
LABEL_58:
          LODWORD(v28) = 0;
          goto LABEL_65;
        }
        v38 = 0;
        v39 = 0;
        v28 = 0;
        if (v24 <= v23)
          v24 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v40 = v23 + 1;
            v41 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)this + 1) = v40;
            v28 |= (unint64_t)(v41 & 0x7F) << v38;
            if (v41 < 0)
            {
              v38 += 7;
              v23 = v40;
              v14 = v39++ > 8;
              if (v14)
                goto LABEL_58;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v28) = 0;
          }
          break;
        }
LABEL_65:
        *(_DWORD *)(a1 + 48) = v28;
        goto LABEL_66;
      case 3u:
        v31 = operator new();
        sub_18F292114(v31);
        v32 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v31;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v31 = *(_QWORD *)(a1 + 24);
        }
        goto LABEL_40;
      case 4u:
        v31 = operator new();
        sub_18F292114(v31);
        v33 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v31;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v31 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_40;
      case 5u:
        v31 = operator new();
        sub_18F292114(v31);
        v34 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v31;
        if (v34)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
          v31 = *(_QWORD *)(a1 + 16);
        }
LABEL_40:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v31 + 16))(v31, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_66:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 6u:
        *(_BYTE *)(a1 + 56) |= 2u;
        v35 = *((_QWORD *)this + 1);
        if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
          goto LABEL_51;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v35);
        goto LABEL_60;
      case 7u:
        *(_BYTE *)(a1 + 56) |= 0x10u;
        v36 = *((_QWORD *)this + 1);
        if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
          goto LABEL_51;
        *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v36);
        goto LABEL_60;
      case 8u:
        *(_BYTE *)(a1 + 56) |= 4u;
        v37 = *((_QWORD *)this + 1);
        if (v37 <= 0xFFFFFFFFFFFFFFFBLL && v37 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v37);
LABEL_60:
          v21 = *((_QWORD *)this + 1) + 4;
LABEL_61:
          *((_QWORD *)this + 1) = v21;
        }
        else
        {
LABEL_51:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_66;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

uint64_t sub_18F2375EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;
  char v8;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 56);
  }
  if ((v4 & 8) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    result = PB::Writer::writeSubmessage(this, v7);
  v8 = *(_BYTE *)(v3 + 56);
  if ((v8 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 40));
    v8 = *(_BYTE *)(v3 + 56);
    if ((v8 & 0x10) == 0)
    {
LABEL_13:
      if ((v8 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(float *)(v3 + 44));
    }
  }
  else if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  if ((*(_BYTE *)(v3 + 56) & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 44));
  return result;
}

uint64_t sub_18F2376D0(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E294DFE8;
  return result;
}

void sub_18F2376E8(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E294DFE8;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_18F237748(PB::Base *a1)
{
  sub_18F2376E8(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23776C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "above");
    v5 = *(_WORD *)(a1 + 48);
  }
  if ((v5 & 8) != 0)
    PB::TextFormatter::format(this, "below");
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "current");
  v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v7 = *(_WORD *)(a1 + 48);
    if ((v7 & 0x10) == 0)
    {
LABEL_9:
      if ((v7 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_23;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "moving");
  v7 = *(_WORD *)(a1 + 48);
  if ((v7 & 0x20) == 0)
  {
LABEL_10:
    if ((v7 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "partialin");
  if ((*(_WORD *)(a1 + 48) & 0x40) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "stable");
LABEL_12:
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "threshold");
  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
    v9 = *(_WORD *)(a1 + 48);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "upright");
  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0)
      goto LABEL_18;
LABEL_28:
    PB::TextFormatter::format(this, "vertical");
    if ((*(_WORD *)(a1 + 48) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_27:
  PB::TextFormatter::format(this, "upsidedown");
  v9 = *(_WORD *)(a1 + 48);
  if ((v9 & 0x200) != 0)
    goto LABEL_28;
LABEL_18:
  if ((v9 & 0x400) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "walking");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F237934(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  BOOL v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  BOOL v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  BOOL v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  BOOL v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_WORD *)(a1 + 48) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v20);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_89;
      case 2u:
        *(_WORD *)(a1 + 48) |= 2u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_88;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_65:
          LODWORD(v27) = 0;
          goto LABEL_88;
        }
        v69 = 0;
        v70 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v71 = v22 + 1;
            v72 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v71;
            v27 |= (unint64_t)(v72 & 0x7F) << v69;
            if (v72 < 0)
            {
              v69 += 7;
              v22 = v71;
              v14 = v70++ > 8;
              if (v14)
                goto LABEL_65;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_88:
        *(_DWORD *)(a1 + 32) = v27;
        goto LABEL_89;
      case 3u:
        v30 = operator new();
        sub_18F292114(v30);
        v31 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_38;
      case 4u:
        v30 = operator new();
        sub_18F292114(v30);
        v32 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v30;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v30 = *(_QWORD *)(a1 + 16);
        }
LABEL_38:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_89:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      case 5u:
        *(_WORD *)(a1 + 48) |= 0x80u;
        v33 = *((_QWORD *)this + 1);
        if (v33 >= *((_QWORD *)this + 2))
        {
          v36 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v34 = v33 + 1;
          v35 = *(unsigned __int8 *)(*(_QWORD *)this + v33);
          *((_QWORD *)this + 1) = v34;
          v36 = v35 != 0;
        }
        *(_BYTE *)(a1 + 41) = v36;
        goto LABEL_89;
      case 6u:
        *(_WORD *)(a1 + 48) |= 0x20u;
        v37 = *((_QWORD *)this + 1);
        if (v37 >= *((_QWORD *)this + 2))
        {
          v40 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v38 = v37 + 1;
          v39 = *(unsigned __int8 *)(*(_QWORD *)this + v37);
          *((_QWORD *)this + 1) = v38;
          v40 = v39 != 0;
        }
        *(_BYTE *)(a1 + 39) = v40;
        goto LABEL_89;
      case 7u:
        *(_WORD *)(a1 + 48) |= 4u;
        v41 = *((_QWORD *)this + 1);
        if (v41 >= *((_QWORD *)this + 2))
        {
          v44 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v42 = v41 + 1;
          v43 = *(unsigned __int8 *)(*(_QWORD *)this + v41);
          *((_QWORD *)this + 1) = v42;
          v44 = v43 != 0;
        }
        *(_BYTE *)(a1 + 36) = v44;
        goto LABEL_89;
      case 8u:
        *(_WORD *)(a1 + 48) |= 8u;
        v45 = *((_QWORD *)this + 1);
        if (v45 >= *((_QWORD *)this + 2))
        {
          v48 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v46 = v45 + 1;
          v47 = *(unsigned __int8 *)(*(_QWORD *)this + v45);
          *((_QWORD *)this + 1) = v46;
          v48 = v47 != 0;
        }
        *(_BYTE *)(a1 + 37) = v48;
        goto LABEL_89;
      case 9u:
        *(_WORD *)(a1 + 48) |= 0x40u;
        v49 = *((_QWORD *)this + 1);
        if (v49 >= *((_QWORD *)this + 2))
        {
          v52 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v50 = v49 + 1;
          v51 = *(unsigned __int8 *)(*(_QWORD *)this + v49);
          *((_QWORD *)this + 1) = v50;
          v52 = v51 != 0;
        }
        *(_BYTE *)(a1 + 40) = v52;
        goto LABEL_89;
      case 0xAu:
        *(_WORD *)(a1 + 48) |= 0x200u;
        v53 = *((_QWORD *)this + 1);
        if (v53 >= *((_QWORD *)this + 2))
        {
          v56 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v54 = v53 + 1;
          v55 = *(unsigned __int8 *)(*(_QWORD *)this + v53);
          *((_QWORD *)this + 1) = v54;
          v56 = v55 != 0;
        }
        *(_BYTE *)(a1 + 43) = v56;
        goto LABEL_89;
      case 0xBu:
        *(_WORD *)(a1 + 48) |= 0x100u;
        v57 = *((_QWORD *)this + 1);
        if (v57 >= *((_QWORD *)this + 2))
        {
          v60 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v58 = v57 + 1;
          v59 = *(unsigned __int8 *)(*(_QWORD *)this + v57);
          *((_QWORD *)this + 1) = v58;
          v60 = v59 != 0;
        }
        *(_BYTE *)(a1 + 42) = v60;
        goto LABEL_89;
      case 0xCu:
        *(_WORD *)(a1 + 48) |= 0x10u;
        v61 = *((_QWORD *)this + 1);
        if (v61 >= *((_QWORD *)this + 2))
        {
          v64 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v62 = v61 + 1;
          v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
          *((_QWORD *)this + 1) = v62;
          v64 = v63 != 0;
        }
        *(_BYTE *)(a1 + 38) = v64;
        goto LABEL_89;
      case 0xDu:
        *(_WORD *)(a1 + 48) |= 0x400u;
        v65 = *((_QWORD *)this + 1);
        if (v65 >= *((_QWORD *)this + 2))
        {
          v68 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v66 = v65 + 1;
          v67 = *(unsigned __int8 *)(*(_QWORD *)this + v65);
          *((_QWORD *)this + 1) = v66;
          v68 = v67 != 0;
        }
        *(_BYTE *)(a1 + 44) = v68;
        goto LABEL_89;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_89;
    }
  }
}

uint64_t sub_18F237EF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  const PB::Base *v5;
  const PB::Base *v6;
  __int16 v7;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_WORD *)(v3 + 48);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 16);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x80) != 0)
  {
    result = PB::Writer::write(this);
    v7 = *(_WORD *)(v3 + 48);
    if ((v7 & 0x20) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_21;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x40) == 0)
  {
LABEL_14:
    if ((v7 & 0x200) == 0)
      goto LABEL_15;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x200) == 0)
  {
LABEL_15:
    if ((v7 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x100) == 0)
  {
LABEL_16:
    if ((v7 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this);
  v7 = *(_WORD *)(v3 + 48);
  if ((v7 & 0x10) == 0)
  {
LABEL_17:
    if ((v7 & 0x400) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_26:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 48) & 0x400) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F238070(uint64_t result)
{
  *(_DWORD *)(result + 44) = 0;
  *(_QWORD *)result = &off_1E294CED8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

void sub_18F238088(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E294CED8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  PB::Base::~Base(this);
}

void sub_18F238100(PB::Base *a1)
{
  sub_18F238088(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F238124(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "current");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "last");
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
    PB::TextFormatter::format(this, "location");
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "minimum");
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2381EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 44) |= 1u;
        v20 = *((_QWORD *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v20);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_55;
      case 2u:
        *(_BYTE *)(a1 + 44) |= 2u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_54;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_49:
          LODWORD(v27) = 0;
          goto LABEL_54;
        }
        v34 = 0;
        v35 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v36 = v22 + 1;
            v37 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v36;
            v27 |= (unint64_t)(v37 & 0x7F) << v34;
            if (v37 < 0)
            {
              v34 += 7;
              v22 = v36;
              v14 = v35++ > 8;
              if (v14)
                goto LABEL_49;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_54:
        *(_DWORD *)(a1 + 40) = v27;
        goto LABEL_55;
      case 3u:
        v30 = operator new();
        sub_18F292114(v30);
        v31 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = *(_QWORD *)(a1 + 24);
        }
        goto LABEL_40;
      case 4u:
        v30 = operator new();
        sub_18F292114(v30);
        v32 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v30;
        if (v32)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
          v30 = *(_QWORD *)(a1 + 8);
        }
        goto LABEL_40;
      case 5u:
        v30 = operator new();
        sub_18F292114(v30);
        v33 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v30;
        if (v33)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
          v30 = *(_QWORD *)(a1 + 16);
        }
LABEL_40:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v30 + 16))(v30, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_55:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_55;
    }
  }
}

uint64_t sub_18F23858C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  const PB::Base *v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 44);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(const PB::Base **)(v3 + 16);
  if (v7)
    return PB::Writer::writeSubmessage(this, v7);
  return result;
}

double sub_18F238620(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294CF10;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  return result;
}

void sub_18F23864C(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E294CF10;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_18F2386CC(PB::Base *a1)
{
  sub_18F23864C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2386F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  float *v11;
  float *v12;
  float v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "acceleration", v7);
  }
  if ((*(_BYTE *)(a1 + 108) & 2) != 0)
    PB::TextFormatter::format(this, "correlation", *(float *)(a1 + 80));
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "current");
  if ((*(_BYTE *)(a1 + 108) & 4) != 0)
    PB::TextFormatter::format(this, "deltatip", *(float *)(a1 + 84));
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "instability");
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 8) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v10 = *(_BYTE *)(a1 + 108);
    if ((v10 & 0x10) == 0)
    {
LABEL_13:
      if ((v10 & 0x20) == 0)
        goto LABEL_14;
      goto LABEL_22;
    }
  }
  else if ((*(_BYTE *)(a1 + 108) & 0x10) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(this, "state");
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 0x20) == 0)
  {
LABEL_14:
    if ((v10 & 1) == 0)
      goto LABEL_15;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 96));
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 1) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0)
      goto LABEL_16;
LABEL_24:
    PB::TextFormatter::format(this, "tip", *(float *)(a1 + 100));
    if ((*(_BYTE *)(a1 + 108) & 0x80) == 0)
      goto LABEL_17;
    goto LABEL_25;
  }
LABEL_23:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  v10 = *(_BYTE *)(a1 + 108);
  if ((v10 & 0x40) != 0)
    goto LABEL_24;
LABEL_16:
  if ((v10 & 0x80) == 0)
    goto LABEL_17;
LABEL_25:
  PB::TextFormatter::format(this, "upright");
LABEL_17:
  v11 = *(float **)(a1 + 32);
  v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "variance", v13);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F2388C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _DWORD *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  char *v87;
  _DWORD *v88;
  char v89;
  unsigned int v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  int v108;
  char *v109;
  int v110;
  unint64_t v111;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 108) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_175;
        case 2u:
          *(_BYTE *)(a1 + 108) |= 8u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_152;
              v30 += 7;
              v27 = v33;
              v18 = v31++ > 8;
            }
            while (!v18);
LABEL_117:
            LODWORD(v32) = 0;
            goto LABEL_152;
          }
          v82 = 0;
          v83 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v84 = v27 + 1;
              v85 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v84;
              v32 |= (unint64_t)(v85 & 0x7F) << v82;
              if (v85 < 0)
              {
                v82 += 7;
                v27 = v84;
                v18 = v83++ > 8;
                if (v18)
                  goto LABEL_117;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_152:
          *(_DWORD *)(a1 + 88) = v32;
          goto LABEL_176;
        case 3u:
          v35 = operator new();
          sub_18F292114(v35);
          v36 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v35;
          if (v36)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
            v35 = *(_QWORD *)(a1 + 56);
          }
          goto LABEL_39;
        case 4u:
          v35 = operator new();
          sub_18F292114(v35);
          v37 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v35;
          if (v37)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
            v35 = *(_QWORD *)(a1 + 64);
          }
LABEL_39:
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v35 + 16))(v35, this) & 1) != 0)
          {
            goto LABEL_41;
          }
          return 0;
        case 5u:
          if (v24 != 2)
          {
            v87 = *(char **)(a1 + 16);
            v86 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v87 >= v86)
            {
              v95 = (char *)*v10;
              v96 = (v87 - (_BYTE *)*v10) >> 2;
              v97 = v96 + 1;
              if ((unint64_t)(v96 + 1) >> 62)
LABEL_187:
                sub_18F26F8C0();
              v98 = v86 - (_QWORD)v95;
              if (v98 >> 1 > v97)
                v97 = v98 >> 1;
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
                v99 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v99 = v97;
              if (v99)
              {
                v100 = (char *)sub_18F26FB8C(v11, v99);
                v95 = *(char **)(a1 + 8);
                v87 = *(char **)(a1 + 16);
              }
              else
              {
                v100 = 0;
              }
              v107 = &v100[4 * v96];
              *(_DWORD *)v107 = 0;
              v88 = v107 + 4;
              while (v87 != v95)
              {
                v108 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v107 - 1) = v108;
                v107 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v107;
              *(_QWORD *)(a1 + 16) = v88;
              *(_QWORD *)(a1 + 24) = &v100[4 * v99];
              if (v95)
                operator delete(v95);
            }
            else
            {
              *(_DWORD *)v87 = 0;
              v88 = v87 + 4;
            }
            *(_QWORD *)(a1 + 16) = v88;
            goto LABEL_170;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 16);
            v40 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v10;
              v44 = (v41 - (_BYTE *)*v10) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_187;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_18F26FB8C(v11, v47);
                v43 = *(char **)(a1 + 8);
                v41 = *(char **)(a1 + 16);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v49;
              *(_QWORD *)(a1 + 16) = v42;
              *(_QWORD *)(a1 + 24) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *(_QWORD *)(a1 + 16) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
              goto LABEL_131;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_41;
        case 6u:
          *(_BYTE *)(a1 + 108) |= 0x40u;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_174;
        case 7u:
          *(_BYTE *)(a1 + 108) |= 0x20u;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_174;
        case 8u:
          *(_BYTE *)(a1 + 108) |= 0x80u;
          v54 = *((_QWORD *)this + 1);
          if (v54 >= *((_QWORD *)this + 2))
          {
            v57 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v55 = v54 + 1;
            v56 = *(unsigned __int8 *)(*(_QWORD *)this + v54);
            *((_QWORD *)this + 1) = v55;
            v57 = v56 != 0;
          }
          *(_BYTE *)(a1 + 104) = v57;
          goto LABEL_176;
        case 9u:
          *(_BYTE *)(a1 + 108) |= 0x10u;
          v58 = *((_QWORD *)this + 1);
          v59 = *((_QWORD *)this + 2);
          v60 = *(_QWORD *)this;
          if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
          {
            v61 = 0;
            v62 = 0;
            v63 = 0;
            do
            {
              v64 = v58 + 1;
              *((_QWORD *)this + 1) = v58 + 1;
              v65 = *(_BYTE *)(v60 + v58);
              v63 |= (unint64_t)(v65 & 0x7F) << v61;
              if ((v65 & 0x80) == 0)
                goto LABEL_155;
              v61 += 7;
              v58 = v64;
              v18 = v62++ > 8;
            }
            while (!v18);
LABEL_128:
            LODWORD(v63) = 0;
            goto LABEL_155;
          }
          v89 = 0;
          v90 = 0;
          v63 = 0;
          if (v59 <= v58)
            v59 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v59 == v58)
            {
              LODWORD(v63) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v91 = v58 + 1;
              v92 = *(_BYTE *)(v60 + v58);
              *((_QWORD *)this + 1) = v91;
              v63 |= (unint64_t)(v92 & 0x7F) << v89;
              if (v92 < 0)
              {
                v89 += 7;
                v58 = v91;
                v18 = v90++ > 8;
                if (v18)
                  goto LABEL_128;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v63) = 0;
            }
            break;
          }
LABEL_155:
          *(_DWORD *)(a1 + 92) = v63;
          goto LABEL_176;
        case 0xAu:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v66 = *((_QWORD *)this + 1);
            v67 = *((_QWORD *)this + 2);
            while (v66 < v67 && !*((_BYTE *)this + 24))
            {
              v69 = *(char **)(a1 + 40);
              v68 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v69 >= v68)
              {
                v71 = (char *)*v8;
                v72 = (v69 - (_BYTE *)*v8) >> 2;
                v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62)
                  goto LABEL_186;
                v74 = v68 - (_QWORD)v71;
                if (v74 >> 1 > v73)
                  v73 = v74 >> 1;
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                  v75 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v75 = v73;
                if (v75)
                {
                  v76 = (char *)sub_18F26FB8C(v9, v75);
                  v71 = *(char **)(a1 + 32);
                  v69 = *(char **)(a1 + 40);
                }
                else
                {
                  v76 = 0;
                }
                v77 = &v76[4 * v72];
                *(_DWORD *)v77 = 0;
                v70 = v77 + 4;
                while (v69 != v71)
                {
                  v78 = *((_DWORD *)v69 - 1);
                  v69 -= 4;
                  *((_DWORD *)v77 - 1) = v78;
                  v77 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v77;
                *(_QWORD *)(a1 + 40) = v70;
                *(_QWORD *)(a1 + 48) = &v76[4 * v75];
                if (v71)
                  operator delete(v71);
              }
              else
              {
                *(_DWORD *)v69 = 0;
                v70 = v69 + 4;
              }
              *(_QWORD *)(a1 + 40) = v70;
              v79 = *((_QWORD *)this + 1);
              if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
              {
LABEL_131:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v70 - 1) = *(_DWORD *)(*(_QWORD *)this + v79);
              v67 = *((_QWORD *)this + 2);
              v66 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v66;
            }
LABEL_41:
            PB::Reader::recallMark();
          }
          else
          {
            v94 = *(char **)(a1 + 40);
            v93 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v94 >= v93)
            {
              v101 = (char *)*v8;
              v102 = (v94 - (_BYTE *)*v8) >> 2;
              v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 62)
LABEL_186:
                sub_18F26F8C0();
              v104 = v93 - (_QWORD)v101;
              if (v104 >> 1 > v103)
                v103 = v104 >> 1;
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL)
                v105 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v105 = v103;
              if (v105)
              {
                v106 = (char *)sub_18F26FB8C(v9, v105);
                v101 = *(char **)(a1 + 32);
                v94 = *(char **)(a1 + 40);
              }
              else
              {
                v106 = 0;
              }
              v109 = &v106[4 * v102];
              *(_DWORD *)v109 = 0;
              v88 = v109 + 4;
              while (v94 != v101)
              {
                v110 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v109;
              *(_QWORD *)(a1 + 40) = v88;
              *(_QWORD *)(a1 + 48) = &v106[4 * v105];
              if (v101)
                operator delete(v101);
            }
            else
            {
              *(_DWORD *)v94 = 0;
              v88 = v94 + 4;
            }
            *(_QWORD *)(a1 + 40) = v88;
LABEL_170:
            v111 = *((_QWORD *)this + 1);
            if (v111 <= 0xFFFFFFFFFFFFFFFBLL && v111 + 4 <= *((_QWORD *)this + 2))
            {
              *(v88 - 1) = *(_DWORD *)(*(_QWORD *)this + v111);
LABEL_174:
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_175:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_172:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_176:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xBu:
          *(_BYTE *)(a1 + 108) |= 2u;
          v80 = *((_QWORD *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v80);
          goto LABEL_174;
        case 0xCu:
          *(_BYTE *)(a1 + 108) |= 4u;
          v81 = *((_QWORD *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
            goto LABEL_172;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v81);
          goto LABEL_174;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_176;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2391E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;
  float *v7;
  float *v8;
  float v9;
  char v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = result;
  v4 = *(_BYTE *)(result + 108);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 72));
    v4 = *(_BYTE *)(v3 + 108);
  }
  if ((v4 & 8) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 56);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 64);
  if (v6)
    result = PB::Writer::writeSubmessage(this, v6);
  v7 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_BYTE *)(v3 + 108);
  if ((v10 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 100));
    v10 = *(_BYTE *)(v3 + 108);
    if ((v10 & 0x20) == 0)
    {
LABEL_14:
      if ((v10 & 0x80) == 0)
        goto LABEL_15;
LABEL_26:
      result = PB::Writer::write(this);
      if ((*(_BYTE *)(v3 + 108) & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(v3 + 108) & 0x20) == 0)
  {
    goto LABEL_14;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v10 = *(_BYTE *)(v3 + 108);
  if (v10 < 0)
    goto LABEL_26;
LABEL_15:
  if ((v10 & 0x10) != 0)
LABEL_16:
    result = PB::Writer::writeVarInt(this);
LABEL_17:
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(_BYTE *)(v3 + 108);
  if ((v14 & 2) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 80));
    v14 = *(_BYTE *)(v3 + 108);
  }
  if ((v14 & 4) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 84));
  return result;
}

uint64_t sub_18F239350(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E294CF48;
  return result;
}

void sub_18F239368(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E294CF48;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_18F2393C8(PB::Base *a1)
{
  sub_18F239368(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2393EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    PB::TextFormatter::format(this, "location");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "maximum");
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "minimum");
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F239494(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 32) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v21 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v21 <= v20)
            v21 = *((_QWORD *)this + 1);
          do
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v42 = v20 + 1;
            v43 = *(_BYTE *)(v22 + v20);
            *((_QWORD *)this + 1) = v42;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
              goto LABEL_62;
            }
            v40 += 7;
            v20 = v42;
            v14 = v41++ > 8;
          }
          while (!v14);
LABEL_51:
          LODWORD(v25) = 0;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v26 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v27 = *(_BYTE *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0)
              break;
            v23 += 7;
            v20 = v26;
            v14 = v24++ > 8;
            if (v14)
              goto LABEL_51;
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_67;
      case 2u:
        *(_BYTE *)(a1 + 32) |= 2u;
        v29 = *((_QWORD *)this + 1);
        v30 = *((_QWORD *)this + 2);
        v31 = *(_QWORD *)this;
        if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
        {
          v32 = 0;
          v33 = 0;
          v34 = 0;
          do
          {
            v35 = v29 + 1;
            *((_QWORD *)this + 1) = v29 + 1;
            v36 = *(_BYTE *)(v31 + v29);
            v34 |= (unint64_t)(v36 & 0x7F) << v32;
            if ((v36 & 0x80) == 0)
              goto LABEL_66;
            v32 += 7;
            v29 = v35;
            v14 = v33++ > 8;
          }
          while (!v14);
LABEL_58:
          LODWORD(v34) = 0;
          goto LABEL_66;
        }
        v44 = 0;
        v45 = 0;
        v34 = 0;
        if (v30 <= v29)
          v30 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v30 == v29)
          {
            LODWORD(v34) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v46 = v29 + 1;
            v47 = *(_BYTE *)(v31 + v29);
            *((_QWORD *)this + 1) = v46;
            v34 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              v29 = v46;
              v14 = v45++ > 8;
              if (v14)
                goto LABEL_58;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v34) = 0;
          }
          break;
        }
LABEL_66:
        *(_DWORD *)(a1 + 28) = v34;
        goto LABEL_67;
      case 3u:
        v37 = operator new();
        sub_18F292114(v37);
        v38 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v37;
        if (v38)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
          v37 = *(_QWORD *)(a1 + 16);
        }
        goto LABEL_42;
      case 4u:
        v37 = operator new();
        sub_18F292114(v37);
        v39 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v37;
        if (v39)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
          v37 = *(_QWORD *)(a1 + 8);
        }
LABEL_42:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v37 + 16))(v37, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_67:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_67;
    }
  }
}

uint64_t sub_18F23988C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(this, v6);
  return result;
}

double sub_18F23990C(_QWORD *a1)
{
  double result;

  *a1 = &off_1E294DCA0;
  result = 0.0;
  a1[2] = 0;
  *(_QWORD *)((char *)a1 + 28) = 0;
  return result;
}

void sub_18F23992C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F239950(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "eventTag");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "from");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "location");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "to");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F239A20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v21++;
                  v48 = *(_BYTE *)(v22 + v47);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_87:
                    v2 = v47 + 1;
                    goto LABEL_88;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_87;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_88;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_88:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F239F84(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F23A034(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294F408;
  *(_DWORD *)(a1 + 124) = 0;
  *(_DWORD *)(a1 + 132) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_18F23A06C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &off_1E294F408;
  v6 = (void **)(a1 + 96);
  sub_18F26F770(&v6);
  v6 = (void **)(a1 + 72);
  sub_18F26F770(&v6);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_18F23A118(uint64_t a1)
{
  sub_18F23A06C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23A13C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  float *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  float v19;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "baseline");
  if ((*(_BYTE *)(a1 + 132) & 1) != 0)
    PB::TextFormatter::format(this, "location");
  v6 = *(_QWORD *)(a1 + 64);
  if (v6)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v6 + 32))(v6, this, "minimum");
  v7 = *(uint64_t **)(a1 + 72);
  v8 = *(uint64_t **)(a1 + 80);
  while (v7 != v8)
  {
    v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v9 + 32))(v9, this, "optical");
  }
  v10 = *(_BYTE *)(a1 + 132);
  if ((v10 & 4) != 0)
  {
    PB::TextFormatter::format(this, "ringBufferUpdated");
    v10 = *(_BYTE *)(a1 + 132);
    if ((v10 & 8) == 0)
    {
LABEL_11:
      if ((v10 & 2) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 132) & 8) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "runningMinAccepted");
  if ((*(_BYTE *)(a1 + 132) & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "state");
LABEL_13:
  v11 = *(uint64_t **)(a1 + 96);
  v12 = *(uint64_t **)(a1 + 104);
  while (v11 != v12)
  {
    v13 = *v11++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "temp");
  }
  v14 = *(float **)(a1 + 8);
  v15 = *(float **)(a1 + 16);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "tilt", v16);
  }
  v17 = *(float **)(a1 + 32);
  v18 = *(float **)(a1 + 40);
  while (v17 != v18)
  {
    v19 = *v17++;
    PB::TextFormatter::format(this, "tip", v19);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F23A2F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  _DWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  unint64_t v92;
  char *v93;
  _DWORD *v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  char *v111;
  int v112;
  unint64_t v113;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 96);
    v9 = (void **)(a1 + 8);
    v10 = a1 + 24;
    v11 = (void **)(a1 + 32);
    v12 = a1 + 48;
    v13 = (uint64_t **)(a1 + 72);
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if (v26 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 132) |= 1u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_149;
              v30 += 7;
              v27 = v33;
              v20 = v31++ > 8;
            }
            while (!v20);
LABEL_112:
            LODWORD(v32) = 0;
            goto LABEL_149;
          }
          v84 = 0;
          v85 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v86 = v27 + 1;
              v87 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v86;
              v32 |= (unint64_t)(v87 & 0x7F) << v84;
              if (v87 < 0)
              {
                v84 += 7;
                v27 = v86;
                v20 = v85++ > 8;
                if (v20)
                  goto LABEL_112;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v32) = 0;
            }
            break;
          }
LABEL_149:
          *(_DWORD *)(a1 + 120) = v32;
          goto LABEL_101;
        case 2u:
          *(_BYTE *)(a1 + 132) |= 2u;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          v37 = *(_QWORD *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)this + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_152;
              v38 += 7;
              v35 = v41;
              v20 = v39++ > 8;
            }
            while (!v20);
LABEL_119:
            LODWORD(v40) = 0;
            goto LABEL_152;
          }
          v88 = 0;
          v89 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v90 = v35 + 1;
              v91 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)this + 1) = v90;
              v40 |= (unint64_t)(v91 & 0x7F) << v88;
              if (v91 < 0)
              {
                v88 += 7;
                v35 = v90;
                v20 = v89++ > 8;
                if (v20)
                  goto LABEL_119;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_152:
          *(_DWORD *)(a1 + 124) = v40;
          goto LABEL_101;
        case 3u:
          sub_18F2366B8(v13);
          v43 = *(_QWORD *)(a1 + 80);
          goto LABEL_97;
        case 4u:
          if (v26 != 2)
          {
            v93 = *(char **)(a1 + 40);
            v92 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v93 >= v92)
            {
              v97 = (char *)*v11;
              v98 = (v93 - (_BYTE *)*v11) >> 2;
              v99 = v98 + 1;
              if ((unint64_t)(v98 + 1) >> 62)
LABEL_176:
                sub_18F26F8C0();
              v100 = v92 - (_QWORD)v97;
              if (v100 >> 1 > v99)
                v99 = v100 >> 1;
              if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
                v101 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v101 = v99;
              if (v101)
              {
                v102 = (char *)sub_18F26FB8C(v12, v101);
                v97 = *(char **)(a1 + 32);
                v93 = *(char **)(a1 + 40);
              }
              else
              {
                v102 = 0;
              }
              v109 = &v102[4 * v98];
              *(_DWORD *)v109 = 0;
              v94 = v109 + 4;
              while (v93 != v97)
              {
                v110 = *((_DWORD *)v93 - 1);
                v93 -= 4;
                *((_DWORD *)v109 - 1) = v110;
                v109 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v109;
              *(_QWORD *)(a1 + 40) = v94;
              *(_QWORD *)(a1 + 48) = &v102[4 * v101];
              if (v97)
                operator delete(v97);
            }
            else
            {
              *(_DWORD *)v93 = 0;
              v94 = v93 + 4;
            }
            *(_QWORD *)(a1 + 40) = v94;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v44 = *((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
          while (v44 < v45 && !*((_BYTE *)this + 24))
          {
            v47 = *(char **)(a1 + 40);
            v46 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v47 >= v46)
            {
              v49 = (char *)*v11;
              v50 = (v47 - (_BYTE *)*v11) >> 2;
              v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 62)
                goto LABEL_176;
              v52 = v46 - (_QWORD)v49;
              if (v52 >> 1 > v51)
                v51 = v52 >> 1;
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
                v53 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v53 = v51;
              if (v53)
              {
                v54 = (char *)sub_18F26FB8C(v12, v53);
                v49 = *(char **)(a1 + 32);
                v47 = *(char **)(a1 + 40);
              }
              else
              {
                v54 = 0;
              }
              v55 = &v54[4 * v50];
              *(_DWORD *)v55 = 0;
              v48 = v55 + 4;
              while (v47 != v49)
              {
                v56 = *((_DWORD *)v47 - 1);
                v47 -= 4;
                *((_DWORD *)v55 - 1) = v56;
                v55 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v55;
              *(_QWORD *)(a1 + 40) = v48;
              *(_QWORD *)(a1 + 48) = &v54[4 * v53];
              if (v49)
                operator delete(v49);
            }
            else
            {
              *(_DWORD *)v47 = 0;
              v48 = v47 + 4;
            }
            *(_QWORD *)(a1 + 40) = v48;
            v57 = *((_QWORD *)this + 1);
            if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
              goto LABEL_128;
            *(v48 - 1) = *(_DWORD *)(*(_QWORD *)this + v57);
            v45 = *((_QWORD *)this + 2);
            v44 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v44;
          }
          goto LABEL_100;
        case 5u:
          if (v26 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v58 = *((_QWORD *)this + 1);
            v59 = *((_QWORD *)this + 2);
            while (v58 < v59 && !*((_BYTE *)this + 24))
            {
              v61 = *(char **)(a1 + 16);
              v60 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v61 >= v60)
              {
                v63 = (char *)*v9;
                v64 = (v61 - (_BYTE *)*v9) >> 2;
                v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 62)
                  goto LABEL_177;
                v66 = v60 - (_QWORD)v63;
                if (v66 >> 1 > v65)
                  v65 = v66 >> 1;
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
                  v67 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v67 = v65;
                if (v67)
                {
                  v68 = (char *)sub_18F26FB8C(v10, v67);
                  v63 = *(char **)(a1 + 8);
                  v61 = *(char **)(a1 + 16);
                }
                else
                {
                  v68 = 0;
                }
                v69 = &v68[4 * v64];
                *(_DWORD *)v69 = 0;
                v62 = v69 + 4;
                while (v61 != v63)
                {
                  v70 = *((_DWORD *)v61 - 1);
                  v61 -= 4;
                  *((_DWORD *)v69 - 1) = v70;
                  v69 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v69;
                *(_QWORD *)(a1 + 16) = v62;
                *(_QWORD *)(a1 + 24) = &v68[4 * v67];
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *(_DWORD *)v61 = 0;
                v62 = v61 + 4;
              }
              *(_QWORD *)(a1 + 16) = v62;
              v71 = *((_QWORD *)this + 1);
              if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
              {
LABEL_128:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v62 - 1) = *(_DWORD *)(*(_QWORD *)this + v71);
              v59 = *((_QWORD *)this + 2);
              v58 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v58;
            }
LABEL_100:
            PB::Reader::recallMark();
          }
          else
          {
            v96 = *(char **)(a1 + 16);
            v95 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v96 >= v95)
            {
              v103 = (char *)*v9;
              v104 = (v96 - (_BYTE *)*v9) >> 2;
              v105 = v104 + 1;
              if ((unint64_t)(v104 + 1) >> 62)
LABEL_177:
                sub_18F26F8C0();
              v106 = v95 - (_QWORD)v103;
              if (v106 >> 1 > v105)
                v105 = v106 >> 1;
              if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                v107 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v107 = v105;
              if (v107)
              {
                v108 = (char *)sub_18F26FB8C(v10, v107);
                v103 = *(char **)(a1 + 8);
                v96 = *(char **)(a1 + 16);
              }
              else
              {
                v108 = 0;
              }
              v111 = &v108[4 * v104];
              *(_DWORD *)v111 = 0;
              v94 = v111 + 4;
              while (v96 != v103)
              {
                v112 = *((_DWORD *)v96 - 1);
                v96 -= 4;
                *((_DWORD *)v111 - 1) = v112;
                v111 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v111;
              *(_QWORD *)(a1 + 16) = v94;
              *(_QWORD *)(a1 + 24) = &v108[4 * v107];
              if (v103)
                operator delete(v103);
            }
            else
            {
              *(_DWORD *)v96 = 0;
              v94 = v96 + 4;
            }
            *(_QWORD *)(a1 + 16) = v94;
LABEL_167:
            v113 = *((_QWORD *)this + 1);
            if (v113 <= 0xFFFFFFFFFFFFFFFBLL && v113 + 4 <= *((_QWORD *)this + 2))
            {
              *(v94 - 1) = *(_DWORD *)(*(_QWORD *)this + v113);
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_101:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          v72 = operator new();
          sub_18F292114(v72);
          v73 = *(_QWORD *)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v72;
          if (v73)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
            v72 = *(_QWORD *)(a1 + 64);
          }
          goto LABEL_98;
        case 7u:
          v72 = operator new();
          sub_18F292114(v72);
          v74 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = v72;
          if (v74)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
            v72 = *(_QWORD *)(a1 + 56);
          }
          goto LABEL_98;
        case 8u:
          *(_BYTE *)(a1 + 132) |= 8u;
          v75 = *((_QWORD *)this + 1);
          if (v75 >= *((_QWORD *)this + 2))
          {
            v78 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)this + v75);
            *((_QWORD *)this + 1) = v76;
            v78 = v77 != 0;
          }
          *(_BYTE *)(a1 + 129) = v78;
          goto LABEL_101;
        case 9u:
          *(_BYTE *)(a1 + 132) |= 4u;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 128) = v82;
          goto LABEL_101;
        case 0xAu:
          sub_18F23AB8C(v8);
          v43 = *(_QWORD *)(a1 + 104);
LABEL_97:
          v72 = *(_QWORD *)(v43 - 8);
LABEL_98:
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v72 + 16))(v72, this) & 1) != 0)
          {
            goto LABEL_100;
          }
          return 0;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_101;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v23 = v2 + 1;
      v24 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23AB8C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  sub_18F2923E8(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F23ACB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F23ACD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  const PB::Base *v14;
  const PB::Base *v15;
  char v16;
  const PB::Base **v17;
  const PB::Base **v18;
  const PB::Base *v19;

  v3 = result;
  v4 = *(_BYTE *)(result + 132);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 132);
  }
  if ((v4 & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base ***)(v3 + 72);
  v6 = *(const PB::Base ***)(v3 + 80);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeSubmessage(this, v7);
  }
  v8 = *(float **)(v3 + 32);
  v9 = *(float **)(v3 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(float **)(v3 + 8);
  v12 = *(float **)(v3 + 16);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(const PB::Base **)(v3 + 64);
  if (v14)
    result = PB::Writer::writeSubmessage(this, v14);
  v15 = *(const PB::Base **)(v3 + 56);
  if (v15)
    result = PB::Writer::writeSubmessage(this, v15);
  v16 = *(_BYTE *)(v3 + 132);
  if ((v16 & 8) != 0)
  {
    result = PB::Writer::write(this);
    v16 = *(_BYTE *)(v3 + 132);
  }
  if ((v16 & 4) != 0)
    result = PB::Writer::write(this);
  v18 = *(const PB::Base ***)(v3 + 96);
  v17 = *(const PB::Base ***)(v3 + 104);
  while (v18 != v17)
  {
    v19 = *v18++;
    result = PB::Writer::writeSubmessage(this, v19);
  }
  return result;
}

uint64_t sub_18F23AE04(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944550;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_18F23AE1C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23AE40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "deltaPositionX", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaPositionY", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "deltaPositionZ", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "deltaVelocityX", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "deltaVelocityY", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "deltaVelocityZ", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "isBIO");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quaternionW", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "quaternionX", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "quaternionY", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "quaternionZ", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "staticFlag");
    if ((*(_WORD *)(a1 + 68) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "referenceFrame");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 1) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23B030(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_91;
            case 2u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 3u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 4u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_56;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_90;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_90:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_91:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_56:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_102;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x800u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_95:
                    v2 = v37 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_95;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_96;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_102;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_100:
                    v2 = v41 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_100;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_101;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 60) = v31;
LABEL_102:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 68) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 64) = v34;
              goto LABEL_102;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_102;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F23B638(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 68) & 0x2000) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_18F23B7E4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944D68;
  *(_DWORD *)(a1 + 88) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_18F23B810(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2944D68;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F23B870(PB::Base *a1)
{
  sub_18F23B810(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23B894(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "historicalMeanSeaLevelPressure", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "historicalTimestamp", v10);
  }
  v11 = *(double **)(a1 + 56);
  v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "historicalUncertainty", v13);
  }
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    PB::TextFormatter::format(this, "refreshTime", *(double *)(a1 + 80));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F23B974(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 8);
    v101 = a1 + 24;
    v102 = a1 + 72;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            v69 = *(char **)(a1 + 40);
            v68 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v69 >= v68)
            {
              v75 = (char *)*v10;
              v76 = (v69 - (_BYTE *)*v10) >> 3;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 61)
LABEL_166:
                sub_18F26F8C0();
              v78 = v68 - (_QWORD)v75;
              if (v78 >> 2 > v77)
                v77 = v78 >> 2;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_18F26F8D4(v11, v79);
                v75 = *(char **)(a1 + 32);
                v69 = *(char **)(a1 + 40);
              }
              else
              {
                v80 = 0;
              }
              v93 = &v80[8 * v76];
              *(_QWORD *)v93 = 0;
              v70 = v93 + 8;
              while (v69 != v75)
              {
                v94 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v93 - 1) = v94;
                v93 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v93;
              *(_QWORD *)(a1 + 40) = v70;
              *(_QWORD *)(a1 + 48) = &v80[8 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v70 = v69 + 8;
            }
            *(_QWORD *)(a1 + 40) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          while (v25 < v26 && !*((_BYTE *)this + 24))
          {
            v28 = *(char **)(a1 + 40);
            v27 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v10;
              v31 = (v28 - (_BYTE *)*v10) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_166;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_18F26F8D4(v11, v34);
                v30 = *(char **)(a1 + 32);
                v28 = *(char **)(a1 + 40);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[8 * v31];
              *(_QWORD *)v36 = 0;
              v29 = v36 + 8;
              while (v28 != v30)
              {
                v37 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v36 - 1) = v37;
                v36 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v36;
              *(_QWORD *)(a1 + 40) = v29;
              *(_QWORD *)(a1 + 48) = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v28 = 0;
              v29 = v28 + 8;
            }
            *(_QWORD *)(a1 + 40) = v29;
            v38 = *((_QWORD *)this + 1);
            if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
            v26 = *((_QWORD *)this + 2);
            v25 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v25;
          }
          goto LABEL_107;
        case 2u:
          if (v24 != 2)
          {
            v72 = *(char **)(a1 + 16);
            v71 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              v81 = (char *)*v9;
              v82 = (v72 - (_BYTE *)*v9) >> 3;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 61)
LABEL_167:
                sub_18F26F8C0();
              v84 = v71 - (_QWORD)v81;
              if (v84 >> 2 > v83)
                v83 = v84 >> 2;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                v85 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (char *)sub_18F26F8D4(v101, v85);
                v81 = *(char **)(a1 + 8);
                v72 = *(char **)(a1 + 16);
              }
              else
              {
                v86 = 0;
              }
              v95 = &v86[8 * v82];
              *(_QWORD *)v95 = 0;
              v70 = v95 + 8;
              while (v72 != v81)
              {
                v96 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v95;
              *(_QWORD *)(a1 + 16) = v70;
              *(_QWORD *)(a1 + 24) = &v86[8 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_QWORD *)v72 = 0;
              v70 = v72 + 8;
            }
            *(_QWORD *)(a1 + 16) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v39 = *((_QWORD *)this + 1);
          v40 = *((_QWORD *)this + 2);
          while (v39 < v40 && !*((_BYTE *)this + 24))
          {
            v42 = *(char **)(a1 + 16);
            v41 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v9;
              v45 = (v42 - (_BYTE *)*v9) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                goto LABEL_167;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_18F26F8D4(v101, v48);
                v44 = *(char **)(a1 + 8);
                v42 = *(char **)(a1 + 16);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[8 * v45];
              *(_QWORD *)v50 = 0;
              v43 = v50 + 8;
              while (v42 != v44)
              {
                v51 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v50 - 1) = v51;
                v50 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v50;
              *(_QWORD *)(a1 + 16) = v43;
              *(_QWORD *)(a1 + 24) = &v49[8 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)v42 = 0;
              v43 = v42 + 8;
            }
            *(_QWORD *)(a1 + 16) = v43;
            v52 = *((_QWORD *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
            v40 = *((_QWORD *)this + 2);
            v39 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v39;
          }
          goto LABEL_107;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v53 = *((_QWORD *)this + 1);
            v54 = *((_QWORD *)this + 2);
            while (v53 < v54 && !*((_BYTE *)this + 24))
            {
              v56 = *(char **)(a1 + 64);
              v55 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v56 >= v55)
              {
                v58 = (char *)*v8;
                v59 = (v56 - (_BYTE *)*v8) >> 3;
                v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 61)
                  goto LABEL_168;
                v61 = v55 - (_QWORD)v58;
                if (v61 >> 2 > v60)
                  v60 = v61 >> 2;
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                  v62 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v62 = v60;
                if (v62)
                {
                  v63 = (char *)sub_18F26F8D4(v102, v62);
                  v58 = *(char **)(a1 + 56);
                  v56 = *(char **)(a1 + 64);
                }
                else
                {
                  v63 = 0;
                }
                v64 = &v63[8 * v59];
                *(_QWORD *)v64 = 0;
                v57 = v64 + 8;
                while (v56 != v58)
                {
                  v65 = *((_QWORD *)v56 - 1);
                  v56 -= 8;
                  *((_QWORD *)v64 - 1) = v65;
                  v64 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v64;
                *(_QWORD *)(a1 + 64) = v57;
                *(_QWORD *)(a1 + 72) = &v63[8 * v62];
                if (v58)
                  operator delete(v58);
              }
              else
              {
                *(_QWORD *)v56 = 0;
                v57 = v56 + 8;
              }
              *(_QWORD *)(a1 + 64) = v57;
              v66 = *((_QWORD *)this + 1);
              if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)this + 2))
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_QWORD *)(*(_QWORD *)this + v66);
              v54 = *((_QWORD *)this + 2);
              v53 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v53;
            }
LABEL_107:
            PB::Reader::recallMark();
          }
          else
          {
            v74 = *(char **)(a1 + 64);
            v73 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v74 >= v73)
            {
              v87 = (char *)*v8;
              v88 = (v74 - (_BYTE *)*v8) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
LABEL_168:
                sub_18F26F8C0();
              v90 = v73 - (_QWORD)v87;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)sub_18F26F8D4(v102, v91);
                v87 = *(char **)(a1 + 56);
                v74 = *(char **)(a1 + 64);
              }
              else
              {
                v92 = 0;
              }
              v97 = &v92[8 * v88];
              *(_QWORD *)v97 = 0;
              v70 = v97 + 8;
              while (v74 != v87)
              {
                v98 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v97 - 1) = v98;
                v97 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v97;
              *(_QWORD *)(a1 + 64) = v70;
              *(_QWORD *)(a1 + 72) = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(_QWORD *)v74 = 0;
              v70 = v74 + 8;
            }
            *(_QWORD *)(a1 + 64) = v70;
LABEL_153:
            v99 = *((_QWORD *)this + 1);
            if (v99 <= 0xFFFFFFFFFFFFFFF7 && v99 + 8 <= *((_QWORD *)this + 2))
            {
              *(v70 - 1) = *(_QWORD *)(*(_QWORD *)this + v99);
LABEL_157:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_155:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_158:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 88) |= 1u;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)this + 2))
            goto LABEL_155;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v67);
          goto LABEL_157;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_158;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23C0A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = result;
  v4 = *(double **)(result + 32);
  v5 = *(double **)(result + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 8);
  v8 = *(double **)(v3 + 16);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(double **)(v3 + 56);
  v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  if ((*(_BYTE *)(v3 + 88) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 80));
  return result;
}

_QWORD *sub_18F23C154(_QWORD *result)
{
  *result = &off_1E29508D0;
  result[1] = 0;
  return result;
}

void sub_18F23C164(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29508D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F23C1A4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E29508D0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23C1F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23C248(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F273E08(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23C410(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F23C42C(_QWORD *result)
{
  *result = &off_1E294F980;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F23C440(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E294F980;
  v4 = *(_QWORD *)(a1 + 24);
  v2 = (_QWORD *)(a1 + 24);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    sub_18F26F7EC(a1 + 16, v5);
  sub_18F26F834((void ***)(a1 + 8), 0);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_18F23C4A0(uint64_t a1)
{
  sub_18F23C440(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23C4C4(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (a1[1])
    PB::TextFormatter::format();
  if (a1[2])
    PB::TextFormatter::format();
  if (a1[3])
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23C53C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void ***v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  uint64_t result;
  void **v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (void ***)(a1 + 8);
    v8 = (uint64_t *)(a1 + 24);
    v9 = (uint64_t *)(a1 + 16);
    do
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 4)
      {
        v26 = operator new();
        *(_QWORD *)v26 = 0;
        *(_QWORD *)(v26 + 8) = 0;
        v31 = 0;
        sub_18F26F834(v7, (void **)v26);
        sub_18F26F834(&v31, 0);
        PB::Reader::read();
      }
      else
      {
        if ((_DWORD)v22 == 3)
        {
          v27 = (_QWORD *)operator new();
          v27[1] = 0;
          v27[2] = 0;
          *v27 = 0;
          v31 = 0;
          v28 = *v8;
          *v8 = (uint64_t)v27;
          if (v28)
          {
            sub_18F26F7EC((uint64_t)v8, v28);
            v29 = v31;
            v31 = 0;
            if (v29)
              sub_18F26F7EC((uint64_t)&v31, (uint64_t)v29);
          }
        }
        else
        {
          if ((_DWORD)v22 != 2)
          {
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            goto LABEL_35;
          }
          v23 = (_QWORD *)operator new();
          v23[1] = 0;
          v23[2] = 0;
          *v23 = 0;
          v31 = 0;
          v24 = *v9;
          *v9 = (uint64_t)v23;
          if (v24)
          {
            sub_18F26F7EC((uint64_t)v9, v24);
            v25 = v31;
            v31 = 0;
            if (v25)
              sub_18F26F7EC((uint64_t)&v31, (uint64_t)v25);
          }
        }
        PB::Reader::read();
      }
LABEL_35:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F23C798(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(_QWORD *)(result + 16))
    result = PB::Writer::write();
  if (*(_QWORD *)(v1 + 24))
    result = PB::Writer::write();
  if (*(_QWORD *)(v1 + 8))
    return PB::Writer::write();
  return result;
}

uint64_t sub_18F23C7FC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E5D0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F23C814(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23C838(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "threshold");
    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "level");
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(float *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23C8C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 12) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 8) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23CC48(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 16));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 20) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F23CCC0(_QWORD *result)
{
  *result = &off_1E294EB80;
  result[1] = 0;
  return result;
}

void sub_18F23CCD0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EB80;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F23CD10(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EB80;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23CD64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23CDB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        v21 = sub_18F28995C(v20);
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v22)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v22 + 8))(v22, v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23CF7C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F23CF98(_QWORD *result)
{
  *result = &off_1E2950C18;
  result[1] = 0;
  return result;
}

void sub_18F23CFA8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950C18;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F23CFE8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950C18;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23D03C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23D08C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F28A940(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23D254(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F23D270(uint64_t result)
{
  *(_QWORD *)result = &off_1E2955638;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F23D288(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23D2AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23D314(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23D63C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F23D694(uint64_t result)
{
  *(_QWORD *)result = &off_1E2955670;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_18F23D6AC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23D6D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "dataBufferSize");
    v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gestureLengthSeconds", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "isWristLooselyLevel");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "negPeakHeight", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "negPeakLeftHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "negPeakRightHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "negPeakTimestampUs");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "negPeakTotalAngleDegrees", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "pauseBtwPeaksSeconds", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "posPeakHeight", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "posPeakLeftHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "posPeakRightHalfWidth");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "posPeakTimestampUs");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "posPeakTotalAngleDegrees", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotZRangeDuringGestureRad", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "screenTiltAtEndDegrees", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "screenTiltAtStartDegrees", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
LABEL_41:
    PB::TextFormatter::format(this, "wristAngleDiffBtwPeaksDegrees", *(float *)(a1 + 88));
    if ((*(_DWORD *)(a1 + 100) & 0x40000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_21;
  }
LABEL_40:
  PB::TextFormatter::format(this, "timestampUs");
  v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) != 0)
    goto LABEL_41;
LABEL_20:
  if ((v5 & 0x40000) != 0)
LABEL_21:
    PB::TextFormatter::format(this, "wristAngleToHorizontalDegrees", *(float *)(a1 + 92));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23D980(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  BOOL v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 4u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_179;
                  }
                  v73 = v20++;
                  v74 = *(_BYTE *)(v21 + v73);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_178:
                v2 = v73 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_179;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_179:
              *(_QWORD *)(a1 + 24) = v24;
              goto LABEL_215;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_184;
                  }
                  v77 = v27++;
                  v78 = *(_BYTE *)(v28 + v77);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_183:
                    v2 = v77 + 1;
                    goto LABEL_184;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_183;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_184;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_184:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_215;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_189;
                  }
                  v81 = v33++;
                  v82 = *(_BYTE *)(v34 + v81);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_188:
                    v2 = v81 + 1;
                    goto LABEL_189;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_188;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_189;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_189:
              *(_QWORD *)(a1 + 16) = v37;
              goto LABEL_215;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 1u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_194;
                  }
                  v85 = v39++;
                  v86 = *(_BYTE *)(v40 + v85);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_193:
                    v2 = v85 + 1;
                    goto LABEL_194;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_193;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_194;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_194:
              *(_QWORD *)(a1 + 8) = v43;
              goto LABEL_215;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_199;
                  }
                  v89 = v45++;
                  v90 = *(_BYTE *)(v46 + v89);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_198:
                    v2 = v89 + 1;
                    goto LABEL_199;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_198;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_199;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_199:
              *(_DWORD *)(a1 + 68) = v49;
              goto LABEL_215;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_204;
                  }
                  v93 = v51++;
                  v94 = *(_BYTE *)(v52 + v93);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_203:
                    v2 = v93 + 1;
                    goto LABEL_204;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v55) = 0;
                goto LABEL_203;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_204;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_204:
              *(_DWORD *)(a1 + 64) = v55;
              goto LABEL_215;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              v57 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v58 = *(_QWORD *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v61 = 0;
                if (v2 <= v57)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_209;
                  }
                  v97 = v57++;
                  v98 = *(_BYTE *)(v58 + v97);
                  *((_QWORD *)this + 1) = v57;
                  v61 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_208:
                    v2 = v97 + 1;
                    goto LABEL_209;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v61) = 0;
                goto LABEL_208;
              }
              v59 = 0;
              v60 = 0;
              v61 = 0;
              do
              {
                v2 = v57 + 1;
                *((_QWORD *)this + 1) = v57 + 1;
                v62 = *(_BYTE *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0)
                  goto LABEL_209;
                v59 += 7;
                v57 = v2;
                v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_209:
              *(_DWORD *)(a1 + 48) = v61;
              goto LABEL_215;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_214;
                  }
                  v101 = v63++;
                  v102 = *(_BYTE *)(v64 + v101);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_213:
                    v2 = v101 + 1;
                    goto LABEL_214;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v67) = 0;
                goto LABEL_213;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_214;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_214:
              *(_DWORD *)(a1 + 44) = v67;
LABEL_215:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_112;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_174;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_174:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_112:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_215;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v70 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v69 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v70 = v69 != 0;
              }
              *(_BYTE *)(a1 + 96) = v70;
              goto LABEL_215;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_215;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F23E508(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 100);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x10) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  if ((*(_DWORD *)(v3 + 100) & 0x80000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F23E75C(uint64_t result)
{
  *(_QWORD *)result = &off_1E29556A8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F23E774(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23E798(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxSymmetryAllowanceFactor", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "minTwistAngleThresholdDeg", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "minPeakRotationRateThresholdRps", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestampUs");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23E848(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_53;
                  }
                  v29 = v20++;
                  v30 = *(_BYTE *)(v21 + v29);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_52;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_52:
                v2 = v29 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_53;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_53:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_54;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_48:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_54;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_54:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F23EB58(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_18F23EBEC(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950390;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_18F23EC04(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23EC28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "validX");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "validY");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "validZ");
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 52) & 0x80) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x80) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F23EDB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  int v22;
  BOOL v23;
  uint64_t result;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_62;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 3u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 4u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 5u:
          *(_WORD *)(a1 + 52) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 6u:
          *(_WORD *)(a1 + 52) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_43;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_50;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_43:
          v2 = *((_QWORD *)this + 1) + 4;
          goto LABEL_63;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v21 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v21 = v20 != 0;
          }
          *(_BYTE *)(a1 + 48) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v26 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v26 = v25 != 0;
          }
          *(_BYTE *)(a1 + 49) = v26;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 0x400u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v23 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v22 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v23 = v22 != 0;
          }
          *(_BYTE *)(a1 + 50) = v23;
          break;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
            v2 = *((_QWORD *)this + 1) + 8;
LABEL_63:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_50:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F23F1C8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 52);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 16));
  }
LABEL_22:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 52) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

double sub_18F23F320(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E29446A0;
  *(_DWORD *)(a1 + 140) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_18F23F350(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E29446A0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_18F23F3C0(PB::Base *a1)
{
  sub_18F23F350(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F23F3E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float *v14;
  float *v15;
  float v16;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 140) & 4) != 0)
    PB::TextFormatter::format(this, "armTimeActivityHints");
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "armTimeImuConfidences", v7);
  }
  v8 = *(_BYTE *)(a1 + 140);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionBtHintPercentage", *(float *)(a1 + 124));
    v8 = *(_BYTE *)(a1 + 140);
    if ((v8 & 0x10) == 0)
    {
LABEL_7:
      if ((v8 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(a1 + 140) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "sessionGpsHintPercentage", *(float *)(a1 + 128));
  if ((*(_BYTE *)(a1 + 140) & 0x20) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "sessionImuHintPercentage", *(float *)(a1 + 132));
LABEL_9:
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "sessionSwivelAngleDegHistogram");
  }
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(this, "sessionTiltAngleDegHistogram");
  }
  v13 = *(_BYTE *)(a1 + 140);
  if ((v13 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "sessionWifiHintPercentage", *(float *)(a1 + 136));
    v13 = *(_BYTE *)(a1 + 140);
    if ((v13 & 1) == 0)
    {
LABEL_15:
      if ((v13 & 2) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a1 + 140) & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "timestamp");
  if ((*(_BYTE *)(a1 + 140) & 2) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
LABEL_17:
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "windowAfterArmImuConfidences", v16);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F23F5B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  _DWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  BOOL v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  char *v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v115;
  unsigned int v116;
  uint64_t v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  unint64_t v133;
  char *v134;
  _DWORD *v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  unint64_t v140;
  char *v141;
  char v142;
  unsigned int v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  char *v147;
  _DWORD *v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  char *v177;
  int v178;
  unint64_t v179;
  char *v180;
  int v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  char v185;
  unsigned int v186;
  unint64_t v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  char v192;
  char *v193;
  int v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  char v198;
  unsigned int v199;
  unint64_t v201;
  char v202;
  unint64_t v203;
  char v204;
  void **v207;
  void **v208;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (_QWORD *)(a1 + 72);
    v207 = (void **)(a1 + 32);
    v208 = (void **)(a1 + 56);
    v9 = (_QWORD *)(a1 + 48);
    v10 = (void **)(a1 + 80);
    v11 = a1 + 96;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v91 = v16++ > 8;
        if (v91)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v17 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 140) |= 1u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_265;
              v29 += 7;
              v26 = v32;
              v91 = v30++ > 8;
            }
            while (!v91);
LABEL_202:
            v31 = 0;
            goto LABEL_265;
          }
          v129 = 0;
          v130 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v26 + 1;
              v132 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v131;
              v31 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v26 = v131;
                v91 = v130++ > 8;
                if (v91)
                  goto LABEL_202;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
            }
            break;
          }
LABEL_265:
          *(_QWORD *)(a1 + 104) = v31;
          goto LABEL_339;
        case 2u:
          if (v25 != 2)
          {
            v134 = *(char **)(a1 + 16);
            v133 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v134 >= v133)
            {
              v151 = (char *)*v12;
              v152 = (v134 - (_BYTE *)*v12) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62)
LABEL_349:
                sub_18F26F8C0();
              v154 = v133 - (_QWORD)v151;
              if (v154 >> 1 > v153)
                v153 = v154 >> 1;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                v155 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_18F26FB8C(v13, v155);
                v151 = *(char **)(a1 + 8);
                v134 = *(char **)(a1 + 16);
              }
              else
              {
                v156 = 0;
              }
              v175 = &v156[4 * v152];
              *(_DWORD *)v175 = 0;
              v135 = v175 + 4;
              while (v134 != v151)
              {
                v176 = *((_DWORD *)v134 - 1);
                v134 -= 4;
                *((_DWORD *)v175 - 1) = v176;
                v175 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v175;
              *(_QWORD *)(a1 + 16) = v135;
              *(_QWORD *)(a1 + 24) = &v156[4 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_DWORD *)v134 = 0;
              v135 = v134 + 4;
            }
            *(_QWORD *)(a1 + 16) = v135;
            goto LABEL_286;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          while (v34 < v35 && !*((_BYTE *)this + 24))
          {
            v37 = *(char **)(a1 + 16);
            v36 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v37 >= v36)
            {
              v39 = (char *)*v12;
              v40 = (v37 - (_BYTE *)*v12) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                goto LABEL_349;
              v42 = v36 - (_QWORD)v39;
              if (v42 >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_18F26FB8C(v13, v43);
                v39 = *(char **)(a1 + 8);
                v37 = *(char **)(a1 + 16);
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[4 * v40];
              *(_DWORD *)v45 = 0;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v45;
              *(_QWORD *)(a1 + 16) = v38;
              *(_QWORD *)(a1 + 24) = &v44[4 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_DWORD *)v37 = 0;
              v38 = v37 + 4;
            }
            *(_QWORD *)(a1 + 16) = v38;
            v47 = *((_QWORD *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
              goto LABEL_226;
            *(v38 - 1) = *(_DWORD *)(*(_QWORD *)this + v47);
            v35 = *((_QWORD *)this + 2);
            v34 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v34;
          }
          goto LABEL_227;
        case 3u:
          *(_BYTE *)(a1 + 140) |= 4u;
          v48 = *((_QWORD *)this + 1);
          v49 = *((_QWORD *)this + 2);
          v50 = *(_QWORD *)this;
          if (v48 <= 0xFFFFFFFFFFFFFFF5 && v48 + 10 <= v49)
          {
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v54 = v48 + 1;
              *((_QWORD *)this + 1) = v48 + 1;
              v55 = *(_BYTE *)(v50 + v48);
              v53 |= (unint64_t)(v55 & 0x7F) << v51;
              if ((v55 & 0x80) == 0)
                goto LABEL_268;
              v51 += 7;
              v48 = v54;
              v91 = v52++ > 8;
            }
            while (!v91);
LABEL_211:
            LODWORD(v53) = 0;
            goto LABEL_268;
          }
          v136 = 0;
          v137 = 0;
          v53 = 0;
          if (v49 <= v48)
            v49 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v49 == v48)
            {
              LODWORD(v53) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v138 = v48 + 1;
              v139 = *(_BYTE *)(v50 + v48);
              *((_QWORD *)this + 1) = v138;
              v53 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                v48 = v138;
                v91 = v137++ > 8;
                if (v91)
                  goto LABEL_211;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v53) = 0;
            }
            break;
          }
LABEL_268:
          *(_DWORD *)(a1 + 120) = v53;
          goto LABEL_339;
        case 4u:
          if (v25 != 2)
          {
            v141 = *(char **)(a1 + 88);
            v140 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v141 >= v140)
            {
              v157 = (char *)*v10;
              v158 = (v141 - (_BYTE *)*v10) >> 2;
              v159 = v158 + 1;
              if ((unint64_t)(v158 + 1) >> 62)
LABEL_350:
                sub_18F26F8C0();
              v160 = v140 - (_QWORD)v157;
              if (v160 >> 1 > v159)
                v159 = v160 >> 1;
              if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
                v161 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v161 = v159;
              if (v161)
              {
                v162 = (char *)sub_18F26FB8C(v11, v161);
                v157 = *(char **)(a1 + 80);
                v141 = *(char **)(a1 + 88);
              }
              else
              {
                v162 = 0;
              }
              v177 = &v162[4 * v158];
              *(_DWORD *)v177 = 0;
              v135 = v177 + 4;
              while (v141 != v157)
              {
                v178 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v177 - 1) = v178;
                v177 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v177;
              *(_QWORD *)(a1 + 88) = v135;
              *(_QWORD *)(a1 + 96) = &v162[4 * v161];
              if (v157)
                operator delete(v157);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v135 = v141 + 4;
            }
            *(_QWORD *)(a1 + 88) = v135;
LABEL_286:
            v179 = *((_QWORD *)this + 1);
            if (v179 <= 0xFFFFFFFFFFFFFFFBLL && v179 + 4 <= *((_QWORD *)this + 2))
            {
              *(v135 - 1) = *(_DWORD *)(*(_QWORD *)this + v179);
LABEL_290:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_288:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_339;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v56 = *((_QWORD *)this + 1);
          v57 = *((_QWORD *)this + 2);
          while (v56 < v57 && !*((_BYTE *)this + 24))
          {
            v59 = *(char **)(a1 + 88);
            v58 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v10;
              v62 = (v59 - (_BYTE *)*v10) >> 2;
              v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62)
                goto LABEL_350;
              v64 = v58 - (_QWORD)v61;
              if (v64 >> 1 > v63)
                v63 = v64 >> 1;
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
                v65 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v65 = v63;
              if (v65)
              {
                v66 = (char *)sub_18F26FB8C(v11, v65);
                v61 = *(char **)(a1 + 80);
                v59 = *(char **)(a1 + 88);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v67;
              *(_QWORD *)(a1 + 88) = v60;
              *(_QWORD *)(a1 + 96) = &v66[4 * v65];
              if (v61)
                operator delete(v61);
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *(_QWORD *)(a1 + 88) = v60;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
            {
LABEL_226:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_227;
            }
            *(v60 - 1) = *(_DWORD *)(*(_QWORD *)this + v69);
            v57 = *((_QWORD *)this + 2);
            v56 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v56;
          }
          goto LABEL_227;
        case 5u:
          *(_BYTE *)(a1 + 140) |= 2u;
          v70 = *((_QWORD *)this + 1);
          v71 = *((_QWORD *)this + 2);
          v72 = *(_QWORD *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            v73 = 0;
            v74 = 0;
            v75 = 0;
            do
            {
              v76 = v70 + 1;
              *((_QWORD *)this + 1) = v70 + 1;
              v77 = *(_BYTE *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0)
                goto LABEL_271;
              v73 += 7;
              v70 = v76;
              v91 = v74++ > 8;
            }
            while (!v91);
LABEL_220:
            v75 = 0;
            goto LABEL_271;
          }
          v142 = 0;
          v143 = 0;
          v75 = 0;
          if (v71 <= v70)
            v71 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v71 == v70)
            {
              v75 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v144 = v70 + 1;
              v145 = *(_BYTE *)(v72 + v70);
              *((_QWORD *)this + 1) = v144;
              v75 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                v70 = v144;
                v91 = v143++ > 8;
                if (v91)
                  goto LABEL_220;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v75 = 0;
            }
            break;
          }
LABEL_271:
          *(_QWORD *)(a1 + 112) = v75;
          goto LABEL_339;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v78 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v78 >= *v9)
                {
                  v79 = (char *)*v207;
                  v80 = (v78 - (_BYTE *)*v207) >> 2;
                  v81 = v80 + 1;
                  if ((unint64_t)(v80 + 1) >> 62)
                    goto LABEL_351;
                  v82 = *v9 - (_QWORD)v79;
                  if (v82 >> 1 > v81)
                    v81 = v82 >> 1;
                  if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
                    v83 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v83 = v81;
                  if (v83)
                  {
                    v84 = (char *)sub_18F26FB8C((uint64_t)v9, v83);
                    v79 = *(char **)(a1 + 32);
                    v78 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v84 = 0;
                  }
                  v85 = &v84[4 * v80];
                  *(_DWORD *)v85 = 0;
                  v86 = v85 + 4;
                  while (v78 != v79)
                  {
                    v87 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v85 - 1) = v87;
                    v85 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v85;
                  *(_QWORD *)(a1 + 40) = v86;
                  *(_QWORD *)(a1 + 48) = &v84[4 * v83];
                  if (v79)
                    operator delete(v79);
                  v78 = v86;
                }
                else
                {
                  *(_DWORD *)v78 = 0;
                  v78 += 4;
                }
                *(_QWORD *)(a1 + 40) = v78;
                v89 = *((_QWORD *)this + 1);
                v88 = *((_QWORD *)this + 2);
                v90 = *(_QWORD *)this;
                v91 = v89 > 0xFFFFFFFFFFFFFFF5 || v89 + 10 > v88;
                if (v91)
                {
                  v92 = 0;
                  v93 = 0;
                  v99 = 0;
                  if (v88 <= v89)
                    v94 = *((_QWORD *)this + 1);
                  else
                    v94 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v94 == v89)
                      goto LABEL_225;
                    v95 = v89++;
                    v96 = *(_BYTE *)(v90 + v95);
                    *((_QWORD *)this + 1) = v89;
                    v99 |= (unint64_t)(v96 & 0x7F) << v92;
                    if ((v96 & 0x80) == 0)
                      break;
                    v92 += 7;
                    v91 = v93++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v99) = 0;
LABEL_135:
                  v100 = v95 + 1;
                }
                else
                {
                  v97 = 0;
                  v98 = 0;
                  v99 = 0;
                  while (1)
                  {
                    v100 = v89 + 1;
                    *((_QWORD *)this + 1) = v89 + 1;
                    v101 = *(_BYTE *)(v90 + v89);
                    v99 |= (unint64_t)(v101 & 0x7F) << v97;
                    if ((v101 & 0x80) == 0)
                      break;
                    v97 += 7;
                    v89 = v100;
                    v91 = v98++ > 8;
                    if (v91)
                    {
                      LODWORD(v99) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v78 - 1) = v99;
              }
              while (v100 < v88 && !*((_BYTE *)this + 24));
            }
            goto LABEL_227;
          }
          v147 = *(char **)(a1 + 40);
          v146 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v147 >= v146)
          {
            v163 = (char *)*v207;
            v164 = (v147 - (_BYTE *)*v207) >> 2;
            v165 = v164 + 1;
            if ((unint64_t)(v164 + 1) >> 62)
LABEL_351:
              sub_18F26F8C0();
            v166 = v146 - (_QWORD)v163;
            if (v166 >> 1 > v165)
              v165 = v166 >> 1;
            if ((unint64_t)v166 >= 0x7FFFFFFFFFFFFFFCLL)
              v167 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v167 = v165;
            if (v167)
            {
              v168 = (char *)sub_18F26FB8C((uint64_t)v9, v167);
              v163 = *(char **)(a1 + 32);
              v147 = *(char **)(a1 + 40);
            }
            else
            {
              v168 = 0;
            }
            v180 = &v168[4 * v164];
            *(_DWORD *)v180 = 0;
            v148 = v180 + 4;
            while (v147 != v163)
            {
              v181 = *((_DWORD *)v147 - 1);
              v147 -= 4;
              *((_DWORD *)v180 - 1) = v181;
              v180 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v180;
            *(_QWORD *)(a1 + 40) = v148;
            *(_QWORD *)(a1 + 48) = &v168[4 * v167];
            if (v163)
              operator delete(v163);
          }
          else
          {
            *(_DWORD *)v147 = 0;
            v148 = v147 + 4;
          }
          *(_QWORD *)(a1 + 40) = v148;
          v182 = *((_QWORD *)this + 1);
          v183 = *((_QWORD *)this + 2);
          v184 = *(_QWORD *)this;
          v185 = 0;
          v186 = 0;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            v190 = 0;
            while (1)
            {
              v191 = v182 + 1;
              *((_QWORD *)this + 1) = v182 + 1;
              v192 = *(_BYTE *)(v184 + v182);
              v190 |= (unint64_t)(v192 & 0x7F) << v185;
              if ((v192 & 0x80) == 0)
                goto LABEL_338;
              v185 += 7;
              v182 = v191;
              v91 = v186++ > 8;
              if (v91)
                goto LABEL_334;
            }
          }
          v190 = 0;
          if (v183 <= v182)
            v183 = *((_QWORD *)this + 1);
          while (v183 != v182)
          {
            v188 = v182 + 1;
            v189 = *(_BYTE *)(v184 + v182);
            *((_QWORD *)this + 1) = v188;
            v190 |= (unint64_t)(v189 & 0x7F) << v185;
            if ((v189 & 0x80) == 0)
              goto LABEL_336;
            v185 += 7;
            v182 = v188;
            v91 = v186++ > 8;
            if (v91)
              goto LABEL_334;
          }
          goto LABEL_335;
        case 7u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v78 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v78 >= *v8)
                {
                  v102 = (char *)*v208;
                  v103 = (v78 - (_BYTE *)*v208) >> 2;
                  v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 62)
                    goto LABEL_352;
                  v105 = *v8 - (_QWORD)v102;
                  if (v105 >> 1 > v104)
                    v104 = v105 >> 1;
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                    v106 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v106 = v104;
                  if (v106)
                  {
                    v107 = (char *)sub_18F26FB8C((uint64_t)v8, v106);
                    v102 = *(char **)(a1 + 56);
                    v78 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v107 = 0;
                  }
                  v108 = &v107[4 * v103];
                  *(_DWORD *)v108 = 0;
                  v109 = v108 + 4;
                  while (v78 != v102)
                  {
                    v110 = *((_DWORD *)v78 - 1);
                    v78 -= 4;
                    *((_DWORD *)v108 - 1) = v110;
                    v108 -= 4;
                  }
                  *(_QWORD *)(a1 + 56) = v108;
                  *(_QWORD *)(a1 + 64) = v109;
                  *(_QWORD *)(a1 + 72) = &v107[4 * v106];
                  if (v102)
                    operator delete(v102);
                  v78 = v109;
                }
                else
                {
                  *(_DWORD *)v78 = 0;
                  v78 += 4;
                }
                *(_QWORD *)(a1 + 64) = v78;
                v112 = *((_QWORD *)this + 1);
                v111 = *((_QWORD *)this + 2);
                v113 = *(_QWORD *)this;
                if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v111)
                {
                  v120 = 0;
                  v121 = 0;
                  v122 = 0;
                  while (1)
                  {
                    v123 = v112 + 1;
                    *((_QWORD *)this + 1) = v112 + 1;
                    v124 = *(_BYTE *)(v113 + v112);
                    v122 |= (unint64_t)(v124 & 0x7F) << v120;
                    if ((v124 & 0x80) == 0)
                      goto LABEL_181;
                    v120 += 7;
                    v112 = v123;
                    v91 = v121++ > 8;
                    if (v91)
                    {
                      LODWORD(v122) = 0;
                      goto LABEL_181;
                    }
                  }
                }
                v115 = 0;
                v116 = 0;
                v122 = 0;
                if (v111 <= v112)
                  v117 = *((_QWORD *)this + 1);
                else
                  v117 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v117 == v112)
                  {
LABEL_225:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v78 - 1) = 0;
                    goto LABEL_227;
                  }
                  v118 = v112++;
                  v119 = *(_BYTE *)(v113 + v118);
                  *((_QWORD *)this + 1) = v112;
                  v122 |= (unint64_t)(v119 & 0x7F) << v115;
                  if ((v119 & 0x80) == 0)
                    break;
                  v115 += 7;
                  v91 = v116++ > 8;
                  if (v91)
                  {
                    LODWORD(v122) = 0;
                    goto LABEL_180;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v122) = 0;
LABEL_180:
                v123 = v118 + 1;
LABEL_181:
                *((_DWORD *)v78 - 1) = v122;
              }
              while (v123 < v111 && !*((_BYTE *)this + 24));
            }
LABEL_227:
            PB::Reader::recallMark();
          }
          else
          {
            v150 = *(char **)(a1 + 64);
            v149 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v150 >= v149)
            {
              v169 = (char *)*v208;
              v170 = (v150 - (_BYTE *)*v208) >> 2;
              v171 = v170 + 1;
              if ((unint64_t)(v170 + 1) >> 62)
LABEL_352:
                sub_18F26F8C0();
              v172 = v149 - (_QWORD)v169;
              if (v172 >> 1 > v171)
                v171 = v172 >> 1;
              if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                v173 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v173 = v171;
              if (v173)
              {
                v174 = (char *)sub_18F26FB8C((uint64_t)v8, v173);
                v169 = *(char **)(a1 + 56);
                v150 = *(char **)(a1 + 64);
              }
              else
              {
                v174 = 0;
              }
              v193 = &v174[4 * v170];
              *(_DWORD *)v193 = 0;
              v148 = v193 + 4;
              while (v150 != v169)
              {
                v194 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v193 - 1) = v194;
                v193 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v193;
              *(_QWORD *)(a1 + 64) = v148;
              *(_QWORD *)(a1 + 72) = &v174[4 * v173];
              if (v169)
                operator delete(v169);
            }
            else
            {
              *(_DWORD *)v150 = 0;
              v148 = v150 + 4;
            }
            *(_QWORD *)(a1 + 64) = v148;
            v195 = *((_QWORD *)this + 1);
            v196 = *((_QWORD *)this + 2);
            v197 = *(_QWORD *)this;
            v198 = 0;
            v199 = 0;
            if (v195 > 0xFFFFFFFFFFFFFFF5 || v195 + 10 > v196)
            {
              v190 = 0;
              if (v196 <= v195)
                v196 = *((_QWORD *)this + 1);
              while (v196 != v195)
              {
                v201 = v195 + 1;
                v202 = *(_BYTE *)(v197 + v195);
                *((_QWORD *)this + 1) = v201;
                v190 |= (unint64_t)(v202 & 0x7F) << v198;
                if ((v202 & 0x80) == 0)
                {
LABEL_336:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v190) = 0;
                  goto LABEL_338;
                }
                v198 += 7;
                v195 = v201;
                v91 = v199++ > 8;
                if (v91)
                {
LABEL_334:
                  LODWORD(v190) = 0;
                  goto LABEL_338;
                }
              }
LABEL_335:
              LODWORD(v190) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v190 = 0;
              while (1)
              {
                v203 = v195 + 1;
                *((_QWORD *)this + 1) = v195 + 1;
                v204 = *(_BYTE *)(v197 + v195);
                v190 |= (unint64_t)(v204 & 0x7F) << v198;
                if ((v204 & 0x80) == 0)
                  break;
                v198 += 7;
                v195 = v203;
                v91 = v199++ > 8;
                if (v91)
                  goto LABEL_334;
              }
            }
LABEL_338:
            *(v148 - 1) = v190;
          }
LABEL_339:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 8u:
          *(_BYTE *)(a1 + 140) |= 0x20u;
          v125 = *((_QWORD *)this + 1);
          if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v125);
          goto LABEL_290;
        case 9u:
          *(_BYTE *)(a1 + 140) |= 8u;
          v126 = *((_QWORD *)this + 1);
          if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v126);
          goto LABEL_290;
        case 0xAu:
          *(_BYTE *)(a1 + 140) |= 0x10u;
          v127 = *((_QWORD *)this + 1);
          if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v127);
          goto LABEL_290;
        case 0xBu:
          *(_BYTE *)(a1 + 140) |= 0x40u;
          v128 = *((_QWORD *)this + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
            goto LABEL_288;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v128);
          goto LABEL_290;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_339;
      }
    }
    v20 = 0;
    v21 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)this + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F240514(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v3 = result;
  if ((*(_BYTE *)(result + 140) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  if ((*(_BYTE *)(v3 + 140) & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  if ((*(_BYTE *)(v3 + 140) & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  v10 = *(_QWORD *)(v3 + 32);
  v11 = *(_QWORD *)(v3 + 40);
  while (v10 != v11)
  {
    v10 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v12 = *(_QWORD *)(v3 + 56);
  v13 = *(_QWORD *)(v3 + 64);
  while (v12 != v13)
  {
    v12 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v14 = *(_BYTE *)(v3 + 140);
  if ((v14 & 0x20) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 132));
    v14 = *(_BYTE *)(v3 + 140);
    if ((v14 & 8) == 0)
    {
LABEL_21:
      if ((v14 & 0x10) == 0)
        goto LABEL_22;
      goto LABEL_26;
    }
  }
  else if ((*(_BYTE *)(v3 + 140) & 8) == 0)
  {
    goto LABEL_21;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v14 = *(_BYTE *)(v3 + 140);
  if ((v14 & 0x10) == 0)
  {
LABEL_22:
    if ((v14 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 136));
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  if ((*(_BYTE *)(v3 + 140) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 136));
  return result;
}

double sub_18F24067C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E29446D8;
  *(_DWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F2406A0(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E29446D8;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F2406F0(PB::Base *a1)
{
  sub_18F2406A0(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F240714(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sessionGreenFieldPercentage", *(float *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 104);
  }
  if ((v5 & 0x10) != 0)
    PB::TextFormatter::format(this, "sessionHighRotationPercentage", *(float *)(a1 + 84));
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(this, "sessionMeanPoseAngleXHistogram");
  }
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp");
    v8 = *(_WORD *)(a1 + 104);
    if ((v8 & 0x20) == 0)
    {
LABEL_9:
      if ((v8 & 2) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "triggerTimeInternalDrivingState");
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_10:
    if ((v8 & 4) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "triggerTimeLastHighElevationGainTimestamp");
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_11:
    if ((v8 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "triggerTimeLastHighImuDrivingConfidenceTimestamp");
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "windowAfterArmGreenFieldPercentage", *(float *)(a1 + 92));
  v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_23:
  PB::TextFormatter::format(this, "windowAfterArmHighImuDrivingConfidencePercentage", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 104) & 0x100) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "windowAfterArmHighRotationPercentage", *(float *)(a1 + 100));
LABEL_15:
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "windowAfterArmMeanPoseAngleXHistogram");
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F2408C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  char *v113;
  _DWORD *v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char v146;
  unsigned int v147;
  unint64_t v149;
  char v150;
  uint64_t v151;
  unint64_t v152;
  char v153;
  char *v154;
  int v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  char v159;
  unsigned int v160;
  unint64_t v162;
  char v163;
  unint64_t v164;
  char v165;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (_QWORD *)(a1 + 24);
    v10 = (void **)(a1 + 32);
    v11 = (_QWORD *)(a1 + 48);
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v45 = v14++ > 8;
        if (v45)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v15 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 104) |= 1u;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_216;
              v27 += 7;
              v24 = v30;
              v45 = v28++ > 8;
            }
            while (!v45);
LABEL_164:
            v29 = 0;
            goto LABEL_216;
          }
          v108 = 0;
          v109 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              v29 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v110 = v24 + 1;
              v111 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v110;
              v29 |= (unint64_t)(v111 & 0x7F) << v108;
              if (v111 < 0)
              {
                v108 += 7;
                v24 = v110;
                v45 = v109++ > 8;
                if (v45)
                  goto LABEL_164;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v29 = 0;
            }
            break;
          }
LABEL_216:
          *(_QWORD *)(a1 + 56) = v29;
          goto LABEL_274;
        case 2u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v32 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v32 >= *v11)
                {
                  v33 = (char *)*v10;
                  v34 = (v32 - (_BYTE *)*v10) >> 2;
                  v35 = v34 + 1;
                  if ((unint64_t)(v34 + 1) >> 62)
                    goto LABEL_284;
                  v36 = *v11 - (_QWORD)v33;
                  if (v36 >> 1 > v35)
                    v35 = v36 >> 1;
                  if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                    v37 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v37 = v35;
                  if (v37)
                  {
                    v38 = (char *)sub_18F26FB8C((uint64_t)v11, v37);
                    v33 = *(char **)(a1 + 32);
                    v32 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v38 = 0;
                  }
                  v39 = &v38[4 * v34];
                  *(_DWORD *)v39 = 0;
                  v40 = v39 + 4;
                  while (v32 != v33)
                  {
                    v41 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v39 - 1) = v41;
                    v39 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v39;
                  *(_QWORD *)(a1 + 40) = v40;
                  *(_QWORD *)(a1 + 48) = &v38[4 * v37];
                  if (v33)
                    operator delete(v33);
                  v32 = v40;
                }
                else
                {
                  *(_DWORD *)v32 = 0;
                  v32 += 4;
                }
                *(_QWORD *)(a1 + 40) = v32;
                v43 = *((_QWORD *)this + 1);
                v42 = *((_QWORD *)this + 2);
                v44 = *(_QWORD *)this;
                v45 = v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v42;
                if (v45)
                {
                  v46 = 0;
                  v47 = 0;
                  v53 = 0;
                  if (v42 <= v43)
                    v48 = *((_QWORD *)this + 1);
                  else
                    v48 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v48 == v43)
                      goto LABEL_190;
                    v49 = v43++;
                    v50 = *(_BYTE *)(v44 + v49);
                    *((_QWORD *)this + 1) = v43;
                    v53 |= (unint64_t)(v50 & 0x7F) << v46;
                    if ((v50 & 0x80) == 0)
                      break;
                    v46 += 7;
                    v45 = v47++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      goto LABEL_71;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v53) = 0;
LABEL_71:
                  v54 = v49 + 1;
                }
                else
                {
                  v51 = 0;
                  v52 = 0;
                  v53 = 0;
                  while (1)
                  {
                    v54 = v43 + 1;
                    *((_QWORD *)this + 1) = v43 + 1;
                    v55 = *(_BYTE *)(v44 + v43);
                    v53 |= (unint64_t)(v55 & 0x7F) << v51;
                    if ((v55 & 0x80) == 0)
                      break;
                    v51 += 7;
                    v43 = v54;
                    v45 = v52++ > 8;
                    if (v45)
                    {
                      LODWORD(v53) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v32 - 1) = v53;
              }
              while (v54 < v42 && !*((_BYTE *)this + 24));
            }
            goto LABEL_191;
          }
          v113 = *(char **)(a1 + 40);
          v112 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v113 >= v112)
          {
            v129 = (char *)*v10;
            v130 = (v113 - (_BYTE *)*v10) >> 2;
            v131 = v130 + 1;
            if ((unint64_t)(v130 + 1) >> 62)
LABEL_284:
              sub_18F26F8C0();
            v132 = v112 - (_QWORD)v129;
            if (v132 >> 1 > v131)
              v131 = v132 >> 1;
            if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
              v133 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v133 = v131;
            if (v133)
            {
              v134 = (char *)sub_18F26FB8C((uint64_t)v11, v133);
              v129 = *(char **)(a1 + 32);
              v113 = *(char **)(a1 + 40);
            }
            else
            {
              v134 = 0;
            }
            v141 = &v134[4 * v130];
            *(_DWORD *)v141 = 0;
            v114 = v141 + 4;
            while (v113 != v129)
            {
              v142 = *((_DWORD *)v113 - 1);
              v113 -= 4;
              *((_DWORD *)v141 - 1) = v142;
              v141 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v141;
            *(_QWORD *)(a1 + 40) = v114;
            *(_QWORD *)(a1 + 48) = &v134[4 * v133];
            if (v129)
              operator delete(v129);
          }
          else
          {
            *(_DWORD *)v113 = 0;
            v114 = v113 + 4;
          }
          *(_QWORD *)(a1 + 40) = v114;
          v143 = *((_QWORD *)this + 1);
          v144 = *((_QWORD *)this + 2);
          v145 = *(_QWORD *)this;
          v146 = 0;
          v147 = 0;
          if (v143 <= 0xFFFFFFFFFFFFFFF5 && v143 + 10 <= v144)
          {
            v151 = 0;
            while (1)
            {
              v152 = v143 + 1;
              *((_QWORD *)this + 1) = v143 + 1;
              v153 = *(_BYTE *)(v145 + v143);
              v151 |= (unint64_t)(v153 & 0x7F) << v146;
              if ((v153 & 0x80) == 0)
                goto LABEL_273;
              v146 += 7;
              v143 = v152;
              v45 = v147++ > 8;
              if (v45)
                goto LABEL_269;
            }
          }
          v151 = 0;
          if (v144 <= v143)
            v144 = *((_QWORD *)this + 1);
          while (v144 != v143)
          {
            v149 = v143 + 1;
            v150 = *(_BYTE *)(v145 + v143);
            *((_QWORD *)this + 1) = v149;
            v151 |= (unint64_t)(v150 & 0x7F) << v146;
            if ((v150 & 0x80) == 0)
              goto LABEL_271;
            v146 += 7;
            v143 = v149;
            v45 = v147++ > 8;
            if (v45)
              goto LABEL_269;
          }
          goto LABEL_270;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_193;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          v57 = *((_QWORD *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v57);
          goto LABEL_193;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          v58 = *((_QWORD *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v58);
          goto LABEL_193;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x20u;
          v59 = *((_QWORD *)this + 1);
          v60 = *((_QWORD *)this + 2);
          v61 = *(_QWORD *)this;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            v62 = 0;
            v63 = 0;
            v64 = 0;
            do
            {
              v65 = v59 + 1;
              *((_QWORD *)this + 1) = v59 + 1;
              v66 = *(_BYTE *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0)
                goto LABEL_219;
              v62 += 7;
              v59 = v65;
              v45 = v63++ > 8;
            }
            while (!v45);
LABEL_173:
            LODWORD(v64) = 0;
            goto LABEL_219;
          }
          v115 = 0;
          v116 = 0;
          v64 = 0;
          if (v60 <= v59)
            v60 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v60 == v59)
            {
              LODWORD(v64) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v59 + 1;
              v118 = *(_BYTE *)(v61 + v59);
              *((_QWORD *)this + 1) = v117;
              v64 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v59 = v117;
                v45 = v116++ > 8;
                if (v45)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v64) = 0;
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 88) = v64;
          goto LABEL_274;
        case 7u:
          *(_WORD *)(a1 + 104) |= 2u;
          v67 = *((_QWORD *)this + 1);
          v68 = *((_QWORD *)this + 2);
          v69 = *(_QWORD *)this;
          if (v67 <= 0xFFFFFFFFFFFFFFF5 && v67 + 10 <= v68)
          {
            v70 = 0;
            v71 = 0;
            v72 = 0;
            do
            {
              v73 = v67 + 1;
              *((_QWORD *)this + 1) = v67 + 1;
              v74 = *(_BYTE *)(v69 + v67);
              v72 |= (unint64_t)(v74 & 0x7F) << v70;
              if ((v74 & 0x80) == 0)
                goto LABEL_222;
              v70 += 7;
              v67 = v73;
              v45 = v71++ > 8;
            }
            while (!v45);
LABEL_180:
            v72 = 0;
            goto LABEL_222;
          }
          v119 = 0;
          v120 = 0;
          v72 = 0;
          if (v68 <= v67)
            v68 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v68 == v67)
            {
              v72 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v121 = v67 + 1;
              v122 = *(_BYTE *)(v69 + v67);
              *((_QWORD *)this + 1) = v121;
              v72 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                v67 = v121;
                v45 = v120++ > 8;
                if (v45)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v72 = 0;
            }
            break;
          }
LABEL_222:
          *(_QWORD *)(a1 + 64) = v72;
          goto LABEL_274;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          v75 = *((_QWORD *)this + 1);
          v76 = *((_QWORD *)this + 2);
          v77 = *(_QWORD *)this;
          if (v75 <= 0xFFFFFFFFFFFFFFF5 && v75 + 10 <= v76)
          {
            v78 = 0;
            v79 = 0;
            v80 = 0;
            do
            {
              v81 = v75 + 1;
              *((_QWORD *)this + 1) = v75 + 1;
              v82 = *(_BYTE *)(v77 + v75);
              v80 |= (unint64_t)(v82 & 0x7F) << v78;
              if ((v82 & 0x80) == 0)
                goto LABEL_225;
              v78 += 7;
              v75 = v81;
              v45 = v79++ > 8;
            }
            while (!v45);
LABEL_187:
            v80 = 0;
            goto LABEL_225;
          }
          v123 = 0;
          v124 = 0;
          v80 = 0;
          if (v76 <= v75)
            v76 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v76 == v75)
            {
              v80 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v125 = v75 + 1;
              v126 = *(_BYTE *)(v77 + v75);
              *((_QWORD *)this + 1) = v125;
              v80 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                v75 = v125;
                v45 = v124++ > 8;
                if (v45)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v80 = 0;
            }
            break;
          }
LABEL_225:
          *(_QWORD *)(a1 + 72) = v80;
          goto LABEL_274;
        case 9u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v32 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v32 >= *v9)
                {
                  v84 = (char *)*v8;
                  v85 = (v32 - (_BYTE *)*v8) >> 2;
                  v86 = v85 + 1;
                  if ((unint64_t)(v85 + 1) >> 62)
                    goto LABEL_285;
                  v87 = *v9 - (_QWORD)v84;
                  if (v87 >> 1 > v86)
                    v86 = v87 >> 1;
                  if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
                    v88 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v88 = v86;
                  if (v88)
                  {
                    v89 = (char *)sub_18F26FB8C((uint64_t)v9, v88);
                    v84 = *(char **)(a1 + 8);
                    v32 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v89 = 0;
                  }
                  v90 = &v89[4 * v85];
                  *(_DWORD *)v90 = 0;
                  v91 = v90 + 4;
                  while (v32 != v84)
                  {
                    v92 = *((_DWORD *)v32 - 1);
                    v32 -= 4;
                    *((_DWORD *)v90 - 1) = v92;
                    v90 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v90;
                  *(_QWORD *)(a1 + 16) = v91;
                  *(_QWORD *)(a1 + 24) = &v89[4 * v88];
                  if (v84)
                    operator delete(v84);
                  v32 = v91;
                }
                else
                {
                  *(_DWORD *)v32 = 0;
                  v32 += 4;
                }
                *(_QWORD *)(a1 + 16) = v32;
                v94 = *((_QWORD *)this + 1);
                v93 = *((_QWORD *)this + 2);
                v95 = *(_QWORD *)this;
                if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v93)
                {
                  v102 = 0;
                  v103 = 0;
                  v104 = 0;
                  while (1)
                  {
                    v105 = v94 + 1;
                    *((_QWORD *)this + 1) = v94 + 1;
                    v106 = *(_BYTE *)(v95 + v94);
                    v104 |= (unint64_t)(v106 & 0x7F) << v102;
                    if ((v106 & 0x80) == 0)
                      goto LABEL_152;
                    v102 += 7;
                    v94 = v105;
                    v45 = v103++ > 8;
                    if (v45)
                    {
                      LODWORD(v104) = 0;
                      goto LABEL_152;
                    }
                  }
                }
                v97 = 0;
                v98 = 0;
                v104 = 0;
                if (v93 <= v94)
                  v99 = *((_QWORD *)this + 1);
                else
                  v99 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v99 == v94)
                  {
LABEL_190:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v32 - 1) = 0;
                    goto LABEL_191;
                  }
                  v100 = v94++;
                  v101 = *(_BYTE *)(v95 + v100);
                  *((_QWORD *)this + 1) = v94;
                  v104 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    break;
                  v97 += 7;
                  v45 = v98++ > 8;
                  if (v45)
                  {
                    LODWORD(v104) = 0;
                    goto LABEL_151;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v104) = 0;
LABEL_151:
                v105 = v100 + 1;
LABEL_152:
                *((_DWORD *)v32 - 1) = v104;
              }
              while (v105 < v93 && !*((_BYTE *)this + 24));
            }
LABEL_191:
            PB::Reader::recallMark();
          }
          else
          {
            v128 = *(char **)(a1 + 16);
            v127 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v128 >= v127)
            {
              v135 = (char *)*v8;
              v136 = (v128 - (_BYTE *)*v8) >> 2;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 62)
LABEL_285:
                sub_18F26F8C0();
              v138 = v127 - (_QWORD)v135;
              if (v138 >> 1 > v137)
                v137 = v138 >> 1;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFFCLL)
                v139 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                v140 = (char *)sub_18F26FB8C((uint64_t)v9, v139);
                v135 = *(char **)(a1 + 8);
                v128 = *(char **)(a1 + 16);
              }
              else
              {
                v140 = 0;
              }
              v154 = &v140[4 * v136];
              *(_DWORD *)v154 = 0;
              v114 = v154 + 4;
              while (v128 != v135)
              {
                v155 = *((_DWORD *)v128 - 1);
                v128 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v154;
              *(_QWORD *)(a1 + 16) = v114;
              *(_QWORD *)(a1 + 24) = &v140[4 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *(_DWORD *)v128 = 0;
              v114 = v128 + 4;
            }
            *(_QWORD *)(a1 + 16) = v114;
            v156 = *((_QWORD *)this + 1);
            v157 = *((_QWORD *)this + 2);
            v158 = *(_QWORD *)this;
            v159 = 0;
            v160 = 0;
            if (v156 > 0xFFFFFFFFFFFFFFF5 || v156 + 10 > v157)
            {
              v151 = 0;
              if (v157 <= v156)
                v157 = *((_QWORD *)this + 1);
              while (v157 != v156)
              {
                v162 = v156 + 1;
                v163 = *(_BYTE *)(v158 + v156);
                *((_QWORD *)this + 1) = v162;
                v151 |= (unint64_t)(v163 & 0x7F) << v159;
                if ((v163 & 0x80) == 0)
                {
LABEL_271:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v151) = 0;
                  goto LABEL_273;
                }
                v159 += 7;
                v156 = v162;
                v45 = v160++ > 8;
                if (v45)
                {
LABEL_269:
                  LODWORD(v151) = 0;
                  goto LABEL_273;
                }
              }
LABEL_270:
              LODWORD(v151) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v151 = 0;
              while (1)
              {
                v164 = v156 + 1;
                *((_QWORD *)this + 1) = v156 + 1;
                v165 = *(_BYTE *)(v158 + v156);
                v151 |= (unint64_t)(v165 & 0x7F) << v159;
                if ((v165 & 0x80) == 0)
                  break;
                v159 += 7;
                v156 = v164;
                v45 = v160++ > 8;
                if (v45)
                  goto LABEL_269;
              }
            }
LABEL_273:
            *(v114 - 1) = v151;
          }
LABEL_274:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x10u;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_157;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_193;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 8u;
          v107 = *((_QWORD *)this + 1);
          if (v107 <= 0xFFFFFFFFFFFFFFFBLL && v107 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v107);
LABEL_193:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_157:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_274;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_274;
      }
    }
    v18 = 0;
    v19 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v20;
      v15 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F24155C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;

  v3 = result;
  if ((*(_WORD *)(result + 104) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD *)(v3 + 40);
  while (v4 != v5)
  {
    v4 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x100) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 100));
    v6 = *(_WORD *)(v3 + 104);
    if ((v6 & 0x40) == 0)
    {
LABEL_8:
      if ((v6 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_22;
    }
  }
  else if ((v6 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 0x20) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_11;
LABEL_24:
    result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 104) & 4) == 0)
      goto LABEL_13;
    goto LABEL_12;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v6 = *(_WORD *)(v3 + 104);
  if ((v6 & 2) != 0)
    goto LABEL_24;
LABEL_11:
  if ((v6 & 4) != 0)
LABEL_12:
    result = PB::Writer::writeVarInt(this);
LABEL_13:
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v3 + 16);
  while (v7 != v8)
  {
    v7 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v9 = *(_WORD *)(v3 + 104);
  if ((v9 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 84));
    v9 = *(_WORD *)(v3 + 104);
  }
  if ((v9 & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 80));
  return result;
}

uint64_t sub_18F2416C0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E608;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_18F2416D8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2416FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "diffPeakTimestampTrigger");
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "pass");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pressureODR");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_WORD *)(a1 + 68) & 0x200) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 0x200) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 60));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F24188C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 64) = v21;
              goto LABEL_156;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v61 = v23++;
                  v62 = *(_BYTE *)(v24 + v61);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_129:
                    v2 = v61 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_129;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_130;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_130:
              *(_DWORD *)(a1 + 52) = v27;
              goto LABEL_156;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_72;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_72;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_125;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_72;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 4u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    v33 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v65 = v29++;
                  v66 = *(_BYTE *)(v30 + v65);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v33 = 0;
LABEL_134:
                    v2 = v65 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v33 = 0;
                goto LABEL_134;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_135;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              v33 = 0;
LABEL_135:
              *(_QWORD *)(a1 + 24) = v33;
              goto LABEL_156;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  v69 = v35++;
                  v70 = *(_BYTE *)(v36 + v69);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_139:
                    v2 = v69 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_139;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_140;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 40) = v39;
              goto LABEL_156;
            case 8u:
              *(_WORD *)(a1 + 68) |= 1u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_144:
                    v2 = v73 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_144;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_145;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_145:
              *(_QWORD *)(a1 + 8) = v45;
              goto LABEL_156;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  v77 = v47++;
                  v78 = *(_BYTE *)(v48 + v77);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_149:
                    v2 = v77 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
                goto LABEL_149;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_150;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_150:
              *(_QWORD *)(a1 + 16) = v51;
              goto LABEL_156;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_125:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_72:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_156;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 8u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_154:
                    v2 = v81 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_154;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_155;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_155:
              *(_QWORD *)(a1 + 32) = v57;
LABEL_156:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_156;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2420B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x400) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_WORD *)(v3 + 68) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F24220C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E020;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_18F242224(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F242248(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configDelaySpreadFpThreshold", *(float *)(a1 + 8));
    v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configFeatureSamples");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "configNonPlanarDelaySpreadThreshold", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "configNonPlanarPaprThreshold", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "configPeakEnergyFpThreshold", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "configPlanarDelaySpreadThreshold", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "configPlanarPaprThreshold", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configPostTriggerLimitTime");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configPreTriggerLimitTime");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configRawRmsMaxFpThreshold", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configRawRmsMeanFpThreshold", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "configRmsClipMinAmp", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x800000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "delaySpread", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isAudioTPQ");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "isFpThresholdsMet");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isNonPlanarTp");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isPlanarTp");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isTauBarWithinRange");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "papr", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "peakEnergy", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "rawRmsMax", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "rawRmsMean", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "rawRmsSum", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "rmsClipSum", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "sampleCount");
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0)
      goto LABEL_28;
LABEL_57:
    PB::TextFormatter::format(this, "tTimesRmsClipSum", *(float *)(a1 + 92));
    if ((*(_DWORD *)(a1 + 108) & 0x400000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_29;
  }
LABEL_56:
  PB::TextFormatter::format(this, "t2TimesRmsClipSum", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) != 0)
    goto LABEL_57;
LABEL_28:
  if ((v5 & 0x400000) != 0)
LABEL_29:
    PB::TextFormatter::format(this, "tauBar", *(float *)(a1 + 96));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2425F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 108) |= 0x800000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v21 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v21 = v20 != 0;
              }
              *(_BYTE *)(a1 + 100) = v21;
              goto LABEL_159;
            case 2u:
              *(_DWORD *)(a1 + 108) |= 0x80000u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  v57 = v23++;
                  v58 = *(_BYTE *)(v24 + v57);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_167:
                    v2 = v57 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_167;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_168;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_168:
              *(_DWORD *)(a1 + 84) = v27;
              goto LABEL_159;
            case 3u:
              *(_DWORD *)(a1 + 108) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 4u:
              *(_DWORD *)(a1 + 108) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 5u:
              *(_DWORD *)(a1 + 108) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 6u:
              *(_DWORD *)(a1 + 108) |= 0x200000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 7u:
              *(_DWORD *)(a1 + 108) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 8u:
              *(_DWORD *)(a1 + 108) |= 0x400000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 9u:
              *(_DWORD *)(a1 + 108) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xAu:
              *(_DWORD *)(a1 + 108) |= 0x100000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xBu:
              *(_DWORD *)(a1 + 108) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xCu:
              *(_DWORD *)(a1 + 108) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0xDu:
              *(_DWORD *)(a1 + 108) |= 0x4000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 103) = v30;
              goto LABEL_159;
            case 0xEu:
              *(_DWORD *)(a1 + 108) |= 0x2000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 102) = v32;
              goto LABEL_159;
            case 0xFu:
              *(_DWORD *)(a1 + 108) |= 0x1000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 101) = v34;
              goto LABEL_159;
            case 0x10u:
              *(_DWORD *)(a1 + 108) |= 0x8000000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v36 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v36 = v35 != 0;
              }
              *(_BYTE *)(a1 + 104) = v36;
              goto LABEL_159;
            case 0x11u:
              *(_DWORD *)(a1 + 108) |= 2u;
              v37 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v38 = *(_QWORD *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v41 = 0;
                if (v2 <= v37)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_173;
                  }
                  v61 = v37++;
                  v62 = *(_BYTE *)(v38 + v61);
                  *((_QWORD *)this + 1) = v37;
                  v41 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_172:
                    v2 = v61 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v41) = 0;
                goto LABEL_172;
              }
              v39 = 0;
              v40 = 0;
              v41 = 0;
              do
              {
                v2 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v42 = *(_BYTE *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0)
                  goto LABEL_173;
                v39 += 7;
                v37 = v2;
                v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_173:
              *(_DWORD *)(a1 + 12) = v41;
              goto LABEL_159;
            case 0x12u:
              *(_DWORD *)(a1 + 108) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x13u:
              *(_DWORD *)(a1 + 108) |= 0x100u;
              v43 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v44 = *(_QWORD *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v47 = 0;
                if (v2 <= v43)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  v65 = v43++;
                  v66 = *(_BYTE *)(v44 + v65);
                  *((_QWORD *)this + 1) = v43;
                  v47 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_177:
                    v2 = v65 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v47) = 0;
                goto LABEL_177;
              }
              v45 = 0;
              v46 = 0;
              v47 = 0;
              do
              {
                v2 = v43 + 1;
                *((_QWORD *)this + 1) = v43 + 1;
                v48 = *(_BYTE *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0)
                  goto LABEL_178;
                v45 += 7;
                v43 = v2;
                v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_178:
              *(_DWORD *)(a1 + 40) = v47;
              goto LABEL_159;
            case 0x14u:
              *(_DWORD *)(a1 + 108) |= 0x80u;
              v49 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v50 = *(_QWORD *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v53 = 0;
                if (v2 <= v49)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  v69 = v49++;
                  v70 = *(_BYTE *)(v50 + v69);
                  *((_QWORD *)this + 1) = v49;
                  v53 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_182:
                    v2 = v69 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v53) = 0;
                goto LABEL_182;
              }
              v51 = 0;
              v52 = 0;
              v53 = 0;
              do
              {
                v2 = v49 + 1;
                *((_QWORD *)this + 1) = v49 + 1;
                v54 = *(_BYTE *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0)
                  goto LABEL_183;
                v51 += 7;
                v49 = v2;
                v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 36) = v53;
LABEL_159:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x15u:
              *(_DWORD *)(a1 + 108) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x16u:
              *(_DWORD *)(a1 + 108) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x17u:
              *(_DWORD *)(a1 + 108) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x18u:
              *(_DWORD *)(a1 + 108) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x19u:
              *(_DWORD *)(a1 + 108) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x1Au:
              *(_DWORD *)(a1 + 108) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x1Bu:
              *(_DWORD *)(a1 + 108) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_118;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_158;
            case 0x1Cu:
              *(_DWORD *)(a1 + 108) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_158:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_118:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_159;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_159;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2430C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 108);
  if ((v4 & 0x800000) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000) == 0)
        goto LABEL_4;
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0)
      goto LABEL_5;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0)
      goto LABEL_7;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400000) == 0)
      goto LABEL_9;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0)
      goto LABEL_11;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_14;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_17;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 2) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 2) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0)
      goto LABEL_19;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0)
      goto LABEL_20;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x20) == 0)
      goto LABEL_23;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0)
      goto LABEL_24;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 4) == 0)
      goto LABEL_25;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 8));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 44));
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  if ((*(_DWORD *)(v3 + 108) & 0x200) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 44));
  return result;
}

uint64_t sub_18F2433F8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DCD8;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_18F243410(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F243434(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000000) != 0)
  {
    PB::TextFormatter::format(this, "airbagDetected");
    v5 = *(_DWORD *)(a1 + 152);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configMaximumAccelBaroTimeDifferenceThreshold", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "configMinimumAccelNormInWindowThreshold", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "configMinimumAccelNormOverEpochThreshold", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "configMinimumAccelNormThreshold", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configMinimumWidthThreshold", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configPeakPressureThreshold", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configRiseTimeThreshold", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configWidthThreshold", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "diffPeakTimeTrigger");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "diffTimeTrigger");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0)
      goto LABEL_15;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "eventStartTime");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "maxAccelNormInWindow", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 8) == 0)
      goto LABEL_18;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "maxAccelNormOverEpoch", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 8) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0)
      goto LABEL_19;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "maxAccelNormOverEpochTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0)
      goto LABEL_20;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "numAirbags");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0)
      goto LABEL_21;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "numBarosInEpoch");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0)
      goto LABEL_22;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "odr");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10) == 0)
      goto LABEL_23;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x10) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0)
      goto LABEL_24;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "peakTimestamp");
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0)
      goto LABEL_25;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "postEventPressureMedian", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "preEventPressureMedian", *(float *)(a1 + 124));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "prePostEventPressureMedian", *(float *)(a1 + 128));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "pressureMedian", *(float *)(a1 + 132));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "riseTime", *(float *)(a1 + 136));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20) == 0)
      goto LABEL_30;
LABEL_61:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_DWORD *)(a1 + 152) & 0x10000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(this, "riseTimeTo80", *(float *)(a1 + 140));
  v5 = *(_DWORD *)(a1 + 152);
  if ((v5 & 0x20) != 0)
    goto LABEL_61;
LABEL_30:
  if ((v5 & 0x10000000) != 0)
LABEL_31:
    PB::TextFormatter::format(this, "width", *(float *)(a1 + 144));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F243824(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  unint64_t v141;
  char v142;
  char v143;
  unsigned int v144;
  unint64_t v145;
  char v146;
  char v147;
  unsigned int v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  unint64_t v153;
  char v154;
  char v155;
  unsigned int v156;
  unint64_t v157;
  char v158;
  char v159;
  unsigned int v160;
  unint64_t v161;
  char v162;
  char v163;
  unsigned int v164;
  unint64_t v165;
  char v166;
  char v167;
  unsigned int v168;
  unint64_t v169;
  char v170;
  char v171;
  unsigned int v172;
  unint64_t v173;
  char v174;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 152) |= 0x20000000u;
          v20 = *((_QWORD *)this + 1);
          if (v20 >= *((_QWORD *)this + 2))
          {
            v23 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = v20 + 1;
            v22 = *(unsigned __int8 *)(*(_QWORD *)this + v20);
            *((_QWORD *)this + 1) = v21;
            v23 = v22 != 0;
          }
          *(_BYTE *)(a1 + 148) = v23;
          goto LABEL_238;
        case 2u:
          *(_DWORD *)(a1 + 152) |= 0x200000u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v25);
          goto LABEL_237;
        case 3u:
          *(_DWORD *)(a1 + 152) |= 4u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_246;
              v29 += 7;
              v26 = v32;
              v14 = v30++ > 8;
            }
            while (!v14);
LABEL_165:
            v31 = 0;
            goto LABEL_246;
          }
          v131 = 0;
          v132 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v133 = v26 + 1;
              v134 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v133;
              v31 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v26 = v133;
                v14 = v132++ > 8;
                if (v14)
                  goto LABEL_165;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
            }
            break;
          }
LABEL_246:
          *(_QWORD *)(a1 + 24) = v31;
          goto LABEL_238;
        case 4u:
          *(_DWORD *)(a1 + 152) |= 0x10000000u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_237;
        case 5u:
          *(_DWORD *)(a1 + 152) |= 0x4000000u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_237;
        case 6u:
          *(_DWORD *)(a1 + 152) |= 0x100000u;
          v36 = *((_QWORD *)this + 1);
          v37 = *((_QWORD *)this + 2);
          v38 = *(_QWORD *)this;
          if (v36 <= 0xFFFFFFFFFFFFFFF5 && v36 + 10 <= v37)
          {
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v42 = v36 + 1;
              *((_QWORD *)this + 1) = v36 + 1;
              v43 = *(_BYTE *)(v38 + v36);
              v41 |= (unint64_t)(v43 & 0x7F) << v39;
              if ((v43 & 0x80) == 0)
                goto LABEL_250;
              v39 += 7;
              v36 = v42;
              v14 = v40++ > 8;
            }
            while (!v14);
LABEL_172:
            LODWORD(v41) = 0;
            goto LABEL_250;
          }
          v135 = 0;
          v136 = 0;
          v41 = 0;
          if (v37 <= v36)
            v37 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v37 == v36)
            {
              LODWORD(v41) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v137 = v36 + 1;
              v138 = *(_BYTE *)(v38 + v36);
              *((_QWORD *)this + 1) = v137;
              v41 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                v36 = v137;
                v14 = v136++ > 8;
                if (v14)
                  goto LABEL_172;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v41) = 0;
            }
            break;
          }
LABEL_250:
          *(_DWORD *)(a1 + 112) = v41;
          goto LABEL_238;
        case 7u:
          *(_DWORD *)(a1 + 152) |= 0x40000u;
          v44 = *((_QWORD *)this + 1);
          v45 = *((_QWORD *)this + 2);
          v46 = *(_QWORD *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v50 = v44 + 1;
              *((_QWORD *)this + 1) = v44 + 1;
              v51 = *(_BYTE *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0)
                goto LABEL_254;
              v47 += 7;
              v44 = v50;
              v14 = v48++ > 8;
            }
            while (!v14);
LABEL_179:
            LODWORD(v49) = 0;
            goto LABEL_254;
          }
          v139 = 0;
          v140 = 0;
          v49 = 0;
          if (v45 <= v44)
            v45 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v141 = v44 + 1;
              v142 = *(_BYTE *)(v46 + v44);
              *((_QWORD *)this + 1) = v141;
              v49 |= (unint64_t)(v142 & 0x7F) << v139;
              if (v142 < 0)
              {
                v139 += 7;
                v44 = v141;
                v14 = v140++ > 8;
                if (v14)
                  goto LABEL_179;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v49) = 0;
            }
            break;
          }
LABEL_254:
          *(_DWORD *)(a1 + 104) = v49;
          goto LABEL_238;
        case 8u:
          *(_DWORD *)(a1 + 152) |= 0x10u;
          v52 = *((_QWORD *)this + 1);
          v53 = *((_QWORD *)this + 2);
          v54 = *(_QWORD *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            v55 = 0;
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v52 + 1;
              *((_QWORD *)this + 1) = v52 + 1;
              v59 = *(_BYTE *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0)
                goto LABEL_258;
              v55 += 7;
              v52 = v58;
              v14 = v56++ > 8;
            }
            while (!v14);
LABEL_186:
            v57 = 0;
            goto LABEL_258;
          }
          v143 = 0;
          v144 = 0;
          v57 = 0;
          if (v53 <= v52)
            v53 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v53 == v52)
            {
              v57 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v145 = v52 + 1;
              v146 = *(_BYTE *)(v54 + v52);
              *((_QWORD *)this + 1) = v145;
              v57 |= (unint64_t)(v146 & 0x7F) << v143;
              if (v146 < 0)
              {
                v143 += 7;
                v52 = v145;
                v14 = v144++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v57 = 0;
            }
            break;
          }
LABEL_258:
          *(_QWORD *)(a1 + 40) = v57;
          goto LABEL_238;
        case 9u:
          *(_DWORD *)(a1 + 152) |= 0x8000000u;
          v60 = *((_QWORD *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v60);
          goto LABEL_237;
        case 0xAu:
          *(_DWORD *)(a1 + 152) |= 0x8000u;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_262;
              v64 += 7;
              v61 = v67;
              v14 = v65++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v66) = 0;
            goto LABEL_262;
          }
          v147 = 0;
          v148 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v149 = v61 + 1;
              v150 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v149;
              v66 |= (unint64_t)(v150 & 0x7F) << v147;
              if (v150 < 0)
              {
                v147 += 7;
                v61 = v149;
                v14 = v148++ > 8;
                if (v14)
                  goto LABEL_193;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v66) = 0;
            }
            break;
          }
LABEL_262:
          *(_DWORD *)(a1 + 92) = v66;
          goto LABEL_238;
        case 0xBu:
          *(_DWORD *)(a1 + 152) |= 0x4000u;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_266;
              v72 += 7;
              v69 = v75;
              v14 = v73++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v74) = 0;
            goto LABEL_266;
          }
          v151 = 0;
          v152 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v153 = v69 + 1;
              v154 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v153;
              v74 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                v69 = v153;
                v14 = v152++ > 8;
                if (v14)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v74) = 0;
            }
            break;
          }
LABEL_266:
          *(_DWORD *)(a1 + 88) = v74;
          goto LABEL_238;
        case 0xCu:
          *(_DWORD *)(a1 + 152) |= 0x800000u;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v77);
          goto LABEL_237;
        case 0xDu:
          *(_DWORD *)(a1 + 152) |= 0x400000u;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v78);
          goto LABEL_237;
        case 0xEu:
          *(_DWORD *)(a1 + 152) |= 0x1000000u;
          v79 = *((_QWORD *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v79);
          goto LABEL_237;
        case 0xFu:
          *(_DWORD *)(a1 + 152) |= 0x2000u;
          v80 = *((_QWORD *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v80);
          goto LABEL_237;
        case 0x10u:
          *(_DWORD *)(a1 + 152) |= 0x1000u;
          v81 = *((_QWORD *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v81);
          goto LABEL_237;
        case 0x11u:
          *(_DWORD *)(a1 + 152) |= 0x800u;
          v82 = *((_QWORD *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v82);
          goto LABEL_237;
        case 0x12u:
          *(_DWORD *)(a1 + 152) |= 0x400u;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v83);
          goto LABEL_237;
        case 0x13u:
          *(_DWORD *)(a1 + 152) |= 0x200u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_237;
        case 0x14u:
          *(_DWORD *)(a1 + 152) |= 1u;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          v87 = *(_QWORD *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            v88 = 0;
            v89 = 0;
            v90 = 0;
            do
            {
              v91 = v85 + 1;
              *((_QWORD *)this + 1) = v85 + 1;
              v92 = *(_BYTE *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0)
                goto LABEL_270;
              v88 += 7;
              v85 = v91;
              v14 = v89++ > 8;
            }
            while (!v14);
LABEL_207:
            v90 = 0;
            goto LABEL_270;
          }
          v155 = 0;
          v156 = 0;
          v90 = 0;
          if (v86 <= v85)
            v86 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v86 == v85)
            {
              v90 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v157 = v85 + 1;
              v158 = *(_BYTE *)(v87 + v85);
              *((_QWORD *)this + 1) = v157;
              v90 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                v85 = v157;
                v14 = v156++ > 8;
                if (v14)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v90 = 0;
            }
            break;
          }
LABEL_270:
          *(_QWORD *)(a1 + 8) = v90;
          goto LABEL_238;
        case 0x15u:
          *(_DWORD *)(a1 + 152) |= 2u;
          v93 = *((_QWORD *)this + 1);
          v94 = *((_QWORD *)this + 2);
          v95 = *(_QWORD *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            v96 = 0;
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = v93 + 1;
              *((_QWORD *)this + 1) = v93 + 1;
              v100 = *(_BYTE *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0)
                goto LABEL_274;
              v96 += 7;
              v93 = v99;
              v14 = v97++ > 8;
            }
            while (!v14);
LABEL_214:
            v98 = 0;
            goto LABEL_274;
          }
          v159 = 0;
          v160 = 0;
          v98 = 0;
          if (v94 <= v93)
            v94 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v94 == v93)
            {
              v98 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v161 = v93 + 1;
              v162 = *(_BYTE *)(v95 + v93);
              *((_QWORD *)this + 1) = v161;
              v98 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                v93 = v161;
                v14 = v160++ > 8;
                if (v14)
                  goto LABEL_214;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v98 = 0;
            }
            break;
          }
LABEL_274:
          *(_QWORD *)(a1 + 16) = v98;
          goto LABEL_238;
        case 0x16u:
          *(_DWORD *)(a1 + 152) |= 0x10000u;
          v101 = *((_QWORD *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v101);
          goto LABEL_237;
        case 0x17u:
          *(_DWORD *)(a1 + 152) |= 0x20u;
          v102 = *((_QWORD *)this + 1);
          v103 = *((_QWORD *)this + 2);
          v104 = *(_QWORD *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            v105 = 0;
            v106 = 0;
            v107 = 0;
            do
            {
              v108 = v102 + 1;
              *((_QWORD *)this + 1) = v102 + 1;
              v109 = *(_BYTE *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0)
                goto LABEL_278;
              v105 += 7;
              v102 = v108;
              v14 = v106++ > 8;
            }
            while (!v14);
LABEL_221:
            v107 = 0;
            goto LABEL_278;
          }
          v163 = 0;
          v164 = 0;
          v107 = 0;
          if (v103 <= v102)
            v103 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v103 == v102)
            {
              v107 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v165 = v102 + 1;
              v166 = *(_BYTE *)(v104 + v102);
              *((_QWORD *)this + 1) = v165;
              v107 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                v102 = v165;
                v14 = v164++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v107 = 0;
            }
            break;
          }
LABEL_278:
          *(_QWORD *)(a1 + 48) = v107;
          goto LABEL_238;
        case 0x18u:
          *(_DWORD *)(a1 + 152) |= 0x2000000u;
          v110 = *((_QWORD *)this + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v110);
          goto LABEL_237;
        case 0x19u:
          *(_DWORD *)(a1 + 152) |= 0x20000u;
          v111 = *((_QWORD *)this + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v111);
          goto LABEL_237;
        case 0x1Au:
          *(_DWORD *)(a1 + 152) |= 0x100u;
          v112 = *((_QWORD *)this + 1);
          if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v112);
          goto LABEL_237;
        case 0x1Bu:
          *(_DWORD *)(a1 + 152) |= 0x80000u;
          v113 = *((_QWORD *)this + 1);
          v114 = *((_QWORD *)this + 2);
          v115 = *(_QWORD *)this;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            v116 = 0;
            v117 = 0;
            v118 = 0;
            do
            {
              v119 = v113 + 1;
              *((_QWORD *)this + 1) = v113 + 1;
              v120 = *(_BYTE *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0)
                goto LABEL_282;
              v116 += 7;
              v113 = v119;
              v14 = v117++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v118) = 0;
            goto LABEL_282;
          }
          v167 = 0;
          v168 = 0;
          v118 = 0;
          if (v114 <= v113)
            v114 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v169 = v113 + 1;
              v170 = *(_BYTE *)(v115 + v113);
              *((_QWORD *)this + 1) = v169;
              v118 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                v113 = v169;
                v14 = v168++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v118) = 0;
            }
            break;
          }
LABEL_282:
          *(_DWORD *)(a1 + 108) = v118;
          goto LABEL_238;
        case 0x1Cu:
          *(_DWORD *)(a1 + 152) |= 0x40u;
          v121 = *((_QWORD *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
            goto LABEL_156;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v121);
          goto LABEL_237;
        case 0x1Du:
          *(_DWORD *)(a1 + 152) |= 8u;
          v122 = *((_QWORD *)this + 1);
          v123 = *((_QWORD *)this + 2);
          v124 = *(_QWORD *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)this + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_286;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_235:
            v127 = 0;
            goto LABEL_286;
          }
          v171 = 0;
          v172 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)this + 1);
          break;
        case 0x1Eu:
          *(_DWORD *)(a1 + 152) |= 0x80u;
          v130 = *((_QWORD *)this + 1);
          if (v130 <= 0xFFFFFFFFFFFFFFFBLL && v130 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v130);
LABEL_237:
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
LABEL_156:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_238;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_238;
      }
      while (1)
      {
        if (v123 == v122)
        {
          v127 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_286;
        }
        v173 = v122 + 1;
        v174 = *(_BYTE *)(v124 + v122);
        *((_QWORD *)this + 1) = v173;
        v127 |= (unint64_t)(v174 & 0x7F) << v171;
        if ((v174 & 0x80) == 0)
          break;
        v171 += 7;
        v122 = v173;
        v14 = v172++ > 8;
        if (v14)
          goto LABEL_235;
      }
      if (*((_BYTE *)this + 24))
        v127 = 0;
LABEL_286:
      *(_QWORD *)(a1 + 32) = v127;
LABEL_238:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2447CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x20000000) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_18:
    if ((v4 & 0x400) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 1) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_21:
    if ((v4 & 2) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_27:
    if ((v4 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x80000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 8) == 0)
      goto LABEL_30;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_30:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 60));
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 152) & 0x80) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 60));
  return result;
}

uint64_t sub_18F244B38(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E058;
  *(_QWORD *)(result + 280) = 0;
  *(_DWORD *)(result + 288) = 0;
  return result;
}

void sub_18F244B54(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F244B78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  __int16 v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 280);
  v6 = *(_QWORD *)(a1 + 280);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThreshold", *(float *)(a1 + 16));
    v6 = *v5;
    v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(_WORD *)(a1 + 288);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "audioDvChaosThresholdCenter", *(float *)(a1 + 20));
    v6 = *v5;
    v7 = *(_WORD *)(a1 + 288);
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "audioDvChaosThresholdMax", *(float *)(a1 + 24));
    v6 = *v5;
    v7 = *(_WORD *)(a1 + 288);
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "audioDvChaosThresholdMin", *(float *)(a1 + 28));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "audioDvChaosThresholdStretch", *(float *)(a1 + 32));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "audioDvEnergyThreshold", *(float *)(a1 + 36));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdCenter", *(float *)(a1 + 40));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdMax", *(float *)(a1 + 44));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdMin", *(float *)(a1 + 48));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "audioDvEnergyThresholdStretch", *(float *)(a1 + 52));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdCenter", *(float *)(a1 + 56));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdMax", *(float *)(a1 + 60));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdMin", *(float *)(a1 + 64));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "audioDvMaxRmsThresholdStretch", *(float *)(a1 + 68));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v7 & 1) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "audioDvRmsThreshold", *(float *)(a1 + 72));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 1) == 0)
  {
LABEL_20:
    if ((v6 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "crashDetectorDecision");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v6 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "deltaVXYBiggestImpact", *(float *)(a1 + 76));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v6 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 80));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v6 & 0x80000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "detectorRegime");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v6 & 0x100000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold1", *(float *)(a1 + 88));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v6 & 0x200000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold2", *(float *)(a1 + 92));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_26:
    if ((v6 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "detectorRegimeAccelnormThreshold3", *(float *)(a1 + 96));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_27:
    if ((v6 & 0x800000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1", *(float *)(a1 + 100));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_28:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithAudio", *(float *)(a1 + 104));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudio", *(float *)(a1 + 108));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 112));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *(float *)(a1 + 116));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2", *(float *)(a1 + 120));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithAudio", *(float *)(a1 + 124));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudio", *(float *)(a1 + 128));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 132));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *(float *)(a1 + 136));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3", *(float *)(a1 + 140));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithAudio", *(float *)(a1 + 144));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudio", *(float *)(a1 + 148));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 152));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_41:
    if ((v7 & 2) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "detectorRegimeDeltaVThreshold3WithoutAudioStandaloneFull", *(float *)(a1 + 156));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 2) == 0)
  {
LABEL_42:
    if ((v7 & 4) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "hasAudioInEpoch");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 4) == 0)
  {
LABEL_43:
    if ((v7 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "isAudio");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 8) == 0)
  {
LABEL_44:
    if ((v7 & 0x10) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "isAudioDv");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x10) == 0)
  {
LABEL_45:
    if ((v7 & 0x20) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "isAudioSupported");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x20) == 0)
  {
LABEL_46:
    if ((v7 & 0x40) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "isBaro");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x40) == 0)
  {
LABEL_47:
    if ((v7 & 0x80) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "isCompanionConnected");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x80) == 0)
  {
LABEL_48:
    if ((v7 & 0x100) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "isFreeFall");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x100) == 0)
  {
LABEL_49:
    if ((v7 & 0x200) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "isPulse");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x200) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "lowSenseCrashDetectorDecision");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold1", *(float *)(a1 + 160));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold2", *(float *)(a1 + 164));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "lowSenseWithAudioDeltaVThreshold3", *(float *)(a1 + 168));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxPulseThreshold", *(float *)(a1 + 172));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxaccelnormThreshold", *(float *)(a1 + 176));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "lowSenseWithAudioPeakPressureThreshold", *(float *)(a1 + 180));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold1", *(float *)(a1 + 184));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold2", *(float *)(a1 + 188));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioDeltaVThreshold3", *(float *)(a1 + 192));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxPulseThreshold", *(float *)(a1 + 196));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxaccelnormThreshold", *(float *)(a1 + 200));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioPeakPressureThreshold", *(float *)(a1 + 204));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 208));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "maxAccelNormThreshold", *(float *)(a1 + 212));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithAudio", *(float *)(a1 + 216));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudio", *(float *)(a1 + 220));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 224));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 228));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "maxAudioChaos", *(float *)(a1 + 232));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "maxAudioEnergy", *(float *)(a1 + 236));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "maxAudioRms", *(float *)(a1 + 240));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 244));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "numShortAudio");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 252));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x400) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "shortAudioMaxPulseThreshold", *(float *)(a1 + 256));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((v7 & 0x400) == 0)
  {
LABEL_76:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_77;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "shortAudioMet");
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "shortAudioNumThreshold", *(float *)(a1 + 260));
  v6 = *v5;
  v7 = *(_WORD *)(a1 + 288);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_78:
    if ((v7 & 0x800) == 0)
      goto LABEL_79;
LABEL_154:
    PB::TextFormatter::format(this, "strongerAudio");
    if ((*v5 & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_80;
  }
LABEL_153:
  PB::TextFormatter::format(this, "shortAudioPeakPressureThreshold", *(float *)(a1 + 264));
  v6 = *v5;
  if ((*(_WORD *)(a1 + 288) & 0x800) != 0)
    goto LABEL_154;
LABEL_79:
  if ((v6 & 1) != 0)
LABEL_80:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F245660(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  BOOL v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  BOOL v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  int v124;
  BOOL v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  BOOL v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t result;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = a1 + 280;
    do
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v16 = 0;
        v17 = 0;
        v12 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v18 = v2 + 1;
          v19 = *(_BYTE *)(v9 + v2);
          *((_QWORD *)this + 1) = v18;
          v12 |= (unint64_t)(v19 & 0x7F) << v16;
          if ((v19 & 0x80) == 0)
            goto LABEL_21;
          v16 += 7;
          v2 = v18;
          if (v17++ >= 9)
          {
LABEL_20:
            v12 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100000)
      {
        switch((int)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v22 = *((_QWORD *)this + 1);
            v23 = *((_QWORD *)this + 2);
            v24 = *(_QWORD *)this;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)this + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_313;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_263:
              v27 = 0;
              goto LABEL_313;
            }
            v156 = 0;
            v157 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v158 = v22 + 1;
                v159 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)this + 1) = v158;
                v27 |= (unint64_t)(v159 & 0x7F) << v156;
                if (v159 < 0)
                {
                  v156 += 7;
                  v22 = v158;
                  v15 = v157++ > 8;
                  if (v15)
                    goto LABEL_263;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_313:
            *(_QWORD *)(a1 + 8) = v27;
            goto LABEL_305;
          case 2:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v31 = *((_QWORD *)this + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v31);
            goto LABEL_304;
          case 3:
            *(_WORD *)(v8 + 8) |= 0x100u;
            v32 = *((_QWORD *)this + 1);
            if (v32 >= *((_QWORD *)this + 2))
            {
              v35 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v33 = v32 + 1;
              v34 = *(unsigned __int8 *)(*(_QWORD *)this + v32);
              *((_QWORD *)this + 1) = v33;
              v35 = v34 != 0;
            }
            *(_BYTE *)(a1 + 276) = v35;
            goto LABEL_305;
          case 4:
            *(_WORD *)(v8 + 8) |= 0x80u;
            v36 = *((_QWORD *)this + 1);
            if (v36 >= *((_QWORD *)this + 2))
            {
              v39 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v37 = v36 + 1;
              v38 = *(unsigned __int8 *)(*(_QWORD *)this + v36);
              *((_QWORD *)this + 1) = v37;
              v39 = v38 != 0;
            }
            *(_BYTE *)(a1 + 275) = v39;
            goto LABEL_305;
          case 5:
            *(_WORD *)(v8 + 8) |= 0x20u;
            v40 = *((_QWORD *)this + 1);
            if (v40 >= *((_QWORD *)this + 2))
            {
              v43 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v41 = v40 + 1;
              v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
              *((_QWORD *)this + 1) = v41;
              v43 = v42 != 0;
            }
            *(_BYTE *)(a1 + 273) = v43;
            goto LABEL_305;
          case 6:
            *(_WORD *)(v8 + 8) |= 4u;
            v44 = *((_QWORD *)this + 1);
            if (v44 >= *((_QWORD *)this + 2))
            {
              v47 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v45 = v44 + 1;
              v46 = *(unsigned __int8 *)(*(_QWORD *)this + v44);
              *((_QWORD *)this + 1) = v45;
              v47 = v46 != 0;
            }
            *(_BYTE *)(a1 + 270) = v47;
            goto LABEL_305;
          case 7:
            *(_WORD *)(v8 + 8) |= 2u;
            v48 = *((_QWORD *)this + 1);
            if (v48 >= *((_QWORD *)this + 2))
            {
              v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v49 = v48 + 1;
              v50 = *(unsigned __int8 *)(*(_QWORD *)this + v48);
              *((_QWORD *)this + 1) = v49;
              v51 = v50 != 0;
            }
            *(_BYTE *)(a1 + 269) = v51;
            goto LABEL_305;
          case 8:
            *(_QWORD *)v8 |= 0x40000uLL;
            v52 = *((_QWORD *)this + 1);
            v53 = *((_QWORD *)this + 2);
            v54 = *(_QWORD *)this;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = v52 + 1;
                *((_QWORD *)this + 1) = v52 + 1;
                v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0)
                  goto LABEL_317;
                v55 += 7;
                v52 = v58;
                v15 = v56++ > 8;
              }
              while (!v15);
LABEL_280:
              LODWORD(v57) = 0;
              goto LABEL_317;
            }
            v160 = 0;
            v161 = 0;
            v57 = 0;
            if (v53 <= v52)
              v53 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v53 == v52)
              {
                LODWORD(v57) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v162 = v52 + 1;
                v163 = *(_BYTE *)(v54 + v52);
                *((_QWORD *)this + 1) = v162;
                v57 |= (unint64_t)(v163 & 0x7F) << v160;
                if (v163 < 0)
                {
                  v160 += 7;
                  v52 = v162;
                  v15 = v161++ > 8;
                  if (v15)
                    goto LABEL_280;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
              }
              break;
            }
LABEL_317:
            *(_DWORD *)(a1 + 84) = v57;
            goto LABEL_305;
          case 9:
            *(_WORD *)(v8 + 8) |= 1u;
            v60 = *((_QWORD *)this + 1);
            if (v60 >= *((_QWORD *)this + 2))
            {
              v63 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v61 = v60 + 1;
              v62 = *(unsigned __int8 *)(*(_QWORD *)this + v60);
              *((_QWORD *)this + 1) = v61;
              v63 = v62 != 0;
            }
            *(_BYTE *)(a1 + 268) = v63;
            goto LABEL_305;
          case 10:
            *(_WORD *)(v8 + 8) |= 0x10u;
            v64 = *((_QWORD *)this + 1);
            if (v64 >= *((_QWORD *)this + 2))
            {
              v67 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v65 = v64 + 1;
              v66 = *(unsigned __int8 *)(*(_QWORD *)this + v64);
              *((_QWORD *)this + 1) = v65;
              v67 = v66 != 0;
            }
            *(_BYTE *)(a1 + 272) = v67;
            goto LABEL_305;
          case 11:
            *(_QWORD *)v8 |= 0x20000uLL;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v68);
            goto LABEL_304;
          case 12:
            *(_QWORD *)v8 |= 0x10000uLL;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v69);
            goto LABEL_304;
          case 13:
            *(_QWORD *)v8 |= 0x400000uLL;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_304;
          case 14:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v71 = *((_QWORD *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v71);
            goto LABEL_304;
          case 15:
            *(_QWORD *)v8 |= 0x100000000uLL;
            v72 = *((_QWORD *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v72);
            goto LABEL_304;
          case 16:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v73 = *((_QWORD *)this + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(_QWORD *)this + v73);
            goto LABEL_304;
          case 17:
            *(_QWORD *)v8 |= 0x800000uLL;
            v74 = *((_QWORD *)this + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v74);
            goto LABEL_304;
          case 18:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v75 = *((_QWORD *)this + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v75);
            goto LABEL_304;
          case 19:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v76 = *((_QWORD *)this + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v76);
            goto LABEL_304;
          case 20:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v77 = *((_QWORD *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(_QWORD *)this + v77);
            goto LABEL_304;
          case 21:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v78 = *((_QWORD *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v78);
            goto LABEL_304;
          case 22:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v79 = *((_QWORD *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v79);
            goto LABEL_304;
          case 23:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v80 = *((_QWORD *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v80);
            goto LABEL_304;
          case 24:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v81 = *((_QWORD *)this + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 220) = *(_DWORD *)(*(_QWORD *)this + v81);
            goto LABEL_304;
          case 25:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v82 = *((_QWORD *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)this + v82);
            goto LABEL_304;
          case 26:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v83 = *((_QWORD *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)this + v83);
            goto LABEL_304;
          case 27:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(_QWORD *)this + v84);
            goto LABEL_304;
          case 28:
            *(_QWORD *)v8 |= 0x40uLL;
            v85 = *((_QWORD *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v85);
            goto LABEL_304;
          case 29:
            *(_QWORD *)v8 |= 2uLL;
            v86 = *((_QWORD *)this + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v86);
            goto LABEL_304;
          case 30:
            *(_QWORD *)v8 |= 0x8000uLL;
            v87 = *((_QWORD *)this + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v87);
            goto LABEL_304;
          case 31:
            *(_WORD *)(v8 + 8) |= 0x800u;
            v88 = *((_QWORD *)this + 1);
            if (v88 >= *((_QWORD *)this + 2))
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v89 = v88 + 1;
              v90 = *(unsigned __int8 *)(*(_QWORD *)this + v88);
              *((_QWORD *)this + 1) = v89;
              v91 = v90 != 0;
            }
            *(_BYTE *)(a1 + 279) = v91;
            goto LABEL_305;
          case 32:
            *(_WORD *)(v8 + 8) |= 8u;
            v92 = *((_QWORD *)this + 1);
            if (v92 >= *((_QWORD *)this + 2))
            {
              v95 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v93 = v92 + 1;
              v94 = *(unsigned __int8 *)(*(_QWORD *)this + v92);
              *((_QWORD *)this + 1) = v93;
              v95 = v94 != 0;
            }
            *(_BYTE *)(a1 + 271) = v95;
            goto LABEL_305;
          case 33:
            *(_QWORD *)v8 |= 0x80uLL;
            v96 = *((_QWORD *)this + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v96);
            goto LABEL_304;
          case 34:
            *(_QWORD *)v8 |= 0x400uLL;
            v97 = *((_QWORD *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v97);
            goto LABEL_304;
          case 35:
            *(_QWORD *)v8 |= 0x200uLL;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v98);
            goto LABEL_304;
          case 36:
            *(_QWORD *)v8 |= 0x100uLL;
            v99 = *((_QWORD *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v99);
            goto LABEL_304;
          case 37:
            *(_QWORD *)v8 |= 4uLL;
            v100 = *((_QWORD *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v100);
            goto LABEL_304;
          case 38:
            *(_QWORD *)v8 |= 0x20uLL;
            v101 = *((_QWORD *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v101);
            goto LABEL_304;
          case 39:
            *(_QWORD *)v8 |= 0x10uLL;
            v102 = *((_QWORD *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v102);
            goto LABEL_304;
          case 40:
            *(_QWORD *)v8 |= 8uLL;
            v103 = *((_QWORD *)this + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v103);
            goto LABEL_304;
          case 41:
            *(_QWORD *)v8 |= 0x800uLL;
            v104 = *((_QWORD *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v104);
            goto LABEL_304;
          case 42:
            *(_QWORD *)v8 |= 0x4000uLL;
            v105 = *((_QWORD *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v105);
            goto LABEL_304;
          case 43:
            *(_QWORD *)v8 |= 0x2000uLL;
            v106 = *((_QWORD *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v106);
            goto LABEL_304;
          case 44:
            *(_QWORD *)v8 |= 0x1000uLL;
            v107 = *((_QWORD *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v107);
            goto LABEL_304;
          case 45:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v108 = *((_QWORD *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v108);
            goto LABEL_304;
          case 46:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v109 = *((_QWORD *)this + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v109);
            goto LABEL_304;
          case 47:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v110 = *((_QWORD *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v110);
            goto LABEL_304;
          case 48:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v111 = *((_QWORD *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(_QWORD *)this + v111);
            goto LABEL_304;
          case 49:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v112 = *((_QWORD *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v112);
            goto LABEL_304;
          case 50:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v113 = *((_QWORD *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v113);
            goto LABEL_304;
          case 51:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v114 = *((_QWORD *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v114);
            goto LABEL_304;
          case 52:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v115 = *((_QWORD *)this + 1);
            if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(_QWORD *)this + v115);
            goto LABEL_304;
          case 53:
            *(_WORD *)(v8 + 8) |= 0x40u;
            v116 = *((_QWORD *)this + 1);
            if (v116 >= *((_QWORD *)this + 2))
            {
              v119 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v116 + 1;
              v118 = *(unsigned __int8 *)(*(_QWORD *)this + v116);
              *((_QWORD *)this + 1) = v117;
              v119 = v118 != 0;
            }
            *(_BYTE *)(a1 + 274) = v119;
            goto LABEL_305;
          case 54:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v120 = *((_QWORD *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(_QWORD *)this + v120);
            goto LABEL_304;
          case 55:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v121 = *((_QWORD *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(_QWORD *)this + v121);
            goto LABEL_304;
          case 56:
            *(_WORD *)(v8 + 8) |= 0x200u;
            v122 = *((_QWORD *)this + 1);
            if (v122 >= *((_QWORD *)this + 2))
            {
              v125 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v123 = v122 + 1;
              v124 = *(unsigned __int8 *)(*(_QWORD *)this + v122);
              *((_QWORD *)this + 1) = v123;
              v125 = v124 != 0;
            }
            *(_BYTE *)(a1 + 277) = v125;
            goto LABEL_305;
          case 57:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v126 = *((_QWORD *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v126);
            goto LABEL_304;
          case 58:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v127 = *((_QWORD *)this + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v127);
            goto LABEL_304;
          case 59:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v128 = *((_QWORD *)this + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v128);
            goto LABEL_304;
          case 60:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v129 = *((_QWORD *)this + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v129);
            goto LABEL_304;
          case 61:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v130 = *((_QWORD *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v130);
            goto LABEL_304;
          case 62:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v131 = *((_QWORD *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v131);
            goto LABEL_304;
          case 63:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v132 = *((_QWORD *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v132);
            goto LABEL_304;
          case 64:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v133 = *((_QWORD *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v133);
            goto LABEL_304;
          case 65:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v134 = *((_QWORD *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v134);
            goto LABEL_304;
          case 66:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v135 = *((_QWORD *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v135);
            goto LABEL_304;
          case 67:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v136 = *((_QWORD *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v136);
            goto LABEL_304;
          case 68:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v137 = *((_QWORD *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v137);
            goto LABEL_304;
          case 69:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v138 = *((_QWORD *)this + 1);
            v139 = *((_QWORD *)this + 2);
            v140 = *(_QWORD *)this;
            if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
            {
              v141 = 0;
              v142 = 0;
              v143 = 0;
              do
              {
                v144 = v138 + 1;
                *((_QWORD *)this + 1) = v138 + 1;
                v145 = *(_BYTE *)(v140 + v138);
                v143 |= (unint64_t)(v145 & 0x7F) << v141;
                if ((v145 & 0x80) == 0)
                  goto LABEL_321;
                v141 += 7;
                v138 = v144;
                v15 = v142++ > 8;
              }
              while (!v15);
LABEL_299:
              LODWORD(v143) = 0;
              goto LABEL_321;
            }
            v164 = 0;
            v165 = 0;
            v143 = 0;
            if (v139 <= v138)
              v139 = *((_QWORD *)this + 1);
            break;
          case 70:
            *(_WORD *)(v8 + 8) |= 0x400u;
            v146 = *((_QWORD *)this + 1);
            if (v146 >= *((_QWORD *)this + 2))
            {
              v149 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v147 = v146 + 1;
              v148 = *(unsigned __int8 *)(*(_QWORD *)this + v146);
              *((_QWORD *)this + 1) = v147;
              v149 = v148 != 0;
            }
            *(_BYTE *)(a1 + 278) = v149;
            goto LABEL_305;
          case 71:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v150 = *((_QWORD *)this + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(_QWORD *)this + v150);
            goto LABEL_304;
          case 72:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v151 = *((_QWORD *)this + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
              goto LABEL_248;
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(_QWORD *)this + v151);
            goto LABEL_304;
          case 73:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v152 = *((_QWORD *)this + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
            {
LABEL_248:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_305;
            }
            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(_QWORD *)this + v152);
            goto LABEL_304;
          default:
            goto LABEL_255;
        }
        while (1)
        {
          if (v139 == v138)
          {
            LODWORD(v143) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_321;
          }
          v166 = v138 + 1;
          v167 = *(_BYTE *)(v140 + v138);
          *((_QWORD *)this + 1) = v166;
          v143 |= (unint64_t)(v167 & 0x7F) << v164;
          if ((v167 & 0x80) == 0)
            break;
          v164 += 7;
          v138 = v166;
          v15 = v165++ > 8;
          if (v15)
            goto LABEL_299;
        }
        if (*((_BYTE *)this + 24))
          LODWORD(v143) = 0;
LABEL_321:
        *(_DWORD *)(a1 + 248) = v143;
        goto LABEL_305;
      }
      switch((_DWORD)v21)
      {
        case 0x186A1:
          *(_QWORD *)v8 |= 0x80000uLL;
          v153 = *((_QWORD *)this + 1);
          if (v153 <= 0xFFFFFFFFFFFFFFFBLL && v153 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v153);
            goto LABEL_304;
          }
          break;
        case 0x186A2:
          *(_QWORD *)v8 |= 0x100000uLL;
          v154 = *((_QWORD *)this + 1);
          if (v154 <= 0xFFFFFFFFFFFFFFFBLL && v154 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v154);
            goto LABEL_304;
          }
          break;
        case 0x186A3:
          *(_QWORD *)v8 |= 0x200000uLL;
          v30 = *((_QWORD *)this + 1);
          if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v30);
LABEL_304:
            *((_QWORD *)this + 1) += 4;
            goto LABEL_305;
          }
          break;
        default:
LABEL_255:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_305;
      }
      *((_BYTE *)this + 24) = 1;
LABEL_305:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t sub_18F246BB0(uint64_t result, PB::Writer *this)
{
  float *v3;
  uint64_t *v4;
  uint64_t v5;
  __int16 v6;

  v3 = (float *)result;
  v4 = (uint64_t *)(result + 280);
  v5 = *(_QWORD *)(result + 280);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((*v4 & 0x2000000000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_WORD *)(result + 288);
  if ((v5 & 0x2000000000000) != 0)
  {
LABEL_5:
    result = PB::Writer::write(this, v3[52]);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
  }
LABEL_6:
  if ((v6 & 0x100) != 0)
  {
    result = PB::Writer::write(this);
    v5 = *v4;
    v6 = *((_WORD *)v4 + 4);
    if ((v6 & 0x80) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_84;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_10;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 4) == 0)
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_11;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 2) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v6 & 1) == 0)
      goto LABEL_13;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 1) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, v3[20]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0)
      goto LABEL_17;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, v3[19]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_18;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, v3[25]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_19;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, v3[30]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_20;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, v3[35]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0)
      goto LABEL_21;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this, v3[53]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_22;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, v3[26]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_23;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, v3[31]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_24;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, v3[36]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_25;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::write(this, v3[54]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_26;
    goto LABEL_101;
  }
LABEL_100:
  result = PB::Writer::write(this, v3[27]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_27;
    goto LABEL_102;
  }
LABEL_101:
  result = PB::Writer::write(this, v3[32]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_103;
  }
LABEL_102:
  result = PB::Writer::write(this, v3[37]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_29;
    goto LABEL_104;
  }
LABEL_103:
  result = PB::Writer::write(this, v3[55]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_30;
    goto LABEL_105;
  }
LABEL_104:
  result = PB::Writer::write(this, v3[59]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_31;
    goto LABEL_106;
  }
LABEL_105:
  result = PB::Writer::write(this, v3[58]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_107;
  }
LABEL_106:
  result = PB::Writer::write(this, v3[60]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40) == 0)
  {
LABEL_32:
    if ((v5 & 2) == 0)
      goto LABEL_33;
    goto LABEL_108;
  }
LABEL_107:
  result = PB::Writer::write(this, v3[9]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 2) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000) == 0)
      goto LABEL_34;
    goto LABEL_109;
  }
LABEL_108:
  result = PB::Writer::write(this, v3[4]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_34:
    if ((v6 & 0x800) == 0)
      goto LABEL_35;
    goto LABEL_110;
  }
LABEL_109:
  result = PB::Writer::write(this, v3[18]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x800) == 0)
  {
LABEL_35:
    if ((v6 & 8) == 0)
      goto LABEL_36;
    goto LABEL_111;
  }
LABEL_110:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 8) == 0)
  {
LABEL_36:
    if ((v5 & 0x80) == 0)
      goto LABEL_37;
    goto LABEL_112;
  }
LABEL_111:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80) == 0)
  {
LABEL_37:
    if ((v5 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_113;
  }
LABEL_112:
  result = PB::Writer::write(this, v3[10]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v5 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_114;
  }
LABEL_113:
  result = PB::Writer::write(this, v3[13]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200) == 0)
  {
LABEL_39:
    if ((v5 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_115;
  }
LABEL_114:
  result = PB::Writer::write(this, v3[12]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v5 & 4) == 0)
      goto LABEL_41;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, v3[11]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 4) == 0)
  {
LABEL_41:
    if ((v5 & 0x20) == 0)
      goto LABEL_42;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, v3[5]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20) == 0)
  {
LABEL_42:
    if ((v5 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, v3[8]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10) == 0)
  {
LABEL_43:
    if ((v5 & 8) == 0)
      goto LABEL_44;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, v3[7]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 8) == 0)
  {
LABEL_44:
    if ((v5 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, v3[6]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000) == 0)
      goto LABEL_46;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::write(this, v3[14]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_46:
    if ((v5 & 0x2000) == 0)
      goto LABEL_47;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::write(this, v3[17]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v5 & 0x1000) == 0)
      goto LABEL_48;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, v3[16]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_48:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_49;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, v3[15]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_50;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, v3[28]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_51;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::write(this, v3[33]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_51:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_52;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::write(this, v3[38]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_53;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, v3[56]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_54;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::write(this, v3[29]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_54:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_55;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::write(this, v3[34]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_56;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::write(this, v3[39]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40) == 0)
      goto LABEL_57;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::write(this, v3[57]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x40) == 0)
  {
LABEL_57:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_58;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_59;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this, v3[63]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x200) == 0)
      goto LABEL_60;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this, v3[61]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((v6 & 0x200) == 0)
  {
LABEL_60:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_61;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_62;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this, v3[40]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_63;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this, v3[41]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_64;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this, v3[42]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_65;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this, v3[44]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_66;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this, v3[43]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_66:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_67;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this, v3[45]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_68;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this, v3[46]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_69;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this, v3[47]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_70;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this, v3[48]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_71;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::write(this, v3[50]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_72;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this, v3[49]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_73;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this, v3[51]);
  v5 = *v4;
  v6 = *((_WORD *)v4 + 4);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x400) == 0)
      goto LABEL_74;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_74:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_76;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this, v3[65]);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_78;
    goto LABEL_77;
  }
LABEL_151:
  result = PB::Writer::write(this, v3[66]);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) != 0)
  {
LABEL_77:
    result = PB::Writer::write(this, v3[64]);
    v5 = *v4;
  }
LABEL_78:
  if ((v5 & 0x80000) != 0)
  {
    result = PB::Writer::write(this, v3[22]);
    v5 = *v4;
    if ((*v4 & 0x100000) == 0)
    {
LABEL_80:
      if ((v5 & 0x200000) == 0)
        return result;
      return PB::Writer::write(this, v3[24]);
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_80;
  }
  result = PB::Writer::write(this, v3[23]);
  if ((*v4 & 0x200000) != 0)
    return PB::Writer::write(this, v3[24]);
  return result;
}

double sub_18F247558(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294FD38;
  *(_DWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F24757C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E294FD38;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F2475CC(PB::Base *a1)
{
  sub_18F24757C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2475F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  float *v6;
  float *v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  int v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "combinedUnc", *(float *)(a1 + 88));
    v5 = *(_DWORD *)(a1 + 144);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "combinedX", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 144);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_29:
  PB::TextFormatter::format(this, "combinedY", *(float *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 144) & 0x80) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "combinedZ", *(float *)(a1 + 100));
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "inerAccelApproachMx", v8);
  }
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "inerAccelCount");
    v9 = *(_DWORD *)(a1 + 144);
    if ((v9 & 0x200) == 0)
    {
LABEL_10:
      if ((v9 & 0x400) == 0)
        goto LABEL_11;
      goto LABEL_33;
    }
  }
  else if ((v9 & 0x200) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "inertialApproachUnc", *(float *)(a1 + 108));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x400) == 0)
  {
LABEL_11:
    if ((v9 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "inertialApproachX", *(float *)(a1 + 112));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x800) == 0)
  {
LABEL_12:
    if ((v9 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "inertialApproachY", *(float *)(a1 + 116));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 0x1000) == 0)
  {
LABEL_13:
    if ((v9 & 1) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "inertialApproachZ", *(float *)(a1 + 120));
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 1) == 0)
  {
LABEL_14:
    if ((v9 & 2) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "previousTimeAccel");
  v9 = *(_DWORD *)(a1 + 144);
  if ((v9 & 2) == 0)
  {
LABEL_15:
    if ((v9 & 4) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_37:
  PB::TextFormatter::format(this, "previousTimeSag");
  if ((*(_DWORD *)(a1 + 144) & 4) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "previousTimestamp");
LABEL_17:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "sagittalApproachMx", v12);
  }
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x2000) != 0)
  {
    PB::TextFormatter::format(this, "sagittalApproachUnc", *(float *)(a1 + 124));
    v13 = *(_DWORD *)(a1 + 144);
    if ((v13 & 0x4000) == 0)
    {
LABEL_21:
      if ((v13 & 0x8000) == 0)
        goto LABEL_22;
      goto LABEL_41;
    }
  }
  else if ((v13 & 0x4000) == 0)
  {
    goto LABEL_21;
  }
  PB::TextFormatter::format(this, "sagittalApproachX", *(float *)(a1 + 128));
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x8000) == 0)
  {
LABEL_22:
    if ((v13 & 0x10000) == 0)
      goto LABEL_23;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "sagittalApproachY", *(float *)(a1 + 132));
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x10000) == 0)
  {
LABEL_23:
    if ((v13 & 0x20000) == 0)
      goto LABEL_24;
LABEL_43:
    PB::TextFormatter::format(this, "sagittalCount");
    if ((*(_DWORD *)(a1 + 144) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_25;
  }
LABEL_42:
  PB::TextFormatter::format(this, "sagittalApproachZ", *(float *)(a1 + 136));
  v13 = *(_DWORD *)(a1 + 144);
  if ((v13 & 0x20000) != 0)
    goto LABEL_43;
LABEL_24:
  if ((v13 & 8) != 0)
LABEL_25:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

