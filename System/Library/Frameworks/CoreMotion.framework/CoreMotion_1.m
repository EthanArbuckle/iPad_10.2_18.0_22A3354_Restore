BOOL sub_18F2478C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  _DWORD *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  int v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  unint64_t v112;
  char v113;
  unsigned int v114;
  unint64_t v115;
  char v116;
  char v117;
  unsigned int v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  unint64_t v123;
  char v124;
  char v125;
  unsigned int v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  char *v138;
  _DWORD *v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  int v155;
  char *v156;
  int v157;
  unint64_t v158;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    v10 = (void **)(a1 + 32);
    v11 = a1 + 48;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 144) |= 8u;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          v27 = *(_QWORD *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            do
            {
              v31 = v25 + 1;
              *((_QWORD *)this + 1) = v25 + 1;
              v32 = *(_BYTE *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0)
                goto LABEL_223;
              v28 += 7;
              v25 = v31;
              v18 = v29++ > 8;
            }
            while (!v18);
LABEL_157:
            v30 = 0;
            goto LABEL_223;
          }
          v113 = 0;
          v114 = 0;
          v30 = 0;
          if (v26 <= v25)
            v26 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v26 == v25)
            {
              v30 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v115 = v25 + 1;
              v116 = *(_BYTE *)(v27 + v25);
              *((_QWORD *)this + 1) = v115;
              v30 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                v25 = v115;
                v18 = v114++ > 8;
                if (v18)
                  goto LABEL_157;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v30 = 0;
            }
            break;
          }
LABEL_223:
          *(_QWORD *)(a1 + 80) = v30;
          goto LABEL_258;
        case 2u:
          *(_DWORD *)(a1 + 144) |= 0x20u;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_257;
        case 3u:
          *(_DWORD *)(a1 + 144) |= 0x40u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_257;
        case 4u:
          *(_DWORD *)(a1 + 144) |= 0x80u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_257;
        case 5u:
          *(_DWORD *)(a1 + 144) |= 0x10u;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_257;
        case 6u:
          *(_DWORD *)(a1 + 144) |= 0x400u;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v37);
          goto LABEL_257;
        case 7u:
          *(_DWORD *)(a1 + 144) |= 0x800u;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v38);
          goto LABEL_257;
        case 8u:
          *(_DWORD *)(a1 + 144) |= 0x1000u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v39);
          goto LABEL_257;
        case 9u:
          *(_DWORD *)(a1 + 144) |= 0x200u;
          v40 = *((_QWORD *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v40);
          goto LABEL_257;
        case 0xAu:
          *(_DWORD *)(a1 + 144) |= 0x100u;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_226;
              v44 += 7;
              v41 = v47;
              v18 = v45++ > 8;
            }
            while (!v18);
LABEL_164:
            LODWORD(v46) = 0;
            goto LABEL_226;
          }
          v117 = 0;
          v118 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v119 = v41 + 1;
              v120 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v119;
              v46 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                v41 = v119;
                v18 = v118++ > 8;
                if (v18)
                  goto LABEL_164;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_226:
          *(_DWORD *)(a1 + 104) = v46;
          goto LABEL_258;
        case 0xBu:
          *(_DWORD *)(a1 + 144) |= 0x4000u;
          v49 = *((_QWORD *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v49);
          goto LABEL_257;
        case 0xCu:
          *(_DWORD *)(a1 + 144) |= 0x8000u;
          v50 = *((_QWORD *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v50);
          goto LABEL_257;
        case 0xDu:
          *(_DWORD *)(a1 + 144) |= 0x10000u;
          v51 = *((_QWORD *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v51);
          goto LABEL_257;
        case 0xEu:
          *(_DWORD *)(a1 + 144) |= 0x2000u;
          v52 = *((_QWORD *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
            goto LABEL_255;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v52);
          goto LABEL_257;
        case 0xFu:
          *(_DWORD *)(a1 + 144) |= 0x20000u;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          v55 = *(_QWORD *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            v56 = 0;
            v57 = 0;
            v58 = 0;
            do
            {
              v59 = v53 + 1;
              *((_QWORD *)this + 1) = v53 + 1;
              v60 = *(_BYTE *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0)
                goto LABEL_229;
              v56 += 7;
              v53 = v59;
              v18 = v57++ > 8;
            }
            while (!v18);
LABEL_171:
            LODWORD(v58) = 0;
            goto LABEL_229;
          }
          v121 = 0;
          v122 = 0;
          v58 = 0;
          if (v54 <= v53)
            v54 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v123 = v53 + 1;
              v124 = *(_BYTE *)(v55 + v53);
              *((_QWORD *)this + 1) = v123;
              v58 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                v53 = v123;
                v18 = v122++ > 8;
                if (v18)
                  goto LABEL_171;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v58) = 0;
            }
            break;
          }
LABEL_229:
          *(_DWORD *)(a1 + 140) = v58;
          goto LABEL_258;
        case 0x10u:
          *(_DWORD *)(a1 + 144) |= 4u;
          v61 = *((_QWORD *)this + 1);
          v62 = *((_QWORD *)this + 2);
          v63 = *(_QWORD *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            v64 = 0;
            v65 = 0;
            v66 = 0;
            do
            {
              v67 = v61 + 1;
              *((_QWORD *)this + 1) = v61 + 1;
              v68 = *(_BYTE *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0)
                goto LABEL_232;
              v64 += 7;
              v61 = v67;
              v18 = v65++ > 8;
            }
            while (!v18);
LABEL_178:
            v66 = 0;
            goto LABEL_232;
          }
          v125 = 0;
          v126 = 0;
          v66 = 0;
          if (v62 <= v61)
            v62 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v62 == v61)
            {
              v66 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v127 = v61 + 1;
              v128 = *(_BYTE *)(v63 + v61);
              *((_QWORD *)this + 1) = v127;
              v66 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                v61 = v127;
                v18 = v126++ > 8;
                if (v18)
                  goto LABEL_178;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v66 = 0;
            }
            break;
          }
LABEL_232:
          *(_QWORD *)(a1 + 72) = v66;
          goto LABEL_258;
        case 0x11u:
          *(_DWORD *)(a1 + 144) |= 1u;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          v71 = *(_QWORD *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            v72 = 0;
            v73 = 0;
            v74 = 0;
            do
            {
              v75 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v76 = *(_BYTE *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0)
                goto LABEL_235;
              v72 += 7;
              v69 = v75;
              v18 = v73++ > 8;
            }
            while (!v18);
LABEL_185:
            v74 = 0;
            goto LABEL_235;
          }
          v129 = 0;
          v130 = 0;
          v74 = 0;
          if (v70 <= v69)
            v70 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v70 == v69)
            {
              v74 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v131 = v69 + 1;
              v132 = *(_BYTE *)(v71 + v69);
              *((_QWORD *)this + 1) = v131;
              v74 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                v69 = v131;
                v18 = v130++ > 8;
                if (v18)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v74 = 0;
            }
            break;
          }
LABEL_235:
          *(_QWORD *)(a1 + 56) = v74;
          goto LABEL_258;
        case 0x12u:
          *(_DWORD *)(a1 + 144) |= 2u;
          v77 = *((_QWORD *)this + 1);
          v78 = *((_QWORD *)this + 2);
          v79 = *(_QWORD *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            v80 = 0;
            v81 = 0;
            v82 = 0;
            do
            {
              v83 = v77 + 1;
              *((_QWORD *)this + 1) = v77 + 1;
              v84 = *(_BYTE *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0)
                goto LABEL_238;
              v80 += 7;
              v77 = v83;
              v18 = v81++ > 8;
            }
            while (!v18);
LABEL_192:
            v82 = 0;
            goto LABEL_238;
          }
          v133 = 0;
          v134 = 0;
          v82 = 0;
          if (v78 <= v77)
            v78 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v78 == v77)
            {
              v82 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v135 = v77 + 1;
              v136 = *(_BYTE *)(v79 + v77);
              *((_QWORD *)this + 1) = v135;
              v82 |= (unint64_t)(v136 & 0x7F) << v133;
              if (v136 < 0)
              {
                v133 += 7;
                v77 = v135;
                v18 = v134++ > 8;
                if (v18)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v82 = 0;
            }
            break;
          }
LABEL_238:
          *(_QWORD *)(a1 + 64) = v82;
          goto LABEL_258;
        case 0x13u:
          if (v24 != 2)
          {
            v138 = *(char **)(a1 + 40);
            v137 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v138 >= v137)
            {
              v142 = (char *)*v10;
              v143 = (v138 - (_BYTE *)*v10) >> 2;
              v144 = v143 + 1;
              if ((unint64_t)(v143 + 1) >> 62)
LABEL_268:
                sub_18F26F8C0();
              v145 = v137 - (_QWORD)v142;
              if (v145 >> 1 > v144)
                v144 = v145 >> 1;
              if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
                v146 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v146 = v144;
              if (v146)
              {
                v147 = (char *)sub_18F26FB8C(v11, v146);
                v142 = *(char **)(a1 + 32);
                v138 = *(char **)(a1 + 40);
              }
              else
              {
                v147 = 0;
              }
              v154 = &v147[4 * v143];
              *(_DWORD *)v154 = 0;
              v139 = v154 + 4;
              while (v138 != v142)
              {
                v155 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v154 - 1) = v155;
                v154 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v154;
              *(_QWORD *)(a1 + 40) = v139;
              *(_QWORD *)(a1 + 48) = &v147[4 * v146];
              if (v142)
                operator delete(v142);
            }
            else
            {
              *(_DWORD *)v138 = 0;
              v139 = v138 + 4;
            }
            *(_QWORD *)(a1 + 40) = v139;
            goto LABEL_253;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v85 = *((_QWORD *)this + 1);
          v86 = *((_QWORD *)this + 2);
          while (v85 < v86 && !*((_BYTE *)this + 24))
          {
            v88 = *(char **)(a1 + 40);
            v87 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v88 >= v87)
            {
              v90 = (char *)*v10;
              v91 = (v88 - (_BYTE *)*v10) >> 2;
              v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62)
                goto LABEL_268;
              v93 = v87 - (_QWORD)v90;
              if (v93 >> 1 > v92)
                v92 = v93 >> 1;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
                v94 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v94 = v92;
              if (v94)
              {
                v95 = (char *)sub_18F26FB8C(v11, v94);
                v90 = *(char **)(a1 + 32);
                v88 = *(char **)(a1 + 40);
              }
              else
              {
                v95 = 0;
              }
              v96 = &v95[4 * v91];
              *(_DWORD *)v96 = 0;
              v89 = v96 + 4;
              while (v88 != v90)
              {
                v97 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v96;
              *(_QWORD *)(a1 + 40) = v89;
              *(_QWORD *)(a1 + 48) = &v95[4 * v94];
              if (v90)
                operator delete(v90);
            }
            else
            {
              *(_DWORD *)v88 = 0;
              v89 = v88 + 4;
            }
            *(_QWORD *)(a1 + 40) = v89;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_197;
            *(v89 - 1) = *(_DWORD *)(*(_QWORD *)this + v98);
            v86 = *((_QWORD *)this + 2);
            v85 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v85;
          }
          goto LABEL_198;
        case 0x14u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v99 = *((_QWORD *)this + 1);
            v100 = *((_QWORD *)this + 2);
            while (v99 < v100 && !*((_BYTE *)this + 24))
            {
              v102 = *(char **)(a1 + 16);
              v101 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v102 >= v101)
              {
                v104 = (char *)*v8;
                v105 = (v102 - (_BYTE *)*v8) >> 2;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62)
                  goto LABEL_269;
                v107 = v101 - (_QWORD)v104;
                if (v107 >> 1 > v106)
                  v106 = v107 >> 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                  v108 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v108 = v106;
                if (v108)
                {
                  v109 = (char *)sub_18F26FB8C(v9, v108);
                  v104 = *(char **)(a1 + 8);
                  v102 = *(char **)(a1 + 16);
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v109[4 * v105];
                *(_DWORD *)v110 = 0;
                v103 = v110 + 4;
                while (v102 != v104)
                {
                  v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v110;
                *(_QWORD *)(a1 + 16) = v103;
                *(_QWORD *)(a1 + 24) = &v109[4 * v108];
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *(_DWORD *)v102 = 0;
                v103 = v102 + 4;
              }
              *(_QWORD *)(a1 + 16) = v103;
              v112 = *((_QWORD *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              {
LABEL_197:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)this + v112);
              v100 = *((_QWORD *)this + 2);
              v99 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v99;
            }
LABEL_198:
            PB::Reader::recallMark();
          }
          else
          {
            v141 = *(char **)(a1 + 16);
            v140 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v141 >= v140)
            {
              v148 = (char *)*v8;
              v149 = (v141 - (_BYTE *)*v8) >> 2;
              v150 = v149 + 1;
              if ((unint64_t)(v149 + 1) >> 62)
LABEL_269:
                sub_18F26F8C0();
              v151 = v140 - (_QWORD)v148;
              if (v151 >> 1 > v150)
                v150 = v151 >> 1;
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFFCLL)
                v152 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v152 = v150;
              if (v152)
              {
                v153 = (char *)sub_18F26FB8C(v9, v152);
                v148 = *(char **)(a1 + 8);
                v141 = *(char **)(a1 + 16);
              }
              else
              {
                v153 = 0;
              }
              v156 = &v153[4 * v149];
              *(_DWORD *)v156 = 0;
              v139 = v156 + 4;
              while (v141 != v148)
              {
                v157 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v156 - 1) = v157;
                v156 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v156;
              *(_QWORD *)(a1 + 16) = v139;
              *(_QWORD *)(a1 + 24) = &v153[4 * v152];
              if (v148)
                operator delete(v148);
            }
            else
            {
              *(_DWORD *)v141 = 0;
              v139 = v141 + 4;
            }
            *(_QWORD *)(a1 + 16) = v139;
LABEL_253:
            v158 = *((_QWORD *)this + 1);
            if (v158 <= 0xFFFFFFFFFFFFFFFBLL && v158 + 4 <= *((_QWORD *)this + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(_QWORD *)this + v158);
LABEL_257:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_255:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_258:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_258;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F248610(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;

  v3 = result;
  v4 = *(_DWORD *)(result + 144);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 144);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      goto LABEL_17;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 4) == 0)
  {
LABEL_17:
    if ((v4 & 1) == 0)
      goto LABEL_18;
LABEL_43:
    result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 144) & 2) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 144);
  if ((v4 & 1) != 0)
    goto LABEL_43;
LABEL_18:
  if ((v4 & 2) != 0)
LABEL_19:
    result = PB::Writer::writeVarInt(this);
LABEL_20:
  v5 = *(float **)(v3 + 32);
  v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v9 = *(float **)(v3 + 8);
  v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    v10 = *v9++;
    result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_18F248870(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D798;
  *(_DWORD *)(result + 132) = 0;
  return result;
}

void sub_18F248888(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2488AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "configSuddenTransitionDurationThreshold", *(float *)(a1 + 48));
    v5 = *(_DWORD *)(a1 + 132);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_34;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configTransitionEndSpeedThreshold", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0)
      goto LABEL_5;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "configTransitionStartSpeedThreshold", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "deltaTriggerTime");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0)
      goto LABEL_7;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "gpsSpeedMetersPerSecond", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0)
      goto LABEL_8;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "gpsSpeedMilesPerHour", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "gpsTimestamp");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_10;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "highSpeedMetersPerSecondThreshold", *(float *)(a1 + 72));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "isGPSDetected");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_12;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "isGPSDetectedDebug");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_13;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "isSuddenTransitionDetected");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "isTransitionDetected");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedEnd", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "lastDetectedTransitionSpeedStart", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "lastDetectedTransitionTimeEnd");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_18;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "lastDetectedTransitionTimeStart");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "loggedAtEpoch");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0)
      goto LABEL_20;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "lowSpeedMetersPerSecondThresold", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0)
      goto LABEL_21;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "state");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0)
      goto LABEL_22;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "streamEndSpeed", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 8) == 0)
      goto LABEL_23;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "streamStartSpeed", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 8) == 0)
  {
LABEL_23:
    if ((v5 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "timestamp");
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x40000) == 0)
  {
LABEL_24:
    if ((v5 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "transitionBaseDuration", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x80000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "transitionDuration", *(float *)(a1 + 104));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "transitionEndSpeed", *(float *)(a1 + 108));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "transitionEpsilonDuration", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0)
      goto LABEL_29;
LABEL_59:
    PB::TextFormatter::format(this, "transitionStartSpeed", *(float *)(a1 + 120));
    if ((*(_DWORD *)(a1 + 132) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_30;
  }
LABEL_58:
  PB::TextFormatter::format(this, "transitionSpeedStart", *(float *)(a1 + 116));
  v5 = *(_DWORD *)(a1 + 132);
  if ((v5 & 0x800000) != 0)
    goto LABEL_59;
LABEL_29:
  if ((v5 & 0x10) != 0)
LABEL_30:
    PB::TextFormatter::format(this, "transitionTimeStart");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F248C7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  int v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  int v69;
  BOOL v70;
  int v71;
  BOOL v72;
  uint64_t result;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  char v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 200)
      {
        switch((int)v20)
        {
          case 201:
            *(_DWORD *)(a1 + 132) |= 8u;
            v23 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v24 = *(_QWORD *)this;
            if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
            {
              v74 = 0;
              v75 = 0;
              v27 = 0;
              if (v2 <= v23)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v23)
                {
                  v27 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_208;
                }
                v76 = v23++;
                v77 = *(_BYTE *)(v24 + v76);
                *((_QWORD *)this + 1) = v23;
                v27 |= (unint64_t)(v77 & 0x7F) << v74;
                if ((v77 & 0x80) == 0)
                  break;
                v74 += 7;
                v14 = v75++ > 8;
                if (v14)
                {
                  v27 = 0;
LABEL_207:
                  v2 = v76 + 1;
                  goto LABEL_208;
                }
              }
              if (*((_BYTE *)this + 24))
                v27 = 0;
              goto LABEL_207;
            }
            v25 = 0;
            v26 = 0;
            v27 = 0;
            do
            {
              v2 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v28 = *(_BYTE *)(v24 + v23);
              v27 |= (unint64_t)(v28 & 0x7F) << v25;
              if ((v28 & 0x80) == 0)
                goto LABEL_208;
              v25 += 7;
              v23 = v2;
              v14 = v26++ > 8;
            }
            while (!v14);
            v27 = 0;
LABEL_208:
            *(_QWORD *)(a1 + 32) = v27;
            break;
          case 202:
            *(_DWORD *)(a1 + 132) |= 0x1000000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v44 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v43 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v44 = v43 != 0;
            }
            *(_BYTE *)(a1 + 124) = v44;
            break;
          case 203:
            *(_DWORD *)(a1 + 132) |= 0x8000u;
            v45 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v46 = *(_QWORD *)this;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              v86 = 0;
              v87 = 0;
              v49 = 0;
              if (v2 <= v45)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v45)
                {
                  LODWORD(v49) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_223;
                }
                v88 = v45++;
                v89 = *(_BYTE *)(v46 + v88);
                *((_QWORD *)this + 1) = v45;
                v49 |= (unint64_t)(v89 & 0x7F) << v86;
                if ((v89 & 0x80) == 0)
                  break;
                v86 += 7;
                v14 = v87++ > 8;
                if (v14)
                {
                  LODWORD(v49) = 0;
LABEL_222:
                  v2 = v88 + 1;
                  goto LABEL_223;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v49) = 0;
              goto LABEL_222;
            }
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v2 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
                goto LABEL_223;
              v47 += 7;
              v45 = v2;
              v14 = v48++ > 8;
            }
            while (!v14);
            LODWORD(v49) = 0;
LABEL_223:
            *(_DWORD *)(a1 + 88) = v49;
            break;
          case 204:
            *(_DWORD *)(a1 + 132) |= 0x10u;
            v51 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v52 = *(_QWORD *)this;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              v90 = 0;
              v91 = 0;
              v55 = 0;
              if (v2 <= v51)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v51)
                {
                  v55 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_228;
                }
                v92 = v51++;
                v93 = *(_BYTE *)(v52 + v92);
                *((_QWORD *)this + 1) = v51;
                v55 |= (unint64_t)(v93 & 0x7F) << v90;
                if ((v93 & 0x80) == 0)
                  break;
                v90 += 7;
                v14 = v91++ > 8;
                if (v14)
                {
                  v55 = 0;
LABEL_227:
                  v2 = v92 + 1;
                  goto LABEL_228;
                }
              }
              if (*((_BYTE *)this + 24))
                v55 = 0;
              goto LABEL_227;
            }
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v2 = v51 + 1;
              *((_QWORD *)this + 1) = v51 + 1;
              v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0)
                goto LABEL_228;
              v53 += 7;
              v51 = v2;
              v14 = v54++ > 8;
            }
            while (!v14);
            v55 = 0;
LABEL_228:
            *(_QWORD *)(a1 + 40) = v55;
            break;
          case 205:
            *(_DWORD *)(a1 + 132) |= 0x400000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 206:
            *(_DWORD *)(a1 + 132) |= 4u;
            v57 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v58 = *(_QWORD *)this;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              v94 = 0;
              v95 = 0;
              v61 = 0;
              if (v2 <= v57)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v57)
                {
                  v61 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_233;
                }
                v96 = v57++;
                v97 = *(_BYTE *)(v58 + v96);
                *((_QWORD *)this + 1) = v57;
                v61 |= (unint64_t)(v97 & 0x7F) << v94;
                if ((v97 & 0x80) == 0)
                  break;
                v94 += 7;
                v14 = v95++ > 8;
                if (v14)
                {
                  v61 = 0;
LABEL_232:
                  v2 = v96 + 1;
                  goto LABEL_233;
                }
              }
              if (*((_BYTE *)this + 24))
                v61 = 0;
              goto LABEL_232;
            }
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v2 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0)
                goto LABEL_233;
              v59 += 7;
              v57 = v2;
              v14 = v60++ > 8;
            }
            while (!v14);
            v61 = 0;
LABEL_233:
            *(_QWORD *)(a1 + 24) = v61;
            break;
          case 207:
            *(_DWORD *)(a1 + 132) |= 0x2000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 208:
            *(_DWORD *)(a1 + 132) |= 2u;
            v63 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v64 = *(_QWORD *)this;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              v98 = 0;
              v99 = 0;
              v67 = 0;
              if (v2 <= v63)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v63)
                {
                  v67 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_238;
                }
                v100 = v63++;
                v101 = *(_BYTE *)(v64 + v100);
                *((_QWORD *)this + 1) = v63;
                v67 |= (unint64_t)(v101 & 0x7F) << v98;
                if ((v101 & 0x80) == 0)
                  break;
                v98 += 7;
                v14 = v99++ > 8;
                if (v14)
                {
                  v67 = 0;
LABEL_237:
                  v2 = v100 + 1;
                  goto LABEL_238;
                }
              }
              if (*((_BYTE *)this + 24))
                v67 = 0;
              goto LABEL_237;
            }
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v2 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0)
                goto LABEL_238;
              v65 += 7;
              v63 = v2;
              v14 = v66++ > 8;
            }
            while (!v14);
            v67 = 0;
LABEL_238:
            *(_QWORD *)(a1 + 16) = v67;
            break;
          case 209:
            *(_DWORD *)(a1 + 132) |= 0x1000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            {
LABEL_137:
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_198:
              v2 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v2;
            }
            break;
          default:
            switch((int)v20)
            {
              case 301:
                *(_DWORD *)(a1 + 132) |= 1u;
                v29 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v30 = *(_QWORD *)this;
                if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
                {
                  v78 = 0;
                  v79 = 0;
                  v33 = 0;
                  if (v2 <= v29)
                    v2 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v2 == v29)
                    {
                      v33 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_213;
                    }
                    v80 = v29++;
                    v81 = *(_BYTE *)(v30 + v80);
                    *((_QWORD *)this + 1) = v29;
                    v33 |= (unint64_t)(v81 & 0x7F) << v78;
                    if ((v81 & 0x80) == 0)
                      break;
                    v78 += 7;
                    v14 = v79++ > 8;
                    if (v14)
                    {
                      v33 = 0;
LABEL_212:
                      v2 = v80 + 1;
                      goto LABEL_213;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v33 = 0;
                  goto LABEL_212;
                }
                v31 = 0;
                v32 = 0;
                v33 = 0;
                do
                {
                  v2 = v29 + 1;
                  *((_QWORD *)this + 1) = v29 + 1;
                  v34 = *(_BYTE *)(v30 + v29);
                  v33 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    goto LABEL_213;
                  v31 += 7;
                  v29 = v2;
                  v14 = v32++ > 8;
                }
                while (!v14);
                v33 = 0;
LABEL_213:
                *(_QWORD *)(a1 + 8) = v33;
                break;
              case 302:
                *(_DWORD *)(a1 + 132) |= 0x200u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
                goto LABEL_198;
              case 303:
                *(_DWORD *)(a1 + 132) |= 0x400u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
                goto LABEL_198;
              case 304:
                *(_DWORD *)(a1 + 132) |= 0x10000000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 >= *((_QWORD *)this + 2))
                {
                  v70 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v69 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                  *((_QWORD *)this + 1) = v2;
                  v70 = v69 != 0;
                }
                *(_BYTE *)(a1 + 128) = v70;
                goto LABEL_199;
              case 305:
                *(_DWORD *)(a1 + 132) |= 0x2000000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 >= *((_QWORD *)this + 2))
                {
                  v72 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v71 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                  *((_QWORD *)this + 1) = v2;
                  v72 = v71 != 0;
                }
                *(_BYTE *)(a1 + 125) = v72;
                goto LABEL_199;
              default:
LABEL_127:
                result = PB::Reader::skip(this);
                if (!(_DWORD)result)
                  return result;
                v2 = *((_QWORD *)this + 1);
                goto LABEL_199;
            }
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 1:
            *(_DWORD *)(a1 + 132) |= 0x4000000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v22 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v22 = v21 != 0;
            }
            *(_BYTE *)(a1 + 126) = v22;
            break;
          case 2:
            *(_DWORD *)(a1 + 132) |= 0x8000000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 127) = v36;
            break;
          case 3:
            *(_DWORD *)(a1 + 132) |= 0x80000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 4:
            *(_DWORD *)(a1 + 132) |= 0x800000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 5:
            *(_DWORD *)(a1 + 132) |= 0x100000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 6:
            *(_DWORD *)(a1 + 132) |= 0x20000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 7:
            *(_DWORD *)(a1 + 132) |= 0x10000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 8:
            *(_DWORD *)(a1 + 132) |= 0x100u;
            v37 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v38 = *(_QWORD *)this;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              v82 = 0;
              v83 = 0;
              v41 = 0;
              if (v2 <= v37)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_218;
                }
                v84 = v37++;
                v85 = *(_BYTE *)(v38 + v84);
                *((_QWORD *)this + 1) = v37;
                v41 |= (unint64_t)(v85 & 0x7F) << v82;
                if ((v85 & 0x80) == 0)
                  break;
                v82 += 7;
                v14 = v83++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_217:
                  v2 = v84 + 1;
                  goto LABEL_218;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v41) = 0;
              goto LABEL_217;
            }
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v2 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0)
                goto LABEL_218;
              v39 += 7;
              v37 = v2;
              v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_218:
            *(_DWORD *)(a1 + 60) = v41;
            break;
          case 9:
            *(_DWORD *)(a1 + 132) |= 0x80u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 10:
            *(_DWORD *)(a1 + 132) |= 0x40u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          case 11:
            *(_DWORD *)(a1 + 132) |= 0x20u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_137;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_198;
          default:
            switch((int)v20)
            {
              case 'e':
                *(_DWORD *)(a1 + 132) |= 0x800u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              case 'f':
                *(_DWORD *)(a1 + 132) |= 0x4000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              case 'g':
                *(_DWORD *)(a1 + 132) |= 0x200000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              case 'h':
                *(_DWORD *)(a1 + 132) |= 0x40000u;
                v2 = *((_QWORD *)this + 1);
                if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_137;
                *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
                break;
              default:
                goto LABEL_127;
            }
            goto LABEL_198;
        }
      }
LABEL_199:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2499FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 132);
  if ((v4 & 0x4000000) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_DWORD *)(v3 + 132);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_33;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0)
      goto LABEL_5;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0)
      goto LABEL_7;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x200000) == 0)
      goto LABEL_15;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0)
      goto LABEL_17;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_18;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x8000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0)
      goto LABEL_22;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0)
      goto LABEL_24;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 1) == 0)
      goto LABEL_26;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 1) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0)
      goto LABEL_28;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 132);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x2000000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_58:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 132) & 0x2000000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F249D4C(uint64_t result)
{
  *(_QWORD *)result = &off_1E29514A0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F249D64(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F249D88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "autocorrelationRangeValCriticalThreshold", *(float *)(a1 + 32));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "autocorrelationRangeValThreshold", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "autocorrelationTimeVariationCriticalThreshold");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "autocorrelationTimeVariationThreshold");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isCriticalFP");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isPeriodic");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "numDmSamplesEpoch");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timeVariation");
    if ((*(_WORD *)(a1 + 64) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "rangeVal", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 4) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F249F38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  char v66;
  uint64_t result;
  char v68;
  unsigned int v69;
  unint64_t v70;
  char v71;
  char v72;
  unsigned int v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 202)
      {
        switch((int)v20)
        {
          case 301:
            *(_WORD *)(a1 + 64) |= 1u;
            v27 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v28 = *(_QWORD *)this;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              v72 = 0;
              v73 = 0;
              v31 = 0;
              if (v2 <= v27)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v27)
                {
                  v31 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_155;
                }
                v74 = v27++;
                v75 = *(_BYTE *)(v28 + v74);
                *((_QWORD *)this + 1) = v27;
                v31 |= (unint64_t)(v75 & 0x7F) << v72;
                if ((v75 & 0x80) == 0)
                  break;
                v72 += 7;
                v14 = v73++ > 8;
                if (v14)
                {
                  v31 = 0;
LABEL_154:
                  v2 = v74 + 1;
                  goto LABEL_155;
                }
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
              goto LABEL_154;
            }
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v2 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                goto LABEL_155;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
            }
            while (!v14);
            v31 = 0;
LABEL_155:
            *(_QWORD *)(a1 + 8) = v31;
            break;
          case 302:
            *(_WORD *)(a1 + 64) |= 2u;
            v43 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v44 = *(_QWORD *)this;
            if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
            {
              v80 = 0;
              v81 = 0;
              v47 = 0;
              if (v2 <= v43)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v43)
                {
                  v47 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_165;
                }
                v82 = v43++;
                v83 = *(_BYTE *)(v44 + v82);
                *((_QWORD *)this + 1) = v43;
                v47 |= (unint64_t)(v83 & 0x7F) << v80;
                if ((v83 & 0x80) == 0)
                  break;
                v80 += 7;
                v14 = v81++ > 8;
                if (v14)
                {
                  v47 = 0;
LABEL_164:
                  v2 = v82 + 1;
                  goto LABEL_165;
                }
              }
              if (*((_BYTE *)this + 24))
                v47 = 0;
              goto LABEL_164;
            }
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v2 = v43 + 1;
              *((_QWORD *)this + 1) = v43 + 1;
              v48 = *(_BYTE *)(v44 + v43);
              v47 |= (unint64_t)(v48 & 0x7F) << v45;
              if ((v48 & 0x80) == 0)
                goto LABEL_165;
              v45 += 7;
              v43 = v2;
              v14 = v46++ > 8;
            }
            while (!v14);
            v47 = 0;
LABEL_165:
            *(_QWORD *)(a1 + 16) = v47;
            break;
          case 303:
            *(_WORD *)(a1 + 64) |= 0x200u;
            v49 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v50 = *(_QWORD *)this;
            if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
            {
              v84 = 0;
              v85 = 0;
              v53 = 0;
              if (v2 <= v49)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v49)
                {
                  LODWORD(v53) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_170;
                }
                v86 = v49++;
                v87 = *(_BYTE *)(v50 + v86);
                *((_QWORD *)this + 1) = v49;
                v53 |= (unint64_t)(v87 & 0x7F) << v84;
                if ((v87 & 0x80) == 0)
                  break;
                v84 += 7;
                v14 = v85++ > 8;
                if (v14)
                {
                  LODWORD(v53) = 0;
LABEL_169:
                  v2 = v86 + 1;
                  goto LABEL_170;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v53) = 0;
              goto LABEL_169;
            }
            v51 = 0;
            v52 = 0;
            v53 = 0;
            do
            {
              v2 = v49 + 1;
              *((_QWORD *)this + 1) = v49 + 1;
              v54 = *(_BYTE *)(v50 + v49);
              v53 |= (unint64_t)(v54 & 0x7F) << v51;
              if ((v54 & 0x80) == 0)
                goto LABEL_170;
              v51 += 7;
              v49 = v2;
              v14 = v52++ > 8;
            }
            while (!v14);
            LODWORD(v53) = 0;
LABEL_170:
            *(_DWORD *)(a1 + 56) = v53;
            break;
          case 304:
            *(_WORD *)(a1 + 64) |= 0x100u;
            v2 = *((_QWORD *)this + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_145:
              v2 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v2;
            }
            else
            {
LABEL_74:
              *((_BYTE *)this + 24) = 1;
            }
            break;
          case 305:
            *(_WORD *)(a1 + 64) |= 0x80u;
            v55 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v56 = *(_QWORD *)this;
            if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
            {
              v88 = 0;
              v89 = 0;
              v59 = 0;
              if (v2 <= v55)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v55)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_175;
                }
                v90 = v55++;
                v91 = *(_BYTE *)(v56 + v90);
                *((_QWORD *)this + 1) = v55;
                v59 |= (unint64_t)(v91 & 0x7F) << v88;
                if ((v91 & 0x80) == 0)
                  break;
                v88 += 7;
                v14 = v89++ > 8;
                if (v14)
                {
                  LODWORD(v59) = 0;
LABEL_174:
                  v2 = v90 + 1;
                  goto LABEL_175;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v59) = 0;
              goto LABEL_174;
            }
            v57 = 0;
            v58 = 0;
            v59 = 0;
            do
            {
              v2 = v55 + 1;
              *((_QWORD *)this + 1) = v55 + 1;
              v60 = *(_BYTE *)(v56 + v55);
              v59 |= (unint64_t)(v60 & 0x7F) << v57;
              if ((v60 & 0x80) == 0)
                goto LABEL_175;
              v57 += 7;
              v55 = v2;
              v14 = v58++ > 8;
            }
            while (!v14);
            LODWORD(v59) = 0;
LABEL_175:
            *(_DWORD *)(a1 + 48) = v59;
            break;
          default:
            if ((_DWORD)v20 != 203)
              goto LABEL_89;
            *(_WORD *)(a1 + 64) |= 0x400u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 60) = v36;
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 'e':
            *(_WORD *)(a1 + 64) |= 0x40u;
            v21 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v22 = *(_QWORD *)this;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              v68 = 0;
              v69 = 0;
              v25 = 0;
              if (v2 <= v21)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v21)
                {
                  LODWORD(v25) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_150;
                }
                v70 = v21++;
                v71 = *(_BYTE *)(v22 + v70);
                *((_QWORD *)this + 1) = v21;
                v25 |= (unint64_t)(v71 & 0x7F) << v68;
                if ((v71 & 0x80) == 0)
                  break;
                v68 += 7;
                v14 = v69++ > 8;
                if (v14)
                {
                  LODWORD(v25) = 0;
LABEL_149:
                  v2 = v70 + 1;
                  goto LABEL_150;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v25) = 0;
              goto LABEL_149;
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_150;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
            }
            while (!v14);
            LODWORD(v25) = 0;
LABEL_150:
            *(_DWORD *)(a1 + 44) = v25;
            break;
          case 'f':
            *(_WORD *)(a1 + 64) |= 0x10u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_74;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_145;
          case 'g':
            *(_WORD *)(a1 + 64) |= 0x20u;
            v37 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v38 = *(_QWORD *)this;
            if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
            {
              v76 = 0;
              v77 = 0;
              v41 = 0;
              if (v2 <= v37)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v37)
                {
                  LODWORD(v41) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_160;
                }
                v78 = v37++;
                v79 = *(_BYTE *)(v38 + v78);
                *((_QWORD *)this + 1) = v37;
                v41 |= (unint64_t)(v79 & 0x7F) << v76;
                if ((v79 & 0x80) == 0)
                  break;
                v76 += 7;
                v14 = v77++ > 8;
                if (v14)
                {
                  LODWORD(v41) = 0;
LABEL_159:
                  v2 = v78 + 1;
                  goto LABEL_160;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v41) = 0;
              goto LABEL_159;
            }
            v39 = 0;
            v40 = 0;
            v41 = 0;
            do
            {
              v2 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v42 = *(_BYTE *)(v38 + v37);
              v41 |= (unint64_t)(v42 & 0x7F) << v39;
              if ((v42 & 0x80) == 0)
                goto LABEL_160;
              v39 += 7;
              v37 = v2;
              v14 = v40++ > 8;
            }
            while (!v14);
            LODWORD(v41) = 0;
LABEL_160:
            *(_DWORD *)(a1 + 40) = v41;
            break;
          case 'h':
            *(_WORD *)(a1 + 64) |= 8u;
            v2 = *((_QWORD *)this + 1);
            if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
              goto LABEL_74;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_145;
          default:
            if ((_DWORD)v20 == 201)
            {
              *(_WORD *)(a1 + 64) |= 4u;
              v61 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v62 = *(_QWORD *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                v65 = 0;
                if (v2 <= v61)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v61)
                  {
                    v65 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_180;
                  }
                  v94 = v61++;
                  v95 = *(_BYTE *)(v62 + v94);
                  *((_QWORD *)this + 1) = v61;
                  v65 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0)
                    break;
                  v92 += 7;
                  v14 = v93++ > 8;
                  if (v14)
                  {
                    v65 = 0;
                    goto LABEL_179;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v65 = 0;
LABEL_179:
                v2 = v94 + 1;
              }
              else
              {
                v63 = 0;
                v64 = 0;
                v65 = 0;
                while (1)
                {
                  v2 = v61 + 1;
                  *((_QWORD *)this + 1) = v61 + 1;
                  v66 = *(_BYTE *)(v62 + v61);
                  v65 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v61 = v2;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    v65 = 0;
                    break;
                  }
                }
              }
LABEL_180:
              *(_QWORD *)(a1 + 24) = v65;
            }
            else if ((_DWORD)v20 == 202)
            {
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 61) = v34;
            }
            else
            {
LABEL_89:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
            }
            break;
        }
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F24A8A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  if ((*(_WORD *)(v3 + 64) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F24AA18(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950630;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_18F24AA30(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F24AA54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x800) != 0)
  {
    PB::TextFormatter::format(this, "crashDetectorDecision");
    v5 = *(_DWORD *)(a1 + 68);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_26;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "detectorPostTriggerTimeOffsetWindow", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x1000) == 0)
      goto LABEL_5;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "detectorPreTriggerTimeOffsetWindow", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x1000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "earlyCrashDetectorDecision");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "epochLatchingCount", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0)
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hasAudioInEpoch");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0)
      goto LABEL_9;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "isAudio");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10000) == 0)
      goto LABEL_10;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "isBaro");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x10000) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "isDescalationDecided");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "isDescalationRequired");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "isFreeFall");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100000) == 0)
      goto LABEL_14;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isGPS");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x100000) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0)
      goto LABEL_15;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isPulse");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "latchedIsAudio");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_16:
    if ((v5 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "latchedIsBaro");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_17:
    if ((v5 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "latchedIsDescalationDecided");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_18:
    if ((v5 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "latchedIsDescalationRequired");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "latchedIsFreeFall");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0)
      goto LABEL_21;
LABEL_43:
    PB::TextFormatter::format(this, "latchedIsPulse");
    if ((*(_DWORD *)(a1 + 68) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_22;
  }
LABEL_42:
  PB::TextFormatter::format(this, "latchedIsGPS");
  v5 = *(_DWORD *)(a1 + 68);
  if ((v5 & 0x400) != 0)
    goto LABEL_43;
LABEL_21:
  if ((v5 & 1) != 0)
LABEL_22:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F24AD24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  char v77;
  int v78;
  BOOL v79;
  int v80;
  BOOL v81;
  int v82;
  BOOL v83;
  int v84;
  BOOL v85;
  int v86;
  BOOL v87;
  int v88;
  BOOL v89;
  char v90;
  unsigned int v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  unint64_t v100;
  char v101;
  char v102;
  unsigned int v103;
  unint64_t v104;
  char v105;
  char v106;
  unsigned int v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  unint64_t v112;
  char v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  char v117;
  char v118;
  unsigned int v119;
  unint64_t v120;
  char v121;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((int)(v11 >> 3) > 200)
    {
      switch((int)v20)
      {
        case 301:
          *(_DWORD *)(a1 + 68) |= 0x100000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v28 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v28 = v27 != 0;
          }
          *(_BYTE *)(a1 + 65) = v28;
          break;
        case 302:
          *(_DWORD *)(a1 + 68) |= 0x40000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v79 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v78 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v79 = v78 != 0;
          }
          *(_BYTE *)(a1 + 63) = v79;
          break;
        case 303:
          *(_DWORD *)(a1 + 68) |= 0x8000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v81 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v81 = v80 != 0;
          }
          *(_BYTE *)(a1 + 60) = v81;
          break;
        case 304:
          *(_DWORD *)(a1 + 68) |= 0x4000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v83 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v82 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v83 = v82 != 0;
          }
          *(_BYTE *)(a1 + 59) = v83;
          break;
        case 305:
          *(_DWORD *)(a1 + 68) |= 0x80000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v85 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v85 = v84 != 0;
          }
          *(_BYTE *)(a1 + 64) = v85;
          break;
        case 306:
          *(_DWORD *)(a1 + 68) |= 0x10000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v87 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v86 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v87 = v86 != 0;
          }
          *(_BYTE *)(a1 + 61) = v87;
          break;
        case 307:
          *(_DWORD *)(a1 + 68) |= 0x20000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v89 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v89 = v88 != 0;
          }
          *(_BYTE *)(a1 + 62) = v89;
          break;
        default:
          switch((int)v20)
          {
            case 401:
              *(_DWORD *)(a1 + 68) |= 0x400u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v94 = 0;
                v95 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_207;
                  }
                  v96 = v21++;
                  v97 = *(_BYTE *)(v22 + v96);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v97 & 0x7F) << v94;
                  if ((v97 & 0x80) == 0)
                    break;
                  v94 += 7;
                  v14 = v95++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
LABEL_206:
                v2 = v96 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                while (1)
                {
                  v2 = v21 + 1;
                  *((_QWORD *)this + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    break;
                  v23 += 7;
                  v21 = v2;
                  v14 = v24++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    break;
                  }
                }
              }
LABEL_207:
              *(_DWORD *)(a1 + 52) = v25;
              break;
            case 402:
              *(_DWORD *)(a1 + 68) |= 0x100u;
              v42 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v43 = *(_QWORD *)this;
              if (v42 > 0xFFFFFFFFFFFFFFF5 || v42 + 10 > v2)
              {
                v98 = 0;
                v99 = 0;
                v46 = 0;
                if (v2 <= v42)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v42)
                  {
                    LODWORD(v46) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_212;
                  }
                  v100 = v42++;
                  v101 = *(_BYTE *)(v43 + v100);
                  *((_QWORD *)this + 1) = v42;
                  v46 |= (unint64_t)(v101 & 0x7F) << v98;
                  if ((v101 & 0x80) == 0)
                    break;
                  v98 += 7;
                  v14 = v99++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v46) = 0;
LABEL_211:
                v2 = v100 + 1;
              }
              else
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                while (1)
                {
                  v2 = v42 + 1;
                  *((_QWORD *)this + 1) = v42 + 1;
                  v47 = *(_BYTE *)(v43 + v42);
                  v46 |= (unint64_t)(v47 & 0x7F) << v44;
                  if ((v47 & 0x80) == 0)
                    break;
                  v44 += 7;
                  v42 = v2;
                  v14 = v45++ > 8;
                  if (v14)
                  {
                    LODWORD(v46) = 0;
                    break;
                  }
                }
              }
LABEL_212:
              *(_DWORD *)(a1 + 44) = v46;
              break;
            case 403:
              *(_DWORD *)(a1 + 68) |= 0x20u;
              v48 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v49 = *(_QWORD *)this;
              if (v48 > 0xFFFFFFFFFFFFFFF5 || v48 + 10 > v2)
              {
                v102 = 0;
                v103 = 0;
                v52 = 0;
                if (v2 <= v48)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v48)
                  {
                    LODWORD(v52) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_217;
                  }
                  v104 = v48++;
                  v105 = *(_BYTE *)(v49 + v104);
                  *((_QWORD *)this + 1) = v48;
                  v52 |= (unint64_t)(v105 & 0x7F) << v102;
                  if ((v105 & 0x80) == 0)
                    break;
                  v102 += 7;
                  v14 = v103++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v52) = 0;
LABEL_216:
                v2 = v104 + 1;
              }
              else
              {
                v50 = 0;
                v51 = 0;
                v52 = 0;
                while (1)
                {
                  v2 = v48 + 1;
                  *((_QWORD *)this + 1) = v48 + 1;
                  v53 = *(_BYTE *)(v49 + v48);
                  v52 |= (unint64_t)(v53 & 0x7F) << v50;
                  if ((v53 & 0x80) == 0)
                    break;
                  v50 += 7;
                  v48 = v2;
                  v14 = v51++ > 8;
                  if (v14)
                  {
                    LODWORD(v52) = 0;
                    break;
                  }
                }
              }
LABEL_217:
              *(_DWORD *)(a1 + 32) = v52;
              break;
            case 404:
              *(_DWORD *)(a1 + 68) |= 0x10u;
              v54 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v55 = *(_QWORD *)this;
              if (v54 > 0xFFFFFFFFFFFFFFF5 || v54 + 10 > v2)
              {
                v106 = 0;
                v107 = 0;
                v58 = 0;
                if (v2 <= v54)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v54)
                  {
                    LODWORD(v58) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_222;
                  }
                  v108 = v54++;
                  v109 = *(_BYTE *)(v55 + v108);
                  *((_QWORD *)this + 1) = v54;
                  v58 |= (unint64_t)(v109 & 0x7F) << v106;
                  if ((v109 & 0x80) == 0)
                    break;
                  v106 += 7;
                  v14 = v107++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    goto LABEL_221;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v58) = 0;
LABEL_221:
                v2 = v108 + 1;
              }
              else
              {
                v56 = 0;
                v57 = 0;
                v58 = 0;
                while (1)
                {
                  v2 = v54 + 1;
                  *((_QWORD *)this + 1) = v54 + 1;
                  v59 = *(_BYTE *)(v55 + v54);
                  v58 |= (unint64_t)(v59 & 0x7F) << v56;
                  if ((v59 & 0x80) == 0)
                    break;
                  v56 += 7;
                  v54 = v2;
                  v14 = v57++ > 8;
                  if (v14)
                  {
                    LODWORD(v58) = 0;
                    break;
                  }
                }
              }
LABEL_222:
              *(_DWORD *)(a1 + 28) = v58;
              break;
            case 405:
              *(_DWORD *)(a1 + 68) |= 0x200u;
              v60 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v61 = *(_QWORD *)this;
              if (v60 > 0xFFFFFFFFFFFFFFF5 || v60 + 10 > v2)
              {
                v110 = 0;
                v111 = 0;
                v64 = 0;
                if (v2 <= v60)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v60)
                  {
                    LODWORD(v64) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_227;
                  }
                  v112 = v60++;
                  v113 = *(_BYTE *)(v61 + v112);
                  *((_QWORD *)this + 1) = v60;
                  v64 |= (unint64_t)(v113 & 0x7F) << v110;
                  if ((v113 & 0x80) == 0)
                    break;
                  v110 += 7;
                  v14 = v111++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    goto LABEL_226;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v64) = 0;
LABEL_226:
                v2 = v112 + 1;
              }
              else
              {
                v62 = 0;
                v63 = 0;
                v64 = 0;
                while (1)
                {
                  v2 = v60 + 1;
                  *((_QWORD *)this + 1) = v60 + 1;
                  v65 = *(_BYTE *)(v61 + v60);
                  v64 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v60 = v2;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v64) = 0;
                    break;
                  }
                }
              }
LABEL_227:
              *(_DWORD *)(a1 + 48) = v64;
              break;
            case 406:
              *(_DWORD *)(a1 + 68) |= 0x40u;
              v66 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v67 = *(_QWORD *)this;
              if (v66 > 0xFFFFFFFFFFFFFFF5 || v66 + 10 > v2)
              {
                v114 = 0;
                v115 = 0;
                v70 = 0;
                if (v2 <= v66)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v66)
                  {
                    LODWORD(v70) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_232;
                  }
                  v116 = v66++;
                  v117 = *(_BYTE *)(v67 + v116);
                  *((_QWORD *)this + 1) = v66;
                  v70 |= (unint64_t)(v117 & 0x7F) << v114;
                  if ((v117 & 0x80) == 0)
                    break;
                  v114 += 7;
                  v14 = v115++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    goto LABEL_231;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v70) = 0;
LABEL_231:
                v2 = v116 + 1;
              }
              else
              {
                v68 = 0;
                v69 = 0;
                v70 = 0;
                while (1)
                {
                  v2 = v66 + 1;
                  *((_QWORD *)this + 1) = v66 + 1;
                  v71 = *(_BYTE *)(v67 + v66);
                  v70 |= (unint64_t)(v71 & 0x7F) << v68;
                  if ((v71 & 0x80) == 0)
                    break;
                  v68 += 7;
                  v66 = v2;
                  v14 = v69++ > 8;
                  if (v14)
                  {
                    LODWORD(v70) = 0;
                    break;
                  }
                }
              }
LABEL_232:
              *(_DWORD *)(a1 + 36) = v70;
              break;
            case 407:
              *(_DWORD *)(a1 + 68) |= 0x80u;
              v72 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v73 = *(_QWORD *)this;
              if (v72 > 0xFFFFFFFFFFFFFFF5 || v72 + 10 > v2)
              {
                v118 = 0;
                v119 = 0;
                v76 = 0;
                if (v2 <= v72)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v72)
                  {
                    LODWORD(v76) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_237;
                  }
                  v120 = v72++;
                  v121 = *(_BYTE *)(v73 + v120);
                  *((_QWORD *)this + 1) = v72;
                  v76 |= (unint64_t)(v121 & 0x7F) << v118;
                  if ((v121 & 0x80) == 0)
                    break;
                  v118 += 7;
                  v14 = v119++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    goto LABEL_236;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v76) = 0;
LABEL_236:
                v2 = v120 + 1;
              }
              else
              {
                v74 = 0;
                v75 = 0;
                v76 = 0;
                while (1)
                {
                  v2 = v72 + 1;
                  *((_QWORD *)this + 1) = v72 + 1;
                  v77 = *(_BYTE *)(v73 + v72);
                  v76 |= (unint64_t)(v77 & 0x7F) << v74;
                  if ((v77 & 0x80) == 0)
                    break;
                  v74 += 7;
                  v72 = v2;
                  v14 = v75++ > 8;
                  if (v14)
                  {
                    LODWORD(v76) = 0;
                    break;
                  }
                }
              }
LABEL_237:
              *(_DWORD *)(a1 + 40) = v76;
              break;
            default:
              if ((_DWORD)v20 != 201)
                goto LABEL_64;
              *(_DWORD *)(a1 + 68) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 58) = v32;
              break;
          }
          break;
      }
      goto LABEL_238;
    }
    if ((int)v20 > 100)
    {
      switch((_DWORD)v20)
      {
        case 'e':
          *(_DWORD *)(a1 + 68) |= 1u;
          v33 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v34 = *(_QWORD *)this;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            v90 = 0;
            v91 = 0;
            v37 = 0;
            if (v2 <= v33)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v33)
              {
                v37 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_202;
              }
              v92 = v33++;
              v93 = *(_BYTE *)(v34 + v92);
              *((_QWORD *)this + 1) = v33;
              v37 |= (unint64_t)(v93 & 0x7F) << v90;
              if ((v93 & 0x80) == 0)
                break;
              v90 += 7;
              v14 = v91++ > 8;
              if (v14)
              {
                v37 = 0;
                goto LABEL_201;
              }
            }
            if (*((_BYTE *)this + 24))
              v37 = 0;
LABEL_201:
            v2 = v92 + 1;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v2 = v33 + 1;
              *((_QWORD *)this + 1) = v33 + 1;
              v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0)
                break;
              v35 += 7;
              v33 = v2;
              v14 = v36++ > 8;
              if (v14)
              {
                v37 = 0;
                break;
              }
            }
          }
LABEL_202:
          *(_QWORD *)(a1 + 8) = v37;
          break;
        case 'f':
          *(_DWORD *)(a1 + 68) |= 0x800u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v40 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v40 = v39 != 0;
          }
          *(_BYTE *)(a1 + 56) = v40;
          break;
        case 'g':
          *(_DWORD *)(a1 + 68) |= 0x1000u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v30 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v30 = v29 != 0;
          }
          *(_BYTE *)(a1 + 57) = v30;
          break;
        default:
LABEL_64:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
    }
    else
    {
      switch((_DWORD)v20)
      {
        case 1:
          *(_DWORD *)(a1 + 68) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_197;
          }
          break;
        case 2:
          *(_DWORD *)(a1 + 68) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
            goto LABEL_197;
          }
          break;
        case 3:
          *(_DWORD *)(a1 + 68) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_197:
            v2 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v2;
            goto LABEL_238;
          }
          break;
        default:
          goto LABEL_64;
      }
      *((_BYTE *)this + 24) = 1;
    }
LABEL_238:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_18F24B9C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 68);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 20));
    v4 = *(_DWORD *)(v3 + 68);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x4000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0)
      goto LABEL_13;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000) == 0)
      goto LABEL_15;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0)
      goto LABEL_16;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x200) == 0)
      goto LABEL_20;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0)
      goto LABEL_21;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_42:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 68) & 0x80) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F24BC34(uint64_t result)
{
  *(_QWORD *)result = &off_1E29501D0;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_18F24BC4C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F24BC70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gpsDeltaTimestamp");
    v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gpsDeltaTimestampSeconds", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "gpsIsRealSample", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "gpsSpeedMetersPerSecond", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "gpsSpeedMilesPerHour", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gpsTimestamp");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "loggedAtEpoch");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "movingGpsCount");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "movingGpsCountResetRequired");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "movingSpeedMetersPerSecondThreshold", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "movingSpeedMetersPerSecondThresholdFromSydneyB", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "numLowOrFakeSamplesInHistory");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "numSamplesInHistory");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "staticGpsCount");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "staticGpsCountResetRequired");
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "staticSpeedMetersPerSecondThreshold", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 4) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_DWORD *)(a1 + 92) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "staticSpeedMetersPerSecondThresholdFromSydneyB", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 4) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 8) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "triggerTimestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F24BF00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  int v59;
  BOOL v60;
  int v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  uint64_t result;
  char v76;
  unsigned int v77;
  unint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  unint64_t v86;
  char v87;
  char v88;
  unsigned int v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  unint64_t v94;
  char v95;
  char v96;
  unsigned int v97;
  unint64_t v98;
  char v99;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *(_DWORD *)(a1 + 92) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v80 = 0;
                v81 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }
                  v82 = v27++;
                  v83 = *(_BYTE *)(v28 + v82);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0)
                    break;
                  v80 += 7;
                  v14 = v81++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_185:
                    v2 = v82 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_185;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_186;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_186:
              *(_QWORD *)(a1 + 24) = v31;
              goto LABEL_217;
            case 'f':
              *(_DWORD *)(a1 + 92) |= 8u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v88 = 0;
                v89 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_196;
                  }
                  v90 = v41++;
                  v91 = *(_BYTE *)(v42 + v90);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v91 & 0x7F) << v88;
                  if ((v91 & 0x80) == 0)
                    break;
                  v88 += 7;
                  v14 = v89++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_195:
                    v2 = v90 + 1;
                    goto LABEL_196;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_195;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_196;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_196:
              *(_QWORD *)(a1 + 32) = v45;
              goto LABEL_217;
            case 'g':
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v92 = 0;
                v93 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_201;
                  }
                  v94 = v47++;
                  v95 = *(_BYTE *)(v48 + v94);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v95 & 0x7F) << v92;
                  if ((v95 & 0x80) == 0)
                    break;
                  v92 += 7;
                  v14 = v93++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_200:
                    v2 = v94 + 1;
                    goto LABEL_201;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_200;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_201;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_201:
              *(_DWORD *)(a1 + 76) = v51;
              goto LABEL_217;
            case 'h':
              *(_DWORD *)(a1 + 92) |= 0x100u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v96 = 0;
                v97 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  v98 = v53++;
                  v99 = *(_BYTE *)(v54 + v98);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v99 & 0x7F) << v96;
                  if ((v99 & 0x80) == 0)
                    break;
                  v96 += 7;
                  v14 = v97++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_205:
                    v2 = v98 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_205;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_206;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_206:
              *(_DWORD *)(a1 + 56) = v57;
              goto LABEL_217;
            case 'i':
              *(_DWORD *)(a1 + 92) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v60 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v59 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v60 = v59 != 0;
              }
              *(_BYTE *)(a1 + 90) = v60;
              goto LABEL_217;
            case 'j':
              *(_DWORD *)(a1 + 92) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v62 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v61 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v62 = v61 != 0;
              }
              *(_BYTE *)(a1 + 89) = v62;
              goto LABEL_217;
            case 'k':
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              v63 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                v100 = 0;
                v101 = 0;
                v67 = 0;
                if (v2 <= v63)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v63)
                  {
                    LODWORD(v67) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  v102 = v63++;
                  v103 = *(_BYTE *)(v64 + v102);
                  *((_QWORD *)this + 1) = v63;
                  v67 |= (unint64_t)(v103 & 0x7F) << v100;
                  if ((v103 & 0x80) == 0)
                    break;
                  v100 += 7;
                  v14 = v101++ > 8;
                  if (v14)
                  {
                    LODWORD(v67) = 0;
LABEL_210:
                    v2 = v102 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v67) = 0;
                goto LABEL_210;
              }
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v2 = v63 + 1;
                *((_QWORD *)this + 1) = v63 + 1;
                v68 = *(_BYTE *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0)
                  goto LABEL_211;
                v65 += 7;
                v63 = v2;
                v14 = v66++ > 8;
              }
              while (!v14);
              LODWORD(v67) = 0;
LABEL_211:
              *(_DWORD *)(a1 + 72) = v67;
              goto LABEL_217;
            case 'l':
              *(_DWORD *)(a1 + 92) |= 0x800u;
              v69 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v70 = *(_QWORD *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                v104 = 0;
                v105 = 0;
                v73 = 0;
                if (v2 <= v69)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_216;
                  }
                  v106 = v69++;
                  v107 = *(_BYTE *)(v70 + v106);
                  *((_QWORD *)this + 1) = v69;
                  v73 |= (unint64_t)(v107 & 0x7F) << v104;
                  if ((v107 & 0x80) == 0)
                    break;
                  v104 += 7;
                  v14 = v105++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_215:
                    v2 = v106 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v73) = 0;
                goto LABEL_215;
              }
              v71 = 0;
              v72 = 0;
              v73 = 0;
              do
              {
                v2 = v69 + 1;
                *((_QWORD *)this + 1) = v69 + 1;
                v74 = *(_BYTE *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0)
                  goto LABEL_216;
                v71 += 7;
                v69 = v2;
                v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 68) = v73;
              goto LABEL_217;
            default:
              switch((int)v20)
              {
                case 201:
                  *(_DWORD *)(a1 + 92) |= 2u;
                  v21 = *((_QWORD *)this + 1);
                  v2 = *((_QWORD *)this + 2);
                  v22 = *(_QWORD *)this;
                  if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
                  {
                    v76 = 0;
                    v77 = 0;
                    v25 = 0;
                    if (v2 <= v21)
                      v2 = *((_QWORD *)this + 1);
                    while (1)
                    {
                      if (v2 == v21)
                      {
                        v25 = 0;
                        *((_BYTE *)this + 24) = 1;
                        goto LABEL_181;
                      }
                      v78 = v21++;
                      v79 = *(_BYTE *)(v22 + v78);
                      *((_QWORD *)this + 1) = v21;
                      v25 |= (unint64_t)(v79 & 0x7F) << v76;
                      if ((v79 & 0x80) == 0)
                        break;
                      v76 += 7;
                      v14 = v77++ > 8;
                      if (v14)
                      {
                        v25 = 0;
LABEL_180:
                        v2 = v78 + 1;
                        goto LABEL_181;
                      }
                    }
                    if (*((_BYTE *)this + 24))
                      v25 = 0;
                    goto LABEL_180;
                  }
                  v23 = 0;
                  v24 = 0;
                  v25 = 0;
                  do
                  {
                    v2 = v21 + 1;
                    *((_QWORD *)this + 1) = v21 + 1;
                    v26 = *(_BYTE *)(v22 + v21);
                    v25 |= (unint64_t)(v26 & 0x7F) << v23;
                    if ((v26 & 0x80) == 0)
                      goto LABEL_181;
                    v23 += 7;
                    v21 = v2;
                    v14 = v24++ > 8;
                  }
                  while (!v14);
                  v25 = 0;
LABEL_181:
                  *(_QWORD *)(a1 + 16) = v25;
                  goto LABEL_217;
                case 202:
                  *(_DWORD *)(a1 + 92) |= 1u;
                  v33 = *((_QWORD *)this + 1);
                  v2 = *((_QWORD *)this + 2);
                  v34 = *(_QWORD *)this;
                  if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
                  {
                    v84 = 0;
                    v85 = 0;
                    v37 = 0;
                    if (v2 <= v33)
                      v2 = *((_QWORD *)this + 1);
                    while (1)
                    {
                      if (v2 == v33)
                      {
                        v37 = 0;
                        *((_BYTE *)this + 24) = 1;
                        goto LABEL_191;
                      }
                      v86 = v33++;
                      v87 = *(_BYTE *)(v34 + v86);
                      *((_QWORD *)this + 1) = v33;
                      v37 |= (unint64_t)(v87 & 0x7F) << v84;
                      if ((v87 & 0x80) == 0)
                        break;
                      v84 += 7;
                      v14 = v85++ > 8;
                      if (v14)
                      {
                        v37 = 0;
LABEL_190:
                        v2 = v86 + 1;
                        goto LABEL_191;
                      }
                    }
                    if (*((_BYTE *)this + 24))
                      v37 = 0;
                    goto LABEL_190;
                  }
                  v35 = 0;
                  v36 = 0;
                  v37 = 0;
                  do
                  {
                    v2 = v33 + 1;
                    *((_QWORD *)this + 1) = v33 + 1;
                    v38 = *(_BYTE *)(v34 + v33);
                    v37 |= (unint64_t)(v38 & 0x7F) << v35;
                    if ((v38 & 0x80) == 0)
                      goto LABEL_191;
                    v35 += 7;
                    v33 = v2;
                    v14 = v36++ > 8;
                  }
                  while (!v14);
                  v37 = 0;
LABEL_191:
                  *(_QWORD *)(a1 + 8) = v37;
LABEL_217:
                  v3 = *((_QWORD *)this + 2);
                  v4 = *((unsigned __int8 *)this + 24);
                  if (v2 >= v3 || v4 != 0)
                    return v4 == 0;
                  continue;
                case 203:
                  *(_DWORD *)(a1 + 92) |= 0x10u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_112;
                  *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
                  goto LABEL_176;
                case 204:
                  *(_DWORD *)(a1 + 92) |= 0x40u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_112;
                  *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
                  goto LABEL_176;
                case 205:
                  *(_DWORD *)(a1 + 92) |= 0x80u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_112;
                  *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
                  goto LABEL_176;
                case 206:
                  *(_DWORD *)(a1 + 92) |= 0x20u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                  {
LABEL_112:
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_176:
                    v2 = *((_QWORD *)this + 1) + 4;
                    *((_QWORD *)this + 1) = v2;
                  }
                  goto LABEL_217;
                case 207:
                  *(_DWORD *)(a1 + 92) |= 0x10000u;
                  v2 = *((_QWORD *)this + 1);
                  if (v2 >= *((_QWORD *)this + 2))
                  {
                    v40 = 0;
                    *((_BYTE *)this + 24) = 1;
                  }
                  else
                  {
                    v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                    *((_QWORD *)this + 1) = v2;
                    v40 = v39 != 0;
                  }
                  *(_BYTE *)(a1 + 88) = v40;
                  goto LABEL_217;
                default:
                  switch((int)v20)
                  {
                    case 1:
                      *(_DWORD *)(a1 + 92) |= 0x200u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    case 2:
                      *(_DWORD *)(a1 + 92) |= 0x4000u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    case 3:
                      *(_DWORD *)(a1 + 92) |= 0x400u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    case 4:
                      *(_DWORD *)(a1 + 92) |= 0x8000u;
                      v2 = *((_QWORD *)this + 1);
                      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                        goto LABEL_112;
                      *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
                      goto LABEL_176;
                    default:
                      result = PB::Reader::skip(this);
                      if (!(_DWORD)result)
                        return result;
                      v2 = *((_QWORD *)this + 1);
                      break;
                  }
                  goto LABEL_217;
              }
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F24CAB8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 92);
  if ((v4 & 0x200) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 60));
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  if ((*(_DWORD *)(v3 + 92) & 0x10000) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F24CCF0(_QWORD *result)
{
  *result = &off_1E294F9B8;
  *(_QWORD *)((char *)result + 172) = 0;
  return result;
}

void sub_18F24CD08(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F24CD2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "chaosAtMaxEnergy", *(float *)(a1 + 40));
    v5 = *(_QWORD *)(a1 + 172);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_51;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "chaosAtMaxEnergyRollover", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "chaosAtMaxEnergyRolloverTimestamp", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_6;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "chaosAtMaxEnergyTimestamp", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_6:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "chaosMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_8;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "chaosMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_9;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "chaosOrSaturationMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_10;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_11;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "didProcess");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_12;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "energyAtMaxChaos", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "energyAtMaxChaosRollover", *(float *)(a1 + 60));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0)
      goto LABEL_16;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "energyAtMaxChaosRolloverTimestamp", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_17;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "energyAtMaxChaosTimestamp", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_18;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "energyMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_18:
    if ((v5 & 1) == 0)
      goto LABEL_19;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "energyMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 1) == 0)
  {
LABEL_19:
    if ((v5 & 2) == 0)
      goto LABEL_20;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 2) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0)
      goto LABEL_21;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "maxChaos", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0)
      goto LABEL_23;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "maxChaosRollover", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0)
      goto LABEL_24;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "maxEnergy", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0)
      goto LABEL_25;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "maxEnergyRollover", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000) == 0)
      goto LABEL_26;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x20000) == 0)
  {
LABEL_26:
    if ((v5 & 0x40000) == 0)
      goto LABEL_27;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "maxSaturation", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40000) == 0)
  {
LABEL_27:
    if ((v5 & 0x80000) == 0)
      goto LABEL_28;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "maxSaturationRollover", *(float *)(a1 + 96));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80000) == 0)
  {
LABEL_28:
    if ((v5 & 0x100000) == 0)
      goto LABEL_29;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "parameterRollingEnergyWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100000) == 0)
  {
LABEL_29:
    if ((v5 & 0x200000) == 0)
      goto LABEL_30;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "parameterRollingPercentileWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200000) == 0)
  {
LABEL_30:
    if ((v5 & 0x400000) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "parameterRolloverRollingEnergyWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x400000) == 0)
  {
LABEL_31:
    if ((v5 & 0x800000) == 0)
      goto LABEL_32;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "parameterRolloverRollingPercentileWindowSize");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x800000) == 0)
  {
LABEL_32:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_33;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "parameterSaturationY", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_34;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "passThru");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "passThruRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_36;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "rmsSampleCount");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_37;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "saturationMet");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "saturationMetRollover");
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "thresholdChaos", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_40;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "thresholdChaosRollover", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_41;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "thresholdEnergy", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_42;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "thresholdEnergyRollover", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_43;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "thresholdMaxRMS", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "thresholdMaxRMSRollover", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_45;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "thresholdSaturationTime", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_45:
    if ((v5 & 4) == 0)
      goto LABEL_46;
LABEL_93:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_QWORD *)(a1 + 172) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_47;
  }
LABEL_92:
  PB::TextFormatter::format(this, "thresholdSaturationTimeRollover", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 172);
  if ((v5 & 4) != 0)
    goto LABEL_93;
LABEL_46:
  if ((v5 & 8) != 0)
LABEL_47:
    PB::TextFormatter::format(this, "triggerTimestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F24D31C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  BOOL v29;
  uint64_t result;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  BOOL v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  BOOL v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  BOOL v105;
  unint64_t v106;
  unint64_t v107;
  int v108;
  BOOL v109;
  unint64_t v110;
  unint64_t v111;
  int v112;
  BOOL v113;
  unint64_t v114;
  unint64_t v115;
  int v116;
  BOOL v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  BOOL v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  char v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char v153;
  unsigned int v154;
  uint64_t v155;
  unint64_t v156;
  char v157;
  unint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char v161;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char v170;
  unsigned int v171;
  unint64_t v172;
  char v173;
  char v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  char v178;
  unsigned int v179;
  unint64_t v180;
  char v181;
  char v182;
  unsigned int v183;
  unint64_t v184;
  char v185;
  char v186;
  unsigned int v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  unint64_t v192;
  char v193;
  char v194;
  unsigned int v195;
  unint64_t v196;
  char v197;
  char v198;
  unsigned int v199;
  unint64_t v200;
  char v201;
  char v202;
  unsigned int v203;
  unint64_t v204;
  char v205;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      switch((v11 >> 3))
      {
        case 'e':
          *(_QWORD *)(a1 + 172) |= 0x40000000000uLL;
          v22 = *((_QWORD *)this + 1);
          if (v22 >= *((_QWORD *)this + 2))
          {
            v25 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v23 = v22 + 1;
            v24 = *(unsigned __int8 *)(*(_QWORD *)this + v22);
            *((_QWORD *)this + 1) = v23;
            v25 = v24 != 0;
          }
          *(_BYTE *)(a1 + 165) = v25;
          goto LABEL_279;
        case 'f':
          *(_QWORD *)(a1 + 172) |= 0x10000uLL;
          v71 = *((_QWORD *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v71);
          goto LABEL_278;
        case 'g':
          *(_QWORD *)(a1 + 172) |= 0x4000uLL;
          v72 = *((_QWORD *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v72);
          goto LABEL_278;
        case 'h':
          *(_QWORD *)(a1 + 172) |= 0x1000uLL;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v73);
          goto LABEL_278;
        case 'i':
          *(_QWORD *)(a1 + 172) |= 0x20000uLL;
          v74 = *((_QWORD *)this + 1);
          if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v74);
          goto LABEL_278;
        case 'j':
          *(_QWORD *)(a1 + 172) |= 0x10000000000uLL;
          v75 = *((_QWORD *)this + 1);
          if (v75 >= *((_QWORD *)this + 2))
          {
            v78 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v76 = v75 + 1;
            v77 = *(unsigned __int8 *)(*(_QWORD *)this + v75);
            *((_QWORD *)this + 1) = v76;
            v78 = v77 != 0;
          }
          *(_BYTE *)(a1 + 163) = v78;
          goto LABEL_279;
        case 'k':
          *(_QWORD *)(a1 + 172) |= 0x200000000uLL;
          v79 = *((_QWORD *)this + 1);
          if (v79 >= *((_QWORD *)this + 2))
          {
            v82 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v80 = v79 + 1;
            v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
            *((_QWORD *)this + 1) = v80;
            v82 = v81 != 0;
          }
          *(_BYTE *)(a1 + 156) = v82;
          goto LABEL_279;
        case 'l':
          *(_QWORD *)(a1 + 172) |= 0x100000000000uLL;
          v83 = *((_QWORD *)this + 1);
          if (v83 >= *((_QWORD *)this + 2))
          {
            v86 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v84 = v83 + 1;
            v85 = *(unsigned __int8 *)(*(_QWORD *)this + v83);
            *((_QWORD *)this + 1) = v84;
            v86 = v85 != 0;
          }
          *(_BYTE *)(a1 + 167) = v86;
          goto LABEL_279;
        case 'm':
          *(_QWORD *)(a1 + 172) |= 0x800000000uLL;
          v87 = *((_QWORD *)this + 1);
          if (v87 >= *((_QWORD *)this + 2))
          {
            v90 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v88 = v87 + 1;
            v89 = *(unsigned __int8 *)(*(_QWORD *)this + v87);
            *((_QWORD *)this + 1) = v88;
            v90 = v89 != 0;
          }
          *(_BYTE *)(a1 + 158) = v90;
          goto LABEL_279;
        case 'n':
          *(_QWORD *)(a1 + 172) |= 0x4000000000uLL;
          v91 = *((_QWORD *)this + 1);
          if (v91 >= *((_QWORD *)this + 2))
          {
            v94 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v92 = v91 + 1;
            v93 = *(unsigned __int8 *)(*(_QWORD *)this + v91);
            *((_QWORD *)this + 1) = v92;
            v94 = v93 != 0;
          }
          *(_BYTE *)(a1 + 161) = v94;
          goto LABEL_279;
        case 'o':
          *(_QWORD *)(a1 + 172) |= 0x80000000000uLL;
          v95 = *((_QWORD *)this + 1);
          if (v95 >= *((_QWORD *)this + 2))
          {
            v98 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v96 = v95 + 1;
            v97 = *(unsigned __int8 *)(*(_QWORD *)this + v95);
            *((_QWORD *)this + 1) = v96;
            v98 = v97 != 0;
          }
          *(_BYTE *)(a1 + 166) = v98;
          goto LABEL_279;
        case 'p':
          *(_QWORD *)(a1 + 172) |= 0x8000uLL;
          v99 = *((_QWORD *)this + 1);
          if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v99);
          goto LABEL_278;
        case 'q':
          *(_QWORD *)(a1 + 172) |= 0x2000uLL;
          v100 = *((_QWORD *)this + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
            goto LABEL_187;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v100);
          goto LABEL_278;
        case 'r':
          *(_QWORD *)(a1 + 172) |= 0x40000uLL;
          v101 = *((_QWORD *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
          {
LABEL_187:
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v101);
LABEL_278:
            *((_QWORD *)this + 1) += 4;
          }
          goto LABEL_279;
        case 's':
          *(_QWORD *)(a1 + 172) |= 0x20000000000uLL;
          v102 = *((_QWORD *)this + 1);
          if (v102 >= *((_QWORD *)this + 2))
          {
            v105 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v103 = v102 + 1;
            v104 = *(unsigned __int8 *)(*(_QWORD *)this + v102);
            *((_QWORD *)this + 1) = v103;
            v105 = v104 != 0;
          }
          *(_BYTE *)(a1 + 164) = v105;
          goto LABEL_279;
        case 't':
          *(_QWORD *)(a1 + 172) |= 0x400000000uLL;
          v106 = *((_QWORD *)this + 1);
          if (v106 >= *((_QWORD *)this + 2))
          {
            v109 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v107 = v106 + 1;
            v108 = *(unsigned __int8 *)(*(_QWORD *)this + v106);
            *((_QWORD *)this + 1) = v107;
            v109 = v108 != 0;
          }
          *(_BYTE *)(a1 + 157) = v109;
          goto LABEL_279;
        case 'u':
          *(_QWORD *)(a1 + 172) |= 0x200000000000uLL;
          v110 = *((_QWORD *)this + 1);
          if (v110 >= *((_QWORD *)this + 2))
          {
            v113 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v111 = v110 + 1;
            v112 = *(unsigned __int8 *)(*(_QWORD *)this + v110);
            *((_QWORD *)this + 1) = v111;
            v113 = v112 != 0;
          }
          *(_BYTE *)(a1 + 168) = v113;
          goto LABEL_279;
        case 'v':
          *(_QWORD *)(a1 + 172) |= 0x1000000000uLL;
          v114 = *((_QWORD *)this + 1);
          if (v114 >= *((_QWORD *)this + 2))
          {
            v117 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v115 = v114 + 1;
            v116 = *(unsigned __int8 *)(*(_QWORD *)this + v114);
            *((_QWORD *)this + 1) = v115;
            v117 = v116 != 0;
          }
          *(_BYTE *)(a1 + 159) = v117;
          goto LABEL_279;
        case 'w':
          *(_QWORD *)(a1 + 172) |= 0x8000000000uLL;
          v118 = *((_QWORD *)this + 1);
          if (v118 >= *((_QWORD *)this + 2))
          {
            v121 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v119 = v118 + 1;
            v120 = *(unsigned __int8 *)(*(_QWORD *)this + v118);
            *((_QWORD *)this + 1) = v119;
            v121 = v120 != 0;
          }
          *(_BYTE *)(a1 + 162) = v121;
          goto LABEL_279;
        default:
          switch((int)v20)
          {
            case 201:
              *(_QWORD *)(a1 + 172) |= 0x2000000000uLL;
              v26 = *((_QWORD *)this + 1);
              if (v26 >= *((_QWORD *)this + 2))
              {
                v29 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = v26 + 1;
                v28 = *(unsigned __int8 *)(*(_QWORD *)this + v26);
                *((_QWORD *)this + 1) = v27;
                v29 = v28 != 0;
              }
              *(_BYTE *)(a1 + 160) = v29;
              goto LABEL_279;
            case 202:
              *(_QWORD *)(a1 + 172) |= 0x1000000uLL;
              v122 = *((_QWORD *)this + 1);
              v123 = *((_QWORD *)this + 2);
              v124 = *(_QWORD *)this;
              if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
              {
                v125 = 0;
                v126 = 0;
                v127 = 0;
                do
                {
                  v128 = v122 + 1;
                  *((_QWORD *)this + 1) = v122 + 1;
                  v129 = *(_BYTE *)(v124 + v122);
                  v127 |= (unint64_t)(v129 & 0x7F) << v125;
                  if ((v129 & 0x80) == 0)
                    goto LABEL_303;
                  v125 += 7;
                  v122 = v128;
                  v14 = v126++ > 8;
                }
                while (!v14);
LABEL_248:
                LODWORD(v127) = 0;
                goto LABEL_303;
              }
              v186 = 0;
              v187 = 0;
              v127 = 0;
              if (v123 <= v122)
                v123 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v123 == v122)
                {
                  LODWORD(v127) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v188 = v122 + 1;
                  v189 = *(_BYTE *)(v124 + v122);
                  *((_QWORD *)this + 1) = v188;
                  v127 |= (unint64_t)(v189 & 0x7F) << v186;
                  if (v189 < 0)
                  {
                    v186 += 7;
                    v122 = v188;
                    v14 = v187++ > 8;
                    if (v14)
                      goto LABEL_248;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v127) = 0;
                }
                break;
              }
LABEL_303:
              *(_DWORD *)(a1 + 120) = v127;
              goto LABEL_279;
            case 203:
              *(_QWORD *)(a1 + 172) |= 4uLL;
              v130 = *((_QWORD *)this + 1);
              v131 = *((_QWORD *)this + 2);
              v132 = *(_QWORD *)this;
              if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
              {
                v133 = 0;
                v134 = 0;
                v135 = 0;
                do
                {
                  v136 = v130 + 1;
                  *((_QWORD *)this + 1) = v130 + 1;
                  v137 = *(_BYTE *)(v132 + v130);
                  v135 |= (unint64_t)(v137 & 0x7F) << v133;
                  if ((v137 & 0x80) == 0)
                    goto LABEL_307;
                  v133 += 7;
                  v130 = v136;
                  v14 = v134++ > 8;
                }
                while (!v14);
LABEL_255:
                v135 = 0;
                goto LABEL_307;
              }
              v190 = 0;
              v191 = 0;
              v135 = 0;
              if (v131 <= v130)
                v131 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v131 == v130)
                {
                  v135 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v192 = v130 + 1;
                  v193 = *(_BYTE *)(v132 + v130);
                  *((_QWORD *)this + 1) = v192;
                  v135 |= (unint64_t)(v193 & 0x7F) << v190;
                  if (v193 < 0)
                  {
                    v190 += 7;
                    v130 = v192;
                    v14 = v191++ > 8;
                    if (v14)
                      goto LABEL_255;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v135 = 0;
                }
                break;
              }
LABEL_307:
              *(_QWORD *)(a1 + 24) = v135;
              goto LABEL_279;
            case 204:
              *(_QWORD *)(a1 + 172) |= 8uLL;
              v138 = *((_QWORD *)this + 1);
              v139 = *((_QWORD *)this + 2);
              v140 = *(_QWORD *)this;
              if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
              {
                v141 = 0;
                v142 = 0;
                v143 = 0;
                do
                {
                  v144 = v138 + 1;
                  *((_QWORD *)this + 1) = v138 + 1;
                  v145 = *(_BYTE *)(v140 + v138);
                  v143 |= (unint64_t)(v145 & 0x7F) << v141;
                  if ((v145 & 0x80) == 0)
                    goto LABEL_311;
                  v141 += 7;
                  v138 = v144;
                  v14 = v142++ > 8;
                }
                while (!v14);
LABEL_262:
                v143 = 0;
                goto LABEL_311;
              }
              v194 = 0;
              v195 = 0;
              v143 = 0;
              if (v139 <= v138)
                v139 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v139 == v138)
                {
                  v143 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v196 = v138 + 1;
                  v197 = *(_BYTE *)(v140 + v138);
                  *((_QWORD *)this + 1) = v196;
                  v143 |= (unint64_t)(v197 & 0x7F) << v194;
                  if (v197 < 0)
                  {
                    v194 += 7;
                    v138 = v196;
                    v14 = v195++ > 8;
                    if (v14)
                      goto LABEL_262;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v143 = 0;
                }
                break;
              }
LABEL_311:
              *(_QWORD *)(a1 + 32) = v143;
              goto LABEL_279;
            case 205:
              *(_QWORD *)(a1 + 172) |= 0x10uLL;
              v146 = *((_QWORD *)this + 1);
              if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v146);
              goto LABEL_278;
            case 206:
              *(_QWORD *)(a1 + 172) |= 0x80uLL;
              v147 = *((_QWORD *)this + 1);
              if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v147);
              goto LABEL_278;
            case 207:
              *(_QWORD *)(a1 + 172) |= 0x100uLL;
              v148 = *((_QWORD *)this + 1);
              if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v148);
              goto LABEL_278;
            case 208:
              *(_QWORD *)(a1 + 172) |= 0x800uLL;
              v149 = *((_QWORD *)this + 1);
              if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v149);
              goto LABEL_278;
            case 209:
              *(_QWORD *)(a1 + 172) |= 1uLL;
              v150 = *((_QWORD *)this + 1);
              v151 = *((_QWORD *)this + 2);
              v152 = *(_QWORD *)this;
              if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
              {
                v153 = 0;
                v154 = 0;
                v155 = 0;
                do
                {
                  v156 = v150 + 1;
                  *((_QWORD *)this + 1) = v150 + 1;
                  v157 = *(_BYTE *)(v152 + v150);
                  v155 |= (unint64_t)(v157 & 0x7F) << v153;
                  if ((v157 & 0x80) == 0)
                    goto LABEL_315;
                  v153 += 7;
                  v150 = v156;
                  v14 = v154++ > 8;
                }
                while (!v14);
LABEL_269:
                v155 = 0;
                goto LABEL_315;
              }
              v198 = 0;
              v199 = 0;
              v155 = 0;
              if (v151 <= v150)
                v151 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v151 == v150)
                {
                  v155 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v200 = v150 + 1;
                  v201 = *(_BYTE *)(v152 + v150);
                  *((_QWORD *)this + 1) = v200;
                  v155 |= (unint64_t)(v201 & 0x7F) << v198;
                  if (v201 < 0)
                  {
                    v198 += 7;
                    v150 = v200;
                    v14 = v199++ > 8;
                    if (v14)
                      goto LABEL_269;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v155 = 0;
                }
                break;
              }
LABEL_315:
              *(_QWORD *)(a1 + 8) = v155;
              goto LABEL_279;
            case 210:
              *(_QWORD *)(a1 + 172) |= 2uLL;
              v158 = *((_QWORD *)this + 1);
              v159 = *((_QWORD *)this + 2);
              v160 = *(_QWORD *)this;
              if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
              {
                v161 = 0;
                v162 = 0;
                v163 = 0;
                do
                {
                  v164 = v158 + 1;
                  *((_QWORD *)this + 1) = v158 + 1;
                  v165 = *(_BYTE *)(v160 + v158);
                  v163 |= (unint64_t)(v165 & 0x7F) << v161;
                  if ((v165 & 0x80) == 0)
                    goto LABEL_319;
                  v161 += 7;
                  v158 = v164;
                  v14 = v162++ > 8;
                }
                while (!v14);
LABEL_276:
                v163 = 0;
                goto LABEL_319;
              }
              v202 = 0;
              v203 = 0;
              v163 = 0;
              if (v159 <= v158)
                v159 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v159 == v158)
                {
                  v163 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v204 = v158 + 1;
                  v205 = *(_BYTE *)(v160 + v158);
                  *((_QWORD *)this + 1) = v204;
                  v163 |= (unint64_t)(v205 & 0x7F) << v202;
                  if (v205 < 0)
                  {
                    v202 += 7;
                    v158 = v204;
                    v14 = v203++ > 8;
                    if (v14)
                      goto LABEL_276;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v163 = 0;
                }
                break;
              }
LABEL_319:
              *(_QWORD *)(a1 + 16) = v163;
              goto LABEL_279;
            case 211:
              *(_QWORD *)(a1 + 172) |= 0x20uLL;
              v166 = *((_QWORD *)this + 1);
              if (v166 > 0xFFFFFFFFFFFFFFFBLL || v166 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v166);
              goto LABEL_278;
            case 212:
              *(_QWORD *)(a1 + 172) |= 0x40uLL;
              v167 = *((_QWORD *)this + 1);
              if (v167 > 0xFFFFFFFFFFFFFFFBLL || v167 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v167);
              goto LABEL_278;
            case 213:
              *(_QWORD *)(a1 + 172) |= 0x200uLL;
              v168 = *((_QWORD *)this + 1);
              if (v168 > 0xFFFFFFFFFFFFFFFBLL || v168 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v168);
              goto LABEL_278;
            case 214:
              *(_QWORD *)(a1 + 172) |= 0x400uLL;
              v169 = *((_QWORD *)this + 1);
              if (v169 > 0xFFFFFFFFFFFFFFFBLL || v169 + 4 > *((_QWORD *)this + 2))
                goto LABEL_187;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v169);
              goto LABEL_278;
            default:
              switch((int)v20)
              {
                case 1:
                  *(_QWORD *)(a1 + 172) |= 0x20000000uLL;
                  v21 = *((_QWORD *)this + 1);
                  if (v21 > 0xFFFFFFFFFFFFFFFBLL || v21 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v21);
                  goto LABEL_278;
                case 2:
                  *(_QWORD *)(a1 + 172) |= 0x8000000uLL;
                  v31 = *((_QWORD *)this + 1);
                  if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v31);
                  goto LABEL_278;
                case 3:
                  *(_QWORD *)(a1 + 172) |= 0x2000000uLL;
                  v32 = *((_QWORD *)this + 1);
                  if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v32);
                  goto LABEL_278;
                case 4:
                  *(_QWORD *)(a1 + 172) |= 0x80000000uLL;
                  v33 = *((_QWORD *)this + 1);
                  if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v33);
                  goto LABEL_278;
                case 5:
                  *(_QWORD *)(a1 + 172) |= 0x100000uLL;
                  v34 = *((_QWORD *)this + 1);
                  v35 = *((_QWORD *)this + 2);
                  v36 = *(_QWORD *)this;
                  if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
                  {
                    v37 = 0;
                    v38 = 0;
                    v39 = 0;
                    do
                    {
                      v40 = v34 + 1;
                      *((_QWORD *)this + 1) = v34 + 1;
                      v41 = *(_BYTE *)(v36 + v34);
                      v39 |= (unint64_t)(v41 & 0x7F) << v37;
                      if ((v41 & 0x80) == 0)
                        goto LABEL_287;
                      v37 += 7;
                      v34 = v40;
                      v14 = v38++ > 8;
                    }
                    while (!v14);
LABEL_198:
                    LODWORD(v39) = 0;
                    goto LABEL_287;
                  }
                  v170 = 0;
                  v171 = 0;
                  v39 = 0;
                  if (v35 <= v34)
                    v35 = *((_QWORD *)this + 1);
                  while (2)
                  {
                    if (v35 == v34)
                    {
                      LODWORD(v39) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }
                    else
                    {
                      v172 = v34 + 1;
                      v173 = *(_BYTE *)(v36 + v34);
                      *((_QWORD *)this + 1) = v172;
                      v39 |= (unint64_t)(v173 & 0x7F) << v170;
                      if (v173 < 0)
                      {
                        v170 += 7;
                        v34 = v172;
                        v14 = v171++ > 8;
                        if (v14)
                          goto LABEL_198;
                        continue;
                      }
                      if (*((_BYTE *)this + 24))
                        LODWORD(v39) = 0;
                    }
                    break;
                  }
LABEL_287:
                  *(_DWORD *)(a1 + 104) = v39;
                  goto LABEL_279;
                case 6:
                  *(_QWORD *)(a1 + 172) |= 0x80000uLL;
                  v42 = *((_QWORD *)this + 1);
                  v43 = *((_QWORD *)this + 2);
                  v44 = *(_QWORD *)this;
                  if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
                  {
                    v45 = 0;
                    v46 = 0;
                    v47 = 0;
                    do
                    {
                      v48 = v42 + 1;
                      *((_QWORD *)this + 1) = v42 + 1;
                      v49 = *(_BYTE *)(v44 + v42);
                      v47 |= (unint64_t)(v49 & 0x7F) << v45;
                      if ((v49 & 0x80) == 0)
                        goto LABEL_291;
                      v45 += 7;
                      v42 = v48;
                      v14 = v46++ > 8;
                    }
                    while (!v14);
LABEL_205:
                    LODWORD(v47) = 0;
                    goto LABEL_291;
                  }
                  v174 = 0;
                  v175 = 0;
                  v47 = 0;
                  if (v43 <= v42)
                    v43 = *((_QWORD *)this + 1);
                  while (2)
                  {
                    if (v43 == v42)
                    {
                      LODWORD(v47) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }
                    else
                    {
                      v176 = v42 + 1;
                      v177 = *(_BYTE *)(v44 + v42);
                      *((_QWORD *)this + 1) = v176;
                      v47 |= (unint64_t)(v177 & 0x7F) << v174;
                      if (v177 < 0)
                      {
                        v174 += 7;
                        v42 = v176;
                        v14 = v175++ > 8;
                        if (v14)
                          goto LABEL_205;
                        continue;
                      }
                      if (*((_BYTE *)this + 24))
                        LODWORD(v47) = 0;
                    }
                    break;
                  }
LABEL_291:
                  *(_DWORD *)(a1 + 100) = v47;
                  goto LABEL_279;
                case 7:
                  *(_QWORD *)(a1 + 172) |= 0x800000uLL;
                  v50 = *((_QWORD *)this + 1);
                  if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v50);
                  goto LABEL_278;
                case 8:
                  *(_QWORD *)(a1 + 172) |= 0x40000000uLL;
                  v51 = *((_QWORD *)this + 1);
                  if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v51);
                  goto LABEL_278;
                case 9:
                  *(_QWORD *)(a1 + 172) |= 0x10000000uLL;
                  v52 = *((_QWORD *)this + 1);
                  if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v52);
                  goto LABEL_278;
                case 10:
                  *(_QWORD *)(a1 + 172) |= 0x4000000uLL;
                  v53 = *((_QWORD *)this + 1);
                  if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v53);
                  goto LABEL_278;
                case 11:
                  *(_QWORD *)(a1 + 172) |= 0x100000000uLL;
                  v54 = *((_QWORD *)this + 1);
                  if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_187;
                  *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v54);
                  goto LABEL_278;
                case 12:
                  *(_QWORD *)(a1 + 172) |= 0x200000uLL;
                  v55 = *((_QWORD *)this + 1);
                  v56 = *((_QWORD *)this + 2);
                  v57 = *(_QWORD *)this;
                  if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
                  {
                    v58 = 0;
                    v59 = 0;
                    v60 = 0;
                    do
                    {
                      v61 = v55 + 1;
                      *((_QWORD *)this + 1) = v55 + 1;
                      v62 = *(_BYTE *)(v57 + v55);
                      v60 |= (unint64_t)(v62 & 0x7F) << v58;
                      if ((v62 & 0x80) == 0)
                        goto LABEL_295;
                      v58 += 7;
                      v55 = v61;
                      v14 = v59++ > 8;
                    }
                    while (!v14);
LABEL_212:
                    LODWORD(v60) = 0;
                    goto LABEL_295;
                  }
                  v178 = 0;
                  v179 = 0;
                  v60 = 0;
                  if (v56 <= v55)
                    v56 = *((_QWORD *)this + 1);
                  while (2)
                  {
                    if (v56 == v55)
                    {
                      LODWORD(v60) = 0;
                      *((_BYTE *)this + 24) = 1;
                    }
                    else
                    {
                      v180 = v55 + 1;
                      v181 = *(_BYTE *)(v57 + v55);
                      *((_QWORD *)this + 1) = v180;
                      v60 |= (unint64_t)(v181 & 0x7F) << v178;
                      if (v181 < 0)
                      {
                        v178 += 7;
                        v55 = v180;
                        v14 = v179++ > 8;
                        if (v14)
                          goto LABEL_212;
                        continue;
                      }
                      if (*((_BYTE *)this + 24))
                        LODWORD(v60) = 0;
                    }
                    break;
                  }
LABEL_295:
                  *(_DWORD *)(a1 + 108) = v60;
                  goto LABEL_279;
                case 13:
                  *(_QWORD *)(a1 + 172) |= 0x400000uLL;
                  v63 = *((_QWORD *)this + 1);
                  v64 = *((_QWORD *)this + 2);
                  v65 = *(_QWORD *)this;
                  if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
                  {
                    v66 = 0;
                    v67 = 0;
                    v68 = 0;
                    do
                    {
                      v69 = v63 + 1;
                      *((_QWORD *)this + 1) = v63 + 1;
                      v70 = *(_BYTE *)(v65 + v63);
                      v68 |= (unint64_t)(v70 & 0x7F) << v66;
                      if ((v70 & 0x80) == 0)
                        goto LABEL_299;
                      v66 += 7;
                      v63 = v69;
                      v14 = v67++ > 8;
                    }
                    while (!v14);
LABEL_219:
                    LODWORD(v68) = 0;
                    goto LABEL_299;
                  }
                  v182 = 0;
                  v183 = 0;
                  v68 = 0;
                  if (v64 <= v63)
                    v64 = *((_QWORD *)this + 1);
                  break;
                default:
                  result = PB::Reader::skip(this);
                  if ((_DWORD)result)
                    goto LABEL_279;
                  return result;
              }
              break;
          }
          break;
      }
      while (1)
      {
        if (v64 == v63)
        {
          LODWORD(v68) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_299;
        }
        v184 = v63 + 1;
        v185 = *(_BYTE *)(v65 + v63);
        *((_QWORD *)this + 1) = v184;
        v68 |= (unint64_t)(v185 & 0x7F) << v182;
        if ((v185 & 0x80) == 0)
          break;
        v182 += 7;
        v63 = v184;
        v14 = v183++ > 8;
        if (v14)
          goto LABEL_219;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v68) = 0;
LABEL_299:
      *(_DWORD *)(a1 + 112) = v68;
LABEL_279:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F24E59C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 172);
  if ((v4 & 0x20000000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 140));
    v4 = *(_QWORD *)(v3 + 172);
    if ((v4 & 0x8000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000000) == 0)
        goto LABEL_4;
      goto LABEL_50;
    }
  }
  else if ((v4 & 0x8000000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0)
      goto LABEL_6;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0)
      goto LABEL_7;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x800000) == 0)
      goto LABEL_8;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_9;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_10;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_11;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_12;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0)
      goto LABEL_13;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400000) == 0)
      goto LABEL_14;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_15;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0)
      goto LABEL_19;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_20;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_22;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_23;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_24;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_25;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0)
      goto LABEL_27;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x40000) == 0)
      goto LABEL_28;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_29;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_30;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_31;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_33;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_34;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v4 & 4) == 0)
      goto LABEL_36;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 4) == 0)
  {
LABEL_36:
    if ((v4 & 8) == 0)
      goto LABEL_37;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 8) == 0)
  {
LABEL_37:
    if ((v4 & 0x10) == 0)
      goto LABEL_38;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x10) == 0)
  {
LABEL_38:
    if ((v4 & 0x80) == 0)
      goto LABEL_39;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x80) == 0)
  {
LABEL_39:
    if ((v4 & 0x100) == 0)
      goto LABEL_40;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x100) == 0)
  {
LABEL_40:
    if ((v4 & 0x800) == 0)
      goto LABEL_41;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x800) == 0)
  {
LABEL_41:
    if ((v4 & 1) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 1) == 0)
  {
LABEL_42:
    if ((v4 & 2) == 0)
      goto LABEL_43;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 2) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 0x200) == 0)
      goto LABEL_46;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 172);
  if ((v4 & 0x200) == 0)
  {
LABEL_46:
    if ((v4 & 0x400) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 64));
  }
LABEL_92:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  if ((*(_QWORD *)(v3 + 172) & 0x400) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 64));
  return result;
}

uint64_t sub_18F24EAC8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F9F0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F24EAE0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F24EB04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "debugY");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "outputB");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F24EBD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F24EFE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F24F0A8(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944CF8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F24F0C0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F24F0E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochFirstTimestamp");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "maxNormValue", *(float *)(a1 + 40));
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "maxNormTimestamp");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F24F1B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 32) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_93:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_98:
              *(_QWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    v43 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    v43 = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v43 = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              v43 = 0;
LABEL_103:
              *(_QWORD *)(a1 + 24) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F24F718(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  if ((*(_BYTE *)(v3 + 44) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F24F7C8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2944A58;
  *(_DWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F24F7EC(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2944A58;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F24F83C(PB::Base *a1)
{
  sub_18F24F7EC(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F24F860(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  int v10;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 152) & 0x80) != 0)
    PB::TextFormatter::format(this, "accelPeakThreshold", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  while (v5 != v6)
  {
    v5 += 8;
    PB::TextFormatter::format(this, "allMaxNormTimestamps");
  }
  v7 = *(float **)(a1 + 32);
  v8 = *(float **)(a1 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    PB::TextFormatter::format(this, "allMaxNormValues", v9);
  }
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochFirstTimestamp");
    v10 = *(_DWORD *)(a1 + 152);
    if ((v10 & 2) == 0)
    {
LABEL_9:
      if ((v10 & 0x10000) == 0)
        goto LABEL_10;
      goto LABEL_28;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x10000) == 0)
  {
LABEL_10:
    if ((v10 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isMAPDetected");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x100) == 0)
  {
LABEL_11:
    if ((v10 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "magnitudePercentileThreshold", *(float *)(a1 + 116));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x200) == 0)
  {
LABEL_12:
    if ((v10 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "magnitudePeriodicityLowerPercentile", *(float *)(a1 + 120));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x400) == 0)
  {
LABEL_13:
    if ((v10 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "magnitudePeriodicityUpperPercentile", *(float *)(a1 + 124));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x800) == 0)
  {
LABEL_14:
    if ((v10 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "minNumPeaks");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x1000) == 0)
  {
LABEL_15:
    if ((v10 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "numPeaks");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x2000) == 0)
  {
LABEL_16:
    if ((v10 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "peakMagnitudePercentileDiff", *(float *)(a1 + 136));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x20000) == 0)
  {
LABEL_17:
    if ((v10 & 4) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "peakSeparation");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 4) == 0)
  {
LABEL_18:
    if ((v10 & 8) == 0)
      goto LABEL_19;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "peakTimeDeltaPercentileDiff");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 8) == 0)
  {
LABEL_19:
    if ((v10 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "peakToPeakMinimumSeparation");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x10) == 0)
  {
LABEL_20:
    if ((v10 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "peakToPeakSeparationThreshold");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x20) == 0)
  {
LABEL_21:
    if ((v10 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "timePercentileDiffThreshold");
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x4000) == 0)
  {
LABEL_22:
    if ((v10 & 0x8000) == 0)
      goto LABEL_23;
LABEL_41:
    PB::TextFormatter::format(this, "timePeriodicityUpperPercentile", *(float *)(a1 + 144));
    if ((*(_DWORD *)(a1 + 152) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_24;
  }
LABEL_40:
  PB::TextFormatter::format(this, "timePeriodicityLowerPercentile", *(float *)(a1 + 140));
  v10 = *(_DWORD *)(a1 + 152);
  if ((v10 & 0x8000) != 0)
    goto LABEL_41;
LABEL_23:
  if ((v10 & 0x40) != 0)
LABEL_24:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F24FB34(uint64_t a1, PB::Reader *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  void **v9;
  uint64_t v10;
  void **v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  BOOL v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  _DWORD *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  int v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  BOOL v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  BOOL v152;
  char v153;
  unsigned int v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  void **v181;
  uint64_t v182;
  unint64_t v183;
  char *v184;
  _QWORD *v185;
  unint64_t v186;
  char *v187;
  _DWORD *v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  char v214;
  unsigned int v215;
  unint64_t v217;
  char v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  char *v222;
  int v223;
  unint64_t v224;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = *((unsigned __int8 *)this + 24);
  if (v3 < v4 && v5 == 0)
  {
    v9 = (void **)(a1 + 32);
    v10 = a1 + 48;
    v11 = (void **)(a1 + 8);
    v12 = (_QWORD *)(a1 + 24);
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v18 = *(_BYTE *)(v13 + v3);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v3 = v17;
        v103 = v15++ > 8;
        if (v103)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v16 & 7;
      if (v24 == 4)
      {
        v5 = 0;
        return v5 == 0;
      }
      v25 = v16 >> 3;
      if ((int)(v16 >> 3) > 100)
      {
        switch((int)v25)
        {
          case 201:
            *(_DWORD *)(a1 + 152) |= 0x1000u;
            v27 = *((_QWORD *)this + 1);
            v28 = *((_QWORD *)this + 2);
            v29 = *(_QWORD *)this;
            if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
            {
              v30 = 0;
              v31 = 0;
              v32 = 0;
              do
              {
                v33 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v34 = *(_BYTE *)(v29 + v27);
                v32 |= (unint64_t)(v34 & 0x7F) << v30;
                if ((v34 & 0x80) == 0)
                  goto LABEL_288;
                v30 += 7;
                v27 = v33;
                v103 = v31++ > 8;
              }
              while (!v103);
LABEL_192:
              LODWORD(v32) = 0;
              goto LABEL_288;
            }
            v153 = 0;
            v154 = 0;
            v32 = 0;
            if (v28 <= v27)
              v28 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v28 == v27)
              {
                LODWORD(v32) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v155 = v27 + 1;
                v156 = *(_BYTE *)(v29 + v27);
                *((_QWORD *)this + 1) = v155;
                v32 |= (unint64_t)(v156 & 0x7F) << v153;
                if (v156 < 0)
                {
                  v153 += 7;
                  v27 = v155;
                  v103 = v154++ > 8;
                  if (v103)
                    goto LABEL_192;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v32) = 0;
              }
              break;
            }
LABEL_288:
            *(_DWORD *)(a1 + 132) = v32;
            break;
          case 202:
            *(_DWORD *)(a1 + 152) |= 4u;
            v80 = *((_QWORD *)this + 1);
            v81 = *((_QWORD *)this + 2);
            v82 = *(_QWORD *)this;
            if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
            {
              v83 = 0;
              v84 = 0;
              v85 = 0;
              do
              {
                v86 = v80 + 1;
                *((_QWORD *)this + 1) = v80 + 1;
                v87 = *(_BYTE *)(v82 + v80);
                v85 |= (unint64_t)(v87 & 0x7F) << v83;
                if ((v87 & 0x80) == 0)
                  goto LABEL_306;
                v83 += 7;
                v80 = v86;
                v103 = v84++ > 8;
              }
              while (!v103);
LABEL_234:
              v85 = 0;
              goto LABEL_306;
            }
            v177 = 0;
            v178 = 0;
            v85 = 0;
            if (v81 <= v80)
              v81 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v81 == v80)
              {
                v85 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v179 = v80 + 1;
                v180 = *(_BYTE *)(v82 + v80);
                *((_QWORD *)this + 1) = v179;
                v85 |= (unint64_t)(v180 & 0x7F) << v177;
                if (v180 < 0)
                {
                  v177 += 7;
                  v80 = v179;
                  v103 = v178++ > 8;
                  if (v103)
                    goto LABEL_234;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v85 = 0;
              }
              break;
            }
LABEL_306:
            *(_QWORD *)(a1 + 72) = v85;
            break;
          case 203:
            *(_DWORD *)(a1 + 152) |= 0x2000u;
            v88 = *((_QWORD *)this + 1);
            if (v88 <= 0xFFFFFFFFFFFFFFFBLL && v88 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v88);
LABEL_258:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_96:
              *((_BYTE *)this + 24) = 1;
            }
            break;
          case 204:
            if (v24 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
              {
                v89 = *(char **)(a1 + 16);
                do
                {
                  if ((unint64_t)v89 >= *v12)
                  {
                    v90 = v2;
                    v91 = (char *)*v11;
                    v92 = (v89 - (_BYTE *)*v11) >> 3;
                    v93 = v92 + 1;
                    if ((unint64_t)(v92 + 1) >> 61)
                      goto LABEL_363;
                    v94 = *v12 - (_QWORD)v91;
                    if (v94 >> 2 > v93)
                      v93 = v94 >> 2;
                    if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFF8)
                      v95 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v95 = v93;
                    if (v95)
                    {
                      v96 = (char *)sub_18F26F8D4((uint64_t)v12, v95);
                      v91 = *(char **)(a1 + 8);
                      v89 = *(char **)(a1 + 16);
                    }
                    else
                    {
                      v96 = 0;
                    }
                    v97 = &v96[8 * v92];
                    *(_QWORD *)v97 = 0;
                    v98 = v97 + 8;
                    while (v89 != v91)
                    {
                      v99 = *((_QWORD *)v89 - 1);
                      v89 -= 8;
                      *((_QWORD *)v97 - 1) = v99;
                      v97 -= 8;
                    }
                    *(_QWORD *)(a1 + 8) = v97;
                    *(_QWORD *)(a1 + 16) = v98;
                    *(_QWORD *)(a1 + 24) = &v96[8 * v95];
                    if (v91)
                      operator delete(v91);
                    v89 = v98;
                    v2 = v90;
                  }
                  else
                  {
                    *(_QWORD *)v89 = 0;
                    v89 += 8;
                  }
                  *(_QWORD *)(a1 + 16) = v89;
                  v101 = *((_QWORD *)this + 1);
                  v100 = *((_QWORD *)this + 2);
                  v102 = *(_QWORD *)this;
                  v103 = v101 > 0xFFFFFFFFFFFFFFF5 || v101 + 10 > v100;
                  if (!v103)
                  {
                    v109 = 0;
                    v110 = 0;
                    v111 = 0;
                    while (1)
                    {
                      v112 = v101 + 1;
                      *((_QWORD *)this + 1) = v101 + 1;
                      v113 = *(_BYTE *)(v102 + v101);
                      v111 |= (unint64_t)(v113 & 0x7F) << v109;
                      if ((v113 & 0x80) == 0)
                        goto LABEL_139;
                      v109 += 7;
                      v101 = v112;
                      v103 = v110++ > 8;
                      if (v103)
                      {
                        v111 = 0;
                        goto LABEL_139;
                      }
                    }
                  }
                  v104 = 0;
                  v105 = 0;
                  v111 = 0;
                  if (v100 <= v101)
                    v106 = *((_QWORD *)this + 1);
                  else
                    v106 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v106 == v101)
                    {
                      *((_BYTE *)this + 24) = 1;
                      *((_QWORD *)v89 - 1) = 0;
                      goto LABEL_276;
                    }
                    v107 = v101++;
                    v108 = *(_BYTE *)(v102 + v107);
                    *((_QWORD *)this + 1) = v101;
                    v111 |= (unint64_t)(v108 & 0x7F) << v104;
                    if ((v108 & 0x80) == 0)
                      break;
                    v104 += 7;
                    v103 = v105++ > 8;
                    if (v103)
                    {
                      v111 = 0;
                      goto LABEL_138;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v111 = 0;
LABEL_138:
                  v112 = v107 + 1;
LABEL_139:
                  *((_QWORD *)v89 - 1) = v111;
                }
                while (v112 < v100 && !*((_BYTE *)this + 24));
              }
LABEL_276:
              PB::Reader::recallMark();
            }
            else
            {
              v181 = v9;
              v182 = v2;
              v184 = *(char **)(a1 + 16);
              v183 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v184 >= v183)
              {
                v197 = (char *)*v11;
                v198 = (v184 - (_BYTE *)*v11) >> 3;
                v199 = v198 + 1;
                if ((unint64_t)(v198 + 1) >> 61)
LABEL_363:
                  sub_18F26F8C0();
                v200 = v183 - (_QWORD)v197;
                if (v200 >> 2 > v199)
                  v199 = v200 >> 2;
                if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8)
                  v201 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v201 = v199;
                if (v201)
                {
                  v202 = (char *)sub_18F26F8D4((uint64_t)v12, v201);
                  v197 = *(char **)(a1 + 8);
                  v184 = *(char **)(a1 + 16);
                }
                else
                {
                  v202 = 0;
                }
                v209 = &v202[8 * v198];
                *(_QWORD *)v209 = 0;
                v185 = v209 + 8;
                while (v184 != v197)
                {
                  v210 = *((_QWORD *)v184 - 1);
                  v184 -= 8;
                  *((_QWORD *)v209 - 1) = v210;
                  v209 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v209;
                *(_QWORD *)(a1 + 16) = v185;
                *(_QWORD *)(a1 + 24) = &v202[8 * v201];
                if (v197)
                  operator delete(v197);
              }
              else
              {
                *(_QWORD *)v184 = 0;
                v185 = v184 + 8;
              }
              *(_QWORD *)(a1 + 16) = v185;
              v211 = *((_QWORD *)this + 1);
              v212 = *((_QWORD *)this + 2);
              v213 = *(_QWORD *)this;
              v214 = 0;
              v215 = 0;
              if (v211 > 0xFFFFFFFFFFFFFFF5 || v211 + 10 > v212)
              {
                v219 = 0;
                if (v212 <= v211)
                  v212 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v212 == v211)
                  {
                    v219 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_351;
                  }
                  v217 = v211 + 1;
                  v218 = *(_BYTE *)(v213 + v211);
                  *((_QWORD *)this + 1) = v217;
                  v219 |= (unint64_t)(v218 & 0x7F) << v214;
                  if ((v218 & 0x80) == 0)
                    break;
                  v214 += 7;
                  v211 = v217;
                  v103 = v215++ > 8;
                  if (v103)
                  {
LABEL_336:
                    v219 = 0;
                    goto LABEL_351;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v219 = 0;
              }
              else
              {
                v219 = 0;
                while (1)
                {
                  v220 = v211 + 1;
                  *((_QWORD *)this + 1) = v211 + 1;
                  v221 = *(_BYTE *)(v213 + v211);
                  v219 |= (unint64_t)(v221 & 0x7F) << v214;
                  if ((v221 & 0x80) == 0)
                    break;
                  v214 += 7;
                  v211 = v220;
                  v103 = v215++ > 8;
                  if (v103)
                    goto LABEL_336;
                }
              }
LABEL_351:
              *(v185 - 1) = v219;
              v2 = v182;
              v9 = v181;
            }
            break;
          case 205:
            if (v24 == 2)
            {
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v114 = v2;
              v115 = *((_QWORD *)this + 1);
              v116 = *((_QWORD *)this + 2);
              while (v115 < v116 && !*((_BYTE *)this + 24))
              {
                v118 = *(char **)(a1 + 40);
                v117 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v118 >= v117)
                {
                  v120 = (char *)*v9;
                  v121 = (v118 - (_BYTE *)*v9) >> 2;
                  v122 = v121 + 1;
                  if ((unint64_t)(v121 + 1) >> 62)
                    goto LABEL_362;
                  v123 = v117 - (_QWORD)v120;
                  if (v123 >> 1 > v122)
                    v122 = v123 >> 1;
                  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFFCLL)
                    v124 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v124 = v122;
                  if (v124)
                  {
                    v125 = (char *)sub_18F26FB8C(v10, v124);
                    v120 = *(char **)(a1 + 32);
                    v118 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v125 = 0;
                  }
                  v126 = &v125[4 * v121];
                  *(_DWORD *)v126 = 0;
                  v119 = v126 + 4;
                  while (v118 != v120)
                  {
                    v127 = *((_DWORD *)v118 - 1);
                    v118 -= 4;
                    *((_DWORD *)v126 - 1) = v127;
                    v126 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v126;
                  *(_QWORD *)(a1 + 40) = v119;
                  *(_QWORD *)(a1 + 48) = &v125[4 * v124];
                  if (v120)
                    operator delete(v120);
                }
                else
                {
                  *(_DWORD *)v118 = 0;
                  v119 = v118 + 4;
                }
                *(_QWORD *)(a1 + 40) = v119;
                v128 = *((_QWORD *)this + 1);
                if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
                {
                  *((_BYTE *)this + 24) = 1;
                  break;
                }
                *(v119 - 1) = *(_DWORD *)(*(_QWORD *)this + v128);
                v116 = *((_QWORD *)this + 2);
                v115 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v115;
              }
              PB::Reader::recallMark();
            }
            else
            {
              v114 = v2;
              v187 = *(char **)(a1 + 40);
              v186 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v187 >= v186)
              {
                v203 = (char *)*v9;
                v204 = (v187 - (_BYTE *)*v9) >> 2;
                v205 = v204 + 1;
                if ((unint64_t)(v204 + 1) >> 62)
LABEL_362:
                  sub_18F26F8C0();
                v206 = v186 - (_QWORD)v203;
                if (v206 >> 1 > v205)
                  v205 = v206 >> 1;
                if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFFFCLL)
                  v207 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v207 = v205;
                if (v207)
                {
                  v208 = (char *)sub_18F26FB8C(v10, v207);
                  v203 = *(char **)(a1 + 32);
                  v187 = *(char **)(a1 + 40);
                }
                else
                {
                  v208 = 0;
                }
                v222 = &v208[4 * v204];
                *(_DWORD *)v222 = 0;
                v188 = v222 + 4;
                while (v187 != v203)
                {
                  v223 = *((_DWORD *)v187 - 1);
                  v187 -= 4;
                  *((_DWORD *)v222 - 1) = v223;
                  v222 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v222;
                *(_QWORD *)(a1 + 40) = v188;
                *(_QWORD *)(a1 + 48) = &v208[4 * v207];
                if (v203)
                  operator delete(v203);
              }
              else
              {
                *(_DWORD *)v187 = 0;
                v188 = v187 + 4;
              }
              *(_QWORD *)(a1 + 40) = v188;
              v224 = *((_QWORD *)this + 1);
              if (v224 <= 0xFFFFFFFFFFFFFFFBLL && v224 + 4 <= *((_QWORD *)this + 2))
              {
                *(v188 - 1) = *(_DWORD *)(*(_QWORD *)this + v224);
                *((_QWORD *)this + 1) += 4;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
            }
            v2 = v114;
            break;
          case 206:
            *(_DWORD *)(a1 + 152) |= 1u;
            v129 = *((_QWORD *)this + 1);
            v130 = *((_QWORD *)this + 2);
            v131 = *(_QWORD *)this;
            if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
            {
              v132 = 0;
              v133 = 0;
              v134 = 0;
              do
              {
                v135 = v129 + 1;
                *((_QWORD *)this + 1) = v129 + 1;
                v136 = *(_BYTE *)(v131 + v129);
                v134 |= (unint64_t)(v136 & 0x7F) << v132;
                if ((v136 & 0x80) == 0)
                  goto LABEL_309;
                v132 += 7;
                v129 = v135;
                v103 = v133++ > 8;
              }
              while (!v103);
LABEL_245:
              v134 = 0;
              goto LABEL_309;
            }
            v189 = 0;
            v190 = 0;
            v134 = 0;
            if (v130 <= v129)
              v130 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v130 == v129)
              {
                v134 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v191 = v129 + 1;
                v192 = *(_BYTE *)(v131 + v129);
                *((_QWORD *)this + 1) = v191;
                v134 |= (unint64_t)(v192 & 0x7F) << v189;
                if (v192 < 0)
                {
                  v189 += 7;
                  v129 = v191;
                  v103 = v190++ > 8;
                  if (v103)
                    goto LABEL_245;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v134 = 0;
              }
              break;
            }
LABEL_309:
            *(_QWORD *)(a1 + 56) = v134;
            break;
          case 207:
            *(_DWORD *)(a1 + 152) |= 2u;
            v137 = *((_QWORD *)this + 1);
            v138 = *((_QWORD *)this + 2);
            v139 = *(_QWORD *)this;
            if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
            {
              v140 = 0;
              v141 = 0;
              v142 = 0;
              do
              {
                v143 = v137 + 1;
                *((_QWORD *)this + 1) = v137 + 1;
                v144 = *(_BYTE *)(v139 + v137);
                v142 |= (unint64_t)(v144 & 0x7F) << v140;
                if ((v144 & 0x80) == 0)
                  goto LABEL_312;
                v140 += 7;
                v137 = v143;
                v103 = v141++ > 8;
              }
              while (!v103);
LABEL_252:
              v142 = 0;
              goto LABEL_312;
            }
            v193 = 0;
            v194 = 0;
            v142 = 0;
            if (v138 <= v137)
              v138 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v138 == v137)
              {
                v142 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v195 = v137 + 1;
                v196 = *(_BYTE *)(v139 + v137);
                *((_QWORD *)this + 1) = v195;
                v142 |= (unint64_t)(v196 & 0x7F) << v193;
                if (v196 < 0)
                {
                  v193 += 7;
                  v137 = v195;
                  v103 = v194++ > 8;
                  if (v103)
                    goto LABEL_252;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v142 = 0;
              }
              break;
            }
LABEL_312:
            *(_QWORD *)(a1 + 64) = v142;
            break;
          case 208:
            *(_DWORD *)(a1 + 152) |= 0x20000u;
            v145 = *((_QWORD *)this + 1);
            if (v145 >= *((_QWORD *)this + 2))
            {
              v148 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v146 = v145 + 1;
              v147 = *(unsigned __int8 *)(*(_QWORD *)this + v145);
              *((_QWORD *)this + 1) = v146;
              v148 = v147 != 0;
            }
            *(_BYTE *)(a1 + 149) = v148;
            break;
          default:
            if ((_DWORD)v25 == 101)
            {
              *(_DWORD *)(a1 + 152) |= 0x10000u;
              v149 = *((_QWORD *)this + 1);
              if (v149 >= *((_QWORD *)this + 2))
              {
                v152 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v150 = v149 + 1;
                v151 = *(unsigned __int8 *)(*(_QWORD *)this + v149);
                *((_QWORD *)this + 1) = v150;
                v152 = v151 != 0;
              }
              *(_BYTE *)(a1 + 148) = v152;
            }
            else if ((_DWORD)v25 == 102)
            {
              *(_DWORD *)(a1 + 152) |= 0x40u;
              v35 = *((_QWORD *)this + 1);
              v36 = *((_QWORD *)this + 2);
              v37 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v36)
              {
                v157 = 0;
                v158 = 0;
                v40 = 0;
                if (v36 <= v35)
                  v36 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v36 == v35)
                  {
                    v40 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_291;
                  }
                  v159 = v35 + 1;
                  v160 = *(_BYTE *)(v37 + v35);
                  *((_QWORD *)this + 1) = v159;
                  v40 |= (unint64_t)(v160 & 0x7F) << v157;
                  if ((v160 & 0x80) == 0)
                    break;
                  v157 += 7;
                  v35 = v159;
                  v103 = v158++ > 8;
                  if (v103)
                  {
LABEL_199:
                    v40 = 0;
                    goto LABEL_291;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v40 = 0;
              }
              else
              {
                v38 = 0;
                v39 = 0;
                v40 = 0;
                while (1)
                {
                  v41 = v35 + 1;
                  *((_QWORD *)this + 1) = v35 + 1;
                  v42 = *(_BYTE *)(v37 + v35);
                  v40 |= (unint64_t)(v42 & 0x7F) << v38;
                  if ((v42 & 0x80) == 0)
                    break;
                  v38 += 7;
                  v35 = v41;
                  v103 = v39++ > 8;
                  if (v103)
                    goto LABEL_199;
                }
              }
LABEL_291:
              *(_QWORD *)(a1 + 104) = v40;
            }
            else
            {
LABEL_184:
              if ((PB::Reader::skip(this) & 1) == 0)
                return 0;
            }
            break;
        }
      }
      else
      {
        switch((int)v25)
        {
          case 1:
            *(_DWORD *)(a1 + 152) |= 0x80u;
            v26 = *((_QWORD *)this + 1);
            if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v26);
            goto LABEL_258;
          case 2:
            *(_DWORD *)(a1 + 152) |= 8u;
            v43 = *((_QWORD *)this + 1);
            v44 = *((_QWORD *)this + 2);
            v45 = *(_QWORD *)this;
            if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
            {
              v46 = 0;
              v47 = 0;
              v48 = 0;
              do
              {
                v49 = v43 + 1;
                *((_QWORD *)this + 1) = v43 + 1;
                v50 = *(_BYTE *)(v45 + v43);
                v48 |= (unint64_t)(v50 & 0x7F) << v46;
                if ((v50 & 0x80) == 0)
                  goto LABEL_294;
                v46 += 7;
                v43 = v49;
                v103 = v47++ > 8;
              }
              while (!v103);
LABEL_206:
              v48 = 0;
              goto LABEL_294;
            }
            v161 = 0;
            v162 = 0;
            v48 = 0;
            if (v44 <= v43)
              v44 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v44 == v43)
              {
                v48 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v163 = v43 + 1;
                v164 = *(_BYTE *)(v45 + v43);
                *((_QWORD *)this + 1) = v163;
                v48 |= (unint64_t)(v164 & 0x7F) << v161;
                if (v164 < 0)
                {
                  v161 += 7;
                  v43 = v163;
                  v103 = v162++ > 8;
                  if (v103)
                    goto LABEL_206;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v48 = 0;
              }
              break;
            }
LABEL_294:
            *(_QWORD *)(a1 + 80) = v48;
            goto LABEL_352;
          case 3:
            *(_DWORD *)(a1 + 152) |= 0x800u;
            v51 = *((_QWORD *)this + 1);
            v52 = *((_QWORD *)this + 2);
            v53 = *(_QWORD *)this;
            if (v51 <= 0xFFFFFFFFFFFFFFF5 && v51 + 10 <= v52)
            {
              v54 = 0;
              v55 = 0;
              v56 = 0;
              do
              {
                v57 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v58 = *(_BYTE *)(v53 + v51);
                v56 |= (unint64_t)(v58 & 0x7F) << v54;
                if ((v58 & 0x80) == 0)
                  goto LABEL_297;
                v54 += 7;
                v51 = v57;
                v103 = v55++ > 8;
              }
              while (!v103);
LABEL_213:
              LODWORD(v56) = 0;
              goto LABEL_297;
            }
            v165 = 0;
            v166 = 0;
            v56 = 0;
            if (v52 <= v51)
              v52 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v52 == v51)
              {
                LODWORD(v56) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v167 = v51 + 1;
                v168 = *(_BYTE *)(v53 + v51);
                *((_QWORD *)this + 1) = v167;
                v56 |= (unint64_t)(v168 & 0x7F) << v165;
                if (v168 < 0)
                {
                  v165 += 7;
                  v51 = v167;
                  v103 = v166++ > 8;
                  if (v103)
                    goto LABEL_213;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v56) = 0;
              }
              break;
            }
LABEL_297:
            *(_DWORD *)(a1 + 128) = v56;
            goto LABEL_352;
          case 4:
            *(_DWORD *)(a1 + 152) |= 0x10u;
            v59 = *((_QWORD *)this + 1);
            v60 = *((_QWORD *)this + 2);
            v61 = *(_QWORD *)this;
            if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
            {
              v62 = 0;
              v63 = 0;
              v64 = 0;
              do
              {
                v65 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v66 = *(_BYTE *)(v61 + v59);
                v64 |= (unint64_t)(v66 & 0x7F) << v62;
                if ((v66 & 0x80) == 0)
                  goto LABEL_300;
                v62 += 7;
                v59 = v65;
                v103 = v63++ > 8;
              }
              while (!v103);
LABEL_220:
              v64 = 0;
              goto LABEL_300;
            }
            v169 = 0;
            v170 = 0;
            v64 = 0;
            if (v60 <= v59)
              v60 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v60 == v59)
              {
                v64 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v171 = v59 + 1;
                v172 = *(_BYTE *)(v61 + v59);
                *((_QWORD *)this + 1) = v171;
                v64 |= (unint64_t)(v172 & 0x7F) << v169;
                if (v172 < 0)
                {
                  v169 += 7;
                  v59 = v171;
                  v103 = v170++ > 8;
                  if (v103)
                    goto LABEL_220;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v64 = 0;
              }
              break;
            }
LABEL_300:
            *(_QWORD *)(a1 + 88) = v64;
            goto LABEL_352;
          case 5:
            *(_DWORD *)(a1 + 152) |= 0x4000u;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v67);
            goto LABEL_258;
          case 6:
            *(_DWORD *)(a1 + 152) |= 0x8000u;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v68);
            goto LABEL_258;
          case 7:
            *(_DWORD *)(a1 + 152) |= 0x200u;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v69);
            goto LABEL_258;
          case 8:
            *(_DWORD *)(a1 + 152) |= 0x400u;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_258;
          case 9:
            *(_DWORD *)(a1 + 152) |= 0x20u;
            v71 = *((_QWORD *)this + 1);
            v72 = *((_QWORD *)this + 2);
            v73 = *(_QWORD *)this;
            if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
            {
              v74 = 0;
              v75 = 0;
              v76 = 0;
              do
              {
                v77 = v71 + 1;
                *((_QWORD *)this + 1) = v71 + 1;
                v78 = *(_BYTE *)(v73 + v71);
                v76 |= (unint64_t)(v78 & 0x7F) << v74;
                if ((v78 & 0x80) == 0)
                  goto LABEL_303;
                v74 += 7;
                v71 = v77;
                v103 = v75++ > 8;
              }
              while (!v103);
LABEL_227:
              v76 = 0;
              goto LABEL_303;
            }
            v173 = 0;
            v174 = 0;
            v76 = 0;
            if (v72 <= v71)
              v72 = *((_QWORD *)this + 1);
            break;
          case 10:
            *(_DWORD *)(a1 + 152) |= 0x100u;
            v79 = *((_QWORD *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
              goto LABEL_96;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v79);
            goto LABEL_258;
          default:
            goto LABEL_184;
        }
        while (1)
        {
          if (v72 == v71)
          {
            v76 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_303;
          }
          v175 = v71 + 1;
          v176 = *(_BYTE *)(v73 + v71);
          *((_QWORD *)this + 1) = v175;
          v76 |= (unint64_t)(v176 & 0x7F) << v173;
          if ((v176 & 0x80) == 0)
            break;
          v173 += 7;
          v71 = v175;
          v103 = v174++ > 8;
          if (v103)
            goto LABEL_227;
        }
        if (*((_BYTE *)this + 24))
          v76 = 0;
LABEL_303:
        *(_QWORD *)(a1 + 96) = v76;
      }
LABEL_352:
      v3 = *((_QWORD *)this + 1);
      v4 = *((_QWORD *)this + 2);
      v5 = *((unsigned __int8 *)this + 24);
      if (v3 >= v4 || v5 != 0)
        return v5 == 0;
    }
    v19 = 0;
    v20 = 0;
    v16 = 0;
    if (v3 > v4)
      v4 = v3;
    while (v4 != v3)
    {
      v21 = v3 + 1;
      v22 = *(_BYTE *)(v13 + v3);
      *((_QWORD *)this + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v3 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v5 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v5 == 0;
}

uint64_t sub_18F250CC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  int v10;

  v3 = result;
  v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 112));
    v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_29;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x800) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0)
      goto LABEL_7;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0)
      goto LABEL_15;
LABEL_40:
    result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 152) & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) != 0)
    goto LABEL_40;
LABEL_15:
  if ((v4 & 0x2000) != 0)
LABEL_16:
    result = PB::Writer::write(this, *(float *)(v3 + 136));
LABEL_17:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  while (v5 != v6)
  {
    v5 += 8;
    result = PB::Writer::writeVarInt(this);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(_DWORD *)(v3 + 152);
  if ((v10 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v10 = *(_DWORD *)(v3 + 152);
    if ((v10 & 2) == 0)
    {
LABEL_25:
      if ((v10 & 0x20000) == 0)
        return result;
      return PB::Writer::write(this);
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_25;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 152) & 0x20000) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F250F28(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E090;
  *(_DWORD *)(result + 72) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_18F250F44(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F250F68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "accelMagnitude", *(float *)(a1 + 64));
    v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaVThisImpact", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "dimensions");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "epochCounter");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "jHG");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "jImpactStart");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "jLG");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "nextTimestamp");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "partOfHgPath");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "pointType");
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "runningArclengthOverEpoch", *(float *)(a1 + 76));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "runningArclengthThisImpact", *(float *)(a1 + 80));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "runningDeltaVXOverEpoch", *(float *)(a1 + 84));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "runningDeltaVXThisImpact", *(float *)(a1 + 88));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "runningDeltaVYOverEpoch", *(float *)(a1 + 92));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "runningDeltaVYThisImpact", *(float *)(a1 + 96));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0)
      goto LABEL_19;
LABEL_39:
    PB::TextFormatter::format(this, "runningDeltaVZThisImpact", *(float *)(a1 + 104));
    if ((*(_DWORD *)(a1 + 112) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_20;
  }
LABEL_38:
  PB::TextFormatter::format(this, "runningDeltaVZOverEpoch", *(float *)(a1 + 100));
  v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) != 0)
    goto LABEL_39;
LABEL_19:
  if ((v5 & 0x40) != 0)
LABEL_20:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2511F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  int v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  v73 = v20++;
                  v74 = *(_BYTE *)(v21 + v73);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_175;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_175:
                v2 = v73 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_176;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_176:
              *(_QWORD *)(a1 + 56) = v24;
              goto LABEL_212;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_181;
                  }
                  v77 = v27++;
                  v78 = *(_BYTE *)(v28 + v77);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_180:
                    v2 = v77 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_180;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_181;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_181:
              *(_QWORD *)(a1 + 32) = -(v31 & 1) ^ (v31 >> 1);
              goto LABEL_212;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    v37 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_186;
                  }
                  v81 = v33++;
                  v82 = *(_BYTE *)(v34 + v81);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    v37 = 0;
LABEL_185:
                    v2 = v81 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v37 = 0;
                goto LABEL_185;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_186;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              v37 = 0;
LABEL_186:
              *(_QWORD *)(a1 + 8) = v37;
              goto LABEL_212;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_74;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_171;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_171:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_212;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v40 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v39 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v40 = v39 != 0;
              }
              *(_BYTE *)(a1 + 108) = v40;
              goto LABEL_212;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v83 = 0;
                v84 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_191;
                  }
                  v85 = v41++;
                  v86 = *(_BYTE *)(v42 + v85);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0)
                    break;
                  v83 += 7;
                  v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_190:
                    v2 = v85 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_190;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_191;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_191:
              *(_DWORD *)(a1 + 72) = v45;
              goto LABEL_212;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v87 = 0;
                v88 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    v51 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_196;
                  }
                  v89 = v47++;
                  v90 = *(_BYTE *)(v48 + v89);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0)
                    break;
                  v87 += 7;
                  v14 = v88++ > 8;
                  if (v14)
                  {
                    v51 = 0;
LABEL_195:
                    v2 = v89 + 1;
                    goto LABEL_196;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
                goto LABEL_195;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_196;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              v51 = 0;
LABEL_196:
              *(_QWORD *)(a1 + 16) = v51;
              goto LABEL_212;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v91 = 0;
                v92 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    v57 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_201;
                  }
                  v93 = v53++;
                  v94 = *(_BYTE *)(v54 + v93);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0)
                    break;
                  v91 += 7;
                  v14 = v92++ > 8;
                  if (v14)
                  {
                    v57 = 0;
LABEL_200:
                    v2 = v93 + 1;
                    goto LABEL_201;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
                goto LABEL_200;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_201;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              v57 = 0;
LABEL_201:
              *(_QWORD *)(a1 + 48) = v57;
              goto LABEL_212;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              v59 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v60 = *(_QWORD *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                v95 = 0;
                v96 = 0;
                v63 = 0;
                if (v2 <= v59)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v59)
                  {
                    v63 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  v97 = v59++;
                  v98 = *(_BYTE *)(v60 + v97);
                  *((_QWORD *)this + 1) = v59;
                  v63 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0)
                    break;
                  v95 += 7;
                  v14 = v96++ > 8;
                  if (v14)
                  {
                    v63 = 0;
LABEL_205:
                    v2 = v97 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v63 = 0;
                goto LABEL_205;
              }
              v61 = 0;
              v62 = 0;
              v63 = 0;
              do
              {
                v2 = v59 + 1;
                *((_QWORD *)this + 1) = v59 + 1;
                v64 = *(_BYTE *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0)
                  goto LABEL_206;
                v61 += 7;
                v59 = v2;
                v14 = v62++ > 8;
              }
              while (!v14);
              v63 = 0;
LABEL_206:
              *(_QWORD *)(a1 + 40) = v63;
              goto LABEL_212;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 4u;
              v65 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v66 = *(_QWORD *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                v99 = 0;
                v100 = 0;
                v69 = 0;
                if (v2 <= v65)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v65)
                  {
                    v69 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  v101 = v65++;
                  v102 = *(_BYTE *)(v66 + v101);
                  *((_QWORD *)this + 1) = v65;
                  v69 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0)
                    break;
                  v99 += 7;
                  v14 = v100++ > 8;
                  if (v14)
                  {
                    v69 = 0;
LABEL_210:
                    v2 = v101 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v69 = 0;
                goto LABEL_210;
              }
              v67 = 0;
              v68 = 0;
              v69 = 0;
              do
              {
                v2 = v65 + 1;
                *((_QWORD *)this + 1) = v65 + 1;
                v70 = *(_BYTE *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0)
                  goto LABEL_211;
                v67 += 7;
                v65 = v2;
                v14 = v68++ > 8;
              }
              while (!v14);
              v69 = 0;
LABEL_211:
              *(_QWORD *)(a1 + 24) = v69;
LABEL_212:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_212;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F251D54(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 112);
  if ((v4 & 0x40) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeSInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 0x20) == 0)
      goto LABEL_18;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_38:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 112) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F251F8C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950208;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_18F251FA4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F251FC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "epochCounter");
    v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "inertialAccelX", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "inertialAccelY", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "inertialAccelZ", *(double *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 64));
    if ((*(_WORD *)(a1 + 80) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 0x100) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F252118(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 0x100u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_78;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_78:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_79;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_79:
              *(_QWORD *)(a1 + 72) = v24;
              goto LABEL_85;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 3u:
              *(_WORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 4u:
              *(_WORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 80) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_83:
                    v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_83;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_84;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_84:
              *(_QWORD *)(a1 + 8) = v31;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_58;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_58:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2525F4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 80);
  if ((v4 & 0x100) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 40));
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  if ((*(_WORD *)(v3 + 80) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 40));
  return result;
}

uint64_t sub_18F252714(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950668;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void sub_18F25272C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F252750(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "bodyAccelX", *(double *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bodyAccelY", *(double *)(a1 + 16));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "bodyAccelZ", *(double *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "epochCounter");
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "inertialAccelX", *(double *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inertialAccelY", *(double *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "inertialAccelZ", *(double *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 64));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 88));
    if ((*(_WORD *)(a1 + 104) & 0x800) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 80));
  v5 = *(_WORD *)(a1 + 104);
  if ((v5 & 0x400) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x800) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F252900(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 104) |= 0x800u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v35 = v20++;
                  v36 = *(_BYTE *)(v21 + v35);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v35 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 96) = v24;
              goto LABEL_94;
            case 2u:
              *(_WORD *)(a1 + 104) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 3u:
              *(_WORD *)(a1 + 104) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 4u:
              *(_WORD *)(a1 + 104) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 5u:
              *(_WORD *)(a1 + 104) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_92:
                    v2 = v39 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_93:
              *(_QWORD *)(a1 + 32) = v31;
LABEL_94:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_WORD *)(a1 + 104) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 7u:
              *(_WORD *)(a1 + 104) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 8u:
              *(_WORD *)(a1 + 104) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 9u:
              *(_WORD *)(a1 + 104) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xAu:
              *(_WORD *)(a1 + 104) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xBu:
              *(_WORD *)(a1 + 104) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_67;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_83;
            case 0xCu:
              *(_WORD *)(a1 + 104) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_83:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_67:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_94;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_94;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F252E84(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 104);
  if ((v4 & 0x800) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 104);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(double *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x200) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(double *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x200) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(double *)(v3 + 88));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 104);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 24));
  }
LABEL_24:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_WORD *)(v3 + 104) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

uint64_t sub_18F252FF8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E0C8;
  *(_DWORD *)(result + 324) = 0;
  *(_QWORD *)(result + 316) = 0;
  return result;
}

void sub_18F253018(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F25303C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 316);
  v6 = *(_QWORD *)(a1 + 316);
  if ((v6 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "arclengthXYBiggestImpact", *(float *)(a1 + 80));
    v6 = *v5;
    v7 = *(_BYTE *)(a1 + 324);
    if ((*v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(_BYTE *)(a1 + 324);
  if ((v6 & 0x400) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "arclengthXYOverEpoch", *(float *)(a1 + 84));
    v6 = *v5;
    v7 = *(_BYTE *)(a1 + 324);
  }
LABEL_6:
  if ((v6 & 0x800) != 0)
  {
    PB::TextFormatter::format(this, "arclengthXYZBiggestImpact", *(float *)(a1 + 88));
    v6 = *v5;
    v7 = *(_BYTE *)(a1 + 324);
    if ((*v5 & 0x1000) == 0)
    {
LABEL_8:
      if ((v6 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_76;
    }
  }
  else if ((v6 & 0x1000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "arclengthXYZOverEpoch", *(float *)(a1 + 92));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v6 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "arclengthZBiggestImpact", *(float *)(a1 + 96));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "arclengthZOverEpoch", *(float *)(a1 + 100));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 1) == 0)
      goto LABEL_12;
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "configDecelPulseThreshold", *(float *)(a1 + 104));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 1) == 0)
  {
LABEL_12:
    if ((v6 & 0x10000) == 0)
      goto LABEL_13;
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "deltaTriggerTime");
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "deltaVXYBiggestImpact", *(float *)(a1 + 108));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x40000) == 0)
      goto LABEL_15;
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 112));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_15:
    if ((v6 & 0x80000) == 0)
      goto LABEL_16;
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "deltaVXYUnconditional", *(float *)(a1 + 116));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v6 & 0x100000) == 0)
      goto LABEL_17;
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "deltaVXYZBiggestImpact", *(float *)(a1 + 120));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0)
      goto LABEL_18;
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "deltaVXYZOverEpoch", *(float *)(a1 + 124));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v6 & 0x400000) == 0)
      goto LABEL_19;
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "deltaVXYZUnconditional", *(float *)(a1 + 128));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v6 & 0x800000) == 0)
      goto LABEL_20;
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "deltaVZBiggestImpact", *(float *)(a1 + 132));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_20:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_21;
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "deltaVZOverEpoch", *(float *)(a1 + 136));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_22;
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "deltaVZUnconditional", *(float *)(a1 + 140));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_23;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "durationXYBiggestImpact", *(float *)(a1 + 144));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_24;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "durationXYZBiggestImpact", *(float *)(a1 + 148));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v6 & 2) == 0)
      goto LABEL_25;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "durationZBiggestImpact", *(float *)(a1 + 152));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 2) == 0)
  {
LABEL_25:
    if ((v6 & 4) == 0)
      goto LABEL_26;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 4) == 0)
  {
LABEL_26:
    if ((v6 & 8) == 0)
      goto LABEL_27;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 8) == 0)
  {
LABEL_27:
    if ((v6 & 0x10) == 0)
      goto LABEL_28;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "faultCounter");
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_29;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "hgAccelBufferSize");
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_30;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "hgArclengthXYBiggestImpact", *(float *)(a1 + 156));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_31;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "hgArclengthXYOverEpoch", *(float *)(a1 + 160));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "hgArclengthXYZBiggestImpact", *(float *)(a1 + 164));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_33;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "hgArclengthXYZOverEpoch", *(float *)(a1 + 168));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_34;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "hgArclengthZBiggestImpact", *(float *)(a1 + 172));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_35;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "hgArclengthZOverEpoch", *(float *)(a1 + 176));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_36;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "hgDeltaVXYBiggestImpact", *(float *)(a1 + 180));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_37;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "hgDeltaVXYOverEpoch", *(float *)(a1 + 184));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_38;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "hgDeltaVXYUnconditional", *(float *)(a1 + 188));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_39;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "hgDeltaVXYZBiggestImpact", *(float *)(a1 + 192));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_40;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "hgDeltaVXYZOverEpoch", *(float *)(a1 + 196));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_41;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "hgDeltaVXYZUnconditional", *(float *)(a1 + 200));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_42;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "hgDeltaVZBiggestImpact", *(float *)(a1 + 204));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_43;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "hgDeltaVZOverEpoch", *(float *)(a1 + 208));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_44;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "hgDeltaVZUnconditional", *(float *)(a1 + 212));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_45;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "hgDurationXYBiggestImpact", *(float *)(a1 + 216));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_46;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "hgDurationXYZBiggestImpact", *(float *)(a1 + 220));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_47;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "hgDurationZBiggestImpact", *(float *)(a1 + 224));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_47:
    if ((v7 & 8) == 0)
      goto LABEL_48;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "hgWeightCoeff", *(float *)(a1 + 228));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((v7 & 8) == 0)
  {
LABEL_48:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_49;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "isPulseDetected");
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_50;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "lgArclengthXYBiggestImpact", *(float *)(a1 + 232));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_51;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "lgArclengthXYOverEpoch", *(float *)(a1 + 236));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_52;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "lgArclengthXYZBiggestImpact", *(float *)(a1 + 240));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_53;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "lgArclengthXYZOverEpoch", *(float *)(a1 + 244));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_54;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "lgArclengthZBiggestImpact", *(float *)(a1 + 248));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_55;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "lgArclengthZOverEpoch", *(float *)(a1 + 252));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_56;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "lgDeltaVXYBiggestImpact", *(float *)(a1 + 256));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_57;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "lgDeltaVXYOverEpoch", *(float *)(a1 + 260));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_58;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "lgDeltaVXYUnconditional", *(float *)(a1 + 264));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "lgDeltaVXYZBiggestImpact", *(float *)(a1 + 268));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_60;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "lgDeltaVXYZOverEpoch", *(float *)(a1 + 272));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_61;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "lgDeltaVXYZUnconditional", *(float *)(a1 + 276));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "lgDeltaVZBiggestImpact", *(float *)(a1 + 280));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_63;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "lgDeltaVZOverEpoch", *(float *)(a1 + 284));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_64;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "lgDeltaVZUnconditional", *(float *)(a1 + 288));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_64:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "lgDurationXYBiggestImpact", *(float *)(a1 + 292));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v7 & 1) == 0)
      goto LABEL_66;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "lgDurationXYZBiggestImpact", *(float *)(a1 + 296));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((v7 & 1) == 0)
  {
LABEL_66:
    if ((v7 & 2) == 0)
      goto LABEL_67;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "lgDurationZBiggestImpact", *(float *)(a1 + 300));
  v6 = *v5;
  v7 = *(_BYTE *)(a1 + 324);
  if ((v7 & 2) == 0)
  {
LABEL_67:
    if ((v7 & 4) == 0)
      goto LABEL_68;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 304));
  v6 = *v5;
  if ((*(_BYTE *)(a1 + 324) & 4) == 0)
  {
LABEL_68:
    if ((v6 & 0x20) == 0)
      goto LABEL_69;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "maxPulseHeight", *(float *)(a1 + 308));
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_69:
    if ((v6 & 0x40) == 0)
      goto LABEL_70;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "maxPulseStartTime");
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_70:
    if ((v6 & 0x80) == 0)
      goto LABEL_71;
LABEL_138:
    PB::TextFormatter::format(this, "timestamp");
    if ((*v5 & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_72;
  }
LABEL_137:
  PB::TextFormatter::format(this, "maxPulseTime");
  v6 = *v5;
  if ((*v5 & 0x80) != 0)
    goto LABEL_138;
LABEL_71:
  if ((v6 & 0x100) != 0)
LABEL_72:
    PB::TextFormatter::format(this, "triggerTimestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2539F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  unsigned int v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  char v155;
  uint64_t result;
  char v157;
  unsigned int v158;
  unint64_t v159;
  char v160;
  char v161;
  unsigned int v162;
  unint64_t v163;
  char v164;
  char v165;
  unsigned int v166;
  unint64_t v167;
  char v168;
  char v169;
  unsigned int v170;
  unint64_t v171;
  char v172;
  char v173;
  unsigned int v174;
  unint64_t v175;
  char v176;
  char v177;
  unsigned int v178;
  unint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = a1 + 316;
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 200)
      {
        switch((_DWORD)v21)
        {
          case 0xC9:
            *(_QWORD *)v8 |= 2uLL;
            v140 = *((_QWORD *)this + 1);
            v141 = *((_QWORD *)this + 2);
            v142 = *(_QWORD *)this;
            if (v140 > 0xFFFFFFFFFFFFFFF5 || v140 + 10 > v141)
            {
              v185 = 0;
              v186 = 0;
              v145 = 0;
              if (v141 <= v140)
                v141 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v141 == v140)
                {
                  v145 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_372;
                }
                v187 = v140 + 1;
                v188 = *(_BYTE *)(v142 + v140);
                *((_QWORD *)this + 1) = v187;
                v145 |= (unint64_t)(v188 & 0x7F) << v185;
                if ((v188 & 0x80) == 0)
                  break;
                v185 += 7;
                v140 = v187;
                v15 = v186++ > 8;
                if (v15)
                {
LABEL_325:
                  v145 = 0;
                  goto LABEL_372;
                }
              }
              if (*((_BYTE *)this + 24))
                v145 = 0;
            }
            else
            {
              v143 = 0;
              v144 = 0;
              v145 = 0;
              while (1)
              {
                v146 = v140 + 1;
                *((_QWORD *)this + 1) = v140 + 1;
                v147 = *(_BYTE *)(v142 + v140);
                v145 |= (unint64_t)(v147 & 0x7F) << v143;
                if ((v147 & 0x80) == 0)
                  break;
                v143 += 7;
                v140 = v146;
                v15 = v144++ > 8;
                if (v15)
                  goto LABEL_325;
              }
            }
LABEL_372:
            *(_QWORD *)(a1 + 16) = v145;
            break;
          case 0xCA:
            *(_QWORD *)v8 |= 4uLL;
            v148 = *((_QWORD *)this + 1);
            v149 = *((_QWORD *)this + 2);
            v150 = *(_QWORD *)this;
            if (v148 > 0xFFFFFFFFFFFFFFF5 || v148 + 10 > v149)
            {
              v189 = 0;
              v190 = 0;
              v153 = 0;
              if (v149 <= v148)
                v149 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v149 == v148)
                {
                  v153 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_376;
                }
                v191 = v148 + 1;
                v192 = *(_BYTE *)(v150 + v148);
                *((_QWORD *)this + 1) = v191;
                v153 |= (unint64_t)(v192 & 0x7F) << v189;
                if ((v192 & 0x80) == 0)
                  break;
                v189 += 7;
                v148 = v191;
                v15 = v190++ > 8;
                if (v15)
                {
LABEL_332:
                  v153 = 0;
                  goto LABEL_376;
                }
              }
              if (*((_BYTE *)this + 24))
                v153 = 0;
            }
            else
            {
              v151 = 0;
              v152 = 0;
              v153 = 0;
              while (1)
              {
                v154 = v148 + 1;
                *((_QWORD *)this + 1) = v148 + 1;
                v155 = *(_BYTE *)(v150 + v148);
                v153 |= (unint64_t)(v155 & 0x7F) << v151;
                if ((v155 & 0x80) == 0)
                  break;
                v151 += 7;
                v148 = v154;
                v15 = v152++ > 8;
                if (v15)
                  goto LABEL_332;
              }
            }
LABEL_376:
            *(_QWORD *)(a1 + 24) = v153;
            break;
          case 0x12D:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v26 = *((_QWORD *)this + 1);
            if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(_QWORD *)this + v26);
LABEL_335:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
            break;
          default:
LABEL_266:
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 1:
            *(_BYTE *)(v8 + 8) |= 8u;
            v22 = *((_QWORD *)this + 1);
            if (v22 >= *((_QWORD *)this + 2))
            {
              v25 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v23 = v22 + 1;
              v24 = *(unsigned __int8 *)(*(_QWORD *)this + v22);
              *((_QWORD *)this + 1) = v23;
              v25 = v24 != 0;
            }
            *(_BYTE *)(a1 + 312) = v25;
            goto LABEL_336;
          case 2:
            *(_BYTE *)(v8 + 8) |= 2u;
            v27 = *((_QWORD *)this + 1);
            if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 304) = *(_DWORD *)(*(_QWORD *)this + v27);
            goto LABEL_335;
          case 3:
            *(_BYTE *)(v8 + 8) |= 4u;
            v28 = *((_QWORD *)this + 1);
            if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 308) = *(_DWORD *)(*(_QWORD *)this + v28);
            goto LABEL_335;
          case 4:
            *(_QWORD *)v8 |= 0x20uLL;
            v29 = *((_QWORD *)this + 1);
            v30 = *((_QWORD *)this + 2);
            v31 = *(_QWORD *)this;
            if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
            {
              v32 = 0;
              v33 = 0;
              v34 = 0;
              do
              {
                v35 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v36 = *(_BYTE *)(v31 + v29);
                v34 |= (unint64_t)(v36 & 0x7F) << v32;
                if ((v36 & 0x80) == 0)
                  goto LABEL_344;
                v32 += 7;
                v29 = v35;
                v15 = v33++ > 8;
              }
              while (!v15);
LABEL_276:
              v34 = 0;
              goto LABEL_344;
            }
            v157 = 0;
            v158 = 0;
            v34 = 0;
            if (v30 <= v29)
              v30 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v30 == v29)
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v159 = v29 + 1;
                v160 = *(_BYTE *)(v31 + v29);
                *((_QWORD *)this + 1) = v159;
                v34 |= (unint64_t)(v160 & 0x7F) << v157;
                if (v160 < 0)
                {
                  v157 += 7;
                  v29 = v159;
                  v15 = v158++ > 8;
                  if (v15)
                    goto LABEL_276;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v34 = 0;
              }
              break;
            }
LABEL_344:
            *(_QWORD *)(a1 + 48) = v34;
            goto LABEL_336;
          case 5:
            *(_QWORD *)v8 |= 0x40uLL;
            v37 = *((_QWORD *)this + 1);
            v38 = *((_QWORD *)this + 2);
            v39 = *(_QWORD *)this;
            if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
            {
              v40 = 0;
              v41 = 0;
              v42 = 0;
              do
              {
                v43 = v37 + 1;
                *((_QWORD *)this + 1) = v37 + 1;
                v44 = *(_BYTE *)(v39 + v37);
                v42 |= (unint64_t)(v44 & 0x7F) << v40;
                if ((v44 & 0x80) == 0)
                  goto LABEL_348;
                v40 += 7;
                v37 = v43;
                v15 = v41++ > 8;
              }
              while (!v15);
LABEL_283:
              v42 = 0;
              goto LABEL_348;
            }
            v161 = 0;
            v162 = 0;
            v42 = 0;
            if (v38 <= v37)
              v38 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v38 == v37)
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v163 = v37 + 1;
                v164 = *(_BYTE *)(v39 + v37);
                *((_QWORD *)this + 1) = v163;
                v42 |= (unint64_t)(v164 & 0x7F) << v161;
                if (v164 < 0)
                {
                  v161 += 7;
                  v37 = v163;
                  v15 = v162++ > 8;
                  if (v15)
                    goto LABEL_283;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v42 = 0;
              }
              break;
            }
LABEL_348:
            *(_QWORD *)(a1 + 56) = v42;
            goto LABEL_336;
          case 6:
            *(_QWORD *)v8 |= 1uLL;
            v45 = *((_QWORD *)this + 1);
            v46 = *((_QWORD *)this + 2);
            v47 = *(_QWORD *)this;
            if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
            {
              v48 = 0;
              v49 = 0;
              v50 = 0;
              do
              {
                v51 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v52 = *(_BYTE *)(v47 + v45);
                v50 |= (unint64_t)(v52 & 0x7F) << v48;
                if ((v52 & 0x80) == 0)
                  goto LABEL_352;
                v48 += 7;
                v45 = v51;
                v15 = v49++ > 8;
              }
              while (!v15);
LABEL_290:
              v50 = 0;
              goto LABEL_352;
            }
            v165 = 0;
            v166 = 0;
            v50 = 0;
            if (v46 <= v45)
              v46 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v46 == v45)
              {
                v50 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v167 = v45 + 1;
                v168 = *(_BYTE *)(v47 + v45);
                *((_QWORD *)this + 1) = v167;
                v50 |= (unint64_t)(v168 & 0x7F) << v165;
                if (v168 < 0)
                {
                  v165 += 7;
                  v45 = v167;
                  v15 = v166++ > 8;
                  if (v15)
                    goto LABEL_290;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v50 = 0;
              }
              break;
            }
LABEL_352:
            *(_QWORD *)(a1 + 8) = v50;
            goto LABEL_336;
          case 7:
            *(_QWORD *)v8 |= 0x8000uLL;
            v53 = *((_QWORD *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v53);
            goto LABEL_335;
          case 8:
            *(_QWORD *)v8 |= 0x80uLL;
            v54 = *((_QWORD *)this + 1);
            v55 = *((_QWORD *)this + 2);
            v56 = *(_QWORD *)this;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)this + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_356;
                v57 += 7;
                v54 = v60;
                v15 = v58++ > 8;
              }
              while (!v15);
LABEL_297:
              v59 = 0;
              goto LABEL_356;
            }
            v169 = 0;
            v170 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v55 == v54)
              {
                v59 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v171 = v54 + 1;
                v172 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)this + 1) = v171;
                v59 |= (unint64_t)(v172 & 0x7F) << v169;
                if (v172 < 0)
                {
                  v169 += 7;
                  v54 = v171;
                  v15 = v170++ > 8;
                  if (v15)
                    goto LABEL_297;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v59 = 0;
              }
              break;
            }
LABEL_356:
            *(_QWORD *)(a1 + 64) = v59;
            goto LABEL_336;
          case 9:
            *(_QWORD *)v8 |= 0x100uLL;
            v62 = *((_QWORD *)this + 1);
            v63 = *((_QWORD *)this + 2);
            v64 = *(_QWORD *)this;
            if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
            {
              v65 = 0;
              v66 = 0;
              v67 = 0;
              do
              {
                v68 = v62 + 1;
                *((_QWORD *)this + 1) = v62 + 1;
                v69 = *(_BYTE *)(v64 + v62);
                v67 |= (unint64_t)(v69 & 0x7F) << v65;
                if ((v69 & 0x80) == 0)
                  goto LABEL_360;
                v65 += 7;
                v62 = v68;
                v15 = v66++ > 8;
              }
              while (!v15);
LABEL_304:
              v67 = 0;
              goto LABEL_360;
            }
            v173 = 0;
            v174 = 0;
            v67 = 0;
            if (v63 <= v62)
              v63 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v63 == v62)
              {
                v67 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v175 = v62 + 1;
                v176 = *(_BYTE *)(v64 + v62);
                *((_QWORD *)this + 1) = v175;
                v67 |= (unint64_t)(v176 & 0x7F) << v173;
                if (v176 < 0)
                {
                  v173 += 7;
                  v62 = v175;
                  v15 = v174++ > 8;
                  if (v15)
                    goto LABEL_304;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v67 = 0;
              }
              break;
            }
LABEL_360:
            *(_QWORD *)(a1 + 72) = v67;
            goto LABEL_336;
          case 10:
            *(_QWORD *)v8 |= 0x20000uLL;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_335;
          case 11:
            *(_QWORD *)v8 |= 0x10000uLL;
            v71 = *((_QWORD *)this + 1);
            if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v71);
            goto LABEL_335;
          case 12:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v72 = *((_QWORD *)this + 1);
            if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v72);
            goto LABEL_335;
          case 13:
            *(_QWORD *)v8 |= 0x200uLL;
            v73 = *((_QWORD *)this + 1);
            if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v73);
            goto LABEL_335;
          case 14:
            *(_QWORD *)v8 |= 0x400uLL;
            v74 = *((_QWORD *)this + 1);
            if (v74 > 0xFFFFFFFFFFFFFFFBLL || v74 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v74);
            goto LABEL_335;
          case 15:
            *(_QWORD *)v8 |= 0x800000uLL;
            v75 = *((_QWORD *)this + 1);
            if (v75 > 0xFFFFFFFFFFFFFFFBLL || v75 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v75);
            goto LABEL_335;
          case 16:
            *(_QWORD *)v8 |= 0x4000uLL;
            v76 = *((_QWORD *)this + 1);
            if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v76);
            goto LABEL_335;
          case 17:
            *(_QWORD *)v8 |= 0x400000uLL;
            v77 = *((_QWORD *)this + 1);
            if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v77);
            goto LABEL_335;
          case 18:
            *(_QWORD *)v8 |= 0x2000uLL;
            v78 = *((_QWORD *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v78);
            goto LABEL_335;
          case 19:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v79 = *((_QWORD *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v79);
            goto LABEL_335;
          case 20:
            *(_QWORD *)v8 |= 0x100000uLL;
            v80 = *((_QWORD *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v80);
            goto LABEL_335;
          case 21:
            *(_QWORD *)v8 |= 0x1000uLL;
            v81 = *((_QWORD *)this + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v81);
            goto LABEL_335;
          case 22:
            *(_QWORD *)v8 |= 0x80000uLL;
            v82 = *((_QWORD *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v82);
            goto LABEL_335;
          case 23:
            *(_QWORD *)v8 |= 0x800uLL;
            v83 = *((_QWORD *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v83);
            goto LABEL_335;
          case 24:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v84);
            goto LABEL_335;
          case 25:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v85 = *((_QWORD *)this + 1);
            if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(_QWORD *)this + v85);
            goto LABEL_335;
          case 26:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v86 = *((_QWORD *)this + 1);
            if (v86 > 0xFFFFFFFFFFFFFFFBLL || v86 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(_QWORD *)this + v86);
            goto LABEL_335;
          case 27:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v87 = *((_QWORD *)this + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 292) = *(_DWORD *)(*(_QWORD *)this + v87);
            goto LABEL_335;
          case 28:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v88 = *((_QWORD *)this + 1);
            if (v88 > 0xFFFFFFFFFFFFFFFBLL || v88 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)this + v88);
            goto LABEL_335;
          case 29:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v89 = *((_QWORD *)this + 1);
            if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)this + v89);
            goto LABEL_335;
          case 30:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v90 = *((_QWORD *)this + 1);
            if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 284) = *(_DWORD *)(*(_QWORD *)this + v90);
            goto LABEL_335;
          case 31:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v91 = *((_QWORD *)this + 1);
            if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(_QWORD *)this + v91);
            goto LABEL_335;
          case 32:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v92 = *((_QWORD *)this + 1);
            if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 280) = *(_DWORD *)(*(_QWORD *)this + v92);
            goto LABEL_335;
          case 33:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v93 = *((_QWORD *)this + 1);
            if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 248) = *(_DWORD *)(*(_QWORD *)this + v93);
            goto LABEL_335;
          case 34:
            *(_BYTE *)(v8 + 8) |= 1u;
            v94 = *((_QWORD *)this + 1);
            if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 300) = *(_DWORD *)(*(_QWORD *)this + v94);
            goto LABEL_335;
          case 35:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v95 = *((_QWORD *)this + 1);
            if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 272) = *(_DWORD *)(*(_QWORD *)this + v95);
            goto LABEL_335;
          case 36:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v96 = *((_QWORD *)this + 1);
            if (v96 > 0xFFFFFFFFFFFFFFFBLL || v96 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(_QWORD *)this + v96);
            goto LABEL_335;
          case 37:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v97 = *((_QWORD *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 268) = *(_DWORD *)(*(_QWORD *)this + v97);
            goto LABEL_335;
          case 38:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(_QWORD *)this + v98);
            goto LABEL_335;
          case 39:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v99 = *((_QWORD *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 296) = *(_DWORD *)(*(_QWORD *)this + v99);
            goto LABEL_335;
          case 40:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v100 = *((_QWORD *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v100);
            goto LABEL_335;
          case 41:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v101 = *((_QWORD *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v101);
            goto LABEL_335;
          case 42:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v102 = *((_QWORD *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(_QWORD *)this + v102);
            goto LABEL_335;
          case 43:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v103 = *((_QWORD *)this + 1);
            if (v103 > 0xFFFFFFFFFFFFFFFBLL || v103 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v103);
            goto LABEL_335;
          case 44:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v104 = *((_QWORD *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v104);
            goto LABEL_335;
          case 45:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v105 = *((_QWORD *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v105);
            goto LABEL_335;
          case 46:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v106 = *((_QWORD *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v106);
            goto LABEL_335;
          case 47:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v107 = *((_QWORD *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v107);
            goto LABEL_335;
          case 48:
            *(_QWORD *)v8 |= 0x100000000uLL;
            v108 = *((_QWORD *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v108);
            goto LABEL_335;
          case 49:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v109 = *((_QWORD *)this + 1);
            if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(_QWORD *)this + v109);
            goto LABEL_335;
          case 50:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v110 = *((_QWORD *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v110);
            goto LABEL_335;
          case 51:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v111 = *((_QWORD *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v111);
            goto LABEL_335;
          case 52:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v112 = *((_QWORD *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v112);
            goto LABEL_335;
          case 53:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v113 = *((_QWORD *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v113);
            goto LABEL_335;
          case 54:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v114 = *((_QWORD *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 220) = *(_DWORD *)(*(_QWORD *)this + v114);
            goto LABEL_335;
          case 55:
            *(_QWORD *)v8 |= 8uLL;
            v115 = *((_QWORD *)this + 1);
            v116 = *((_QWORD *)this + 2);
            v117 = *(_QWORD *)this;
            if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
            {
              v118 = 0;
              v119 = 0;
              v120 = 0;
              do
              {
                v121 = v115 + 1;
                *((_QWORD *)this + 1) = v115 + 1;
                v122 = *(_BYTE *)(v117 + v115);
                v120 |= (unint64_t)(v122 & 0x7F) << v118;
                if ((v122 & 0x80) == 0)
                  goto LABEL_364;
                v118 += 7;
                v115 = v121;
                v15 = v119++ > 8;
              }
              while (!v15);
LABEL_311:
              v120 = 0;
              goto LABEL_364;
            }
            v177 = 0;
            v178 = 0;
            v120 = 0;
            if (v116 <= v115)
              v116 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v116 == v115)
              {
                v120 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v179 = v115 + 1;
                v180 = *(_BYTE *)(v117 + v115);
                *((_QWORD *)this + 1) = v179;
                v120 |= (unint64_t)(v180 & 0x7F) << v177;
                if (v180 < 0)
                {
                  v177 += 7;
                  v115 = v179;
                  v15 = v178++ > 8;
                  if (v15)
                    goto LABEL_311;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v120 = 0;
              }
              break;
            }
LABEL_364:
            *(_QWORD *)(a1 + 32) = v120;
            goto LABEL_336;
          case 56:
            *(_QWORD *)v8 |= 0x10uLL;
            v123 = *((_QWORD *)this + 1);
            v124 = *((_QWORD *)this + 2);
            v125 = *(_QWORD *)this;
            if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
            {
              v126 = 0;
              v127 = 0;
              v128 = 0;
              do
              {
                v129 = v123 + 1;
                *((_QWORD *)this + 1) = v123 + 1;
                v130 = *(_BYTE *)(v125 + v123);
                v128 |= (unint64_t)(v130 & 0x7F) << v126;
                if ((v130 & 0x80) == 0)
                  goto LABEL_368;
                v126 += 7;
                v123 = v129;
                v15 = v127++ > 8;
              }
              while (!v15);
LABEL_318:
              v128 = 0;
              goto LABEL_368;
            }
            v181 = 0;
            v182 = 0;
            v128 = 0;
            if (v124 <= v123)
              v124 = *((_QWORD *)this + 1);
            break;
          case 57:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v131 = *((_QWORD *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v131);
            goto LABEL_335;
          case 58:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v132 = *((_QWORD *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 288) = *(_DWORD *)(*(_QWORD *)this + v132);
            goto LABEL_335;
          case 59:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v133 = *((_QWORD *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(_QWORD *)this + v133);
            goto LABEL_335;
          case 60:
            *(_QWORD *)v8 |= 0x40000uLL;
            v134 = *((_QWORD *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v134);
            goto LABEL_335;
          case 61:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v135 = *((_QWORD *)this + 1);
            if (v135 > 0xFFFFFFFFFFFFFFFBLL || v135 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(_QWORD *)this + v135);
            goto LABEL_335;
          case 62:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v136 = *((_QWORD *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v136);
            goto LABEL_335;
          case 63:
            *(_QWORD *)v8 |= 0x200000uLL;
            v137 = *((_QWORD *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v137);
            goto LABEL_335;
          case 64:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v138 = *((_QWORD *)this + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)this + 2))
              goto LABEL_251;
            *(_DWORD *)(a1 + 276) = *(_DWORD *)(*(_QWORD *)this + v138);
            goto LABEL_335;
          case 65:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v139 = *((_QWORD *)this + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((_QWORD *)this + 2))
            {
LABEL_251:
              *((_BYTE *)this + 24) = 1;
              goto LABEL_336;
            }
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v139);
            goto LABEL_335;
          default:
            goto LABEL_266;
        }
        while (1)
        {
          if (v124 == v123)
          {
            v128 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_368;
          }
          v183 = v123 + 1;
          v184 = *(_BYTE *)(v125 + v123);
          *((_QWORD *)this + 1) = v183;
          v128 |= (unint64_t)(v184 & 0x7F) << v181;
          if ((v184 & 0x80) == 0)
            break;
          v181 += 7;
          v123 = v183;
          v15 = v182++ > 8;
          if (v15)
            goto LABEL_318;
        }
        if (*((_BYTE *)this + 24))
          v128 = 0;
LABEL_368:
        *(_QWORD *)(a1 + 40) = v128;
      }
LABEL_336:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2550C0(uint64_t result, PB::Writer *this)
{
  float *v3;
  uint64_t *v4;
  char v5;
  uint64_t v6;

  v3 = (float *)result;
  v4 = (uint64_t *)(result + 316);
  v5 = *(_BYTE *)(result + 324);
  if ((v5 & 8) != 0)
  {
    result = PB::Writer::write(this);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
    if ((v5 & 2) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *v4;
  if ((*(_BYTE *)(result + 324) & 2) != 0)
  {
LABEL_5:
    result = PB::Writer::write(this, v3[76]);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
  }
LABEL_6:
  if ((v5 & 4) != 0)
  {
    result = PB::Writer::write(this, v3[77]);
    v6 = *v4;
    v5 = *((_BYTE *)v4 + 8);
    if ((*v4 & 0x20) == 0)
    {
LABEL_8:
      if ((v6 & 0x40) == 0)
        goto LABEL_9;
      goto LABEL_75;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 1) == 0)
      goto LABEL_10;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 1) == 0)
  {
LABEL_10:
    if ((v6 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_77;
  }
LABEL_76:
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000) == 0)
  {
LABEL_11:
    if ((v6 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_78;
  }
LABEL_77:
  result = PB::Writer::write(this, v3[26]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v6 & 0x100) == 0)
      goto LABEL_13;
    goto LABEL_79;
  }
LABEL_78:
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v6 & 0x20000) == 0)
      goto LABEL_14;
    goto LABEL_80;
  }
LABEL_79:
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000) == 0)
  {
LABEL_14:
    if ((v6 & 0x10000) == 0)
      goto LABEL_15;
    goto LABEL_81;
  }
LABEL_80:
  result = PB::Writer::write(this, v3[28]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_16;
    goto LABEL_82;
  }
LABEL_81:
  result = PB::Writer::write(this, v3[27]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_83;
  }
LABEL_82:
  result = PB::Writer::write(this, v3[36]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v6 & 0x400) == 0)
      goto LABEL_18;
    goto LABEL_84;
  }
LABEL_83:
  result = PB::Writer::write(this, v3[20]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v6 & 0x800000) == 0)
      goto LABEL_19;
    goto LABEL_85;
  }
LABEL_84:
  result = PB::Writer::write(this, v3[21]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v6 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_86;
  }
LABEL_85:
  result = PB::Writer::write(this, v3[34]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v6 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_87;
  }
LABEL_86:
  result = PB::Writer::write(this, v3[25]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v6 & 0x2000) == 0)
      goto LABEL_22;
    goto LABEL_88;
  }
LABEL_87:
  result = PB::Writer::write(this, v3[33]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x2000) == 0)
  {
LABEL_22:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_23;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, v3[24]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this, v3[38]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, v3[31]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v6 & 0x80000) == 0)
      goto LABEL_26;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, v3[23]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800) == 0)
      goto LABEL_27;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this, v3[30]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this, v3[22]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_29;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this, v3[37]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_30;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this, v3[65]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_31;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this, v3[64]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_32;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, v3[73]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_33;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, v3[58]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::write(this, v3[59]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_35;
    goto LABEL_101;
  }
LABEL_100:
  result = PB::Writer::write(this, v3[71]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_36;
    goto LABEL_102;
  }
LABEL_101:
  result = PB::Writer::write(this, v3[63]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_37;
    goto LABEL_103;
  }
LABEL_102:
  result = PB::Writer::write(this, v3[70]);
  v6 = *v4;
  v5 = *((_BYTE *)v4 + 8);
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_37:
    if ((v5 & 1) == 0)
      goto LABEL_38;
    goto LABEL_104;
  }
LABEL_103:
  result = PB::Writer::write(this, v3[62]);
  v6 = *v4;
  if ((v4[1] & 1) == 0)
  {
LABEL_38:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_39;
    goto LABEL_105;
  }
LABEL_104:
  result = PB::Writer::write(this, v3[75]);
  v6 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_40;
    goto LABEL_106;
  }
LABEL_105:
  result = PB::Writer::write(this, v3[68]);
  v6 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_41;
    goto LABEL_107;
  }
LABEL_106:
  result = PB::Writer::write(this, v3[61]);
  v6 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_42;
    goto LABEL_108;
  }
LABEL_107:
  result = PB::Writer::write(this, v3[67]);
  v6 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_43;
    goto LABEL_109;
  }
LABEL_108:
  result = PB::Writer::write(this, v3[60]);
  v6 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_44;
    goto LABEL_110;
  }
LABEL_109:
  result = PB::Writer::write(this, v3[74]);
  v6 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_45;
    goto LABEL_111;
  }
LABEL_110:
  result = PB::Writer::write(this, v3[46]);
  v6 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_46;
    goto LABEL_112;
  }
LABEL_111:
  result = PB::Writer::write(this, v3[45]);
  v6 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_47;
    goto LABEL_113;
  }
LABEL_112:
  result = PB::Writer::write(this, v3[54]);
  v6 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_48;
    goto LABEL_114;
  }
LABEL_113:
  result = PB::Writer::write(this, v3[39]);
  v6 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_49;
    goto LABEL_115;
  }
LABEL_114:
  result = PB::Writer::write(this, v3[40]);
  v6 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_50;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, v3[52]);
  v6 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_51;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, v3[44]);
  v6 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_52;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, v3[51]);
  v6 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_53;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, v3[43]);
  v6 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_54;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, v3[56]);
  v6 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::write(this, v3[49]);
  v6 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_56;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::write(this, v3[42]);
  v6 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_57;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, v3[48]);
  v6 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_58;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, v3[41]);
  v6 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_58:
    if ((v6 & 8) == 0)
      goto LABEL_59;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, v3[55]);
  v6 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_59:
    if ((v6 & 0x10) == 0)
      goto LABEL_60;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_60:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_61;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_62;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, v3[35]);
  v6 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_63;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::write(this, v3[72]);
  v6 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_63:
    if ((v6 & 0x40000) == 0)
      goto LABEL_64;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::write(this, v3[53]);
  v6 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_64:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_65;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::write(this, v3[29]);
  v6 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_65:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_66;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::write(this, v3[66]);
  v6 = *v4;
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x200000) == 0)
      goto LABEL_67;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this, v3[47]);
  v6 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_67:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_68;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this, v3[32]);
  v6 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_69;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this, v3[69]);
  v6 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_69:
    if ((v6 & 2) == 0)
      goto LABEL_70;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this, v3[50]);
  v6 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_70:
    if ((v6 & 4) == 0)
      goto LABEL_71;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::writeVarInt(this);
  v6 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_71:
    if ((v6 & 0x400000000000) == 0)
      return result;
    return PB::Writer::write(this, v3[57]);
  }
LABEL_137:
  result = PB::Writer::writeVarInt(this);
  if ((*v4 & 0x400000000000) != 0)
    return PB::Writer::write(this, v3[57]);
  return result;
}

uint64_t sub_18F2558EC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FA28;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F255904(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F255928(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "debugY");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "outputB");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2559F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F255E04(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F255ECC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EF38;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F255EE4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F255F08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "configThreshold1", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "debugX", *(float *)(a1 + 12));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "outputA", *(float *)(a1 + 20));
    if ((*(_BYTE *)(a1 + 28) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "debugY");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "outputB");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F255FD8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 0x186A0u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A1u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 0x186A2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_66:
                    v2 = v35 + 1;
                    goto LABEL_67;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_66;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_67;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_67:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_73;
            case 0x186A3u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_73;
            case 0x186A4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_71;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_72;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 16) = v31;
LABEL_73:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_73;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2563E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2564AC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FD70;
  *(_QWORD *)(result + 204) = 0;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_18F2564C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2564EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  int v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000000) != 0)
  {
    PB::TextFormatter::format(this, "chaosMet");
    v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    v5 = *(_QWORD *)(a1 + 204);
    if ((v5 & 0x400000000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  if ((v5 & 0x400000000) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "chaosMet0");
    v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    v5 = *(_QWORD *)(a1 + 204);
  }
LABEL_6:
  if ((v5 & 0x800000000) != 0)
  {
    PB::TextFormatter::format(this, "chaosMet1");
    v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
    v5 = *(_QWORD *)(a1 + 204);
    if ((v5 & 0x1000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x2000000000) == 0)
        goto LABEL_9;
      goto LABEL_89;
    }
  }
  else if ((v5 & 0x1000000000) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "chaosMet2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_10;
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "chaosMetRollover");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_11;
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "chaosMetRollover0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_12;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "chaosMetRollover1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_13;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "chaosMetRollover2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_14;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "chaosOrSaturationMet");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_15;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "chaosOrSaturationMet0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_16;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "chaosOrSaturationMet1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_17;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "chaosOrSaturationMet2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_18;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_19;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_20;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_21;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "chaosOrSaturationMetRollover2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_22;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_23;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_24;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMet2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_26;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_27;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_28;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_29;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "energyAndChaosOrSaturationMetRollover2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000000000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_30;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "energyMet");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "energyMet0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_32;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "energyMet1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000000000000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_33;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "energyMet2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_34;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "energyMetRollover");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000000000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_35;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "energyMetRollover0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000000000000) == 0)
  {
LABEL_35:
    if ((v6 & 1) == 0)
      goto LABEL_36;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "energyMetRollover1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 1) == 0)
  {
LABEL_36:
    if ((v5 & 0x10) == 0)
      goto LABEL_37;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "energyMetRollover2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10) == 0)
  {
LABEL_37:
    if ((v5 & 0x20) == 0)
      goto LABEL_38;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "epochNumber");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20) == 0)
  {
LABEL_38:
    if ((v5 & 0x40) == 0)
      goto LABEL_39;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "maxChaos", *(float *)(a1 + 44));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_39:
    if ((v5 & 0x80) == 0)
      goto LABEL_40;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "maxChaos0", *(float *)(a1 + 48));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_40:
    if ((v5 & 0x100) == 0)
      goto LABEL_41;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "maxChaos1", *(float *)(a1 + 52));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100) == 0)
  {
LABEL_41:
    if ((v5 & 0x200) == 0)
      goto LABEL_42;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "maxChaos2", *(float *)(a1 + 56));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200) == 0)
  {
LABEL_42:
    if ((v5 & 0x400) == 0)
      goto LABEL_43;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "maxChaosRollover", *(float *)(a1 + 60));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400) == 0)
  {
LABEL_43:
    if ((v5 & 0x800) == 0)
      goto LABEL_44;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "maxChaosRollover0", *(float *)(a1 + 64));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000) == 0)
      goto LABEL_45;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "maxChaosRollover1", *(float *)(a1 + 68));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000) == 0)
      goto LABEL_46;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "maxChaosRollover2", *(float *)(a1 + 72));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000) == 0)
      goto LABEL_47;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "maxEnergy", *(float *)(a1 + 76));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "maxEnergy0", *(float *)(a1 + 80));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000) == 0)
      goto LABEL_49;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "maxEnergy1", *(float *)(a1 + 84));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000) == 0)
      goto LABEL_50;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "maxEnergy2", *(float *)(a1 + 88));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000) == 0)
  {
LABEL_50:
    if ((v5 & 0x40000) == 0)
      goto LABEL_51;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "maxEnergyRollover", *(float *)(a1 + 92));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000) == 0)
  {
LABEL_51:
    if ((v5 & 0x80000) == 0)
      goto LABEL_52;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "maxEnergyRollover0", *(float *)(a1 + 96));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000) == 0)
  {
LABEL_52:
    if ((v5 & 0x100000) == 0)
      goto LABEL_53;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "maxEnergyRollover1", *(float *)(a1 + 100));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000) == 0)
  {
LABEL_53:
    if ((v5 & 0x200000) == 0)
      goto LABEL_54;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "maxEnergyRollover2", *(float *)(a1 + 104));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x200000) == 0)
  {
LABEL_54:
    if ((v5 & 0x400000) == 0)
      goto LABEL_55;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 108));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x400000) == 0)
  {
LABEL_55:
    if ((v5 & 0x800000) == 0)
      goto LABEL_56;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "maxRMS0", *(float *)(a1 + 112));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x800000) == 0)
  {
LABEL_56:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_57;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "maxRMS1", *(float *)(a1 + 116));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_57:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_58;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "maxRMS2", *(float *)(a1 + 120));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_59;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "maxSaturation", *(float *)(a1 + 124));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_60;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "maxSaturation0", *(float *)(a1 + 128));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_61;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "maxSaturation1", *(float *)(a1 + 132));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_62;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "maxSaturation2", *(float *)(a1 + 136));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_62:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_63;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "maxSaturationRollover", *(float *)(a1 + 140));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_63:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_64;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "maxSaturationRollover0", *(float *)(a1 + 144));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_65;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "maxSaturationRollover1", *(float *)(a1 + 148));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_65:
    if ((v6 & 2) == 0)
      goto LABEL_66;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "maxSaturationRollover2", *(float *)(a1 + 152));
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 2) == 0)
  {
LABEL_66:
    if ((v6 & 4) == 0)
      goto LABEL_67;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "passThru");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 4) == 0)
  {
LABEL_67:
    if ((v6 & 8) == 0)
      goto LABEL_68;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "passThruRollover");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 8) == 0)
  {
LABEL_68:
    if ((v6 & 0x10) == 0)
      goto LABEL_69;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "passthru0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x10) == 0)
  {
LABEL_69:
    if ((v6 & 0x20) == 0)
      goto LABEL_70;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "passthru1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x20) == 0)
  {
LABEL_70:
    if ((v6 & 0x40) == 0)
      goto LABEL_71;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "passthru2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x40) == 0)
  {
LABEL_71:
    if ((v6 & 0x80) == 0)
      goto LABEL_72;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "passthruRollover0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x80) == 0)
  {
LABEL_72:
    if ((v6 & 0x100) == 0)
      goto LABEL_73;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "passthruRollover1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x100) == 0)
  {
LABEL_73:
    if ((v6 & 0x200) == 0)
      goto LABEL_74;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(this, "passthruRollover2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x200) == 0)
  {
LABEL_74:
    if ((v6 & 0x400) == 0)
      goto LABEL_75;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(this, "saturationMet");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x400) == 0)
  {
LABEL_75:
    if ((v6 & 0x800) == 0)
      goto LABEL_76;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(this, "saturationMet0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x800) == 0)
  {
LABEL_76:
    if ((v6 & 0x1000) == 0)
      goto LABEL_77;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(this, "saturationMet1");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x1000) == 0)
  {
LABEL_77:
    if ((v6 & 0x2000) == 0)
      goto LABEL_78;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(this, "saturationMet2");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x2000) == 0)
  {
LABEL_78:
    if ((v6 & 0x4000) == 0)
      goto LABEL_79;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(this, "saturationMetRollover");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x4000) == 0)
  {
LABEL_79:
    if ((v6 & 0x8000) == 0)
      goto LABEL_80;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(this, "saturationMetRollover0");
  v6 = *(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16);
  v5 = *(_QWORD *)(a1 + 204);
  if ((*(_WORD *)(a1 + 212) & 0x8000) == 0)
  {
LABEL_80:
    if ((v6 & 0x10000) == 0)
      goto LABEL_81;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(this, "saturationMetRollover1");
  v5 = *(_QWORD *)(a1 + 204);
  if (((*(unsigned __int16 *)(a1 + 212) | (*(unsigned __int8 *)(a1 + 214) << 16)) & 0x10000) == 0)
  {
LABEL_81:
    if ((v5 & 1) == 0)
      goto LABEL_82;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(this, "saturationMetRollover2");
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 1) == 0)
  {
LABEL_82:
    if ((v5 & 2) == 0)
      goto LABEL_83;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(this, "timestamp");
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 2) == 0)
  {
LABEL_83:
    if ((v5 & 4) == 0)
      goto LABEL_84;
LABEL_164:
    PB::TextFormatter::format(this, "timestamp1");
    if ((*(_QWORD *)(a1 + 204) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_85;
  }
LABEL_163:
  PB::TextFormatter::format(this, "timestamp0");
  v5 = *(_QWORD *)(a1 + 204);
  if ((v5 & 4) != 0)
    goto LABEL_164;
LABEL_84:
  if ((v5 & 8) != 0)
LABEL_85:
    PB::TextFormatter::format(this, "timestamp2");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2572D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  BOOL v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  BOOL v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  BOOL v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  BOOL v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  BOOL v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  BOOL v116;
  unint64_t v117;
  unint64_t v118;
  int v119;
  BOOL v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  BOOL v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  BOOL v132;
  char v133;
  unint64_t v134;
  unint64_t v135;
  int v136;
  BOOL v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  BOOL v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  BOOL v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  int v157;
  BOOL v158;
  unint64_t v159;
  unint64_t v160;
  int v161;
  BOOL v162;
  int v163;
  unsigned int v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  BOOL v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  BOOL v172;
  unint64_t v173;
  unint64_t v174;
  int v175;
  BOOL v176;
  char v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  BOOL v181;
  uint64_t result;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  BOOL v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  BOOL v194;
  char v195;
  unint64_t v196;
  unint64_t v197;
  int v198;
  BOOL v199;
  unint64_t v200;
  unint64_t v201;
  int v202;
  BOOL v203;
  unint64_t v204;
  unint64_t v205;
  int v206;
  BOOL v207;
  char v208;
  unint64_t v209;
  unint64_t v210;
  int v211;
  BOOL v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  int v218;
  BOOL v219;
  unint64_t v220;
  unint64_t v221;
  int v222;
  BOOL v223;
  char v224;
  unint64_t v225;
  unint64_t v226;
  int v227;
  BOOL v228;
  unint64_t v229;
  unint64_t v230;
  int v231;
  BOOL v232;
  unint64_t v233;
  unint64_t v234;
  int v235;
  BOOL v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  int v240;
  BOOL v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  int v248;
  BOOL v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  BOOL v253;
  char v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  BOOL v258;
  unint64_t v259;
  unint64_t v260;
  int v261;
  BOOL v262;
  unint64_t v263;
  unint64_t v264;
  int v265;
  BOOL v266;
  char v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  BOOL v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  unint64_t v276;
  int v277;
  BOOL v278;
  unint64_t v279;
  unint64_t v280;
  int v281;
  BOOL v282;
  char v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  BOOL v287;
  unint64_t v288;
  unint64_t v289;
  int v290;
  BOOL v291;
  unint64_t v292;
  unint64_t v293;
  int v294;
  BOOL v295;
  char v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  BOOL v300;
  char v301;
  unsigned int v302;
  unint64_t v303;
  char v304;
  char v305;
  unsigned int v306;
  unint64_t v307;
  char v308;
  char v309;
  unsigned int v310;
  unint64_t v311;
  char v312;
  char v313;
  unsigned int v314;
  unint64_t v315;
  char v316;
  char v317;
  unsigned int v318;
  unint64_t v319;
  char v320;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = a1 + 204;
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) > 1102)
      {
        switch((int)v21)
        {
          case 1103:
            *(_QWORD *)v8 |= 4uLL;
            v46 = *((_QWORD *)this + 1);
            v47 = *((_QWORD *)this + 2);
            v48 = *(_QWORD *)this;
            if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
            {
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v52 = v46 + 1;
                *((_QWORD *)this + 1) = v46 + 1;
                v53 = *(_BYTE *)(v48 + v46);
                v51 |= (unint64_t)(v53 & 0x7F) << v49;
                if ((v53 & 0x80) == 0)
                  goto LABEL_398;
                v49 += 7;
                v46 = v52;
                v15 = v50++ > 8;
              }
              while (!v15);
LABEL_272:
              v51 = 0;
              goto LABEL_398;
            }
            v313 = 0;
            v314 = 0;
            v51 = 0;
            if (v47 <= v46)
              v47 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v47 == v46)
              {
                v51 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v315 = v46 + 1;
                v316 = *(_BYTE *)(v48 + v46);
                *((_QWORD *)this + 1) = v315;
                v51 |= (unint64_t)(v316 & 0x7F) << v313;
                if (v316 < 0)
                {
                  v313 += 7;
                  v46 = v315;
                  v15 = v314++ > 8;
                  if (v15)
                    goto LABEL_272;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v51 = 0;
              }
              break;
            }
LABEL_398:
            *(_QWORD *)(a1 + 24) = v51;
            goto LABEL_378;
          case 1104:
            *(_QWORD *)v8 |= 0x800000uLL;
            v242 = *((_QWORD *)this + 1);
            if (v242 > 0xFFFFFFFFFFFFFFFBLL || v242 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v242);
            goto LABEL_377;
          case 1105:
            *(_QWORD *)v8 |= 0x8000uLL;
            v243 = *((_QWORD *)this + 1);
            if (v243 > 0xFFFFFFFFFFFFFFFBLL || v243 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v243);
            goto LABEL_377;
          case 1106:
            *(_QWORD *)v8 |= 0x80uLL;
            v244 = *((_QWORD *)this + 1);
            if (v244 > 0xFFFFFFFFFFFFFFFBLL || v244 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v244);
            goto LABEL_377;
          case 1107:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v245 = *((_QWORD *)this + 1);
            if (v245 > 0xFFFFFFFFFFFFFFFBLL || v245 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v245);
            goto LABEL_377;
          case 1108:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v246 = *((_QWORD *)this + 1);
            if (v246 >= *((_QWORD *)this + 2))
            {
              v249 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v247 = v246 + 1;
              v248 = *(unsigned __int8 *)(*(_QWORD *)this + v246);
              *((_QWORD *)this + 1) = v247;
              v249 = v248 != 0;
            }
            *(_BYTE *)(a1 + 182) = v249;
            goto LABEL_378;
          case 1109:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v250 = *((_QWORD *)this + 1);
            if (v250 >= *((_QWORD *)this + 2))
            {
              v253 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v251 = v250 + 1;
              v252 = *(unsigned __int8 *)(*(_QWORD *)this + v250);
              *((_QWORD *)this + 1) = v251;
              v253 = v252 != 0;
            }
            *(_BYTE *)(a1 + 158) = v253;
            goto LABEL_378;
          case 1110:
            v254 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x800u;
            *(_BYTE *)(v8 + 10) = v254;
            v255 = *((_QWORD *)this + 1);
            if (v255 >= *((_QWORD *)this + 2))
            {
              v258 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v256 = v255 + 1;
              v257 = *(unsigned __int8 *)(*(_QWORD *)this + v255);
              *((_QWORD *)this + 1) = v256;
              v258 = v257 != 0;
            }
            *(_BYTE *)(a1 + 198) = v258;
            goto LABEL_378;
          case 1111:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v259 = *((_QWORD *)this + 1);
            if (v259 >= *((_QWORD *)this + 2))
            {
              v262 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v260 = v259 + 1;
              v261 = *(unsigned __int8 *)(*(_QWORD *)this + v259);
              *((_QWORD *)this + 1) = v260;
              v262 = v261 != 0;
            }
            *(_BYTE *)(a1 + 166) = v262;
            goto LABEL_378;
          case 1112:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v263 = *((_QWORD *)this + 1);
            if (v263 >= *((_QWORD *)this + 2))
            {
              v266 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v264 = v263 + 1;
              v265 = *(unsigned __int8 *)(*(_QWORD *)this + v263);
              *((_QWORD *)this + 1) = v264;
              v266 = v265 != 0;
            }
            *(_BYTE *)(a1 + 174) = v266;
            goto LABEL_378;
          case 1113:
            v267 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x10u;
            *(_BYTE *)(v8 + 10) = v267;
            v268 = *((_QWORD *)this + 1);
            if (v268 >= *((_QWORD *)this + 2))
            {
              v271 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v269 = v268 + 1;
              v270 = *(unsigned __int8 *)(*(_QWORD *)this + v268);
              *((_QWORD *)this + 1) = v269;
              v271 = v270 != 0;
            }
            *(_BYTE *)(a1 + 191) = v271;
            goto LABEL_378;
          case 1114:
            *(_QWORD *)v8 |= 0x80000uLL;
            v272 = *((_QWORD *)this + 1);
            if (v272 > 0xFFFFFFFFFFFFFFFBLL || v272 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v272);
            goto LABEL_377;
          case 1115:
            *(_QWORD *)v8 |= 0x800uLL;
            v273 = *((_QWORD *)this + 1);
            if (v273 > 0xFFFFFFFFFFFFFFFBLL || v273 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v273);
            goto LABEL_377;
          case 1116:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v274 = *((_QWORD *)this + 1);
            if (v274 <= 0xFFFFFFFFFFFFFFFBLL && v274 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v274);
LABEL_377:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_232:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_378;
          case 1117:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v275 = *((_QWORD *)this + 1);
            if (v275 >= *((_QWORD *)this + 2))
            {
              v278 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v276 = v275 + 1;
              v277 = *(unsigned __int8 *)(*(_QWORD *)this + v275);
              *((_QWORD *)this + 1) = v276;
              v278 = v277 != 0;
            }
            *(_BYTE *)(a1 + 186) = v278;
            goto LABEL_378;
          case 1118:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v279 = *((_QWORD *)this + 1);
            if (v279 >= *((_QWORD *)this + 2))
            {
              v282 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v280 = v279 + 1;
              v281 = *(unsigned __int8 *)(*(_QWORD *)this + v279);
              *((_QWORD *)this + 1) = v280;
              v282 = v281 != 0;
            }
            *(_BYTE *)(a1 + 162) = v282;
            goto LABEL_378;
          case 1119:
            v283 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x8000u;
            *(_BYTE *)(v8 + 10) = v283;
            v284 = *((_QWORD *)this + 1);
            if (v284 >= *((_QWORD *)this + 2))
            {
              v287 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v285 = v284 + 1;
              v286 = *(unsigned __int8 *)(*(_QWORD *)this + v284);
              *((_QWORD *)this + 1) = v285;
              v287 = v286 != 0;
            }
            *(_BYTE *)(a1 + 202) = v287;
            goto LABEL_378;
          case 1120:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v288 = *((_QWORD *)this + 1);
            if (v288 >= *((_QWORD *)this + 2))
            {
              v291 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v289 = v288 + 1;
              v290 = *(unsigned __int8 *)(*(_QWORD *)this + v288);
              *((_QWORD *)this + 1) = v289;
              v291 = v290 != 0;
            }
            *(_BYTE *)(a1 + 170) = v291;
            goto LABEL_378;
          case 1121:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v292 = *((_QWORD *)this + 1);
            if (v292 >= *((_QWORD *)this + 2))
            {
              v295 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v293 = v292 + 1;
              v294 = *(unsigned __int8 *)(*(_QWORD *)this + v292);
              *((_QWORD *)this + 1) = v293;
              v295 = v294 != 0;
            }
            *(_BYTE *)(a1 + 178) = v295;
            goto LABEL_378;
          case 1122:
            v296 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x80u;
            *(_BYTE *)(v8 + 10) = v296;
            v297 = *((_QWORD *)this + 1);
            if (v297 >= *((_QWORD *)this + 2))
            {
              v300 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v298 = v297 + 1;
              v299 = *(unsigned __int8 *)(*(_QWORD *)this + v297);
              *((_QWORD *)this + 1) = v298;
              v300 = v299 != 0;
            }
            *(_BYTE *)(a1 + 194) = v300;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1203:
                *(_QWORD *)v8 |= 8uLL;
                v30 = *((_QWORD *)this + 1);
                v31 = *((_QWORD *)this + 2);
                v32 = *(_QWORD *)this;
                if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
                {
                  v33 = 0;
                  v34 = 0;
                  v35 = 0;
                  do
                  {
                    v36 = v30 + 1;
                    *((_QWORD *)this + 1) = v30 + 1;
                    v37 = *(_BYTE *)(v32 + v30);
                    v35 |= (unint64_t)(v37 & 0x7F) << v33;
                    if ((v37 & 0x80) == 0)
                      goto LABEL_390;
                    v33 += 7;
                    v30 = v36;
                    v15 = v34++ > 8;
                  }
                  while (!v15);
LABEL_258:
                  v35 = 0;
                  goto LABEL_390;
                }
                v305 = 0;
                v306 = 0;
                v35 = 0;
                if (v31 <= v30)
                  v31 = *((_QWORD *)this + 1);
                break;
              case 1204:
                *(_QWORD *)v8 |= 0x1000000uLL;
                v121 = *((_QWORD *)this + 1);
                if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v121);
                goto LABEL_377;
              case 1205:
                *(_QWORD *)v8 |= 0x10000uLL;
                v122 = *((_QWORD *)this + 1);
                if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v122);
                goto LABEL_377;
              case 1206:
                *(_QWORD *)v8 |= 0x100uLL;
                v123 = *((_QWORD *)this + 1);
                if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v123);
                goto LABEL_377;
              case 1207:
                *(_QWORD *)v8 |= 0x10000000uLL;
                v124 = *((_QWORD *)this + 1);
                if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v124);
                goto LABEL_377;
              case 1208:
                *(_QWORD *)v8 |= 0x1000000000000000uLL;
                v125 = *((_QWORD *)this + 1);
                if (v125 >= *((_QWORD *)this + 2))
                {
                  v128 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v126 = v125 + 1;
                  v127 = *(unsigned __int8 *)(*(_QWORD *)this + v125);
                  *((_QWORD *)this + 1) = v126;
                  v128 = v127 != 0;
                }
                *(_BYTE *)(a1 + 183) = v128;
                goto LABEL_378;
              case 1209:
                *(_QWORD *)v8 |= 0x1000000000uLL;
                v129 = *((_QWORD *)this + 1);
                if (v129 >= *((_QWORD *)this + 2))
                {
                  v132 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v130 = v129 + 1;
                  v131 = *(unsigned __int8 *)(*(_QWORD *)this + v129);
                  *((_QWORD *)this + 1) = v130;
                  v132 = v131 != 0;
                }
                *(_BYTE *)(a1 + 159) = v132;
                goto LABEL_378;
              case 1210:
                v133 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x1000u;
                *(_BYTE *)(v8 + 10) = v133;
                v134 = *((_QWORD *)this + 1);
                if (v134 >= *((_QWORD *)this + 2))
                {
                  v137 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v135 = v134 + 1;
                  v136 = *(unsigned __int8 *)(*(_QWORD *)this + v134);
                  *((_QWORD *)this + 1) = v135;
                  v137 = v136 != 0;
                }
                *(_BYTE *)(a1 + 199) = v137;
                goto LABEL_378;
              case 1211:
                *(_QWORD *)v8 |= 0x100000000000uLL;
                v138 = *((_QWORD *)this + 1);
                if (v138 >= *((_QWORD *)this + 2))
                {
                  v141 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v139 = v138 + 1;
                  v140 = *(unsigned __int8 *)(*(_QWORD *)this + v138);
                  *((_QWORD *)this + 1) = v139;
                  v141 = v140 != 0;
                }
                *(_BYTE *)(a1 + 167) = v141;
                goto LABEL_378;
              case 1212:
                *(_QWORD *)v8 |= 0x10000000000000uLL;
                v142 = *((_QWORD *)this + 1);
                if (v142 >= *((_QWORD *)this + 2))
                {
                  v145 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v143 = v142 + 1;
                  v144 = *(unsigned __int8 *)(*(_QWORD *)this + v142);
                  *((_QWORD *)this + 1) = v143;
                  v145 = v144 != 0;
                }
                *(_BYTE *)(a1 + 175) = v145;
                goto LABEL_378;
              case 1213:
                v146 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x20u;
                *(_BYTE *)(v8 + 10) = v146;
                v147 = *((_QWORD *)this + 1);
                if (v147 >= *((_QWORD *)this + 2))
                {
                  v150 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v148 = v147 + 1;
                  v149 = *(unsigned __int8 *)(*(_QWORD *)this + v147);
                  *((_QWORD *)this + 1) = v148;
                  v150 = v149 != 0;
                }
                *(_BYTE *)(a1 + 192) = v150;
                goto LABEL_378;
              case 1214:
                *(_QWORD *)v8 |= 0x100000uLL;
                v151 = *((_QWORD *)this + 1);
                if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v151);
                goto LABEL_377;
              case 1215:
                *(_QWORD *)v8 |= 0x1000uLL;
                v152 = *((_QWORD *)this + 1);
                if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v152);
                goto LABEL_377;
              case 1216:
                *(_QWORD *)v8 |= 0x100000000uLL;
                v153 = *((_QWORD *)this + 1);
                if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v153);
                goto LABEL_377;
              case 1217:
                v154 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 1u;
                *(_BYTE *)(v8 + 10) = v154;
                v155 = *((_QWORD *)this + 1);
                if (v155 >= *((_QWORD *)this + 2))
                {
                  v158 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v156 = v155 + 1;
                  v157 = *(unsigned __int8 *)(*(_QWORD *)this + v155);
                  *((_QWORD *)this + 1) = v156;
                  v158 = v157 != 0;
                }
                *(_BYTE *)(a1 + 187) = v158;
                goto LABEL_378;
              case 1218:
                *(_QWORD *)v8 |= 0x10000000000uLL;
                v159 = *((_QWORD *)this + 1);
                if (v159 >= *((_QWORD *)this + 2))
                {
                  v162 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v160 = v159 + 1;
                  v161 = *(unsigned __int8 *)(*(_QWORD *)this + v159);
                  *((_QWORD *)this + 1) = v160;
                  v162 = v161 != 0;
                }
                *(_BYTE *)(a1 + 163) = v162;
                goto LABEL_378;
              case 1219:
                v163 = *(unsigned __int16 *)(v8 + 8);
                v164 = (v163 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x10000u) >> 16;
                *(_WORD *)(v8 + 8) = v163;
                *(_BYTE *)(v8 + 10) = v164;
                v165 = *((_QWORD *)this + 1);
                if (v165 >= *((_QWORD *)this + 2))
                {
                  v168 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v166 = v165 + 1;
                  v167 = *(unsigned __int8 *)(*(_QWORD *)this + v165);
                  *((_QWORD *)this + 1) = v166;
                  v168 = v167 != 0;
                }
                *(_BYTE *)(a1 + 203) = v168;
                goto LABEL_378;
              case 1220:
                *(_QWORD *)v8 |= 0x1000000000000uLL;
                v169 = *((_QWORD *)this + 1);
                if (v169 >= *((_QWORD *)this + 2))
                {
                  v172 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v170 = v169 + 1;
                  v171 = *(unsigned __int8 *)(*(_QWORD *)this + v169);
                  *((_QWORD *)this + 1) = v170;
                  v172 = v171 != 0;
                }
                *(_BYTE *)(a1 + 171) = v172;
                goto LABEL_378;
              case 1221:
                *(_QWORD *)v8 |= 0x100000000000000uLL;
                v173 = *((_QWORD *)this + 1);
                if (v173 >= *((_QWORD *)this + 2))
                {
                  v176 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v174 = v173 + 1;
                  v175 = *(unsigned __int8 *)(*(_QWORD *)this + v173);
                  *((_QWORD *)this + 1) = v174;
                  v176 = v175 != 0;
                }
                *(_BYTE *)(a1 + 179) = v176;
                goto LABEL_378;
              case 1222:
                v177 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x100u;
                *(_BYTE *)(v8 + 10) = v177;
                v178 = *((_QWORD *)this + 1);
                if (v178 >= *((_QWORD *)this + 2))
                {
                  v181 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v179 = v178 + 1;
                  v180 = *(unsigned __int8 *)(*(_QWORD *)this + v178);
                  *((_QWORD *)this + 1) = v179;
                  v181 = v180 != 0;
                }
                *(_BYTE *)(a1 + 195) = v181;
                goto LABEL_378;
              default:
LABEL_153:
                result = PB::Reader::skip(this);
                if (!(_DWORD)result)
                  return result;
                goto LABEL_378;
            }
            break;
        }
        while (1)
        {
          if (v31 == v30)
          {
            v35 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_390;
          }
          v307 = v30 + 1;
          v308 = *(_BYTE *)(v32 + v30);
          *((_QWORD *)this + 1) = v307;
          v35 |= (unint64_t)(v308 & 0x7F) << v305;
          if ((v308 & 0x80) == 0)
            break;
          v305 += 7;
          v30 = v307;
          v15 = v306++ > 8;
          if (v15)
            goto LABEL_258;
        }
        if (*((_BYTE *)this + 24))
          v35 = 0;
LABEL_390:
        *(_QWORD *)(a1 + 32) = v35;
      }
      else
      {
        switch((int)v21)
        {
          case 'e':
            *(_QWORD *)v8 |= 1uLL;
            v22 = *((_QWORD *)this + 1);
            v23 = *((_QWORD *)this + 2);
            v24 = *(_QWORD *)this;
            if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
            {
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v28 = v22 + 1;
                *((_QWORD *)this + 1) = v22 + 1;
                v29 = *(_BYTE *)(v24 + v22);
                v27 |= (unint64_t)(v29 & 0x7F) << v25;
                if ((v29 & 0x80) == 0)
                  goto LABEL_386;
                v25 += 7;
                v22 = v28;
                v15 = v26++ > 8;
              }
              while (!v15);
LABEL_251:
              v27 = 0;
              goto LABEL_386;
            }
            v301 = 0;
            v302 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v23 == v22)
              {
                v27 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v303 = v22 + 1;
                v304 = *(_BYTE *)(v24 + v22);
                *((_QWORD *)this + 1) = v303;
                v27 |= (unint64_t)(v304 & 0x7F) << v301;
                if (v304 < 0)
                {
                  v301 += 7;
                  v22 = v303;
                  v15 = v302++ > 8;
                  if (v15)
                    goto LABEL_251;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v27 = 0;
              }
              break;
            }
LABEL_386:
            *(_QWORD *)(a1 + 8) = v27;
            goto LABEL_378;
          case 'f':
            *(_QWORD *)v8 |= 0x10uLL;
            v54 = *((_QWORD *)this + 1);
            v55 = *((_QWORD *)this + 2);
            v56 = *(_QWORD *)this;
            if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
            {
              v57 = 0;
              v58 = 0;
              v59 = 0;
              do
              {
                v60 = v54 + 1;
                *((_QWORD *)this + 1) = v54 + 1;
                v61 = *(_BYTE *)(v56 + v54);
                v59 |= (unint64_t)(v61 & 0x7F) << v57;
                if ((v61 & 0x80) == 0)
                  goto LABEL_402;
                v57 += 7;
                v54 = v60;
                v15 = v58++ > 8;
              }
              while (!v15);
LABEL_279:
              LODWORD(v59) = 0;
              goto LABEL_402;
            }
            v317 = 0;
            v318 = 0;
            v59 = 0;
            if (v55 <= v54)
              v55 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v55 == v54)
              {
                LODWORD(v59) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v319 = v54 + 1;
                v320 = *(_BYTE *)(v56 + v54);
                *((_QWORD *)this + 1) = v319;
                v59 |= (unint64_t)(v320 & 0x7F) << v317;
                if (v320 < 0)
                {
                  v317 += 7;
                  v54 = v319;
                  v15 = v318++ > 8;
                  if (v15)
                    goto LABEL_279;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v59) = 0;
              }
              break;
            }
LABEL_402:
            *(_DWORD *)(a1 + 40) = v59;
            goto LABEL_378;
          case 'g':
            v62 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 2u;
            *(_BYTE *)(v8 + 10) = v62;
            v63 = *((_QWORD *)this + 1);
            if (v63 >= *((_QWORD *)this + 2))
            {
              v66 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v64 = v63 + 1;
              v65 = *(unsigned __int8 *)(*(_QWORD *)this + v63);
              *((_QWORD *)this + 1) = v64;
              v66 = v65 != 0;
            }
            *(_BYTE *)(a1 + 188) = v66;
            goto LABEL_378;
          case 'h':
            *(_QWORD *)v8 |= 0x200000uLL;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v67);
            goto LABEL_377;
          case 'i':
            *(_QWORD *)v8 |= 0x2000uLL;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v68);
            goto LABEL_377;
          case 'j':
            *(_QWORD *)v8 |= 0x20uLL;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v69);
            goto LABEL_377;
          case 'k':
            *(_QWORD *)v8 |= 0x2000000uLL;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_377;
          case 'l':
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v71 = *((_QWORD *)this + 1);
            if (v71 >= *((_QWORD *)this + 2))
            {
              v74 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v72 = v71 + 1;
              v73 = *(unsigned __int8 *)(*(_QWORD *)this + v71);
              *((_QWORD *)this + 1) = v72;
              v74 = v73 != 0;
            }
            *(_BYTE *)(a1 + 180) = v74;
            goto LABEL_378;
          case 'm':
            *(_QWORD *)v8 |= 0x200000000uLL;
            v75 = *((_QWORD *)this + 1);
            if (v75 >= *((_QWORD *)this + 2))
            {
              v78 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v76 = v75 + 1;
              v77 = *(unsigned __int8 *)(*(_QWORD *)this + v75);
              *((_QWORD *)this + 1) = v76;
              v78 = v77 != 0;
            }
            *(_BYTE *)(a1 + 156) = v78;
            goto LABEL_378;
          case 'n':
            v79 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x200u;
            *(_BYTE *)(v8 + 10) = v79;
            v80 = *((_QWORD *)this + 1);
            if (v80 >= *((_QWORD *)this + 2))
            {
              v83 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v81 = v80 + 1;
              v82 = *(unsigned __int8 *)(*(_QWORD *)this + v80);
              *((_QWORD *)this + 1) = v81;
              v83 = v82 != 0;
            }
            *(_BYTE *)(a1 + 196) = v83;
            goto LABEL_378;
          case 'o':
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v84 = *((_QWORD *)this + 1);
            if (v84 >= *((_QWORD *)this + 2))
            {
              v87 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v85 = v84 + 1;
              v86 = *(unsigned __int8 *)(*(_QWORD *)this + v84);
              *((_QWORD *)this + 1) = v85;
              v87 = v86 != 0;
            }
            *(_BYTE *)(a1 + 164) = v87;
            goto LABEL_378;
          case 'p':
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v88 = *((_QWORD *)this + 1);
            if (v88 >= *((_QWORD *)this + 2))
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v89 = v88 + 1;
              v90 = *(unsigned __int8 *)(*(_QWORD *)this + v88);
              *((_QWORD *)this + 1) = v89;
              v91 = v90 != 0;
            }
            *(_BYTE *)(a1 + 172) = v91;
            goto LABEL_378;
          case 'q':
            v92 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 4u;
            *(_BYTE *)(v8 + 10) = v92;
            v93 = *((_QWORD *)this + 1);
            if (v93 >= *((_QWORD *)this + 2))
            {
              v96 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v94 = v93 + 1;
              v95 = *(unsigned __int8 *)(*(_QWORD *)this + v93);
              *((_QWORD *)this + 1) = v94;
              v96 = v95 != 0;
            }
            *(_BYTE *)(a1 + 189) = v96;
            goto LABEL_378;
          case 'r':
            *(_QWORD *)v8 |= 0x20000uLL;
            v97 = *((_QWORD *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v97);
            goto LABEL_377;
          case 's':
            *(_QWORD *)v8 |= 0x200uLL;
            v98 = *((_QWORD *)this + 1);
            if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v98);
            goto LABEL_377;
          case 't':
            *(_QWORD *)v8 |= 0x20000000uLL;
            v99 = *((_QWORD *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              goto LABEL_232;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v99);
            goto LABEL_377;
          case 'u':
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v100 = *((_QWORD *)this + 1);
            if (v100 >= *((_QWORD *)this + 2))
            {
              v103 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v101 = v100 + 1;
              v102 = *(unsigned __int8 *)(*(_QWORD *)this + v100);
              *((_QWORD *)this + 1) = v101;
              v103 = v102 != 0;
            }
            *(_BYTE *)(a1 + 184) = v103;
            goto LABEL_378;
          case 'v':
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v104 = *((_QWORD *)this + 1);
            if (v104 >= *((_QWORD *)this + 2))
            {
              v107 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v105 = v104 + 1;
              v106 = *(unsigned __int8 *)(*(_QWORD *)this + v104);
              *((_QWORD *)this + 1) = v105;
              v107 = v106 != 0;
            }
            *(_BYTE *)(a1 + 160) = v107;
            goto LABEL_378;
          case 'w':
            v108 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x2000u;
            *(_BYTE *)(v8 + 10) = v108;
            v109 = *((_QWORD *)this + 1);
            if (v109 >= *((_QWORD *)this + 2))
            {
              v112 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v110 = v109 + 1;
              v111 = *(unsigned __int8 *)(*(_QWORD *)this + v109);
              *((_QWORD *)this + 1) = v110;
              v112 = v111 != 0;
            }
            *(_BYTE *)(a1 + 200) = v112;
            goto LABEL_378;
          case 'x':
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v113 = *((_QWORD *)this + 1);
            if (v113 >= *((_QWORD *)this + 2))
            {
              v116 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v114 = v113 + 1;
              v115 = *(unsigned __int8 *)(*(_QWORD *)this + v113);
              *((_QWORD *)this + 1) = v114;
              v116 = v115 != 0;
            }
            *(_BYTE *)(a1 + 168) = v116;
            goto LABEL_378;
          case 'y':
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v117 = *((_QWORD *)this + 1);
            if (v117 >= *((_QWORD *)this + 2))
            {
              v120 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v118 = v117 + 1;
              v119 = *(unsigned __int8 *)(*(_QWORD *)this + v117);
              *((_QWORD *)this + 1) = v118;
              v120 = v119 != 0;
            }
            *(_BYTE *)(a1 + 176) = v120;
            goto LABEL_378;
          default:
            switch((int)v21)
            {
              case 1003:
                *(_QWORD *)v8 |= 2uLL;
                v38 = *((_QWORD *)this + 1);
                v39 = *((_QWORD *)this + 2);
                v40 = *(_QWORD *)this;
                if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
                {
                  v41 = 0;
                  v42 = 0;
                  v43 = 0;
                  do
                  {
                    v44 = v38 + 1;
                    *((_QWORD *)this + 1) = v38 + 1;
                    v45 = *(_BYTE *)(v40 + v38);
                    v43 |= (unint64_t)(v45 & 0x7F) << v41;
                    if ((v45 & 0x80) == 0)
                      goto LABEL_394;
                    v41 += 7;
                    v38 = v44;
                    v15 = v42++ > 8;
                  }
                  while (!v15);
LABEL_265:
                  v43 = 0;
                  goto LABEL_394;
                }
                v309 = 0;
                v310 = 0;
                v43 = 0;
                if (v39 <= v38)
                  v39 = *((_QWORD *)this + 1);
                break;
              case 1004:
                *(_QWORD *)v8 |= 0x400000uLL;
                v183 = *((_QWORD *)this + 1);
                if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v183);
                goto LABEL_377;
              case 1005:
                *(_QWORD *)v8 |= 0x4000uLL;
                v184 = *((_QWORD *)this + 1);
                if (v184 > 0xFFFFFFFFFFFFFFFBLL || v184 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v184);
                goto LABEL_377;
              case 1006:
                *(_QWORD *)v8 |= 0x40uLL;
                v185 = *((_QWORD *)this + 1);
                if (v185 > 0xFFFFFFFFFFFFFFFBLL || v185 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v185);
                goto LABEL_377;
              case 1007:
                *(_QWORD *)v8 |= 0x4000000uLL;
                v186 = *((_QWORD *)this + 1);
                if (v186 > 0xFFFFFFFFFFFFFFFBLL || v186 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v186);
                goto LABEL_377;
              case 1008:
                *(_QWORD *)v8 |= 0x400000000000000uLL;
                v187 = *((_QWORD *)this + 1);
                if (v187 >= *((_QWORD *)this + 2))
                {
                  v190 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v188 = v187 + 1;
                  v189 = *(unsigned __int8 *)(*(_QWORD *)this + v187);
                  *((_QWORD *)this + 1) = v188;
                  v190 = v189 != 0;
                }
                *(_BYTE *)(a1 + 181) = v190;
                goto LABEL_378;
              case 1009:
                *(_QWORD *)v8 |= 0x400000000uLL;
                v191 = *((_QWORD *)this + 1);
                if (v191 >= *((_QWORD *)this + 2))
                {
                  v194 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v192 = v191 + 1;
                  v193 = *(unsigned __int8 *)(*(_QWORD *)this + v191);
                  *((_QWORD *)this + 1) = v192;
                  v194 = v193 != 0;
                }
                *(_BYTE *)(a1 + 157) = v194;
                goto LABEL_378;
              case 1010:
                v195 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x400u;
                *(_BYTE *)(v8 + 10) = v195;
                v196 = *((_QWORD *)this + 1);
                if (v196 >= *((_QWORD *)this + 2))
                {
                  v199 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v197 = v196 + 1;
                  v198 = *(unsigned __int8 *)(*(_QWORD *)this + v196);
                  *((_QWORD *)this + 1) = v197;
                  v199 = v198 != 0;
                }
                *(_BYTE *)(a1 + 197) = v199;
                goto LABEL_378;
              case 1011:
                *(_QWORD *)v8 |= 0x40000000000uLL;
                v200 = *((_QWORD *)this + 1);
                if (v200 >= *((_QWORD *)this + 2))
                {
                  v203 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v201 = v200 + 1;
                  v202 = *(unsigned __int8 *)(*(_QWORD *)this + v200);
                  *((_QWORD *)this + 1) = v201;
                  v203 = v202 != 0;
                }
                *(_BYTE *)(a1 + 165) = v203;
                goto LABEL_378;
              case 1012:
                *(_QWORD *)v8 |= 0x4000000000000uLL;
                v204 = *((_QWORD *)this + 1);
                if (v204 >= *((_QWORD *)this + 2))
                {
                  v207 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v205 = v204 + 1;
                  v206 = *(unsigned __int8 *)(*(_QWORD *)this + v204);
                  *((_QWORD *)this + 1) = v205;
                  v207 = v206 != 0;
                }
                *(_BYTE *)(a1 + 173) = v207;
                goto LABEL_378;
              case 1013:
                v208 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 8u;
                *(_BYTE *)(v8 + 10) = v208;
                v209 = *((_QWORD *)this + 1);
                if (v209 >= *((_QWORD *)this + 2))
                {
                  v212 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v210 = v209 + 1;
                  v211 = *(unsigned __int8 *)(*(_QWORD *)this + v209);
                  *((_QWORD *)this + 1) = v210;
                  v212 = v211 != 0;
                }
                *(_BYTE *)(a1 + 190) = v212;
                goto LABEL_378;
              case 1014:
                *(_QWORD *)v8 |= 0x40000uLL;
                v213 = *((_QWORD *)this + 1);
                if (v213 > 0xFFFFFFFFFFFFFFFBLL || v213 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v213);
                goto LABEL_377;
              case 1015:
                *(_QWORD *)v8 |= 0x400uLL;
                v214 = *((_QWORD *)this + 1);
                if (v214 > 0xFFFFFFFFFFFFFFFBLL || v214 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v214);
                goto LABEL_377;
              case 1016:
                *(_QWORD *)v8 |= 0x40000000uLL;
                v215 = *((_QWORD *)this + 1);
                if (v215 > 0xFFFFFFFFFFFFFFFBLL || v215 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_232;
                *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v215);
                goto LABEL_377;
              case 1017:
                *(_QWORD *)v8 |= 0x4000000000000000uLL;
                v216 = *((_QWORD *)this + 1);
                if (v216 >= *((_QWORD *)this + 2))
                {
                  v219 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v217 = v216 + 1;
                  v218 = *(unsigned __int8 *)(*(_QWORD *)this + v216);
                  *((_QWORD *)this + 1) = v217;
                  v219 = v218 != 0;
                }
                *(_BYTE *)(a1 + 185) = v219;
                goto LABEL_378;
              case 1018:
                *(_QWORD *)v8 |= 0x4000000000uLL;
                v220 = *((_QWORD *)this + 1);
                if (v220 >= *((_QWORD *)this + 2))
                {
                  v223 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v221 = v220 + 1;
                  v222 = *(unsigned __int8 *)(*(_QWORD *)this + v220);
                  *((_QWORD *)this + 1) = v221;
                  v223 = v222 != 0;
                }
                *(_BYTE *)(a1 + 161) = v223;
                goto LABEL_378;
              case 1019:
                v224 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x4000u;
                *(_BYTE *)(v8 + 10) = v224;
                v225 = *((_QWORD *)this + 1);
                if (v225 >= *((_QWORD *)this + 2))
                {
                  v228 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v226 = v225 + 1;
                  v227 = *(unsigned __int8 *)(*(_QWORD *)this + v225);
                  *((_QWORD *)this + 1) = v226;
                  v228 = v227 != 0;
                }
                *(_BYTE *)(a1 + 201) = v228;
                goto LABEL_378;
              case 1020:
                *(_QWORD *)v8 |= 0x400000000000uLL;
                v229 = *((_QWORD *)this + 1);
                if (v229 >= *((_QWORD *)this + 2))
                {
                  v232 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v230 = v229 + 1;
                  v231 = *(unsigned __int8 *)(*(_QWORD *)this + v229);
                  *((_QWORD *)this + 1) = v230;
                  v232 = v231 != 0;
                }
                *(_BYTE *)(a1 + 169) = v232;
                goto LABEL_378;
              case 1021:
                *(_QWORD *)v8 |= 0x40000000000000uLL;
                v233 = *((_QWORD *)this + 1);
                if (v233 >= *((_QWORD *)this + 2))
                {
                  v236 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v234 = v233 + 1;
                  v235 = *(unsigned __int8 *)(*(_QWORD *)this + v233);
                  *((_QWORD *)this + 1) = v234;
                  v236 = v235 != 0;
                }
                *(_BYTE *)(a1 + 177) = v236;
                goto LABEL_378;
              case 1022:
                v237 = *(_BYTE *)(v8 + 10);
                *(_WORD *)(v8 + 8) |= 0x40u;
                *(_BYTE *)(v8 + 10) = v237;
                v238 = *((_QWORD *)this + 1);
                if (v238 >= *((_QWORD *)this + 2))
                {
                  v241 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v239 = v238 + 1;
                  v240 = *(unsigned __int8 *)(*(_QWORD *)this + v238);
                  *((_QWORD *)this + 1) = v239;
                  v241 = v240 != 0;
                }
                *(_BYTE *)(a1 + 193) = v241;
                goto LABEL_378;
              default:
                goto LABEL_153;
            }
            break;
        }
        while (1)
        {
          if (v39 == v38)
          {
            v43 = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_394;
          }
          v311 = v38 + 1;
          v312 = *(_BYTE *)(v40 + v38);
          *((_QWORD *)this + 1) = v311;
          v43 |= (unint64_t)(v312 & 0x7F) << v309;
          if ((v312 & 0x80) == 0)
            break;
          v309 += 7;
          v38 = v311;
          v15 = v310++ > 8;
          if (v15)
            goto LABEL_265;
        }
        if (*((_BYTE *)this + 24))
          v43 = 0;
LABEL_394:
        *(_QWORD *)(a1 + 16) = v43;
      }
LABEL_378:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F258D00(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 204);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(unsigned __int16 *)(result + 212) | (*(unsigned __int8 *)(result + 214) << 16);
  if ((v4 & 0x10) != 0)
  {
LABEL_5:
    result = PB::Writer::writeVarInt(this);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
  }
LABEL_6:
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::write(this);
    v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
    v4 = *(_QWORD *)(v3 + 204);
    if ((v4 & 0x200000) == 0)
    {
LABEL_8:
      if ((v4 & 0x2000) == 0)
        goto LABEL_9;
      goto LABEL_88;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_89;
  }
LABEL_88:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_11;
    goto LABEL_90;
  }
LABEL_89:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000000000) == 0)
      goto LABEL_12;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_13;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0)
      goto LABEL_14;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x20000000000) == 0)
      goto LABEL_15;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000000) == 0)
      goto LABEL_16;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0)
      goto LABEL_17;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 4) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0)
      goto LABEL_19;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_20;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_21;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_22;
    goto LABEL_101;
  }
LABEL_100:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000) == 0)
      goto LABEL_23;
    goto LABEL_102;
  }
LABEL_101:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x2000) == 0)
  {
LABEL_23:
    if ((v4 & 0x200000000000) == 0)
      goto LABEL_24;
    goto LABEL_103;
  }
LABEL_102:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20000000000000) == 0)
      goto LABEL_25;
    goto LABEL_104;
  }
LABEL_103:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x20000000000000) == 0)
  {
LABEL_25:
    if ((v4 & 2) == 0)
      goto LABEL_26;
    goto LABEL_105;
  }
LABEL_104:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_26:
    if ((v4 & 0x400000) == 0)
      goto LABEL_27;
    goto LABEL_106;
  }
LABEL_105:
  result = PB::Writer::writeVarInt(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0)
      goto LABEL_28;
    goto LABEL_107;
  }
LABEL_106:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40) == 0)
      goto LABEL_29;
    goto LABEL_108;
  }
LABEL_107:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_29:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_109;
  }
LABEL_108:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000000000000) == 0)
      goto LABEL_31;
    goto LABEL_110;
  }
LABEL_109:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_32;
    goto LABEL_111;
  }
LABEL_110:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400) == 0)
      goto LABEL_33;
    goto LABEL_112;
  }
LABEL_111:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x400) == 0)
  {
LABEL_33:
    if ((v4 & 0x40000000000) == 0)
      goto LABEL_34;
    goto LABEL_113;
  }
LABEL_112:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000000000) == 0)
      goto LABEL_35;
    goto LABEL_114;
  }
LABEL_113:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 8) == 0)
      goto LABEL_36;
    goto LABEL_115;
  }
LABEL_114:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 8) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0)
      goto LABEL_37;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000) == 0)
  {
LABEL_37:
    if ((v4 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_38:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_39;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x4000000000000000) == 0)
      goto LABEL_40;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000000000) == 0)
  {
LABEL_40:
    if ((v4 & 0x4000000000) == 0)
      goto LABEL_41;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x4000) == 0)
      goto LABEL_42;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x4000) == 0)
  {
LABEL_42:
    if ((v4 & 0x400000000000) == 0)
      goto LABEL_43;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000000000) == 0)
      goto LABEL_44;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x40000000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x40) == 0)
      goto LABEL_45;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x40) == 0)
  {
LABEL_45:
    if ((v4 & 4) == 0)
      goto LABEL_46;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_46:
    if ((v4 & 0x800000) == 0)
      goto LABEL_47;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::writeVarInt(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000) == 0)
  {
LABEL_47:
    if ((v4 & 0x8000) == 0)
      goto LABEL_48;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000) == 0)
  {
LABEL_48:
    if ((v4 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_49:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_50;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_50:
    if ((v4 & 0x800000000000000) == 0)
      goto LABEL_51;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000000) == 0)
  {
LABEL_51:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_52;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x800) == 0)
  {
LABEL_53:
    if ((v4 & 0x80000000000) == 0)
      goto LABEL_54;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_54:
    if ((v4 & 0x8000000000000) == 0)
      goto LABEL_55;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000) == 0)
  {
LABEL_55:
    if ((v5 & 0x10) == 0)
      goto LABEL_56;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x10) == 0)
  {
LABEL_56:
    if ((v4 & 0x80000) == 0)
      goto LABEL_57;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000) == 0)
  {
LABEL_57:
    if ((v4 & 0x800) == 0)
      goto LABEL_58;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800) == 0)
  {
LABEL_58:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_59:
    if ((v4 & 0x8000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000000000) == 0)
  {
LABEL_60:
    if ((v4 & 0x8000000000) == 0)
      goto LABEL_61;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000) == 0)
      goto LABEL_62;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x8000) == 0)
  {
LABEL_62:
    if ((v4 & 0x800000000000) == 0)
      goto LABEL_63;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_63:
    if ((v4 & 0x80000000000000) == 0)
      goto LABEL_64;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x80000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x80) == 0)
      goto LABEL_65;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x80) == 0)
  {
LABEL_65:
    if ((v4 & 8) == 0)
      goto LABEL_66;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_66:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_67;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::writeVarInt(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_67:
    if ((v4 & 0x10000) == 0)
      goto LABEL_68;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000) == 0)
  {
LABEL_68:
    if ((v4 & 0x100) == 0)
      goto LABEL_69;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_69:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_70;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_70:
    if ((v4 & 0x1000000000000000) == 0)
      goto LABEL_71;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000000) == 0)
  {
LABEL_71:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_72;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x1000) == 0)
      goto LABEL_73;
    goto LABEL_152;
  }
LABEL_151:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x1000) == 0)
  {
LABEL_73:
    if ((v4 & 0x100000000000) == 0)
      goto LABEL_74;
    goto LABEL_153;
  }
LABEL_152:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_74:
    if ((v4 & 0x10000000000000) == 0)
      goto LABEL_75;
    goto LABEL_154;
  }
LABEL_153:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x20) == 0)
      goto LABEL_76;
    goto LABEL_155;
  }
LABEL_154:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 0x20) == 0)
  {
LABEL_76:
    if ((v4 & 0x100000) == 0)
      goto LABEL_77;
    goto LABEL_156;
  }
LABEL_155:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000) == 0)
  {
LABEL_77:
    if ((v4 & 0x1000) == 0)
      goto LABEL_78;
    goto LABEL_157;
  }
LABEL_156:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000) == 0)
  {
LABEL_78:
    if ((v4 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_158;
  }
LABEL_157:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v5 & 1) == 0)
      goto LABEL_80;
    goto LABEL_159;
  }
LABEL_158:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((*(_WORD *)(v3 + 212) & 1) == 0)
  {
LABEL_80:
    if ((v4 & 0x10000000000) == 0)
      goto LABEL_81;
    goto LABEL_160;
  }
LABEL_159:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x10000) == 0)
      goto LABEL_82;
    goto LABEL_161;
  }
LABEL_160:
  result = PB::Writer::write(this);
  v5 = *(unsigned __int16 *)(v3 + 212) | (*(unsigned __int8 *)(v3 + 214) << 16);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v5 & 0x10000) == 0)
  {
LABEL_82:
    if ((v4 & 0x1000000000000) == 0)
      goto LABEL_83;
    goto LABEL_162;
  }
LABEL_161:
  result = PB::Writer::write(this);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  v4 = *(_QWORD *)(v3 + 204);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_83:
    if ((v4 & 0x100000000000000) == 0)
      goto LABEL_84;
    goto LABEL_163;
  }
LABEL_162:
  result = PB::Writer::write(this);
  LOWORD(v5) = *(_WORD *)(v3 + 212);
  if ((*(_QWORD *)(v3 + 204) & 0x100000000000000) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_163:
  result = PB::Writer::write(this);
  if ((*(_WORD *)(v3 + 212) & 0x100) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F2599C8(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944390;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F2599E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F259A04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "searchTimestamp");
      if ((*(_BYTE *)(a1 + 32) & 2) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "roadClass");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 2) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F259AB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_74;
                  }
                  v41 = v20++;
                  v42 = *(_BYTE *)(v21 + v41);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_73;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_73:
                v2 = v41 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_74;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_74:
              *(_QWORD *)(a1 + 16) = v24;
              goto LABEL_85;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  v45 = v27++;
                  v46 = *(_BYTE *)(v28 + v45);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_78:
                    v2 = v45 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_78;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_79;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_79:
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_85;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v49 = v33++;
                  v50 = *(_BYTE *)(v34 + v49);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_83:
                    v2 = v49 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_83;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_84;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 28) = v37;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F259F2C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F259FC0(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944588;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F259FD8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F259FFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "roadClass");
    if ((*(_BYTE *)(a1 + 40) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F25A0CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  uint64_t result;
  char v46;
  unsigned int v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((int)(v11 >> 3) <= 103)
    {
      if ((_DWORD)v20 == 101)
      {
        *(_BYTE *)(a1 + 40) |= 4u;
        v39 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v40 = *(_QWORD *)this;
        if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
        {
          v58 = 0;
          v59 = 0;
          v43 = 0;
          if (v2 <= v39)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v39)
            {
              v43 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_108;
            }
            v60 = v39++;
            v61 = *(_BYTE *)(v40 + v60);
            *((_QWORD *)this + 1) = v39;
            v43 |= (unint64_t)(v61 & 0x7F) << v58;
            if ((v61 & 0x80) == 0)
              break;
            v58 += 7;
            v14 = v59++ > 8;
            if (v14)
            {
              v43 = 0;
              goto LABEL_107;
            }
          }
          if (*((_BYTE *)this + 24))
            v43 = 0;
LABEL_107:
          v2 = v60 + 1;
        }
        else
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          while (1)
          {
            v2 = v39 + 1;
            *((_QWORD *)this + 1) = v39 + 1;
            v44 = *(_BYTE *)(v40 + v39);
            v43 |= (unint64_t)(v44 & 0x7F) << v41;
            if ((v44 & 0x80) == 0)
              break;
            v41 += 7;
            v39 = v2;
            v14 = v42++ > 8;
            if (v14)
            {
              v43 = 0;
              break;
            }
          }
        }
LABEL_108:
        *(_QWORD *)(a1 + 24) = v43;
      }
      else
      {
        if ((_DWORD)v20 != 103)
        {
LABEL_58:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_109;
        }
        *(_BYTE *)(a1 + 40) |= 8u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
    }
    else
    {
      switch((_DWORD)v20)
      {
        case 0x68:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v27 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
          {
            v50 = 0;
            v51 = 0;
            v31 = 0;
            if (v2 <= v27)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v27)
              {
                LODWORD(v31) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_98;
              }
              v52 = v27++;
              v53 = *(_BYTE *)(v28 + v52);
              *((_QWORD *)this + 1) = v27;
              v31 |= (unint64_t)(v53 & 0x7F) << v50;
              if ((v53 & 0x80) == 0)
                break;
              v50 += 7;
              v14 = v51++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                goto LABEL_97;
              }
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v31) = 0;
LABEL_97:
            v2 = v52 + 1;
          }
          else
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            while (1)
            {
              v2 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                break;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
              if (v14)
              {
                LODWORD(v31) = 0;
                break;
              }
            }
          }
LABEL_98:
          *(_DWORD *)(a1 + 36) = v31;
          break;
        case 0xC9:
          *(_BYTE *)(a1 + 40) |= 1u;
          v33 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v34 = *(_QWORD *)this;
          if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
          {
            v54 = 0;
            v55 = 0;
            v37 = 0;
            if (v2 <= v33)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v33)
              {
                v37 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_103;
              }
              v56 = v33++;
              v57 = *(_BYTE *)(v34 + v56);
              *((_QWORD *)this + 1) = v33;
              v37 |= (unint64_t)(v57 & 0x7F) << v54;
              if ((v57 & 0x80) == 0)
                break;
              v54 += 7;
              v14 = v55++ > 8;
              if (v14)
              {
                v37 = 0;
                goto LABEL_102;
              }
            }
            if (*((_BYTE *)this + 24))
              v37 = 0;
LABEL_102:
            v2 = v56 + 1;
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v2 = v33 + 1;
              *((_QWORD *)this + 1) = v33 + 1;
              v38 = *(_BYTE *)(v34 + v33);
              v37 |= (unint64_t)(v38 & 0x7F) << v35;
              if ((v38 & 0x80) == 0)
                break;
              v35 += 7;
              v33 = v2;
              v14 = v36++ > 8;
              if (v14)
              {
                v37 = 0;
                break;
              }
            }
          }
LABEL_103:
          *(_QWORD *)(a1 + 8) = v37;
          break;
        case 0xCA:
          *(_BYTE *)(a1 + 40) |= 2u;
          v21 = *((_QWORD *)this + 1);
          v2 = *((_QWORD *)this + 2);
          v22 = *(_QWORD *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            v46 = 0;
            v47 = 0;
            v25 = 0;
            if (v2 <= v21)
              v2 = *((_QWORD *)this + 1);
            while (1)
            {
              if (v2 == v21)
              {
                v25 = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_93;
              }
              v48 = v21++;
              v49 = *(_BYTE *)(v22 + v48);
              *((_QWORD *)this + 1) = v21;
              v25 |= (unint64_t)(v49 & 0x7F) << v46;
              if ((v49 & 0x80) == 0)
                break;
              v46 += 7;
              v14 = v47++ > 8;
              if (v14)
              {
                v25 = 0;
                goto LABEL_92;
              }
            }
            if (*((_BYTE *)this + 24))
              v25 = 0;
LABEL_92:
            v2 = v48 + 1;
          }
          else
          {
            v23 = 0;
            v24 = 0;
            v25 = 0;
            while (1)
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                break;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
              if (v14)
              {
                v25 = 0;
                break;
              }
            }
          }
LABEL_93:
          *(_QWORD *)(a1 + 16) = v25;
          break;
        default:
          goto LABEL_58;
      }
    }
LABEL_109:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_18F25A63C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 40) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F25A6EC(uint64_t result)
{
  *(_QWORD *)result = &off_1E29503C8;
  *(_DWORD *)(result + 324) = 0;
  *(_QWORD *)(result + 316) = 0;
  return result;
}

void sub_18F25A70C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F25A730(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  int v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 316);
  v6 = *(_QWORD *)(a1 + 316);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "audioRolloverDvChaosThreshold", *(float *)(a1 + 16));
    v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    v6 = *v5;
    if ((*v5 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  if ((v6 & 4) != 0)
  {
LABEL_5:
    PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdCenter", *(float *)(a1 + 20));
    v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    v6 = *v5;
  }
LABEL_6:
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdMax", *(float *)(a1 + 24));
    v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
    v6 = *v5;
    if ((*v5 & 0x10) == 0)
    {
LABEL_8:
      if ((v6 & 0x20) == 0)
        goto LABEL_9;
      goto LABEL_91;
    }
  }
  else if ((v6 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdMin", *(float *)(a1 + 28));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "audioRolloverDvChaosThresholdStretch", *(float *)(a1 + 32));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThreshold", *(float *)(a1 + 36));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v6 & 0x100) == 0)
      goto LABEL_12;
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdCenter", *(float *)(a1 + 40));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v6 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdMax", *(float *)(a1 + 44));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdMin", *(float *)(a1 + 48));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "audioRolloverDvEnergyThresholdStretch", *(float *)(a1 + 52));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v6 & 0x1000) == 0)
      goto LABEL_16;
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdCenter", *(float *)(a1 + 56));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v6 & 0x2000) == 0)
      goto LABEL_17;
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdMax", *(float *)(a1 + 60));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v6 & 0x4000) == 0)
      goto LABEL_18;
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdMin", *(float *)(a1 + 64));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v6 & 0x8000) == 0)
      goto LABEL_19;
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "audioRolloverDvMaxRmsThresholdStretch", *(float *)(a1 + 68));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v6 & 0x10000) == 0)
      goto LABEL_20;
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "audioRolloverDvRmsThreshold", *(float *)(a1 + 72));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v6 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "baroEscalateMaxAccelNormThreshold", *(float *)(a1 + 76));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v6 & 0x40000) == 0)
      goto LABEL_22;
    goto LABEL_104;
  }
LABEL_103:
  PB::TextFormatter::format(this, "baroEscalateSpinNormThreshold", *(float *)(a1 + 80));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v6 & 0x80000) == 0)
      goto LABEL_23;
    goto LABEL_105;
  }
LABEL_104:
  PB::TextFormatter::format(this, "cumulativeRotation", *(float *)(a1 + 84));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v6 & 0x100000) == 0)
      goto LABEL_24;
    goto LABEL_106;
  }
LABEL_105:
  PB::TextFormatter::format(this, "cumulativeRotationThreshold", *(float *)(a1 + 88));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v6 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_107;
  }
LABEL_106:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithAudio", *(float *)(a1 + 92));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v6 & 0x400000) == 0)
      goto LABEL_26;
    goto LABEL_108;
  }
LABEL_107:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithoutAudio", *(float *)(a1 + 96));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v6 & 0x800000) == 0)
      goto LABEL_27;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 100));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "cumulativeRotationThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 104));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "deltaVXYOverEpoch", *(float *)(a1 + 108));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "detectorRegime");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x200) == 0)
  {
LABEL_30:
    if ((v7 & 0x400) == 0)
      goto LABEL_31;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "hasAudioInEpoch");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x400) == 0)
  {
LABEL_31:
    if ((v7 & 0x800) == 0)
      goto LABEL_32;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "isAudioRollover");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x800) == 0)
  {
LABEL_32:
    if ((v7 & 0x1000) == 0)
      goto LABEL_33;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "isAudioRolloverDv");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x1000) == 0)
  {
LABEL_33:
    if ((v7 & 0x2000) == 0)
      goto LABEL_34;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "isAudioSupported");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x2000) == 0)
  {
LABEL_34:
    if ((v7 & 0x4000) == 0)
      goto LABEL_35;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "isBaro");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x4000) == 0)
  {
LABEL_35:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_36;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "isCompanionConnected");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_37;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "lowSenseWithAudioCumulativeRotationThreshold", *(float *)(a1 + 116));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_38;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "lowSenseWithAudioMaxAccelNormThreshold", *(float *)(a1 + 120));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_39;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "lowSenseWithAudioParBaroCumulativeRotationThreshold", *(float *)(a1 + 124));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_40;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "lowSenseWithAudioParBaroNormThreshold", *(float *)(a1 + 128));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_41;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "lowSenseWithAudioPeakPressureThreshold", *(float *)(a1 + 132));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_42;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "lowSenseWithAudioZgtimeThreshold", *(float *)(a1 + 136));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_43;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "lowSenseWithAudiodvThreshold1", *(float *)(a1 + 140));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_44;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "lowSenseWithAudiodvThreshold2", *(float *)(a1 + 144));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_45;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioCumulativeRotationThreshold", *(float *)(a1 + 148));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_46;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioMaxAccelNormThreshold", *(float *)(a1 + 152));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_46:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_47;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioParBaroCumulativeRotationThreshold", *(float *)(a1 + 156));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_48;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioParBaroNormThreshold", *(float *)(a1 + 160));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_48:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_49;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioPeakPressureThreshold", *(float *)(a1 + 164));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_49:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_50;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "lowSenseWithoutAudioZgtimeThreshold", *(float *)(a1 + 168));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_50:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_51;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "lowSenseWithoutAudiodvThreshold1", *(float *)(a1 + 172));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_51:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_52;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "lowSenseWithoutAudiodvThreshold2", *(float *)(a1 + 176));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_52:
    if ((v6 & 0x80000000000) == 0)
      goto LABEL_53;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 180));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_53:
    if ((v6 & 0x100000000000) == 0)
      goto LABEL_54;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "maxAccelNormThreshold", *(float *)(a1 + 184));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x200000000000) == 0)
      goto LABEL_55;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithAudio", *(float *)(a1 + 188));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x400000000000) == 0)
      goto LABEL_56;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudio", *(float *)(a1 + 192));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x800000000000) == 0)
      goto LABEL_57;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 196));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x1000000000000) == 0)
      goto LABEL_58;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "maxAccelNormThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 200));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_58:
    if ((v6 & 0x2000000000000) == 0)
      goto LABEL_59;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "maxAudioRolloverChaos", *(float *)(a1 + 204));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_59:
    if ((v6 & 0x4000000000000) == 0)
      goto LABEL_60;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "maxAudioRolloverEnergy", *(float *)(a1 + 208));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_60:
    if ((v6 & 0x8000000000000) == 0)
      goto LABEL_61;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "maxAudioRolloverRms", *(float *)(a1 + 212));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_61:
    if ((v6 & 0x10000000000000) == 0)
      goto LABEL_62;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 216));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000000000000) == 0)
      goto LABEL_63;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "numShortAudio");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x8000) == 0)
      goto LABEL_64;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "peakPressure", *(float *)(a1 + 224));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 0x8000) == 0)
  {
LABEL_64:
    if ((v7 & 0x10000) == 0)
      goto LABEL_65;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "rolloverCrashDetectorDecision");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x10000) == 0)
  {
LABEL_65:
    if ((v6 & 0x40000000000000) == 0)
      goto LABEL_66;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "rolloverCrashDetectorDecisionLowSense");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_66:
    if ((v6 & 0x80000000000000) == 0)
      goto LABEL_67;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1", *(float *)(a1 + 228));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_67:
    if ((v6 & 0x100000000000000) == 0)
      goto LABEL_68;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithAudio", *(float *)(a1 + 232));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_68:
    if ((v6 & 0x200000000000000) == 0)
      goto LABEL_69;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudio", *(float *)(a1 + 236));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_69:
    if ((v6 & 0x400000000000000) == 0)
      goto LABEL_70;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 240));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_70:
    if ((v6 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold1WithoutAudioStandaloneFull", *(float *)(a1 + 244));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v6 & 0x1000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2", *(float *)(a1 + 248));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_73;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithAudio", *(float *)(a1 + 252));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_73:
    if ((v6 & 0x4000000000000000) == 0)
      goto LABEL_74;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudio", *(float *)(a1 + 256));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x4000000000000000) == 0)
  {
LABEL_74:
    if ((v6 & 0x8000000000000000) == 0)
      goto LABEL_75;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 260));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*v5 & 0x8000000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 1) == 0)
      goto LABEL_76;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(this, "rolloverDetectorRegimeDeltaVThreshold2WithoutAudioStandaloneFull", *(float *)(a1 + 264));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 1) == 0)
  {
LABEL_76:
    if ((v7 & 0x20000) == 0)
      goto LABEL_77;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(this, "shortAudioMaxPulseThreshold", *(float *)(a1 + 268));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x20000) == 0)
  {
LABEL_77:
    if ((v7 & 2) == 0)
      goto LABEL_78;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(this, "shortAudioMet");
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 2) == 0)
  {
LABEL_78:
    if ((v7 & 4) == 0)
      goto LABEL_79;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(this, "shortAudioNumThreshold", *(float *)(a1 + 272));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((*(_WORD *)(a1 + 324) & 4) == 0)
  {
LABEL_79:
    if ((v7 & 0x40000) == 0)
      goto LABEL_80;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(this, "shortAudioPeakPressureThreshold", *(float *)(a1 + 276));
  v7 = *(unsigned __int16 *)(a1 + 324) | (*(unsigned __int8 *)(a1 + 326) << 16);
  v6 = *v5;
  if ((v7 & 0x40000) == 0)
  {
LABEL_80:
    if ((v6 & 1) == 0)
      goto LABEL_81;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(this, "strongerAudioRollover");
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((*v5 & 1) == 0)
  {
LABEL_81:
    if ((v7 & 8) == 0)
      goto LABEL_82;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(this, "timestamp");
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 8) == 0)
  {
LABEL_82:
    if ((v7 & 0x10) == 0)
      goto LABEL_83;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(this, "zgTime", *(float *)(a1 + 280));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x10) == 0)
  {
LABEL_83:
    if ((v7 & 0x20) == 0)
      goto LABEL_84;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(this, "zgTimeThreshold", *(float *)(a1 + 284));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x20) == 0)
  {
LABEL_84:
    if ((v7 & 0x40) == 0)
      goto LABEL_85;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(this, "zgTimeThresholdWithAudio", *(float *)(a1 + 288));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x40) == 0)
  {
LABEL_85:
    if ((v7 & 0x80) == 0)
      goto LABEL_86;
LABEL_168:
    PB::TextFormatter::format(this, "zgTimeThresholdWithoutAudioStandaloneBaroNeeded", *(float *)(a1 + 296));
    if ((*(_WORD *)(a1 + 324) & 0x100) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_87;
  }
LABEL_167:
  PB::TextFormatter::format(this, "zgTimeThresholdWithoutAudio", *(float *)(a1 + 292));
  LOWORD(v7) = *(_WORD *)(a1 + 324);
  if ((v7 & 0x80) != 0)
    goto LABEL_168;
LABEL_86:
  if ((v7 & 0x100) != 0)
LABEL_87:
    PB::TextFormatter::format(this, "zgTimeThresholdWithoutAudioStandaloneFull", *(float *)(a1 + 300));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F25B598(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  BOOL v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  BOOL v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  BOOL v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  char v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t v171;
  char v172;
  char v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  BOOL v177;
  uint64_t result;
  char v179;
  unsigned int v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  unint64_t v185;
  char v186;
  char v187;
  unsigned int v188;
  unint64_t v189;
  char v190;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = a1 + 316;
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        v15 = v11++ > 8;
        if (v15)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v21 = v12 >> 3;
      if ((int)(v12 >> 3) <= 100)
      {
        switch((_DWORD)v21)
        {
          case 1:
            *(_QWORD *)v8 |= 1uLL;
            v165 = *((_QWORD *)this + 1);
            v166 = *((_QWORD *)this + 2);
            v167 = *(_QWORD *)this;
            if (v165 > 0xFFFFFFFFFFFFFFF5 || v165 + 10 > v166)
            {
              v187 = 0;
              v188 = 0;
              v170 = 0;
              if (v166 <= v165)
                v166 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v166 == v165)
                {
                  v170 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_339;
                }
                v189 = v165 + 1;
                v190 = *(_BYTE *)(v167 + v165);
                *((_QWORD *)this + 1) = v189;
                v170 |= (unint64_t)(v190 & 0x7F) << v187;
                if ((v190 & 0x80) == 0)
                  break;
                v187 += 7;
                v165 = v189;
                v15 = v188++ > 8;
                if (v15)
                {
LABEL_318:
                  v170 = 0;
                  goto LABEL_339;
                }
              }
              if (*((_BYTE *)this + 24))
                v170 = 0;
            }
            else
            {
              v168 = 0;
              v169 = 0;
              v170 = 0;
              while (1)
              {
                v171 = v165 + 1;
                *((_QWORD *)this + 1) = v165 + 1;
                v172 = *(_BYTE *)(v167 + v165);
                v170 |= (unint64_t)(v172 & 0x7F) << v168;
                if ((v172 & 0x80) == 0)
                  break;
                v168 += 7;
                v165 = v171;
                v15 = v169++ > 8;
                if (v15)
                  goto LABEL_318;
              }
            }
LABEL_339:
            *(_QWORD *)(a1 + 8) = v170;
            break;
          case 2:
            v173 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x8000u;
            *(_BYTE *)(v8 + 10) = v173;
            v174 = *((_QWORD *)this + 1);
            if (v174 >= *((_QWORD *)this + 2))
            {
              v177 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v175 = v174 + 1;
              v176 = *(unsigned __int8 *)(*(_QWORD *)this + v174);
              *((_QWORD *)this + 1) = v175;
              v177 = v176 != 0;
            }
            *(_BYTE *)(a1 + 310) = v177;
            break;
          case 3:
            v23 = *(unsigned __int16 *)(v8 + 8);
            v24 = (v23 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x10000u) >> 16;
            *(_WORD *)(v8 + 8) = v23;
            *(_BYTE *)(v8 + 10) = v24;
            v25 = *((_QWORD *)this + 1);
            if (v25 >= *((_QWORD *)this + 2))
            {
              v28 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v26 = v25 + 1;
              v27 = *(unsigned __int8 *)(*(_QWORD *)this + v25);
              *((_QWORD *)this + 1) = v26;
              v28 = v27 != 0;
            }
            *(_BYTE *)(a1 + 311) = v28;
            break;
          default:
LABEL_278:
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            break;
        }
      }
      else
      {
        switch((int)v21)
        {
          case 101:
            *(_QWORD *)v8 |= 0x40000000000uLL;
            v22 = *((_QWORD *)this + 1);
            if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v22);
            goto LABEL_322;
          case 102:
            *(_QWORD *)v8 |= 0x40000uLL;
            v29 = *((_QWORD *)this + 1);
            if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v29);
            goto LABEL_322;
          case 103:
            v30 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 8u;
            *(_BYTE *)(v8 + 10) = v30;
            v31 = *((_QWORD *)this + 1);
            if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 280) = *(_DWORD *)(*(_QWORD *)this + v31);
            goto LABEL_322;
          case 104:
            v32 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x2000u;
            *(_BYTE *)(v8 + 10) = v32;
            v33 = *((_QWORD *)this + 1);
            if (v33 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v34 = v33 + 1;
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v33);
              *((_QWORD *)this + 1) = v34;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 308) = v36;
            goto LABEL_323;
          case 105:
            v37 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x400u;
            *(_BYTE *)(v8 + 10) = v37;
            v38 = *((_QWORD *)this + 1);
            if (v38 >= *((_QWORD *)this + 2))
            {
              v41 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v39 = v38 + 1;
              v40 = *(unsigned __int8 *)(*(_QWORD *)this + v38);
              *((_QWORD *)this + 1) = v39;
              v41 = v40 != 0;
            }
            *(_BYTE *)(a1 + 305) = v41;
            goto LABEL_323;
          case 106:
            v42 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x200u;
            *(_BYTE *)(v8 + 10) = v42;
            v43 = *((_QWORD *)this + 1);
            if (v43 >= *((_QWORD *)this + 2))
            {
              v46 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
              *((_QWORD *)this + 1) = v44;
              v46 = v45 != 0;
            }
            *(_BYTE *)(a1 + 304) = v46;
            goto LABEL_323;
          case 107:
            *(_QWORD *)v8 |= 0x2000000uLL;
            v47 = *((_QWORD *)this + 1);
            v48 = *((_QWORD *)this + 2);
            v49 = *(_QWORD *)this;
            if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
            {
              v50 = 0;
              v51 = 0;
              v52 = 0;
              do
              {
                v53 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v54 = *(_BYTE *)(v49 + v47);
                v52 |= (unint64_t)(v54 & 0x7F) << v50;
                if ((v54 & 0x80) == 0)
                  goto LABEL_331;
                v50 += 7;
                v47 = v53;
                v15 = v51++ > 8;
              }
              while (!v15);
LABEL_294:
              LODWORD(v52) = 0;
              goto LABEL_331;
            }
            v179 = 0;
            v180 = 0;
            v52 = 0;
            if (v48 <= v47)
              v48 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v48 == v47)
              {
                LODWORD(v52) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v181 = v47 + 1;
                v182 = *(_BYTE *)(v49 + v47);
                *((_QWORD *)this + 1) = v181;
                v52 |= (unint64_t)(v182 & 0x7F) << v179;
                if (v182 < 0)
                {
                  v179 += 7;
                  v47 = v181;
                  v15 = v180++ > 8;
                  if (v15)
                    goto LABEL_294;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v52) = 0;
              }
              break;
            }
LABEL_331:
            *(_DWORD *)(a1 + 112) = v52;
            goto LABEL_323;
          case 108:
            v55 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x1000u;
            *(_BYTE *)(v8 + 10) = v55;
            v56 = *((_QWORD *)this + 1);
            if (v56 >= *((_QWORD *)this + 2))
            {
              v59 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v57 = v56 + 1;
              v58 = *(unsigned __int8 *)(*(_QWORD *)this + v56);
              *((_QWORD *)this + 1) = v57;
              v59 = v58 != 0;
            }
            *(_BYTE *)(a1 + 307) = v59;
            goto LABEL_323;
          case 109:
            *(_QWORD *)v8 |= 0x1000000uLL;
            v60 = *((_QWORD *)this + 1);
            if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v60);
            goto LABEL_322;
          case 110:
            *(_QWORD *)v8 |= 0x2000000000000uLL;
            v61 = *((_QWORD *)this + 1);
            if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(_QWORD *)this + v61);
            goto LABEL_322;
          case 111:
            *(_QWORD *)v8 |= 0x1000000000000uLL;
            v62 = *((_QWORD *)this + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v62);
            goto LABEL_322;
          case 112:
            *(_QWORD *)v8 |= 0x4000000000000uLL;
            v63 = *((_QWORD *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(_QWORD *)this + v63);
            goto LABEL_322;
          case 113:
            *(_QWORD *)v8 |= 0x40uLL;
            v64 = *((_QWORD *)this + 1);
            if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v64);
            goto LABEL_322;
          case 114:
            *(_QWORD *)v8 |= 2uLL;
            v65 = *((_QWORD *)this + 1);
            if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v65);
            goto LABEL_322;
          case 115:
            *(_QWORD *)v8 |= 0x8000uLL;
            v66 = *((_QWORD *)this + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v66);
            goto LABEL_322;
          case 116:
            v67 = *(unsigned __int16 *)(v8 + 8);
            v68 = (v67 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x40000u) >> 16;
            *(_WORD *)(v8 + 8) = v67;
            *(_BYTE *)(v8 + 10) = v68;
            v69 = *((_QWORD *)this + 1);
            if (v69 >= *((_QWORD *)this + 2))
            {
              v72 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v70 = v69 + 1;
              v71 = *(unsigned __int8 *)(*(_QWORD *)this + v69);
              *((_QWORD *)this + 1) = v70;
              v72 = v71 != 0;
            }
            *(_BYTE *)(a1 + 313) = v72;
            goto LABEL_323;
          case 117:
            v73 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x800u;
            *(_BYTE *)(v8 + 10) = v73;
            v74 = *((_QWORD *)this + 1);
            if (v74 >= *((_QWORD *)this + 2))
            {
              v77 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v75 = v74 + 1;
              v76 = *(unsigned __int8 *)(*(_QWORD *)this + v74);
              *((_QWORD *)this + 1) = v75;
              v77 = v76 != 0;
            }
            *(_BYTE *)(a1 + 306) = v77;
            goto LABEL_323;
          case 118:
            v78 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x4000u;
            *(_BYTE *)(v8 + 10) = v78;
            v79 = *((_QWORD *)this + 1);
            if (v79 >= *((_QWORD *)this + 2))
            {
              v82 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v80 = v79 + 1;
              v81 = *(unsigned __int8 *)(*(_QWORD *)this + v79);
              *((_QWORD *)this + 1) = v80;
              v82 = v81 != 0;
            }
            *(_BYTE *)(a1 + 309) = v82;
            goto LABEL_323;
          case 119:
            *(_QWORD *)v8 |= 0x20000000000000uLL;
            v83 = *((_QWORD *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(_QWORD *)this + v83);
            goto LABEL_322;
          case 120:
            *(_QWORD *)v8 |= 0x8000000000000uLL;
            v84 = *((_QWORD *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 216) = *(_DWORD *)(*(_QWORD *)this + v84);
            goto LABEL_322;
          case 121:
            *(_QWORD *)v8 |= 0x10000000000000uLL;
            v85 = *((_QWORD *)this + 1);
            v86 = *((_QWORD *)this + 2);
            v87 = *(_QWORD *)this;
            if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
            {
              v88 = 0;
              v89 = 0;
              v90 = 0;
              do
              {
                v91 = v85 + 1;
                *((_QWORD *)this + 1) = v85 + 1;
                v92 = *(_BYTE *)(v87 + v85);
                v90 |= (unint64_t)(v92 & 0x7F) << v88;
                if ((v92 & 0x80) == 0)
                  goto LABEL_335;
                v88 += 7;
                v85 = v91;
                v15 = v89++ > 8;
              }
              while (!v15);
LABEL_309:
              LODWORD(v90) = 0;
              goto LABEL_335;
            }
            v183 = 0;
            v184 = 0;
            v90 = 0;
            if (v86 <= v85)
              v86 = *((_QWORD *)this + 1);
            break;
          case 122:
            v93 = *(unsigned __int16 *)(v8 + 8);
            v94 = (v93 | (*(unsigned __int8 *)(v8 + 10) << 16) | 0x20000u) >> 16;
            *(_WORD *)(v8 + 8) = v93;
            *(_BYTE *)(v8 + 10) = v94;
            v95 = *((_QWORD *)this + 1);
            if (v95 >= *((_QWORD *)this + 2))
            {
              v98 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v96 = v95 + 1;
              v97 = *(unsigned __int8 *)(*(_QWORD *)this + v95);
              *((_QWORD *)this + 1) = v96;
              v98 = v97 != 0;
            }
            *(_BYTE *)(a1 + 312) = v98;
            goto LABEL_323;
          case 201:
            *(_QWORD *)v8 |= 0x40000000000000uLL;
            v99 = *((_QWORD *)this + 1);
            if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(_QWORD *)this + v99);
            goto LABEL_322;
          case 202:
            *(_QWORD *)v8 |= 0x800000000000000uLL;
            v100 = *((_QWORD *)this + 1);
            if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 248) = *(_DWORD *)(*(_QWORD *)this + v100);
            goto LABEL_322;
          case 203:
            *(_QWORD *)v8 |= 0x80000uLL;
            v101 = *((_QWORD *)this + 1);
            if (v101 > 0xFFFFFFFFFFFFFFFBLL || v101 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v101);
            goto LABEL_322;
          case 204:
            *(_QWORD *)v8 |= 0x80000000000uLL;
            v102 = *((_QWORD *)this + 1);
            if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v102);
            goto LABEL_322;
          case 205:
            v103 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x10u;
            *(_BYTE *)(v8 + 10) = v103;
            v104 = *((_QWORD *)this + 1);
            if (v104 > 0xFFFFFFFFFFFFFFFBLL || v104 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 284) = *(_DWORD *)(*(_QWORD *)this + v104);
            goto LABEL_322;
          case 206:
            *(_QWORD *)v8 |= 0x80000000000000uLL;
            v105 = *((_QWORD *)this + 1);
            if (v105 > 0xFFFFFFFFFFFFFFFBLL || v105 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(_QWORD *)this + v105);
            goto LABEL_322;
          case 207:
            *(_QWORD *)v8 |= 0x1000000000000000uLL;
            v106 = *((_QWORD *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFFBLL || v106 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 252) = *(_DWORD *)(*(_QWORD *)this + v106);
            goto LABEL_322;
          case 208:
            *(_QWORD *)v8 |= 0x100000uLL;
            v107 = *((_QWORD *)this + 1);
            if (v107 > 0xFFFFFFFFFFFFFFFBLL || v107 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v107);
            goto LABEL_322;
          case 209:
            *(_QWORD *)v8 |= 0x100000000000uLL;
            v108 = *((_QWORD *)this + 1);
            if (v108 > 0xFFFFFFFFFFFFFFFBLL || v108 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v108);
            goto LABEL_322;
          case 210:
            v109 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x20u;
            *(_BYTE *)(v8 + 10) = v109;
            v110 = *((_QWORD *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 288) = *(_DWORD *)(*(_QWORD *)this + v110);
            goto LABEL_322;
          case 231:
            *(_QWORD *)v8 |= 0x100000000000000uLL;
            v111 = *((_QWORD *)this + 1);
            if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 236) = *(_DWORD *)(*(_QWORD *)this + v111);
            goto LABEL_322;
          case 232:
            *(_QWORD *)v8 |= 0x2000000000000000uLL;
            v112 = *((_QWORD *)this + 1);
            if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 256) = *(_DWORD *)(*(_QWORD *)this + v112);
            goto LABEL_322;
          case 233:
            *(_QWORD *)v8 |= 0x200000uLL;
            v113 = *((_QWORD *)this + 1);
            if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v113);
            goto LABEL_322;
          case 234:
            *(_QWORD *)v8 |= 0x200000000000uLL;
            v114 = *((_QWORD *)this + 1);
            if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v114);
            goto LABEL_322;
          case 235:
            v115 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x40u;
            *(_BYTE *)(v8 + 10) = v115;
            v116 = *((_QWORD *)this + 1);
            if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 292) = *(_DWORD *)(*(_QWORD *)this + v116);
            goto LABEL_322;
          case 236:
            *(_QWORD *)v8 |= 0x80uLL;
            v117 = *((_QWORD *)this + 1);
            if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v117);
            goto LABEL_322;
          case 237:
            *(_QWORD *)v8 |= 0x400uLL;
            v118 = *((_QWORD *)this + 1);
            if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v118);
            goto LABEL_322;
          case 238:
            *(_QWORD *)v8 |= 0x200uLL;
            v119 = *((_QWORD *)this + 1);
            if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v119);
            goto LABEL_322;
          case 239:
            *(_QWORD *)v8 |= 0x100uLL;
            v120 = *((_QWORD *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v120);
            goto LABEL_322;
          case 240:
            *(_QWORD *)v8 |= 4uLL;
            v121 = *((_QWORD *)this + 1);
            if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v121);
            goto LABEL_322;
          case 241:
            *(_QWORD *)v8 |= 0x20uLL;
            v122 = *((_QWORD *)this + 1);
            if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v122);
            goto LABEL_322;
          case 242:
            *(_QWORD *)v8 |= 0x10uLL;
            v123 = *((_QWORD *)this + 1);
            if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v123);
            goto LABEL_322;
          case 243:
            *(_QWORD *)v8 |= 8uLL;
            v124 = *((_QWORD *)this + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v124);
            goto LABEL_322;
          case 244:
            *(_QWORD *)v8 |= 0x800uLL;
            v125 = *((_QWORD *)this + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v125);
            goto LABEL_322;
          case 245:
            *(_QWORD *)v8 |= 0x4000uLL;
            v126 = *((_QWORD *)this + 1);
            if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v126);
            goto LABEL_322;
          case 246:
            *(_QWORD *)v8 |= 0x2000uLL;
            v127 = *((_QWORD *)this + 1);
            if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v127);
            goto LABEL_322;
          case 247:
            *(_QWORD *)v8 |= 0x1000uLL;
            v128 = *((_QWORD *)this + 1);
            if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v128);
            goto LABEL_322;
          case 248:
            *(_QWORD *)v8 |= 0x10000uLL;
            v129 = *((_QWORD *)this + 1);
            if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v129);
            goto LABEL_322;
          case 249:
            *(_QWORD *)v8 |= 0x20000uLL;
            v130 = *((_QWORD *)this + 1);
            if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v130);
            goto LABEL_322;
          case 250:
            *(_QWORD *)v8 |= 0x200000000000000uLL;
            v131 = *((_QWORD *)this + 1);
            if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 240) = *(_DWORD *)(*(_QWORD *)this + v131);
            goto LABEL_322;
          case 251:
            *(_QWORD *)v8 |= 0x4000000000000000uLL;
            v132 = *((_QWORD *)this + 1);
            if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 260) = *(_DWORD *)(*(_QWORD *)this + v132);
            goto LABEL_322;
          case 252:
            *(_QWORD *)v8 |= 0x400000uLL;
            v133 = *((_QWORD *)this + 1);
            if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v133);
            goto LABEL_322;
          case 253:
            *(_QWORD *)v8 |= 0x400000000000uLL;
            v134 = *((_QWORD *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v134);
            goto LABEL_322;
          case 254:
            v135 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x80u;
            *(_BYTE *)(v8 + 10) = v135;
            v136 = *((_QWORD *)this + 1);
            if (v136 > 0xFFFFFFFFFFFFFFFBLL || v136 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 296) = *(_DWORD *)(*(_QWORD *)this + v136);
            goto LABEL_322;
          case 255:
            *(_QWORD *)v8 |= 0x400000000000000uLL;
            v137 = *((_QWORD *)this + 1);
            if (v137 > 0xFFFFFFFFFFFFFFFBLL || v137 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 244) = *(_DWORD *)(*(_QWORD *)this + v137);
            goto LABEL_322;
          case 256:
            *(_QWORD *)v8 |= 0x8000000000000000;
            v138 = *((_QWORD *)this + 1);
            if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 264) = *(_DWORD *)(*(_QWORD *)this + v138);
            goto LABEL_322;
          case 257:
            *(_QWORD *)v8 |= 0x800000uLL;
            v139 = *((_QWORD *)this + 1);
            if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v139);
            goto LABEL_322;
          case 258:
            *(_QWORD *)v8 |= 0x800000000000uLL;
            v140 = *((_QWORD *)this + 1);
            if (v140 > 0xFFFFFFFFFFFFFFFBLL || v140 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v140);
            goto LABEL_322;
          case 259:
            v141 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 0x100u;
            *(_BYTE *)(v8 + 10) = v141;
            v142 = *((_QWORD *)this + 1);
            if (v142 > 0xFFFFFFFFFFFFFFFBLL || v142 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 300) = *(_DWORD *)(*(_QWORD *)this + v142);
            goto LABEL_322;
          case 260:
            *(_QWORD *)v8 |= 0x100000000uLL;
            v143 = *((_QWORD *)this + 1);
            if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v143);
            goto LABEL_322;
          case 261:
            *(_QWORD *)v8 |= 0x200000000uLL;
            v144 = *((_QWORD *)this + 1);
            if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v144);
            goto LABEL_322;
          case 262:
            *(_QWORD *)v8 |= 0x8000000uLL;
            v145 = *((_QWORD *)this + 1);
            if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v145);
            goto LABEL_322;
          case 263:
            *(_QWORD *)v8 |= 0x4000000uLL;
            v146 = *((_QWORD *)this + 1);
            if (v146 > 0xFFFFFFFFFFFFFFFBLL || v146 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v146);
            goto LABEL_322;
          case 264:
            *(_QWORD *)v8 |= 0x80000000uLL;
            v147 = *((_QWORD *)this + 1);
            if (v147 > 0xFFFFFFFFFFFFFFFBLL || v147 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v147);
            goto LABEL_322;
          case 265:
            *(_QWORD *)v8 |= 0x40000000uLL;
            v148 = *((_QWORD *)this + 1);
            if (v148 > 0xFFFFFFFFFFFFFFFBLL || v148 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v148);
            goto LABEL_322;
          case 266:
            *(_QWORD *)v8 |= 0x20000000uLL;
            v149 = *((_QWORD *)this + 1);
            if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v149);
            goto LABEL_322;
          case 267:
            *(_QWORD *)v8 |= 0x10000000uLL;
            v150 = *((_QWORD *)this + 1);
            if (v150 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v150);
            goto LABEL_322;
          case 268:
            *(_QWORD *)v8 |= 0x10000000000uLL;
            v151 = *((_QWORD *)this + 1);
            if (v151 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v151);
            goto LABEL_322;
          case 269:
            *(_QWORD *)v8 |= 0x20000000000uLL;
            v152 = *((_QWORD *)this + 1);
            if (v152 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v152);
            goto LABEL_322;
          case 270:
            *(_QWORD *)v8 |= 0x800000000uLL;
            v153 = *((_QWORD *)this + 1);
            if (v153 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v153);
            goto LABEL_322;
          case 271:
            *(_QWORD *)v8 |= 0x400000000uLL;
            v154 = *((_QWORD *)this + 1);
            if (v154 > 0xFFFFFFFFFFFFFFFBLL || v154 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v154);
            goto LABEL_322;
          case 272:
            *(_QWORD *)v8 |= 0x8000000000uLL;
            v155 = *((_QWORD *)this + 1);
            if (v155 > 0xFFFFFFFFFFFFFFFBLL || v155 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v155);
            goto LABEL_322;
          case 273:
            *(_QWORD *)v8 |= 0x4000000000uLL;
            v156 = *((_QWORD *)this + 1);
            if (v156 > 0xFFFFFFFFFFFFFFFBLL || v156 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v156);
            goto LABEL_322;
          case 274:
            *(_QWORD *)v8 |= 0x2000000000uLL;
            v157 = *((_QWORD *)this + 1);
            if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v157);
            goto LABEL_322;
          case 275:
            *(_QWORD *)v8 |= 0x1000000000uLL;
            v158 = *((_QWORD *)this + 1);
            if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v158);
            goto LABEL_322;
          case 276:
            v159 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 2u;
            *(_BYTE *)(v8 + 10) = v159;
            v160 = *((_QWORD *)this + 1);
            if (v160 > 0xFFFFFFFFFFFFFFFBLL || v160 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 272) = *(_DWORD *)(*(_QWORD *)this + v160);
            goto LABEL_322;
          case 277:
            v161 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 4u;
            *(_BYTE *)(v8 + 10) = v161;
            v162 = *((_QWORD *)this + 1);
            if (v162 > 0xFFFFFFFFFFFFFFFBLL || v162 + 4 > *((_QWORD *)this + 2))
              goto LABEL_268;
            *(_DWORD *)(a1 + 276) = *(_DWORD *)(*(_QWORD *)this + v162);
            goto LABEL_322;
          case 278:
            v163 = *(_BYTE *)(v8 + 10);
            *(_WORD *)(v8 + 8) |= 1u;
            *(_BYTE *)(v8 + 10) = v163;
            v164 = *((_QWORD *)this + 1);
            if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 268) = *(_DWORD *)(*(_QWORD *)this + v164);
LABEL_322:
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
LABEL_268:
              *((_BYTE *)this + 24) = 1;
            }
            goto LABEL_323;
          default:
            goto LABEL_278;
        }
        while (1)
        {
          if (v86 == v85)
          {
            LODWORD(v90) = 0;
            *((_BYTE *)this + 24) = 1;
            goto LABEL_335;
          }
          v185 = v85 + 1;
          v186 = *(_BYTE *)(v87 + v85);
          *((_QWORD *)this + 1) = v185;
          v90 |= (unint64_t)(v186 & 0x7F) << v183;
          if ((v186 & 0x80) == 0)
            break;
          v183 += 7;
          v85 = v185;
          v15 = v184++ > 8;
          if (v15)
            goto LABEL_309;
        }
        if (*((_BYTE *)this + 24))
          LODWORD(v90) = 0;
LABEL_335:
        *(_DWORD *)(a1 + 220) = v90;
      }
LABEL_323:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F25CD08(uint64_t result, PB::Writer *this)
{
  float *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = (float *)result;
  v4 = (uint64_t *)(result + 316);
  v5 = *(_QWORD *)(result + 316);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((v4[1] & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(unsigned __int16 *)(result + 324);
  v7 = v6 | (*(unsigned __int8 *)(result + 326) << 16);
  if ((v6 & 0x8000) != 0)
  {
LABEL_5:
    result = PB::Writer::write(this);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
  }
LABEL_6:
  if ((v7 & 0x10000) != 0)
  {
    result = PB::Writer::write(this);
    v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
    v5 = *v4;
    if ((*v4 & 0x40000000000) == 0)
    {
LABEL_8:
      if ((v5 & 0x40000) == 0)
        goto LABEL_9;
      goto LABEL_90;
    }
  }
  else if ((v5 & 0x40000000000) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::write(this, v3[45]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v7 & 8) == 0)
      goto LABEL_10;
    goto LABEL_91;
  }
LABEL_90:
  result = PB::Writer::write(this, v3[21]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 8) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_92;
  }
LABEL_91:
  result = PB::Writer::write(this, v3[70]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_93;
  }
LABEL_92:
  result = PB::Writer::write(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x400) == 0)
  {
LABEL_12:
    if ((v7 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_94;
  }
LABEL_93:
  result = PB::Writer::write(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_14;
    goto LABEL_95;
  }
LABEL_94:
  result = PB::Writer::write(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v7 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_96;
  }
LABEL_95:
  result = PB::Writer::writeVarInt(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_16;
    goto LABEL_97;
  }
LABEL_96:
  result = PB::Writer::write(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000000000000) == 0)
      goto LABEL_17;
    goto LABEL_98;
  }
LABEL_97:
  result = PB::Writer::write(this, v3[27]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_18;
    goto LABEL_99;
  }
LABEL_98:
  result = PB::Writer::write(this, v3[52]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_19;
    goto LABEL_100;
  }
LABEL_99:
  result = PB::Writer::write(this, v3[51]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_101;
  }
LABEL_100:
  result = PB::Writer::write(this, v3[53]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v5 & 2) == 0)
      goto LABEL_21;
    goto LABEL_102;
  }
LABEL_101:
  result = PB::Writer::write(this, v3[9]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0)
      goto LABEL_22;
    goto LABEL_103;
  }
LABEL_102:
  result = PB::Writer::write(this, v3[4]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_22:
    if ((v7 & 0x40000) == 0)
      goto LABEL_23;
    goto LABEL_104;
  }
LABEL_103:
  result = PB::Writer::write(this, v3[18]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x40000) == 0)
  {
LABEL_23:
    if ((v7 & 0x800) == 0)
      goto LABEL_24;
    goto LABEL_105;
  }
LABEL_104:
  result = PB::Writer::write(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x800) == 0)
  {
LABEL_24:
    if ((v7 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_106;
  }
LABEL_105:
  result = PB::Writer::write(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v4[1] & 0x4000) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_26;
    goto LABEL_107;
  }
LABEL_106:
  result = PB::Writer::write(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_27;
    goto LABEL_108;
  }
LABEL_107:
  result = PB::Writer::write(this, v3[56]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000000000000) == 0)
      goto LABEL_28;
    goto LABEL_109;
  }
LABEL_108:
  result = PB::Writer::write(this, v3[54]);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((*v4 & 0x10000000000000) == 0)
  {
LABEL_28:
    if ((v7 & 0x20000) == 0)
      goto LABEL_29;
    goto LABEL_110;
  }
LABEL_109:
  result = PB::Writer::writeVarInt(this);
  v7 = *((unsigned __int16 *)v4 + 4) | (*((unsigned __int8 *)v4 + 10) << 16);
  v5 = *v4;
  if ((v7 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_30;
    goto LABEL_111;
  }
LABEL_110:
  result = PB::Writer::write(this);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_31;
    goto LABEL_112;
  }
LABEL_111:
  result = PB::Writer::write(this, v3[57]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000) == 0)
      goto LABEL_32;
    goto LABEL_113;
  }
LABEL_112:
  result = PB::Writer::write(this, v3[62]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_33;
    goto LABEL_114;
  }
LABEL_113:
  result = PB::Writer::write(this, v3[22]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v7 & 0x10) == 0)
      goto LABEL_34;
    goto LABEL_115;
  }
LABEL_114:
  result = PB::Writer::write(this, v3[46]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x10) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_35;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, v3[71]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_36;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, v3[58]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000) == 0)
      goto LABEL_37;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, v3[63]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_37:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_38;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, v3[23]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v7 & 0x20) == 0)
      goto LABEL_39;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, v3[47]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x20) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_40;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::write(this, v3[72]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_41;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::write(this, v3[59]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x200000) == 0)
      goto LABEL_42;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, v3[64]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_42:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_43;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, v3[24]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_43:
    if ((v7 & 0x40) == 0)
      goto LABEL_44;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, v3[48]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x40) == 0)
  {
LABEL_44:
    if ((v5 & 0x80) == 0)
      goto LABEL_45;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::write(this, v3[73]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_45:
    if ((v5 & 0x400) == 0)
      goto LABEL_46;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::write(this, v3[10]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_46:
    if ((v5 & 0x200) == 0)
      goto LABEL_47;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, v3[13]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_47:
    if ((v5 & 0x100) == 0)
      goto LABEL_48;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::write(this, v3[12]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_48:
    if ((v5 & 4) == 0)
      goto LABEL_49;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::write(this, v3[11]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_49:
    if ((v5 & 0x20) == 0)
      goto LABEL_50;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::write(this, v3[5]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_50:
    if ((v5 & 0x10) == 0)
      goto LABEL_51;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::write(this, v3[8]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_51:
    if ((v5 & 8) == 0)
      goto LABEL_52;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this, v3[7]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_52:
    if ((v5 & 0x800) == 0)
      goto LABEL_53;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this, v3[6]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_53:
    if ((v5 & 0x4000) == 0)
      goto LABEL_54;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this, v3[14]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_54:
    if ((v5 & 0x2000) == 0)
      goto LABEL_55;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this, v3[17]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_55:
    if ((v5 & 0x1000) == 0)
      goto LABEL_56;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this, v3[16]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_56:
    if ((v5 & 0x10000) == 0)
      goto LABEL_57;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this, v3[15]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_57:
    if ((v5 & 0x20000) == 0)
      goto LABEL_58;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this, v3[19]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_58:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_59;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this, v3[20]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_60;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this, v3[60]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x400000) == 0)
      goto LABEL_61;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this, v3[65]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_61:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_62;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this, v3[25]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x80) == 0)
      goto LABEL_63;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this, v3[49]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x80) == 0)
  {
LABEL_63:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_64;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this, v3[74]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_64:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_65;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::write(this, v3[61]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x800000) == 0)
      goto LABEL_66;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this, v3[66]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_66:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_67;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this, v3[26]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x100) == 0)
      goto LABEL_68;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::write(this, v3[50]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((v7 & 0x100) == 0)
  {
LABEL_68:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_69;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this, v3[75]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_70;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this, v3[35]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_71;
    goto LABEL_152;
  }
LABEL_151:
  result = PB::Writer::write(this, v3[36]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_72;
    goto LABEL_153;
  }
LABEL_152:
  result = PB::Writer::write(this, v3[30]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_72:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_154;
  }
LABEL_153:
  result = PB::Writer::write(this, v3[29]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_73:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_74;
    goto LABEL_155;
  }
LABEL_154:
  result = PB::Writer::write(this, v3[34]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_74:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_75;
    goto LABEL_156;
  }
LABEL_155:
  result = PB::Writer::write(this, v3[33]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_75:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_76;
    goto LABEL_157;
  }
LABEL_156:
  result = PB::Writer::write(this, v3[32]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_77;
    goto LABEL_158;
  }
LABEL_157:
  result = PB::Writer::write(this, v3[31]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_78;
    goto LABEL_159;
  }
LABEL_158:
  result = PB::Writer::write(this, v3[43]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_79;
    goto LABEL_160;
  }
LABEL_159:
  result = PB::Writer::write(this, v3[44]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_80;
    goto LABEL_161;
  }
LABEL_160:
  result = PB::Writer::write(this, v3[38]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_81;
    goto LABEL_162;
  }
LABEL_161:
  result = PB::Writer::write(this, v3[37]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_81:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_82;
    goto LABEL_163;
  }
LABEL_162:
  result = PB::Writer::write(this, v3[42]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_82:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_83;
    goto LABEL_164;
  }
LABEL_163:
  result = PB::Writer::write(this, v3[41]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  v5 = *v4;
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_83:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_84;
    goto LABEL_165;
  }
LABEL_164:
  result = PB::Writer::write(this, v3[40]);
  LOWORD(v7) = *((_WORD *)v4 + 4);
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_84:
    if ((v7 & 2) == 0)
      goto LABEL_85;
    goto LABEL_166;
  }
LABEL_165:
  result = PB::Writer::write(this, v3[39]);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 2) == 0)
  {
LABEL_85:
    if ((v7 & 4) == 0)
      goto LABEL_86;
    goto LABEL_167;
  }
LABEL_166:
  result = PB::Writer::write(this, v3[68]);
  LOBYTE(v7) = *((_WORD *)v4 + 4);
  if ((v4[1] & 4) == 0)
  {
LABEL_86:
    if ((v7 & 1) == 0)
      return result;
    return PB::Writer::write(this, v3[67]);
  }
LABEL_167:
  result = PB::Writer::write(this, v3[69]);
  if ((v4[1] & 1) != 0)
    return PB::Writer::write(this, v3[67]);
  return result;
}

_QWORD *sub_18F25DA28(_QWORD *result)
{
  *result = &off_1E294FDA8;
  *(_QWORD *)((char *)result + 364) = 0;
  *(_QWORD *)((char *)result + 356) = 0;
  return result;
}

void sub_18F25DA4C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F25DA70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = (uint64_t *)(a1 + 356);
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "anyLowSense");
    v6 = *(_QWORD *)(a1 + 364);
  }
  v7 = *v5;
  if ((*v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "autocorrelationPeriodicCount", *(float *)(a1 + 72));
    v7 = *v5;
    v6 = *(_QWORD *)(a1 + 364);
    if ((*v5 & 0x200) == 0)
    {
LABEL_5:
      if ((v6 & 0x40) == 0)
        goto LABEL_6;
      goto LABEL_108;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "autocorrelationPeriodicCountThreshold", *(float *)(a1 + 76));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v7 & 1) == 0)
      goto LABEL_7;
    goto LABEL_109;
  }
LABEL_108:
  PB::TextFormatter::format(this, "crashDetectorDecision");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 1) == 0)
  {
LABEL_7:
    if ((v7 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_110;
  }
LABEL_109:
  PB::TextFormatter::format(this, "crashTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v7 & 0x800) == 0)
      goto LABEL_9;
    goto LABEL_111;
  }
LABEL_110:
  PB::TextFormatter::format(this, "cumulativeRotation", *(float *)(a1 + 80));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v7 & 0x1000) == 0)
      goto LABEL_10;
    goto LABEL_112;
  }
LABEL_111:
  PB::TextFormatter::format(this, "cumulativeRotationHarmonicMean", *(float *)(a1 + 84));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v7 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_113;
  }
LABEL_112:
  PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 88));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000) == 0)
  {
LABEL_11:
    if ((v7 & 0x4000) == 0)
      goto LABEL_12;
    goto LABEL_114;
  }
LABEL_113:
  PB::TextFormatter::format(this, "deltaRealTrigger", *(float *)(a1 + 92));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000) == 0)
  {
LABEL_12:
    if ((v7 & 0x8000) == 0)
      goto LABEL_13;
    goto LABEL_115;
  }
LABEL_114:
  PB::TextFormatter::format(this, "deltaSteps");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x8000) == 0)
  {
LABEL_13:
    if ((v7 & 0x10000) == 0)
      goto LABEL_14;
    goto LABEL_116;
  }
LABEL_115:
  PB::TextFormatter::format(this, "distanceToNearestRoad", *(float *)(a1 + 100));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v6 & 0x80) == 0)
      goto LABEL_15;
    goto LABEL_117;
  }
LABEL_116:
  PB::TextFormatter::format(this, "distanceToNearestRoadThreshold", *(float *)(a1 + 104));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x80) == 0)
  {
LABEL_15:
    if ((v6 & 0x100) == 0)
      goto LABEL_16;
    goto LABEL_118;
  }
LABEL_117:
  PB::TextFormatter::format(this, "earlyCrashDetectorDecision");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x100) == 0)
  {
LABEL_16:
    if ((v6 & 0x200) == 0)
      goto LABEL_17;
    goto LABEL_119;
  }
LABEL_118:
  PB::TextFormatter::format(this, "escalationCandidate");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x200) == 0)
  {
LABEL_17:
    if ((v7 & 0x20000) == 0)
      goto LABEL_18;
    goto LABEL_120;
  }
LABEL_119:
  PB::TextFormatter::format(this, "escalationCandidateSuppressed");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v7 & 2) == 0)
      goto LABEL_19;
    goto LABEL_121;
  }
LABEL_120:
  PB::TextFormatter::format(this, "faultCounter");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 2) == 0)
  {
LABEL_19:
    if ((v6 & 0x400) == 0)
      goto LABEL_20;
    goto LABEL_122;
  }
LABEL_121:
  PB::TextFormatter::format(this, "firstTimestampMAPDecision");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x400) == 0)
  {
LABEL_20:
    if ((v7 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_123;
  }
LABEL_122:
  PB::TextFormatter::format(this, "hasSteps");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v6 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_124;
  }
LABEL_123:
  PB::TextFormatter::format(this, "highSensitivityBitmap");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x800) == 0)
  {
LABEL_22:
    if ((v6 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_125;
  }
LABEL_124:
  PB::TextFormatter::format(this, "isAirbagDetectedOverWindow");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x1000) == 0)
  {
LABEL_23:
    if ((v6 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_126;
  }
LABEL_125:
  PB::TextFormatter::format(this, "isAutocorrelationDecided");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x2000) == 0)
  {
LABEL_24:
    if ((v6 & 0x4000) == 0)
      goto LABEL_25;
    goto LABEL_127;
  }
LABEL_126:
  PB::TextFormatter::format(this, "isCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x4000) == 0)
  {
LABEL_25:
    if ((v6 & 0x8000) == 0)
      goto LABEL_26;
    goto LABEL_128;
  }
LABEL_127:
  PB::TextFormatter::format(this, "isDecisionMadeAtBoundary");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x8000) == 0)
  {
LABEL_26:
    if ((v6 & 0x10000) == 0)
      goto LABEL_27;
    goto LABEL_129;
  }
LABEL_128:
  PB::TextFormatter::format(this, "isDescalationDecided");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x10000) == 0)
  {
LABEL_27:
    if ((v6 & 0x20000) == 0)
      goto LABEL_28;
    goto LABEL_130;
  }
LABEL_129:
  PB::TextFormatter::format(this, "isDescalationRequired");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20000) == 0)
  {
LABEL_28:
    if ((v6 & 0x40000) == 0)
      goto LABEL_29;
    goto LABEL_131;
  }
LABEL_130:
  PB::TextFormatter::format(this, "isEvaluatingMovingGps");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x40000) == 0)
  {
LABEL_29:
    if ((v6 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_132;
  }
LABEL_131:
  PB::TextFormatter::format(this, "isFreeFallDetectedEpoch");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x80000) == 0)
  {
LABEL_30:
    if ((v6 & 0x100000) == 0)
      goto LABEL_31;
    goto LABEL_133;
  }
LABEL_132:
  PB::TextFormatter::format(this, "isHighSpeedCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x100000) == 0)
  {
LABEL_31:
    if ((v6 & 0x200000) == 0)
      goto LABEL_32;
    goto LABEL_134;
  }
LABEL_133:
  PB::TextFormatter::format(this, "isHighSpeedCrashDetectedOverWindow");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x200000) == 0)
  {
LABEL_32:
    if ((v6 & 0x400000) == 0)
      goto LABEL_33;
    goto LABEL_135;
  }
LABEL_134:
  PB::TextFormatter::format(this, "isHighSpeedDetectedOverWindow");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x400000) == 0)
  {
LABEL_33:
    if ((v6 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_136;
  }
LABEL_135:
  PB::TextFormatter::format(this, "isLowSensCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x800000) == 0)
  {
LABEL_34:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_35;
    goto LABEL_137;
  }
LABEL_136:
  PB::TextFormatter::format(this, "isLowSensRolloverCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_36;
    goto LABEL_138;
  }
LABEL_137:
  PB::TextFormatter::format(this, "isMAPFPDecided");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_37;
    goto LABEL_139;
  }
LABEL_138:
  PB::TextFormatter::format(this, "isQuiescenceDecided");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_38;
    goto LABEL_140;
  }
LABEL_139:
  PB::TextFormatter::format(this, "isRolloverCrashDetected");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_39;
    goto LABEL_141;
  }
LABEL_140:
  PB::TextFormatter::format(this, "isStepsDecided");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_40;
    goto LABEL_142;
  }
LABEL_141:
  PB::TextFormatter::format(this, "isTriggerClustersDecided");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v7 & 4) == 0)
      goto LABEL_41;
    goto LABEL_143;
  }
LABEL_142:
  PB::TextFormatter::format(this, "isUshaFPDecided");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 4) == 0)
  {
LABEL_41:
    if ((v7 & 8) == 0)
      goto LABEL_42;
    goto LABEL_144;
  }
LABEL_143:
  PB::TextFormatter::format(this, "lastLocalRealTriggerTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 8) == 0)
  {
LABEL_42:
    if ((v7 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_145;
  }
LABEL_144:
  PB::TextFormatter::format(this, "lastRemoteRealTriggerTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10) == 0)
  {
LABEL_43:
    if ((v7 & 0x20) == 0)
      goto LABEL_44;
    goto LABEL_146;
  }
LABEL_145:
  PB::TextFormatter::format(this, "lastRemoteSampleTimestamp");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20) == 0)
  {
LABEL_44:
    if ((v7 & 0x80000) == 0)
      goto LABEL_45;
    goto LABEL_147;
  }
LABEL_146:
  PB::TextFormatter::format(this, "lastTimestampMAPDecision");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x80000) == 0)
  {
LABEL_45:
    if ((v7 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_148;
  }
LABEL_147:
  PB::TextFormatter::format(this, "lowSpeedOrFakeCountAtBoundaryThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x100000) == 0)
  {
LABEL_46:
    if ((v7 & 0x200000) == 0)
      goto LABEL_47;
    goto LABEL_149;
  }
LABEL_148:
  PB::TextFormatter::format(this, "maxPulse", *(float *)(a1 + 120));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x200000) == 0)
  {
LABEL_47:
    if ((v7 & 0x400000) == 0)
      goto LABEL_48;
    goto LABEL_150;
  }
LABEL_149:
  PB::TextFormatter::format(this, "maxPulseHarmonicMean", *(float *)(a1 + 124));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400000) == 0)
  {
LABEL_48:
    if ((v7 & 0x800000) == 0)
      goto LABEL_49;
    goto LABEL_151;
  }
LABEL_150:
  PB::TextFormatter::format(this, "maximumHoldDuration", *(float *)(a1 + 128));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800000) == 0)
  {
LABEL_49:
    if ((v7 & 0x1000000) == 0)
      goto LABEL_50;
    goto LABEL_152;
  }
LABEL_151:
  PB::TextFormatter::format(this, "minimumHoldDuration", *(float *)(a1 + 132));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_50:
    if ((v7 & 0x2000000) == 0)
      goto LABEL_51;
    goto LABEL_153;
  }
LABEL_152:
  PB::TextFormatter::format(this, "movingCountThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_51:
    if ((v7 & 0x4000000) == 0)
      goto LABEL_52;
    goto LABEL_154;
  }
LABEL_153:
  PB::TextFormatter::format(this, "movingCountThresholdFromSydneyB");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_52:
    if ((v7 & 0x8000000) == 0)
      goto LABEL_53;
    goto LABEL_155;
  }
LABEL_154:
  PB::TextFormatter::format(this, "movingGpsCount");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_53:
    if ((v7 & 0x10000000) == 0)
      goto LABEL_54;
    goto LABEL_156;
  }
LABEL_155:
  PB::TextFormatter::format(this, "movingGpsCountTotal");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_54:
    if ((v7 & 0x20000000) == 0)
      goto LABEL_55;
    goto LABEL_157;
  }
LABEL_156:
  PB::TextFormatter::format(this, "numAudioSkiing");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_55:
    if ((v7 & 0x40000000) == 0)
      goto LABEL_56;
    goto LABEL_158;
  }
LABEL_157:
  PB::TextFormatter::format(this, "numAudioSkiingThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_56:
    if ((v7 & 0x80000000) == 0)
      goto LABEL_57;
    goto LABEL_159;
  }
LABEL_158:
  PB::TextFormatter::format(this, "numBaroIncreasesSkiing");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_57:
    if ((v7 & 0x100000000) == 0)
      goto LABEL_58;
    goto LABEL_160;
  }
LABEL_159:
  PB::TextFormatter::format(this, "numBaroIncreasesSkiingThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_58:
    if ((v7 & 0x200000000) == 0)
      goto LABEL_59;
    goto LABEL_161;
  }
LABEL_160:
  PB::TextFormatter::format(this, "numDeescalationAOI");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_59:
    if ((v7 & 0x400000000) == 0)
      goto LABEL_60;
    goto LABEL_162;
  }
LABEL_161:
  PB::TextFormatter::format(this, "numDeescalationMAP");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_60:
    if ((v7 & 0x800000000) == 0)
      goto LABEL_61;
    goto LABEL_163;
  }
LABEL_162:
  PB::TextFormatter::format(this, "numDeescalationTwoLevel");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_61:
    if ((v7 & 0x1000000000) == 0)
      goto LABEL_62;
    goto LABEL_164;
  }
LABEL_163:
  PB::TextFormatter::format(this, "numDeescalationUsha");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_62:
    if ((v7 & 0x2000000000) == 0)
      goto LABEL_63;
    goto LABEL_165;
  }
LABEL_164:
  PB::TextFormatter::format(this, "numGpsSamplesInHistory");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_63:
    if ((v7 & 0x4000000000) == 0)
      goto LABEL_64;
    goto LABEL_166;
  }
LABEL_165:
  PB::TextFormatter::format(this, "numLowOrFakeGpsSamplesInHistory");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_64:
    if ((v7 & 0x8000000000) == 0)
      goto LABEL_65;
    goto LABEL_167;
  }
LABEL_166:
  PB::TextFormatter::format(this, "numTriggersWithRecentSkiLiftDetected");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_65:
    if ((v7 & 0x10000000000) == 0)
      goto LABEL_66;
    goto LABEL_168;
  }
LABEL_167:
  PB::TextFormatter::format(this, "numTriggersWithTrueBtHint");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_66:
    if ((v7 & 0x20000000000) == 0)
      goto LABEL_67;
    goto LABEL_169;
  }
LABEL_168:
  PB::TextFormatter::format(this, "numUshaCPEpoch");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_67:
    if ((v7 & 0x40000000000) == 0)
      goto LABEL_68;
    goto LABEL_170;
  }
LABEL_169:
  PB::TextFormatter::format(this, "numUshaCPEpochThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_68:
    if ((v7 & 0x80000000000) == 0)
      goto LABEL_69;
    goto LABEL_171;
  }
LABEL_170:
  PB::TextFormatter::format(this, "numUshaFPEpoch");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x80000000000) == 0)
  {
LABEL_69:
    if ((v7 & 0x100000000000) == 0)
      goto LABEL_70;
    goto LABEL_172;
  }
LABEL_171:
  PB::TextFormatter::format(this, "numUshaFPEpochThreshold");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_70:
    if ((v7 & 0x200000000000) == 0)
      goto LABEL_71;
    goto LABEL_173;
  }
LABEL_172:
  PB::TextFormatter::format(this, "pedometerArmConstrainedState");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x200000000000) == 0)
  {
LABEL_71:
    if ((v7 & 0x400000000000) == 0)
      goto LABEL_72;
    goto LABEL_174;
  }
LABEL_173:
  PB::TextFormatter::format(this, "quiescenceCumulativeRotationHarmonicMeanThreshold", *(float *)(a1 + 220));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x400000000000) == 0)
  {
LABEL_72:
    if ((v7 & 0x800000000000) == 0)
      goto LABEL_73;
    goto LABEL_175;
  }
LABEL_174:
  PB::TextFormatter::format(this, "quiescenceMaxPulseHarmonicMeanThreshold", *(float *)(a1 + 224));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x800000000000) == 0)
  {
LABEL_73:
    if ((v7 & 0x1000000000000) == 0)
      goto LABEL_74;
    goto LABEL_176;
  }
LABEL_175:
  PB::TextFormatter::format(this, "quiescencePulseEpochCount");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x1000000000000) == 0)
  {
LABEL_74:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_75;
    goto LABEL_177;
  }
LABEL_176:
  PB::TextFormatter::format(this, "quiescenceSpinEpochCount");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x2000000000000) == 0)
  {
LABEL_75:
    if ((v7 & 0x4000000000000) == 0)
      goto LABEL_76;
    goto LABEL_178;
  }
LABEL_177:
  PB::TextFormatter::format(this, "sameEventState");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((*v5 & 0x4000000000000) == 0)
  {
LABEL_76:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_77;
    goto LABEL_179;
  }
LABEL_178:
  PB::TextFormatter::format(this, "secondDeescalationHoldDuration", *(float *)(a1 + 240));
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_77:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_180;
  }
LABEL_179:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfAutocorrelationCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_78:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_79;
    goto LABEL_181;
  }
LABEL_180:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfJointDetectionCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_79:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_80;
    goto LABEL_182;
  }
LABEL_181:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfMAPFPCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x200000000) == 0)
  {
LABEL_80:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_81;
    goto LABEL_183;
  }
LABEL_182:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfMovingCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x400000000) == 0)
  {
LABEL_81:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_82;
    goto LABEL_184;
  }
LABEL_183:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfQuiescenceCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x800000000) == 0)
  {
LABEL_82:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_83;
    goto LABEL_185;
  }
LABEL_184:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfSkiLiftCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_83:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_84;
    goto LABEL_186;
  }
LABEL_185:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfSkiingCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_84:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_85;
    goto LABEL_187;
  }
LABEL_186:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfStaticCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_85:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_86;
    goto LABEL_188;
  }
LABEL_187:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfStepsCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_86:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_87;
    goto LABEL_189;
  }
LABEL_188:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfTriggerClustersCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_87:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_88;
    goto LABEL_190;
  }
LABEL_189:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfTwoLevelSensitivityCondition");
  v7 = *v5;
  v6 = *(_QWORD *)(a1 + 364);
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_88:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_89;
    goto LABEL_191;
  }
LABEL_190:
  PB::TextFormatter::format(this, "shouldDeescalateBecauseOfUshaFPCondition");
  v7 = *v5;
  if ((*(_QWORD *)(a1 + 364) & 0x40000000000) == 0)
  {
LABEL_89:
    if ((v7 & 0x8000000000000) == 0)
      goto LABEL_90;
    goto LABEL_192;
  }
LABEL_191:
  PB::TextFormatter::format(this, "shouldEnableHighSensBecauseOfDistanceToRoadCondition");
  v7 = *v5;
  if ((*v5 & 0x8000000000000) == 0)
  {
LABEL_90:
    if ((v7 & 0x10000000000000) == 0)
      goto LABEL_91;
    goto LABEL_193;
  }
LABEL_192:
  PB::TextFormatter::format(this, "skiingPressureChangeOverEpochThreshold", *(float *)(a1 + 244));
  v7 = *v5;
  if ((*v5 & 0x10000000000000) == 0)
  {
LABEL_91:
    if ((v7 & 0x20000000000000) == 0)
      goto LABEL_92;
    goto LABEL_194;
  }
LABEL_193:
  PB::TextFormatter::format(this, "staticCountThreshold");
  v7 = *v5;
  if ((*v5 & 0x20000000000000) == 0)
  {
LABEL_92:
    if ((v7 & 0x40000000000000) == 0)
      goto LABEL_93;
    goto LABEL_195;
  }
LABEL_194:
  PB::TextFormatter::format(this, "staticGpsCount");
  v7 = *v5;
  if ((*v5 & 0x40000000000000) == 0)
  {
LABEL_93:
    if ((v7 & 0x80000000000000) == 0)
      goto LABEL_94;
    goto LABEL_196;
  }
LABEL_195:
  PB::TextFormatter::format(this, "staticGpsCountTotal");
  v7 = *v5;
  if ((*v5 & 0x80000000000000) == 0)
  {
LABEL_94:
    if ((v7 & 0x100000000000000) == 0)
      goto LABEL_95;
    goto LABEL_197;
  }
LABEL_196:
  PB::TextFormatter::format(this, "stationaryCountMissingAsNoOpThreshold");
  v7 = *v5;
  if ((*v5 & 0x100000000000000) == 0)
  {
LABEL_95:
    if ((v7 & 0x40) == 0)
      goto LABEL_96;
    goto LABEL_198;
  }
LABEL_197:
  PB::TextFormatter::format(this, "stepCountEventTimestamp");
  v7 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_96:
    if ((v7 & 0x200000000000000) == 0)
      goto LABEL_97;
    goto LABEL_199;
  }
LABEL_198:
  PB::TextFormatter::format(this, "stepCountEventTimestamp64");
  v7 = *v5;
  if ((*v5 & 0x200000000000000) == 0)
  {
LABEL_97:
    if ((v7 & 0x400000000000000) == 0)
      goto LABEL_98;
    goto LABEL_200;
  }
LABEL_199:
  PB::TextFormatter::format(this, "stepsCadence", *(float *)(a1 + 268));
  v7 = *v5;
  if ((*v5 & 0x400000000000000) == 0)
  {
LABEL_98:
    if ((v7 & 0x800000000000000) == 0)
      goto LABEL_99;
    goto LABEL_201;
  }
LABEL_200:
  PB::TextFormatter::format(this, "stepsCadenceThreshold", *(float *)(a1 + 272));
  v7 = *v5;
  if ((*v5 & 0x800000000000000) == 0)
  {
LABEL_99:
    if ((v7 & 0x1000000000000000) == 0)
      goto LABEL_100;
    goto LABEL_202;
  }
LABEL_201:
  PB::TextFormatter::format(this, "stepsCount");
  v7 = *v5;
  if ((*v5 & 0x1000000000000000) == 0)
  {
LABEL_100:
    if ((v7 & 0x2000000000000000) == 0)
      goto LABEL_101;
    goto LABEL_203;
  }
LABEL_202:
  PB::TextFormatter::format(this, "stepsCountThreshold");
  v7 = *v5;
  if ((*v5 & 0x2000000000000000) == 0)
  {
LABEL_101:
    if ((v7 & 0x4000000000000000) == 0)
      goto LABEL_103;
    goto LABEL_102;
  }
LABEL_203:
  PB::TextFormatter::format(this, "stepsDeescalatedAtOpp");
  if ((*v5 & 0x4000000000000000) != 0)
LABEL_102:
    PB::TextFormatter::format(this, "stepsEpochCount", *(float *)(a1 + 288));
LABEL_103:
  v8 = *v5;
  if (*v5 < 0)
  {
    PB::TextFormatter::format(this, "stepsPerMinute", *(float *)(a1 + 292));
    v8 = *v5;
    v9 = *(_QWORD *)(a1 + 364);
    if ((v9 & 1) == 0)
      goto LABEL_207;
    goto LABEL_206;
  }
  v9 = *(_QWORD *)(a1 + 364);
  if ((v9 & 1) != 0)
  {
LABEL_206:
    PB::TextFormatter::format(this, "stepsPerMinuteThreshold", *(float *)(a1 + 296));
    v8 = *v5;
    v9 = *(_QWORD *)(a1 + 364);
  }
LABEL_207:
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(this, "stepsSecondOpportunityLookbackLength");
    v9 = *(_QWORD *)(a1 + 364);
    if ((*v5 & 0x80) == 0)
    {
LABEL_209:
      if ((v9 & 4) == 0)
        goto LABEL_210;
      goto LABEL_216;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_209;
  }
  PB::TextFormatter::format(this, "timestamp");
  v9 = *(_QWORD *)(a1 + 364);
  if ((v9 & 4) == 0)
  {
LABEL_210:
    if ((v9 & 8) == 0)
      goto LABEL_211;
LABEL_217:
    PB::TextFormatter::format(this, "ushaCumulativeRotationThreshold", *(float *)(a1 + 308));
    if ((*(_QWORD *)(a1 + 364) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_212;
  }
LABEL_216:
  PB::TextFormatter::format(this, "triggerClusterDeescalationWindowBoundary");
  v9 = *(_QWORD *)(a1 + 364);
  if ((v9 & 8) != 0)
    goto LABEL_217;
LABEL_211:
  if ((v9 & 0x10) != 0)
LABEL_212:
    PB::TextFormatter::format(this, "ushaPeakPressureThreshold", *(float *)(a1 + 312));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F25E810(_DWORD *a1, PB::Reader *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t result;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  BOOL v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  BOOL v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char v136;
  unsigned int v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char v144;
  unsigned int v145;
  uint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  char v165;
  unsigned int v166;
  uint64_t v167;
  unint64_t v168;
  char v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  char v184;
  unsigned int v185;
  uint64_t v186;
  unint64_t v187;
  char v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  char v193;
  unsigned int v194;
  uint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  unsigned int v202;
  uint64_t v203;
  unint64_t v204;
  char v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  char v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  char v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  int v232;
  BOOL v233;
  unint64_t v234;
  unint64_t v235;
  int v236;
  BOOL v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  char v249;
  unsigned int v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  char v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  BOOL v265;
  unint64_t v266;
  unint64_t v267;
  int v268;
  BOOL v269;
  unint64_t v270;
  unint64_t v271;
  int v272;
  BOOL v273;
  unint64_t v274;
  unint64_t v275;
  int v276;
  BOOL v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  BOOL v281;
  unint64_t v282;
  unint64_t v283;
  int v284;
  BOOL v285;
  unint64_t v286;
  unint64_t v287;
  int v288;
  BOOL v289;
  unint64_t v290;
  unint64_t v291;
  int v292;
  BOOL v293;
  unint64_t v294;
  unint64_t v295;
  int v296;
  BOOL v297;
  unint64_t v298;
  unint64_t v299;
  int v300;
  BOOL v301;
  unint64_t v302;
  unint64_t v303;
  int v304;
  BOOL v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  char v309;
  unsigned int v310;
  uint64_t v311;
  unint64_t v312;
  char v313;
  unint64_t v314;
  unint64_t v315;
  int v316;
  BOOL v317;
  unint64_t v318;
  unint64_t v319;
  int v320;
  BOOL v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  BOOL v325;
  unint64_t v326;
  unint64_t v327;
  uint64_t v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  unint64_t v332;
  char v333;
  unint64_t v334;
  unint64_t v335;
  int v336;
  BOOL v337;
  unint64_t v338;
  unint64_t v339;
  int v340;
  BOOL v341;
  unint64_t v342;
  unint64_t v343;
  int v344;
  BOOL v345;
  unint64_t v346;
  unint64_t v347;
  int v348;
  BOOL v349;
  unint64_t v350;
  unint64_t v351;
  int v352;
  BOOL v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  char v357;
  unsigned int v358;
  uint64_t v359;
  unint64_t v360;
  char v361;
  unint64_t v362;
  unint64_t v363;
  int v364;
  BOOL v365;
  unint64_t v366;
  unint64_t v367;
  int v368;
  BOOL v369;
  unint64_t v370;
  unint64_t v371;
  int v372;
  BOOL v373;
  unint64_t v374;
  unint64_t v375;
  int v376;
  BOOL v377;
  unint64_t v378;
  unint64_t v379;
  int v380;
  BOOL v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  BOOL v385;
  unint64_t v386;
  unint64_t v387;
  int v388;
  BOOL v389;
  unint64_t v390;
  unint64_t v391;
  int v392;
  BOOL v393;
  unint64_t v394;
  unint64_t v395;
  int v396;
  BOOL v397;
  unint64_t v398;
  unint64_t v399;
  int v400;
  BOOL v401;
  unint64_t v402;
  unint64_t v403;
  int v404;
  BOOL v405;
  unint64_t v406;
  unint64_t v407;
  uint64_t v408;
  char v409;
  unsigned int v410;
  uint64_t v411;
  unint64_t v412;
  char v413;
  unint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  char v418;
  unsigned int v419;
  uint64_t v420;
  unint64_t v421;
  char v422;
  unint64_t v423;
  unint64_t v424;
  uint64_t v425;
  char v426;
  unsigned int v427;
  uint64_t v428;
  unint64_t v429;
  char v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  char v434;
  unsigned int v435;
  uint64_t v436;
  unint64_t v437;
  char v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  char v447;
  unsigned int v448;
  uint64_t v449;
  unint64_t v450;
  char v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  char v455;
  unsigned int v456;
  uint64_t v457;
  unint64_t v458;
  char v459;
  unint64_t v460;
  unint64_t v461;
  uint64_t v462;
  char v463;
  unsigned int v464;
  uint64_t v465;
  unint64_t v466;
  char v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  char v471;
  unsigned int v472;
  uint64_t v473;
  unint64_t v474;
  char v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  char v479;
  unsigned int v480;
  uint64_t v481;
  unint64_t v482;
  char v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  char v487;
  unsigned int v488;
  uint64_t v489;
  unint64_t v490;
  char v491;
  unint64_t v492;
  unint64_t v493;
  uint64_t v494;
  char v495;
  unsigned int v496;
  uint64_t v497;
  unint64_t v498;
  char v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  char v503;
  unsigned int v504;
  uint64_t v505;
  unint64_t v506;
  char v507;
  unint64_t v508;
  unint64_t v509;
  int v510;
  BOOL v511;
  unint64_t v512;
  unint64_t v513;
  int v514;
  BOOL v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  char v519;
  unsigned int v520;
  uint64_t v521;
  unint64_t v522;
  char v523;
  unint64_t v524;
  unint64_t v525;
  uint64_t v526;
  char v527;
  unsigned int v528;
  uint64_t v529;
  unint64_t v530;
  char v531;
  unint64_t v532;
  unint64_t v533;
  uint64_t v534;
  char v535;
  unsigned int v536;
  uint64_t v537;
  unint64_t v538;
  char v539;
  unint64_t v540;
  unint64_t v541;
  uint64_t v542;
  char v543;
  unsigned int v544;
  uint64_t v545;
  unint64_t v546;
  char v547;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  char v551;
  unsigned int v552;
  uint64_t v553;
  unint64_t v554;
  char v555;
  unint64_t v556;
  unint64_t v557;
  uint64_t v558;
  char v559;
  unsigned int v560;
  uint64_t v561;
  unint64_t v562;
  char v563;
  unint64_t v564;
  unint64_t v565;
  uint64_t v566;
  char v567;
  unsigned int v568;
  uint64_t v569;
  unint64_t v570;
  char v571;
  unint64_t v572;
  unint64_t v574;
  unint64_t v575;
  uint64_t v576;
  char v577;
  unsigned int v578;
  uint64_t v579;
  unint64_t v580;
  char v581;
  char v582;
  unsigned int v583;
  unint64_t v584;
  char v585;
  char v586;
  unsigned int v587;
  unint64_t v588;
  char v589;
  char v590;
  unsigned int v591;
  unint64_t v592;
  char v593;
  char v594;
  unsigned int v595;
  unint64_t v596;
  char v597;
  char v598;
  unsigned int v599;
  unint64_t v600;
  char v601;
  char v602;
  unsigned int v603;
  unint64_t v604;
  char v605;
  char v606;
  unsigned int v607;
  unint64_t v608;
  char v609;
  char v610;
  unsigned int v611;
  unint64_t v612;
  char v613;
  char v614;
  unsigned int v615;
  unint64_t v616;
  char v617;
  char v618;
  unsigned int v619;
  unint64_t v620;
  char v621;
  char v622;
  unsigned int v623;
  unint64_t v624;
  char v625;
  char v626;
  unsigned int v627;
  unint64_t v628;
  char v629;
  char v630;
  unsigned int v631;
  unint64_t v632;
  char v633;
  char v634;
  unsigned int v635;
  unint64_t v636;
  char v637;
  char v638;
  unsigned int v639;
  unint64_t v640;
  char v641;
  char v642;
  unsigned int v643;
  unint64_t v644;
  char v645;
  char v646;
  unsigned int v647;
  unint64_t v648;
  char v649;
  char v650;
  unsigned int v651;
  unint64_t v652;
  char v653;
  char v654;
  unsigned int v655;
  unint64_t v656;
  char v657;
  char v658;
  unsigned int v659;
  unint64_t v660;
  char v661;
  char v662;
  unsigned int v663;
  unint64_t v664;
  char v665;
  char v666;
  unsigned int v667;
  unint64_t v668;
  char v669;
  char v670;
  unsigned int v671;
  unint64_t v672;
  char v673;
  char v674;
  unsigned int v675;
  unint64_t v676;
  char v677;
  char v678;
  unsigned int v679;
  unint64_t v680;
  char v681;
  char v682;
  unsigned int v683;
  unint64_t v684;
  char v685;
  char v686;
  unsigned int v687;
  unint64_t v688;
  char v689;
  char v690;
  unsigned int v691;
  unint64_t v692;
  char v693;
  char v694;
  unsigned int v695;
  unint64_t v696;
  char v697;
  char v698;
  unsigned int v699;
  unint64_t v700;
  char v701;
  char v702;
  unsigned int v703;
  unint64_t v704;
  char v705;
  char v706;
  unsigned int v707;
  unint64_t v708;
  char v709;
  char v710;
  unsigned int v711;
  unint64_t v712;
  char v713;
  char v714;
  unsigned int v715;
  unint64_t v716;
  char v717;
  char v718;
  unsigned int v719;
  unint64_t v720;
  char v721;
  char v722;
  unsigned int v723;
  unint64_t v724;
  char v725;
  char v726;
  unsigned int v727;
  unint64_t v728;
  char v729;
  char v730;
  unsigned int v731;
  unint64_t v732;
  char v733;
  char v734;
  unsigned int v735;
  unint64_t v736;
  char v737;
  char v738;
  unsigned int v739;
  unint64_t v740;
  char v741;
  char v742;
  unsigned int v743;
  unint64_t v744;
  char v745;
  char v746;
  unsigned int v747;
  unint64_t v748;
  char v749;
  char v750;
  unsigned int v751;
  unint64_t v752;
  char v753;
  char v754;
  unsigned int v755;
  unint64_t v756;
  char v757;
  char v758;
  unsigned int v759;
  unint64_t v760;
  char v761;
  char v762;
  unsigned int v763;
  unint64_t v764;
  char v765;
  _BYTE *v766;

  v10 = (unint64_t *)((char *)this + 8);
  v9 = *((_QWORD *)this + 1);
  v12 = (char *)this + 24;
  v11 = *((unsigned __int8 *)this + 24);
  v13 = *((_QWORD *)this + 2);
  if (v9 < v13 && v11 == 0)
  {
    v17 = a1;
    v18 = a1 + 89;
    v766 = (char *)this + 24;
    do
    {
      v19 = *(_QWORD *)this;
      if (v9 > 0xFFFFFFFFFFFFFFF5 || v9 + 10 > v13)
      {
        v26 = 0;
        v27 = 0;
        v28 = 0;
        if (v9 > v13)
          v13 = v9;
        while (1)
        {
          if (v13 == v9)
          {
            v22 = 0;
            *v12 = 1;
            goto LABEL_25;
          }
          v29 = v9 + 1;
          v30 = *(_BYTE *)(v19 + v9);
          *v10 = v29;
          v28 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
            break;
          v26 += 7;
          v9 = v29;
          v25 = v27++ > 8;
          if (v25)
          {
LABEL_20:
            v22 = 0;
            goto LABEL_25;
          }
        }
        if (*v12)
          v22 = 0;
        else
          v22 = v28;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = v9 + 1;
          *v10 = v9 + 1;
          v24 = *(_BYTE *)(v19 + v9);
          v22 |= (unint64_t)(v24 & 0x7F) << v20;
          if ((v24 & 0x80) == 0)
            break;
          v20 += 7;
          v9 = v23;
          v25 = v21++ > 8;
          if (v25)
            goto LABEL_20;
        }
      }
LABEL_25:
      v11 = *v12;
      if (*v12)
        v31 = 1;
      else
        v31 = (v22 & 7) == 4;
      if (v31)
        break;
      v32 = v22 >> 3;
      if ((int)(v22 >> 3) > 400)
      {
        if ((int)v32 <= 900)
        {
          if ((int)v32 > 600)
          {
            if ((int)v32 > 700)
            {
              switch((int)v32)
              {
                case 801:
                  *v18 |= 0x100000uLL;
                  v67 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[30] = *(_DWORD *)(*(_QWORD *)this + v67);
                  goto LABEL_942;
                case 802:
                  *v18 |= 0x400uLL;
                  v439 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v439 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[20] = *(_DWORD *)(*(_QWORD *)this + v439);
                  goto LABEL_942;
                case 803:
                  *v18 |= 0x200000uLL;
                  v440 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v440 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[31] = *(_DWORD *)(*(_QWORD *)this + v440);
                  goto LABEL_942;
                case 804:
                  *v18 |= 0x800uLL;
                  v441 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v441 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_513;
                  v17[21] = *(_DWORD *)(*(_QWORD *)this + v441);
LABEL_942:
                  *((_QWORD *)this + 1) += 4;
                  break;
                default:
                  if ((_DWORD)v32 == 701)
                  {
                    *v18 |= 0x800000000000uLL;
                    v460 = *((_QWORD *)this + 1);
                    v461 = *((_QWORD *)this + 2);
                    v462 = *(_QWORD *)this;
                    if (v460 > 0xFFFFFFFFFFFFFFF5 || v460 + 10 > v461)
                    {
                      v706 = 0;
                      v707 = 0;
                      v465 = 0;
                      if (v461 <= v460)
                        v461 = *((_QWORD *)this + 1);
                      while (1)
                      {
                        if (v461 == v460)
                        {
                          LODWORD(v465) = 0;
                          *v12 = 1;
                          goto LABEL_1070;
                        }
                        v708 = v460 + 1;
                        v709 = *(_BYTE *)(v462 + v460);
                        *v10 = v708;
                        v465 |= (unint64_t)(v709 & 0x7F) << v706;
                        if ((v709 & 0x80) == 0)
                          break;
                        v706 += 7;
                        v460 = v708;
                        v25 = v707++ > 8;
                        if (v25)
                        {
LABEL_835:
                          LODWORD(v465) = 0;
                          goto LABEL_1070;
                        }
                      }
                      if (*v12)
                        LODWORD(v465) = 0;
                    }
                    else
                    {
                      v463 = 0;
                      v464 = 0;
                      v465 = 0;
                      while (1)
                      {
                        v466 = v460 + 1;
                        *v10 = v460 + 1;
                        v467 = *(_BYTE *)(v462 + v460);
                        v465 |= (unint64_t)(v467 & 0x7F) << v463;
                        if ((v467 & 0x80) == 0)
                          break;
                        v463 += 7;
                        v460 = v466;
                        v25 = v464++ > 8;
                        if (v25)
                          goto LABEL_835;
                      }
                    }
LABEL_1070:
                    v17[57] = v465;
                  }
                  else
                  {
                    if ((_DWORD)v32 != 702)
                      goto LABEL_141;
                    *v18 |= 0x1000000000000uLL;
                    v77 = *((_QWORD *)this + 1);
                    v78 = *((_QWORD *)this + 2);
                    v79 = *(_QWORD *)this;
                    if (v77 > 0xFFFFFFFFFFFFFFF5 || v77 + 10 > v78)
                    {
                      v610 = 0;
                      v611 = 0;
                      v82 = 0;
                      if (v78 <= v77)
                        v78 = *((_QWORD *)this + 1);
                      v12 = v766;
                      v17 = a1;
                      while (1)
                      {
                        if (v78 == v77)
                        {
                          LODWORD(v82) = 0;
                          *v766 = 1;
                          goto LABEL_998;
                        }
                        v612 = v77 + 1;
                        v613 = *(_BYTE *)(v79 + v77);
                        *v10 = v612;
                        v82 |= (unint64_t)(v613 & 0x7F) << v610;
                        if ((v613 & 0x80) == 0)
                          break;
                        v610 += 7;
                        v77 = v612;
                        v25 = v611++ > 8;
                        if (v25)
                        {
LABEL_596:
                          LODWORD(v82) = 0;
                          goto LABEL_998;
                        }
                      }
                      if (*v766)
                        LODWORD(v82) = 0;
                    }
                    else
                    {
                      v80 = 0;
                      v81 = 0;
                      v82 = 0;
                      v12 = v766;
                      v17 = a1;
                      while (1)
                      {
                        v83 = v77 + 1;
                        *v10 = v77 + 1;
                        v84 = *(_BYTE *)(v79 + v77);
                        v82 |= (unint64_t)(v84 & 0x7F) << v80;
                        if ((v84 & 0x80) == 0)
                          break;
                        v80 += 7;
                        v77 = v83;
                        v25 = v81++ > 8;
                        if (v25)
                          goto LABEL_596;
                      }
                    }
LABEL_998:
                    v17[58] = v82;
                  }
                  break;
              }
            }
            else
            {
              switch((int)v32)
              {
                case 601:
                  v18[1] |= 0x400uLL;
                  v55 = *((_QWORD *)this + 1);
                  if (v55 >= *((_QWORD *)this + 2))
                  {
                    v58 = 0;
                    v12 = v766;
                    v17 = a1;
                    *v766 = 1;
                  }
                  else
                  {
                    v56 = v55 + 1;
                    v57 = *(unsigned __int8 *)(*(_QWORD *)this + v55);
                    *((_QWORD *)this + 1) = v56;
                    v58 = v57 != 0;
                    v12 = v766;
                    v17 = a1;
                  }
                  *((_BYTE *)v17 + 321) = v58;
                  goto LABEL_514;
                case 602:
                  *v18 |= 0x4000uLL;
                  v406 = *((_QWORD *)this + 1);
                  v407 = *((_QWORD *)this + 2);
                  v408 = *(_QWORD *)this;
                  if (v406 <= 0xFFFFFFFFFFFFFFF5 && v406 + 10 <= v407)
                  {
                    v409 = 0;
                    v410 = 0;
                    v411 = 0;
                    v12 = v766;
                    v17 = a1;
                    do
                    {
                      v412 = v406 + 1;
                      *v10 = v406 + 1;
                      v413 = *(_BYTE *)(v408 + v406);
                      v411 |= (unint64_t)(v413 & 0x7F) << v409;
                      if ((v413 & 0x80) == 0)
                        goto LABEL_1052;
                      v409 += 7;
                      v406 = v412;
                      v25 = v410++ > 8;
                    }
                    while (!v25);
LABEL_788:
                    LODWORD(v411) = 0;
                    goto LABEL_1052;
                  }
                  v682 = 0;
                  v683 = 0;
                  v411 = 0;
                  if (v407 <= v406)
                    v407 = *((_QWORD *)this + 1);
                  v12 = v766;
                  v17 = a1;
                  while (2)
                  {
                    if (v407 == v406)
                    {
                      LODWORD(v411) = 0;
                      *v766 = 1;
                    }
                    else
                    {
                      v684 = v406 + 1;
                      v685 = *(_BYTE *)(v408 + v406);
                      *v10 = v684;
                      v411 |= (unint64_t)(v685 & 0x7F) << v682;
                      if (v685 < 0)
                      {
                        v682 += 7;
                        v406 = v684;
                        v25 = v683++ > 8;
                        if (v25)
                          goto LABEL_788;
                        continue;
                      }
                      if (*v766)
                        LODWORD(v411) = 0;
                    }
                    break;
                  }
LABEL_1052:
                  v17[24] = v411;
                  goto LABEL_514;
                case 603:
                  *v18 |= 0x1000uLL;
                  v414 = *v10;
                  if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v414 + 4 > *((_QWORD *)this + 2))
                    goto LABEL_401;
                  v17 = a1;
                  a1[22] = *(_DWORD *)(*(_QWORD *)this + v414);
                  goto LABEL_940;
                case 604:
                  *v18 |= 0x100000000000uLL;
                  v415 = *((_QWORD *)this + 1);
                  v416 = *((_QWORD *)this + 2);
                  v417 = *(_QWORD *)this;
                  if (v415 <= 0xFFFFFFFFFFFFFFF5 && v415 + 10 <= v416)
                  {
                    v418 = 0;
                    v419 = 0;
                    v420 = 0;
                    v12 = v766;
                    v17 = a1;
                    do
                    {
                      v421 = v415 + 1;
                      *v10 = v415 + 1;
                      v422 = *(_BYTE *)(v417 + v415);
                      v420 |= (unint64_t)(v422 & 0x7F) << v418;
                      if ((v422 & 0x80) == 0)
                        goto LABEL_1055;
                      v418 += 7;
                      v415 = v421;
                      v25 = v419++ > 8;
                    }
                    while (!v25);
LABEL_796:
                    LODWORD(v420) = 0;
                    goto LABEL_1055;
                  }
                  v686 = 0;
                  v687 = 0;
                  v420 = 0;
                  if (v416 <= v415)
                    v416 = *((_QWORD *)this + 1);
                  v12 = v766;
                  v17 = a1;
                  while (2)
                  {
                    if (v416 == v415)
                    {
                      LODWORD(v420) = 0;
                      *v766 = 1;
                    }
                    else
                    {
                      v688 = v415 + 1;
                      v689 = *(_BYTE *)(v417 + v415);
                      *v10 = v688;
                      v420 |= (unint64_t)(v689 & 0x7F) << v686;
                      if (v689 < 0)
                      {
                        v686 += 7;
                        v415 = v688;
                        v25 = v687++ > 8;
                        if (v25)
                          goto LABEL_796;
                        continue;
                      }
                      if (*v766)
                        LODWORD(v420) = 0;
                    }
                    break;
                  }
LABEL_1055:
                  v17[54] = v420;
                  goto LABEL_514;
                case 605:
                  *v18 |= 0x100000000000000uLL;
                  v423 = *((_QWORD *)this + 1);
                  v424 = *((_QWORD *)this + 2);
                  v425 = *(_QWORD *)this;
                  if (v423 <= 0xFFFFFFFFFFFFFFF5 && v423 + 10 <= v424)
                  {
                    v426 = 0;
                    v427 = 0;
                    v428 = 0;
                    v12 = v766;
                    v17 = a1;
                    do
                    {
                      v429 = v423 + 1;
                      *v10 = v423 + 1;
                      v430 = *(_BYTE *)(v425 + v423);
                      v428 |= (unint64_t)(v430 & 0x7F) << v426;
                      if ((v430 & 0x80) == 0)
                        goto LABEL_1058;
                      v426 += 7;
                      v423 = v429;
                      v25 = v427++ > 8;
                    }
                    while (!v25);
LABEL_804:
                    LODWORD(v428) = 0;
                    goto LABEL_1058;
                  }
                  v690 = 0;
                  v691 = 0;
                  v428 = 0;
                  if (v424 <= v423)
                    v424 = *((_QWORD *)this + 1);
                  v12 = v766;
                  v17 = a1;
                  while (2)
                  {
                    if (v424 == v423)
                    {
                      LODWORD(v428) = 0;
                      *v766 = 1;
                    }
                    else
                    {
                      v692 = v423 + 1;
                      v693 = *(_BYTE *)(v425 + v423);
                      *v10 = v692;
                      v428 |= (unint64_t)(v693 & 0x7F) << v690;
                      if (v693 < 0)
                      {
                        v690 += 7;
                        v423 = v692;
                        v25 = v691++ > 8;
                        if (v25)
                          goto LABEL_804;
                        continue;
                      }
                      if (*v766)
                        LODWORD(v428) = 0;
                    }
                    break;
                  }
LABEL_1058:
                  v17[66] = v428;
                  goto LABEL_514;
                case 606:
                  *v18 |= 0x40uLL;
                  v431 = *((_QWORD *)this + 1);
                  v432 = *((_QWORD *)this + 2);
                  v433 = *(_QWORD *)this;
                  if (v431 <= 0xFFFFFFFFFFFFFFF5 && v431 + 10 <= v432)
                  {
                    v434 = 0;
                    v435 = 0;
                    v436 = 0;
                    v12 = v766;
                    v17 = a1;
                    do
                    {
                      v437 = v431 + 1;
                      *v10 = v431 + 1;
                      v438 = *(_BYTE *)(v433 + v431);
                      v436 |= (unint64_t)(v438 & 0x7F) << v434;
                      if ((v438 & 0x80) == 0)
                        goto LABEL_1061;
                      v434 += 7;
                      v431 = v437;
                      v25 = v435++ > 8;
                    }
                    while (!v25);
LABEL_812:
                    v436 = 0;
                    goto LABEL_1061;
                  }
                  v694 = 0;
                  v695 = 0;
                  v436 = 0;
                  if (v432 <= v431)
                    v432 = *((_QWORD *)this + 1);
                  v12 = v766;
                  v17 = a1;
                  break;
                default:
                  goto LABEL_141;
              }
              while (1)
              {
                if (v432 == v431)
                {
                  v436 = 0;
                  *v766 = 1;
                  goto LABEL_1061;
                }
                v696 = v431 + 1;
                v697 = *(_BYTE *)(v433 + v431);
                *v10 = v696;
                v436 |= (unint64_t)(v697 & 0x7F) << v694;
                if ((v697 & 0x80) == 0)
                  break;
                v694 += 7;
                v431 = v696;
                v25 = v695++ > 8;
                if (v25)
                  goto LABEL_812;
              }
              if (*v766)
                v436 = 0;
LABEL_1061:
              *((_QWORD *)v17 + 7) = v436;
            }
          }
          else
          {
            switch((int)v32)
            {
              case 401:
                *v18 |= 0x20000000000000uLL;
                v35 = *((_QWORD *)this + 1);
                v36 = *((_QWORD *)this + 2);
                v37 = *(_QWORD *)this;
                if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
                {
                  v38 = 0;
                  v39 = 0;
                  v40 = 0;
                  do
                  {
                    v41 = v35 + 1;
                    *v10 = v35 + 1;
                    v42 = *(_BYTE *)(v37 + v35);
                    v40 |= (unint64_t)(v42 & 0x7F) << v38;
                    if ((v42 & 0x80) == 0)
                      goto LABEL_992;
                    v38 += 7;
                    v35 = v41;
                    v25 = v39++ > 8;
                  }
                  while (!v25);
LABEL_576:
                  LODWORD(v40) = 0;
                  goto LABEL_992;
                }
                v602 = 0;
                v603 = 0;
                v40 = 0;
                if (v36 <= v35)
                  v36 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v36 == v35)
                  {
                    LODWORD(v40) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v604 = v35 + 1;
                    v605 = *(_BYTE *)(v37 + v35);
                    *v10 = v604;
                    v40 |= (unint64_t)(v605 & 0x7F) << v602;
                    if (v605 < 0)
                    {
                      v602 += 7;
                      v35 = v604;
                      v25 = v603++ > 8;
                      if (v25)
                        goto LABEL_576;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v40) = 0;
                  }
                  break;
                }
LABEL_992:
                v17[63] = v40;
                goto LABEL_514;
              case 402:
                *v18 |= 0x40000000000000uLL;
                v206 = *((_QWORD *)this + 1);
                v207 = *((_QWORD *)this + 2);
                v208 = *(_QWORD *)this;
                if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
                {
                  v209 = 0;
                  v210 = 0;
                  v211 = 0;
                  do
                  {
                    v212 = v206 + 1;
                    *v10 = v206 + 1;
                    v213 = *(_BYTE *)(v208 + v206);
                    v211 |= (unint64_t)(v213 & 0x7F) << v209;
                    if ((v213 & 0x80) == 0)
                      goto LABEL_1025;
                    v209 += 7;
                    v206 = v212;
                    v25 = v210++ > 8;
                  }
                  while (!v25);
LABEL_659:
                  LODWORD(v211) = 0;
                  goto LABEL_1025;
                }
                v646 = 0;
                v647 = 0;
                v211 = 0;
                if (v207 <= v206)
                  v207 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v207 == v206)
                  {
                    LODWORD(v211) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v648 = v206 + 1;
                    v649 = *(_BYTE *)(v208 + v206);
                    *v10 = v648;
                    v211 |= (unint64_t)(v649 & 0x7F) << v646;
                    if (v649 < 0)
                    {
                      v646 += 7;
                      v206 = v648;
                      v25 = v647++ > 8;
                      if (v25)
                        goto LABEL_659;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v211) = 0;
                  }
                  break;
                }
LABEL_1025:
                v17[64] = v211;
                goto LABEL_514;
              case 403:
                *v18 |= 0x4000000uLL;
                v214 = *((_QWORD *)this + 1);
                v215 = *((_QWORD *)this + 2);
                v216 = *(_QWORD *)this;
                if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
                {
                  v217 = 0;
                  v218 = 0;
                  v219 = 0;
                  do
                  {
                    v220 = v214 + 1;
                    *v10 = v214 + 1;
                    v221 = *(_BYTE *)(v216 + v214);
                    v219 |= (unint64_t)(v221 & 0x7F) << v217;
                    if ((v221 & 0x80) == 0)
                      goto LABEL_1028;
                    v217 += 7;
                    v214 = v220;
                    v25 = v218++ > 8;
                  }
                  while (!v25);
LABEL_666:
                  LODWORD(v219) = 0;
                  goto LABEL_1028;
                }
                v650 = 0;
                v651 = 0;
                v219 = 0;
                if (v215 <= v214)
                  v215 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v215 == v214)
                  {
                    LODWORD(v219) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v652 = v214 + 1;
                    v653 = *(_BYTE *)(v216 + v214);
                    *v10 = v652;
                    v219 |= (unint64_t)(v653 & 0x7F) << v650;
                    if (v653 < 0)
                    {
                      v650 += 7;
                      v214 = v652;
                      v25 = v651++ > 8;
                      if (v25)
                        goto LABEL_666;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v219) = 0;
                  }
                  break;
                }
LABEL_1028:
                v17[36] = v219;
                goto LABEL_514;
              case 404:
                *v18 |= 0x8000000uLL;
                v222 = *((_QWORD *)this + 1);
                v223 = *((_QWORD *)this + 2);
                v224 = *(_QWORD *)this;
                if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
                {
                  v225 = 0;
                  v226 = 0;
                  v227 = 0;
                  do
                  {
                    v228 = v222 + 1;
                    *v10 = v222 + 1;
                    v229 = *(_BYTE *)(v224 + v222);
                    v227 |= (unint64_t)(v229 & 0x7F) << v225;
                    if ((v229 & 0x80) == 0)
                      goto LABEL_1031;
                    v225 += 7;
                    v222 = v228;
                    v25 = v226++ > 8;
                  }
                  while (!v25);
LABEL_673:
                  LODWORD(v227) = 0;
                  goto LABEL_1031;
                }
                v654 = 0;
                v655 = 0;
                v227 = 0;
                if (v223 <= v222)
                  v223 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v223 == v222)
                  {
                    LODWORD(v227) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v656 = v222 + 1;
                    v657 = *(_BYTE *)(v224 + v222);
                    *v10 = v656;
                    v227 |= (unint64_t)(v657 & 0x7F) << v654;
                    if (v657 < 0)
                    {
                      v654 += 7;
                      v222 = v656;
                      v25 = v655++ > 8;
                      if (v25)
                        goto LABEL_673;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v227) = 0;
                  }
                  break;
                }
LABEL_1031:
                v17[37] = v227;
                goto LABEL_514;
              case 405:
                v18[1] |= 0x20000uLL;
                v230 = *((_QWORD *)this + 1);
                if (v230 >= *((_QWORD *)this + 2))
                {
                  v233 = 0;
                  *v12 = 1;
                }
                else
                {
                  v231 = v230 + 1;
                  v232 = *(unsigned __int8 *)(*(_QWORD *)this + v230);
                  *((_QWORD *)this + 1) = v231;
                  v233 = v232 != 0;
                }
                *((_BYTE *)v17 + 328) = v233;
                goto LABEL_514;
              case 406:
                v18[1] |= 0x4000uLL;
                v234 = *((_QWORD *)this + 1);
                if (v234 >= *((_QWORD *)this + 2))
                {
                  v237 = 0;
                  *v12 = 1;
                }
                else
                {
                  v235 = v234 + 1;
                  v236 = *(unsigned __int8 *)(*(_QWORD *)this + v234);
                  *((_QWORD *)this + 1) = v235;
                  v237 = v236 != 0;
                }
                *((_BYTE *)v17 + 325) = v237;
                goto LABEL_514;
              case 407:
                *v18 |= 0x2000000000uLL;
                v238 = *((_QWORD *)this + 1);
                v239 = *((_QWORD *)this + 2);
                v240 = *(_QWORD *)this;
                if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
                {
                  v241 = 0;
                  v242 = 0;
                  v243 = 0;
                  do
                  {
                    v244 = v238 + 1;
                    *v10 = v238 + 1;
                    v245 = *(_BYTE *)(v240 + v238);
                    v243 |= (unint64_t)(v245 & 0x7F) << v241;
                    if ((v245 & 0x80) == 0)
                      goto LABEL_1034;
                    v241 += 7;
                    v238 = v244;
                    v25 = v242++ > 8;
                  }
                  while (!v25);
LABEL_684:
                  LODWORD(v243) = 0;
                  goto LABEL_1034;
                }
                v658 = 0;
                v659 = 0;
                v243 = 0;
                if (v239 <= v238)
                  v239 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v239 == v238)
                  {
                    LODWORD(v243) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v660 = v238 + 1;
                    v661 = *(_BYTE *)(v240 + v238);
                    *v10 = v660;
                    v243 |= (unint64_t)(v661 & 0x7F) << v658;
                    if (v661 < 0)
                    {
                      v658 += 7;
                      v238 = v660;
                      v25 = v659++ > 8;
                      if (v25)
                        goto LABEL_684;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v243) = 0;
                  }
                  break;
                }
LABEL_1034:
                v17[47] = v243;
                goto LABEL_514;
              case 408:
                *v18 |= 0x80000uLL;
                v246 = *((_QWORD *)this + 1);
                v247 = *((_QWORD *)this + 2);
                v248 = *(_QWORD *)this;
                if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
                {
                  v249 = 0;
                  v250 = 0;
                  v251 = 0;
                  do
                  {
                    v252 = v246 + 1;
                    *v10 = v246 + 1;
                    v253 = *(_BYTE *)(v248 + v246);
                    v251 |= (unint64_t)(v253 & 0x7F) << v249;
                    if ((v253 & 0x80) == 0)
                      goto LABEL_1037;
                    v249 += 7;
                    v246 = v252;
                    v25 = v250++ > 8;
                  }
                  while (!v25);
LABEL_691:
                  LODWORD(v251) = 0;
                  goto LABEL_1037;
                }
                v662 = 0;
                v663 = 0;
                v251 = 0;
                if (v247 <= v246)
                  v247 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v247 == v246)
                  {
                    LODWORD(v251) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v664 = v246 + 1;
                    v665 = *(_BYTE *)(v248 + v246);
                    *v10 = v664;
                    v251 |= (unint64_t)(v665 & 0x7F) << v662;
                    if (v665 < 0)
                    {
                      v662 += 7;
                      v246 = v664;
                      v25 = v663++ > 8;
                      if (v25)
                        goto LABEL_691;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v251) = 0;
                  }
                  break;
                }
LABEL_1037:
                v17[29] = v251;
                goto LABEL_514;
              case 409:
                *v18 |= 0x1000000000uLL;
                v254 = *((_QWORD *)this + 1);
                v255 = *((_QWORD *)this + 2);
                v256 = *(_QWORD *)this;
                if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
                {
                  v257 = 0;
                  v258 = 0;
                  v259 = 0;
                  do
                  {
                    v260 = v254 + 1;
                    *v10 = v254 + 1;
                    v261 = *(_BYTE *)(v256 + v254);
                    v259 |= (unint64_t)(v261 & 0x7F) << v257;
                    if ((v261 & 0x80) == 0)
                      goto LABEL_1040;
                    v257 += 7;
                    v254 = v260;
                    v25 = v258++ > 8;
                  }
                  while (!v25);
LABEL_698:
                  LODWORD(v259) = 0;
                  goto LABEL_1040;
                }
                v666 = 0;
                v667 = 0;
                v259 = 0;
                if (v255 <= v254)
                  v255 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v255 == v254)
                  {
                    LODWORD(v259) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v668 = v254 + 1;
                    v669 = *(_BYTE *)(v256 + v254);
                    *v10 = v668;
                    v259 |= (unint64_t)(v669 & 0x7F) << v666;
                    if (v669 < 0)
                    {
                      v666 += 7;
                      v254 = v668;
                      v25 = v667++ > 8;
                      if (v25)
                        goto LABEL_698;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v259) = 0;
                  }
                  break;
                }
LABEL_1040:
                v17[46] = v259;
                goto LABEL_514;
              default:
                switch((int)v32)
                {
                  case 501:
                    *v18 |= 0x4000000000000000uLL;
                    v68 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
                      goto LABEL_401;
                    v17 = a1;
                    a1[72] = *(_DWORD *)(*(_QWORD *)this + v68);
                    goto LABEL_940;
                  case 502:
                    *v18 |= 0x8000000000000000;
                    v442 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v442 + 4 > *((_QWORD *)this + 2))
                      goto LABEL_401;
                    v17 = a1;
                    a1[73] = *(_DWORD *)(*(_QWORD *)this + v442);
                    goto LABEL_940;
                  case 503:
                    *v18 |= 0x200000000000000uLL;
                    v443 = *v10;
                    if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v443 + 4 > *((_QWORD *)this + 2))
                      goto LABEL_401;
                    v17 = a1;
                    a1[67] = *(_DWORD *)(*(_QWORD *)this + v443);
                    goto LABEL_940;
                  case 504:
                    *v18 |= 0x800000000000000uLL;
                    v444 = *((_QWORD *)this + 1);
                    v445 = *((_QWORD *)this + 2);
                    v446 = *(_QWORD *)this;
                    if (v444 <= 0xFFFFFFFFFFFFFFF5 && v444 + 10 <= v445)
                    {
                      v447 = 0;
                      v448 = 0;
                      v449 = 0;
                      v12 = v766;
                      v17 = a1;
                      do
                      {
                        v450 = v444 + 1;
                        *v10 = v444 + 1;
                        v451 = *(_BYTE *)(v446 + v444);
                        v449 |= (unint64_t)(v451 & 0x7F) << v447;
                        if ((v451 & 0x80) == 0)
                          goto LABEL_1064;
                        v447 += 7;
                        v444 = v450;
                        v25 = v448++ > 8;
                      }
                      while (!v25);
LABEL_820:
                      LODWORD(v449) = 0;
                      goto LABEL_1064;
                    }
                    v698 = 0;
                    v699 = 0;
                    v449 = 0;
                    if (v445 <= v444)
                      v445 = *((_QWORD *)this + 1);
                    v12 = v766;
                    v17 = a1;
                    while (2)
                    {
                      if (v445 == v444)
                      {
                        LODWORD(v449) = 0;
                        *v766 = 1;
                      }
                      else
                      {
                        v700 = v444 + 1;
                        v701 = *(_BYTE *)(v446 + v444);
                        *v10 = v700;
                        v449 |= (unint64_t)(v701 & 0x7F) << v698;
                        if (v701 < 0)
                        {
                          v698 += 7;
                          v444 = v700;
                          v25 = v699++ > 8;
                          if (v25)
                            goto LABEL_820;
                          continue;
                        }
                        if (*v766)
                          LODWORD(v449) = 0;
                      }
                      break;
                    }
LABEL_1064:
                    v17[69] = v449;
                    goto LABEL_514;
                  case 505:
                    *v18 |= 0x2000000000000000uLL;
                    v452 = *((_QWORD *)this + 1);
                    v453 = *((_QWORD *)this + 2);
                    v454 = *(_QWORD *)this;
                    if (v452 <= 0xFFFFFFFFFFFFFFF5 && v452 + 10 <= v453)
                    {
                      v455 = 0;
                      v456 = 0;
                      v457 = 0;
                      v12 = v766;
                      v17 = a1;
                      do
                      {
                        v458 = v452 + 1;
                        *v10 = v452 + 1;
                        v459 = *(_BYTE *)(v454 + v452);
                        v457 |= (unint64_t)(v459 & 0x7F) << v455;
                        if ((v459 & 0x80) == 0)
                          goto LABEL_1067;
                        v455 += 7;
                        v452 = v458;
                        v25 = v456++ > 8;
                      }
                      while (!v25);
LABEL_828:
                      LODWORD(v457) = 0;
                      goto LABEL_1067;
                    }
                    v702 = 0;
                    v703 = 0;
                    v457 = 0;
                    if (v453 <= v452)
                      v453 = *((_QWORD *)this + 1);
                    v12 = v766;
                    v17 = a1;
                    break;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            while (1)
            {
              if (v453 == v452)
              {
                LODWORD(v457) = 0;
                *v766 = 1;
                goto LABEL_1067;
              }
              v704 = v452 + 1;
              v705 = *(_BYTE *)(v454 + v452);
              *v10 = v704;
              v457 |= (unint64_t)(v705 & 0x7F) << v702;
              if ((v705 & 0x80) == 0)
                break;
              v702 += 7;
              v452 = v704;
              v25 = v703++ > 8;
              if (v25)
                goto LABEL_828;
            }
            if (*v766)
              LODWORD(v457) = 0;
LABEL_1067:
            v17[71] = v457;
          }
        }
        else if ((int)v32 <= 1200)
        {
          if ((int)v32 <= 1100)
          {
            switch((_DWORD)v32)
            {
              case 0x385:
                *v18 |= 0x100uLL;
                v122 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
                {
LABEL_401:
                  v12 = v766;
                  v17 = a1;
LABEL_513:
                  *v12 = 1;
                }
                else
                {
                  v17 = a1;
                  a1[18] = *(_DWORD *)(*(_QWORD *)this + v122);
LABEL_940:
                  *((_QWORD *)this + 1) += 4;
                  v12 = v766;
                }
                break;
              case 0x386:
                v18[1] |= 0x200000uLL;
                v123 = *((_QWORD *)this + 1);
                if (v123 >= *((_QWORD *)this + 2))
                {
                  v126 = 0;
                  v12 = v766;
                  v17 = a1;
                  *v766 = 1;
                }
                else
                {
                  v124 = v123 + 1;
                  v125 = *(unsigned __int8 *)(*(_QWORD *)this + v123);
                  *((_QWORD *)this + 1) = v124;
                  v126 = v125 != 0;
                  v12 = v766;
                  v17 = a1;
                }
                *((_BYTE *)v17 + 332) = v126;
                break;
              case 0x3E9:
                v18[1] |= 4uLL;
                v69 = *((_QWORD *)this + 1);
                v70 = *((_QWORD *)this + 2);
                v71 = *(_QWORD *)this;
                if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v70)
                {
                  v586 = 0;
                  v587 = 0;
                  v74 = 0;
                  if (v70 <= v69)
                    v70 = *((_QWORD *)this + 1);
                  v12 = v766;
                  v17 = a1;
                  while (1)
                  {
                    if (v70 == v69)
                    {
                      LODWORD(v74) = 0;
                      *v766 = 1;
                      goto LABEL_953;
                    }
                    v588 = v69 + 1;
                    v589 = *(_BYTE *)(v71 + v69);
                    *v10 = v588;
                    v74 |= (unint64_t)(v589 & 0x7F) << v586;
                    if ((v589 & 0x80) == 0)
                      break;
                    v586 += 7;
                    v69 = v588;
                    v25 = v587++ > 8;
                    if (v25)
                    {
LABEL_541:
                      LODWORD(v74) = 0;
                      goto LABEL_953;
                    }
                  }
                  if (*v766)
                    LODWORD(v74) = 0;
                }
                else
                {
                  v72 = 0;
                  v73 = 0;
                  v74 = 0;
                  v12 = v766;
                  v17 = a1;
                  while (1)
                  {
                    v75 = v69 + 1;
                    *v10 = v69 + 1;
                    v76 = *(_BYTE *)(v71 + v69);
                    v74 |= (unint64_t)(v76 & 0x7F) << v72;
                    if ((v76 & 0x80) == 0)
                      break;
                    v72 += 7;
                    v69 = v75;
                    v25 = v73++ > 8;
                    if (v25)
                      goto LABEL_541;
                  }
                }
LABEL_953:
                v17[76] = v74;
                break;
              default:
LABEL_141:
                v127 = v7;
                v128 = a6;
                v129 = v18;
                v130 = v8;
                v131 = a7;
                result = PB::Reader::skip(this);
                a7 = v131;
                v8 = v130;
                v18 = v129;
                a6 = v128;
                v7 = v127;
                v12 = v766;
                v17 = a1;
                if (!(_DWORD)result)
                  return result;
                break;
            }
          }
          else
          {
            switch((int)v32)
            {
              case 1101:
                *v18 |= 0x10000000uLL;
                v59 = *((_QWORD *)this + 1);
                v60 = *((_QWORD *)this + 2);
                v61 = *(_QWORD *)this;
                if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
                {
                  v62 = 0;
                  v63 = 0;
                  v64 = 0;
                  v12 = v766;
                  v17 = a1;
                  do
                  {
                    v65 = v59 + 1;
                    *v10 = v59 + 1;
                    v66 = *(_BYTE *)(v61 + v59);
                    v64 |= (unint64_t)(v66 & 0x7F) << v62;
                    if ((v66 & 0x80) == 0)
                      goto LABEL_950;
                    v62 += 7;
                    v59 = v65;
                    v25 = v63++ > 8;
                  }
                  while (!v25);
LABEL_533:
                  LODWORD(v64) = 0;
                  goto LABEL_950;
                }
                v582 = 0;
                v583 = 0;
                v64 = 0;
                if (v60 <= v59)
                  v60 = *((_QWORD *)this + 1);
                v12 = v766;
                v17 = a1;
                while (2)
                {
                  if (v60 == v59)
                  {
                    LODWORD(v64) = 0;
                    *v766 = 1;
                  }
                  else
                  {
                    v584 = v59 + 1;
                    v585 = *(_BYTE *)(v61 + v59);
                    *v10 = v584;
                    v64 |= (unint64_t)(v585 & 0x7F) << v582;
                    if (v585 < 0)
                    {
                      v582 += 7;
                      v59 = v584;
                      v25 = v583++ > 8;
                      if (v25)
                        goto LABEL_533;
                      continue;
                    }
                    if (*v766)
                      LODWORD(v64) = 0;
                  }
                  break;
                }
LABEL_950:
                v17[38] = v64;
                goto LABEL_514;
              case 1102:
                *v18 |= 0x40000000uLL;
                v93 = *((_QWORD *)this + 1);
                v94 = *((_QWORD *)this + 2);
                v95 = *(_QWORD *)this;
                if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
                {
                  v96 = 0;
                  v97 = 0;
                  v98 = 0;
                  v12 = v766;
                  v17 = a1;
                  do
                  {
                    v99 = v93 + 1;
                    *v10 = v93 + 1;
                    v100 = *(_BYTE *)(v95 + v93);
                    v98 |= (unint64_t)(v100 & 0x7F) << v96;
                    if ((v100 & 0x80) == 0)
                      goto LABEL_956;
                    v96 += 7;
                    v93 = v99;
                    v25 = v97++ > 8;
                  }
                  while (!v25);
LABEL_549:
                  LODWORD(v98) = 0;
                  goto LABEL_956;
                }
                v590 = 0;
                v591 = 0;
                v98 = 0;
                if (v94 <= v93)
                  v94 = *((_QWORD *)this + 1);
                v12 = v766;
                v17 = a1;
                while (2)
                {
                  if (v94 == v93)
                  {
                    LODWORD(v98) = 0;
                    *v766 = 1;
                  }
                  else
                  {
                    v592 = v93 + 1;
                    v593 = *(_BYTE *)(v95 + v93);
                    *v10 = v592;
                    v98 |= (unint64_t)(v593 & 0x7F) << v590;
                    if (v593 < 0)
                    {
                      v590 += 7;
                      v93 = v592;
                      v25 = v591++ > 8;
                      if (v25)
                        goto LABEL_549;
                      continue;
                    }
                    if (*v766)
                      LODWORD(v98) = 0;
                  }
                  break;
                }
LABEL_956:
                v17[40] = v98;
                goto LABEL_514;
              case 1103:
                v18[1] |= 0x1000000000uLL;
                v101 = *((_QWORD *)this + 1);
                if (v101 >= *((_QWORD *)this + 2))
                {
                  v104 = 0;
                  v12 = v766;
                  v17 = a1;
                  *v766 = 1;
                }
                else
                {
                  v102 = v101 + 1;
                  v103 = *(unsigned __int8 *)(*(_QWORD *)this + v101);
                  *((_QWORD *)this + 1) = v102;
                  v104 = v103 != 0;
                  v12 = v766;
                  v17 = a1;
                }
                *((_BYTE *)v17 + 347) = v104;
                goto LABEL_514;
              case 1104:
                *v18 |= 0x80000000uLL;
                v105 = *((_QWORD *)this + 1);
                v106 = *((_QWORD *)this + 2);
                v107 = *(_QWORD *)this;
                if (v105 <= 0xFFFFFFFFFFFFFFF5 && v105 + 10 <= v106)
                {
                  v108 = 0;
                  v109 = 0;
                  v110 = 0;
                  v12 = v766;
                  v17 = a1;
                  do
                  {
                    v111 = v105 + 1;
                    *v10 = v105 + 1;
                    v112 = *(_BYTE *)(v107 + v105);
                    v110 |= (unint64_t)(v112 & 0x7F) << v108;
                    if ((v112 & 0x80) == 0)
                      goto LABEL_959;
                    v108 += 7;
                    v105 = v111;
                    v25 = v109++ > 8;
                  }
                  while (!v25);
LABEL_559:
                  LODWORD(v110) = 0;
                  goto LABEL_959;
                }
                v594 = 0;
                v595 = 0;
                v110 = 0;
                if (v106 <= v105)
                  v106 = *((_QWORD *)this + 1);
                v12 = v766;
                v17 = a1;
                while (2)
                {
                  if (v106 == v105)
                  {
                    LODWORD(v110) = 0;
                    *v766 = 1;
                  }
                  else
                  {
                    v596 = v105 + 1;
                    v597 = *(_BYTE *)(v107 + v105);
                    *v10 = v596;
                    v110 |= (unint64_t)(v597 & 0x7F) << v594;
                    if (v597 < 0)
                    {
                      v594 += 7;
                      v105 = v596;
                      v25 = v595++ > 8;
                      if (v25)
                        goto LABEL_559;
                      continue;
                    }
                    if (*v766)
                      LODWORD(v110) = 0;
                  }
                  break;
                }
LABEL_959:
                v17[41] = v110;
                goto LABEL_514;
              case 1105:
                *v18 |= 0x20000000uLL;
                v113 = *((_QWORD *)this + 1);
                v114 = *((_QWORD *)this + 2);
                v115 = *(_QWORD *)this;
                if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
                {
                  v116 = 0;
                  v117 = 0;
                  v118 = 0;
                  v12 = v766;
                  v17 = a1;
                  do
                  {
                    v119 = v113 + 1;
                    *v10 = v113 + 1;
                    v120 = *(_BYTE *)(v115 + v113);
                    v118 |= (unint64_t)(v120 & 0x7F) << v116;
                    if ((v120 & 0x80) == 0)
                      goto LABEL_962;
                    v116 += 7;
                    v113 = v119;
                    v25 = v117++ > 8;
                  }
                  while (!v25);
LABEL_567:
                  LODWORD(v118) = 0;
                  goto LABEL_962;
                }
                v598 = 0;
                v599 = 0;
                v118 = 0;
                if (v114 <= v113)
                  v114 = *((_QWORD *)this + 1);
                v12 = v766;
                v17 = a1;
                break;
              case 1106:
                *v18 |= 0x8000000000000uLL;
                v121 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_401;
                v17 = a1;
                a1[61] = *(_DWORD *)(*(_QWORD *)this + v121);
                goto LABEL_940;
              default:
                goto LABEL_141;
            }
            while (1)
            {
              if (v114 == v113)
              {
                LODWORD(v118) = 0;
                *v766 = 1;
                goto LABEL_962;
              }
              v600 = v113 + 1;
              v601 = *(_BYTE *)(v115 + v113);
              *v10 = v600;
              v118 |= (unint64_t)(v601 & 0x7F) << v598;
              if ((v601 & 0x80) == 0)
                break;
              v598 += 7;
              v113 = v600;
              v25 = v599++ > 8;
              if (v25)
                goto LABEL_567;
            }
            if (*v766)
              LODWORD(v118) = 0;
LABEL_962:
            v17[39] = v118;
          }
        }
        else
        {
          switch((int)v32)
          {
            case 1301:
              *v18 |= 0x8000uLL;
              v34 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
                goto LABEL_513;
              v17[25] = *(_DWORD *)(*(_QWORD *)this + v34);
              goto LABEL_942;
            case 1302:
              *v18 |= 0x40000000000uLL;
              v468 = *((_QWORD *)this + 1);
              v469 = *((_QWORD *)this + 2);
              v470 = *(_QWORD *)this;
              if (v468 <= 0xFFFFFFFFFFFFFFF5 && v468 + 10 <= v469)
              {
                v471 = 0;
                v472 = 0;
                v473 = 0;
                do
                {
                  v474 = v468 + 1;
                  *v10 = v468 + 1;
                  v475 = *(_BYTE *)(v470 + v468);
                  v473 |= (unint64_t)(v475 & 0x7F) << v471;
                  if ((v475 & 0x80) == 0)
                    goto LABEL_1078;
                  v471 += 7;
                  v468 = v474;
                  v25 = v472++ > 8;
                }
                while (!v25);
LABEL_850:
                LODWORD(v473) = 0;
                goto LABEL_1078;
              }
              v714 = 0;
              v715 = 0;
              v473 = 0;
              if (v469 <= v468)
                v469 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v469 == v468)
                {
                  LODWORD(v473) = 0;
                  *v12 = 1;
                }
                else
                {
                  v716 = v468 + 1;
                  v717 = *(_BYTE *)(v470 + v468);
                  *v10 = v716;
                  v473 |= (unint64_t)(v717 & 0x7F) << v714;
                  if (v717 < 0)
                  {
                    v714 += 7;
                    v468 = v716;
                    v25 = v715++ > 8;
                    if (v25)
                      goto LABEL_850;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v473) = 0;
                }
                break;
              }
LABEL_1078:
              v17[52] = v473;
              break;
            case 1303:
              *v18 |= 0x10000000000uLL;
              v476 = *((_QWORD *)this + 1);
              v477 = *((_QWORD *)this + 2);
              v478 = *(_QWORD *)this;
              if (v476 <= 0xFFFFFFFFFFFFFFF5 && v476 + 10 <= v477)
              {
                v479 = 0;
                v480 = 0;
                v481 = 0;
                do
                {
                  v482 = v476 + 1;
                  *v10 = v476 + 1;
                  v483 = *(_BYTE *)(v478 + v476);
                  v481 |= (unint64_t)(v483 & 0x7F) << v479;
                  if ((v483 & 0x80) == 0)
                    goto LABEL_1082;
                  v479 += 7;
                  v476 = v482;
                  v25 = v480++ > 8;
                }
                while (!v25);
LABEL_857:
                LODWORD(v481) = 0;
                goto LABEL_1082;
              }
              v718 = 0;
              v719 = 0;
              v481 = 0;
              if (v477 <= v476)
                v477 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v477 == v476)
                {
                  LODWORD(v481) = 0;
                  *v12 = 1;
                }
                else
                {
                  v720 = v476 + 1;
                  v721 = *(_BYTE *)(v478 + v476);
                  *v10 = v720;
                  v481 |= (unint64_t)(v721 & 0x7F) << v718;
                  if (v721 < 0)
                  {
                    v718 += 7;
                    v476 = v720;
                    v25 = v719++ > 8;
                    if (v25)
                      goto LABEL_857;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v481) = 0;
                }
                break;
              }
LABEL_1082:
              v17[50] = v481;
              break;
            case 1304:
              *v18 |= 0x800000000uLL;
              v484 = *((_QWORD *)this + 1);
              v485 = *((_QWORD *)this + 2);
              v486 = *(_QWORD *)this;
              if (v484 <= 0xFFFFFFFFFFFFFFF5 && v484 + 10 <= v485)
              {
                v487 = 0;
                v488 = 0;
                v489 = 0;
                do
                {
                  v490 = v484 + 1;
                  *v10 = v484 + 1;
                  v491 = *(_BYTE *)(v486 + v484);
                  v489 |= (unint64_t)(v491 & 0x7F) << v487;
                  if ((v491 & 0x80) == 0)
                    goto LABEL_1086;
                  v487 += 7;
                  v484 = v490;
                  v25 = v488++ > 8;
                }
                while (!v25);
LABEL_864:
                LODWORD(v489) = 0;
                goto LABEL_1086;
              }
              v722 = 0;
              v723 = 0;
              v489 = 0;
              if (v485 <= v484)
                v485 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v485 == v484)
                {
                  LODWORD(v489) = 0;
                  *v12 = 1;
                }
                else
                {
                  v724 = v484 + 1;
                  v725 = *(_BYTE *)(v486 + v484);
                  *v10 = v724;
                  v489 |= (unint64_t)(v725 & 0x7F) << v722;
                  if (v725 < 0)
                  {
                    v722 += 7;
                    v484 = v724;
                    v25 = v723++ > 8;
                    if (v25)
                      goto LABEL_864;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v489) = 0;
                }
                break;
              }
LABEL_1086:
              v17[45] = v489;
              break;
            case 1305:
              *v18 |= 0x100000000uLL;
              v492 = *((_QWORD *)this + 1);
              v493 = *((_QWORD *)this + 2);
              v494 = *(_QWORD *)this;
              if (v492 <= 0xFFFFFFFFFFFFFFF5 && v492 + 10 <= v493)
              {
                v495 = 0;
                v496 = 0;
                v497 = 0;
                do
                {
                  v498 = v492 + 1;
                  *v10 = v492 + 1;
                  v499 = *(_BYTE *)(v494 + v492);
                  v497 |= (unint64_t)(v499 & 0x7F) << v495;
                  if ((v499 & 0x80) == 0)
                    goto LABEL_1090;
                  v495 += 7;
                  v492 = v498;
                  v25 = v496++ > 8;
                }
                while (!v25);
LABEL_871:
                LODWORD(v497) = 0;
                goto LABEL_1090;
              }
              v726 = 0;
              v727 = 0;
              v497 = 0;
              if (v493 <= v492)
                v493 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v493 == v492)
                {
                  LODWORD(v497) = 0;
                  *v12 = 1;
                }
                else
                {
                  v728 = v492 + 1;
                  v729 = *(_BYTE *)(v494 + v492);
                  *v10 = v728;
                  v497 |= (unint64_t)(v729 & 0x7F) << v726;
                  if (v729 < 0)
                  {
                    v726 += 7;
                    v492 = v728;
                    v25 = v727++ > 8;
                    if (v25)
                      goto LABEL_871;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v497) = 0;
                }
                break;
              }
LABEL_1090:
              v17[42] = v497;
              break;
            case 1306:
              *v18 |= 0x400000000uLL;
              v500 = *((_QWORD *)this + 1);
              v501 = *((_QWORD *)this + 2);
              v502 = *(_QWORD *)this;
              if (v500 <= 0xFFFFFFFFFFFFFFF5 && v500 + 10 <= v501)
              {
                v503 = 0;
                v504 = 0;
                v505 = 0;
                do
                {
                  v506 = v500 + 1;
                  *v10 = v500 + 1;
                  v507 = *(_BYTE *)(v502 + v500);
                  v505 |= (unint64_t)(v507 & 0x7F) << v503;
                  if ((v507 & 0x80) == 0)
                    goto LABEL_1094;
                  v503 += 7;
                  v500 = v506;
                  v25 = v504++ > 8;
                }
                while (!v25);
LABEL_878:
                LODWORD(v505) = 0;
                goto LABEL_1094;
              }
              v730 = 0;
              v731 = 0;
              v505 = 0;
              if (v501 <= v500)
                v501 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v501 == v500)
                {
                  LODWORD(v505) = 0;
                  *v12 = 1;
                }
                else
                {
                  v732 = v500 + 1;
                  v733 = *(_BYTE *)(v502 + v500);
                  *v10 = v732;
                  v505 |= (unint64_t)(v733 & 0x7F) << v730;
                  if (v733 < 0)
                  {
                    v730 += 7;
                    v500 = v732;
                    v25 = v731++ > 8;
                    if (v25)
                      goto LABEL_878;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v505) = 0;
                }
                break;
              }
LABEL_1094:
              v17[44] = v505;
              break;
            case 1307:
              v18[1] |= 0x100uLL;
              v508 = *((_QWORD *)this + 1);
              if (v508 >= *((_QWORD *)this + 2))
              {
                v511 = 0;
                *v12 = 1;
              }
              else
              {
                v509 = v508 + 1;
                v510 = *(unsigned __int8 *)(*(_QWORD *)this + v508);
                *((_QWORD *)this + 1) = v509;
                v511 = v510 != 0;
              }
              *((_BYTE *)v17 + 319) = v511;
              break;
            case 1308:
              v18[1] |= 0x40000uLL;
              v512 = *((_QWORD *)this + 1);
              if (v512 >= *((_QWORD *)this + 2))
              {
                v515 = 0;
                *v12 = 1;
              }
              else
              {
                v513 = v512 + 1;
                v514 = *(unsigned __int8 *)(*(_QWORD *)this + v512);
                *((_QWORD *)this + 1) = v513;
                v515 = v514 != 0;
              }
              *((_BYTE *)v17 + 329) = v515;
              break;
            case 1309:
              *v18 |= 0x200000000uLL;
              v516 = *((_QWORD *)this + 1);
              v517 = *((_QWORD *)this + 2);
              v518 = *(_QWORD *)this;
              if (v516 <= 0xFFFFFFFFFFFFFFF5 && v516 + 10 <= v517)
              {
                v519 = 0;
                v520 = 0;
                v521 = 0;
                do
                {
                  v522 = v516 + 1;
                  *v10 = v516 + 1;
                  v523 = *(_BYTE *)(v518 + v516);
                  v521 |= (unint64_t)(v523 & 0x7F) << v519;
                  if ((v523 & 0x80) == 0)
                    goto LABEL_1098;
                  v519 += 7;
                  v516 = v522;
                  v25 = v520++ > 8;
                }
                while (!v25);
LABEL_889:
                LODWORD(v521) = 0;
                goto LABEL_1098;
              }
              v734 = 0;
              v735 = 0;
              v521 = 0;
              if (v517 <= v516)
                v517 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v517 == v516)
                {
                  LODWORD(v521) = 0;
                  *v12 = 1;
                }
                else
                {
                  v736 = v516 + 1;
                  v737 = *(_BYTE *)(v518 + v516);
                  *v10 = v736;
                  v521 |= (unint64_t)(v737 & 0x7F) << v734;
                  if (v737 < 0)
                  {
                    v734 += 7;
                    v516 = v736;
                    v25 = v735++ > 8;
                    if (v25)
                      goto LABEL_889;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v521) = 0;
                }
                break;
              }
LABEL_1098:
              v17[43] = v521;
              break;
            case 1310:
              *v18 |= 2uLL;
              v524 = *((_QWORD *)this + 1);
              v525 = *((_QWORD *)this + 2);
              v526 = *(_QWORD *)this;
              if (v524 <= 0xFFFFFFFFFFFFFFF5 && v524 + 10 <= v525)
              {
                v527 = 0;
                v528 = 0;
                v529 = 0;
                do
                {
                  v530 = v524 + 1;
                  *v10 = v524 + 1;
                  v531 = *(_BYTE *)(v526 + v524);
                  v529 |= (unint64_t)(v531 & 0x7F) << v527;
                  if ((v531 & 0x80) == 0)
                    goto LABEL_1102;
                  v527 += 7;
                  v524 = v530;
                  v25 = v528++ > 8;
                }
                while (!v25);
LABEL_896:
                v529 = 0;
                goto LABEL_1102;
              }
              v738 = 0;
              v739 = 0;
              v529 = 0;
              if (v525 <= v524)
                v525 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v525 == v524)
                {
                  v529 = 0;
                  *v12 = 1;
                }
                else
                {
                  v740 = v524 + 1;
                  v741 = *(_BYTE *)(v526 + v524);
                  *v10 = v740;
                  v529 |= (unint64_t)(v741 & 0x7F) << v738;
                  if (v741 < 0)
                  {
                    v738 += 7;
                    v524 = v740;
                    v25 = v739++ > 8;
                    if (v25)
                      goto LABEL_896;
                    continue;
                  }
                  if (*v12)
                    v529 = 0;
                }
                break;
              }
LABEL_1102:
              *((_QWORD *)v17 + 2) = v529;
              break;
            case 1311:
              *v18 |= 0x20uLL;
              v532 = *((_QWORD *)this + 1);
              v533 = *((_QWORD *)this + 2);
              v534 = *(_QWORD *)this;
              if (v532 <= 0xFFFFFFFFFFFFFFF5 && v532 + 10 <= v533)
              {
                v535 = 0;
                v536 = 0;
                v537 = 0;
                do
                {
                  v538 = v532 + 1;
                  *v10 = v532 + 1;
                  v539 = *(_BYTE *)(v534 + v532);
                  v537 |= (unint64_t)(v539 & 0x7F) << v535;
                  if ((v539 & 0x80) == 0)
                    goto LABEL_1106;
                  v535 += 7;
                  v532 = v538;
                  v25 = v536++ > 8;
                }
                while (!v25);
LABEL_903:
                v537 = 0;
                goto LABEL_1106;
              }
              v742 = 0;
              v743 = 0;
              v537 = 0;
              if (v533 <= v532)
                v533 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v533 == v532)
                {
                  v537 = 0;
                  *v12 = 1;
                }
                else
                {
                  v744 = v532 + 1;
                  v745 = *(_BYTE *)(v534 + v532);
                  *v10 = v744;
                  v537 |= (unint64_t)(v745 & 0x7F) << v742;
                  if (v745 < 0)
                  {
                    v742 += 7;
                    v532 = v744;
                    v25 = v743++ > 8;
                    if (v25)
                      goto LABEL_903;
                    continue;
                  }
                  if (*v12)
                    v537 = 0;
                }
                break;
              }
LABEL_1106:
              *((_QWORD *)v17 + 6) = v537;
              break;
            case 1312:
              *v18 |= 4uLL;
              v540 = *((_QWORD *)this + 1);
              v541 = *((_QWORD *)this + 2);
              v542 = *(_QWORD *)this;
              if (v540 <= 0xFFFFFFFFFFFFFFF5 && v540 + 10 <= v541)
              {
                v543 = 0;
                v544 = 0;
                v545 = 0;
                do
                {
                  v546 = v540 + 1;
                  *v10 = v540 + 1;
                  v547 = *(_BYTE *)(v542 + v540);
                  v545 |= (unint64_t)(v547 & 0x7F) << v543;
                  if ((v547 & 0x80) == 0)
                    goto LABEL_1110;
                  v543 += 7;
                  v540 = v546;
                  v25 = v544++ > 8;
                }
                while (!v25);
LABEL_910:
                v545 = 0;
                goto LABEL_1110;
              }
              v746 = 0;
              v747 = 0;
              v545 = 0;
              if (v541 <= v540)
                v541 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v541 == v540)
                {
                  v545 = 0;
                  *v12 = 1;
                }
                else
                {
                  v748 = v540 + 1;
                  v749 = *(_BYTE *)(v542 + v540);
                  *v10 = v748;
                  v545 |= (unint64_t)(v749 & 0x7F) << v746;
                  if (v749 < 0)
                  {
                    v746 += 7;
                    v540 = v748;
                    v25 = v747++ > 8;
                    if (v25)
                      goto LABEL_910;
                    continue;
                  }
                  if (*v12)
                    v545 = 0;
                }
                break;
              }
LABEL_1110:
              *((_QWORD *)v17 + 3) = v545;
              break;
            case 1313:
              *v18 |= 8uLL;
              v548 = *((_QWORD *)this + 1);
              v549 = *((_QWORD *)this + 2);
              v550 = *(_QWORD *)this;
              if (v548 <= 0xFFFFFFFFFFFFFFF5 && v548 + 10 <= v549)
              {
                v551 = 0;
                v552 = 0;
                v553 = 0;
                do
                {
                  v554 = v548 + 1;
                  *v10 = v548 + 1;
                  v555 = *(_BYTE *)(v550 + v548);
                  v553 |= (unint64_t)(v555 & 0x7F) << v551;
                  if ((v555 & 0x80) == 0)
                    goto LABEL_1114;
                  v551 += 7;
                  v548 = v554;
                  v25 = v552++ > 8;
                }
                while (!v25);
LABEL_917:
                v553 = 0;
                goto LABEL_1114;
              }
              v750 = 0;
              v751 = 0;
              v553 = 0;
              if (v549 <= v548)
                v549 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v549 == v548)
                {
                  v553 = 0;
                  *v12 = 1;
                }
                else
                {
                  v752 = v548 + 1;
                  v753 = *(_BYTE *)(v550 + v548);
                  *v10 = v752;
                  v553 |= (unint64_t)(v753 & 0x7F) << v750;
                  if (v753 < 0)
                  {
                    v750 += 7;
                    v548 = v752;
                    v25 = v751++ > 8;
                    if (v25)
                      goto LABEL_917;
                    continue;
                  }
                  if (*v12)
                    v553 = 0;
                }
                break;
              }
LABEL_1114:
              *((_QWORD *)v17 + 4) = v553;
              break;
            case 1314:
              *v18 |= 0x10uLL;
              v556 = *((_QWORD *)this + 1);
              v557 = *((_QWORD *)this + 2);
              v558 = *(_QWORD *)this;
              if (v556 <= 0xFFFFFFFFFFFFFFF5 && v556 + 10 <= v557)
              {
                v559 = 0;
                v560 = 0;
                v561 = 0;
                do
                {
                  v562 = v556 + 1;
                  *v10 = v556 + 1;
                  v563 = *(_BYTE *)(v558 + v556);
                  v561 |= (unint64_t)(v563 & 0x7F) << v559;
                  if ((v563 & 0x80) == 0)
                    goto LABEL_1118;
                  v559 += 7;
                  v556 = v562;
                  v25 = v560++ > 8;
                }
                while (!v25);
LABEL_924:
                v561 = 0;
                goto LABEL_1118;
              }
              v754 = 0;
              v755 = 0;
              v561 = 0;
              if (v557 <= v556)
                v557 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v557 == v556)
                {
                  v561 = 0;
                  *v12 = 1;
                }
                else
                {
                  v756 = v556 + 1;
                  v757 = *(_BYTE *)(v558 + v556);
                  *v10 = v756;
                  v561 |= (unint64_t)(v757 & 0x7F) << v754;
                  if (v757 < 0)
                  {
                    v754 += 7;
                    v556 = v756;
                    v25 = v755++ > 8;
                    if (v25)
                      goto LABEL_924;
                    continue;
                  }
                  if (*v12)
                    v561 = 0;
                }
                break;
              }
LABEL_1118:
              *((_QWORD *)v17 + 5) = v561;
              break;
            case 1315:
              *v18 |= 0x2000000000000uLL;
              v564 = *((_QWORD *)this + 1);
              v565 = *((_QWORD *)this + 2);
              v566 = *(_QWORD *)this;
              if (v564 <= 0xFFFFFFFFFFFFFFF5 && v564 + 10 <= v565)
              {
                v567 = 0;
                v568 = 0;
                v569 = 0;
                do
                {
                  v570 = v564 + 1;
                  *v10 = v564 + 1;
                  v571 = *(_BYTE *)(v566 + v564);
                  v569 |= (unint64_t)(v571 & 0x7F) << v567;
                  if ((v571 & 0x80) == 0)
                    goto LABEL_1122;
                  v567 += 7;
                  v564 = v570;
                  v25 = v568++ > 8;
                }
                while (!v25);
LABEL_931:
                LODWORD(v569) = 0;
                goto LABEL_1122;
              }
              v758 = 0;
              v759 = 0;
              v569 = 0;
              if (v565 <= v564)
                v565 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v565 == v564)
                {
                  LODWORD(v569) = 0;
                  *v12 = 1;
                }
                else
                {
                  v760 = v564 + 1;
                  v761 = *(_BYTE *)(v566 + v564);
                  *v10 = v760;
                  v569 |= (unint64_t)(v761 & 0x7F) << v758;
                  if (v761 < 0)
                  {
                    v758 += 7;
                    v564 = v760;
                    v25 = v759++ > 8;
                    if (v25)
                      goto LABEL_931;
                    continue;
                  }
                  if (*v12)
                    LODWORD(v569) = 0;
                }
                break;
              }
LABEL_1122:
              v17[59] = v569;
              break;
            case 1316:
              *v18 |= 0x2000uLL;
              v572 = *v10;
              if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v572 + 4 > *((_QWORD *)this + 2))
                goto LABEL_513;
              v17[23] = *(_DWORD *)(*(_QWORD *)this + v572);
              goto LABEL_942;
            default:
              if ((_DWORD)v32 == 1201)
              {
                *v18 |= 0x4000000000uLL;
                v574 = *((_QWORD *)this + 1);
                v575 = *((_QWORD *)this + 2);
                v576 = *(_QWORD *)this;
                if (v574 > 0xFFFFFFFFFFFFFFF5 || v574 + 10 > v575)
                {
                  v762 = 0;
                  v763 = 0;
                  v579 = 0;
                  if (v575 <= v574)
                    v575 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v575 == v574)
                    {
                      LODWORD(v579) = 0;
                      *v12 = 1;
                      goto LABEL_1126;
                    }
                    v764 = v574 + 1;
                    v765 = *(_BYTE *)(v576 + v574);
                    *v10 = v764;
                    v579 |= (unint64_t)(v765 & 0x7F) << v762;
                    if ((v765 & 0x80) == 0)
                      break;
                    v762 += 7;
                    v574 = v764;
                    v25 = v763++ > 8;
                    if (v25)
                    {
LABEL_938:
                      LODWORD(v579) = 0;
                      goto LABEL_1126;
                    }
                  }
                  if (*v12)
                    LODWORD(v579) = 0;
                }
                else
                {
                  v577 = 0;
                  v578 = 0;
                  v579 = 0;
                  while (1)
                  {
                    v580 = v574 + 1;
                    *v10 = v574 + 1;
                    v581 = *(_BYTE *)(v576 + v574);
                    v579 |= (unint64_t)(v581 & 0x7F) << v577;
                    if ((v581 & 0x80) == 0)
                      break;
                    v577 += 7;
                    v574 = v580;
                    v25 = v578++ > 8;
                    if (v25)
                      goto LABEL_938;
                  }
                }
LABEL_1126:
                v17[48] = v579;
              }
              else
              {
                if ((_DWORD)v32 != 1202)
                  goto LABEL_141;
                *v18 |= 0x8000000000uLL;
                v85 = *((_QWORD *)this + 1);
                v86 = *((_QWORD *)this + 2);
                v87 = *(_QWORD *)this;
                if (v85 > 0xFFFFFFFFFFFFFFF5 || v85 + 10 > v86)
                {
                  v710 = 0;
                  v711 = 0;
                  v90 = 0;
                  if (v86 <= v85)
                    v86 = *((_QWORD *)this + 1);
                  v12 = v766;
                  v17 = a1;
                  while (1)
                  {
                    if (v86 == v85)
                    {
                      LODWORD(v90) = 0;
                      *v766 = 1;
                      goto LABEL_1074;
                    }
                    v712 = v85 + 1;
                    v713 = *(_BYTE *)(v87 + v85);
                    *v10 = v712;
                    v90 |= (unint64_t)(v713 & 0x7F) << v710;
                    if ((v713 & 0x80) == 0)
                      break;
                    v710 += 7;
                    v85 = v712;
                    v25 = v711++ > 8;
                    if (v25)
                    {
LABEL_843:
                      LODWORD(v90) = 0;
                      goto LABEL_1074;
                    }
                  }
                  if (*v766)
                    LODWORD(v90) = 0;
                }
                else
                {
                  v88 = 0;
                  v89 = 0;
                  v90 = 0;
                  v12 = v766;
                  v17 = a1;
                  while (1)
                  {
                    v91 = v85 + 1;
                    *v10 = v85 + 1;
                    v92 = *(_BYTE *)(v87 + v85);
                    v90 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v85 = v91;
                    v25 = v89++ > 8;
                    if (v25)
                      goto LABEL_843;
                  }
                }
LABEL_1074:
                v17[49] = v90;
              }
              break;
          }
        }
      }
      else
      {
        switch((int)v32)
        {
          case 301:
            v18[1] |= 0x2000uLL;
            v43 = *((_QWORD *)this + 1);
            if (v43 >= *((_QWORD *)this + 2))
            {
              v46 = 0;
              *v12 = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
              *((_QWORD *)this + 1) = v44;
              v46 = v45 != 0;
            }
            *((_BYTE *)v17 + 324) = v46;
            goto LABEL_514;
          case 302:
            v18[1] |= 0x4000000uLL;
            v262 = *((_QWORD *)this + 1);
            if (v262 >= *((_QWORD *)this + 2))
            {
              v265 = 0;
              *v12 = 1;
            }
            else
            {
              v263 = v262 + 1;
              v264 = *(unsigned __int8 *)(*(_QWORD *)this + v262);
              *((_QWORD *)this + 1) = v263;
              v265 = v264 != 0;
            }
            *((_BYTE *)v17 + 337) = v265;
            goto LABEL_514;
          case 303:
            v18[1] |= 0x80000uLL;
            v266 = *((_QWORD *)this + 1);
            if (v266 >= *((_QWORD *)this + 2))
            {
              v269 = 0;
              *v12 = 1;
            }
            else
            {
              v267 = v266 + 1;
              v268 = *(unsigned __int8 *)(*(_QWORD *)this + v266);
              *((_QWORD *)this + 1) = v267;
              v269 = v268 != 0;
            }
            *((_BYTE *)v17 + 330) = v269;
            goto LABEL_514;
          case 304:
            v18[1] |= 0x2000000000uLL;
            v270 = *((_QWORD *)this + 1);
            if (v270 >= *((_QWORD *)this + 2))
            {
              v273 = 0;
              *v12 = 1;
            }
            else
            {
              v271 = v270 + 1;
              v272 = *(unsigned __int8 *)(*(_QWORD *)this + v270);
              *((_QWORD *)this + 1) = v271;
              v273 = v272 != 0;
            }
            *((_BYTE *)v17 + 348) = v273;
            goto LABEL_514;
          case 305:
            v18[1] |= 0x200000000uLL;
            v274 = *((_QWORD *)this + 1);
            if (v274 >= *((_QWORD *)this + 2))
            {
              v277 = 0;
              *v12 = 1;
            }
            else
            {
              v275 = v274 + 1;
              v276 = *(unsigned __int8 *)(*(_QWORD *)this + v274);
              *((_QWORD *)this + 1) = v275;
              v277 = v276 != 0;
            }
            *((_BYTE *)v17 + 344) = v277;
            goto LABEL_514;
          case 306:
            v18[1] |= 0x4000000000uLL;
            v278 = *((_QWORD *)this + 1);
            if (v278 >= *((_QWORD *)this + 2))
            {
              v281 = 0;
              *v12 = 1;
            }
            else
            {
              v279 = v278 + 1;
              v280 = *(unsigned __int8 *)(*(_QWORD *)this + v278);
              *((_QWORD *)this + 1) = v279;
              v281 = v280 != 0;
            }
            *((_BYTE *)v17 + 349) = v281;
            goto LABEL_514;
          case 307:
            v18[1] |= 0x400000000uLL;
            v282 = *((_QWORD *)this + 1);
            if (v282 >= *((_QWORD *)this + 2))
            {
              v285 = 0;
              *v12 = 1;
            }
            else
            {
              v283 = v282 + 1;
              v284 = *(unsigned __int8 *)(*(_QWORD *)this + v282);
              *((_QWORD *)this + 1) = v283;
              v285 = v284 != 0;
            }
            *((_BYTE *)v17 + 345) = v285;
            goto LABEL_514;
          case 308:
            v18[1] |= 0x40000000uLL;
            v286 = *((_QWORD *)this + 1);
            if (v286 >= *((_QWORD *)this + 2))
            {
              v289 = 0;
              *v12 = 1;
            }
            else
            {
              v287 = v286 + 1;
              v288 = *(unsigned __int8 *)(*(_QWORD *)this + v286);
              *((_QWORD *)this + 1) = v287;
              v289 = v288 != 0;
            }
            *((_BYTE *)v17 + 341) = v289;
            goto LABEL_514;
          case 309:
            v18[1] |= 0x800uLL;
            v290 = *((_QWORD *)this + 1);
            if (v290 >= *((_QWORD *)this + 2))
            {
              v293 = 0;
              *v12 = 1;
            }
            else
            {
              v291 = v290 + 1;
              v292 = *(unsigned __int8 *)(*(_QWORD *)this + v290);
              *((_QWORD *)this + 1) = v291;
              v293 = v292 != 0;
            }
            *((_BYTE *)v17 + 322) = v293;
            goto LABEL_514;
          case 310:
            v18[1] |= 0x100000uLL;
            v294 = *((_QWORD *)this + 1);
            if (v294 >= *((_QWORD *)this + 2))
            {
              v297 = 0;
              *v12 = 1;
            }
            else
            {
              v295 = v294 + 1;
              v296 = *(unsigned __int8 *)(*(_QWORD *)this + v294);
              *((_QWORD *)this + 1) = v295;
              v297 = v296 != 0;
            }
            *((_BYTE *)v17 + 331) = v297;
            goto LABEL_514;
          case 311:
            v18[1] |= 0x8000000000uLL;
            v298 = *((_QWORD *)this + 1);
            if (v298 >= *((_QWORD *)this + 2))
            {
              v301 = 0;
              *v12 = 1;
            }
            else
            {
              v299 = v298 + 1;
              v300 = *(unsigned __int8 *)(*(_QWORD *)this + v298);
              *((_QWORD *)this + 1) = v299;
              v301 = v300 != 0;
            }
            *((_BYTE *)v17 + 350) = v301;
            goto LABEL_514;
          case 312:
            v18[1] |= 0x800000000uLL;
            v302 = *((_QWORD *)this + 1);
            if (v302 >= *((_QWORD *)this + 2))
            {
              v305 = 0;
              *v12 = 1;
            }
            else
            {
              v303 = v302 + 1;
              v304 = *(unsigned __int8 *)(*(_QWORD *)this + v302);
              *((_QWORD *)this + 1) = v303;
              v305 = v304 != 0;
            }
            *((_BYTE *)v17 + 346) = v305;
            goto LABEL_514;
          case 313:
            *v18 |= 0x20000uLL;
            v306 = *((_QWORD *)this + 1);
            v307 = *((_QWORD *)this + 2);
            v308 = *(_QWORD *)this;
            if (v306 <= 0xFFFFFFFFFFFFFFF5 && v306 + 10 <= v307)
            {
              v309 = 0;
              v310 = 0;
              v311 = 0;
              do
              {
                v312 = v306 + 1;
                *v10 = v306 + 1;
                v313 = *(_BYTE *)(v308 + v306);
                v311 |= (unint64_t)(v313 & 0x7F) << v309;
                if ((v313 & 0x80) == 0)
                  goto LABEL_1043;
                v309 += 7;
                v306 = v312;
                v25 = v310++ > 8;
              }
              while (!v25);
LABEL_727:
              LODWORD(v311) = 0;
              goto LABEL_1043;
            }
            v670 = 0;
            v671 = 0;
            v311 = 0;
            if (v307 <= v306)
              v307 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v307 == v306)
              {
                LODWORD(v311) = 0;
                *v12 = 1;
              }
              else
              {
                v672 = v306 + 1;
                v673 = *(_BYTE *)(v308 + v306);
                *v10 = v672;
                v311 |= (unint64_t)(v673 & 0x7F) << v670;
                if (v673 < 0)
                {
                  v670 += 7;
                  v306 = v672;
                  v25 = v671++ > 8;
                  if (v25)
                    goto LABEL_727;
                  continue;
                }
                if (*v12)
                  LODWORD(v311) = 0;
              }
              break;
            }
LABEL_1043:
            v17[27] = v311;
            goto LABEL_514;
          case 314:
            v18[1] |= 0x400000uLL;
            v314 = *((_QWORD *)this + 1);
            if (v314 >= *((_QWORD *)this + 2))
            {
              v317 = 0;
              *v12 = 1;
            }
            else
            {
              v315 = v314 + 1;
              v316 = *(unsigned __int8 *)(*(_QWORD *)this + v314);
              *((_QWORD *)this + 1) = v315;
              v317 = v316 != 0;
            }
            *((_BYTE *)v17 + 333) = v317;
            goto LABEL_514;
          case 315:
            v18[1] |= 0x800000uLL;
            v318 = *((_QWORD *)this + 1);
            if (v318 >= *((_QWORD *)this + 2))
            {
              v321 = 0;
              *v12 = 1;
            }
            else
            {
              v319 = v318 + 1;
              v320 = *(unsigned __int8 *)(*(_QWORD *)this + v318);
              *((_QWORD *)this + 1) = v319;
              v321 = v320 != 0;
            }
            *((_BYTE *)v17 + 334) = v321;
            goto LABEL_514;
          case 316:
            v18[1] |= 0x20uLL;
            v322 = *((_QWORD *)this + 1);
            if (v322 >= *((_QWORD *)this + 2))
            {
              v325 = 0;
              *v12 = 1;
            }
            else
            {
              v323 = v322 + 1;
              v324 = *(unsigned __int8 *)(*(_QWORD *)this + v322);
              *((_QWORD *)this + 1) = v323;
              v325 = v324 != 0;
            }
            *((_BYTE *)v17 + 316) = v325;
            goto LABEL_514;
          case 317:
            *v18 |= 0x40000uLL;
            v326 = *((_QWORD *)this + 1);
            v327 = *((_QWORD *)this + 2);
            v328 = *(_QWORD *)this;
            if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
            {
              v329 = 0;
              v330 = 0;
              v331 = 0;
              do
              {
                v332 = v326 + 1;
                *v10 = v326 + 1;
                v333 = *(_BYTE *)(v328 + v326);
                v331 |= (unint64_t)(v333 & 0x7F) << v329;
                if ((v333 & 0x80) == 0)
                  goto LABEL_1046;
                v329 += 7;
                v326 = v332;
                v25 = v330++ > 8;
              }
              while (!v25);
LABEL_740:
              LODWORD(v331) = 0;
              goto LABEL_1046;
            }
            v674 = 0;
            v675 = 0;
            v331 = 0;
            if (v327 <= v326)
              v327 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v327 == v326)
              {
                LODWORD(v331) = 0;
                *v12 = 1;
              }
              else
              {
                v676 = v326 + 1;
                v677 = *(_BYTE *)(v328 + v326);
                *v10 = v676;
                v331 |= (unint64_t)(v677 & 0x7F) << v674;
                if (v677 < 0)
                {
                  v674 += 7;
                  v326 = v676;
                  v25 = v675++ > 8;
                  if (v25)
                    goto LABEL_740;
                  continue;
                }
                if (*v12)
                  LODWORD(v331) = 0;
              }
              break;
            }
LABEL_1046:
            v17[28] = v331;
            goto LABEL_514;
          case 318:
            v18[1] |= 0x40000000000uLL;
            v334 = *((_QWORD *)this + 1);
            if (v334 >= *((_QWORD *)this + 2))
            {
              v337 = 0;
              *v12 = 1;
            }
            else
            {
              v335 = v334 + 1;
              v336 = *(unsigned __int8 *)(*(_QWORD *)this + v334);
              *((_QWORD *)this + 1) = v335;
              v337 = v336 != 0;
            }
            *((_BYTE *)v17 + 353) = v337;
            goto LABEL_514;
          case 319:
            v18[1] |= 0x10000000000uLL;
            v338 = *((_QWORD *)this + 1);
            if (v338 >= *((_QWORD *)this + 2))
            {
              v341 = 0;
              *v12 = 1;
            }
            else
            {
              v339 = v338 + 1;
              v340 = *(unsigned __int8 *)(*(_QWORD *)this + v338);
              *((_QWORD *)this + 1) = v339;
              v341 = v340 != 0;
            }
            *((_BYTE *)v17 + 351) = v341;
            goto LABEL_514;
          case 320:
            v18[1] |= 0x20000000000uLL;
            v342 = *((_QWORD *)this + 1);
            if (v342 >= *((_QWORD *)this + 2))
            {
              v345 = 0;
              *v12 = 1;
            }
            else
            {
              v343 = v342 + 1;
              v344 = *(unsigned __int8 *)(*(_QWORD *)this + v342);
              *((_QWORD *)this + 1) = v343;
              v345 = v344 != 0;
            }
            *((_BYTE *)v17 + 352) = v345;
            goto LABEL_514;
          case 321:
            v18[1] |= 0x100000000uLL;
            v346 = *((_QWORD *)this + 1);
            if (v346 >= *((_QWORD *)this + 2))
            {
              v349 = 0;
              *v12 = 1;
            }
            else
            {
              v347 = v346 + 1;
              v348 = *(unsigned __int8 *)(*(_QWORD *)this + v346);
              *((_QWORD *)this + 1) = v347;
              v349 = v348 != 0;
            }
            *((_BYTE *)v17 + 343) = v349;
            goto LABEL_514;
          case 322:
            v18[1] |= 0x80000000uLL;
            v350 = *((_QWORD *)this + 1);
            if (v350 >= *((_QWORD *)this + 2))
            {
              v353 = 0;
              *v12 = 1;
            }
            else
            {
              v351 = v350 + 1;
              v352 = *(unsigned __int8 *)(*(_QWORD *)this + v350);
              *((_QWORD *)this + 1) = v351;
              v353 = v352 != 0;
            }
            *((_BYTE *)v17 + 342) = v353;
            goto LABEL_514;
          default:
            switch((int)v32)
            {
              case 1:
                *v18 |= 0x800000uLL;
                v33 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[33] = *(_DWORD *)(*(_QWORD *)this + v33);
                goto LABEL_942;
              case 2:
                *v18 |= 0x400000uLL;
                v132 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[32] = *(_DWORD *)(*(_QWORD *)this + v132);
                goto LABEL_942;
              case 3:
                *v18 |= 0x1000000uLL;
                v133 = *((_QWORD *)this + 1);
                v134 = *((_QWORD *)this + 2);
                v135 = *(_QWORD *)this;
                if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
                {
                  v136 = 0;
                  v137 = 0;
                  v138 = 0;
                  do
                  {
                    v139 = v133 + 1;
                    *v10 = v133 + 1;
                    v140 = *(_BYTE *)(v135 + v133);
                    v138 |= (unint64_t)(v140 & 0x7F) << v136;
                    if ((v140 & 0x80) == 0)
                      goto LABEL_1001;
                    v136 += 7;
                    v133 = v139;
                    v25 = v137++ > 8;
                  }
                  while (!v25);
LABEL_603:
                  LODWORD(v138) = 0;
                  goto LABEL_1001;
                }
                v614 = 0;
                v615 = 0;
                v138 = 0;
                if (v134 <= v133)
                  v134 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v134 == v133)
                  {
                    LODWORD(v138) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v616 = v133 + 1;
                    v617 = *(_BYTE *)(v135 + v133);
                    *v10 = v616;
                    v138 |= (unint64_t)(v617 & 0x7F) << v614;
                    if (v617 < 0)
                    {
                      v614 += 7;
                      v133 = v616;
                      v25 = v615++ > 8;
                      if (v25)
                        goto LABEL_603;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v138) = 0;
                  }
                  break;
                }
LABEL_1001:
                v17[34] = v138;
                goto LABEL_514;
              case 4:
                *v18 |= 0x10000000000000uLL;
                v141 = *((_QWORD *)this + 1);
                v142 = *((_QWORD *)this + 2);
                v143 = *(_QWORD *)this;
                if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
                {
                  v144 = 0;
                  v145 = 0;
                  v146 = 0;
                  do
                  {
                    v147 = v141 + 1;
                    *v10 = v141 + 1;
                    v148 = *(_BYTE *)(v143 + v141);
                    v146 |= (unint64_t)(v148 & 0x7F) << v144;
                    if ((v148 & 0x80) == 0)
                      goto LABEL_1004;
                    v144 += 7;
                    v141 = v147;
                    v25 = v145++ > 8;
                  }
                  while (!v25);
LABEL_610:
                  LODWORD(v146) = 0;
                  goto LABEL_1004;
                }
                v618 = 0;
                v619 = 0;
                v146 = 0;
                if (v142 <= v141)
                  v142 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v142 == v141)
                  {
                    LODWORD(v146) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v620 = v141 + 1;
                    v621 = *(_BYTE *)(v143 + v141);
                    *v10 = v620;
                    v146 |= (unint64_t)(v621 & 0x7F) << v618;
                    if (v621 < 0)
                    {
                      v618 += 7;
                      v141 = v620;
                      v25 = v619++ > 8;
                      if (v25)
                        goto LABEL_610;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v146) = 0;
                  }
                  break;
                }
LABEL_1004:
                v17[62] = v146;
                goto LABEL_514;
              case 5:
                v18[1] |= 1uLL;
                v149 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[74] = *(_DWORD *)(*(_QWORD *)this + v149);
                goto LABEL_942;
              case 6:
                *v18 |= 0x400000000000000uLL;
                v150 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v150 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[68] = *(_DWORD *)(*(_QWORD *)this + v150);
                goto LABEL_942;
              case 7:
                *v18 |= 0x400000000000uLL;
                v151 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v151 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[56] = *(_DWORD *)(*(_QWORD *)this + v151);
                goto LABEL_942;
              case 8:
                *v18 |= 0x200000000000uLL;
                v152 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v152 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[55] = *(_DWORD *)(*(_QWORD *)this + v152);
                goto LABEL_942;
              case 9:
                *v18 |= 0x200uLL;
                v153 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v153 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[19] = *(_DWORD *)(*(_QWORD *)this + v153);
                goto LABEL_942;
              case 10:
                *v18 |= 0x80000000000000uLL;
                v154 = *((_QWORD *)this + 1);
                v155 = *((_QWORD *)this + 2);
                v156 = *(_QWORD *)this;
                if (v154 <= 0xFFFFFFFFFFFFFFF5 && v154 + 10 <= v155)
                {
                  v157 = 0;
                  v158 = 0;
                  v159 = 0;
                  do
                  {
                    v160 = v154 + 1;
                    *v10 = v154 + 1;
                    v161 = *(_BYTE *)(v156 + v154);
                    v159 |= (unint64_t)(v161 & 0x7F) << v157;
                    if ((v161 & 0x80) == 0)
                      goto LABEL_1007;
                    v157 += 7;
                    v154 = v160;
                    v25 = v158++ > 8;
                  }
                  while (!v25);
LABEL_617:
                  LODWORD(v159) = 0;
                  goto LABEL_1007;
                }
                v622 = 0;
                v623 = 0;
                v159 = 0;
                if (v155 <= v154)
                  v155 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v155 == v154)
                  {
                    LODWORD(v159) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v624 = v154 + 1;
                    v625 = *(_BYTE *)(v156 + v154);
                    *v10 = v624;
                    v159 |= (unint64_t)(v625 & 0x7F) << v622;
                    if (v625 < 0)
                    {
                      v622 += 7;
                      v154 = v624;
                      v25 = v623++ > 8;
                      if (v25)
                        goto LABEL_617;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v159) = 0;
                  }
                  break;
                }
LABEL_1007:
                v17[65] = v159;
                goto LABEL_514;
              case 11:
                *v18 |= 0x2000000uLL;
                v162 = *((_QWORD *)this + 1);
                v163 = *((_QWORD *)this + 2);
                v164 = *(_QWORD *)this;
                if (v162 <= 0xFFFFFFFFFFFFFFF5 && v162 + 10 <= v163)
                {
                  v165 = 0;
                  v166 = 0;
                  v167 = 0;
                  do
                  {
                    v168 = v162 + 1;
                    *v10 = v162 + 1;
                    v169 = *(_BYTE *)(v164 + v162);
                    v167 |= (unint64_t)(v169 & 0x7F) << v165;
                    if ((v169 & 0x80) == 0)
                      goto LABEL_1010;
                    v165 += 7;
                    v162 = v168;
                    v25 = v166++ > 8;
                  }
                  while (!v25);
LABEL_624:
                  LODWORD(v167) = 0;
                  goto LABEL_1010;
                }
                v626 = 0;
                v627 = 0;
                v167 = 0;
                if (v163 <= v162)
                  v163 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v163 == v162)
                  {
                    LODWORD(v167) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v628 = v162 + 1;
                    v629 = *(_BYTE *)(v164 + v162);
                    *v10 = v628;
                    v167 |= (unint64_t)(v629 & 0x7F) << v626;
                    if (v629 < 0)
                    {
                      v626 += 7;
                      v162 = v628;
                      v25 = v627++ > 8;
                      if (v25)
                        goto LABEL_624;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v167) = 0;
                  }
                  break;
                }
LABEL_1010:
                v17[35] = v167;
                goto LABEL_514;
              case 12:
                *v18 |= 0x10000uLL;
                v170 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v170 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[26] = *(_DWORD *)(*(_QWORD *)this + v170);
                goto LABEL_942;
              case 13:
                v18[1] |= 8uLL;
                v171 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v171 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[77] = *(_DWORD *)(*(_QWORD *)this + v171);
                goto LABEL_942;
              case 14:
                v18[1] |= 0x10uLL;
                v172 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v172 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[78] = *(_DWORD *)(*(_QWORD *)this + v172);
                goto LABEL_942;
              case 15:
                *v18 |= 0x80000000000uLL;
                v173 = *((_QWORD *)this + 1);
                v174 = *((_QWORD *)this + 2);
                v175 = *(_QWORD *)this;
                if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
                {
                  v176 = 0;
                  v177 = 0;
                  v178 = 0;
                  do
                  {
                    v179 = v173 + 1;
                    *v10 = v173 + 1;
                    v180 = *(_BYTE *)(v175 + v173);
                    v178 |= (unint64_t)(v180 & 0x7F) << v176;
                    if ((v180 & 0x80) == 0)
                      goto LABEL_1013;
                    v176 += 7;
                    v173 = v179;
                    v25 = v177++ > 8;
                  }
                  while (!v25);
LABEL_631:
                  LODWORD(v178) = 0;
                  goto LABEL_1013;
                }
                v630 = 0;
                v631 = 0;
                v178 = 0;
                if (v174 <= v173)
                  v174 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v174 == v173)
                  {
                    LODWORD(v178) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v632 = v173 + 1;
                    v633 = *(_BYTE *)(v175 + v173);
                    *v10 = v632;
                    v178 |= (unint64_t)(v633 & 0x7F) << v630;
                    if (v633 < 0)
                    {
                      v630 += 7;
                      v173 = v632;
                      v25 = v631++ > 8;
                      if (v25)
                        goto LABEL_631;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v178) = 0;
                  }
                  break;
                }
LABEL_1013:
                v17[53] = v178;
                goto LABEL_514;
              case 16:
                *v18 |= 0x20000000000uLL;
                v181 = *((_QWORD *)this + 1);
                v182 = *((_QWORD *)this + 2);
                v183 = *(_QWORD *)this;
                if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
                {
                  v184 = 0;
                  v185 = 0;
                  v186 = 0;
                  do
                  {
                    v187 = v181 + 1;
                    *v10 = v181 + 1;
                    v188 = *(_BYTE *)(v183 + v181);
                    v186 |= (unint64_t)(v188 & 0x7F) << v184;
                    if ((v188 & 0x80) == 0)
                      goto LABEL_1016;
                    v184 += 7;
                    v181 = v187;
                    v25 = v185++ > 8;
                  }
                  while (!v25);
LABEL_638:
                  LODWORD(v186) = 0;
                  goto LABEL_1016;
                }
                v634 = 0;
                v635 = 0;
                v186 = 0;
                if (v182 <= v181)
                  v182 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v182 == v181)
                  {
                    LODWORD(v186) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v636 = v181 + 1;
                    v637 = *(_BYTE *)(v183 + v181);
                    *v10 = v636;
                    v186 |= (unint64_t)(v637 & 0x7F) << v634;
                    if (v637 < 0)
                    {
                      v634 += 7;
                      v181 = v636;
                      v25 = v635++ > 8;
                      if (v25)
                        goto LABEL_638;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v186) = 0;
                  }
                  break;
                }
LABEL_1016:
                v17[51] = v186;
                goto LABEL_514;
              case 17:
                *v18 |= 0x4000000000000uLL;
                v189 = *v10;
                if (*v10 > 0xFFFFFFFFFFFFFFFBLL || v189 + 4 > *((_QWORD *)this + 2))
                  goto LABEL_513;
                v17[60] = *(_DWORD *)(*(_QWORD *)this + v189);
                goto LABEL_942;
              case 18:
                *v18 |= 0x1000000000000000uLL;
                v190 = *((_QWORD *)this + 1);
                v191 = *((_QWORD *)this + 2);
                v192 = *(_QWORD *)this;
                if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
                {
                  v193 = 0;
                  v194 = 0;
                  v195 = 0;
                  do
                  {
                    v196 = v190 + 1;
                    *v10 = v190 + 1;
                    v197 = *(_BYTE *)(v192 + v190);
                    v195 |= (unint64_t)(v197 & 0x7F) << v193;
                    if ((v197 & 0x80) == 0)
                      goto LABEL_1019;
                    v193 += 7;
                    v190 = v196;
                    v25 = v194++ > 8;
                  }
                  while (!v25);
LABEL_645:
                  LODWORD(v195) = 0;
                  goto LABEL_1019;
                }
                v638 = 0;
                v639 = 0;
                v195 = 0;
                if (v191 <= v190)
                  v191 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v191 == v190)
                  {
                    LODWORD(v195) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v640 = v190 + 1;
                    v641 = *(_BYTE *)(v192 + v190);
                    *v10 = v640;
                    v195 |= (unint64_t)(v641 & 0x7F) << v638;
                    if (v641 < 0)
                    {
                      v638 += 7;
                      v190 = v640;
                      v25 = v639++ > 8;
                      if (v25)
                        goto LABEL_645;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v195) = 0;
                  }
                  break;
                }
LABEL_1019:
                v17[70] = v195;
                goto LABEL_514;
              case 19:
                v18[1] |= 2uLL;
                v198 = *((_QWORD *)this + 1);
                v199 = *((_QWORD *)this + 2);
                v200 = *(_QWORD *)this;
                if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
                {
                  v201 = 0;
                  v202 = 0;
                  v203 = 0;
                  do
                  {
                    v204 = v198 + 1;
                    *v10 = v198 + 1;
                    v205 = *(_BYTE *)(v200 + v198);
                    v203 |= (unint64_t)(v205 & 0x7F) << v201;
                    if ((v205 & 0x80) == 0)
                      goto LABEL_1022;
                    v201 += 7;
                    v198 = v204;
                    v25 = v202++ > 8;
                  }
                  while (!v25);
LABEL_652:
                  LODWORD(v203) = 0;
                  goto LABEL_1022;
                }
                v642 = 0;
                v643 = 0;
                v203 = 0;
                if (v199 <= v198)
                  v199 = *((_QWORD *)this + 1);
                while (2)
                {
                  if (v199 == v198)
                  {
                    LODWORD(v203) = 0;
                    *v12 = 1;
                  }
                  else
                  {
                    v644 = v198 + 1;
                    v645 = *(_BYTE *)(v200 + v198);
                    *v10 = v644;
                    v203 |= (unint64_t)(v645 & 0x7F) << v642;
                    if (v645 < 0)
                    {
                      v642 += 7;
                      v198 = v644;
                      v25 = v643++ > 8;
                      if (v25)
                        goto LABEL_652;
                      continue;
                    }
                    if (*v12)
                      LODWORD(v203) = 0;
                  }
                  break;
                }
LABEL_1022:
                v17[75] = v203;
                goto LABEL_514;
              default:
                switch((int)v32)
                {
                  case 'e':
                    *v18 |= 0x80uLL;
                    v47 = *((_QWORD *)this + 1);
                    v48 = *((_QWORD *)this + 2);
                    v49 = *(_QWORD *)this;
                    if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
                    {
                      v50 = 0;
                      v51 = 0;
                      v52 = 0;
                      v12 = v766;
                      v17 = a1;
                      do
                      {
                        v53 = v47 + 1;
                        *v10 = v47 + 1;
                        v54 = *(_BYTE *)(v49 + v47);
                        v52 |= (unint64_t)(v54 & 0x7F) << v50;
                        if ((v54 & 0x80) == 0)
                          goto LABEL_995;
                        v50 += 7;
                        v47 = v53;
                        v25 = v51++ > 8;
                      }
                      while (!v25);
LABEL_586:
                      v52 = 0;
                      goto LABEL_995;
                    }
                    v606 = 0;
                    v607 = 0;
                    v52 = 0;
                    if (v48 <= v47)
                      v48 = *((_QWORD *)this + 1);
                    v12 = v766;
                    v17 = a1;
                    while (2)
                    {
                      if (v48 == v47)
                      {
                        v52 = 0;
                        *v766 = 1;
                      }
                      else
                      {
                        v608 = v47 + 1;
                        v609 = *(_BYTE *)(v49 + v47);
                        *v10 = v608;
                        v52 |= (unint64_t)(v609 & 0x7F) << v606;
                        if (v609 < 0)
                        {
                          v606 += 7;
                          v47 = v608;
                          v25 = v607++ > 8;
                          if (v25)
                            goto LABEL_586;
                          continue;
                        }
                        if (*v766)
                          v52 = 0;
                      }
                      break;
                    }
LABEL_995:
                    *((_QWORD *)v17 + 8) = v52;
                    goto LABEL_514;
                  case 'f':
                    *v18 |= 1uLL;
                    v354 = *((_QWORD *)this + 1);
                    v355 = *((_QWORD *)this + 2);
                    v356 = *(_QWORD *)this;
                    if (v354 <= 0xFFFFFFFFFFFFFFF5 && v354 + 10 <= v355)
                    {
                      v357 = 0;
                      v358 = 0;
                      v359 = 0;
                      v12 = v766;
                      v17 = a1;
                      do
                      {
                        v360 = v354 + 1;
                        *v10 = v354 + 1;
                        v361 = *(_BYTE *)(v356 + v354);
                        v359 |= (unint64_t)(v361 & 0x7F) << v357;
                        if ((v361 & 0x80) == 0)
                          goto LABEL_1049;
                        v357 += 7;
                        v354 = v360;
                        v25 = v358++ > 8;
                      }
                      while (!v25);
LABEL_758:
                      v359 = 0;
                      goto LABEL_1049;
                    }
                    v678 = 0;
                    v679 = 0;
                    v359 = 0;
                    if (v355 <= v354)
                      v355 = *((_QWORD *)this + 1);
                    v12 = v766;
                    v17 = a1;
                    break;
                  case 'g':
                    v18[1] |= 0x40uLL;
                    v362 = *((_QWORD *)this + 1);
                    if (v362 >= *((_QWORD *)this + 2))
                    {
                      v365 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v363 = v362 + 1;
                      v364 = *(unsigned __int8 *)(*(_QWORD *)this + v362);
                      *((_QWORD *)this + 1) = v363;
                      v365 = v364 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 317) = v365;
                    goto LABEL_514;
                  case 'h':
                    v18[1] |= 0x80uLL;
                    v366 = *((_QWORD *)this + 1);
                    if (v366 >= *((_QWORD *)this + 2))
                    {
                      v369 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v367 = v366 + 1;
                      v368 = *(unsigned __int8 *)(*(_QWORD *)this + v366);
                      *((_QWORD *)this + 1) = v367;
                      v369 = v368 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 318) = v369;
                    goto LABEL_514;
                  case 'i':
                    v18[1] |= 0x8000uLL;
                    v370 = *((_QWORD *)this + 1);
                    if (v370 >= *((_QWORD *)this + 2))
                    {
                      v373 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v371 = v370 + 1;
                      v372 = *(unsigned __int8 *)(*(_QWORD *)this + v370);
                      *((_QWORD *)this + 1) = v371;
                      v373 = v372 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 326) = v373;
                    goto LABEL_514;
                  case 'j':
                    v18[1] |= 0x10000uLL;
                    v374 = *((_QWORD *)this + 1);
                    if (v374 >= *((_QWORD *)this + 2))
                    {
                      v377 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v375 = v374 + 1;
                      v376 = *(unsigned __int8 *)(*(_QWORD *)this + v374);
                      *((_QWORD *)this + 1) = v375;
                      v377 = v376 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 327) = v377;
                    goto LABEL_514;
                  case 'k':
                    v18[1] |= 0x8000000uLL;
                    v378 = *((_QWORD *)this + 1);
                    if (v378 >= *((_QWORD *)this + 2))
                    {
                      v381 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v379 = v378 + 1;
                      v380 = *(unsigned __int8 *)(*(_QWORD *)this + v378);
                      *((_QWORD *)this + 1) = v379;
                      v381 = v380 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 338) = v381;
                    goto LABEL_514;
                  case 'l':
                    v18[1] |= 0x2000000uLL;
                    v382 = *((_QWORD *)this + 1);
                    if (v382 >= *((_QWORD *)this + 2))
                    {
                      v385 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v383 = v382 + 1;
                      v384 = *(unsigned __int8 *)(*(_QWORD *)this + v382);
                      *((_QWORD *)this + 1) = v383;
                      v385 = v384 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 336) = v385;
                    goto LABEL_514;
                  case 'm':
                    v18[1] |= 0x1000uLL;
                    v386 = *((_QWORD *)this + 1);
                    if (v386 >= *((_QWORD *)this + 2))
                    {
                      v389 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v387 = v386 + 1;
                      v388 = *(unsigned __int8 *)(*(_QWORD *)this + v386);
                      *((_QWORD *)this + 1) = v387;
                      v389 = v388 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 323) = v389;
                    goto LABEL_514;
                  case 'n':
                    v18[1] |= 0x10000000uLL;
                    v390 = *((_QWORD *)this + 1);
                    if (v390 >= *((_QWORD *)this + 2))
                    {
                      v393 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v391 = v390 + 1;
                      v392 = *(unsigned __int8 *)(*(_QWORD *)this + v390);
                      *((_QWORD *)this + 1) = v391;
                      v393 = v392 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 339) = v393;
                    goto LABEL_514;
                  case 'o':
                    v18[1] |= 0x20000000uLL;
                    v394 = *((_QWORD *)this + 1);
                    if (v394 >= *((_QWORD *)this + 2))
                    {
                      v397 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v395 = v394 + 1;
                      v396 = *(unsigned __int8 *)(*(_QWORD *)this + v394);
                      *((_QWORD *)this + 1) = v395;
                      v397 = v396 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 340) = v397;
                    goto LABEL_514;
                  case 'p':
                    v18[1] |= 0x200uLL;
                    v398 = *((_QWORD *)this + 1);
                    if (v398 >= *((_QWORD *)this + 2))
                    {
                      v401 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v399 = v398 + 1;
                      v400 = *(unsigned __int8 *)(*(_QWORD *)this + v398);
                      *((_QWORD *)this + 1) = v399;
                      v401 = v400 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 320) = v401;
                    goto LABEL_514;
                  case 'q':
                    v18[1] |= 0x1000000uLL;
                    v402 = *((_QWORD *)this + 1);
                    if (v402 >= *((_QWORD *)this + 2))
                    {
                      v405 = 0;
                      v12 = v766;
                      v17 = a1;
                      *v766 = 1;
                    }
                    else
                    {
                      v403 = v402 + 1;
                      v404 = *(unsigned __int8 *)(*(_QWORD *)this + v402);
                      *((_QWORD *)this + 1) = v403;
                      v405 = v404 != 0;
                      v12 = v766;
                      v17 = a1;
                    }
                    *((_BYTE *)v17 + 335) = v405;
                    goto LABEL_514;
                  default:
                    goto LABEL_141;
                }
                break;
            }
            break;
        }
        while (1)
        {
          if (v355 == v354)
          {
            v359 = 0;
            *v766 = 1;
            goto LABEL_1049;
          }
          v680 = v354 + 1;
          v681 = *(_BYTE *)(v356 + v354);
          *v10 = v680;
          v359 |= (unint64_t)(v681 & 0x7F) << v678;
          if ((v681 & 0x80) == 0)
            break;
          v678 += 7;
          v354 = v680;
          v25 = v679++ > 8;
          if (v25)
            goto LABEL_758;
        }
        if (*v766)
          v359 = 0;
LABEL_1049:
        *((_QWORD *)v17 + 1) = v359;
      }
LABEL_514:
      v9 = *((_QWORD *)this + 1);
      v13 = *((_QWORD *)this + 2);
      v11 = *((unsigned __int8 *)this + 24);
    }
    while (v9 < v13 && v11 == 0);
  }
  return v11 == 0;
}

uint64_t sub_18F26261C(uint64_t result, PB::Writer *this)
{
  float *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (float *)result;
  v4 = (uint64_t *)(result + 356);
  v5 = *(_QWORD *)(result + 356);
  if ((v5 & 0x800000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 132));
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x400000) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = *(_QWORD *)(result + 364);
  if ((v5 & 0x400000) != 0)
  {
LABEL_5:
    result = PB::Writer::write(this, v3[32]);
    v5 = *v4;
    v6 = v4[1];
  }
LABEL_6:
  if ((v5 & 0x1000000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *v4;
    v6 = v4[1];
    if ((*v4 & 0x10000000000000) == 0)
    {
LABEL_8:
      if ((v6 & 1) == 0)
        goto LABEL_9;
      goto LABEL_115;
    }
  }
  else if ((v5 & 0x10000000000000) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x400000000000000) == 0)
      goto LABEL_10;
    goto LABEL_116;
  }
LABEL_115:
  result = PB::Writer::write(this, v3[74]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000000) == 0)
      goto LABEL_11;
    goto LABEL_117;
  }
LABEL_116:
  result = PB::Writer::write(this, v3[68]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000000000) == 0)
      goto LABEL_12;
    goto LABEL_118;
  }
LABEL_117:
  result = PB::Writer::write(this, v3[56]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_119;
  }
LABEL_118:
  result = PB::Writer::write(this, v3[55]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000000000000) == 0)
      goto LABEL_14;
    goto LABEL_120;
  }
LABEL_119:
  result = PB::Writer::write(this, v3[19]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_15;
    goto LABEL_121;
  }
LABEL_120:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_122;
  }
LABEL_121:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v6 & 8) == 0)
      goto LABEL_17;
    goto LABEL_123;
  }
LABEL_122:
  result = PB::Writer::write(this, v3[26]);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 8) == 0)
  {
LABEL_17:
    if ((v6 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_124;
  }
LABEL_123:
  result = PB::Writer::write(this, v3[77]);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000000000) == 0)
      goto LABEL_19;
    goto LABEL_125;
  }
LABEL_124:
  result = PB::Writer::write(this, v3[78]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000000000) == 0)
      goto LABEL_20;
    goto LABEL_126;
  }
LABEL_125:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000000000000) == 0)
      goto LABEL_21;
    goto LABEL_127;
  }
LABEL_126:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000000000000) == 0)
      goto LABEL_22;
    goto LABEL_128;
  }
LABEL_127:
  result = PB::Writer::write(this, v3[60]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000000) == 0)
  {
LABEL_22:
    if ((v6 & 2) == 0)
      goto LABEL_23;
    goto LABEL_129;
  }
LABEL_128:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 2) == 0)
  {
LABEL_23:
    if ((v5 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_130;
  }
LABEL_129:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0)
      goto LABEL_25;
    goto LABEL_131;
  }
LABEL_130:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 1) == 0)
  {
LABEL_25:
    if ((v6 & 0x40) == 0)
      goto LABEL_26;
    goto LABEL_132;
  }
LABEL_131:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40) == 0)
  {
LABEL_26:
    if ((v6 & 0x80) == 0)
      goto LABEL_27;
    goto LABEL_133;
  }
LABEL_132:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80) == 0)
  {
LABEL_27:
    if ((v6 & 0x8000) == 0)
      goto LABEL_28;
    goto LABEL_134;
  }
LABEL_133:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000) == 0)
  {
LABEL_28:
    if ((v6 & 0x10000) == 0)
      goto LABEL_29;
    goto LABEL_135;
  }
LABEL_134:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000) == 0)
  {
LABEL_29:
    if ((v6 & 0x8000000) == 0)
      goto LABEL_30;
    goto LABEL_136;
  }
LABEL_135:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_137;
  }
LABEL_136:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x1000) == 0)
      goto LABEL_32;
    goto LABEL_138;
  }
LABEL_137:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000) == 0)
  {
LABEL_32:
    if ((v6 & 0x10000000) == 0)
      goto LABEL_33;
    goto LABEL_139;
  }
LABEL_138:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x20000000) == 0)
      goto LABEL_34;
    goto LABEL_140;
  }
LABEL_139:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x200) == 0)
      goto LABEL_35;
    goto LABEL_141;
  }
LABEL_140:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200) == 0)
  {
LABEL_35:
    if ((v6 & 0x1000000) == 0)
      goto LABEL_36;
    goto LABEL_142;
  }
LABEL_141:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000) == 0)
      goto LABEL_37;
    goto LABEL_143;
  }
LABEL_142:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000) == 0)
  {
LABEL_37:
    if ((v6 & 0x4000000) == 0)
      goto LABEL_38;
    goto LABEL_144;
  }
LABEL_143:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000) == 0)
      goto LABEL_39;
    goto LABEL_145;
  }
LABEL_144:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0)
      goto LABEL_40;
    goto LABEL_146;
  }
LABEL_145:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0)
      goto LABEL_41;
    goto LABEL_147;
  }
LABEL_146:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x4000000000) == 0)
      goto LABEL_42;
    goto LABEL_148;
  }
LABEL_147:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x400000000) == 0)
      goto LABEL_43;
    goto LABEL_149;
  }
LABEL_148:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x40000000) == 0)
      goto LABEL_44;
    goto LABEL_150;
  }
LABEL_149:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x800) == 0)
      goto LABEL_45;
    goto LABEL_151;
  }
LABEL_150:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800) == 0)
  {
LABEL_45:
    if ((v6 & 0x100000) == 0)
      goto LABEL_46;
    goto LABEL_152;
  }
LABEL_151:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000) == 0)
  {
LABEL_46:
    if ((v6 & 0x8000000000) == 0)
      goto LABEL_47;
    goto LABEL_153;
  }
LABEL_152:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x8000000000) == 0)
  {
LABEL_47:
    if ((v6 & 0x800000000) == 0)
      goto LABEL_48;
    goto LABEL_154;
  }
LABEL_153:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x20000) == 0)
      goto LABEL_49;
    goto LABEL_155;
  }
LABEL_154:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000) == 0)
  {
LABEL_49:
    if ((v6 & 0x400000) == 0)
      goto LABEL_50;
    goto LABEL_156;
  }
LABEL_155:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400000) == 0)
  {
LABEL_50:
    if ((v6 & 0x800000) == 0)
      goto LABEL_51;
    goto LABEL_157;
  }
LABEL_156:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x800000) == 0)
  {
LABEL_51:
    if ((v6 & 0x20) == 0)
      goto LABEL_52;
    goto LABEL_158;
  }
LABEL_157:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20) == 0)
  {
LABEL_52:
    if ((v5 & 0x40000) == 0)
      goto LABEL_53;
    goto LABEL_159;
  }
LABEL_158:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000) == 0)
  {
LABEL_53:
    if ((v6 & 0x40000000000) == 0)
      goto LABEL_54;
    goto LABEL_160;
  }
LABEL_159:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x40000000000) == 0)
  {
LABEL_54:
    if ((v6 & 0x10000000000) == 0)
      goto LABEL_55;
    goto LABEL_161;
  }
LABEL_160:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x10000000000) == 0)
  {
LABEL_55:
    if ((v6 & 0x20000000000) == 0)
      goto LABEL_56;
    goto LABEL_162;
  }
LABEL_161:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000000000) == 0)
  {
LABEL_56:
    if ((v6 & 0x100000000) == 0)
      goto LABEL_57;
    goto LABEL_163;
  }
LABEL_162:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100000000) == 0)
  {
LABEL_57:
    if ((v6 & 0x80000000) == 0)
      goto LABEL_58;
    goto LABEL_164;
  }
LABEL_163:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x80000000) == 0)
  {
LABEL_58:
    if ((v5 & 0x20000000000000) == 0)
      goto LABEL_59;
    goto LABEL_165;
  }
LABEL_164:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000000000) == 0)
  {
LABEL_59:
    if ((v5 & 0x40000000000000) == 0)
      goto LABEL_60;
    goto LABEL_166;
  }
LABEL_165:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000000) == 0)
  {
LABEL_60:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_61;
    goto LABEL_167;
  }
LABEL_166:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_61:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_62;
    goto LABEL_168;
  }
LABEL_167:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_62:
    if ((v6 & 0x20000) == 0)
      goto LABEL_63;
    goto LABEL_169;
  }
LABEL_168:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x20000) == 0)
  {
LABEL_63:
    if ((v6 & 0x4000) == 0)
      goto LABEL_64;
    goto LABEL_170;
  }
LABEL_169:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x4000) == 0)
  {
LABEL_64:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_65;
    goto LABEL_171;
  }
LABEL_170:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000) == 0)
  {
LABEL_65:
    if ((v5 & 0x80000) == 0)
      goto LABEL_66;
    goto LABEL_172;
  }
LABEL_171:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000) == 0)
  {
LABEL_66:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_67;
    goto LABEL_173;
  }
LABEL_172:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000) == 0)
  {
LABEL_67:
    if ((v5 & 0x4000000000000000) == 0)
      goto LABEL_68;
    goto LABEL_174;
  }
LABEL_173:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000000000) == 0)
  {
LABEL_68:
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_69;
    goto LABEL_175;
  }
LABEL_174:
  result = PB::Writer::write(this, v3[72]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000000) == 0)
  {
LABEL_69:
    if ((v5 & 0x200000000000000) == 0)
      goto LABEL_70;
    goto LABEL_176;
  }
LABEL_175:
  result = PB::Writer::write(this, v3[73]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000000000000) == 0)
  {
LABEL_70:
    if ((v5 & 0x800000000000000) == 0)
      goto LABEL_71;
    goto LABEL_177;
  }
LABEL_176:
  result = PB::Writer::write(this, v3[67]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000000) == 0)
  {
LABEL_71:
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_72;
    goto LABEL_178;
  }
LABEL_177:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x2000000000000000) == 0)
  {
LABEL_72:
    if ((v6 & 0x400) == 0)
      goto LABEL_73;
    goto LABEL_179;
  }
LABEL_178:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x400) == 0)
  {
LABEL_73:
    if ((v5 & 0x4000) == 0)
      goto LABEL_74;
    goto LABEL_180;
  }
LABEL_179:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000) == 0)
  {
LABEL_74:
    if ((v5 & 0x1000) == 0)
      goto LABEL_75;
    goto LABEL_181;
  }
LABEL_180:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000) == 0)
  {
LABEL_75:
    if ((v5 & 0x100000000000) == 0)
      goto LABEL_76;
    goto LABEL_182;
  }
LABEL_181:
  result = PB::Writer::write(this, v3[22]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_76:
    if ((v5 & 0x100000000000000) == 0)
      goto LABEL_77;
    goto LABEL_183;
  }
LABEL_182:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000000000) == 0)
  {
LABEL_77:
    if ((v5 & 0x40) == 0)
      goto LABEL_78;
    goto LABEL_184;
  }
LABEL_183:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40) == 0)
  {
LABEL_78:
    if ((v5 & 0x800000000000) == 0)
      goto LABEL_79;
    goto LABEL_185;
  }
LABEL_184:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000000) == 0)
  {
LABEL_79:
    if ((v5 & 0x1000000000000) == 0)
      goto LABEL_80;
    goto LABEL_186;
  }
LABEL_185:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x1000000000000) == 0)
  {
LABEL_80:
    if ((v5 & 0x100000) == 0)
      goto LABEL_81;
    goto LABEL_187;
  }
LABEL_186:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000) == 0)
  {
LABEL_81:
    if ((v5 & 0x400) == 0)
      goto LABEL_82;
    goto LABEL_188;
  }
LABEL_187:
  result = PB::Writer::write(this, v3[30]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400) == 0)
  {
LABEL_82:
    if ((v5 & 0x200000) == 0)
      goto LABEL_83;
    goto LABEL_189;
  }
LABEL_188:
  result = PB::Writer::write(this, v3[20]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x200000) == 0)
  {
LABEL_83:
    if ((v5 & 0x800) == 0)
      goto LABEL_84;
    goto LABEL_190;
  }
LABEL_189:
  result = PB::Writer::write(this, v3[31]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800) == 0)
  {
LABEL_84:
    if ((v5 & 0x100) == 0)
      goto LABEL_85;
    goto LABEL_191;
  }
LABEL_190:
  result = PB::Writer::write(this, v3[21]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100) == 0)
  {
LABEL_85:
    if ((v6 & 0x200000) == 0)
      goto LABEL_86;
    goto LABEL_192;
  }
LABEL_191:
  result = PB::Writer::write(this, v3[18]);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x200000) == 0)
  {
LABEL_86:
    if ((v6 & 4) == 0)
      goto LABEL_87;
    goto LABEL_193;
  }
LABEL_192:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 4) == 0)
  {
LABEL_87:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_88;
    goto LABEL_194;
  }
LABEL_193:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_88:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_89;
    goto LABEL_195;
  }
LABEL_194:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000) == 0)
  {
LABEL_89:
    if ((v6 & 0x1000000000) == 0)
      goto LABEL_90;
    goto LABEL_196;
  }
LABEL_195:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_90:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_91;
    goto LABEL_197;
  }
LABEL_196:
  result = PB::Writer::write(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x80000000) == 0)
  {
LABEL_91:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_92;
    goto LABEL_198;
  }
LABEL_197:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_92:
    if ((v5 & 0x8000000000000) == 0)
      goto LABEL_93;
    goto LABEL_199;
  }
LABEL_198:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000000) == 0)
  {
LABEL_93:
    if ((v5 & 0x4000000000) == 0)
      goto LABEL_94;
    goto LABEL_200;
  }
LABEL_199:
  result = PB::Writer::write(this, v3[61]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_94:
    if ((v5 & 0x8000000000) == 0)
      goto LABEL_95;
    goto LABEL_201;
  }
LABEL_200:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_95:
    if ((v5 & 0x8000) == 0)
      goto LABEL_96;
    goto LABEL_202;
  }
LABEL_201:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x8000) == 0)
  {
LABEL_96:
    if ((v5 & 0x40000000000) == 0)
      goto LABEL_97;
    goto LABEL_203;
  }
LABEL_202:
  result = PB::Writer::write(this, v3[25]);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_97:
    if ((v5 & 0x10000000000) == 0)
      goto LABEL_98;
    goto LABEL_204;
  }
LABEL_203:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_98:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_99;
    goto LABEL_205;
  }
LABEL_204:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_99:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_100;
    goto LABEL_206;
  }
LABEL_205:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_100:
    if ((v5 & 0x400000000) == 0)
      goto LABEL_101;
    goto LABEL_207;
  }
LABEL_206:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_101:
    if ((v6 & 0x100) == 0)
      goto LABEL_102;
    goto LABEL_208;
  }
LABEL_207:
  result = PB::Writer::writeVarInt(this);
  v5 = *v4;
  v6 = v4[1];
  if ((v6 & 0x100) == 0)
  {
LABEL_102:
    if ((v6 & 0x40000) == 0)
      goto LABEL_103;
    goto LABEL_209;
  }
LABEL_208:
  result = PB::Writer::write(this);
  v5 = *v4;
  if ((v4[1] & 0x40000) == 0)
  {
LABEL_103:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_105;
    goto LABEL_104;
  }
LABEL_209:
  result = PB::Writer::write(this);
  if ((*v4 & 0x200000000) != 0)
LABEL_104:
    result = PB::Writer::writeVarInt(this);
LABEL_105:
  v7 = *v4;
  if ((*v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v7 = *v4;
    if ((*v4 & 0x20) == 0)
    {
LABEL_107:
      if ((v7 & 4) == 0)
        goto LABEL_108;
      goto LABEL_213;
    }
  }
  else if ((v7 & 0x20) == 0)
  {
    goto LABEL_107;
  }
  result = PB::Writer::writeVarInt(this);
  v7 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_108:
    if ((v7 & 8) == 0)
      goto LABEL_109;
    goto LABEL_214;
  }
LABEL_213:
  result = PB::Writer::writeVarInt(this);
  v7 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_109:
    if ((v7 & 0x10) == 0)
      goto LABEL_110;
    goto LABEL_215;
  }
LABEL_214:
  result = PB::Writer::writeVarInt(this);
  v7 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_110:
    if ((v7 & 0x2000000000000) == 0)
      goto LABEL_111;
    goto LABEL_216;
  }
LABEL_215:
  result = PB::Writer::writeVarInt(this);
  v7 = *v4;
  if ((*v4 & 0x2000000000000) == 0)
  {
LABEL_111:
    if ((v7 & 0x2000) == 0)
      return result;
    return PB::Writer::write(this, v3[23]);
  }
LABEL_216:
  result = PB::Writer::writeVarInt(this);
  if ((*v4 & 0x2000) != 0)
    return PB::Writer::write(this, v3[23]);
  return result;
}

double sub_18F263208(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294DD10;
  *(_DWORD *)(a1 + 204) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

void sub_18F263240(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E294DD10;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

void sub_18F2632C0(PB::Base *a1)
{
  sub_18F263240(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2632E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "deltaGravity", *(float *)(a1 + 168));
    v5 = *(_WORD *)(a1 + 204);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_31;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0)
      goto LABEL_5;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0)
      goto LABEL_6;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "isSlowRollDetected");
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "isSpinDetected");
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "maxDeltaAngleLong", *(float *)(a1 + 172));
  v5 = *(_WORD *)(a1 + 204);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_35:
  PB::TextFormatter::format(this, "maxDeltaAngleShort", *(float *)(a1 + 176));
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "slowRollCumCoherentAngle", *(float *)(a1 + 180));
LABEL_10:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "slowRollSegmentMaxAxisVariance", v8);
  }
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "slowRollSegmentMaxFiltRotRate", v11);
  }
  v12 = *(float **)(a1 + 56);
  v13 = *(float **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "slowRollSegmentMinFiltRotRate", v14);
  }
  v15 = *(_QWORD *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 88);
  while (v15 != v16)
  {
    v15 += 8;
    PB::TextFormatter::format(this, "slowRollSegmentStartTimes");
  }
  v17 = *(_QWORD *)(a1 + 104);
  v18 = *(_QWORD *)(a1 + 112);
  while (v17 != v18)
  {
    v17 += 8;
    PB::TextFormatter::format(this, "slowRollSegmentStopTimes");
  }
  v19 = *(_WORD *)(a1 + 204);
  if ((v19 & 4) != 0)
  {
    PB::TextFormatter::format(this, "slowRollStartTime");
    v19 = *(_WORD *)(a1 + 204);
    if ((v19 & 8) == 0)
    {
LABEL_22:
      if ((v19 & 0x200) == 0)
        goto LABEL_23;
      goto LABEL_39;
    }
  }
  else if ((v19 & 8) == 0)
  {
    goto LABEL_22;
  }
  PB::TextFormatter::format(this, "slowRollStopTime");
  v19 = *(_WORD *)(a1 + 204);
  if ((v19 & 0x200) == 0)
  {
LABEL_23:
    if ((v19 & 0x400) == 0)
      goto LABEL_24;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "spatialSamplingCount");
  v19 = *(_WORD *)(a1 + 204);
  if ((v19 & 0x400) == 0)
  {
LABEL_24:
    if ((v19 & 0x800) == 0)
      goto LABEL_25;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "spinCumulativeRotation", *(float *)(a1 + 188));
  v19 = *(_WORD *)(a1 + 204);
  if ((v19 & 0x800) == 0)
  {
LABEL_25:
    if ((v19 & 0x1000) == 0)
      goto LABEL_26;
LABEL_42:
    PB::TextFormatter::format(this, "spinGravityAngleThresholdDegrees", *(float *)(a1 + 196));
    if ((*(_WORD *)(a1 + 204) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_27;
  }
LABEL_41:
  PB::TextFormatter::format(this, "spinCumulativeRotationThresholdDegrees", *(float *)(a1 + 192));
  v19 = *(_WORD *)(a1 + 204);
  if ((v19 & 0x1000) != 0)
    goto LABEL_42;
LABEL_26:
  if ((v19 & 0x10) != 0)
LABEL_27:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F2635E0(uint64_t a1, PB::Reader *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  void **v9;
  void **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  BOOL v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  BOOL v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  uint64_t v133;
  unint64_t v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  char *v139;
  _DWORD *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  int v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  char *v153;
  _DWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  char *v167;
  _DWORD *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  char v180;
  char v181;
  unsigned int v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  unint64_t v187;
  char v188;
  char v189;
  unsigned int v190;
  unint64_t v191;
  char v192;
  char v193;
  unsigned int v194;
  unint64_t v195;
  char v196;
  char v197;
  unsigned int v198;
  unint64_t v199;
  char v200;
  char v201;
  unsigned int v202;
  unint64_t v203;
  char v204;
  unint64_t v205;
  char *v206;
  _QWORD *v207;
  unint64_t v208;
  char *v209;
  unint64_t v210;
  char *v211;
  _DWORD *v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  unint64_t v236;
  char *v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  char v257;
  unsigned int v258;
  unint64_t v260;
  char v261;
  uint64_t v262;
  unint64_t v263;
  char v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  char v270;
  unsigned int v271;
  unint64_t v273;
  char v274;
  unint64_t v275;
  char v276;
  char *v277;
  int v278;
  char *v279;
  int v280;
  char *v281;
  int v282;
  unint64_t v283;
  void **v286;
  void **v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void **v291;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 2);
  v5 = *((unsigned __int8 *)this + 24);
  if (v3 < v4 && v5 == 0)
  {
    v290 = a1 + 48;
    v291 = (void **)(a1 + 32);
    v9 = (void **)(a1 + 56);
    v10 = (void **)(a1 + 8);
    v288 = a1 + 24;
    v289 = a1 + 72;
    v11 = (_QWORD *)(a1 + 120);
    v286 = (void **)(a1 + 80);
    v287 = (void **)(a1 + 104);
    v12 = (_QWORD *)(a1 + 96);
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v18 = *(_BYTE *)(v13 + v3);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v3 = v17;
        v102 = v15++ > 8;
        if (v102)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v16 & 7;
      if (v24 == 4)
      {
        v5 = 0;
        return v5 == 0;
      }
      v25 = v16 >> 3;
      if ((int)(v16 >> 3) > 200)
      {
        switch((int)v25)
        {
          case 201:
            *(_WORD *)(a1 + 204) |= 1u;
            v34 = *((_QWORD *)this + 1);
            v35 = *((_QWORD *)this + 2);
            v36 = *(_QWORD *)this;
            if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
            {
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v40 = v34 + 1;
                *((_QWORD *)this + 1) = v34 + 1;
                v41 = *(_BYTE *)(v36 + v34);
                v39 |= (unint64_t)(v41 & 0x7F) << v37;
                if ((v41 & 0x80) == 0)
                  goto LABEL_368;
                v37 += 7;
                v34 = v40;
                v102 = v38++ > 8;
              }
              while (!v102);
LABEL_271:
              v39 = 0;
              goto LABEL_368;
            }
            v185 = 0;
            v186 = 0;
            v39 = 0;
            if (v35 <= v34)
              v35 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v35 == v34)
              {
                v39 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v187 = v34 + 1;
                v188 = *(_BYTE *)(v36 + v34);
                *((_QWORD *)this + 1) = v187;
                v39 |= (unint64_t)(v188 & 0x7F) << v185;
                if (v188 < 0)
                {
                  v185 += 7;
                  v34 = v187;
                  v102 = v186++ > 8;
                  if (v102)
                    goto LABEL_271;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v39 = 0;
              }
              break;
            }
LABEL_368:
            *(_QWORD *)(a1 + 128) = v39;
            goto LABEL_460;
          case 202:
            *(_WORD *)(a1 + 204) |= 2u;
            v71 = *((_QWORD *)this + 1);
            v72 = *((_QWORD *)this + 2);
            v73 = *(_QWORD *)this;
            if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
            {
              v74 = 0;
              v75 = 0;
              v76 = 0;
              do
              {
                v77 = v71 + 1;
                *((_QWORD *)this + 1) = v71 + 1;
                v78 = *(_BYTE *)(v73 + v71);
                v76 |= (unint64_t)(v78 & 0x7F) << v74;
                if ((v78 & 0x80) == 0)
                  goto LABEL_377;
                v74 += 7;
                v71 = v77;
                v102 = v75++ > 8;
              }
              while (!v102);
LABEL_296:
              v76 = 0;
              goto LABEL_377;
            }
            v197 = 0;
            v198 = 0;
            v76 = 0;
            if (v72 <= v71)
              v72 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v72 == v71)
              {
                v76 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v199 = v71 + 1;
                v200 = *(_BYTE *)(v73 + v71);
                *((_QWORD *)this + 1) = v199;
                v76 |= (unint64_t)(v200 & 0x7F) << v197;
                if (v200 < 0)
                {
                  v197 += 7;
                  v71 = v199;
                  v102 = v198++ > 8;
                  if (v102)
                    goto LABEL_296;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v76 = 0;
              }
              break;
            }
LABEL_377:
            *(_QWORD *)(a1 + 136) = v76;
            goto LABEL_460;
          case 203:
            *(_WORD *)(a1 + 204) |= 0x200u;
            v79 = *((_QWORD *)this + 1);
            v80 = *((_QWORD *)this + 2);
            v81 = *(_QWORD *)this;
            if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
            {
              v82 = 0;
              v83 = 0;
              v84 = 0;
              do
              {
                v85 = v79 + 1;
                *((_QWORD *)this + 1) = v79 + 1;
                v86 = *(_BYTE *)(v81 + v79);
                v84 |= (unint64_t)(v86 & 0x7F) << v82;
                if ((v86 & 0x80) == 0)
                  goto LABEL_380;
                v82 += 7;
                v79 = v85;
                v102 = v83++ > 8;
              }
              while (!v102);
LABEL_303:
              LODWORD(v84) = 0;
              goto LABEL_380;
            }
            v201 = 0;
            v202 = 0;
            v84 = 0;
            if (v80 <= v79)
              v80 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v80 == v79)
              {
                LODWORD(v84) = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v203 = v79 + 1;
                v204 = *(_BYTE *)(v81 + v79);
                *((_QWORD *)this + 1) = v203;
                v84 |= (unint64_t)(v204 & 0x7F) << v201;
                if (v204 < 0)
                {
                  v201 += 7;
                  v79 = v203;
                  v102 = v202++ > 8;
                  if (v102)
                    goto LABEL_303;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v84) = 0;
              }
              break;
            }
LABEL_380:
            *(_DWORD *)(a1 + 184) = v84;
            goto LABEL_460;
          case 204:
            *(_WORD *)(a1 + 204) |= 0x20u;
            v87 = *((_QWORD *)this + 1);
            if (v87 > 0xFFFFFFFFFFFFFFFBLL || v87 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v87);
            goto LABEL_459;
          case 205:
            if (v24 == 2)
            {
              v88 = v2;
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
              {
                v89 = *(char **)(a1 + 88);
                do
                {
                  if ((unint64_t)v89 >= *v12)
                  {
                    v90 = (char *)*v286;
                    v91 = (v89 - (_BYTE *)*v286) >> 3;
                    v92 = v91 + 1;
                    if ((unint64_t)(v91 + 1) >> 61)
                      goto LABEL_473;
                    v93 = *v12 - (_QWORD)v90;
                    if (v93 >> 2 > v92)
                      v92 = v93 >> 2;
                    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
                      v94 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v94 = v92;
                    if (v94)
                    {
                      v95 = (char *)sub_18F26F8D4((uint64_t)v12, v94);
                      v90 = *(char **)(a1 + 80);
                      v89 = *(char **)(a1 + 88);
                    }
                    else
                    {
                      v95 = 0;
                    }
                    v96 = &v95[8 * v91];
                    *(_QWORD *)v96 = 0;
                    v97 = v96 + 8;
                    while (v89 != v90)
                    {
                      v98 = *((_QWORD *)v89 - 1);
                      v89 -= 8;
                      *((_QWORD *)v96 - 1) = v98;
                      v96 -= 8;
                    }
                    *(_QWORD *)(a1 + 80) = v96;
                    *(_QWORD *)(a1 + 88) = v97;
                    *(_QWORD *)(a1 + 96) = &v95[8 * v94];
                    if (v90)
                      operator delete(v90);
                    v89 = v97;
                  }
                  else
                  {
                    *(_QWORD *)v89 = 0;
                    v89 += 8;
                  }
                  *(_QWORD *)(a1 + 88) = v89;
                  v100 = *((_QWORD *)this + 1);
                  v99 = *((_QWORD *)this + 2);
                  v101 = *(_QWORD *)this;
                  v102 = v100 > 0xFFFFFFFFFFFFFFF5 || v100 + 10 > v99;
                  if (v102)
                  {
                    v103 = 0;
                    v104 = 0;
                    v110 = 0;
                    if (v99 <= v100)
                      v105 = *((_QWORD *)this + 1);
                    else
                      v105 = *((_QWORD *)this + 2);
                    while (1)
                    {
                      if (v105 == v100)
                        goto LABEL_315;
                      v106 = v100++;
                      v107 = *(_BYTE *)(v101 + v106);
                      *((_QWORD *)this + 1) = v100;
                      v110 |= (unint64_t)(v107 & 0x7F) << v103;
                      if ((v107 & 0x80) == 0)
                        break;
                      v103 += 7;
                      v102 = v104++ > 8;
                      if (v102)
                      {
                        v110 = 0;
                        goto LABEL_132;
                      }
                    }
                    if (*((_BYTE *)this + 24))
                      v110 = 0;
LABEL_132:
                    v111 = v106 + 1;
                  }
                  else
                  {
                    v108 = 0;
                    v109 = 0;
                    v110 = 0;
                    while (1)
                    {
                      v111 = v100 + 1;
                      *((_QWORD *)this + 1) = v100 + 1;
                      v112 = *(_BYTE *)(v101 + v100);
                      v110 |= (unint64_t)(v112 & 0x7F) << v108;
                      if ((v112 & 0x80) == 0)
                        break;
                      v108 += 7;
                      v100 = v111;
                      v102 = v109++ > 8;
                      if (v102)
                      {
                        v110 = 0;
                        break;
                      }
                    }
                  }
                  *((_QWORD *)v89 - 1) = v110;
                }
                while (v111 < v99 && !*((_BYTE *)this + 24));
              }
              goto LABEL_316;
            }
            v206 = *(char **)(a1 + 88);
            v205 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v206 >= v205)
            {
              v217 = (char *)*v286;
              v218 = (v206 - (_BYTE *)*v286) >> 3;
              v219 = v218 + 1;
              if ((unint64_t)(v218 + 1) >> 61)
LABEL_473:
                sub_18F26F8C0();
              v220 = v2;
              v221 = v205 - (_QWORD)v217;
              if (v221 >> 2 > v219)
                v219 = v221 >> 2;
              if ((unint64_t)v221 >= 0x7FFFFFFFFFFFFFF8)
                v222 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v222 = v219;
              if (v222)
              {
                v223 = (char *)sub_18F26F8D4((uint64_t)v12, v222);
                v217 = *(char **)(a1 + 80);
                v206 = *(char **)(a1 + 88);
              }
              else
              {
                v223 = 0;
              }
              v252 = &v223[8 * v218];
              *(_QWORD *)v252 = 0;
              v207 = v252 + 8;
              while (v206 != v217)
              {
                v253 = *((_QWORD *)v206 - 1);
                v206 -= 8;
                *((_QWORD *)v252 - 1) = v253;
                v252 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v252;
              *(_QWORD *)(a1 + 88) = v207;
              *(_QWORD *)(a1 + 96) = &v223[8 * v222];
              if (v217)
                operator delete(v217);
              v2 = v220;
            }
            else
            {
              *(_QWORD *)v206 = 0;
              v207 = v206 + 8;
            }
            *(_QWORD *)(a1 + 88) = v207;
            v254 = *((_QWORD *)this + 1);
            v255 = *((_QWORD *)this + 2);
            v256 = *(_QWORD *)this;
            v257 = 0;
            v258 = 0;
            if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
            {
              v262 = 0;
              while (1)
              {
                v263 = v254 + 1;
                *((_QWORD *)this + 1) = v254 + 1;
                v264 = *(_BYTE *)(v256 + v254);
                v262 |= (unint64_t)(v264 & 0x7F) << v257;
                if ((v264 & 0x80) == 0)
                  goto LABEL_430;
                v257 += 7;
                v254 = v263;
                v102 = v258++ > 8;
                if (v102)
                  goto LABEL_426;
              }
            }
            v262 = 0;
            if (v255 <= v254)
              v255 = *((_QWORD *)this + 1);
            while (v255 != v254)
            {
              v260 = v254 + 1;
              v261 = *(_BYTE *)(v256 + v254);
              *((_QWORD *)this + 1) = v260;
              v262 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0)
                goto LABEL_428;
              v257 += 7;
              v254 = v260;
              v102 = v258++ > 8;
              if (v102)
                goto LABEL_426;
            }
            goto LABEL_427;
          case 206:
            if (v24 != 2)
            {
              v209 = *(char **)(a1 + 112);
              v208 = *(_QWORD *)(a1 + 120);
              if ((unint64_t)v209 >= v208)
              {
                v224 = (char *)*v287;
                v225 = (v209 - (_BYTE *)*v287) >> 3;
                v226 = v225 + 1;
                if ((unint64_t)(v225 + 1) >> 61)
LABEL_474:
                  sub_18F26F8C0();
                v227 = v2;
                v228 = v208 - (_QWORD)v224;
                if (v228 >> 2 > v226)
                  v226 = v228 >> 2;
                if ((unint64_t)v228 >= 0x7FFFFFFFFFFFFFF8)
                  v229 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v229 = v226;
                if (v229)
                {
                  v230 = (char *)sub_18F26F8D4((uint64_t)v11, v229);
                  v224 = *(char **)(a1 + 104);
                  v209 = *(char **)(a1 + 112);
                }
                else
                {
                  v230 = 0;
                }
                v265 = &v230[8 * v225];
                *(_QWORD *)v265 = 0;
                v207 = v265 + 8;
                while (v209 != v224)
                {
                  v266 = *((_QWORD *)v209 - 1);
                  v209 -= 8;
                  *((_QWORD *)v265 - 1) = v266;
                  v265 -= 8;
                }
                *(_QWORD *)(a1 + 104) = v265;
                *(_QWORD *)(a1 + 112) = v207;
                *(_QWORD *)(a1 + 120) = &v230[8 * v229];
                if (v224)
                  operator delete(v224);
                v2 = v227;
              }
              else
              {
                *(_QWORD *)v209 = 0;
                v207 = v209 + 8;
              }
              *(_QWORD *)(a1 + 112) = v207;
              v267 = *((_QWORD *)this + 1);
              v268 = *((_QWORD *)this + 2);
              v269 = *(_QWORD *)this;
              v270 = 0;
              v271 = 0;
              if (v267 > 0xFFFFFFFFFFFFFFF5 || v267 + 10 > v268)
              {
                v262 = 0;
                if (v268 <= v267)
                  v268 = *((_QWORD *)this + 1);
                while (v268 != v267)
                {
                  v273 = v267 + 1;
                  v274 = *(_BYTE *)(v269 + v267);
                  *((_QWORD *)this + 1) = v273;
                  v262 |= (unint64_t)(v274 & 0x7F) << v270;
                  if ((v274 & 0x80) == 0)
                  {
LABEL_428:
                    if (*((_BYTE *)this + 24))
                      v262 = 0;
                    goto LABEL_430;
                  }
                  v270 += 7;
                  v267 = v273;
                  v102 = v271++ > 8;
                  if (v102)
                  {
LABEL_426:
                    v262 = 0;
                    goto LABEL_430;
                  }
                }
LABEL_427:
                v262 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v262 = 0;
                while (1)
                {
                  v275 = v267 + 1;
                  *((_QWORD *)this + 1) = v267 + 1;
                  v276 = *(_BYTE *)(v269 + v267);
                  v262 |= (unint64_t)(v276 & 0x7F) << v270;
                  if ((v276 & 0x80) == 0)
                    break;
                  v270 += 7;
                  v267 = v275;
                  v102 = v271++ > 8;
                  if (v102)
                    goto LABEL_426;
                }
              }
LABEL_430:
              *(v207 - 1) = v262;
              goto LABEL_460;
            }
            v88 = v2;
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v89 = *(char **)(a1 + 112);
              do
              {
                if ((unint64_t)v89 >= *v11)
                {
                  v113 = (char *)*v287;
                  v114 = (v89 - (_BYTE *)*v287) >> 3;
                  v115 = v114 + 1;
                  if ((unint64_t)(v114 + 1) >> 61)
                    goto LABEL_474;
                  v116 = *v11 - (_QWORD)v113;
                  if (v116 >> 2 > v115)
                    v115 = v116 >> 2;
                  if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                    v117 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v117 = v115;
                  if (v117)
                  {
                    v118 = (char *)sub_18F26F8D4((uint64_t)v11, v117);
                    v113 = *(char **)(a1 + 104);
                    v89 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v118 = 0;
                  }
                  v119 = &v118[8 * v114];
                  *(_QWORD *)v119 = 0;
                  v120 = v119 + 8;
                  while (v89 != v113)
                  {
                    v121 = *((_QWORD *)v89 - 1);
                    v89 -= 8;
                    *((_QWORD *)v119 - 1) = v121;
                    v119 -= 8;
                  }
                  *(_QWORD *)(a1 + 104) = v119;
                  *(_QWORD *)(a1 + 112) = v120;
                  *(_QWORD *)(a1 + 120) = &v118[8 * v117];
                  if (v113)
                    operator delete(v113);
                  v89 = v120;
                }
                else
                {
                  *(_QWORD *)v89 = 0;
                  v89 += 8;
                }
                *(_QWORD *)(a1 + 112) = v89;
                v123 = *((_QWORD *)this + 1);
                v122 = *((_QWORD *)this + 2);
                v124 = *(_QWORD *)this;
                if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v122)
                {
                  v131 = 0;
                  v132 = 0;
                  v133 = 0;
                  while (1)
                  {
                    v134 = v123 + 1;
                    *((_QWORD *)this + 1) = v123 + 1;
                    v135 = *(_BYTE *)(v124 + v123);
                    v133 |= (unint64_t)(v135 & 0x7F) << v131;
                    if ((v135 & 0x80) == 0)
                      goto LABEL_178;
                    v131 += 7;
                    v123 = v134;
                    v102 = v132++ > 8;
                    if (v102)
                    {
                      v133 = 0;
                      goto LABEL_178;
                    }
                  }
                }
                v126 = 0;
                v127 = 0;
                v133 = 0;
                if (v122 <= v123)
                  v128 = *((_QWORD *)this + 1);
                else
                  v128 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v128 == v123)
                  {
LABEL_315:
                    *((_BYTE *)this + 24) = 1;
                    *((_QWORD *)v89 - 1) = 0;
                    goto LABEL_316;
                  }
                  v129 = v123++;
                  v130 = *(_BYTE *)(v124 + v129);
                  *((_QWORD *)this + 1) = v123;
                  v133 |= (unint64_t)(v130 & 0x7F) << v126;
                  if ((v130 & 0x80) == 0)
                    break;
                  v126 += 7;
                  v102 = v127++ > 8;
                  if (v102)
                  {
                    v133 = 0;
                    goto LABEL_177;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v133 = 0;
LABEL_177:
                v134 = v129 + 1;
LABEL_178:
                *((_QWORD *)v89 - 1) = v133;
              }
              while (v134 < v122 && !*((_BYTE *)this + 24));
            }
            goto LABEL_316;
          case 207:
            if (v24 != 2)
            {
              v211 = *(char **)(a1 + 16);
              v210 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v211 >= v210)
              {
                v231 = (char *)*v10;
                v232 = (v211 - (_BYTE *)*v10) >> 2;
                v233 = v232 + 1;
                if ((unint64_t)(v232 + 1) >> 62)
LABEL_470:
                  sub_18F26F8C0();
                v234 = v2;
                v235 = v210 - (_QWORD)v231;
                if (v235 >> 1 > v233)
                  v233 = v235 >> 1;
                if ((unint64_t)v235 >= 0x7FFFFFFFFFFFFFFCLL)
                  v236 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v236 = v233;
                if (v236)
                {
                  v237 = (char *)sub_18F26FB8C(v288, v236);
                  v231 = *(char **)(a1 + 8);
                  v211 = *(char **)(a1 + 16);
                }
                else
                {
                  v237 = 0;
                }
                v277 = &v237[4 * v232];
                *(_DWORD *)v277 = 0;
                v212 = v277 + 4;
                while (v211 != v231)
                {
                  v278 = *((_DWORD *)v211 - 1);
                  v211 -= 4;
                  *((_DWORD *)v277 - 1) = v278;
                  v277 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v277;
                *(_QWORD *)(a1 + 16) = v212;
                *(_QWORD *)(a1 + 24) = &v237[4 * v236];
                if (v231)
                  operator delete(v231);
                v2 = v234;
              }
              else
              {
                *(_DWORD *)v211 = 0;
                v212 = v211 + 4;
              }
              *(_QWORD *)(a1 + 16) = v212;
              goto LABEL_455;
            }
            v88 = v2;
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v136 = *((_QWORD *)this + 1);
            v137 = *((_QWORD *)this + 2);
            while (v136 < v137 && !*((_BYTE *)this + 24))
            {
              v139 = *(char **)(a1 + 16);
              v138 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v139 >= v138)
              {
                v141 = (char *)*v10;
                v142 = (v139 - (_BYTE *)*v10) >> 2;
                v143 = v142 + 1;
                if ((unint64_t)(v142 + 1) >> 62)
                  goto LABEL_470;
                v144 = v138 - (_QWORD)v141;
                if (v144 >> 1 > v143)
                  v143 = v144 >> 1;
                if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
                  v145 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v145 = v143;
                if (v145)
                {
                  v146 = (char *)sub_18F26FB8C(v288, v145);
                  v141 = *(char **)(a1 + 8);
                  v139 = *(char **)(a1 + 16);
                }
                else
                {
                  v146 = 0;
                }
                v147 = &v146[4 * v142];
                *(_DWORD *)v147 = 0;
                v140 = v147 + 4;
                while (v139 != v141)
                {
                  v148 = *((_DWORD *)v139 - 1);
                  v139 -= 4;
                  *((_DWORD *)v147 - 1) = v148;
                  v147 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v147;
                *(_QWORD *)(a1 + 16) = v140;
                *(_QWORD *)(a1 + 24) = &v146[4 * v145];
                if (v141)
                  operator delete(v141);
              }
              else
              {
                *(_DWORD *)v139 = 0;
                v140 = v139 + 4;
              }
              *(_QWORD *)(a1 + 16) = v140;
              v149 = *((_QWORD *)this + 1);
              if (v149 > 0xFFFFFFFFFFFFFFFBLL || v149 + 4 > *((_QWORD *)this + 2))
                goto LABEL_314;
              *(v140 - 1) = *(_DWORD *)(*(_QWORD *)this + v149);
              v137 = *((_QWORD *)this + 2);
              v136 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v136;
            }
            goto LABEL_316;
          case 208:
            if (v24 != 2)
            {
              v214 = *(char **)(a1 + 64);
              v213 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v214 >= v213)
              {
                v238 = (char *)*v9;
                v239 = (v214 - (_BYTE *)*v9) >> 2;
                v240 = v239 + 1;
                if ((unint64_t)(v239 + 1) >> 62)
LABEL_471:
                  sub_18F26F8C0();
                v241 = v2;
                v242 = v213 - (_QWORD)v238;
                if (v242 >> 1 > v240)
                  v240 = v242 >> 1;
                if ((unint64_t)v242 >= 0x7FFFFFFFFFFFFFFCLL)
                  v243 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v243 = v240;
                if (v243)
                {
                  v244 = (char *)sub_18F26FB8C(v289, v243);
                  v238 = *(char **)(a1 + 56);
                  v214 = *(char **)(a1 + 64);
                }
                else
                {
                  v244 = 0;
                }
                v279 = &v244[4 * v239];
                *(_DWORD *)v279 = 0;
                v212 = v279 + 4;
                while (v214 != v238)
                {
                  v280 = *((_DWORD *)v214 - 1);
                  v214 -= 4;
                  *((_DWORD *)v279 - 1) = v280;
                  v279 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v279;
                *(_QWORD *)(a1 + 64) = v212;
                *(_QWORD *)(a1 + 72) = &v244[4 * v243];
                if (v238)
                  operator delete(v238);
                v2 = v241;
              }
              else
              {
                *(_DWORD *)v214 = 0;
                v212 = v214 + 4;
              }
              *(_QWORD *)(a1 + 64) = v212;
              goto LABEL_455;
            }
            v88 = v2;
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v150 = *((_QWORD *)this + 1);
            v151 = *((_QWORD *)this + 2);
            while (v150 < v151 && !*((_BYTE *)this + 24))
            {
              v153 = *(char **)(a1 + 64);
              v152 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v153 >= v152)
              {
                v155 = (char *)*v9;
                v156 = (v153 - (_BYTE *)*v9) >> 2;
                v157 = v156 + 1;
                if ((unint64_t)(v156 + 1) >> 62)
                  goto LABEL_471;
                v158 = v152 - (_QWORD)v155;
                if (v158 >> 1 > v157)
                  v157 = v158 >> 1;
                if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL)
                  v159 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v159 = v157;
                if (v159)
                {
                  v160 = (char *)sub_18F26FB8C(v289, v159);
                  v155 = *(char **)(a1 + 56);
                  v153 = *(char **)(a1 + 64);
                }
                else
                {
                  v160 = 0;
                }
                v161 = &v160[4 * v156];
                *(_DWORD *)v161 = 0;
                v154 = v161 + 4;
                while (v153 != v155)
                {
                  v162 = *((_DWORD *)v153 - 1);
                  v153 -= 4;
                  *((_DWORD *)v161 - 1) = v162;
                  v161 -= 4;
                }
                *(_QWORD *)(a1 + 56) = v161;
                *(_QWORD *)(a1 + 64) = v154;
                *(_QWORD *)(a1 + 72) = &v160[4 * v159];
                if (v155)
                  operator delete(v155);
              }
              else
              {
                *(_DWORD *)v153 = 0;
                v154 = v153 + 4;
              }
              *(_QWORD *)(a1 + 64) = v154;
              v163 = *((_QWORD *)this + 1);
              if (v163 > 0xFFFFFFFFFFFFFFFBLL || v163 + 4 > *((_QWORD *)this + 2))
                goto LABEL_314;
              *(v154 - 1) = *(_DWORD *)(*(_QWORD *)this + v163);
              v151 = *((_QWORD *)this + 2);
              v150 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v150;
            }
            goto LABEL_316;
          case 209:
            if (v24 == 2)
            {
              v88 = v2;
              if ((PB::Reader::placeMark() & 1) != 0)
                return 0;
              v164 = *((_QWORD *)this + 1);
              v165 = *((_QWORD *)this + 2);
              while (v164 < v165 && !*((_BYTE *)this + 24))
              {
                v167 = *(char **)(a1 + 40);
                v166 = *(_QWORD *)(a1 + 48);
                if ((unint64_t)v167 >= v166)
                {
                  v169 = (char *)*v291;
                  v170 = (v167 - (_BYTE *)*v291) >> 2;
                  v171 = v170 + 1;
                  if ((unint64_t)(v170 + 1) >> 62)
                    goto LABEL_472;
                  v172 = v166 - (_QWORD)v169;
                  if (v172 >> 1 > v171)
                    v171 = v172 >> 1;
                  if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL)
                    v173 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v173 = v171;
                  if (v173)
                  {
                    v174 = (char *)sub_18F26FB8C(v290, v173);
                    v169 = *(char **)(a1 + 32);
                    v167 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v174 = 0;
                  }
                  v175 = &v174[4 * v170];
                  *(_DWORD *)v175 = 0;
                  v168 = v175 + 4;
                  while (v167 != v169)
                  {
                    v176 = *((_DWORD *)v167 - 1);
                    v167 -= 4;
                    *((_DWORD *)v175 - 1) = v176;
                    v175 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v175;
                  *(_QWORD *)(a1 + 40) = v168;
                  *(_QWORD *)(a1 + 48) = &v174[4 * v173];
                  if (v169)
                    operator delete(v169);
                }
                else
                {
                  *(_DWORD *)v167 = 0;
                  v168 = v167 + 4;
                }
                *(_QWORD *)(a1 + 40) = v168;
                v177 = *((_QWORD *)this + 1);
                if (v177 > 0xFFFFFFFFFFFFFFFBLL || v177 + 4 > *((_QWORD *)this + 2))
                {
LABEL_314:
                  *((_BYTE *)this + 24) = 1;
                  break;
                }
                *(v168 - 1) = *(_DWORD *)(*(_QWORD *)this + v177);
                v165 = *((_QWORD *)this + 2);
                v164 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v164;
              }
LABEL_316:
              PB::Reader::recallMark();
              v2 = v88;
              goto LABEL_460;
            }
            v216 = *(char **)(a1 + 40);
            v215 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v216 >= v215)
            {
              v245 = (char *)*v291;
              v246 = (v216 - (_BYTE *)*v291) >> 2;
              v247 = v246 + 1;
              if ((unint64_t)(v246 + 1) >> 62)
LABEL_472:
                sub_18F26F8C0();
              v248 = v2;
              v249 = v215 - (_QWORD)v245;
              if (v249 >> 1 > v247)
                v247 = v249 >> 1;
              if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL)
                v250 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v250 = v247;
              if (v250)
              {
                v251 = (char *)sub_18F26FB8C(v290, v250);
                v245 = *(char **)(a1 + 32);
                v216 = *(char **)(a1 + 40);
              }
              else
              {
                v251 = 0;
              }
              v281 = &v251[4 * v246];
              *(_DWORD *)v281 = 0;
              v212 = v281 + 4;
              while (v216 != v245)
              {
                v282 = *((_DWORD *)v216 - 1);
                v216 -= 4;
                *((_DWORD *)v281 - 1) = v282;
                v281 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v281;
              *(_QWORD *)(a1 + 40) = v212;
              *(_QWORD *)(a1 + 48) = &v251[4 * v250];
              if (v245)
                operator delete(v245);
              v2 = v248;
            }
            else
            {
              *(_DWORD *)v216 = 0;
              v212 = v216 + 4;
            }
            *(_QWORD *)(a1 + 40) = v212;
LABEL_455:
            v283 = *((_QWORD *)this + 1);
            if (v283 <= 0xFFFFFFFFFFFFFFFBLL && v283 + 4 <= *((_QWORD *)this + 2))
            {
              *(v212 - 1) = *(_DWORD *)(*(_QWORD *)this + v283);
              goto LABEL_459;
            }
            break;
          default:
            goto LABEL_256;
        }
      }
      else
      {
        switch((int)v25)
        {
          case 'e':
            *(_WORD *)(a1 + 204) |= 0x10u;
            v26 = *((_QWORD *)this + 1);
            v27 = *((_QWORD *)this + 2);
            v28 = *(_QWORD *)this;
            if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
            {
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v32 = v26 + 1;
                *((_QWORD *)this + 1) = v26 + 1;
                v33 = *(_BYTE *)(v28 + v26);
                v31 |= (unint64_t)(v33 & 0x7F) << v29;
                if ((v33 & 0x80) == 0)
                  goto LABEL_365;
                v29 += 7;
                v26 = v32;
                v102 = v30++ > 8;
              }
              while (!v102);
LABEL_264:
              v31 = 0;
              goto LABEL_365;
            }
            v181 = 0;
            v182 = 0;
            v31 = 0;
            if (v27 <= v26)
              v27 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v27 == v26)
              {
                v31 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v183 = v26 + 1;
                v184 = *(_BYTE *)(v28 + v26);
                *((_QWORD *)this + 1) = v183;
                v31 |= (unint64_t)(v184 & 0x7F) << v181;
                if (v184 < 0)
                {
                  v181 += 7;
                  v26 = v183;
                  v102 = v182++ > 8;
                  if (v102)
                    goto LABEL_264;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
              }
              break;
            }
LABEL_365:
            *(_QWORD *)(a1 + 160) = v31;
            goto LABEL_460;
          case 'f':
            *(_WORD *)(a1 + 204) |= 0x4000u;
            v43 = *((_QWORD *)this + 1);
            if (v43 >= *((_QWORD *)this + 2))
            {
              v46 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v44 = v43 + 1;
              v45 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
              *((_QWORD *)this + 1) = v44;
              v46 = v45 != 0;
            }
            *(_BYTE *)(a1 + 201) = v46;
            goto LABEL_460;
          case 'g':
            *(_WORD *)(a1 + 204) |= 0x400u;
            v47 = *((_QWORD *)this + 1);
            if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(_QWORD *)this + v47);
            goto LABEL_459;
          case 'h':
            *(_WORD *)(a1 + 204) |= 0x2000u;
            v48 = *((_QWORD *)this + 1);
            if (v48 >= *((_QWORD *)this + 2))
            {
              v51 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v49 = v48 + 1;
              v50 = *(unsigned __int8 *)(*(_QWORD *)this + v48);
              *((_QWORD *)this + 1) = v49;
              v51 = v50 != 0;
            }
            *(_BYTE *)(a1 + 200) = v51;
            goto LABEL_460;
          case 'i':
            *(_WORD *)(a1 + 204) |= 4u;
            v52 = *((_QWORD *)this + 1);
            v53 = *((_QWORD *)this + 2);
            v54 = *(_QWORD *)this;
            if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
            {
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v58 = v52 + 1;
                *((_QWORD *)this + 1) = v52 + 1;
                v59 = *(_BYTE *)(v54 + v52);
                v57 |= (unint64_t)(v59 & 0x7F) << v55;
                if ((v59 & 0x80) == 0)
                  goto LABEL_371;
                v55 += 7;
                v52 = v58;
                v102 = v56++ > 8;
              }
              while (!v102);
LABEL_282:
              v57 = 0;
              goto LABEL_371;
            }
            v189 = 0;
            v190 = 0;
            v57 = 0;
            if (v53 <= v52)
              v53 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v53 == v52)
              {
                v57 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v191 = v52 + 1;
                v192 = *(_BYTE *)(v54 + v52);
                *((_QWORD *)this + 1) = v191;
                v57 |= (unint64_t)(v192 & 0x7F) << v189;
                if (v192 < 0)
                {
                  v189 += 7;
                  v52 = v191;
                  v102 = v190++ > 8;
                  if (v102)
                    goto LABEL_282;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v57 = 0;
              }
              break;
            }
LABEL_371:
            *(_QWORD *)(a1 + 144) = v57;
            goto LABEL_460;
          case 'j':
            *(_WORD *)(a1 + 204) |= 8u;
            v60 = *((_QWORD *)this + 1);
            v61 = *((_QWORD *)this + 2);
            v62 = *(_QWORD *)this;
            if (v60 <= 0xFFFFFFFFFFFFFFF5 && v60 + 10 <= v61)
            {
              v63 = 0;
              v64 = 0;
              v65 = 0;
              do
              {
                v66 = v60 + 1;
                *((_QWORD *)this + 1) = v60 + 1;
                v67 = *(_BYTE *)(v62 + v60);
                v65 |= (unint64_t)(v67 & 0x7F) << v63;
                if ((v67 & 0x80) == 0)
                  goto LABEL_374;
                v63 += 7;
                v60 = v66;
                v102 = v64++ > 8;
              }
              while (!v102);
LABEL_289:
              v65 = 0;
              goto LABEL_374;
            }
            v193 = 0;
            v194 = 0;
            v65 = 0;
            if (v61 <= v60)
              v61 = *((_QWORD *)this + 1);
            while (2)
            {
              if (v61 == v60)
              {
                v65 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v195 = v60 + 1;
                v196 = *(_BYTE *)(v62 + v60);
                *((_QWORD *)this + 1) = v195;
                v65 |= (unint64_t)(v196 & 0x7F) << v193;
                if (v196 < 0)
                {
                  v193 += 7;
                  v60 = v195;
                  v102 = v194++ > 8;
                  if (v102)
                    goto LABEL_289;
                  continue;
                }
                if (*((_BYTE *)this + 24))
                  v65 = 0;
              }
              break;
            }
LABEL_374:
            *(_QWORD *)(a1 + 152) = v65;
            goto LABEL_460;
          case 'k':
            *(_WORD *)(a1 + 204) |= 0x100u;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(_QWORD *)this + v68);
            goto LABEL_459;
          case 'l':
            *(_WORD *)(a1 + 204) |= 0x80u;
            v69 = *((_QWORD *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(_QWORD *)this + v69);
            goto LABEL_459;
          case 'm':
            *(_WORD *)(a1 + 204) |= 0x40u;
            v70 = *((_QWORD *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              break;
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v70);
            goto LABEL_459;
          default:
            if ((_DWORD)v25 == 1)
            {
              *(_WORD *)(a1 + 204) |= 0x1000u;
              v178 = *((_QWORD *)this + 1);
              if (v178 <= 0xFFFFFFFFFFFFFFFBLL && v178 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v178);
                goto LABEL_459;
              }
            }
            else
            {
              if ((_DWORD)v25 != 2)
              {
LABEL_256:
                v179 = v2;
                v180 = PB::Reader::skip(this);
                v2 = v179;
                if ((v180 & 1) == 0)
                  return 0;
                goto LABEL_460;
              }
              *(_WORD *)(a1 + 204) |= 0x800u;
              v42 = *((_QWORD *)this + 1);
              if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(_QWORD *)this + v42);
LABEL_459:
                *((_QWORD *)this + 1) += 4;
                goto LABEL_460;
              }
            }
            break;
        }
      }
      *((_BYTE *)this + 24) = 1;
LABEL_460:
      v3 = *((_QWORD *)this + 1);
      v4 = *((_QWORD *)this + 2);
      v5 = *((unsigned __int8 *)this + 24);
      if (v3 >= v4 || v5 != 0)
        return v5 == 0;
    }
    v19 = 0;
    v20 = 0;
    v16 = 0;
    if (v3 > v4)
      v4 = v3;
    while (v4 != v3)
    {
      v21 = v3 + 1;
      v22 = *(_BYTE *)(v13 + v3);
      *((_QWORD *)this + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v3 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v5 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v5 == 0;
}

uint64_t sub_18F264B5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  float *v15;
  float *v16;
  float v17;

  v3 = result;
  v4 = *(_WORD *)(result + 204);
  if ((v4 & 0x1000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 196));
    v4 = *(_WORD *)(v3 + 204);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_35;
    }
  }
  else if ((*(_WORD *)(result + 204) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 192));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x4000) == 0)
      goto LABEL_5;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x4000) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0)
      goto LABEL_7;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 188));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0)
      goto LABEL_9;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0)
      goto LABEL_11;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 180));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 176));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x40) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0)
      goto LABEL_13;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::write(this, *(float *)(v3 + 172));
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0)
      goto LABEL_14;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0)
      goto LABEL_15;
LABEL_46:
    result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 204) & 0x20) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 204);
  if ((v4 & 0x200) != 0)
    goto LABEL_46;
LABEL_15:
  if ((v4 & 0x20) != 0)
LABEL_16:
    result = PB::Writer::write(this, *(float *)(v3 + 168));
LABEL_17:
  v5 = *(_QWORD *)(v3 + 80);
  v6 = *(_QWORD *)(v3 + 88);
  while (v5 != v6)
  {
    v5 += 8;
    result = PB::Writer::writeVarInt(this);
  }
  v7 = *(_QWORD *)(v3 + 104);
  v8 = *(_QWORD *)(v3 + 112);
  while (v7 != v8)
  {
    v7 += 8;
    result = PB::Writer::writeVarInt(this);
  }
  v9 = *(float **)(v3 + 8);
  v10 = *(float **)(v3 + 16);
  while (v9 != v10)
  {
    v11 = *v9++;
    result = PB::Writer::write(this, v11);
  }
  v12 = *(float **)(v3 + 56);
  v13 = *(float **)(v3 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    result = PB::Writer::write(this, v14);
  }
  v16 = *(float **)(v3 + 32);
  v15 = *(float **)(v3 + 40);
  while (v16 != v15)
  {
    v17 = *v16++;
    result = PB::Writer::write(this, v17);
  }
  return result;
}

uint64_t sub_18F264DC8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294C998;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F264DE0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F264E04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "stepCount");
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "pedometerArmConstrainedState");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F264ED4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v2 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F265438(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2654E8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E100;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_18F265500(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F265524(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 40));
    v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "hasSteps");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "pedometerArmConstrainedState");
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0)
      goto LABEL_9;
LABEL_19:
    PB::TextFormatter::format(this, "stepCountEventTimestamp");
    if ((*(_WORD *)(a1 + 60) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_10;
  }
LABEL_18:
  PB::TextFormatter::format(this, "stepCount", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
    goto LABEL_19;
LABEL_9:
  if ((v5 & 8) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F265674(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  uint64_t result;
  char v54;
  unsigned int v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  unint64_t v60;
  char v61;
  char v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 'e':
              *(_WORD *)(a1 + 60) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v54 = 0;
                v55 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  v56 = v21++;
                  v57 = *(_BYTE *)(v22 + v56);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v57 & 0x7F) << v54;
                  if ((v57 & 0x80) == 0)
                    break;
                  v54 += 7;
                  v14 = v55++ > 8;
                  if (v14)
                  {
                    v25 = 0;
                    goto LABEL_114;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
LABEL_114:
                v2 = v56 + 1;
              }
              else
              {
                v23 = 0;
                v24 = 0;
                v25 = 0;
                do
                {
                  v2 = v21 + 1;
                  *((_QWORD *)this + 1) = v21 + 1;
                  v26 = *(_BYTE *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0)
                    goto LABEL_115;
                  v23 += 7;
                  v21 = v2;
                  v14 = v24++ > 8;
                }
                while (!v14);
                v25 = 0;
              }
LABEL_115:
              *(_QWORD *)(a1 + 32) = v25;
              goto LABEL_136;
            case 'f':
              *(_WORD *)(a1 + 60) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 56) = v34;
              goto LABEL_136;
            case 'g':
              *(_WORD *)(a1 + 60) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_110;
            case 'h':
              *(_WORD *)(a1 + 60) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_48;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_110;
            case 'i':
              *(_WORD *)(a1 + 60) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_110:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_48:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_136;
            case 'j':
              *(_WORD *)(a1 + 60) |= 0x40u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v62 = 0;
                v63 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_125;
                  }
                  v64 = v35++;
                  v65 = *(_BYTE *)(v36 + v64);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v65 & 0x7F) << v62;
                  if ((v65 & 0x80) == 0)
                    break;
                  v62 += 7;
                  v14 = v63++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_124:
                    v2 = v64 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_124;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_125;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_125:
              *(_DWORD *)(a1 + 48) = v39;
              goto LABEL_136;
            case 'k':
              *(_WORD *)(a1 + 60) |= 4u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v66 = 0;
                v67 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    v45 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v68 = v41++;
                  v69 = *(_BYTE *)(v42 + v68);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v69 & 0x7F) << v66;
                  if ((v69 & 0x80) == 0)
                    break;
                  v66 += 7;
                  v14 = v67++ > 8;
                  if (v14)
                  {
                    v45 = 0;
LABEL_129:
                    v2 = v68 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v45 = 0;
                goto LABEL_129;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_130;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              v45 = 0;
LABEL_130:
              *(_QWORD *)(a1 + 24) = v45;
              goto LABEL_136;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(_WORD *)(a1 + 60) |= 1u;
                v47 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v48 = *(_QWORD *)this;
                if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
                {
                  v70 = 0;
                  v71 = 0;
                  v51 = 0;
                  if (v2 <= v47)
                    v2 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v2 == v47)
                    {
                      v51 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_135;
                    }
                    v72 = v47++;
                    v73 = *(_BYTE *)(v48 + v72);
                    *((_QWORD *)this + 1) = v47;
                    v51 |= (unint64_t)(v73 & 0x7F) << v70;
                    if ((v73 & 0x80) == 0)
                      break;
                    v70 += 7;
                    v14 = v71++ > 8;
                    if (v14)
                    {
                      v51 = 0;
                      goto LABEL_134;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v51 = 0;
LABEL_134:
                  v2 = v72 + 1;
                }
                else
                {
                  v49 = 0;
                  v50 = 0;
                  v51 = 0;
                  while (1)
                  {
                    v2 = v47 + 1;
                    *((_QWORD *)this + 1) = v47 + 1;
                    v52 = *(_BYTE *)(v48 + v47);
                    v51 |= (unint64_t)(v52 & 0x7F) << v49;
                    if ((v52 & 0x80) == 0)
                      break;
                    v49 += 7;
                    v47 = v2;
                    v14 = v50++ > 8;
                    if (v14)
                    {
                      v51 = 0;
                      break;
                    }
                  }
                }
LABEL_135:
                *(_QWORD *)(a1 + 8) = v51;
              }
              else if ((_DWORD)v20 == 202)
              {
                *(_WORD *)(a1 + 60) |= 2u;
                v27 = *((_QWORD *)this + 1);
                v2 = *((_QWORD *)this + 2);
                v28 = *(_QWORD *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  v58 = 0;
                  v59 = 0;
                  v31 = 0;
                  if (v2 <= v27)
                    v2 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v2 == v27)
                    {
                      v31 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_120;
                    }
                    v60 = v27++;
                    v61 = *(_BYTE *)(v28 + v60);
                    *((_QWORD *)this + 1) = v27;
                    v31 |= (unint64_t)(v61 & 0x7F) << v58;
                    if ((v61 & 0x80) == 0)
                      break;
                    v58 += 7;
                    v14 = v59++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      goto LABEL_119;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v31 = 0;
LABEL_119:
                  v2 = v60 + 1;
                }
                else
                {
                  v29 = 0;
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    v2 = v27 + 1;
                    *((_QWORD *)this + 1) = v27 + 1;
                    v32 = *(_BYTE *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0)
                      break;
                    v29 += 7;
                    v27 = v2;
                    v14 = v30++ > 8;
                    if (v14)
                    {
                      v31 = 0;
                      break;
                    }
                  }
                }
LABEL_120:
                *(_QWORD *)(a1 + 16) = v31;
              }
              else
              {
                result = PB::Reader::skip(this);
                if (!(_DWORD)result)
                  return result;
                v2 = *((_QWORD *)this + 1);
              }
LABEL_136:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F265D88(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 60) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F265EA8(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294CF80;
  *(_DWORD *)(a1 + 212) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_18F265ED4(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E294CF80;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F265F34(PB::Base *a1)
{
  sub_18F265ED4(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F265F58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;
  double *v6;
  double *v7;
  double v8;
  int v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  int v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgHorizontalDecelMax", *(double *)(a1 + 80));
    v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_45;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "avgHorizontalDecelThresholdCoupled", *(float *)(a1 + 112));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "btHint");
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "companionAopTs");
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "currentWindowMean", *(float *)(a1 + 120));
  v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_48:
  PB::TextFormatter::format(this, "enableMode");
  if ((*(_DWORD *)(a1 + 212) & 0x100) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "impactThresholdUncoupled", *(float *)(a1 + 128));
LABEL_9:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "inertialAccel", v8);
  }
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x10000000) != 0)
  {
    PB::TextFormatter::format(this, "isMounted");
    v9 = *(_DWORD *)(a1 + 212);
    if ((v9 & 0x20000000) == 0)
    {
LABEL_13:
      if ((v9 & 0x200) == 0)
        goto LABEL_14;
      goto LABEL_52;
    }
  }
  else if ((v9 & 0x20000000) == 0)
  {
    goto LABEL_13;
  }
  PB::TextFormatter::format(this, "isSimulated");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "lastCompleted15sWindowMean", *(float *)(a1 + 132));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x400) == 0)
  {
LABEL_15:
    if ((v9 & 0x40000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "locallyArmedBitmap");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v9 & 0x800) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "martyIsBicycle");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x800) == 0)
  {
LABEL_17:
    if ((v9 & 0x1000) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "martyTriggerPathBitmap");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x1000) == 0)
  {
LABEL_18:
    if ((v9 & 0x2000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "maxMeanTenMinPreTrigger", *(float *)(a1 + 144));
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x2000) == 0)
  {
LABEL_19:
    if ((v9 & 0x4000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "nAccelGap");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x4000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "nFullAccel");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "nFullDM");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x10000) == 0)
  {
LABEL_22:
    if ((v9 & 0x20000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "nOldAccel");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x20000) == 0)
  {
LABEL_23:
    if ((v9 & 0x40000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "nOldDM");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x40000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "nOldDt");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x80000) == 0)
  {
LABEL_25:
    if ((v9 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "nPrecondition");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x100000) == 0)
  {
LABEL_26:
    if ((v9 & 0x200000) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "nUseNearest");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x200000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "numMaxEnvelopes");
  v9 = *(_DWORD *)(a1 + 212);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x800000) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_66:
  PB::TextFormatter::format(this, "numResets");
  if ((*(_DWORD *)(a1 + 212) & 0x800000) != 0)
LABEL_29:
    PB::TextFormatter::format(this, "overrideArmedBitmap");
LABEL_30:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "prevQ", v12);
  }
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "rawClampedAccel", v15);
  }
  v16 = *(_DWORD *)(a1 + 212);
  if (v16 < 0)
  {
    PB::TextFormatter::format(this, "shouldTrigger");
    v16 = *(_DWORD *)(a1 + 212);
    if ((v16 & 4) == 0)
    {
LABEL_36:
      if ((v16 & 0x1000000) == 0)
        goto LABEL_37;
      goto LABEL_70;
    }
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_36;
  }
  PB::TextFormatter::format(this, "timestamp");
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_37:
    if ((v16 & 0x2000000) == 0)
      goto LABEL_38;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "triggerPathBitmap");
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x2000000) == 0)
  {
LABEL_38:
    if ((v16 & 0x4000000) == 0)
      goto LABEL_39;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 196));
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x4000000) == 0)
  {
LABEL_39:
    if ((v16 & 0x8000000) == 0)
      goto LABEL_40;
LABEL_73:
    PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 204));
    if ((*(_DWORD *)(a1 + 212) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_41;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 200));
  v16 = *(_DWORD *)(a1 + 212);
  if ((v16 & 0x8000000) != 0)
    goto LABEL_73;
LABEL_40:
  if ((v16 & 8) != 0)
LABEL_41:
    PB::TextFormatter::format(this, "vehicleProbabilityTs");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F26641C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  BOOL v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  int v84;
  BOOL v85;
  unint64_t v86;
  unint64_t v87;
  int v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  char v126;
  unsigned int v127;
  uint64_t v128;
  unint64_t v129;
  char v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char v142;
  unsigned int v143;
  uint64_t v144;
  unint64_t v145;
  char v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char v158;
  unsigned int v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  char v167;
  unsigned int v168;
  uint64_t v169;
  unint64_t v170;
  char v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  char v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  char v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  unint64_t v186;
  char v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  char v194;
  unsigned int v195;
  uint64_t v196;
  unint64_t v197;
  char v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  unint64_t v205;
  char v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  char v210;
  unsigned int v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  BOOL v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v225;
  unsigned int v226;
  uint64_t v227;
  unint64_t v228;
  char v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  char v233;
  unsigned int v234;
  uint64_t v235;
  unint64_t v236;
  char v237;
  unint64_t v238;
  unint64_t v239;
  uint64_t v240;
  char v241;
  unsigned int v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  char v246;
  unsigned int v247;
  unint64_t v248;
  char v249;
  unint64_t v250;
  char *v251;
  _QWORD *v252;
  unint64_t v253;
  char *v254;
  _DWORD *v255;
  unint64_t v256;
  char *v257;
  char v258;
  unsigned int v259;
  unint64_t v260;
  char v261;
  char v262;
  unsigned int v263;
  unint64_t v264;
  char v265;
  char v266;
  unsigned int v267;
  unint64_t v268;
  char v269;
  char v270;
  unsigned int v271;
  unint64_t v272;
  char v273;
  char v274;
  unsigned int v275;
  unint64_t v276;
  char v277;
  char v278;
  unsigned int v279;
  unint64_t v280;
  char v281;
  char v282;
  unsigned int v283;
  unint64_t v284;
  char v285;
  char v286;
  unsigned int v287;
  unint64_t v288;
  char v289;
  char v290;
  unsigned int v291;
  unint64_t v292;
  char v293;
  char v294;
  unsigned int v295;
  unint64_t v296;
  char v297;
  char v298;
  unsigned int v299;
  unint64_t v300;
  char v301;
  char v302;
  unsigned int v303;
  unint64_t v304;
  char v305;
  char v306;
  unsigned int v307;
  unint64_t v308;
  char v309;
  char v310;
  unsigned int v311;
  unint64_t v312;
  char v313;
  char v314;
  unsigned int v315;
  unint64_t v316;
  char v317;
  char v318;
  unsigned int v319;
  unint64_t v320;
  char v321;
  char v322;
  unsigned int v323;
  unint64_t v324;
  char v325;
  char v326;
  unsigned int v327;
  unint64_t v328;
  char v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unint64_t v334;
  char *v335;
  char *v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  char *v341;
  char *v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  unint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  unint64_t v350;
  uint64_t v351;
  char *v352;
  int v353;
  char *v354;
  int v355;
  unint64_t v356;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 56);
    v11 = a1 + 72;
    v12 = (void **)(a1 + 8);
    v13 = a1 + 24;
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v20 = v16++ > 8;
        if (v20)
          goto LABEL_20;
      }
LABEL_21:
      v26 = v17 & 7;
      if (v26 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 4u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_459;
              v30 += 7;
              v27 = v33;
              v20 = v31++ > 8;
            }
            while (!v20);
LABEL_271:
            v32 = 0;
            goto LABEL_459;
          }
          v246 = 0;
          v247 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              v32 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v248 = v27 + 1;
              v249 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v248;
              v32 |= (unint64_t)(v249 & 0x7F) << v246;
              if (v249 < 0)
              {
                v246 += 7;
                v27 = v248;
                v20 = v247++ > 8;
                if (v20)
                  goto LABEL_271;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v32 = 0;
            }
            break;
          }
LABEL_459:
          *(_QWORD *)(a1 + 96) = v32;
          goto LABEL_544;
        case 2u:
          *(_DWORD *)(a1 + 212) |= 0x80000000;
          v35 = *((_QWORD *)this + 1);
          if (v35 >= *((_QWORD *)this + 2))
          {
            v38 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v36 = v35 + 1;
            v37 = *(unsigned __int8 *)(*(_QWORD *)this + v35);
            *((_QWORD *)this + 1) = v36;
            v38 = v37 != 0;
          }
          *(_BYTE *)(a1 + 211) = v38;
          goto LABEL_544;
        case 3u:
          *(_DWORD *)(a1 + 212) |= 1u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v39);
          goto LABEL_523;
        case 4u:
          if (v26 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v40 = *((_QWORD *)this + 1);
            v41 = *((_QWORD *)this + 2);
            while (v40 < v41 && !*((_BYTE *)this + 24))
            {
              v43 = *(char **)(a1 + 16);
              v42 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*v12;
                v46 = (v43 - (_BYTE *)*v12) >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_554;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_18F26F8D4(v13, v49);
                  v45 = *(char **)(a1 + 8);
                  v43 = *(char **)(a1 + 16);
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = 0;
                v44 = v51 + 8;
                while (v43 != v45)
                {
                  v52 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v51;
                *(_QWORD *)(a1 + 16) = v44;
                *(_QWORD *)(a1 + 24) = &v50[8 * v49];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v43 = 0;
                v44 = v43 + 8;
              }
              *(_QWORD *)(a1 + 16) = v44;
              v53 = *((_QWORD *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
                goto LABEL_412;
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)this + v53);
              v41 = *((_QWORD *)this + 2);
              v40 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v40;
            }
            goto LABEL_413;
          }
          v251 = *(char **)(a1 + 16);
          v250 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v251 >= v250)
          {
            v330 = (char *)*v12;
            v331 = (v251 - (_BYTE *)*v12) >> 3;
            v332 = v331 + 1;
            if ((unint64_t)(v331 + 1) >> 61)
LABEL_554:
              sub_18F26F8C0();
            v333 = v250 - (_QWORD)v330;
            if (v333 >> 2 > v332)
              v332 = v333 >> 2;
            if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8)
              v334 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v334 = v332;
            if (v334)
            {
              v335 = (char *)sub_18F26F8D4(v13, v334);
              v330 = *(char **)(a1 + 8);
              v251 = *(char **)(a1 + 16);
            }
            else
            {
              v335 = 0;
            }
            v348 = &v335[8 * v331];
            *(_QWORD *)v348 = 0;
            v252 = v348 + 8;
            while (v251 != v330)
            {
              v349 = *((_QWORD *)v251 - 1);
              v251 -= 8;
              *((_QWORD *)v348 - 1) = v349;
              v348 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v348;
            *(_QWORD *)(a1 + 16) = v252;
            *(_QWORD *)(a1 + 24) = &v335[8 * v334];
            if (v330)
              operator delete(v330);
          }
          else
          {
            *(_QWORD *)v251 = 0;
            v252 = v251 + 8;
          }
          *(_QWORD *)(a1 + 16) = v252;
          v350 = *((_QWORD *)this + 1);
          if (v350 <= 0xFFFFFFFFFFFFFFF7 && v350 + 8 <= *((_QWORD *)this + 2))
          {
            *(v252 - 1) = *(_QWORD *)(*(_QWORD *)this + v350);
LABEL_523:
            v351 = *((_QWORD *)this + 1) + 8;
            goto LABEL_543;
          }
          goto LABEL_540;
        case 5u:
          if (v26 != 2)
          {
            v254 = *(char **)(a1 + 64);
            v253 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v254 >= v253)
            {
              v336 = (char *)*v10;
              v337 = (v254 - (_BYTE *)*v10) >> 2;
              v338 = v337 + 1;
              if ((unint64_t)(v337 + 1) >> 62)
LABEL_555:
                sub_18F26F8C0();
              v339 = v253 - (_QWORD)v336;
              if (v339 >> 1 > v338)
                v338 = v339 >> 1;
              if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFFCLL)
                v340 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v340 = v338;
              if (v340)
              {
                v341 = (char *)sub_18F26FB8C(v11, v340);
                v336 = *(char **)(a1 + 56);
                v254 = *(char **)(a1 + 64);
              }
              else
              {
                v341 = 0;
              }
              v352 = &v341[4 * v337];
              *(_DWORD *)v352 = 0;
              v255 = v352 + 4;
              while (v254 != v336)
              {
                v353 = *((_DWORD *)v254 - 1);
                v254 -= 4;
                *((_DWORD *)v352 - 1) = v353;
                v352 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v352;
              *(_QWORD *)(a1 + 64) = v255;
              *(_QWORD *)(a1 + 72) = &v341[4 * v340];
              if (v336)
                operator delete(v336);
            }
            else
            {
              *(_DWORD *)v254 = 0;
              v255 = v254 + 4;
            }
            *(_QWORD *)(a1 + 64) = v255;
            goto LABEL_538;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          while (v54 < v55 && !*((_BYTE *)this + 24))
          {
            v57 = *(char **)(a1 + 64);
            v56 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v10;
              v60 = (v57 - (_BYTE *)*v10) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_555;
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                v63 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_18F26FB8C(v11, v63);
                v59 = *(char **)(a1 + 56);
                v57 = *(char **)(a1 + 64);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[4 * v60];
              *(_DWORD *)v65 = 0;
              v58 = v65 + 4;
              while (v57 != v59)
              {
                v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v65;
              *(_QWORD *)(a1 + 64) = v58;
              *(_QWORD *)(a1 + 72) = &v64[4 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v57 = 0;
              v58 = v57 + 4;
            }
            *(_QWORD *)(a1 + 64) = v58;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
              goto LABEL_412;
            *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v67);
            v55 = *((_QWORD *)this + 2);
            v54 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v54;
          }
          goto LABEL_413;
        case 6u:
          if (v26 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v68 = *((_QWORD *)this + 1);
            v69 = *((_QWORD *)this + 2);
            while (v68 < v69 && !*((_BYTE *)this + 24))
            {
              v71 = *(char **)(a1 + 40);
              v70 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v71 >= v70)
              {
                v73 = (char *)*v8;
                v74 = (v71 - (_BYTE *)*v8) >> 2;
                v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 62)
                  goto LABEL_556;
                v76 = v70 - (_QWORD)v73;
                if (v76 >> 1 > v75)
                  v75 = v76 >> 1;
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                  v77 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v77 = v75;
                if (v77)
                {
                  v78 = (char *)sub_18F26FB8C(v9, v77);
                  v73 = *(char **)(a1 + 32);
                  v71 = *(char **)(a1 + 40);
                }
                else
                {
                  v78 = 0;
                }
                v79 = &v78[4 * v74];
                *(_DWORD *)v79 = 0;
                v72 = v79 + 4;
                while (v71 != v73)
                {
                  v80 = *((_DWORD *)v71 - 1);
                  v71 -= 4;
                  *((_DWORD *)v79 - 1) = v80;
                  v79 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v79;
                *(_QWORD *)(a1 + 40) = v72;
                *(_QWORD *)(a1 + 48) = &v78[4 * v77];
                if (v73)
                  operator delete(v73);
              }
              else
              {
                *(_DWORD *)v71 = 0;
                v72 = v71 + 4;
              }
              *(_QWORD *)(a1 + 40) = v72;
              v81 = *((_QWORD *)this + 1);
              if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
              {
LABEL_412:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v72 - 1) = *(_DWORD *)(*(_QWORD *)this + v81);
              v69 = *((_QWORD *)this + 2);
              v68 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v68;
            }
LABEL_413:
            PB::Reader::recallMark();
          }
          else
          {
            v257 = *(char **)(a1 + 40);
            v256 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v257 >= v256)
            {
              v342 = (char *)*v8;
              v343 = (v257 - (_BYTE *)*v8) >> 2;
              v344 = v343 + 1;
              if ((unint64_t)(v343 + 1) >> 62)
LABEL_556:
                sub_18F26F8C0();
              v345 = v256 - (_QWORD)v342;
              if (v345 >> 1 > v344)
                v344 = v345 >> 1;
              if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFFCLL)
                v346 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v346 = v344;
              if (v346)
              {
                v347 = (char *)sub_18F26FB8C(v9, v346);
                v342 = *(char **)(a1 + 32);
                v257 = *(char **)(a1 + 40);
              }
              else
              {
                v347 = 0;
              }
              v354 = &v347[4 * v343];
              *(_DWORD *)v354 = 0;
              v255 = v354 + 4;
              while (v257 != v342)
              {
                v355 = *((_DWORD *)v257 - 1);
                v257 -= 4;
                *((_DWORD *)v354 - 1) = v355;
                v354 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v354;
              *(_QWORD *)(a1 + 40) = v255;
              *(_QWORD *)(a1 + 48) = &v347[4 * v346];
              if (v342)
                operator delete(v342);
            }
            else
            {
              *(_DWORD *)v257 = 0;
              v255 = v257 + 4;
            }
            *(_QWORD *)(a1 + 40) = v255;
LABEL_538:
            v356 = *((_QWORD *)this + 1);
            if (v356 <= 0xFFFFFFFFFFFFFFFBLL && v356 + 4 <= *((_QWORD *)this + 2))
            {
              *(v255 - 1) = *(_DWORD *)(*(_QWORD *)this + v356);
LABEL_542:
              v351 = *((_QWORD *)this + 1) + 4;
LABEL_543:
              *((_QWORD *)this + 1) = v351;
            }
            else
            {
LABEL_540:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_544:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x10000000u;
          v82 = *((_QWORD *)this + 1);
          if (v82 >= *((_QWORD *)this + 2))
          {
            v85 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v83 = v82 + 1;
            v84 = *(unsigned __int8 *)(*(_QWORD *)this + v82);
            *((_QWORD *)this + 1) = v83;
            v85 = v84 != 0;
          }
          *(_BYTE *)(a1 + 208) = v85;
          goto LABEL_544;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x20000000u;
          v86 = *((_QWORD *)this + 1);
          if (v86 >= *((_QWORD *)this + 2))
          {
            v89 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v87 = v86 + 1;
            v88 = *(unsigned __int8 *)(*(_QWORD *)this + v86);
            *((_QWORD *)this + 1) = v87;
            v89 = v88 != 0;
          }
          *(_BYTE *)(a1 + 209) = v89;
          goto LABEL_544;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          v90 = *((_QWORD *)this + 1);
          v91 = *((_QWORD *)this + 2);
          v92 = *(_QWORD *)this;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            v93 = 0;
            v94 = 0;
            v95 = 0;
            do
            {
              v96 = v90 + 1;
              *((_QWORD *)this + 1) = v90 + 1;
              v97 = *(_BYTE *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0)
                goto LABEL_462;
              v93 += 7;
              v90 = v96;
              v20 = v94++ > 8;
            }
            while (!v20);
LABEL_290:
            LODWORD(v95) = 0;
            goto LABEL_462;
          }
          v258 = 0;
          v259 = 0;
          v95 = 0;
          if (v91 <= v90)
            v91 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v260 = v90 + 1;
              v261 = *(_BYTE *)(v92 + v90);
              *((_QWORD *)this + 1) = v260;
              v95 |= (unint64_t)(v261 & 0x7F) << v258;
              if (v261 < 0)
              {
                v258 += 7;
                v90 = v260;
                v20 = v259++ > 8;
                if (v20)
                  goto LABEL_290;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v95) = 0;
            }
            break;
          }
LABEL_462:
          *(_DWORD *)(a1 + 184) = v95;
          goto LABEL_544;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          v98 = *((_QWORD *)this + 1);
          if (v98 > 0xFFFFFFFFFFFFFFFBLL || v98 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v98);
          goto LABEL_542;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          v99 = *((_QWORD *)this + 1);
          v100 = *((_QWORD *)this + 2);
          v101 = *(_QWORD *)this;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            v102 = 0;
            v103 = 0;
            v104 = 0;
            do
            {
              v105 = v99 + 1;
              *((_QWORD *)this + 1) = v99 + 1;
              v106 = *(_BYTE *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0)
                goto LABEL_465;
              v102 += 7;
              v99 = v105;
              v20 = v103++ > 8;
            }
            while (!v20);
LABEL_297:
            LODWORD(v104) = 0;
            goto LABEL_465;
          }
          v262 = 0;
          v263 = 0;
          v104 = 0;
          if (v100 <= v99)
            v100 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v264 = v99 + 1;
              v265 = *(_BYTE *)(v101 + v99);
              *((_QWORD *)this + 1) = v264;
              v104 |= (unint64_t)(v265 & 0x7F) << v262;
              if (v265 < 0)
              {
                v262 += 7;
                v99 = v264;
                v20 = v263++ > 8;
                if (v20)
                  goto LABEL_297;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v104) = 0;
            }
            break;
          }
LABEL_465:
          *(_DWORD *)(a1 + 172) = v104;
          goto LABEL_544;
        case 0xCu:
          *(_DWORD *)(a1 + 212) |= 0x40000u;
          v107 = *((_QWORD *)this + 1);
          v108 = *((_QWORD *)this + 2);
          v109 = *(_QWORD *)this;
          if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
          {
            v110 = 0;
            v111 = 0;
            v112 = 0;
            do
            {
              v113 = v107 + 1;
              *((_QWORD *)this + 1) = v107 + 1;
              v114 = *(_BYTE *)(v109 + v107);
              v112 |= (unint64_t)(v114 & 0x7F) << v110;
              if ((v114 & 0x80) == 0)
                goto LABEL_468;
              v110 += 7;
              v107 = v113;
              v20 = v111++ > 8;
            }
            while (!v20);
LABEL_304:
            LODWORD(v112) = 0;
            goto LABEL_468;
          }
          v266 = 0;
          v267 = 0;
          v112 = 0;
          if (v108 <= v107)
            v108 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v108 == v107)
            {
              LODWORD(v112) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v268 = v107 + 1;
              v269 = *(_BYTE *)(v109 + v107);
              *((_QWORD *)this + 1) = v268;
              v112 |= (unint64_t)(v269 & 0x7F) << v266;
              if (v269 < 0)
              {
                v266 += 7;
                v107 = v268;
                v20 = v267++ > 8;
                if (v20)
                  goto LABEL_304;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v112) = 0;
            }
            break;
          }
LABEL_468:
          *(_DWORD *)(a1 + 168) = v112;
          goto LABEL_544;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          v115 = *((_QWORD *)this + 1);
          v116 = *((_QWORD *)this + 2);
          v117 = *(_QWORD *)this;
          if (v115 <= 0xFFFFFFFFFFFFFFF5 && v115 + 10 <= v116)
          {
            v118 = 0;
            v119 = 0;
            v120 = 0;
            do
            {
              v121 = v115 + 1;
              *((_QWORD *)this + 1) = v115 + 1;
              v122 = *(_BYTE *)(v117 + v115);
              v120 |= (unint64_t)(v122 & 0x7F) << v118;
              if ((v122 & 0x80) == 0)
                goto LABEL_471;
              v118 += 7;
              v115 = v121;
              v20 = v119++ > 8;
            }
            while (!v20);
LABEL_311:
            LODWORD(v120) = 0;
            goto LABEL_471;
          }
          v270 = 0;
          v271 = 0;
          v120 = 0;
          if (v116 <= v115)
            v116 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v116 == v115)
            {
              LODWORD(v120) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v272 = v115 + 1;
              v273 = *(_BYTE *)(v117 + v115);
              *((_QWORD *)this + 1) = v272;
              v120 |= (unint64_t)(v273 & 0x7F) << v270;
              if (v273 < 0)
              {
                v270 += 7;
                v115 = v272;
                v20 = v271++ > 8;
                if (v20)
                  goto LABEL_311;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v120) = 0;
            }
            break;
          }
LABEL_471:
          *(_DWORD *)(a1 + 164) = v120;
          goto LABEL_544;
        case 0xEu:
          *(_DWORD *)(a1 + 212) |= 0x10000u;
          v123 = *((_QWORD *)this + 1);
          v124 = *((_QWORD *)this + 2);
          v125 = *(_QWORD *)this;
          if (v123 <= 0xFFFFFFFFFFFFFFF5 && v123 + 10 <= v124)
          {
            v126 = 0;
            v127 = 0;
            v128 = 0;
            do
            {
              v129 = v123 + 1;
              *((_QWORD *)this + 1) = v123 + 1;
              v130 = *(_BYTE *)(v125 + v123);
              v128 |= (unint64_t)(v130 & 0x7F) << v126;
              if ((v130 & 0x80) == 0)
                goto LABEL_474;
              v126 += 7;
              v123 = v129;
              v20 = v127++ > 8;
            }
            while (!v20);
LABEL_318:
            LODWORD(v128) = 0;
            goto LABEL_474;
          }
          v274 = 0;
          v275 = 0;
          v128 = 0;
          if (v124 <= v123)
            v124 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v124 == v123)
            {
              LODWORD(v128) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v276 = v123 + 1;
              v277 = *(_BYTE *)(v125 + v123);
              *((_QWORD *)this + 1) = v276;
              v128 |= (unint64_t)(v277 & 0x7F) << v274;
              if (v277 < 0)
              {
                v274 += 7;
                v123 = v276;
                v20 = v275++ > 8;
                if (v20)
                  goto LABEL_318;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v128) = 0;
            }
            break;
          }
LABEL_474:
          *(_DWORD *)(a1 + 160) = v128;
          goto LABEL_544;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          v131 = *((_QWORD *)this + 1);
          v132 = *((_QWORD *)this + 2);
          v133 = *(_QWORD *)this;
          if (v131 <= 0xFFFFFFFFFFFFFFF5 && v131 + 10 <= v132)
          {
            v134 = 0;
            v135 = 0;
            v136 = 0;
            do
            {
              v137 = v131 + 1;
              *((_QWORD *)this + 1) = v131 + 1;
              v138 = *(_BYTE *)(v133 + v131);
              v136 |= (unint64_t)(v138 & 0x7F) << v134;
              if ((v138 & 0x80) == 0)
                goto LABEL_477;
              v134 += 7;
              v131 = v137;
              v20 = v135++ > 8;
            }
            while (!v20);
LABEL_325:
            LODWORD(v136) = 0;
            goto LABEL_477;
          }
          v278 = 0;
          v279 = 0;
          v136 = 0;
          if (v132 <= v131)
            v132 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v132 == v131)
            {
              LODWORD(v136) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v280 = v131 + 1;
              v281 = *(_BYTE *)(v133 + v131);
              *((_QWORD *)this + 1) = v280;
              v136 |= (unint64_t)(v281 & 0x7F) << v278;
              if (v281 < 0)
              {
                v278 += 7;
                v131 = v280;
                v20 = v279++ > 8;
                if (v20)
                  goto LABEL_325;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v136) = 0;
            }
            break;
          }
LABEL_477:
          *(_DWORD *)(a1 + 156) = v136;
          goto LABEL_544;
        case 0x10u:
          *(_DWORD *)(a1 + 212) |= 0x4000u;
          v139 = *((_QWORD *)this + 1);
          v140 = *((_QWORD *)this + 2);
          v141 = *(_QWORD *)this;
          if (v139 <= 0xFFFFFFFFFFFFFFF5 && v139 + 10 <= v140)
          {
            v142 = 0;
            v143 = 0;
            v144 = 0;
            do
            {
              v145 = v139 + 1;
              *((_QWORD *)this + 1) = v139 + 1;
              v146 = *(_BYTE *)(v141 + v139);
              v144 |= (unint64_t)(v146 & 0x7F) << v142;
              if ((v146 & 0x80) == 0)
                goto LABEL_480;
              v142 += 7;
              v139 = v145;
              v20 = v143++ > 8;
            }
            while (!v20);
LABEL_332:
            LODWORD(v144) = 0;
            goto LABEL_480;
          }
          v282 = 0;
          v283 = 0;
          v144 = 0;
          if (v140 <= v139)
            v140 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v140 == v139)
            {
              LODWORD(v144) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v284 = v139 + 1;
              v285 = *(_BYTE *)(v141 + v139);
              *((_QWORD *)this + 1) = v284;
              v144 |= (unint64_t)(v285 & 0x7F) << v282;
              if (v285 < 0)
              {
                v282 += 7;
                v139 = v284;
                v20 = v283++ > 8;
                if (v20)
                  goto LABEL_332;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v144) = 0;
            }
            break;
          }
LABEL_480:
          *(_DWORD *)(a1 + 152) = v144;
          goto LABEL_544;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          v147 = *((_QWORD *)this + 1);
          v148 = *((_QWORD *)this + 2);
          v149 = *(_QWORD *)this;
          if (v147 <= 0xFFFFFFFFFFFFFFF5 && v147 + 10 <= v148)
          {
            v150 = 0;
            v151 = 0;
            v152 = 0;
            do
            {
              v153 = v147 + 1;
              *((_QWORD *)this + 1) = v147 + 1;
              v154 = *(_BYTE *)(v149 + v147);
              v152 |= (unint64_t)(v154 & 0x7F) << v150;
              if ((v154 & 0x80) == 0)
                goto LABEL_483;
              v150 += 7;
              v147 = v153;
              v20 = v151++ > 8;
            }
            while (!v20);
LABEL_339:
            LODWORD(v152) = 0;
            goto LABEL_483;
          }
          v286 = 0;
          v287 = 0;
          v152 = 0;
          if (v148 <= v147)
            v148 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v148 == v147)
            {
              LODWORD(v152) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v288 = v147 + 1;
              v289 = *(_BYTE *)(v149 + v147);
              *((_QWORD *)this + 1) = v288;
              v152 |= (unint64_t)(v289 & 0x7F) << v286;
              if (v289 < 0)
              {
                v286 += 7;
                v147 = v288;
                v20 = v287++ > 8;
                if (v20)
                  goto LABEL_339;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v152) = 0;
            }
            break;
          }
LABEL_483:
          *(_DWORD *)(a1 + 148) = v152;
          goto LABEL_544;
        case 0x12u:
          *(_DWORD *)(a1 + 212) |= 0x100000u;
          v155 = *((_QWORD *)this + 1);
          v156 = *((_QWORD *)this + 2);
          v157 = *(_QWORD *)this;
          if (v155 <= 0xFFFFFFFFFFFFFFF5 && v155 + 10 <= v156)
          {
            v158 = 0;
            v159 = 0;
            v160 = 0;
            do
            {
              v161 = v155 + 1;
              *((_QWORD *)this + 1) = v155 + 1;
              v162 = *(_BYTE *)(v157 + v155);
              v160 |= (unint64_t)(v162 & 0x7F) << v158;
              if ((v162 & 0x80) == 0)
                goto LABEL_486;
              v158 += 7;
              v155 = v161;
              v20 = v159++ > 8;
            }
            while (!v20);
LABEL_346:
            LODWORD(v160) = 0;
            goto LABEL_486;
          }
          v290 = 0;
          v291 = 0;
          v160 = 0;
          if (v156 <= v155)
            v156 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v156 == v155)
            {
              LODWORD(v160) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v292 = v155 + 1;
              v293 = *(_BYTE *)(v157 + v155);
              *((_QWORD *)this + 1) = v292;
              v160 |= (unint64_t)(v293 & 0x7F) << v290;
              if (v293 < 0)
              {
                v290 += 7;
                v155 = v292;
                v20 = v291++ > 8;
                if (v20)
                  goto LABEL_346;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v160) = 0;
            }
            break;
          }
LABEL_486:
          *(_DWORD *)(a1 + 176) = v160;
          goto LABEL_544;
        case 0x13u:
          *(_DWORD *)(a1 + 212) |= 0x100u;
          v163 = *((_QWORD *)this + 1);
          if (v163 > 0xFFFFFFFFFFFFFFFBLL || v163 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v163);
          goto LABEL_542;
        case 0x14u:
          *(_DWORD *)(a1 + 212) |= 0x1000000u;
          v164 = *((_QWORD *)this + 1);
          v165 = *((_QWORD *)this + 2);
          v166 = *(_QWORD *)this;
          if (v164 <= 0xFFFFFFFFFFFFFFF5 && v164 + 10 <= v165)
          {
            v167 = 0;
            v168 = 0;
            v169 = 0;
            do
            {
              v170 = v164 + 1;
              *((_QWORD *)this + 1) = v164 + 1;
              v171 = *(_BYTE *)(v166 + v164);
              v169 |= (unint64_t)(v171 & 0x7F) << v167;
              if ((v171 & 0x80) == 0)
                goto LABEL_489;
              v167 += 7;
              v164 = v170;
              v20 = v168++ > 8;
            }
            while (!v20);
LABEL_353:
            LODWORD(v169) = 0;
            goto LABEL_489;
          }
          v294 = 0;
          v295 = 0;
          v169 = 0;
          if (v165 <= v164)
            v165 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v165 == v164)
            {
              LODWORD(v169) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v296 = v164 + 1;
              v297 = *(_BYTE *)(v166 + v164);
              *((_QWORD *)this + 1) = v296;
              v169 |= (unint64_t)(v297 & 0x7F) << v294;
              if (v297 < 0)
              {
                v294 += 7;
                v164 = v296;
                v20 = v295++ > 8;
                if (v20)
                  goto LABEL_353;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v169) = 0;
            }
            break;
          }
LABEL_489:
          *(_DWORD *)(a1 + 192) = v169;
          goto LABEL_544;
        case 0x15u:
          *(_DWORD *)(a1 + 212) |= 0x20u;
          v172 = *((_QWORD *)this + 1);
          v173 = *((_QWORD *)this + 2);
          v174 = *(_QWORD *)this;
          if (v172 <= 0xFFFFFFFFFFFFFFF5 && v172 + 10 <= v173)
          {
            v175 = 0;
            v176 = 0;
            v177 = 0;
            do
            {
              v178 = v172 + 1;
              *((_QWORD *)this + 1) = v172 + 1;
              v179 = *(_BYTE *)(v174 + v172);
              v177 |= (unint64_t)(v179 & 0x7F) << v175;
              if ((v179 & 0x80) == 0)
                goto LABEL_492;
              v175 += 7;
              v172 = v178;
              v20 = v176++ > 8;
            }
            while (!v20);
LABEL_360:
            LODWORD(v177) = 0;
            goto LABEL_492;
          }
          v298 = 0;
          v299 = 0;
          v177 = 0;
          if (v173 <= v172)
            v173 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v173 == v172)
            {
              LODWORD(v177) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v300 = v172 + 1;
              v301 = *(_BYTE *)(v174 + v172);
              *((_QWORD *)this + 1) = v300;
              v177 |= (unint64_t)(v301 & 0x7F) << v298;
              if (v301 < 0)
              {
                v298 += 7;
                v172 = v300;
                v20 = v299++ > 8;
                if (v20)
                  goto LABEL_360;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v177) = 0;
            }
            break;
          }
LABEL_492:
          *(_DWORD *)(a1 + 116) = v177;
          goto LABEL_544;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 8u;
          v180 = *((_QWORD *)this + 1);
          v181 = *((_QWORD *)this + 2);
          v182 = *(_QWORD *)this;
          if (v180 <= 0xFFFFFFFFFFFFFFF5 && v180 + 10 <= v181)
          {
            v183 = 0;
            v184 = 0;
            v185 = 0;
            do
            {
              v186 = v180 + 1;
              *((_QWORD *)this + 1) = v180 + 1;
              v187 = *(_BYTE *)(v182 + v180);
              v185 |= (unint64_t)(v187 & 0x7F) << v183;
              if ((v187 & 0x80) == 0)
                goto LABEL_495;
              v183 += 7;
              v180 = v186;
              v20 = v184++ > 8;
            }
            while (!v20);
LABEL_367:
            v185 = 0;
            goto LABEL_495;
          }
          v302 = 0;
          v303 = 0;
          v185 = 0;
          if (v181 <= v180)
            v181 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v181 == v180)
            {
              v185 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v304 = v180 + 1;
              v305 = *(_BYTE *)(v182 + v180);
              *((_QWORD *)this + 1) = v304;
              v185 |= (unint64_t)(v305 & 0x7F) << v302;
              if (v305 < 0)
              {
                v302 += 7;
                v180 = v304;
                v20 = v303++ > 8;
                if (v20)
                  goto LABEL_367;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v185 = 0;
            }
            break;
          }
LABEL_495:
          *(_QWORD *)(a1 + 104) = v185;
          goto LABEL_544;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          v188 = *((_QWORD *)this + 1);
          if (v188 > 0xFFFFFFFFFFFFFFFBLL || v188 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(_QWORD *)this + v188);
          goto LABEL_542;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x4000000u;
          v189 = *((_QWORD *)this + 1);
          if (v189 > 0xFFFFFFFFFFFFFFFBLL || v189 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(_QWORD *)this + v189);
          goto LABEL_542;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x8000000u;
          v190 = *((_QWORD *)this + 1);
          if (v190 > 0xFFFFFFFFFFFFFFFBLL || v190 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(_QWORD *)this + v190);
          goto LABEL_542;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          v191 = *((_QWORD *)this + 1);
          v192 = *((_QWORD *)this + 2);
          v193 = *(_QWORD *)this;
          if (v191 <= 0xFFFFFFFFFFFFFFF5 && v191 + 10 <= v192)
          {
            v194 = 0;
            v195 = 0;
            v196 = 0;
            do
            {
              v197 = v191 + 1;
              *((_QWORD *)this + 1) = v191 + 1;
              v198 = *(_BYTE *)(v193 + v191);
              v196 |= (unint64_t)(v198 & 0x7F) << v194;
              if ((v198 & 0x80) == 0)
                goto LABEL_498;
              v194 += 7;
              v191 = v197;
              v20 = v195++ > 8;
            }
            while (!v20);
LABEL_374:
            LODWORD(v196) = 0;
            goto LABEL_498;
          }
          v306 = 0;
          v307 = 0;
          v196 = 0;
          if (v192 <= v191)
            v192 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v192 == v191)
            {
              LODWORD(v196) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v308 = v191 + 1;
              v309 = *(_BYTE *)(v193 + v191);
              *((_QWORD *)this + 1) = v308;
              v196 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                v191 = v308;
                v20 = v307++ > 8;
                if (v20)
                  goto LABEL_374;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v196) = 0;
            }
            break;
          }
LABEL_498:
          *(_DWORD *)(a1 + 140) = v196;
          goto LABEL_544;
        case 0x1Bu:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          v199 = *((_QWORD *)this + 1);
          v200 = *((_QWORD *)this + 2);
          v201 = *(_QWORD *)this;
          if (v199 <= 0xFFFFFFFFFFFFFFF5 && v199 + 10 <= v200)
          {
            v202 = 0;
            v203 = 0;
            v204 = 0;
            do
            {
              v205 = v199 + 1;
              *((_QWORD *)this + 1) = v199 + 1;
              v206 = *(_BYTE *)(v201 + v199);
              v204 |= (unint64_t)(v206 & 0x7F) << v202;
              if ((v206 & 0x80) == 0)
                goto LABEL_501;
              v202 += 7;
              v199 = v205;
              v20 = v203++ > 8;
            }
            while (!v20);
LABEL_381:
            LODWORD(v204) = 0;
            goto LABEL_501;
          }
          v310 = 0;
          v311 = 0;
          v204 = 0;
          if (v200 <= v199)
            v200 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v200 == v199)
            {
              LODWORD(v204) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v312 = v199 + 1;
              v313 = *(_BYTE *)(v201 + v199);
              *((_QWORD *)this + 1) = v312;
              v204 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                v199 = v312;
                v20 = v311++ > 8;
                if (v20)
                  goto LABEL_381;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v204) = 0;
            }
            break;
          }
LABEL_501:
          *(_DWORD *)(a1 + 124) = v204;
          goto LABEL_544;
        case 0x1Cu:
          *(_DWORD *)(a1 + 212) |= 2u;
          v207 = *((_QWORD *)this + 1);
          v208 = *((_QWORD *)this + 2);
          v209 = *(_QWORD *)this;
          if (v207 <= 0xFFFFFFFFFFFFFFF5 && v207 + 10 <= v208)
          {
            v210 = 0;
            v211 = 0;
            v212 = 0;
            do
            {
              v213 = v207 + 1;
              *((_QWORD *)this + 1) = v207 + 1;
              v214 = *(_BYTE *)(v209 + v207);
              v212 |= (unint64_t)(v214 & 0x7F) << v210;
              if ((v214 & 0x80) == 0)
                goto LABEL_504;
              v210 += 7;
              v207 = v213;
              v20 = v211++ > 8;
            }
            while (!v20);
LABEL_388:
            v212 = 0;
            goto LABEL_504;
          }
          v314 = 0;
          v315 = 0;
          v212 = 0;
          if (v208 <= v207)
            v208 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v208 == v207)
            {
              v212 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v316 = v207 + 1;
              v317 = *(_BYTE *)(v209 + v207);
              *((_QWORD *)this + 1) = v316;
              v212 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                v207 = v316;
                v20 = v315++ > 8;
                if (v20)
                  goto LABEL_388;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v212 = 0;
            }
            break;
          }
LABEL_504:
          *(_QWORD *)(a1 + 88) = v212;
          goto LABEL_544;
        case 0x1Du:
          *(_DWORD *)(a1 + 212) |= 0x40000000u;
          v215 = *((_QWORD *)this + 1);
          if (v215 >= *((_QWORD *)this + 2))
          {
            v218 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v216 = v215 + 1;
            v217 = *(unsigned __int8 *)(*(_QWORD *)this + v215);
            *((_QWORD *)this + 1) = v216;
            v218 = v217 != 0;
          }
          *(_BYTE *)(a1 + 210) = v218;
          goto LABEL_544;
        case 0x1Eu:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          v219 = *((_QWORD *)this + 1);
          if (v219 > 0xFFFFFFFFFFFFFFFBLL || v219 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v219);
          goto LABEL_542;
        case 0x1Fu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          v220 = *((_QWORD *)this + 1);
          if (v220 > 0xFFFFFFFFFFFFFFFBLL || v220 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v220);
          goto LABEL_542;
        case 0x20u:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          v221 = *((_QWORD *)this + 1);
          if (v221 > 0xFFFFFFFFFFFFFFFBLL || v221 + 4 > *((_QWORD *)this + 2))
            goto LABEL_540;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v221);
          goto LABEL_542;
        case 0x21u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          v222 = *((_QWORD *)this + 1);
          v223 = *((_QWORD *)this + 2);
          v224 = *(_QWORD *)this;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            v225 = 0;
            v226 = 0;
            v227 = 0;
            do
            {
              v228 = v222 + 1;
              *((_QWORD *)this + 1) = v222 + 1;
              v229 = *(_BYTE *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0)
                goto LABEL_507;
              v225 += 7;
              v222 = v228;
              v20 = v226++ > 8;
            }
            while (!v20);
LABEL_397:
            LODWORD(v227) = 0;
            goto LABEL_507;
          }
          v318 = 0;
          v319 = 0;
          v227 = 0;
          if (v223 <= v222)
            v223 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v223 == v222)
            {
              LODWORD(v227) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v320 = v222 + 1;
              v321 = *(_BYTE *)(v224 + v222);
              *((_QWORD *)this + 1) = v320;
              v227 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                v222 = v320;
                v20 = v319++ > 8;
                if (v20)
                  goto LABEL_397;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v227) = 0;
            }
            break;
          }
LABEL_507:
          *(_DWORD *)(a1 + 180) = v227;
          goto LABEL_544;
        case 0x22u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          v230 = *((_QWORD *)this + 1);
          v231 = *((_QWORD *)this + 2);
          v232 = *(_QWORD *)this;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            v233 = 0;
            v234 = 0;
            v235 = 0;
            do
            {
              v236 = v230 + 1;
              *((_QWORD *)this + 1) = v230 + 1;
              v237 = *(_BYTE *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0)
                goto LABEL_510;
              v233 += 7;
              v230 = v236;
              v20 = v234++ > 8;
            }
            while (!v20);
LABEL_404:
            LODWORD(v235) = 0;
            goto LABEL_510;
          }
          v322 = 0;
          v323 = 0;
          v235 = 0;
          if (v231 <= v230)
            v231 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v231 == v230)
            {
              LODWORD(v235) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v324 = v230 + 1;
              v325 = *(_BYTE *)(v232 + v230);
              *((_QWORD *)this + 1) = v324;
              v235 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                v230 = v324;
                v20 = v323++ > 8;
                if (v20)
                  goto LABEL_404;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v235) = 0;
            }
            break;
          }
LABEL_510:
          *(_DWORD *)(a1 + 136) = v235;
          goto LABEL_544;
        case 0x23u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          v238 = *((_QWORD *)this + 1);
          v239 = *((_QWORD *)this + 2);
          v240 = *(_QWORD *)this;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            v241 = 0;
            v242 = 0;
            v243 = 0;
            do
            {
              v244 = v238 + 1;
              *((_QWORD *)this + 1) = v238 + 1;
              v245 = *(_BYTE *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0)
                goto LABEL_513;
              v241 += 7;
              v238 = v244;
              v20 = v242++ > 8;
            }
            while (!v20);
LABEL_411:
            LODWORD(v243) = 0;
            goto LABEL_513;
          }
          v326 = 0;
          v327 = 0;
          v243 = 0;
          if (v239 <= v238)
            v239 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v239 == v238)
            {
              LODWORD(v243) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v328 = v238 + 1;
              v329 = *(_BYTE *)(v240 + v238);
              *((_QWORD *)this + 1) = v328;
              v243 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                v238 = v328;
                v20 = v327++ > 8;
                if (v20)
                  goto LABEL_411;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v243) = 0;
            }
            break;
          }
LABEL_513:
          *(_DWORD *)(a1 + 188) = v243;
          goto LABEL_544;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_544;
      }
    }
    v21 = 0;
    v22 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v23 = v2 + 1;
      v24 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0)
        goto LABEL_21;
      v21 += 7;
      v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F267FBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  int v14;

  v3 = result;
  v4 = *(_DWORD *)(result + 212);
  if ((v4 & 4) == 0)
  {
    if ((v4 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_45:
    result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 212) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 212);
  if (v4 < 0)
    goto LABEL_45;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 80));
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000000) != 0)
  {
    result = PB::Writer::write(this);
    v14 = *(_DWORD *)(v3 + 212);
    if ((v14 & 0x20000000) == 0)
    {
LABEL_16:
      if ((v14 & 0x400000) == 0)
        goto LABEL_17;
      goto LABEL_49;
    }
  }
  else if ((v14 & 0x20000000) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::write(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400000) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 0x80000) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80000) == 0)
  {
LABEL_19:
    if ((v14 & 0x40000) == 0)
      goto LABEL_20;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000) == 0)
  {
LABEL_20:
    if ((v14 & 0x20000) == 0)
      goto LABEL_21;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20000) == 0)
  {
LABEL_21:
    if ((v14 & 0x10000) == 0)
      goto LABEL_22;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x10000) == 0)
  {
LABEL_22:
    if ((v14 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000) == 0)
  {
LABEL_23:
    if ((v14 & 0x4000) == 0)
      goto LABEL_24;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000) == 0)
  {
LABEL_24:
    if ((v14 & 0x2000) == 0)
      goto LABEL_25;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000) == 0)
  {
LABEL_25:
    if ((v14 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100000) == 0)
  {
LABEL_26:
    if ((v14 & 0x100) == 0)
      goto LABEL_27;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x100) == 0)
  {
LABEL_27:
    if ((v14 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v14 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x20) == 0)
  {
LABEL_29:
    if ((v14 & 8) == 0)
      goto LABEL_30;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 8) == 0)
  {
LABEL_30:
    if ((v14 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v14 & 0x4000000) == 0)
      goto LABEL_32;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 196));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_33;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 200));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v14 & 0x800) == 0)
      goto LABEL_34;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 204));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x800) == 0)
  {
LABEL_34:
    if ((v14 & 0x80) == 0)
      goto LABEL_35;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x80) == 0)
  {
LABEL_35:
    if ((v14 & 2) == 0)
      goto LABEL_36;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 2) == 0)
  {
LABEL_36:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_37;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v14 & 0x1000) == 0)
      goto LABEL_38;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::write(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x1000) == 0)
  {
LABEL_38:
    if ((v14 & 0x200) == 0)
      goto LABEL_39;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200) == 0)
  {
LABEL_39:
    if ((v14 & 0x40) == 0)
      goto LABEL_40;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x40) == 0)
  {
LABEL_40:
    if ((v14 & 0x200000) == 0)
      goto LABEL_41;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 120));
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x200000) == 0)
  {
LABEL_41:
    if ((v14 & 0x400) == 0)
      goto LABEL_42;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_DWORD *)(v3 + 212);
  if ((v14 & 0x400) == 0)
  {
LABEL_42:
    if ((v14 & 0x800000) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_74:
  result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 212) & 0x800000) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2683CC(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950908;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_18F2683E4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F268408(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "armedDuration");
    v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
      goto LABEL_21;
    }
  }
  else if ((*(_WORD *)(a1 + 96) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "armedDurationThreshold", *(float *)(a1 + 72));
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "armedDurationThresholdTimestamp");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "btHint");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "firstTriggerTimestamp");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "isBTHintDetected");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isClusterInBeginningOfDrive");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isTriggerCluster");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "lastTriggerTimestamp");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "numTriggersInEpoch");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "numTriggersInWindow");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x80) == 0)
      goto LABEL_16;
LABEL_33:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_WORD *)(a1 + 96) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_17;
  }
LABEL_32:
  PB::TextFormatter::format(this, "numTriggersThreshold");
  v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) != 0)
    goto LABEL_33;
LABEL_16:
  if ((v5 & 0x1000) != 0)
LABEL_17:
    PB::TextFormatter::format(this, "windowDuration");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F268638(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  int v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  char v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  char v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  char v98;
  uint64_t result;
  char v100;
  unsigned int v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((int)(v11 >> 3) > 300)
      {
        switch((int)v20)
        {
          case 301:
            *(_WORD *)(a1 + 96) |= 8u;
            v27 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v28 = *(_QWORD *)this;
            if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
            {
              v104 = 0;
              v105 = 0;
              v31 = 0;
              if (v2 <= v27)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v27)
                {
                  v31 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_223;
                }
                v106 = v27++;
                v107 = *(_BYTE *)(v28 + v106);
                *((_QWORD *)this + 1) = v27;
                v31 |= (unint64_t)(v107 & 0x7F) << v104;
                if ((v107 & 0x80) == 0)
                  break;
                v104 += 7;
                v14 = v105++ > 8;
                if (v14)
                {
                  v31 = 0;
LABEL_222:
                  v2 = v106 + 1;
                  goto LABEL_223;
                }
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
              goto LABEL_222;
            }
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v2 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v32 = *(_BYTE *)(v28 + v27);
              v31 |= (unint64_t)(v32 & 0x7F) << v29;
              if ((v32 & 0x80) == 0)
                goto LABEL_223;
              v29 += 7;
              v27 = v2;
              v14 = v30++ > 8;
            }
            while (!v14);
            v31 = 0;
LABEL_223:
            *(_QWORD *)(a1 + 32) = v31;
            break;
          case 302:
            *(_WORD *)(a1 + 96) |= 0x10u;
            v45 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v46 = *(_QWORD *)this;
            if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
            {
              v112 = 0;
              v113 = 0;
              v49 = 0;
              if (v2 <= v45)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v45)
                {
                  v49 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_233;
                }
                v114 = v45++;
                v115 = *(_BYTE *)(v46 + v114);
                *((_QWORD *)this + 1) = v45;
                v49 |= (unint64_t)(v115 & 0x7F) << v112;
                if ((v115 & 0x80) == 0)
                  break;
                v112 += 7;
                v14 = v113++ > 8;
                if (v14)
                {
                  v49 = 0;
LABEL_232:
                  v2 = v114 + 1;
                  goto LABEL_233;
                }
              }
              if (*((_BYTE *)this + 24))
                v49 = 0;
              goto LABEL_232;
            }
            v47 = 0;
            v48 = 0;
            v49 = 0;
            do
            {
              v2 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v50 = *(_BYTE *)(v46 + v45);
              v49 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
                goto LABEL_233;
              v47 += 7;
              v45 = v2;
              v14 = v48++ > 8;
            }
            while (!v14);
            v49 = 0;
LABEL_233:
            *(_QWORD *)(a1 + 40) = v49;
            break;
          case 303:
            *(_WORD *)(a1 + 96) |= 0x20u;
            v51 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v52 = *(_QWORD *)this;
            if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
            {
              v116 = 0;
              v117 = 0;
              v55 = 0;
              if (v2 <= v51)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v51)
                {
                  v55 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_238;
                }
                v118 = v51++;
                v119 = *(_BYTE *)(v52 + v118);
                *((_QWORD *)this + 1) = v51;
                v55 |= (unint64_t)(v119 & 0x7F) << v116;
                if ((v119 & 0x80) == 0)
                  break;
                v116 += 7;
                v14 = v117++ > 8;
                if (v14)
                {
                  v55 = 0;
LABEL_237:
                  v2 = v118 + 1;
                  goto LABEL_238;
                }
              }
              if (*((_BYTE *)this + 24))
                v55 = 0;
              goto LABEL_237;
            }
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v2 = v51 + 1;
              *((_QWORD *)this + 1) = v51 + 1;
              v56 = *(_BYTE *)(v52 + v51);
              v55 |= (unint64_t)(v56 & 0x7F) << v53;
              if ((v56 & 0x80) == 0)
                goto LABEL_238;
              v53 += 7;
              v51 = v2;
              v14 = v54++ > 8;
            }
            while (!v14);
            v55 = 0;
LABEL_238:
            *(_QWORD *)(a1 + 48) = v55;
            break;
          case 304:
            *(_WORD *)(a1 + 96) |= 0x40u;
            v57 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v58 = *(_QWORD *)this;
            if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
            {
              v120 = 0;
              v121 = 0;
              v61 = 0;
              if (v2 <= v57)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v57)
                {
                  v61 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_243;
                }
                v122 = v57++;
                v123 = *(_BYTE *)(v58 + v122);
                *((_QWORD *)this + 1) = v57;
                v61 |= (unint64_t)(v123 & 0x7F) << v120;
                if ((v123 & 0x80) == 0)
                  break;
                v120 += 7;
                v14 = v121++ > 8;
                if (v14)
                {
                  v61 = 0;
LABEL_242:
                  v2 = v122 + 1;
                  goto LABEL_243;
                }
              }
              if (*((_BYTE *)this + 24))
                v61 = 0;
              goto LABEL_242;
            }
            v59 = 0;
            v60 = 0;
            v61 = 0;
            do
            {
              v2 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v62 = *(_BYTE *)(v58 + v57);
              v61 |= (unint64_t)(v62 & 0x7F) << v59;
              if ((v62 & 0x80) == 0)
                goto LABEL_243;
              v59 += 7;
              v57 = v2;
              v14 = v60++ > 8;
            }
            while (!v14);
            v61 = 0;
LABEL_243:
            *(_QWORD *)(a1 + 56) = v61;
            break;
          case 305:
            *(_WORD *)(a1 + 96) |= 1u;
            v63 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v64 = *(_QWORD *)this;
            if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
            {
              v124 = 0;
              v125 = 0;
              v67 = 0;
              if (v2 <= v63)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v63)
                {
                  v67 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_248;
                }
                v126 = v63++;
                v127 = *(_BYTE *)(v64 + v126);
                *((_QWORD *)this + 1) = v63;
                v67 |= (unint64_t)(v127 & 0x7F) << v124;
                if ((v127 & 0x80) == 0)
                  break;
                v124 += 7;
                v14 = v125++ > 8;
                if (v14)
                {
                  v67 = 0;
LABEL_247:
                  v2 = v126 + 1;
                  goto LABEL_248;
                }
              }
              if (*((_BYTE *)this + 24))
                v67 = 0;
              goto LABEL_247;
            }
            v65 = 0;
            v66 = 0;
            v67 = 0;
            do
            {
              v2 = v63 + 1;
              *((_QWORD *)this + 1) = v63 + 1;
              v68 = *(_BYTE *)(v64 + v63);
              v67 |= (unint64_t)(v68 & 0x7F) << v65;
              if ((v68 & 0x80) == 0)
                goto LABEL_248;
              v65 += 7;
              v63 = v2;
              v14 = v66++ > 8;
            }
            while (!v14);
            v67 = 0;
LABEL_248:
            *(_QWORD *)(a1 + 8) = v67;
            break;
          case 306:
            *(_WORD *)(a1 + 96) |= 0x400u;
            v69 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v70 = *(_QWORD *)this;
            if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
            {
              v128 = 0;
              v129 = 0;
              v73 = 0;
              if (v2 <= v69)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v69)
                {
                  LODWORD(v73) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_253;
                }
                v130 = v69++;
                v131 = *(_BYTE *)(v70 + v130);
                *((_QWORD *)this + 1) = v69;
                v73 |= (unint64_t)(v131 & 0x7F) << v128;
                if ((v131 & 0x80) == 0)
                  break;
                v128 += 7;
                v14 = v129++ > 8;
                if (v14)
                {
                  LODWORD(v73) = 0;
LABEL_252:
                  v2 = v130 + 1;
                  goto LABEL_253;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
              goto LABEL_252;
            }
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v2 = v69 + 1;
              *((_QWORD *)this + 1) = v69 + 1;
              v74 = *(_BYTE *)(v70 + v69);
              v73 |= (unint64_t)(v74 & 0x7F) << v71;
              if ((v74 & 0x80) == 0)
                goto LABEL_253;
              v71 += 7;
              v69 = v2;
              v14 = v72++ > 8;
            }
            while (!v14);
            LODWORD(v73) = 0;
LABEL_253:
            *(_DWORD *)(a1 + 80) = v73;
            break;
          case 307:
            *(_WORD *)(a1 + 96) |= 0x200u;
            v75 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v76 = *(_QWORD *)this;
            if (v75 > 0xFFFFFFFFFFFFFFF5 || v75 + 10 > v2)
            {
              v132 = 0;
              v133 = 0;
              v79 = 0;
              if (v2 <= v75)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v75)
                {
                  LODWORD(v79) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_258;
                }
                v134 = v75++;
                v135 = *(_BYTE *)(v76 + v134);
                *((_QWORD *)this + 1) = v75;
                v79 |= (unint64_t)(v135 & 0x7F) << v132;
                if ((v135 & 0x80) == 0)
                  break;
                v132 += 7;
                v14 = v133++ > 8;
                if (v14)
                {
                  LODWORD(v79) = 0;
LABEL_257:
                  v2 = v134 + 1;
                  goto LABEL_258;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v79) = 0;
              goto LABEL_257;
            }
            v77 = 0;
            v78 = 0;
            v79 = 0;
            do
            {
              v2 = v75 + 1;
              *((_QWORD *)this + 1) = v75 + 1;
              v80 = *(_BYTE *)(v76 + v75);
              v79 |= (unint64_t)(v80 & 0x7F) << v77;
              if ((v80 & 0x80) == 0)
                goto LABEL_258;
              v77 += 7;
              v75 = v2;
              v14 = v78++ > 8;
            }
            while (!v14);
            LODWORD(v79) = 0;
LABEL_258:
            *(_DWORD *)(a1 + 76) = v79;
            break;
          case 308:
            *(_WORD *)(a1 + 96) |= 4u;
            v81 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v82 = *(_QWORD *)this;
            if (v81 > 0xFFFFFFFFFFFFFFF5 || v81 + 10 > v2)
            {
              v136 = 0;
              v137 = 0;
              v85 = 0;
              if (v2 <= v81)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v81)
                {
                  v85 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_263;
                }
                v138 = v81++;
                v139 = *(_BYTE *)(v82 + v138);
                *((_QWORD *)this + 1) = v81;
                v85 |= (unint64_t)(v139 & 0x7F) << v136;
                if ((v139 & 0x80) == 0)
                  break;
                v136 += 7;
                v14 = v137++ > 8;
                if (v14)
                {
                  v85 = 0;
LABEL_262:
                  v2 = v138 + 1;
                  goto LABEL_263;
                }
              }
              if (*((_BYTE *)this + 24))
                v85 = 0;
              goto LABEL_262;
            }
            v83 = 0;
            v84 = 0;
            v85 = 0;
            do
            {
              v2 = v81 + 1;
              *((_QWORD *)this + 1) = v81 + 1;
              v86 = *(_BYTE *)(v82 + v81);
              v85 |= (unint64_t)(v86 & 0x7F) << v83;
              if ((v86 & 0x80) == 0)
                goto LABEL_263;
              v83 += 7;
              v81 = v2;
              v14 = v84++ > 8;
            }
            while (!v14);
            v85 = 0;
LABEL_263:
            *(_QWORD *)(a1 + 24) = v85;
            break;
          default:
            goto LABEL_121;
        }
      }
      else if ((int)v20 <= 200)
      {
        switch((_DWORD)v20)
        {
          case 'e':
            *(_WORD *)(a1 + 96) |= 0x1000u;
            v87 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v88 = *(_QWORD *)this;
            if (v87 > 0xFFFFFFFFFFFFFFF5 || v87 + 10 > v2)
            {
              v140 = 0;
              v141 = 0;
              v91 = 0;
              if (v2 <= v87)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v87)
                {
                  LODWORD(v91) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_268;
                }
                v142 = v87++;
                v143 = *(_BYTE *)(v88 + v142);
                *((_QWORD *)this + 1) = v87;
                v91 |= (unint64_t)(v143 & 0x7F) << v140;
                if ((v143 & 0x80) == 0)
                  break;
                v140 += 7;
                v14 = v141++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  goto LABEL_267;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v91) = 0;
LABEL_267:
              v2 = v142 + 1;
            }
            else
            {
              v89 = 0;
              v90 = 0;
              v91 = 0;
              while (1)
              {
                v2 = v87 + 1;
                *((_QWORD *)this + 1) = v87 + 1;
                v92 = *(_BYTE *)(v88 + v87);
                v91 |= (unint64_t)(v92 & 0x7F) << v89;
                if ((v92 & 0x80) == 0)
                  break;
                v89 += 7;
                v87 = v2;
                v14 = v90++ > 8;
                if (v14)
                {
                  LODWORD(v91) = 0;
                  break;
                }
              }
            }
LABEL_268:
            *(_DWORD *)(a1 + 88) = v91;
            break;
          case 'f':
            *(_WORD *)(a1 + 96) |= 0x800u;
            v93 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v94 = *(_QWORD *)this;
            if (v93 > 0xFFFFFFFFFFFFFFF5 || v93 + 10 > v2)
            {
              v144 = 0;
              v145 = 0;
              v97 = 0;
              if (v2 <= v93)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v93)
                {
                  LODWORD(v97) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_273;
                }
                v146 = v93++;
                v147 = *(_BYTE *)(v94 + v146);
                *((_QWORD *)this + 1) = v93;
                v97 |= (unint64_t)(v147 & 0x7F) << v144;
                if ((v147 & 0x80) == 0)
                  break;
                v144 += 7;
                v14 = v145++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  goto LABEL_272;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v97) = 0;
LABEL_272:
              v2 = v146 + 1;
            }
            else
            {
              v95 = 0;
              v96 = 0;
              v97 = 0;
              while (1)
              {
                v2 = v93 + 1;
                *((_QWORD *)this + 1) = v93 + 1;
                v98 = *(_BYTE *)(v94 + v93);
                v97 |= (unint64_t)(v98 & 0x7F) << v95;
                if ((v98 & 0x80) == 0)
                  break;
                v95 += 7;
                v93 = v2;
                v14 = v96++ > 8;
                if (v14)
                {
                  LODWORD(v97) = 0;
                  break;
                }
              }
            }
LABEL_273:
            *(_DWORD *)(a1 + 84) = v97;
            break;
          case 'g':
            *(_WORD *)(a1 + 96) |= 0x100u;
            v2 = *((_QWORD *)this + 1);
            if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
            {
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v2;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
            break;
          default:
LABEL_121:
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
            v2 = *((_QWORD *)this + 1);
            break;
        }
      }
      else
      {
        switch((int)v20)
        {
          case 201:
            *(_WORD *)(a1 + 96) |= 0x80u;
            v21 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v22 = *(_QWORD *)this;
            if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
            {
              v100 = 0;
              v101 = 0;
              v25 = 0;
              if (v2 <= v21)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v21)
                {
                  v25 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_218;
                }
                v102 = v21++;
                v103 = *(_BYTE *)(v22 + v102);
                *((_QWORD *)this + 1) = v21;
                v25 |= (unint64_t)(v103 & 0x7F) << v100;
                if ((v103 & 0x80) == 0)
                  break;
                v100 += 7;
                v14 = v101++ > 8;
                if (v14)
                {
                  v25 = 0;
LABEL_217:
                  v2 = v102 + 1;
                  goto LABEL_218;
                }
              }
              if (*((_BYTE *)this + 24))
                v25 = 0;
              goto LABEL_217;
            }
            v23 = 0;
            v24 = 0;
            v25 = 0;
            do
            {
              v2 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v26 = *(_BYTE *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0)
                goto LABEL_218;
              v23 += 7;
              v21 = v2;
              v14 = v24++ > 8;
            }
            while (!v14);
            v25 = 0;
LABEL_218:
            *(_QWORD *)(a1 + 64) = v25;
            break;
          case 202:
            *(_WORD *)(a1 + 96) |= 0x8000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v34 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v34 = v33 != 0;
            }
            *(_BYTE *)(a1 + 94) = v34;
            break;
          case 203:
            *(_WORD *)(a1 + 96) |= 0x4000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v36 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v35 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v36 = v35 != 0;
            }
            *(_BYTE *)(a1 + 93) = v36;
            break;
          case 204:
            *(_WORD *)(a1 + 96) |= 0x2000u;
            v2 = *((_QWORD *)this + 1);
            if (v2 >= *((_QWORD *)this + 2))
            {
              v38 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v37 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
              *((_QWORD *)this + 1) = v2;
              v38 = v37 != 0;
            }
            *(_BYTE *)(a1 + 92) = v38;
            break;
          case 205:
            *(_WORD *)(a1 + 96) |= 2u;
            v39 = *((_QWORD *)this + 1);
            v2 = *((_QWORD *)this + 2);
            v40 = *(_QWORD *)this;
            if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
            {
              v108 = 0;
              v109 = 0;
              v43 = 0;
              if (v2 <= v39)
                v2 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v2 == v39)
                {
                  v43 = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_228;
                }
                v110 = v39++;
                v111 = *(_BYTE *)(v40 + v110);
                *((_QWORD *)this + 1) = v39;
                v43 |= (unint64_t)(v111 & 0x7F) << v108;
                if ((v111 & 0x80) == 0)
                  break;
                v108 += 7;
                v14 = v109++ > 8;
                if (v14)
                {
                  v43 = 0;
LABEL_227:
                  v2 = v110 + 1;
                  goto LABEL_228;
                }
              }
              if (*((_BYTE *)this + 24))
                v43 = 0;
              goto LABEL_227;
            }
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v2 = v39 + 1;
              *((_QWORD *)this + 1) = v39 + 1;
              v44 = *(_BYTE *)(v40 + v39);
              v43 |= (unint64_t)(v44 & 0x7F) << v41;
              if ((v44 & 0x80) == 0)
                goto LABEL_228;
              v41 += 7;
              v39 = v2;
              v14 = v42++ > 8;
            }
            while (!v14);
            v43 = 0;
LABEL_228:
            *(_QWORD *)(a1 + 16) = v43;
            break;
          default:
            goto LABEL_121;
        }
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26941C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x1000) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x8000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0)
      goto LABEL_14;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0)
      goto LABEL_15;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0)
      goto LABEL_16;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 4) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_32:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 96) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F269600(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294E640;
  *(_DWORD *)(a1 + 120) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_18F26962C(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E294E640;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F26968C(PB::Base *a1)
{
  sub_18F26962C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2696B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  __int16 v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "avgHorizontalDecelMax", *(double *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "avgHorizontalDecelThresholdCoupled", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 120) & 8) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "impactThresholdUncoupled", *(float *)(a1 + 100));
LABEL_5:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "inertialAccel", v8);
  }
  v9 = *(_WORD *)(a1 + 120);
  if ((v9 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "isMounted");
    v9 = *(_WORD *)(a1 + 120);
    if ((v9 & 0x100) == 0)
    {
LABEL_9:
      if ((v9 & 0x10) == 0)
        goto LABEL_10;
      goto LABEL_26;
    }
  }
  else if ((*(_WORD *)(a1 + 120) & 0x100) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "isSimulated");
  v9 = *(_WORD *)(a1 + 120);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_26:
  PB::TextFormatter::format(this, "nAccelGap");
  if ((*(_WORD *)(a1 + 120) & 0x20) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "numResets");
LABEL_12:
  v10 = *(float **)(a1 + 32);
  v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    PB::TextFormatter::format(this, "prevQ", v12);
  }
  v13 = *(float **)(a1 + 56);
  v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "rawClampedAccel", v15);
  }
  v16 = *(_WORD *)(a1 + 120);
  if ((v16 & 0x200) == 0)
  {
    if ((v16 & 2) == 0)
      goto LABEL_18;
LABEL_29:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_WORD *)(a1 + 120) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
  PB::TextFormatter::format(this, "shouldTrigger");
  v16 = *(_WORD *)(a1 + 120);
  if ((v16 & 2) != 0)
    goto LABEL_29;
LABEL_18:
  if ((v16 & 0x40) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "triggerPathBitmap");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F2698B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _DWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  BOOL v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  BOOL v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  char v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  unint64_t v122;
  char *v123;
  _DWORD *v124;
  unint64_t v125;
  char *v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  unint64_t v137;
  char v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  int v162;
  char *v163;
  int v164;
  unint64_t v165;
  uint64_t v168;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v168 = a1 + 48;
    v9 = (void **)(a1 + 56);
    v10 = a1 + 72;
    v11 = (void **)(a1 + 8);
    v12 = a1 + 24;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 2u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_212;
              v29 += 7;
              v26 = v32;
              v19 = v30++ > 8;
            }
            while (!v19);
LABEL_146:
            v31 = 0;
            goto LABEL_212;
          }
          v115 = 0;
          v116 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              v31 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v26 + 1;
              v118 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v117;
              v31 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v26 = v117;
                v19 = v116++ > 8;
                if (v19)
                  goto LABEL_146;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v31 = 0;
            }
            break;
          }
LABEL_212:
          *(_QWORD *)(a1 + 88) = v31;
          goto LABEL_252;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          v34 = *((_QWORD *)this + 1);
          if (v34 >= *((_QWORD *)this + 2))
          {
            v37 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v35 = v34 + 1;
            v36 = *(unsigned __int8 *)(*(_QWORD *)this + v34);
            *((_QWORD *)this + 1) = v35;
            v37 = v36 != 0;
          }
          *(_BYTE *)(a1 + 118) = v37;
          goto LABEL_252;
        case 3u:
          *(_WORD *)(a1 + 120) |= 1u;
          v38 = *((_QWORD *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
            goto LABEL_248;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v38);
          goto LABEL_231;
        case 4u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v39 = *((_QWORD *)this + 1);
            v40 = *((_QWORD *)this + 2);
            while (v39 < v40 && !*((_BYTE *)this + 24))
            {
              v42 = *(char **)(a1 + 16);
              v41 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v42 >= v41)
              {
                v44 = (char *)*v11;
                v45 = (v42 - (_BYTE *)*v11) >> 3;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 61)
                  goto LABEL_262;
                v47 = v41 - (_QWORD)v44;
                if (v47 >> 2 > v46)
                  v46 = v47 >> 2;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                  v48 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  v49 = (char *)sub_18F26F8D4(v12, v48);
                  v44 = *(char **)(a1 + 8);
                  v42 = *(char **)(a1 + 16);
                }
                else
                {
                  v49 = 0;
                }
                v50 = &v49[8 * v45];
                *(_QWORD *)v50 = 0;
                v43 = v50 + 8;
                while (v42 != v44)
                {
                  v51 = *((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *((_QWORD *)v50 - 1) = v51;
                  v50 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v50;
                *(_QWORD *)(a1 + 16) = v43;
                *(_QWORD *)(a1 + 24) = &v49[8 * v48];
                if (v44)
                  operator delete(v44);
              }
              else
              {
                *(_QWORD *)v42 = 0;
                v43 = v42 + 8;
              }
              *(_QWORD *)(a1 + 16) = v43;
              v52 = *((_QWORD *)this + 1);
              if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
                goto LABEL_180;
              *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
              v40 = *((_QWORD *)this + 2);
              v39 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v39;
            }
            goto LABEL_181;
          }
          v120 = *(char **)(a1 + 16);
          v119 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v120 >= v119)
          {
            v139 = (char *)*v11;
            v140 = (v120 - (_BYTE *)*v11) >> 3;
            v141 = v140 + 1;
            if ((unint64_t)(v140 + 1) >> 61)
LABEL_262:
              sub_18F26F8C0();
            v142 = v119 - (_QWORD)v139;
            if (v142 >> 2 > v141)
              v141 = v142 >> 2;
            if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFF8)
              v143 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v143 = v141;
            if (v143)
            {
              v144 = (char *)sub_18F26F8D4(v12, v143);
              v139 = *(char **)(a1 + 8);
              v120 = *(char **)(a1 + 16);
            }
            else
            {
              v144 = 0;
            }
            v157 = &v144[8 * v140];
            *(_QWORD *)v157 = 0;
            v121 = v157 + 8;
            while (v120 != v139)
            {
              v158 = *((_QWORD *)v120 - 1);
              v120 -= 8;
              *((_QWORD *)v157 - 1) = v158;
              v157 -= 8;
            }
            *(_QWORD *)(a1 + 8) = v157;
            *(_QWORD *)(a1 + 16) = v121;
            *(_QWORD *)(a1 + 24) = &v144[8 * v143];
            if (v139)
              operator delete(v139);
          }
          else
          {
            *(_QWORD *)v120 = 0;
            v121 = v120 + 8;
          }
          *(_QWORD *)(a1 + 16) = v121;
          v159 = *((_QWORD *)this + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFF7 && v159 + 8 <= *((_QWORD *)this + 2))
          {
            *(v121 - 1) = *(_QWORD *)(*(_QWORD *)this + v159);
LABEL_231:
            v160 = *((_QWORD *)this + 1) + 8;
            goto LABEL_251;
          }
          goto LABEL_248;
        case 5u:
          if (v25 != 2)
          {
            v123 = *(char **)(a1 + 64);
            v122 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v123 >= v122)
            {
              v145 = (char *)*v9;
              v146 = (v123 - (_BYTE *)*v9) >> 2;
              v147 = v146 + 1;
              if ((unint64_t)(v146 + 1) >> 62)
LABEL_263:
                sub_18F26F8C0();
              v148 = v122 - (_QWORD)v145;
              if (v148 >> 1 > v147)
                v147 = v148 >> 1;
              if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
                v149 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v149 = v147;
              if (v149)
              {
                v150 = (char *)sub_18F26FB8C(v10, v149);
                v145 = *(char **)(a1 + 56);
                v123 = *(char **)(a1 + 64);
              }
              else
              {
                v150 = 0;
              }
              v161 = &v150[4 * v146];
              *(_DWORD *)v161 = 0;
              v124 = v161 + 4;
              while (v123 != v145)
              {
                v162 = *((_DWORD *)v123 - 1);
                v123 -= 4;
                *((_DWORD *)v161 - 1) = v162;
                v161 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v161;
              *(_QWORD *)(a1 + 64) = v124;
              *(_QWORD *)(a1 + 72) = &v150[4 * v149];
              if (v145)
                operator delete(v145);
            }
            else
            {
              *(_DWORD *)v123 = 0;
              v124 = v123 + 4;
            }
            *(_QWORD *)(a1 + 64) = v124;
            goto LABEL_246;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          while (v53 < v54 && !*((_BYTE *)this + 24))
          {
            v56 = *(char **)(a1 + 64);
            v55 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v56 >= v55)
            {
              v58 = (char *)*v9;
              v59 = (v56 - (_BYTE *)*v9) >> 2;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
                goto LABEL_263;
              v61 = v55 - (_QWORD)v58;
              if (v61 >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)sub_18F26FB8C(v10, v62);
                v58 = *(char **)(a1 + 56);
                v56 = *(char **)(a1 + 64);
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[4 * v59];
              *(_DWORD *)v64 = 0;
              v57 = v64 + 4;
              while (v56 != v58)
              {
                v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v64;
              *(_QWORD *)(a1 + 64) = v57;
              *(_QWORD *)(a1 + 72) = &v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_DWORD *)v56 = 0;
              v57 = v56 + 4;
            }
            *(_QWORD *)(a1 + 64) = v57;
            v66 = *((_QWORD *)this + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
              goto LABEL_180;
            *(v57 - 1) = *(_DWORD *)(*(_QWORD *)this + v66);
            v54 = *((_QWORD *)this + 2);
            v53 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v53;
          }
          goto LABEL_181;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v67 = *((_QWORD *)this + 1);
            v68 = *((_QWORD *)this + 2);
            while (v67 < v68 && !*((_BYTE *)this + 24))
            {
              v70 = *(char **)(a1 + 40);
              v69 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v70 >= v69)
              {
                v72 = (char *)*v8;
                v73 = (v70 - (_BYTE *)*v8) >> 2;
                v74 = v73 + 1;
                if ((unint64_t)(v73 + 1) >> 62)
                  goto LABEL_264;
                v75 = v69 - (_QWORD)v72;
                if (v75 >> 1 > v74)
                  v74 = v75 >> 1;
                if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL)
                  v76 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v76 = v74;
                if (v76)
                {
                  v77 = (char *)sub_18F26FB8C(v168, v76);
                  v72 = *(char **)(a1 + 32);
                  v70 = *(char **)(a1 + 40);
                }
                else
                {
                  v77 = 0;
                }
                v78 = &v77[4 * v73];
                *(_DWORD *)v78 = 0;
                v71 = v78 + 4;
                while (v70 != v72)
                {
                  v79 = *((_DWORD *)v70 - 1);
                  v70 -= 4;
                  *((_DWORD *)v78 - 1) = v79;
                  v78 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v78;
                *(_QWORD *)(a1 + 40) = v71;
                *(_QWORD *)(a1 + 48) = &v77[4 * v76];
                if (v72)
                  operator delete(v72);
              }
              else
              {
                *(_DWORD *)v70 = 0;
                v71 = v70 + 4;
              }
              *(_QWORD *)(a1 + 40) = v71;
              v80 = *((_QWORD *)this + 1);
              if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((_QWORD *)this + 2))
              {
LABEL_180:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v71 - 1) = *(_DWORD *)(*(_QWORD *)this + v80);
              v68 = *((_QWORD *)this + 2);
              v67 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v67;
            }
LABEL_181:
            PB::Reader::recallMark();
          }
          else
          {
            v126 = *(char **)(a1 + 40);
            v125 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v126 >= v125)
            {
              v151 = (char *)*v8;
              v152 = (v126 - (_BYTE *)*v8) >> 2;
              v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62)
LABEL_264:
                sub_18F26F8C0();
              v154 = v125 - (_QWORD)v151;
              if (v154 >> 1 > v153)
                v153 = v154 >> 1;
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                v155 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v155 = v153;
              if (v155)
              {
                v156 = (char *)sub_18F26FB8C(v168, v155);
                v151 = *(char **)(a1 + 32);
                v126 = *(char **)(a1 + 40);
              }
              else
              {
                v156 = 0;
              }
              v163 = &v156[4 * v152];
              *(_DWORD *)v163 = 0;
              v124 = v163 + 4;
              while (v126 != v151)
              {
                v164 = *((_DWORD *)v126 - 1);
                v126 -= 4;
                *((_DWORD *)v163 - 1) = v164;
                v163 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v163;
              *(_QWORD *)(a1 + 40) = v124;
              *(_QWORD *)(a1 + 48) = &v156[4 * v155];
              if (v151)
                operator delete(v151);
            }
            else
            {
              *(_DWORD *)v126 = 0;
              v124 = v126 + 4;
            }
            *(_QWORD *)(a1 + 40) = v124;
LABEL_246:
            v165 = *((_QWORD *)this + 1);
            if (v165 <= 0xFFFFFFFFFFFFFFFBLL && v165 + 4 <= *((_QWORD *)this + 2))
            {
              *(v124 - 1) = *(_DWORD *)(*(_QWORD *)this + v165);
LABEL_250:
              v160 = *((_QWORD *)this + 1) + 4;
LABEL_251:
              *((_QWORD *)this + 1) = v160;
            }
            else
            {
LABEL_248:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_252:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          v81 = *((_QWORD *)this + 1);
          if (v81 >= *((_QWORD *)this + 2))
          {
            v84 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v82 = v81 + 1;
            v83 = *(unsigned __int8 *)(*(_QWORD *)this + v81);
            *((_QWORD *)this + 1) = v82;
            v84 = v83 != 0;
          }
          *(_BYTE *)(a1 + 116) = v84;
          goto LABEL_252;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          v85 = *((_QWORD *)this + 1);
          if (v85 >= *((_QWORD *)this + 2))
          {
            v88 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v86 = v85 + 1;
            v87 = *(unsigned __int8 *)(*(_QWORD *)this + v85);
            *((_QWORD *)this + 1) = v86;
            v88 = v87 != 0;
          }
          *(_BYTE *)(a1 + 117) = v88;
          goto LABEL_252;
        case 9u:
          *(_WORD *)(a1 + 120) |= 4u;
          v89 = *((_QWORD *)this + 1);
          if (v89 > 0xFFFFFFFFFFFFFFFBLL || v89 + 4 > *((_QWORD *)this + 2))
            goto LABEL_248;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v89);
          goto LABEL_250;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 8u;
          v90 = *((_QWORD *)this + 1);
          if (v90 > 0xFFFFFFFFFFFFFFFBLL || v90 + 4 > *((_QWORD *)this + 2))
            goto LABEL_248;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v90);
          goto LABEL_250;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x40u;
          v91 = *((_QWORD *)this + 1);
          v92 = *((_QWORD *)this + 2);
          v93 = *(_QWORD *)this;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)this + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_215;
              v94 += 7;
              v91 = v97;
              v19 = v95++ > 8;
            }
            while (!v19);
LABEL_165:
            LODWORD(v96) = 0;
            goto LABEL_215;
          }
          v127 = 0;
          v128 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v129 = v91 + 1;
              v130 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)this + 1) = v129;
              v96 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v91 = v129;
                v19 = v128++ > 8;
                if (v19)
                  goto LABEL_165;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v96) = 0;
            }
            break;
          }
LABEL_215:
          *(_DWORD *)(a1 + 112) = v96;
          goto LABEL_252;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          v99 = *((_QWORD *)this + 1);
          v100 = *((_QWORD *)this + 2);
          v101 = *(_QWORD *)this;
          if (v99 <= 0xFFFFFFFFFFFFFFF5 && v99 + 10 <= v100)
          {
            v102 = 0;
            v103 = 0;
            v104 = 0;
            do
            {
              v105 = v99 + 1;
              *((_QWORD *)this + 1) = v99 + 1;
              v106 = *(_BYTE *)(v101 + v99);
              v104 |= (unint64_t)(v106 & 0x7F) << v102;
              if ((v106 & 0x80) == 0)
                goto LABEL_218;
              v102 += 7;
              v99 = v105;
              v19 = v103++ > 8;
            }
            while (!v19);
LABEL_172:
            LODWORD(v104) = 0;
            goto LABEL_218;
          }
          v131 = 0;
          v132 = 0;
          v104 = 0;
          if (v100 <= v99)
            v100 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v100 == v99)
            {
              LODWORD(v104) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v133 = v99 + 1;
              v134 = *(_BYTE *)(v101 + v99);
              *((_QWORD *)this + 1) = v133;
              v104 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v99 = v133;
                v19 = v132++ > 8;
                if (v19)
                  goto LABEL_172;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v104) = 0;
            }
            break;
          }
LABEL_218:
          *(_DWORD *)(a1 + 108) = v104;
          goto LABEL_252;
        case 0xDu:
          *(_WORD *)(a1 + 120) |= 0x10u;
          v107 = *((_QWORD *)this + 1);
          v108 = *((_QWORD *)this + 2);
          v109 = *(_QWORD *)this;
          if (v107 <= 0xFFFFFFFFFFFFFFF5 && v107 + 10 <= v108)
          {
            v110 = 0;
            v111 = 0;
            v112 = 0;
            do
            {
              v113 = v107 + 1;
              *((_QWORD *)this + 1) = v107 + 1;
              v114 = *(_BYTE *)(v109 + v107);
              v112 |= (unint64_t)(v114 & 0x7F) << v110;
              if ((v114 & 0x80) == 0)
                goto LABEL_221;
              v110 += 7;
              v107 = v113;
              v19 = v111++ > 8;
            }
            while (!v19);
LABEL_179:
            LODWORD(v112) = 0;
            goto LABEL_221;
          }
          v135 = 0;
          v136 = 0;
          v112 = 0;
          if (v108 <= v107)
            v108 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v108 == v107)
            {
              LODWORD(v112) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v137 = v107 + 1;
              v138 = *(_BYTE *)(v109 + v107);
              *((_QWORD *)this + 1) = v137;
              v112 |= (unint64_t)(v138 & 0x7F) << v135;
              if (v138 < 0)
              {
                v135 += 7;
                v107 = v137;
                v19 = v136++ > 8;
                if (v19)
                  goto LABEL_179;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v112) = 0;
            }
            break;
          }
LABEL_221:
          *(_DWORD *)(a1 + 104) = v112;
          goto LABEL_252;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_252;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26A508(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;

  v3 = result;
  v4 = *(_WORD *)(result + 120);
  if ((v4 & 2) == 0)
  {
    if ((*(_WORD *)(result + 120) & 0x200) == 0)
      goto LABEL_3;
LABEL_23:
    result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 120) & 1) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x200) != 0)
    goto LABEL_23;
LABEL_3:
  if ((v4 & 1) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 80));
LABEL_5:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(float **)(v3 + 56);
  v9 = *(float **)(v3 + 64);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x80) != 0)
  {
    result = PB::Writer::write(this);
    v14 = *(_WORD *)(v3 + 120);
    if ((v14 & 0x100) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_27;
    }
  }
  else if ((*(_WORD *)(v3 + 120) & 0x100) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::write(this);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 96));
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x40) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x40) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0)
      goto LABEL_20;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_WORD *)(v3 + 120);
  if ((v14 & 0x20) == 0)
  {
LABEL_20:
    if ((v14 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 120) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F26A6B0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DD48;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_18F26A6C8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26A6EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26A738(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26A96C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F26A98C(_QWORD *result)
{
  *result = &off_1E294D418;
  *(_QWORD *)((char *)result + 164) = 0;
  return result;
}

void sub_18F26A9A4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26A9C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "configAccelThresholdNorm", *(float *)(a1 + 56));
    v5 = *(_QWORD *)(a1 + 164);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_38;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "configHardware");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0)
      goto LABEL_5;
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "configIx", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "configIy", *(float *)(a1 + 68));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0)
      goto LABEL_7;
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "configIz", *(float *)(a1 + 72));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000) == 0)
      goto LABEL_8;
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "configLx", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000) == 0)
      goto LABEL_9;
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "configLy", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_9:
    if ((v5 & 0x4000) == 0)
      goto LABEL_10;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "configLz", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_10:
    if ((v5 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "configZgThreshold", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000) == 0)
      goto LABEL_12;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "debugCountOfAccelDataDrop");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20000) == 0)
      goto LABEL_13;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "debugCountOfDmDataDrop");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0)
      goto LABEL_14;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "debugMaxTimeBetweenAccelSample", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0)
      goto LABEL_15;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "debugMaxTimeBetweenDmSample", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0)
      goto LABEL_16;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "epochFirstTimestamp");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_17;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "epochLastTimestamp");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x80000) == 0)
      goto LABEL_18;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "freefallTpQualifier");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_18:
    if ((v5 & 0x100000) == 0)
      goto LABEL_19;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "metaCountOfFreefallImpactPassed");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200000) == 0)
      goto LABEL_20;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "metaCountOfFreefallTimePassed");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_20:
    if ((v5 & 0x400000) == 0)
      goto LABEL_21;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "metaCountOfSigImpact");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800000) == 0)
      goto LABEL_22;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "metaCountOfZgSegment");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_22:
    if ((v5 & 4) == 0)
      goto LABEL_23;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "metaCrossingCount");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_23:
    if ((v5 & 8) == 0)
      goto LABEL_24;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "metaDtBwFirstAndLastFreeFall");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_24:
    if ((v5 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "metaDtBwFirstFreeFall");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_26;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "metaDtBwFirstSigImpact");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_27;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "metaFreefallTime", *(float *)(a1 + 128));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_28;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "metaFreefallTimeForImpact", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_29;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "metaMaxOfAccel", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_30;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "metaMaxPower", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_31;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "metaMaxZgSegmentTime", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "metaNormOfAccel", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_67:
    PB::TextFormatter::format(this, "metaTotalZgTime", *(float *)(a1 + 156));
    if ((*(_QWORD *)(a1 + 164) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_34;
  }
LABEL_66:
  PB::TextFormatter::format(this, "metaNormOfImpact", *(float *)(a1 + 152));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000000) != 0)
    goto LABEL_67;
LABEL_33:
  if ((v5 & 0x20) != 0)
LABEL_34:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26AE18(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  unint64_t v135;
  char v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  char v140;
  unsigned int v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char v150;
  unsigned int v151;
  uint64_t v152;
  unint64_t v153;
  char v154;
  uint64_t result;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;
  char v168;
  unsigned int v169;
  unint64_t v170;
  char v171;
  char v172;
  unsigned int v173;
  unint64_t v174;
  char v175;
  char v176;
  unsigned int v177;
  unint64_t v178;
  char v179;
  char v180;
  unsigned int v181;
  unint64_t v182;
  char v183;
  char v184;
  unsigned int v185;
  unint64_t v186;
  char v187;
  char v188;
  unsigned int v189;
  unint64_t v190;
  char v191;
  char v192;
  unsigned int v193;
  unint64_t v194;
  char v195;
  char v196;
  unsigned int v197;
  unint64_t v198;
  char v199;
  char v200;
  unsigned int v201;
  unint64_t v202;
  char v203;
  char v204;
  unsigned int v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  unint64_t v210;
  char v211;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 1u:
              *(_QWORD *)(a1 + 164) |= 0x100000000uLL;
              v21 = *((_QWORD *)this + 1);
              if (v21 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v22 = v21 + 1;
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v21);
                *((_QWORD *)this + 1) = v22;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 160) = v24;
              goto LABEL_282;
            case 2u:
              *(_QWORD *)(a1 + 164) |= 0x100000uLL;
              v33 = *((_QWORD *)this + 1);
              v34 = *((_QWORD *)this + 2);
              v35 = *(_QWORD *)this;
              if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
              {
                v36 = 0;
                v37 = 0;
                v38 = 0;
                do
                {
                  v39 = v33 + 1;
                  *((_QWORD *)this + 1) = v33 + 1;
                  v40 = *(_BYTE *)(v35 + v33);
                  v38 |= (unint64_t)(v40 & 0x7F) << v36;
                  if ((v40 & 0x80) == 0)
                    goto LABEL_294;
                  v36 += 7;
                  v33 = v39;
                  v14 = v37++ > 8;
                }
                while (!v14);
LABEL_195:
                LODWORD(v38) = 0;
                goto LABEL_294;
              }
              v160 = 0;
              v161 = 0;
              v38 = 0;
              if (v34 <= v33)
                v34 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v34 == v33)
                {
                  LODWORD(v38) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v162 = v33 + 1;
                  v163 = *(_BYTE *)(v35 + v33);
                  *((_QWORD *)this + 1) = v162;
                  v38 |= (unint64_t)(v163 & 0x7F) << v160;
                  if (v163 < 0)
                  {
                    v160 += 7;
                    v33 = v162;
                    v14 = v161++ > 8;
                    if (v14)
                      goto LABEL_195;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v38) = 0;
                }
                break;
              }
LABEL_294:
              *(_DWORD *)(a1 + 112) = v38;
              goto LABEL_282;
            case 3u:
              *(_QWORD *)(a1 + 164) |= 0x80000uLL;
              v41 = *((_QWORD *)this + 1);
              v42 = *((_QWORD *)this + 2);
              v43 = *(_QWORD *)this;
              if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
              {
                v44 = 0;
                v45 = 0;
                v46 = 0;
                do
                {
                  v47 = v41 + 1;
                  *((_QWORD *)this + 1) = v41 + 1;
                  v48 = *(_BYTE *)(v43 + v41);
                  v46 |= (unint64_t)(v48 & 0x7F) << v44;
                  if ((v48 & 0x80) == 0)
                    goto LABEL_298;
                  v44 += 7;
                  v41 = v47;
                  v14 = v45++ > 8;
                }
                while (!v14);
LABEL_202:
                LODWORD(v46) = 0;
                goto LABEL_298;
              }
              v164 = 0;
              v165 = 0;
              v46 = 0;
              if (v42 <= v41)
                v42 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v42 == v41)
                {
                  LODWORD(v46) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v166 = v41 + 1;
                  v167 = *(_BYTE *)(v43 + v41);
                  *((_QWORD *)this + 1) = v166;
                  v46 |= (unint64_t)(v167 & 0x7F) << v164;
                  if (v167 < 0)
                  {
                    v164 += 7;
                    v41 = v166;
                    v14 = v165++ > 8;
                    if (v14)
                      goto LABEL_202;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v46) = 0;
                }
                break;
              }
LABEL_298:
              *(_DWORD *)(a1 + 108) = v46;
              goto LABEL_282;
            case 4u:
              *(_QWORD *)(a1 + 164) |= 0x1000000uLL;
              v49 = *((_QWORD *)this + 1);
              if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(_QWORD *)this + v49);
              goto LABEL_281;
            case 5u:
              *(_QWORD *)(a1 + 164) |= 0x20000000uLL;
              v50 = *((_QWORD *)this + 1);
              if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v50);
              goto LABEL_281;
            case 6u:
              *(_QWORD *)(a1 + 164) |= 0x4000000uLL;
              v51 = *((_QWORD *)this + 1);
              if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v51);
              goto LABEL_281;
            case 7u:
              *(_QWORD *)(a1 + 164) |= 0x80000000uLL;
              v52 = *((_QWORD *)this + 1);
              if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v52);
              goto LABEL_281;
            case 8u:
              *(_QWORD *)(a1 + 164) |= 0x10000000uLL;
              v53 = *((_QWORD *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v53);
              goto LABEL_281;
            case 9u:
              *(_QWORD *)(a1 + 164) |= 0x200000uLL;
              v54 = *((_QWORD *)this + 1);
              v55 = *((_QWORD *)this + 2);
              v56 = *(_QWORD *)this;
              if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
              {
                v57 = 0;
                v58 = 0;
                v59 = 0;
                do
                {
                  v60 = v54 + 1;
                  *((_QWORD *)this + 1) = v54 + 1;
                  v61 = *(_BYTE *)(v56 + v54);
                  v59 |= (unint64_t)(v61 & 0x7F) << v57;
                  if ((v61 & 0x80) == 0)
                    goto LABEL_302;
                  v57 += 7;
                  v54 = v60;
                  v14 = v58++ > 8;
                }
                while (!v14);
LABEL_209:
                LODWORD(v59) = 0;
                goto LABEL_302;
              }
              v168 = 0;
              v169 = 0;
              v59 = 0;
              if (v55 <= v54)
                v55 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v55 == v54)
                {
                  LODWORD(v59) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v170 = v54 + 1;
                  v171 = *(_BYTE *)(v56 + v54);
                  *((_QWORD *)this + 1) = v170;
                  v59 |= (unint64_t)(v171 & 0x7F) << v168;
                  if (v171 < 0)
                  {
                    v168 += 7;
                    v54 = v170;
                    v14 = v169++ > 8;
                    if (v14)
                      goto LABEL_209;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v59) = 0;
                }
                break;
              }
LABEL_302:
              *(_DWORD *)(a1 + 116) = v59;
              goto LABEL_282;
            case 0xAu:
              *(_QWORD *)(a1 + 164) |= 0x400000uLL;
              v62 = *((_QWORD *)this + 1);
              v63 = *((_QWORD *)this + 2);
              v64 = *(_QWORD *)this;
              if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
              {
                v65 = 0;
                v66 = 0;
                v67 = 0;
                do
                {
                  v68 = v62 + 1;
                  *((_QWORD *)this + 1) = v62 + 1;
                  v69 = *(_BYTE *)(v64 + v62);
                  v67 |= (unint64_t)(v69 & 0x7F) << v65;
                  if ((v69 & 0x80) == 0)
                    goto LABEL_306;
                  v65 += 7;
                  v62 = v68;
                  v14 = v66++ > 8;
                }
                while (!v14);
LABEL_216:
                LODWORD(v67) = 0;
                goto LABEL_306;
              }
              v172 = 0;
              v173 = 0;
              v67 = 0;
              if (v63 <= v62)
                v63 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v63 == v62)
                {
                  LODWORD(v67) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v174 = v62 + 1;
                  v175 = *(_BYTE *)(v64 + v62);
                  *((_QWORD *)this + 1) = v174;
                  v67 |= (unint64_t)(v175 & 0x7F) << v172;
                  if (v175 < 0)
                  {
                    v172 += 7;
                    v62 = v174;
                    v14 = v173++ > 8;
                    if (v14)
                      goto LABEL_216;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v67) = 0;
                }
                break;
              }
LABEL_306:
              *(_DWORD *)(a1 + 120) = v67;
              goto LABEL_282;
            case 0xBu:
              *(_QWORD *)(a1 + 164) |= 0x10uLL;
              v70 = *((_QWORD *)this + 1);
              v71 = *((_QWORD *)this + 2);
              v72 = *(_QWORD *)this;
              if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
              {
                v73 = 0;
                v74 = 0;
                v75 = 0;
                do
                {
                  v76 = v70 + 1;
                  *((_QWORD *)this + 1) = v70 + 1;
                  v77 = *(_BYTE *)(v72 + v70);
                  v75 |= (unint64_t)(v77 & 0x7F) << v73;
                  if ((v77 & 0x80) == 0)
                    goto LABEL_310;
                  v73 += 7;
                  v70 = v76;
                  v14 = v74++ > 8;
                }
                while (!v14);
LABEL_223:
                v75 = 0;
                goto LABEL_310;
              }
              v176 = 0;
              v177 = 0;
              v75 = 0;
              if (v71 <= v70)
                v71 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v71 == v70)
                {
                  v75 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v178 = v70 + 1;
                  v179 = *(_BYTE *)(v72 + v70);
                  *((_QWORD *)this + 1) = v178;
                  v75 |= (unint64_t)(v179 & 0x7F) << v176;
                  if (v179 < 0)
                  {
                    v176 += 7;
                    v70 = v178;
                    v14 = v177++ > 8;
                    if (v14)
                      goto LABEL_223;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v75 = 0;
                }
                break;
              }
LABEL_310:
              *(_QWORD *)(a1 + 40) = v75;
              goto LABEL_282;
            case 0xCu:
              *(_QWORD *)(a1 + 164) |= 8uLL;
              v78 = *((_QWORD *)this + 1);
              v79 = *((_QWORD *)this + 2);
              v80 = *(_QWORD *)this;
              if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
              {
                v81 = 0;
                v82 = 0;
                v83 = 0;
                do
                {
                  v84 = v78 + 1;
                  *((_QWORD *)this + 1) = v78 + 1;
                  v85 = *(_BYTE *)(v80 + v78);
                  v83 |= (unint64_t)(v85 & 0x7F) << v81;
                  if ((v85 & 0x80) == 0)
                    goto LABEL_314;
                  v81 += 7;
                  v78 = v84;
                  v14 = v82++ > 8;
                }
                while (!v14);
LABEL_230:
                v83 = 0;
                goto LABEL_314;
              }
              v180 = 0;
              v181 = 0;
              v83 = 0;
              if (v79 <= v78)
                v79 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v79 == v78)
                {
                  v83 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v182 = v78 + 1;
                  v183 = *(_BYTE *)(v80 + v78);
                  *((_QWORD *)this + 1) = v182;
                  v83 |= (unint64_t)(v183 & 0x7F) << v180;
                  if (v183 < 0)
                  {
                    v180 += 7;
                    v78 = v182;
                    v14 = v181++ > 8;
                    if (v14)
                      goto LABEL_230;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v83 = 0;
                }
                break;
              }
LABEL_314:
              *(_QWORD *)(a1 + 32) = v83;
              goto LABEL_282;
            case 0xDu:
              *(_QWORD *)(a1 + 164) |= 4uLL;
              v86 = *((_QWORD *)this + 1);
              v87 = *((_QWORD *)this + 2);
              v88 = *(_QWORD *)this;
              if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
              {
                v89 = 0;
                v90 = 0;
                v91 = 0;
                do
                {
                  v92 = v86 + 1;
                  *((_QWORD *)this + 1) = v86 + 1;
                  v93 = *(_BYTE *)(v88 + v86);
                  v91 |= (unint64_t)(v93 & 0x7F) << v89;
                  if ((v93 & 0x80) == 0)
                    goto LABEL_318;
                  v89 += 7;
                  v86 = v92;
                  v14 = v90++ > 8;
                }
                while (!v14);
LABEL_237:
                v91 = 0;
                goto LABEL_318;
              }
              v184 = 0;
              v185 = 0;
              v91 = 0;
              if (v87 <= v86)
                v87 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v87 == v86)
                {
                  v91 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v186 = v86 + 1;
                  v187 = *(_BYTE *)(v88 + v86);
                  *((_QWORD *)this + 1) = v186;
                  v91 |= (unint64_t)(v187 & 0x7F) << v184;
                  if (v187 < 0)
                  {
                    v184 += 7;
                    v86 = v186;
                    v14 = v185++ > 8;
                    if (v14)
                      goto LABEL_237;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v91 = 0;
                }
                break;
              }
LABEL_318:
              *(_QWORD *)(a1 + 24) = v91;
              goto LABEL_282;
            case 0xEu:
              *(_QWORD *)(a1 + 164) |= 0x8000uLL;
              v94 = *((_QWORD *)this + 1);
              v95 = *((_QWORD *)this + 2);
              v96 = *(_QWORD *)this;
              if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
              {
                v97 = 0;
                v98 = 0;
                v99 = 0;
                do
                {
                  v100 = v94 + 1;
                  *((_QWORD *)this + 1) = v94 + 1;
                  v101 = *(_BYTE *)(v96 + v94);
                  v99 |= (unint64_t)(v101 & 0x7F) << v97;
                  if ((v101 & 0x80) == 0)
                    goto LABEL_322;
                  v97 += 7;
                  v94 = v100;
                  v14 = v98++ > 8;
                }
                while (!v14);
LABEL_244:
                LODWORD(v99) = 0;
                goto LABEL_322;
              }
              v188 = 0;
              v189 = 0;
              v99 = 0;
              if (v95 <= v94)
                v95 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v95 == v94)
                {
                  LODWORD(v99) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v190 = v94 + 1;
                  v191 = *(_BYTE *)(v96 + v94);
                  *((_QWORD *)this + 1) = v190;
                  v99 |= (unint64_t)(v191 & 0x7F) << v188;
                  if (v191 < 0)
                  {
                    v188 += 7;
                    v94 = v190;
                    v14 = v189++ > 8;
                    if (v14)
                      goto LABEL_244;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v99) = 0;
                }
                break;
              }
LABEL_322:
              *(_DWORD *)(a1 + 92) = v99;
              goto LABEL_282;
            case 0xFu:
              *(_QWORD *)(a1 + 164) |= 0x20000uLL;
              v102 = *((_QWORD *)this + 1);
              if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v102);
              goto LABEL_281;
            case 0x10u:
              *(_QWORD *)(a1 + 164) |= 0x10000uLL;
              v103 = *((_QWORD *)this + 1);
              v104 = *((_QWORD *)this + 2);
              v105 = *(_QWORD *)this;
              if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
              {
                v106 = 0;
                v107 = 0;
                v108 = 0;
                do
                {
                  v109 = v103 + 1;
                  *((_QWORD *)this + 1) = v103 + 1;
                  v110 = *(_BYTE *)(v105 + v103);
                  v108 |= (unint64_t)(v110 & 0x7F) << v106;
                  if ((v110 & 0x80) == 0)
                    goto LABEL_326;
                  v106 += 7;
                  v103 = v109;
                  v14 = v107++ > 8;
                }
                while (!v14);
LABEL_251:
                LODWORD(v108) = 0;
                goto LABEL_326;
              }
              v192 = 0;
              v193 = 0;
              v108 = 0;
              if (v104 <= v103)
                v104 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v104 == v103)
                {
                  LODWORD(v108) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v194 = v103 + 1;
                  v195 = *(_BYTE *)(v105 + v103);
                  *((_QWORD *)this + 1) = v194;
                  v108 |= (unint64_t)(v195 & 0x7F) << v192;
                  if (v195 < 0)
                  {
                    v192 += 7;
                    v103 = v194;
                    v14 = v193++ > 8;
                    if (v14)
                      goto LABEL_251;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v108) = 0;
                }
                break;
              }
LABEL_326:
              *(_DWORD *)(a1 + 96) = v108;
              goto LABEL_282;
            case 0x11u:
              *(_QWORD *)(a1 + 164) |= 0x40000uLL;
              v111 = *((_QWORD *)this + 1);
              if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v111);
              goto LABEL_281;
            case 0x12u:
              *(_QWORD *)(a1 + 164) |= 0x4000uLL;
              v112 = *((_QWORD *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v112);
              goto LABEL_281;
            case 0x13u:
              *(_QWORD *)(a1 + 164) |= 0x40uLL;
              v113 = *((_QWORD *)this + 1);
              if (v113 > 0xFFFFFFFFFFFFFFFBLL || v113 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v113);
              goto LABEL_281;
            case 0x14u:
              *(_QWORD *)(a1 + 164) |= 0x80uLL;
              v114 = *((_QWORD *)this + 1);
              v115 = *((_QWORD *)this + 2);
              v116 = *(_QWORD *)this;
              if (v114 <= 0xFFFFFFFFFFFFFFF5 && v114 + 10 <= v115)
              {
                v117 = 0;
                v118 = 0;
                v119 = 0;
                do
                {
                  v120 = v114 + 1;
                  *((_QWORD *)this + 1) = v114 + 1;
                  v121 = *(_BYTE *)(v116 + v114);
                  v119 |= (unint64_t)(v121 & 0x7F) << v117;
                  if ((v121 & 0x80) == 0)
                    goto LABEL_330;
                  v117 += 7;
                  v114 = v120;
                  v14 = v118++ > 8;
                }
                while (!v14);
LABEL_258:
                LODWORD(v119) = 0;
                goto LABEL_330;
              }
              v196 = 0;
              v197 = 0;
              v119 = 0;
              if (v115 <= v114)
                v115 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v115 == v114)
                {
                  LODWORD(v119) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v198 = v114 + 1;
                  v199 = *(_BYTE *)(v116 + v114);
                  *((_QWORD *)this + 1) = v198;
                  v119 |= (unint64_t)(v199 & 0x7F) << v196;
                  if (v199 < 0)
                  {
                    v196 += 7;
                    v114 = v198;
                    v14 = v197++ > 8;
                    if (v14)
                      goto LABEL_258;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v119) = 0;
                }
                break;
              }
LABEL_330:
              *(_DWORD *)(a1 + 60) = v119;
              goto LABEL_282;
            case 0x15u:
              *(_QWORD *)(a1 + 164) |= 0x800uLL;
              v122 = *((_QWORD *)this + 1);
              if (v122 > 0xFFFFFFFFFFFFFFFBLL || v122 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v122);
              goto LABEL_281;
            case 0x16u:
              *(_QWORD *)(a1 + 164) |= 0x1000uLL;
              v123 = *((_QWORD *)this + 1);
              if (v123 > 0xFFFFFFFFFFFFFFFBLL || v123 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v123);
              goto LABEL_281;
            case 0x17u:
              *(_QWORD *)(a1 + 164) |= 0x2000uLL;
              v124 = *((_QWORD *)this + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v124);
              goto LABEL_281;
            case 0x18u:
              *(_QWORD *)(a1 + 164) |= 0x100uLL;
              v125 = *((_QWORD *)this + 1);
              if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v125);
              goto LABEL_281;
            case 0x19u:
              *(_QWORD *)(a1 + 164) |= 0x200uLL;
              v126 = *((_QWORD *)this + 1);
              if (v126 > 0xFFFFFFFFFFFFFFFBLL || v126 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v126);
              goto LABEL_281;
            case 0x1Au:
              *(_QWORD *)(a1 + 164) |= 0x400uLL;
              v127 = *((_QWORD *)this + 1);
              if (v127 > 0xFFFFFFFFFFFFFFFBLL || v127 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v127);
              goto LABEL_281;
            case 0x1Bu:
              *(_QWORD *)(a1 + 164) |= 0x8000000uLL;
              v128 = *((_QWORD *)this + 1);
              if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v128);
              goto LABEL_281;
            case 0x1Cu:
              *(_QWORD *)(a1 + 164) |= 0x800000uLL;
              v129 = *((_QWORD *)this + 1);
              v130 = *((_QWORD *)this + 2);
              v131 = *(_QWORD *)this;
              if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
              {
                v132 = 0;
                v133 = 0;
                v134 = 0;
                do
                {
                  v135 = v129 + 1;
                  *((_QWORD *)this + 1) = v129 + 1;
                  v136 = *(_BYTE *)(v131 + v129);
                  v134 |= (unint64_t)(v136 & 0x7F) << v132;
                  if ((v136 & 0x80) == 0)
                    goto LABEL_334;
                  v132 += 7;
                  v129 = v135;
                  v14 = v133++ > 8;
                }
                while (!v14);
LABEL_265:
                LODWORD(v134) = 0;
                goto LABEL_334;
              }
              v200 = 0;
              v201 = 0;
              v134 = 0;
              if (v130 <= v129)
                v130 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v130 == v129)
                {
                  LODWORD(v134) = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v202 = v129 + 1;
                  v203 = *(_BYTE *)(v131 + v129);
                  *((_QWORD *)this + 1) = v202;
                  v134 |= (unint64_t)(v203 & 0x7F) << v200;
                  if (v203 < 0)
                  {
                    v200 += 7;
                    v129 = v202;
                    v14 = v201++ > 8;
                    if (v14)
                      goto LABEL_265;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v134) = 0;
                }
                break;
              }
LABEL_334:
              *(_DWORD *)(a1 + 124) = v134;
              goto LABEL_282;
            case 0x1Du:
              *(_QWORD *)(a1 + 164) |= 0x20uLL;
              v137 = *((_QWORD *)this + 1);
              v138 = *((_QWORD *)this + 2);
              v139 = *(_QWORD *)this;
              if (v137 <= 0xFFFFFFFFFFFFFFF5 && v137 + 10 <= v138)
              {
                v140 = 0;
                v141 = 0;
                v142 = 0;
                do
                {
                  v143 = v137 + 1;
                  *((_QWORD *)this + 1) = v137 + 1;
                  v144 = *(_BYTE *)(v139 + v137);
                  v142 |= (unint64_t)(v144 & 0x7F) << v140;
                  if ((v144 & 0x80) == 0)
                    goto LABEL_338;
                  v140 += 7;
                  v137 = v143;
                  v14 = v141++ > 8;
                }
                while (!v14);
LABEL_272:
                v142 = 0;
                goto LABEL_338;
              }
              v204 = 0;
              v205 = 0;
              v142 = 0;
              if (v138 <= v137)
                v138 = *((_QWORD *)this + 1);
              while (2)
              {
                if (v138 == v137)
                {
                  v142 = 0;
                  *((_BYTE *)this + 24) = 1;
                }
                else
                {
                  v206 = v137 + 1;
                  v207 = *(_BYTE *)(v139 + v137);
                  *((_QWORD *)this + 1) = v206;
                  v142 |= (unint64_t)(v207 & 0x7F) << v204;
                  if (v207 < 0)
                  {
                    v204 += 7;
                    v137 = v206;
                    v14 = v205++ > 8;
                    if (v14)
                      goto LABEL_272;
                    continue;
                  }
                  if (*((_BYTE *)this + 24))
                    v142 = 0;
                }
                break;
              }
LABEL_338:
              *(_QWORD *)(a1 + 48) = v142;
              goto LABEL_282;
            case 0x1Eu:
              *(_QWORD *)(a1 + 164) |= 0x2000000uLL;
              v145 = *((_QWORD *)this + 1);
              if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((_QWORD *)this + 2))
                goto LABEL_170;
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v145);
              goto LABEL_281;
            case 0x1Fu:
              *(_QWORD *)(a1 + 164) |= 0x40000000uLL;
              v146 = *((_QWORD *)this + 1);
              if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v146);
LABEL_281:
                *((_QWORD *)this + 1) += 4;
              }
              else
              {
LABEL_170:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_282;
            default:
              if ((_DWORD)v20 == 201)
              {
                *(_QWORD *)(a1 + 164) |= 1uLL;
                v147 = *((_QWORD *)this + 1);
                v148 = *((_QWORD *)this + 2);
                v149 = *(_QWORD *)this;
                if (v147 > 0xFFFFFFFFFFFFFFF5 || v147 + 10 > v148)
                {
                  v208 = 0;
                  v209 = 0;
                  v152 = 0;
                  if (v148 <= v147)
                    v148 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v148 == v147)
                    {
                      v152 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_342;
                    }
                    v210 = v147 + 1;
                    v211 = *(_BYTE *)(v149 + v147);
                    *((_QWORD *)this + 1) = v210;
                    v152 |= (unint64_t)(v211 & 0x7F) << v208;
                    if ((v211 & 0x80) == 0)
                      break;
                    v208 += 7;
                    v147 = v210;
                    v14 = v209++ > 8;
                    if (v14)
                    {
LABEL_279:
                      v152 = 0;
                      goto LABEL_342;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v152 = 0;
                }
                else
                {
                  v150 = 0;
                  v151 = 0;
                  v152 = 0;
                  while (1)
                  {
                    v153 = v147 + 1;
                    *((_QWORD *)this + 1) = v147 + 1;
                    v154 = *(_BYTE *)(v149 + v147);
                    v152 |= (unint64_t)(v154 & 0x7F) << v150;
                    if ((v154 & 0x80) == 0)
                      break;
                    v150 += 7;
                    v147 = v153;
                    v14 = v151++ > 8;
                    if (v14)
                      goto LABEL_279;
                  }
                }
LABEL_342:
                *(_QWORD *)(a1 + 8) = v152;
              }
              else if ((_DWORD)v20 == 202)
              {
                *(_QWORD *)(a1 + 164) |= 2uLL;
                v25 = *((_QWORD *)this + 1);
                v26 = *((_QWORD *)this + 2);
                v27 = *(_QWORD *)this;
                if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
                {
                  v156 = 0;
                  v157 = 0;
                  v30 = 0;
                  if (v26 <= v25)
                    v26 = *((_QWORD *)this + 1);
                  while (1)
                  {
                    if (v26 == v25)
                    {
                      v30 = 0;
                      *((_BYTE *)this + 24) = 1;
                      goto LABEL_290;
                    }
                    v158 = v25 + 1;
                    v159 = *(_BYTE *)(v27 + v25);
                    *((_QWORD *)this + 1) = v158;
                    v30 |= (unint64_t)(v159 & 0x7F) << v156;
                    if ((v159 & 0x80) == 0)
                      break;
                    v156 += 7;
                    v25 = v158;
                    v14 = v157++ > 8;
                    if (v14)
                    {
LABEL_188:
                      v30 = 0;
                      goto LABEL_290;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    v30 = 0;
                }
                else
                {
                  v28 = 0;
                  v29 = 0;
                  v30 = 0;
                  while (1)
                  {
                    v31 = v25 + 1;
                    *((_QWORD *)this + 1) = v25 + 1;
                    v32 = *(_BYTE *)(v27 + v25);
                    v30 |= (unint64_t)(v32 & 0x7F) << v28;
                    if ((v32 & 0x80) == 0)
                      break;
                    v28 += 7;
                    v25 = v31;
                    v14 = v29++ > 8;
                    if (v14)
                      goto LABEL_188;
                  }
                }
LABEL_290:
                *(_QWORD *)(a1 + 16) = v30;
              }
              else
              {
                result = PB::Reader::skip(this);
                if (!(_DWORD)result)
                  return result;
              }
LABEL_282:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F26C084(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 164);
  if ((v4 & 0x100000000) != 0)
  {
    result = PB::Writer::write(this);
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 128));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 148));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200000) == 0)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_22:
    if ((v4 & 0x1000) == 0)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_23:
    if ((v4 & 0x2000) == 0)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x2000000) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  if ((*(_QWORD *)(v3 + 164) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F26C444(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E138;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F26C45C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26C480(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "attached");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26C4E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26C6CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F26C724(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E170;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F26C73C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26C760(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "keyPressedDown");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26C7C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26C9AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F26CA04(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FDE0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F26CA1C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26CA40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accelFilterX", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "accelFilterZ", *(float *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelFilterY", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26CAF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26CD54(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

uint64_t sub_18F26CDE8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EF70;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F26CE00(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26CE24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26CE8C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26D118(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F26D170(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FE18;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F26D188(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26D1AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "touchActive");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26D214(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26D3F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_18F26D450(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294F440;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 184) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 192) = 0;
  return result;
}

void sub_18F26D484(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E294F440;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F26D4E4(PB::Base *a1)
{
  sub_18F26D484(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26D508(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  double *v6;
  double *v7;
  double v8;
  double *v9;
  double *v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  __int16 v15;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 80));
    v5 = *(_WORD *)(a1 + 192);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 88));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "globalReferenceFrame");
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 96));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "locationTimestamp", *(double *)(a1 + 104));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 112));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "machContinuousLocationTimestamp", *(double *)(a1 + 120));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 128));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "polylinesLocation1Latitude", *(double *)(a1 + 136));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "polylinesLocation1Longitude", *(double *)(a1 + 144));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "polylinesLocation2Latitude", *(double *)(a1 + 152));
  v5 = *(_WORD *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_37:
  PB::TextFormatter::format(this, "polylinesLocation2Longitude", *(double *)(a1 + 160));
  if ((*(_WORD *)(a1 + 192) & 0x800) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "roadID");
LABEL_15:
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "rotationFromGlobalToCameraFrame", v8);
  }
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "rotationFromGlobalToDeviceFrame", v11);
  }
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "rotationalAccuracyInRadians", v14);
  }
  v15 = *(_WORD *)(a1 + 192);
  if ((v15 & 0x4000) != 0)
  {
    PB::TextFormatter::format(this, "status");
    v15 = *(_WORD *)(a1 + 192);
  }
  if ((v15 & 0x1000) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 176));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F26D7A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  unsigned int v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  char *v109;
  _QWORD *v110;
  unint64_t v111;
  char *v112;
  unint64_t v113;
  char *v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v150;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v150 = a1 + 72;
    v9 = (void **)(a1 + 8);
    v10 = a1 + 24;
    v11 = (void **)(a1 + 32);
    v12 = a1 + 48;
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 192) |= 0x4000u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_212;
              v29 += 7;
              v26 = v32;
              v19 = v30++ > 8;
            }
            while (!v19);
LABEL_160:
            LODWORD(v31) = 0;
            goto LABEL_212;
          }
          v104 = 0;
          v105 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v106 = v26 + 1;
              v107 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v106;
              v31 |= (unint64_t)(v107 & 0x7F) << v104;
              if (v107 < 0)
              {
                v104 += 7;
                v26 = v106;
                v19 = v105++ > 8;
                if (v19)
                  goto LABEL_160;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_212:
          *(_DWORD *)(a1 + 188) = v31;
          goto LABEL_245;
        case 2u:
          *(_WORD *)(a1 + 192) |= 0x1000u;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 176) = *(_QWORD *)(*(_QWORD *)this + v34);
          goto LABEL_244;
        case 3u:
          *(_WORD *)(a1 + 192) |= 0x40u;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v35);
          goto LABEL_244;
        case 4u:
          if (v25 != 2)
          {
            v109 = *(char **)(a1 + 40);
            v108 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v109 >= v108)
            {
              v123 = (char *)*v11;
              v124 = (v109 - (_BYTE *)*v11) >> 3;
              v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 61)
LABEL_255:
                sub_18F26F8C0();
              v126 = v108 - (_QWORD)v123;
              if (v126 >> 2 > v125)
                v125 = v126 >> 2;
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF8)
                v127 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v127 = v125;
              if (v127)
              {
                v128 = (char *)sub_18F26F8D4(v12, v127);
                v123 = *(char **)(a1 + 32);
                v109 = *(char **)(a1 + 40);
              }
              else
              {
                v128 = 0;
              }
              v141 = &v128[8 * v124];
              *(_QWORD *)v141 = 0;
              v110 = v141 + 8;
              while (v109 != v123)
              {
                v142 = *((_QWORD *)v109 - 1);
                v109 -= 8;
                *((_QWORD *)v141 - 1) = v142;
                v141 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v141;
              *(_QWORD *)(a1 + 40) = v110;
              *(_QWORD *)(a1 + 48) = &v128[8 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *(_QWORD *)v109 = 0;
              v110 = v109 + 8;
            }
            *(_QWORD *)(a1 + 40) = v110;
            goto LABEL_240;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v36 = *((_QWORD *)this + 1);
          v37 = *((_QWORD *)this + 2);
          while (v36 < v37 && !*((_BYTE *)this + 24))
          {
            v39 = *(char **)(a1 + 40);
            v38 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v39 >= v38)
            {
              v41 = (char *)*v11;
              v42 = (v39 - (_BYTE *)*v11) >> 3;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 61)
                goto LABEL_255;
              v44 = v38 - (_QWORD)v41;
              if (v44 >> 2 > v43)
                v43 = v44 >> 2;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v45 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_18F26F8D4(v12, v45);
                v41 = *(char **)(a1 + 32);
                v39 = *(char **)(a1 + 40);
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[8 * v42];
              *(_QWORD *)v47 = 0;
              v40 = v47 + 8;
              while (v39 != v41)
              {
                v48 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v47 - 1) = v48;
                v47 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v47;
              *(_QWORD *)(a1 + 40) = v40;
              *(_QWORD *)(a1 + 48) = &v46[8 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v39 = 0;
              v40 = v39 + 8;
            }
            *(_QWORD *)(a1 + 40) = v40;
            v49 = *((_QWORD *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((_QWORD *)this + 2))
              goto LABEL_181;
            *(v40 - 1) = *(_QWORD *)(*(_QWORD *)this + v49);
            v37 = *((_QWORD *)this + 2);
            v36 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v36;
          }
          goto LABEL_182;
        case 5u:
          if (v25 != 2)
          {
            v112 = *(char **)(a1 + 16);
            v111 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v112 >= v111)
            {
              v129 = (char *)*v9;
              v130 = (v112 - (_BYTE *)*v9) >> 3;
              v131 = v130 + 1;
              if ((unint64_t)(v130 + 1) >> 61)
LABEL_256:
                sub_18F26F8C0();
              v132 = v111 - (_QWORD)v129;
              if (v132 >> 2 > v131)
                v131 = v132 >> 2;
              if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFF8)
                v133 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v133 = v131;
              if (v133)
              {
                v134 = (char *)sub_18F26F8D4(v10, v133);
                v129 = *(char **)(a1 + 8);
                v112 = *(char **)(a1 + 16);
              }
              else
              {
                v134 = 0;
              }
              v143 = &v134[8 * v130];
              *(_QWORD *)v143 = 0;
              v110 = v143 + 8;
              while (v112 != v129)
              {
                v144 = *((_QWORD *)v112 - 1);
                v112 -= 8;
                *((_QWORD *)v143 - 1) = v144;
                v143 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v143;
              *(_QWORD *)(a1 + 16) = v110;
              *(_QWORD *)(a1 + 24) = &v134[8 * v133];
              if (v129)
                operator delete(v129);
            }
            else
            {
              *(_QWORD *)v112 = 0;
              v110 = v112 + 8;
            }
            *(_QWORD *)(a1 + 16) = v110;
            goto LABEL_240;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v50 = *((_QWORD *)this + 1);
          v51 = *((_QWORD *)this + 2);
          while (v50 < v51 && !*((_BYTE *)this + 24))
          {
            v53 = *(char **)(a1 + 16);
            v52 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v53 >= v52)
            {
              v55 = (char *)*v9;
              v56 = (v53 - (_BYTE *)*v9) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                goto LABEL_256;
              v58 = v52 - (_QWORD)v55;
              if (v58 >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)sub_18F26F8D4(v10, v59);
                v55 = *(char **)(a1 + 8);
                v53 = *(char **)(a1 + 16);
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[8 * v56];
              *(_QWORD *)v61 = 0;
              v54 = v61 + 8;
              while (v53 != v55)
              {
                v62 = *((_QWORD *)v53 - 1);
                v53 -= 8;
                *((_QWORD *)v61 - 1) = v62;
                v61 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v61;
              *(_QWORD *)(a1 + 16) = v54;
              *(_QWORD *)(a1 + 24) = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_QWORD *)v53 = 0;
              v54 = v53 + 8;
            }
            *(_QWORD *)(a1 + 16) = v54;
            v63 = *((_QWORD *)this + 1);
            if (v63 > 0xFFFFFFFFFFFFFFF7 || v63 + 8 > *((_QWORD *)this + 2))
              goto LABEL_181;
            *(v54 - 1) = *(_QWORD *)(*(_QWORD *)this + v63);
            v51 = *((_QWORD *)this + 2);
            v50 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v50;
          }
          goto LABEL_182;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v64 = *((_QWORD *)this + 1);
            v65 = *((_QWORD *)this + 2);
            while (v64 < v65 && !*((_BYTE *)this + 24))
            {
              v67 = *(char **)(a1 + 64);
              v66 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v67 >= v66)
              {
                v69 = (char *)*v8;
                v70 = (v67 - (_BYTE *)*v8) >> 3;
                v71 = v70 + 1;
                if ((unint64_t)(v70 + 1) >> 61)
                  goto LABEL_257;
                v72 = v66 - (_QWORD)v69;
                if (v72 >> 2 > v71)
                  v71 = v72 >> 2;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
                  v73 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v73 = v71;
                if (v73)
                {
                  v74 = (char *)sub_18F26F8D4(v150, v73);
                  v69 = *(char **)(a1 + 56);
                  v67 = *(char **)(a1 + 64);
                }
                else
                {
                  v74 = 0;
                }
                v75 = &v74[8 * v70];
                *(_QWORD *)v75 = 0;
                v68 = v75 + 8;
                while (v67 != v69)
                {
                  v76 = *((_QWORD *)v67 - 1);
                  v67 -= 8;
                  *((_QWORD *)v75 - 1) = v76;
                  v75 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v75;
                *(_QWORD *)(a1 + 64) = v68;
                *(_QWORD *)(a1 + 72) = &v74[8 * v73];
                if (v69)
                  operator delete(v69);
              }
              else
              {
                *(_QWORD *)v67 = 0;
                v68 = v67 + 8;
              }
              *(_QWORD *)(a1 + 64) = v68;
              v77 = *((_QWORD *)this + 1);
              if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((_QWORD *)this + 2))
              {
LABEL_181:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v68 - 1) = *(_QWORD *)(*(_QWORD *)this + v77);
              v65 = *((_QWORD *)this + 2);
              v64 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v64;
            }
LABEL_182:
            PB::Reader::recallMark();
          }
          else
          {
            v114 = *(char **)(a1 + 64);
            v113 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v114 >= v113)
            {
              v135 = (char *)*v8;
              v136 = (v114 - (_BYTE *)*v8) >> 3;
              v137 = v136 + 1;
              if ((unint64_t)(v136 + 1) >> 61)
LABEL_257:
                sub_18F26F8C0();
              v138 = v113 - (_QWORD)v135;
              if (v138 >> 2 > v137)
                v137 = v138 >> 2;
              if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8)
                v139 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v139 = v137;
              if (v139)
              {
                v140 = (char *)sub_18F26F8D4(v150, v139);
                v135 = *(char **)(a1 + 56);
                v114 = *(char **)(a1 + 64);
              }
              else
              {
                v140 = 0;
              }
              v145 = &v140[8 * v136];
              *(_QWORD *)v145 = 0;
              v110 = v145 + 8;
              while (v114 != v135)
              {
                v146 = *((_QWORD *)v114 - 1);
                v114 -= 8;
                *((_QWORD *)v145 - 1) = v146;
                v145 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v145;
              *(_QWORD *)(a1 + 64) = v110;
              *(_QWORD *)(a1 + 72) = &v140[8 * v139];
              if (v135)
                operator delete(v135);
            }
            else
            {
              *(_QWORD *)v114 = 0;
              v110 = v114 + 8;
            }
            *(_QWORD *)(a1 + 64) = v110;
LABEL_240:
            v147 = *((_QWORD *)this + 1);
            if (v147 <= 0xFFFFFFFFFFFFFFF7 && v147 + 8 <= *((_QWORD *)this + 2))
            {
              *(v110 - 1) = *(_QWORD *)(*(_QWORD *)this + v147);
LABEL_244:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_242:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_245:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 7u:
          *(_WORD *)(a1 + 192) |= 2u;
          v78 = *((_QWORD *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v78);
          goto LABEL_244;
        case 8u:
          *(_WORD *)(a1 + 192) |= 0x2000u;
          v79 = *((_QWORD *)this + 1);
          v80 = *((_QWORD *)this + 2);
          v81 = *(_QWORD *)this;
          if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = v79 + 1;
              *((_QWORD *)this + 1) = v79 + 1;
              v86 = *(_BYTE *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0)
                goto LABEL_215;
              v82 += 7;
              v79 = v85;
              v19 = v83++ > 8;
            }
            while (!v19);
LABEL_173:
            LODWORD(v84) = 0;
            goto LABEL_215;
          }
          v115 = 0;
          v116 = 0;
          v84 = 0;
          if (v80 <= v79)
            v80 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v80 == v79)
            {
              LODWORD(v84) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v79 + 1;
              v118 = *(_BYTE *)(v81 + v79);
              *((_QWORD *)this + 1) = v117;
              v84 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v79 = v117;
                v19 = v116++ > 8;
                if (v19)
                  goto LABEL_173;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v84) = 0;
            }
            break;
          }
LABEL_215:
          *(_DWORD *)(a1 + 184) = v84;
          goto LABEL_245;
        case 9u:
          *(_WORD *)(a1 + 192) |= 4u;
          v87 = *((_QWORD *)this + 1);
          if (v87 > 0xFFFFFFFFFFFFFFF7 || v87 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v87);
          goto LABEL_244;
        case 0xAu:
          *(_WORD *)(a1 + 192) |= 0x10u;
          v88 = *((_QWORD *)this + 1);
          if (v88 > 0xFFFFFFFFFFFFFFF7 || v88 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v88);
          goto LABEL_244;
        case 0xBu:
          *(_WORD *)(a1 + 192) |= 1u;
          v89 = *((_QWORD *)this + 1);
          if (v89 > 0xFFFFFFFFFFFFFFF7 || v89 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v89);
          goto LABEL_244;
        case 0xCu:
          *(_WORD *)(a1 + 192) |= 8u;
          v90 = *((_QWORD *)this + 1);
          if (v90 > 0xFFFFFFFFFFFFFFF7 || v90 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v90);
          goto LABEL_244;
        case 0xDu:
          *(_WORD *)(a1 + 192) |= 0x20u;
          v91 = *((_QWORD *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFF7 || v91 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v91);
          goto LABEL_244;
        case 0xEu:
          *(_WORD *)(a1 + 192) |= 0x800u;
          v92 = *((_QWORD *)this + 1);
          v93 = *((_QWORD *)this + 2);
          v94 = *(_QWORD *)this;
          if (v92 <= 0xFFFFFFFFFFFFFFF5 && v92 + 10 <= v93)
          {
            v95 = 0;
            v96 = 0;
            v97 = 0;
            do
            {
              v98 = v92 + 1;
              *((_QWORD *)this + 1) = v92 + 1;
              v99 = *(_BYTE *)(v94 + v92);
              v97 |= (unint64_t)(v99 & 0x7F) << v95;
              if ((v99 & 0x80) == 0)
                goto LABEL_218;
              v95 += 7;
              v92 = v98;
              v19 = v96++ > 8;
            }
            while (!v19);
LABEL_180:
            v97 = 0;
            goto LABEL_218;
          }
          v119 = 0;
          v120 = 0;
          v97 = 0;
          if (v93 <= v92)
            v93 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v93 == v92)
            {
              v97 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v121 = v92 + 1;
              v122 = *(_BYTE *)(v94 + v92);
              *((_QWORD *)this + 1) = v121;
              v97 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                v92 = v121;
                v19 = v120++ > 8;
                if (v19)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v97 = 0;
            }
            break;
          }
LABEL_218:
          *(_QWORD *)(a1 + 168) = v97;
          goto LABEL_245;
        case 0xFu:
          *(_WORD *)(a1 + 192) |= 0x80u;
          v100 = *((_QWORD *)this + 1);
          if (v100 > 0xFFFFFFFFFFFFFFF7 || v100 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v100);
          goto LABEL_244;
        case 0x10u:
          *(_WORD *)(a1 + 192) |= 0x100u;
          v101 = *((_QWORD *)this + 1);
          if (v101 > 0xFFFFFFFFFFFFFFF7 || v101 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 144) = *(_QWORD *)(*(_QWORD *)this + v101);
          goto LABEL_244;
        case 0x11u:
          *(_WORD *)(a1 + 192) |= 0x200u;
          v102 = *((_QWORD *)this + 1);
          if (v102 > 0xFFFFFFFFFFFFFFF7 || v102 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v102);
          goto LABEL_244;
        case 0x12u:
          *(_WORD *)(a1 + 192) |= 0x400u;
          v103 = *((_QWORD *)this + 1);
          if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((_QWORD *)this + 2))
            goto LABEL_242;
          *(_QWORD *)(a1 + 160) = *(_QWORD *)(*(_QWORD *)this + v103);
          goto LABEL_244;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_245;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26E410(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  __int16 v14;

  v3 = result;
  v4 = *(_WORD *)(result + 192);
  if ((v4 & 0x4000) == 0)
  {
    if ((*(_WORD *)(result + 192) & 0x1000) == 0)
      goto LABEL_3;
LABEL_28:
    result = PB::Writer::write(this, *(double *)(v3 + 176));
    if ((*(_WORD *)(v3 + 192) & 0x40) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 192);
  if ((v4 & 0x1000) != 0)
    goto LABEL_28;
LABEL_3:
  if ((v4 & 0x40) != 0)
LABEL_4:
    result = PB::Writer::write(this, *(double *)(v3 + 128));
LABEL_5:
  v5 = *(double **)(v3 + 32);
  v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(double **)(v3 + 8);
  v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(double **)(v3 + 56);
  v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 88));
    v14 = *(_WORD *)(v3 + 192);
    if ((v14 & 0x2000) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_32;
    }
  }
  else if ((*(_WORD *)(v3 + 192) & 0x2000) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::writeVarInt(this);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 0x10) == 0)
      goto LABEL_18;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(double *)(v3 + 96));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x10) == 0)
  {
LABEL_18:
    if ((v14 & 1) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 1) == 0)
  {
LABEL_19:
    if ((v14 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 8) == 0)
  {
LABEL_20:
    if ((v14 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x20) == 0)
  {
LABEL_21:
    if ((v14 & 0x800) == 0)
      goto LABEL_22;
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(double *)(v3 + 120));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x800) == 0)
  {
LABEL_22:
    if ((v14 & 0x80) == 0)
      goto LABEL_23;
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::writeVarInt(this);
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x80) == 0)
  {
LABEL_23:
    if ((v14 & 0x100) == 0)
      goto LABEL_24;
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(double *)(v3 + 136));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x100) == 0)
  {
LABEL_24:
    if ((v14 & 0x200) == 0)
      goto LABEL_25;
    goto LABEL_40;
  }
LABEL_39:
  result = PB::Writer::write(this, *(double *)(v3 + 144));
  v14 = *(_WORD *)(v3 + 192);
  if ((v14 & 0x200) == 0)
  {
LABEL_25:
    if ((v14 & 0x400) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 160));
  }
LABEL_40:
  result = PB::Writer::write(this, *(double *)(v3 + 152));
  if ((*(_WORD *)(v3 + 192) & 0x400) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 160));
  return result;
}

uint64_t sub_18F26E644(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E678;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F26E65C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26E680(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ch0");
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ch1");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "ch2");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "ch3");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 36));
    if ((*(_BYTE *)(a1 + 40) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_14:
  PB::TextFormatter::format(this, "ch4");
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((v5 & 1) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26E790(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_101;
            case 2u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v53 = v21++;
                  v54 = *(_BYTE *)(v22 + v53);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_105:
                    v2 = v53 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_105;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_106;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 16) = v25;
              goto LABEL_127;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 4u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v57 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_127;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    v2 = v61 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_115;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_116;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_127;
            case 5u:
              *(_BYTE *)(a1 + 40) |= 0x10u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_121;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    v2 = v65 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_120;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_121;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *(_DWORD *)(a1 + 28) = v43;
              goto LABEL_127;
            case 6u:
              *(_BYTE *)(a1 + 40) |= 0x20u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    v2 = v69 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_125;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_126;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 32) = v49;
LABEL_127:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 7u:
              *(_BYTE *)(a1 + 40) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_101:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_127;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_127;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F26EE20(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 40) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

uint64_t sub_18F26EF08(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FA60;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F26EF20(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26EF44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "gravityBufferDeltaToCurrentMax", *(float *)(a1 + 32));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gravityFilterDeltaToHeadUp", *(float *)(a1 + 36));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "timestampGravityBufferFront", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 40) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 2) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestampTimerRef", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26F014(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_36;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_36;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_39;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_42;
        case 5u:
          *(_BYTE *)(a1 + 40) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_41:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_42:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_39:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F26F2B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 40) & 0x10) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

uint64_t sub_18F26F360(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FE50;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F26F378(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F26F39C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "status");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestampArrival", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F26F42C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int i;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  unint64_t v30;
  char v31;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  for (i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; i = *((unsigned __int8 *)this + 24))
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      i = 1;
      *((_BYTE *)this + 24) = 1;
      return i == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      i = 0;
      return i == 0;
    }
    v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(_BYTE *)(a1 + 28) |= 2u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v28 = 0;
          v29 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v30 = v21++;
            v31 = *(_BYTE *)(v22 + v30);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_51:
          v2 = v30 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_53;
      }
      *(_BYTE *)(a1 + 28) |= 1u;
      v2 = *((_QWORD *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_47:
        v2 = *((_QWORD *)this + 1) + 8;
        *((_QWORD *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((_BYTE *)this + 24) = 1;
LABEL_53:
    v3 = *((_QWORD *)this + 2);
  }
  return i == 0;
}

uint64_t sub_18F26F6F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 16));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

void sub_18F26F770(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18F26F7EC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x194001438);
  }
}

void ***sub_18F26F834(void ***result, void **a2)
{
  void **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    free(*v2);
    JUMPOUT(0x194001438);
  }
  return result;
}

char *sub_18F26F880(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_18F26F8C0();
  result = (char *)sub_18F26F8D4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_18F26F8C0()
{
  sub_18F26F908("vector");
}

void *sub_18F26F8D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_18F26F97C();
  return operator new(8 * a2);
}

void sub_18F26F908(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18F26F958(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E2942B40, MEMORY[0x1E0DE42D0]);
}

void sub_18F26F944(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18F26F958(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void sub_18F26F97C()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void *sub_18F26F9A4(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_18F26FA30();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_18F26FA30()
{
  sub_18F26F908("basic_string");
}

char *sub_18F26FA44(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_18F26F8C0();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_18F26FB4C(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *sub_18F26FB4C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_18F26F8C0();
  result = (char *)sub_18F26FB8C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_18F26FB8C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_18F26F97C();
  return operator new(4 * a2);
}

uint64_t sub_18F26FBC0(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

id sub_18F26FC20()
{
  if (qword_1EE16E6E0 != -1)
    dispatch_once(&qword_1EE16E6E0, &unk_1E2952BE8);
  return (id)qword_1EE16E938;
}

void sub_18F26FC60()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.Msl.DefaultsQueue", 0);
  v1 = (void *)qword_1EE16E938;
  qword_1EE16E938 = (uint64_t)v0;

}

void sub_18F26FC8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;

  *(_QWORD *)a2 = 1048576000;
  *(_QWORD *)(a2 + 8) = 0x3200015180;
  sub_18F270374((_QWORD *)(a2 + 16), "/tmp/");
  sub_18F270374((_QWORD *)(a2 + 40), "");
  sub_18F270374((_QWORD *)(a2 + 64), "msl");
  *(_DWORD *)(a2 + 88) = 2;
  *(_QWORD *)(a2 + 96) = 300;
  objc_msgSend_allKeys(*(void **)(a1 + 16), v4, v5, v6, v7);
  v78 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_containsObject_(v78, v8, (uint64_t)CFSTR("FilePrefix"), v9, v10))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v11, (uint64_t)CFSTR("FilePrefix"), v12, v13);
    v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v19 = objc_msgSend_UTF8String(v14, v15, v16, v17, v18);
    MEMORY[0x1940012AC](a2 + 40, v19);

  }
  if (objc_msgSend_containsObject_(v78, v11, (uint64_t)CFSTR("FileBasePath"), v12, v13))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v20, (uint64_t)CFSTR("FileBasePath"), v21, v22);
    v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v28 = objc_msgSend_UTF8String(v23, v24, v25, v26, v27);
    MEMORY[0x1940012AC](a2 + 16, v28);

  }
  if (objc_msgSend_containsObject_(v78, v20, (uint64_t)CFSTR("FileExtension"), v21, v22))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v29, (uint64_t)CFSTR("FileExtension"), v30, v31);
    v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v37 = objc_msgSend_UTF8String(v32, v33, v34, v35, v36);
    MEMORY[0x1940012AC](a2 + 64, v37);

  }
  if (objc_msgSend_containsObject_(v78, v29, (uint64_t)CFSTR("FileTimeInterval"), v30, v31))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v38, (uint64_t)CFSTR("FileTimeInterval"), v39, v40);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a2 + 8) = objc_msgSend_unsignedIntValue(v41, v42, v43, v44, v45);

  }
  if (objc_msgSend_containsObject_(v78, v38, (uint64_t)CFSTR("FilesToKeep"), v39, v40))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v46, (uint64_t)CFSTR("FilesToKeep"), v47, v48);
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a2 + 12) = objc_msgSend_unsignedIntValue(v49, v50, v51, v52, v53);

  }
  if (objc_msgSend_containsObject_(v78, v46, (uint64_t)CFSTR("FileSize"), v47, v48))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v54, (uint64_t)CFSTR("FileSize"), v55, v56);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)a2 = objc_msgSend_unsignedIntValue(v57, v58, v59, v60, v61);

  }
  if (objc_msgSend_containsObject_(v78, v54, (uint64_t)CFSTR("ProtectionClass"), v55, v56))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v62, (uint64_t)CFSTR("ProtectionClass"), v63, v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)(a2 + 88) = objc_msgSend_unsignedIntValue(v65, v66, v67, v68, v69);

  }
  if (objc_msgSend_containsObject_(v78, v62, (uint64_t)CFSTR("FlushTimeout"), v63, v64))
  {
    objc_msgSend_valueForKey_(*(void **)(a1 + 16), v70, (uint64_t)CFSTR("FlushTimeout"), v71, v72);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    *(_QWORD *)(a2 + 96) = objc_msgSend_longLongValue(v73, v74, v75, v76, v77);

  }
}

void sub_18F26FF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v10;
  void *v11;

  sub_18F26FFB0(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_18F26FFB0(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_18F270000(uint64_t a1, void *a2, void *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  dispatch_time_t v13;
  NSObject *v14;
  _QWORD block[5];

  v5 = a2;
  v10 = (void *)objc_msgSend_copy(a3, v6, v7, v8, v9);
  objc_msgSend_setObject_forKeyedSubscript_(*(void **)(a1 + 16), v11, (uint64_t)v10, (uint64_t)v5, v12);

  if (!*(_BYTE *)a1)
  {
    *(_BYTE *)a1 = 1;
    v13 = dispatch_time(0, 10000000000);
    sub_18F26FC20();
    v14 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_18F2700F0;
    block[3] = &unk_1E2955738;
    block[4] = a1;
    dispatch_after(v13, v14, block);

  }
}

void sub_18F2700D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18F2700F0(uint64_t a1)
{
  uint64_t v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[16];
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *__p;
  char v11;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (std::mutex *)(*(_QWORD *)(v1 + 8) + 24);
  std::mutex::lock(v2);
  v3 = *(_QWORD *)(v1 + 8);
  v4 = operator new();
  sub_18F26FC8C(v1, (uint64_t)v5);
  sub_18F2A92C0(v4, v5);
  sub_18F2701F0((uint64_t *)(v3 + 16), v4);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  *(_BYTE *)v1 = 0;
  std::mutex::unlock(v2);
}

void sub_18F2701AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  sub_18F26FFB0((uint64_t)va);
  MEMORY[0x194001438](v3, 0x1032C4044EE41C5);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_18F2701F0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18F2A9374();
    JUMPOUT(0x194001438);
  }
  return result;
}

void sub_18F27034C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

_QWORD *sub_18F270374(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_18F26FA30();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_18F270424()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.MotionSensorLogging", "MSL");
  v1 = (void *)qword_1EE16E6E8;
  qword_1EE16E6E8 = (uint64_t)v0;

}

uint64_t sub_18F270454(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951CC0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F27046C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F270490(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "alsTrustedLux", *(float *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2704DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F270674(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this, *(float *)(result + 8));
  return result;
}

uint64_t sub_18F270690(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951E80;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F2706A8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2706CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F270734(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2709C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

_QWORD *sub_18F270A18(_QWORD *result)
{
  *result = &off_1E2951CF8;
  return result;
}

void sub_18F270A2C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F270A50(int a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F270A7C(int a1, PB::Reader *this)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v7;
  char v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  unint64_t v15;
  char v16;

  while (1)
  {
    v3 = *((_QWORD *)this + 1);
    v4 = *((_QWORD *)this + 2);
    v5 = *((unsigned __int8 *)this + 24);
    if (v3 >= v4 || v5 != 0)
      return v5 == 0;
    v7 = *(_QWORD *)this;
    v8 = 0;
    v9 = 0;
    v10 = v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v4;
    if (v10)
    {
      v14 = 0;
      if (v3 > v4)
        v4 = *((_QWORD *)this + 1);
      while (v4 != v3)
      {
        v11 = v3 + 1;
        v12 = *(_BYTE *)(v7 + v3);
        *((_QWORD *)this + 1) = v11;
        v14 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0)
          goto LABEL_22;
        v8 += 7;
        v3 = v11;
        if (v9++ >= 9)
        {
LABEL_21:
          LOBYTE(v14) = 0;
          goto LABEL_22;
        }
      }
      v5 = 1;
      *((_BYTE *)this + 24) = 1;
      return v5 == 0;
    }
    v14 = 0;
    while (1)
    {
      v15 = v3 + 1;
      *((_QWORD *)this + 1) = v3 + 1;
      v16 = *(_BYTE *)(v7 + v3);
      v14 |= (unint64_t)(v16 & 0x7F) << v8;
      if ((v16 & 0x80) == 0)
        break;
      v8 += 7;
      v3 = v15;
      v10 = v9++ > 8;
      if (v10)
        goto LABEL_21;
    }
LABEL_22:
    if ((v14 & 7) == 4)
    {
      v5 = 0;
      return v5 == 0;
    }
    if ((PB::Reader::skip(this) & 1) == 0)
      return 0;
  }
}

_QWORD *sub_18F270B94(_QWORD *result)
{
  *result = &off_1E2951C10;
  result[1] = 0;
  return result;
}

void sub_18F270BA4(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E2951C10;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_18F270BE4(PB::Base *a1)
{
  sub_18F270BA4(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F270C08(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F270C50(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v24 = 0;
        v21 = *v7;
        *v7 = (uint64_t)v20;
        if (v21)
        {
          sub_18F26F7EC((uint64_t)v7, v21);
          v22 = v24;
          v24 = 0;
          if (v22)
            sub_18F26F7EC((uint64_t)&v24, v22);
        }
        PB::Reader::read();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_20:
        v11 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F270DF0(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return PB::Writer::write();
  return result;
}

uint64_t sub_18F270E0C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D680;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_18F270E28(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E294D680;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F270E68(PB::Base *a1)
{
  sub_18F270E28(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F270E8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 2) != 0)
  {
    PB::TextFormatter::format(this, "status");
    v8 = *(_BYTE *)(a1 + 56);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 4) == 0)
        goto LABEL_6;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 4) == 0)
  {
LABEL_6:
    if ((v8 & 8) == 0)
      goto LABEL_7;
LABEL_13:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 48));
    if ((*(_BYTE *)(a1 + 56) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_8;
  }
LABEL_12:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 44));
  v8 = *(_BYTE *)(a1 + 56);
  if ((v8 & 8) != 0)
    goto LABEL_13;
LABEL_7:
  if ((v8 & 0x10) != 0)
LABEL_8:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 52));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F270F98(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  char *v50;
  _QWORD *v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 56) |= 1u;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v22);
          goto LABEL_102;
        case 2u:
          *(_BYTE *)(a1 + 56) |= 4u;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 56) |= 8u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v24);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 56) |= 0x10u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((_QWORD *)this + 2))
            goto LABEL_100;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v25);
LABEL_37:
          v26 = *((_QWORD *)this + 1) + 4;
          goto LABEL_103;
        case 5u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v27 = *((_QWORD *)this + 1);
            v28 = *((_QWORD *)this + 2);
            while (v27 < v28 && !*((_BYTE *)this + 24))
            {
              v30 = *(char **)(a1 + 16);
              v29 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v30 >= v29)
              {
                v32 = (char *)*v8;
                v33 = (v30 - (_BYTE *)*v8) >> 3;
                v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61)
                  goto LABEL_114;
                v35 = v29 - (_QWORD)v32;
                if (v35 >> 2 > v34)
                  v34 = v35 >> 2;
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                  v36 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v36 = v34;
                if (v36)
                {
                  v37 = (char *)sub_18F26F8D4(v9, v36);
                  v32 = *(char **)(a1 + 8);
                  v30 = *(char **)(a1 + 16);
                }
                else
                {
                  v37 = 0;
                }
                v38 = &v37[8 * v33];
                *(_QWORD *)v38 = 0;
                v31 = v38 + 8;
                while (v30 != v32)
                {
                  v39 = *((_QWORD *)v30 - 1);
                  v30 -= 8;
                  *((_QWORD *)v38 - 1) = v39;
                  v38 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v38;
                *(_QWORD *)(a1 + 16) = v31;
                *(_QWORD *)(a1 + 24) = &v37[8 * v36];
                if (v32)
                  operator delete(v32);
              }
              else
              {
                *(_QWORD *)v30 = 0;
                v31 = v30 + 8;
              }
              *(_QWORD *)(a1 + 16) = v31;
              v40 = *((_QWORD *)this + 1);
              if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_QWORD *)(*(_QWORD *)this + v40);
              v28 = *((_QWORD *)this + 2);
              v27 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v27;
            }
            PB::Reader::recallMark();
          }
          else
          {
            v50 = *(char **)(a1 + 16);
            v49 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v50 >= v49)
            {
              v56 = (char *)*v8;
              v57 = (v50 - (_BYTE *)*v8) >> 3;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61)
LABEL_114:
                sub_18F26F8C0();
              v59 = v49 - (_QWORD)v56;
              if (v59 >> 2 > v58)
                v58 = v59 >> 2;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
                v60 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                v61 = (char *)sub_18F26F8D4(v9, v60);
                v56 = *(char **)(a1 + 8);
                v50 = *(char **)(a1 + 16);
              }
              else
              {
                v61 = 0;
              }
              v62 = &v61[8 * v57];
              *(_QWORD *)v62 = 0;
              v51 = v62 + 8;
              while (v50 != v56)
              {
                v63 = *((_QWORD *)v50 - 1);
                v50 -= 8;
                *((_QWORD *)v62 - 1) = v63;
                v62 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v62;
              *(_QWORD *)(a1 + 16) = v51;
              *(_QWORD *)(a1 + 24) = &v61[8 * v60];
              if (v56)
                operator delete(v56);
            }
            else
            {
              *(_QWORD *)v50 = 0;
              v51 = v50 + 8;
            }
            *(_QWORD *)(a1 + 16) = v51;
            v64 = *((_QWORD *)this + 1);
            if (v64 <= 0xFFFFFFFFFFFFFFF7 && v64 + 8 <= *((_QWORD *)this + 2))
            {
              *(v51 - 1) = *(_QWORD *)(*(_QWORD *)this + v64);
LABEL_102:
              v26 = *((_QWORD *)this + 1) + 8;
LABEL_103:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_100:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_104:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 56) |= 2u;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          v43 = *(_QWORD *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            v44 = 0;
            v45 = 0;
            v46 = 0;
            do
            {
              v47 = v41 + 1;
              *((_QWORD *)this + 1) = v41 + 1;
              v48 = *(_BYTE *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0)
                goto LABEL_89;
              v44 += 7;
              v41 = v47;
              v16 = v45++ > 8;
            }
            while (!v16);
LABEL_77:
            LODWORD(v46) = 0;
            goto LABEL_89;
          }
          v52 = 0;
          v53 = 0;
          v46 = 0;
          if (v42 <= v41)
            v42 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v54 = v41 + 1;
              v55 = *(_BYTE *)(v43 + v41);
              *((_QWORD *)this + 1) = v54;
              v46 |= (unint64_t)(v55 & 0x7F) << v52;
              if (v55 < 0)
              {
                v52 += 7;
                v41 = v54;
                v16 = v53++ > 8;
                if (v16)
                  goto LABEL_77;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v46) = 0;
            }
            break;
          }
LABEL_89:
          *(_DWORD *)(a1 + 40) = v46;
          goto LABEL_104;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_104;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2714F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  double *v5;
  double *v6;
  double v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 56);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_13:
      result = PB::Writer::write(this, *(float *)(v3 + 48));
      if ((*(_BYTE *)(v3 + 56) & 0x10) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_BYTE *)(v3 + 56);
  if ((v4 & 8) != 0)
    goto LABEL_13;
LABEL_4:
  if ((v4 & 0x10) != 0)
LABEL_5:
    result = PB::Writer::write(this, *(float *)(v3 + 52));
LABEL_6:
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  if ((*(_BYTE *)(v3 + 56) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F2715D4(_QWORD *result)
{
  *result = &off_1E294D6B8;
  result[1] = 0;
  return result;
}

void sub_18F2715E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27160C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "state");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F271658(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v3 <= v20)
            v2 = *((_QWORD *)this + 1);
          else
            v2 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_43;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_42:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F27188C(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2718AC(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951BD8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F2718C4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2718E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2719B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_52;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_52:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_57;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_56;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_57;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_58:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_58;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F271D08(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F271DB8(_QWORD *result)
{
  *result = &off_1E2951EB8;
  result[1] = 0;
  return result;
}

void sub_18F271DC8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951EB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F271E08(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2951EB8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F271E5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F271EAC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E2951BD8;
        v20[8] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F272080(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F27209C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294C928;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F2720B4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2720D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "batch");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "y", *(float *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 32) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 28));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2721A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_52;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_52:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_58;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_57;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_56:
                    v2 = v29 + 1;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_56;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_57;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_57:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_58:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_58;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2724F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F2725A8(_QWORD *result)
{
  *result = &off_1E294CDC0;
  result[1] = 0;
  return result;
}

void sub_18F2725B8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294CDC0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2725F8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294CDC0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27264C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27269C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E2951BD8;
        v20[8] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F272870(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F27288C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951EF0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F2728A4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2728C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F272978(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 28) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(_BYTE *)(a1 + 28) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 28) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 28) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 4;
LABEL_38:
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F272BDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 24));
  }
LABEL_8:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 24));
  return result;
}

_QWORD *sub_18F272C70(_QWORD *result)
{
  *result = &off_1E294D178;
  result[1] = 0;
  return result;
}

void sub_18F272C80(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294D178;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F272CC0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294D178;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F272D14(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F272D64(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_DWORD *)operator new();
        *(_QWORD *)v20 = &off_1E2951BD8;
        v20[8] = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F272F38(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

double sub_18F272F54(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294D1B0;
  *(_DWORD *)(a1 + 116) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_18F272F80(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E294D1B0;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F272FE0(PB::Base *a1)
{
  sub_18F272F80(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F273004(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "B", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "N", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "T", v13);
  }
  v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 1) != 0)
  {
    PB::TextFormatter::format(this, "curvature", *(double *)(a1 + 80));
    v14 = *(_BYTE *)(a1 + 116);
    if ((v14 & 0x10) == 0)
    {
LABEL_9:
      if ((v14 & 2) == 0)
        goto LABEL_10;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a1 + 116) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "isValid");
  v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 2) == 0)
  {
LABEL_10:
    if ((v14 & 4) == 0)
      goto LABEL_11;
LABEL_17:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
    if ((*(_BYTE *)(a1 + 116) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_16:
  PB::TextFormatter::format(this, "jerkNorm", *(double *)(a1 + 88));
  v14 = *(_BYTE *)(a1 + 116);
  if ((v14 & 4) != 0)
    goto LABEL_17;
LABEL_11:
  if ((v14 & 8) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "torsion", *(double *)(a1 + 104));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F273168(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  _DWORD *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  BOOL v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  _DWORD *v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  int v101;
  char *v102;
  int v103;
  char *v104;
  int v105;
  unint64_t v106;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (void **)(a1 + 32);
    v109 = a1 + 48;
    v110 = a1 + 24;
    v10 = (void **)(a1 + 56);
    v108 = a1 + 72;
    while (1)
    {
      v11 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        if (v13++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v14 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          if (v23 != 2)
          {
            v76 = *(char **)(a1 + 64);
            v75 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v76 >= v75)
            {
              v82 = (char *)*v10;
              v83 = (v76 - (_BYTE *)*v10) >> 2;
              v84 = v83 + 1;
              if ((unint64_t)(v83 + 1) >> 62)
LABEL_180:
                sub_18F26F8C0();
              v85 = v75 - (_QWORD)v82;
              if (v85 >> 1 > v84)
                v84 = v85 >> 1;
              if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
                v86 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v86 = v84;
              if (v86)
              {
                v87 = (char *)sub_18F26FB8C(v108, v86);
                v82 = *(char **)(a1 + 56);
                v76 = *(char **)(a1 + 64);
              }
              else
              {
                v87 = 0;
              }
              v100 = &v87[4 * v83];
              *(_DWORD *)v100 = 0;
              v77 = v100 + 4;
              while (v76 != v82)
              {
                v101 = *((_DWORD *)v76 - 1);
                v76 -= 4;
                *((_DWORD *)v100 - 1) = v101;
                v100 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v100;
              *(_QWORD *)(a1 + 64) = v77;
              *(_QWORD *)(a1 + 72) = &v87[4 * v86];
              if (v82)
                operator delete(v82);
            }
            else
            {
              *(_DWORD *)v76 = 0;
              v77 = v76 + 4;
            }
            *(_QWORD *)(a1 + 64) = v77;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          while (v24 < v25 && !*((_BYTE *)this + 24))
          {
            v27 = *(char **)(a1 + 64);
            v26 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v27 >= v26)
            {
              v29 = (char *)*v10;
              v30 = (v27 - (_BYTE *)*v10) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                goto LABEL_180;
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)sub_18F26FB8C(v108, v33);
                v29 = *(char **)(a1 + 56);
                v27 = *(char **)(a1 + 64);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[4 * v30];
              *(_DWORD *)v35 = 0;
              v28 = v35 + 4;
              while (v27 != v29)
              {
                v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v35;
              *(_QWORD *)(a1 + 64) = v28;
              *(_QWORD *)(a1 + 72) = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *(_DWORD *)v27 = 0;
              v28 = v27 + 4;
            }
            *(_QWORD *)(a1 + 64) = v28;
            v37 = *((_QWORD *)this + 1);
            if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((_QWORD *)this + 2))
              goto LABEL_120;
            *(v28 - 1) = *(_DWORD *)(*(_QWORD *)this + v37);
            v25 = *((_QWORD *)this + 2);
            v24 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v24;
          }
          goto LABEL_121;
        case 2u:
          if (v23 != 2)
          {
            v79 = *(char **)(a1 + 40);
            v78 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v79 >= v78)
            {
              v88 = (char *)*v9;
              v89 = (v79 - (_BYTE *)*v9) >> 2;
              v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62)
LABEL_181:
                sub_18F26F8C0();
              v91 = v78 - (_QWORD)v88;
              if (v91 >> 1 > v90)
                v90 = v91 >> 1;
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
                v92 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v92 = v90;
              if (v92)
              {
                v93 = (char *)sub_18F26FB8C(v109, v92);
                v88 = *(char **)(a1 + 32);
                v79 = *(char **)(a1 + 40);
              }
              else
              {
                v93 = 0;
              }
              v102 = &v93[4 * v89];
              *(_DWORD *)v102 = 0;
              v77 = v102 + 4;
              while (v79 != v88)
              {
                v103 = *((_DWORD *)v79 - 1);
                v79 -= 4;
                *((_DWORD *)v102 - 1) = v103;
                v102 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v102;
              *(_QWORD *)(a1 + 40) = v77;
              *(_QWORD *)(a1 + 48) = &v93[4 * v92];
              if (v88)
                operator delete(v88);
            }
            else
            {
              *(_DWORD *)v79 = 0;
              v77 = v79 + 4;
            }
            *(_QWORD *)(a1 + 40) = v77;
            goto LABEL_167;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          while (v38 < v39 && !*((_BYTE *)this + 24))
          {
            v41 = *(char **)(a1 + 40);
            v40 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v41 >= v40)
            {
              v43 = (char *)*v9;
              v44 = (v41 - (_BYTE *)*v9) >> 2;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 62)
                goto LABEL_181;
              v46 = v40 - (_QWORD)v43;
              if (v46 >> 1 > v45)
                v45 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v47 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)sub_18F26FB8C(v109, v47);
                v43 = *(char **)(a1 + 32);
                v41 = *(char **)(a1 + 40);
              }
              else
              {
                v48 = 0;
              }
              v49 = &v48[4 * v44];
              *(_DWORD *)v49 = 0;
              v42 = v49 + 4;
              while (v41 != v43)
              {
                v50 = *((_DWORD *)v41 - 1);
                v41 -= 4;
                *((_DWORD *)v49 - 1) = v50;
                v49 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v49;
              *(_QWORD *)(a1 + 40) = v42;
              *(_QWORD *)(a1 + 48) = &v48[4 * v47];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_DWORD *)v41 = 0;
              v42 = v41 + 4;
            }
            *(_QWORD *)(a1 + 40) = v42;
            v51 = *((_QWORD *)this + 1);
            if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((_QWORD *)this + 2))
              goto LABEL_120;
            *(v42 - 1) = *(_DWORD *)(*(_QWORD *)this + v51);
            v39 = *((_QWORD *)this + 2);
            v38 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v38;
          }
          goto LABEL_121;
        case 3u:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v52 = *((_QWORD *)this + 1);
            v53 = *((_QWORD *)this + 2);
            while (v52 < v53 && !*((_BYTE *)this + 24))
            {
              v55 = *(char **)(a1 + 16);
              v54 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v55 >= v54)
              {
                v57 = (char *)*v8;
                v58 = (v55 - (_BYTE *)*v8) >> 2;
                v59 = v58 + 1;
                if ((unint64_t)(v58 + 1) >> 62)
                  goto LABEL_182;
                v60 = v54 - (_QWORD)v57;
                if (v60 >> 1 > v59)
                  v59 = v60 >> 1;
                if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
                  v61 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v61 = v59;
                if (v61)
                {
                  v62 = (char *)sub_18F26FB8C(v110, v61);
                  v57 = *(char **)(a1 + 8);
                  v55 = *(char **)(a1 + 16);
                }
                else
                {
                  v62 = 0;
                }
                v63 = &v62[4 * v58];
                *(_DWORD *)v63 = 0;
                v56 = v63 + 4;
                while (v55 != v57)
                {
                  v64 = *((_DWORD *)v55 - 1);
                  v55 -= 4;
                  *((_DWORD *)v63 - 1) = v64;
                  v63 -= 4;
                }
                *(_QWORD *)(a1 + 8) = v63;
                *(_QWORD *)(a1 + 16) = v56;
                *(_QWORD *)(a1 + 24) = &v62[4 * v61];
                if (v57)
                  operator delete(v57);
              }
              else
              {
                *(_DWORD *)v55 = 0;
                v56 = v55 + 4;
              }
              *(_QWORD *)(a1 + 16) = v56;
              v65 = *((_QWORD *)this + 1);
              if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
              {
LABEL_120:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v56 - 1) = *(_DWORD *)(*(_QWORD *)this + v65);
              v53 = *((_QWORD *)this + 2);
              v52 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v52;
            }
LABEL_121:
            PB::Reader::recallMark();
          }
          else
          {
            v81 = *(char **)(a1 + 16);
            v80 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v81 >= v80)
            {
              v94 = (char *)*v8;
              v95 = (v81 - (_BYTE *)*v8) >> 2;
              v96 = v95 + 1;
              if ((unint64_t)(v95 + 1) >> 62)
LABEL_182:
                sub_18F26F8C0();
              v97 = v80 - (_QWORD)v94;
              if (v97 >> 1 > v96)
                v96 = v97 >> 1;
              if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
                v98 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v98 = v96;
              if (v98)
              {
                v99 = (char *)sub_18F26FB8C(v110, v98);
                v94 = *(char **)(a1 + 8);
                v81 = *(char **)(a1 + 16);
              }
              else
              {
                v99 = 0;
              }
              v104 = &v99[4 * v95];
              *(_DWORD *)v104 = 0;
              v77 = v104 + 4;
              while (v81 != v94)
              {
                v105 = *((_DWORD *)v81 - 1);
                v81 -= 4;
                *((_DWORD *)v104 - 1) = v105;
                v104 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v104;
              *(_QWORD *)(a1 + 16) = v77;
              *(_QWORD *)(a1 + 24) = &v99[4 * v98];
              if (v94)
                operator delete(v94);
            }
            else
            {
              *(_DWORD *)v81 = 0;
              v77 = v81 + 4;
            }
            *(_QWORD *)(a1 + 16) = v77;
LABEL_167:
            v106 = *((_QWORD *)this + 1);
            if (v106 <= 0xFFFFFFFFFFFFFFFBLL && v106 + 4 <= *((_QWORD *)this + 2))
            {
              *(v77 - 1) = *(_DWORD *)(*(_QWORD *)this + v106);
              v74 = *((_QWORD *)this + 1) + 4;
LABEL_171:
              *((_QWORD *)this + 1) = v74;
            }
            else
            {
LABEL_169:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_172:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 116) |= 2u;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(*(_QWORD *)this + v66);
          goto LABEL_111;
        case 5u:
          *(_BYTE *)(a1 + 116) |= 1u;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v67);
          goto LABEL_111;
        case 6u:
          *(_BYTE *)(a1 + 116) |= 8u;
          v68 = *((_QWORD *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v68);
          goto LABEL_111;
        case 7u:
          *(_BYTE *)(a1 + 116) |= 0x10u;
          v69 = *((_QWORD *)this + 1);
          if (v69 >= *((_QWORD *)this + 2))
          {
            v72 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v70 = v69 + 1;
            v71 = *(unsigned __int8 *)(*(_QWORD *)this + v69);
            *((_QWORD *)this + 1) = v70;
            v72 = v71 != 0;
          }
          *(_BYTE *)(a1 + 112) = v72;
          goto LABEL_172;
        case 8u:
          *(_BYTE *)(a1 + 116) |= 4u;
          v73 = *((_QWORD *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFF7 || v73 + 8 > *((_QWORD *)this + 2))
            goto LABEL_169;
          *(_QWORD *)(a1 + 96) = *(_QWORD *)(*(_QWORD *)this + v73);
LABEL_111:
          v74 = *((_QWORD *)this + 1) + 8;
          goto LABEL_171;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_172;
      }
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)this + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v14 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F273990(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  char v13;

  v3 = result;
  v4 = *(float **)(result + 56);
  v5 = *(float **)(result + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 8);
  v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 88));
    v13 = *(_BYTE *)(v3 + 116);
    if ((v13 & 1) == 0)
    {
LABEL_12:
      if ((v13 & 8) == 0)
        goto LABEL_13;
      goto LABEL_18;
    }
  }
  else if ((*(_BYTE *)(v3 + 116) & 1) == 0)
  {
    goto LABEL_12;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 80));
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 8) == 0)
  {
LABEL_13:
    if ((v13 & 0x10) == 0)
      goto LABEL_14;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(double *)(v3 + 104));
  v13 = *(_BYTE *)(v3 + 116);
  if ((v13 & 0x10) == 0)
  {
LABEL_14:
    if ((v13 & 4) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 96));
  }
LABEL_19:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 116) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 96));
  return result;
}

uint64_t sub_18F273AAC(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E3D8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F273AC4(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F273AE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "lowerBound", *(double *)(a1 + 16));
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calibrated", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "upperBound", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F273B78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 32) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 32) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_37;
        }
        *(_BYTE *)(a1 + 32) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_32:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_37;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_37:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F273D90(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 24));
    }
  }
  else if ((*(_BYTE *)(result + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 32) & 4) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 24));
  return result;
}

uint64_t sub_18F273E08(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D6F0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F273E1C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294D6F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F273E5C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294D6F0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F273EB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "accel");
  v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      goto LABEL_5;
LABEL_9:
    PB::TextFormatter::format(this, "sensorTime");
    if ((*(_BYTE *)(a1 + 32) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
  PB::TextFormatter::format(this, "location");
  v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((v6 & 4) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "sequenceNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F273F60(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _DWORD *v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = (_DWORD *)operator new();
          *(_QWORD *)v20 = &off_1E2951BD8;
          v20[8] = 0;
          v21 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = *(_DWORD **)(a1 + 8);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) != 0)
          {
            PB::Reader::recallMark();
            goto LABEL_83;
          }
          return 0;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
          {
            v47 = 0;
            v48 = 0;
            v28 = 0;
            if (v24 <= v23)
              v24 = *((_QWORD *)this + 1);
            do
            {
              if (v24 == v23)
              {
                LODWORD(v28) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_76;
              }
              v49 = v23 + 1;
              v50 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v28) = 0;
                goto LABEL_76;
              }
              v47 += 7;
              v23 = v49;
              v14 = v48++ > 8;
            }
            while (!v14);
LABEL_56:
            LODWORD(v28) = 0;
          }
          else
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            while (1)
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                break;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
              if (v14)
                goto LABEL_56;
            }
          }
LABEL_76:
          *(_DWORD *)(a1 + 24) = v28;
          goto LABEL_83;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v31 = *((_QWORD *)this + 1);
          v32 = *((_QWORD *)this + 2);
          v33 = *(_QWORD *)this;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)this + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_79;
              v34 += 7;
              v31 = v37;
              v14 = v35++ > 8;
            }
            while (!v14);
LABEL_63:
            LODWORD(v36) = 0;
            goto LABEL_79;
          }
          v51 = 0;
          v52 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v53 = v31 + 1;
              v54 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)this + 1) = v53;
              v36 |= (unint64_t)(v54 & 0x7F) << v51;
              if (v54 < 0)
              {
                v51 += 7;
                v31 = v53;
                v14 = v52++ > 8;
                if (v14)
                  goto LABEL_63;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_79:
          *(_DWORD *)(a1 + 28) = v36;
          goto LABEL_83;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v39 = *((_QWORD *)this + 1);
          v40 = *((_QWORD *)this + 2);
          v41 = *(_QWORD *)this;
          if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
          {
            v42 = 0;
            v43 = 0;
            v44 = 0;
            do
            {
              v45 = v39 + 1;
              *((_QWORD *)this + 1) = v39 + 1;
              v46 = *(_BYTE *)(v41 + v39);
              v44 |= (unint64_t)(v46 & 0x7F) << v42;
              if ((v46 & 0x80) == 0)
                goto LABEL_82;
              v42 += 7;
              v39 = v45;
              v14 = v43++ > 8;
            }
            while (!v14);
LABEL_70:
            v44 = 0;
            goto LABEL_82;
          }
          v55 = 0;
          v56 = 0;
          v44 = 0;
          if (v40 <= v39)
            v40 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_83;
      }
      while (1)
      {
        if (v40 == v39)
        {
          v44 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_82;
        }
        v57 = v39 + 1;
        v58 = *(_BYTE *)(v41 + v39);
        *((_QWORD *)this + 1) = v57;
        v44 |= (unint64_t)(v58 & 0x7F) << v55;
        if ((v58 & 0x80) == 0)
          break;
        v55 += 7;
        v39 = v57;
        v14 = v56++ > 8;
        if (v14)
          goto LABEL_70;
      }
      if (*((_BYTE *)this + 24))
        v44 = 0;
LABEL_82:
      *(_QWORD *)(a1 + 16) = v44;
LABEL_83:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F274408(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F274494(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[1])
  {
    v1 = result;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E2951BD8;
    *(_DWORD *)(v2 + 32) = 0;
    result = (_QWORD *)v1[1];
    v1[1] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_18F274504(_QWORD *result)
{
  *result = &off_1E294F210;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F274518(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E294F210;
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    sub_18F26F7EC(a1 + 16, v3);
  sub_18F26F834((void ***)(a1 + 8), 0);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_18F274580(uint64_t a1)
{
  sub_18F274518(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2745A4(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if (a1[1])
    PB::TextFormatter::format();
  if (a1[2])
    PB::TextFormatter::format();
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F274624(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  void ***v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t result;
  void **v30[2];

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 16);
    v9 = (void ***)(a1 + 8);
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        v25 = (_QWORD *)operator new();
        v25[1] = 0;
        v25[2] = 0;
        *v25 = 0;
        v30[0] = 0;
        v26 = *v8;
        *v8 = (uint64_t)v25;
        if (v26)
        {
          sub_18F26F7EC((uint64_t)v8, v26);
          v27 = v30[0];
          v30[0] = 0;
          if (v27)
            sub_18F26F7EC((uint64_t)v30, (uint64_t)v27);
        }
        PB::Reader::read();
      }
      else if ((_DWORD)v22 == 2)
      {
        v28 = operator new();
        *(_QWORD *)v28 = 0;
        *(_QWORD *)(v28 + 8) = 0;
        v30[0] = 0;
        sub_18F26F834(v9, (void **)v28);
        sub_18F26F834(v30, 0);
        PB::Reader::read();
      }
      else if ((_DWORD)v22 == 1)
      {
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E294D9C8;
        *(_QWORD *)(v23 + 8) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)(v23 + 24) = 0;
        *(_DWORD *)(v23 + 32) = 0;
        v24 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = *(_QWORD *)(a1 + 24);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2748C0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D9C8;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_18F2748D8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 24);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if (*(_QWORD *)(v3 + 8))
    result = PB::Writer::write();
  if (*(_QWORD *)(v3 + 16))
    return PB::Writer::write();
  return result;
}

uint64_t sub_18F27493C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951890;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F274954(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F274978(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asleep");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageConfidence");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "initialized");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "sensorTime");
    if ((*(_BYTE *)(a1 + 32) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "rawConfidence", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "sequenceNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F274A68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_81:
                v2 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_82;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_82:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_93;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 28) = v28;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_86;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_87;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_91;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_92;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 24) = v39;
LABEL_93:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 32) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 29) = v42;
              goto LABEL_93;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F274F68(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F275034(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950DD8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F27504C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F275070(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "activity");
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "sensorTime");
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidenceLevel");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "sequenceNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F275120(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v3 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 16) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F275634(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_18F2756C8(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E294D9C8;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_18F26F7EC((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

void sub_18F27571C(PB::Base *a1)
{
  sub_18F2756C8(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F275740(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
    PB::TextFormatter::format(this, "hardwareModel");
  if (*(_QWORD *)(a1 + 16))
    PB::TextFormatter::format();
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    PB::TextFormatter::format(this, "side");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2757D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  uint64_t v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 8);
    v9 = (uint64_t *)(a1 + 16);
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v22 = *((_QWORD *)this + 1);
          v23 = *((_QWORD *)this + 2);
          v24 = *(_QWORD *)this;
          if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
          {
            v45 = 0;
            v46 = 0;
            v27 = 0;
            if (v23 <= v22)
              v23 = *((_QWORD *)this + 1);
            do
            {
              if (v23 == v22)
              {
                LODWORD(v27) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_64;
              }
              v47 = v22 + 1;
              v48 = *(_BYTE *)(v24 + v22);
              *((_QWORD *)this + 1) = v47;
              v27 |= (unint64_t)(v48 & 0x7F) << v45;
              if ((v48 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_64;
              }
              v45 += 7;
              v22 = v47;
              v16 = v46++ > 8;
            }
            while (!v16);
LABEL_53:
            LODWORD(v27) = 0;
          }
          else
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = v22 + 1;
              *((_QWORD *)this + 1) = v22 + 1;
              v29 = *(_BYTE *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0)
                break;
              v25 += 7;
              v22 = v28;
              v16 = v26++ > 8;
              if (v16)
                goto LABEL_53;
            }
          }
LABEL_64:
          *(_DWORD *)(a1 + 28) = v27;
          goto LABEL_69;
        case 2u:
          v31 = (_QWORD *)operator new();
          v31[1] = 0;
          v31[2] = 0;
          *v31 = 0;
          v54 = 0;
          v32 = *v9;
          *v9 = (uint64_t)v31;
          if (v32)
          {
            sub_18F26F7EC((uint64_t)v9, v32);
            v33 = v54;
            v54 = 0;
            if (v33)
              sub_18F26F7EC((uint64_t)&v54, v33);
          }
          goto LABEL_39;
        case 3u:
          v34 = (_QWORD *)operator new();
          v34[1] = 0;
          v34[2] = 0;
          *v34 = 0;
          v54 = 0;
          v35 = *v8;
          *v8 = (uint64_t)v34;
          if (v35)
          {
            sub_18F26F7EC((uint64_t)v8, v35);
            v36 = v54;
            v54 = 0;
            if (v36)
              sub_18F26F7EC((uint64_t)&v54, v36);
          }
LABEL_39:
          PB::Reader::read();
          goto LABEL_69;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v37 = *((_QWORD *)this + 1);
          v38 = *((_QWORD *)this + 2);
          v39 = *(_QWORD *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            v40 = 0;
            v41 = 0;
            v42 = 0;
            do
            {
              v43 = v37 + 1;
              *((_QWORD *)this + 1) = v37 + 1;
              v44 = *(_BYTE *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0)
                goto LABEL_68;
              v40 += 7;
              v37 = v43;
              v16 = v41++ > 8;
            }
            while (!v16);
LABEL_60:
            LODWORD(v42) = 0;
            goto LABEL_68;
          }
          v49 = 0;
          v50 = 0;
          v42 = 0;
          if (v38 <= v37)
            v38 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_69;
      }
      while (1)
      {
        if (v38 == v37)
        {
          LODWORD(v42) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_68;
        }
        v51 = v37 + 1;
        v52 = *(_BYTE *)(v39 + v37);
        *((_QWORD *)this + 1) = v51;
        v42 |= (unint64_t)(v52 & 0x7F) << v49;
        if ((v52 & 0x80) == 0)
          break;
        v49 += 7;
        v37 = v51;
        v16 = v50++ > 8;
        if (v16)
          goto LABEL_60;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v42) = 0;
LABEL_68:
      *(_DWORD *)(a1 + 24) = v42;
LABEL_69:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F275BCC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;

  v3 = result;
  if ((*(_BYTE *)(result + 32) & 2) != 0)
    result = PB::Writer::writeVarInt(this);
  if (*(_QWORD *)(v3 + 16))
    result = PB::Writer::write();
  if (*(_QWORD *)(v3 + 8))
    result = PB::Writer::write();
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F275C4C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F600;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F275C60(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F600;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F275CA0(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F600;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F275CF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "dm");
  v6 = *(_BYTE *)(a1 + 24);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v6 = *(_BYTE *)(a1 + 24);
  }
  if ((v6 & 2) != 0)
    PB::TextFormatter::format(this, "sequenceNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F275D7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v23 = *((_QWORD *)this + 1);
        v24 = *((_QWORD *)this + 2);
        v25 = *(_QWORD *)this;
        if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
        {
          v40 = 0;
          v41 = 0;
          v28 = 0;
          if (v24 <= v23)
            v24 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_63;
            }
            v42 = v23 + 1;
            v43 = *(_BYTE *)(v25 + v23);
            *((_QWORD *)this + 1) = v42;
            v28 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v23 = v42;
            v14 = v41++ > 8;
            if (v14)
            {
LABEL_51:
              LODWORD(v28) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v28) = 0;
        }
        else
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = v23 + 1;
            *((_QWORD *)this + 1) = v23 + 1;
            v30 = *(_BYTE *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              break;
            v26 += 7;
            v23 = v29;
            v14 = v27++ > 8;
            if (v14)
              goto LABEL_51;
          }
        }
LABEL_63:
        *(_DWORD *)(a1 + 20) = v28;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v31 = *((_QWORD *)this + 1);
        v32 = *((_QWORD *)this + 2);
        v33 = *(_QWORD *)this;
        if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v32)
        {
          v44 = 0;
          v45 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_66;
            }
            v46 = v31 + 1;
            v47 = *(_BYTE *)(v33 + v31);
            *((_QWORD *)this + 1) = v46;
            v36 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v31 = v46;
            v14 = v45++ > 8;
            if (v14)
            {
LABEL_58:
              LODWORD(v36) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v36) = 0;
        }
        else
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          while (1)
          {
            v37 = v31 + 1;
            *((_QWORD *)this + 1) = v31 + 1;
            v38 = *(_BYTE *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0)
              break;
            v34 += 7;
            v31 = v37;
            v14 = v35++ > 8;
            if (v14)
              goto LABEL_58;
          }
        }
LABEL_66:
        *(_DWORD *)(a1 + 16) = v36;
      }
      else if ((_DWORD)v20 == 1)
      {
        v21 = (_DWORD *)operator new();
        *(_QWORD *)v21 = &off_1E294CE30;
        v21[31] = 0;
        v22 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = *(_DWORD **)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(_DWORD *, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F276134(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CE30;
  *(_DWORD *)(result + 124) = 0;
  return result;
}

uint64_t sub_18F276148(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 24);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *(_BYTE *)(v3 + 24);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F2761B4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2950B00;
  *(_DWORD *)(a1 + 44) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_18F2761D4(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E2950B00;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F27622C(PB::Base *a1)
{
  sub_18F2761D4(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F276250(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  float *v6;
  float *v7;
  float v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "headToHeadsetTransformation", v8);
  }
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
    PB::TextFormatter::format(this, "isH2HValid");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F2762F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
        break;
      if ((_DWORD)v22 == 2)
      {
        *(_BYTE *)(a1 + 44) |= 1u;
        v39 = *((_QWORD *)this + 1);
        if (v39 >= *((_QWORD *)this + 2))
        {
          v42 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v40 = v39 + 1;
          v41 = *(unsigned __int8 *)(*(_QWORD *)this + v39);
          *((_QWORD *)this + 1) = v40;
          v42 = v41 != 0;
        }
        *(_BYTE *)(a1 + 40) = v42;
        goto LABEL_81;
      }
      if ((_DWORD)v22 == 1)
      {
        v23 = operator new();
        *(_QWORD *)v23 = &off_1E294D9C8;
        *(_QWORD *)(v23 + 8) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)(v23 + 24) = 0;
        *(_DWORD *)(v23 + 32) = 0;
        v24 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v23;
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
          v23 = *(_QWORD *)(a1 + 32);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v23 + 16))(v23, this) & 1) == 0)
        {
          return 0;
        }
LABEL_29:
        PB::Reader::recallMark();
        goto LABEL_81;
      }
      if ((PB::Reader::skip(this) & 1) == 0)
        return 0;
LABEL_81:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    if ((v13 & 7) != 2)
    {
      v44 = *(char **)(a1 + 16);
      v43 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v44 >= v43)
      {
        v46 = (char *)*v8;
        v47 = (v44 - (_BYTE *)*v8) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
LABEL_89:
          sub_18F26F8C0();
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)sub_18F26FB8C(v9, v50);
          v46 = *(char **)(a1 + 8);
          v44 = *(char **)(a1 + 16);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[4 * v47];
        *(_DWORD *)v52 = 0;
        v45 = v52 + 4;
        while (v44 != v46)
        {
          v53 = *((_DWORD *)v44 - 1);
          v44 -= 4;
          *((_DWORD *)v52 - 1) = v53;
          v52 -= 4;
        }
        *(_QWORD *)(a1 + 8) = v52;
        *(_QWORD *)(a1 + 16) = v45;
        *(_QWORD *)(a1 + 24) = &v51[4 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *(_DWORD *)v44 = 0;
        v45 = v44 + 4;
      }
      *(_QWORD *)(a1 + 16) = v45;
      v54 = *((_QWORD *)this + 1);
      if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *((_QWORD *)this + 2))
      {
        *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
        *((_QWORD *)this + 1) += 4;
      }
      else
      {
        *((_BYTE *)this + 24) = 1;
      }
      goto LABEL_81;
    }
    if ((PB::Reader::placeMark() & 1) != 0)
      return 0;
    v25 = *((_QWORD *)this + 1);
    v26 = *((_QWORD *)this + 2);
    while (v25 < v26 && !*((_BYTE *)this + 24))
    {
      v28 = *(char **)(a1 + 16);
      v27 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v28 >= v27)
      {
        v30 = (char *)*v8;
        v31 = (v28 - (_BYTE *)*v8) >> 2;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 62)
          goto LABEL_89;
        v33 = v27 - (_QWORD)v30;
        if (v33 >> 1 > v32)
          v32 = v33 >> 1;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
          v34 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          v35 = (char *)sub_18F26FB8C(v9, v34);
          v30 = *(char **)(a1 + 8);
          v28 = *(char **)(a1 + 16);
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[4 * v31];
        *(_DWORD *)v36 = 0;
        v29 = v36 + 4;
        while (v28 != v30)
        {
          v37 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *((_DWORD *)v36 - 1) = v37;
          v36 -= 4;
        }
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v29;
        *(_QWORD *)(a1 + 24) = &v35[4 * v34];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_DWORD *)v28 = 0;
        v29 = v28 + 4;
      }
      *(_QWORD *)(a1 + 16) = v29;
      v38 = *((_QWORD *)this + 1);
      if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((_QWORD *)this + 2))
      {
        *((_BYTE *)this + 24) = 1;
        goto LABEL_29;
      }
      *(v29 - 1) = *(_DWORD *)(*(_QWORD *)this + v38);
      v26 = *((_QWORD *)this + 2);
      v25 = *((_QWORD *)this + 1) + 4;
      *((_QWORD *)this + 1) = v25;
    }
    goto LABEL_29;
  }
  return v4 == 0;
}

uint64_t sub_18F27673C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;

  v3 = result;
  v4 = *(const PB::Base **)(result + 32);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    result = PB::Writer::write(this);
  v6 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    result = PB::Writer::write(this, v7);
  }
  return result;
}

_QWORD *sub_18F2767B0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[4])
  {
    v1 = result;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E294D9C8;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0;
    *(_DWORD *)(v2 + 32) = 0;
    result = (_QWORD *)v1[4];
    v1[4] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_18F276824(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D1E8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F276838(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294D1E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F276878(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294D1E8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2768CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "gyro");
  v6 = *(_BYTE *)(a1 + 36);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    v6 = *(_BYTE *)(a1 + 36);
    if ((v6 & 1) == 0)
    {
LABEL_5:
      if ((v6 & 4) == 0)
        goto LABEL_6;
LABEL_11:
      PB::TextFormatter::format(this, "sequenceNumber");
      if ((*(_BYTE *)(a1 + 36) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_7;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "sensorTime");
  v6 = *(_BYTE *)(a1 + 36);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_6:
  if ((v6 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "temp", *(float *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27699C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;
  char v52;
  unsigned int v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  unint64_t v58;
  char v59;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = operator new();
          sub_18F2213FC(v20);
          v21 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = *(_QWORD *)(a1 + 8);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) != 0)
          {
            PB::Reader::recallMark();
            goto LABEL_87;
          }
          return 0;
        case 2u:
          *(_BYTE *)(a1 + 36) |= 2u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
          {
            v48 = 0;
            v49 = 0;
            v28 = 0;
            if (v24 <= v23)
              v24 = *((_QWORD *)this + 1);
            do
            {
              if (v24 == v23)
              {
                LODWORD(v28) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_80;
              }
              v50 = v23 + 1;
              v51 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v50;
              v28 |= (unint64_t)(v51 & 0x7F) << v48;
              if ((v51 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v28) = 0;
                goto LABEL_80;
              }
              v48 += 7;
              v23 = v50;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_59:
            LODWORD(v28) = 0;
          }
          else
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            while (1)
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                break;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
              if (v14)
                goto LABEL_59;
            }
          }
LABEL_80:
          *(_DWORD *)(a1 + 24) = v28;
          goto LABEL_87;
        case 3u:
          *(_BYTE *)(a1 + 36) |= 4u;
          v31 = *((_QWORD *)this + 1);
          v32 = *((_QWORD *)this + 2);
          v33 = *(_QWORD *)this;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)this + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_83;
              v34 += 7;
              v31 = v37;
              v14 = v35++ > 8;
            }
            while (!v14);
LABEL_66:
            LODWORD(v36) = 0;
            goto LABEL_83;
          }
          v52 = 0;
          v53 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v54 = v31 + 1;
              v55 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)this + 1) = v54;
              v36 |= (unint64_t)(v55 & 0x7F) << v52;
              if (v55 < 0)
              {
                v52 += 7;
                v31 = v54;
                v14 = v53++ > 8;
                if (v14)
                  goto LABEL_66;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_83:
          *(_DWORD *)(a1 + 28) = v36;
          goto LABEL_87;
        case 4u:
          *(_BYTE *)(a1 + 36) |= 8u;
          v39 = *((_QWORD *)this + 1);
          if (v39 <= 0xFFFFFFFFFFFFFFFBLL && v39 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v39);
            *((_QWORD *)this + 1) += 4;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_87;
        case 5u:
          *(_BYTE *)(a1 + 36) |= 1u;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          v42 = *(_QWORD *)this;
          if (v40 <= 0xFFFFFFFFFFFFFFF5 && v40 + 10 <= v41)
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            do
            {
              v46 = v40 + 1;
              *((_QWORD *)this + 1) = v40 + 1;
              v47 = *(_BYTE *)(v42 + v40);
              v45 |= (unint64_t)(v47 & 0x7F) << v43;
              if ((v47 & 0x80) == 0)
                goto LABEL_86;
              v43 += 7;
              v40 = v46;
              v14 = v44++ > 8;
            }
            while (!v14);
LABEL_73:
            v45 = 0;
            goto LABEL_86;
          }
          v56 = 0;
          v57 = 0;
          v45 = 0;
          if (v41 <= v40)
            v41 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_87;
      }
      while (1)
      {
        if (v41 == v40)
        {
          v45 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_86;
        }
        v58 = v40 + 1;
        v59 = *(_BYTE *)(v42 + v40);
        *((_QWORD *)this + 1) = v58;
        v45 |= (unint64_t)(v59 & 0x7F) << v56;
        if ((v59 & 0x80) == 0)
          break;
        v56 += 7;
        v40 = v58;
        v14 = v57++ > 8;
        if (v14)
          goto LABEL_73;
      }
      if (*((_BYTE *)this + 24))
        v45 = 0;
LABEL_86:
      *(_QWORD *)(a1 + 16) = v45;
LABEL_87:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F276E84(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *(_BYTE *)(v3 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(v3 + 36) & 4) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::writeVarInt(this);
  v5 = *(_BYTE *)(v3 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  if ((*(_BYTE *)(v3 + 36) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F276F2C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[1])
  {
    v1 = result;
    v2 = operator new();
    sub_18F2213FC(v2);
    result = (_QWORD *)v1[1];
    v1[1] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *sub_18F276F90(_QWORD *result)
{
  *result = &off_1E29500F0;
  result[1] = 0;
  return result;
}

void sub_18F276FA0(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E29500F0;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_18F276FE0(PB::Base *a1)
{
  sub_18F276FA0(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F277004(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27704C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v24 = 0;
        v21 = *v7;
        *v7 = (uint64_t)v20;
        if (v21)
        {
          sub_18F26F7EC((uint64_t)v7, v21);
          v22 = v24;
          v24 = 0;
          if (v22)
            sub_18F26F7EC((uint64_t)&v24, v22);
        }
        PB::Reader::read();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_20:
        v11 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2771EC(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return PB::Writer::write();
  return result;
}

_QWORD *sub_18F277208(_QWORD *result)
{
  *result = &off_1E294ED78;
  result[1] = 0;
  return result;
}

void sub_18F277218(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294ED78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F277258(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294ED78;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2772AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2772FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294D9C8;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_DWORD *)(v20 + 32) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2774D4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

_QWORD *sub_18F2774F0(_QWORD *result)
{
  *result = &off_1E294E410;
  result[1] = 0;
  return result;
}

void sub_18F277500(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E294E410;
  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  PB::Base::~Base(this);
}

void sub_18F277540(PB::Base *a1)
{
  sub_18F277500(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F277564(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2775AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = (_QWORD *)operator new();
        v20[1] = 0;
        v20[2] = 0;
        *v20 = 0;
        v24 = 0;
        v21 = *v7;
        *v7 = (uint64_t)v20;
        if (v21)
        {
          sub_18F26F7EC((uint64_t)v7, v21);
          v22 = v24;
          v24 = 0;
          if (v22)
            sub_18F26F7EC((uint64_t)&v24, v22);
        }
        PB::Reader::read();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_21;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_20:
        v11 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F27774C(uint64_t result)
{
  if (*(_QWORD *)(result + 8))
    return PB::Writer::write();
  return result;
}

uint64_t sub_18F277768(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944630;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F277780(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2777A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 24));
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "heartRate");
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "sequenceNumber");
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "sensorTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 2) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F277874(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_62;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v33 = 0;
                v34 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_68;
                  }
                  v35 = v21++;
                  v36 = *(_BYTE *)(v22 + v35);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0)
                    break;
                  v33 += 7;
                  v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_67:
                    v2 = v35 + 1;
                    goto LABEL_68;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_67;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_68;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_68:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_74;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_39;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_63;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_62:
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_63:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_39:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_74;
            case 5u:
              *(_BYTE *)(a1 + 36) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v37 = 0;
                v38 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_73;
                  }
                  v39 = v27++;
                  v40 = *(_BYTE *)(v28 + v39);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0)
                    break;
                  v37 += 7;
                  v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_72:
                    v2 = v39 + 1;
                    goto LABEL_73;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_72;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_73;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_73:
              *(_DWORD *)(a1 + 32) = v31;
LABEL_74:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_74;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F277C78(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 36) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F277D28(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F248;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_18F277D44(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F277D68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "status");
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F277DD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 4;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F27805C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12));
  return result;
}

uint64_t sub_18F2780B4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F638;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F2780C8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F638;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F278108(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F638;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27815C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 32) & 2) != 0)
    PB::TextFormatter::format(this, "location");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "magnetometer");
  v6 = *(_BYTE *)(a1 + 32);
  if ((v6 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime");
    v6 = *(_BYTE *)(a1 + 32);
  }
  if ((v6 & 4) != 0)
    PB::TextFormatter::format(this, "sequenceNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F278200(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          v20 = operator new();
          sub_18F2F9BAC(v20);
          v21 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v20;
          if (v21)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
            v20 = *(_QWORD *)(a1 + 8);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) != 0)
          {
            PB::Reader::recallMark();
            goto LABEL_83;
          }
          return 0;
        case 2u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v23 = *((_QWORD *)this + 1);
          v24 = *((_QWORD *)this + 2);
          v25 = *(_QWORD *)this;
          if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
          {
            v47 = 0;
            v48 = 0;
            v28 = 0;
            if (v24 <= v23)
              v24 = *((_QWORD *)this + 1);
            do
            {
              if (v24 == v23)
              {
                LODWORD(v28) = 0;
                *((_BYTE *)this + 24) = 1;
                goto LABEL_76;
              }
              v49 = v23 + 1;
              v50 = *(_BYTE *)(v25 + v23);
              *((_QWORD *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if ((v50 & 0x80) == 0)
              {
                if (*((_BYTE *)this + 24))
                  LODWORD(v28) = 0;
                goto LABEL_76;
              }
              v47 += 7;
              v23 = v49;
              v14 = v48++ > 8;
            }
            while (!v14);
LABEL_56:
            LODWORD(v28) = 0;
          }
          else
          {
            v26 = 0;
            v27 = 0;
            v28 = 0;
            while (1)
            {
              v29 = v23 + 1;
              *((_QWORD *)this + 1) = v23 + 1;
              v30 = *(_BYTE *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0)
                break;
              v26 += 7;
              v23 = v29;
              v14 = v27++ > 8;
              if (v14)
                goto LABEL_56;
            }
          }
LABEL_76:
          *(_DWORD *)(a1 + 24) = v28;
          goto LABEL_83;
        case 3u:
          *(_BYTE *)(a1 + 32) |= 4u;
          v31 = *((_QWORD *)this + 1);
          v32 = *((_QWORD *)this + 2);
          v33 = *(_QWORD *)this;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            v34 = 0;
            v35 = 0;
            v36 = 0;
            do
            {
              v37 = v31 + 1;
              *((_QWORD *)this + 1) = v31 + 1;
              v38 = *(_BYTE *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0)
                goto LABEL_79;
              v34 += 7;
              v31 = v37;
              v14 = v35++ > 8;
            }
            while (!v14);
LABEL_63:
            LODWORD(v36) = 0;
            goto LABEL_79;
          }
          v51 = 0;
          v52 = 0;
          v36 = 0;
          if (v32 <= v31)
            v32 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v53 = v31 + 1;
              v54 = *(_BYTE *)(v33 + v31);
              *((_QWORD *)this + 1) = v53;
              v36 |= (unint64_t)(v54 & 0x7F) << v51;
              if (v54 < 0)
              {
                v51 += 7;
                v31 = v53;
                v14 = v52++ > 8;
                if (v14)
                  goto LABEL_63;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v36) = 0;
            }
            break;
          }
LABEL_79:
          *(_DWORD *)(a1 + 28) = v36;
          goto LABEL_83;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v39 = *((_QWORD *)this + 1);
          v40 = *((_QWORD *)this + 2);
          v41 = *(_QWORD *)this;
          if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
          {
            v42 = 0;
            v43 = 0;
            v44 = 0;
            do
            {
              v45 = v39 + 1;
              *((_QWORD *)this + 1) = v39 + 1;
              v46 = *(_BYTE *)(v41 + v39);
              v44 |= (unint64_t)(v46 & 0x7F) << v42;
              if ((v46 & 0x80) == 0)
                goto LABEL_82;
              v42 += 7;
              v39 = v45;
              v14 = v43++ > 8;
            }
            while (!v14);
LABEL_70:
            v44 = 0;
            goto LABEL_82;
          }
          v55 = 0;
          v56 = 0;
          v44 = 0;
          if (v40 <= v39)
            v40 = *((_QWORD *)this + 1);
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_83;
      }
      while (1)
      {
        if (v40 == v39)
        {
          v44 = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_82;
        }
        v57 = v39 + 1;
        v58 = *(_BYTE *)(v41 + v39);
        *((_QWORD *)this + 1) = v57;
        v44 |= (unint64_t)(v58 & 0x7F) << v55;
        if ((v58 & 0x80) == 0)
          break;
        v55 += 7;
        v39 = v57;
        v14 = v56++ > 8;
        if (v14)
          goto LABEL_70;
      }
      if (*((_BYTE *)this + 24))
        v44 = 0;
LABEL_82:
      *(_QWORD *)(a1 + 16) = v44;
LABEL_83:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F27869C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 32);
  if ((v5 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v5 = *(_BYTE *)(v3 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 1) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(v3 + 32) & 4) == 0)
  {
    goto LABEL_5;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F278728(_QWORD *result)
{
  *result = &off_1E2950B38;
  result[1] = 0;
  return result;
}

void sub_18F278738(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950B38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F278778(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950B38;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2787CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27881C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294D9C8;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_DWORD *)(v20 + 32) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2789F4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

double sub_18F278A10(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E29443C8;
  *(_DWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  return result;
}

void sub_18F278A58(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)this = &off_1E29443C8;
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 10);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 7);
  if (v7)
  {
    *((_QWORD *)this + 8) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 4);
  if (v8)
  {
    *((_QWORD *)this + 5) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 1);
  if (v9)
  {
    *((_QWORD *)this + 2) = v9;
    operator delete(v9);
  }
  PB::Base::~Base(this);
}

void sub_18F278B08(PB::Base *a1)
{
  sub_18F278A58(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F278B2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(this, "dark0");
  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(this, "dark1");
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "dark2");
  }
  v11 = *(_QWORD *)(a1 + 80);
  v12 = *(_QWORD *)(a1 + 88);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(this, "dark3");
  }
  v13 = *(_BYTE *)(a1 + 224);
  if ((v13 & 4) != 0)
  {
    PB::TextFormatter::format(this, "error");
    v13 = *(_BYTE *)(a1 + 224);
  }
  if ((v13 & 8) != 0)
    PB::TextFormatter::format(this, "frameNum");
  v14 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 112);
  while (v14 != v15)
  {
    v14 += 4;
    PB::TextFormatter::format(this, "ledCurrent");
  }
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD *)(a1 + 136);
  while (v16 != v17)
  {
    v16 += 4;
    PB::TextFormatter::format(this, "light0");
  }
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 160);
  while (v18 != v19)
  {
    v18 += 4;
    PB::TextFormatter::format(this, "light1");
  }
  v20 = *(_QWORD *)(a1 + 176);
  v21 = *(_QWORD *)(a1 + 184);
  while (v20 != v21)
  {
    v20 += 4;
    PB::TextFormatter::format(this, "rxGain");
  }
  v22 = *(_BYTE *)(a1 + 224);
  if ((v22 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime");
    v22 = *(_BYTE *)(a1 + 224);
  }
  if ((v22 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 208));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F278D3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  BOOL v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  int v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char v134;
  unsigned int v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  char *v151;
  int v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char v157;
  unsigned int v158;
  uint64_t v159;
  unint64_t v160;
  char v161;
  char v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  char v166;
  char *v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  int v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char v180;
  unsigned int v181;
  uint64_t v182;
  unint64_t v183;
  char v184;
  char v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  char v203;
  unsigned int v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  unint64_t v211;
  char v212;
  char *v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char *v218;
  char *v219;
  char *v220;
  int v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char v226;
  unsigned int v227;
  uint64_t v228;
  unint64_t v229;
  char v230;
  char v231;
  unsigned int v232;
  uint64_t v233;
  unint64_t v234;
  char v235;
  char v236;
  unsigned int v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  unint64_t v242;
  char v243;
  char v244;
  unsigned int v245;
  unint64_t v246;
  char v247;
  unint64_t v248;
  char *v249;
  _DWORD *v250;
  unint64_t v251;
  char *v252;
  unint64_t v253;
  char *v254;
  unint64_t v255;
  char *v256;
  unint64_t v257;
  char *v258;
  unint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  unint64_t v269;
  char *v270;
  char *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  unint64_t v275;
  char *v276;
  char *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char *v288;
  char *v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  unint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  char *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  char *v312;
  char *v313;
  int v314;
  unint64_t v315;
  unint64_t v316;
  uint64_t v317;
  char v318;
  unsigned int v319;
  unint64_t v321;
  char v322;
  uint64_t v323;
  unint64_t v324;
  char v325;
  char *v326;
  int v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  char v331;
  unsigned int v332;
  unint64_t v334;
  char v335;
  unint64_t v336;
  char v337;
  char *v338;
  int v339;
  unint64_t v340;
  unint64_t v341;
  uint64_t v342;
  char v343;
  unsigned int v344;
  unint64_t v346;
  char v347;
  unint64_t v348;
  char v349;
  char *v350;
  int v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  char v355;
  unsigned int v356;
  unint64_t v358;
  char v359;
  unint64_t v360;
  char v361;
  char *v362;
  int v363;
  unint64_t v364;
  unint64_t v365;
  uint64_t v366;
  char v367;
  unsigned int v368;
  unint64_t v370;
  char v371;
  unint64_t v372;
  char v373;
  char *v374;
  int v375;
  unint64_t v376;
  unint64_t v377;
  uint64_t v378;
  char v379;
  unsigned int v380;
  unint64_t v382;
  char v383;
  unint64_t v384;
  char v385;
  char *v386;
  int v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  char v391;
  unsigned int v392;
  unint64_t v394;
  char v395;
  unint64_t v396;
  char v397;
  char *v398;
  int v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  char v403;
  unsigned int v404;
  unint64_t v406;
  char v407;
  unint64_t v408;
  char v409;
  void **v412;
  void **v413;
  void **v414;
  void **v415;
  void **v416;
  void **v417;
  void **v418;
  void **v419;
  _QWORD *v420;
  _QWORD *v421;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v421 = (_QWORD *)(a1 + 120);
    v418 = (void **)(a1 + 176);
    v419 = (void **)(a1 + 104);
    v420 = (_QWORD *)(a1 + 192);
    v8 = (_QWORD *)(a1 + 168);
    v416 = (void **)(a1 + 128);
    v417 = (void **)(a1 + 152);
    v9 = (_QWORD *)(a1 + 144);
    v10 = (_QWORD *)(a1 + 96);
    v414 = (void **)(a1 + 56);
    v415 = (void **)(a1 + 80);
    v11 = (_QWORD *)(a1 + 72);
    v12 = (_QWORD *)(a1 + 48);
    v412 = (void **)(a1 + 8);
    v413 = (void **)(a1 + 32);
    v13 = (_QWORD *)(a1 + 24);
    while (1)
    {
      v14 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      while (1)
      {
        v18 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v19 = *(_BYTE *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0)
          break;
        v15 += 7;
        v2 = v18;
        v64 = v16++ > 8;
        if (v64)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v17 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 224) |= 2u;
          v26 = *((_QWORD *)this + 1);
          if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 208) = *(_QWORD *)(*(_QWORD *)this + v26);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_706;
        case 2u:
          *(_BYTE *)(a1 + 224) |= 1u;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          v29 = *(_QWORD *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            do
            {
              v33 = v27 + 1;
              *((_QWORD *)this + 1) = v27 + 1;
              v34 = *(_BYTE *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0)
                goto LABEL_518;
              v30 += 7;
              v27 = v33;
              v64 = v31++ > 8;
            }
            while (!v64);
LABEL_417:
            v32 = 0;
            goto LABEL_518;
          }
          v236 = 0;
          v237 = 0;
          v32 = 0;
          if (v28 <= v27)
            v28 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v28 == v27)
            {
              v32 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v238 = v27 + 1;
              v239 = *(_BYTE *)(v29 + v27);
              *((_QWORD *)this + 1) = v238;
              v32 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                v27 = v238;
                v64 = v237++ > 8;
                if (v64)
                  goto LABEL_417;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v32 = 0;
            }
            break;
          }
LABEL_518:
          *(_QWORD *)(a1 + 200) = v32;
          goto LABEL_706;
        case 3u:
          *(_BYTE *)(a1 + 224) |= 8u;
          v35 = *((_QWORD *)this + 1);
          v36 = *((_QWORD *)this + 2);
          v37 = *(_QWORD *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            v38 = 0;
            v39 = 0;
            v40 = 0;
            do
            {
              v41 = v35 + 1;
              *((_QWORD *)this + 1) = v35 + 1;
              v42 = *(_BYTE *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0)
                goto LABEL_521;
              v38 += 7;
              v35 = v41;
              v64 = v39++ > 8;
            }
            while (!v64);
LABEL_424:
            LODWORD(v40) = 0;
            goto LABEL_521;
          }
          v240 = 0;
          v241 = 0;
          v40 = 0;
          if (v36 <= v35)
            v36 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v242 = v35 + 1;
              v243 = *(_BYTE *)(v37 + v35);
              *((_QWORD *)this + 1) = v242;
              v40 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                v35 = v242;
                v64 = v241++ > 8;
                if (v64)
                  goto LABEL_424;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v40) = 0;
            }
            break;
          }
LABEL_521:
          *(_DWORD *)(a1 + 220) = v40;
          goto LABEL_706;
        case 4u:
          *(_BYTE *)(a1 + 224) |= 4u;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          v45 = *(_QWORD *)this;
          if (v43 <= 0xFFFFFFFFFFFFFFF5 && v43 + 10 <= v44)
          {
            v46 = 0;
            v47 = 0;
            v48 = 0;
            do
            {
              v49 = v43 + 1;
              *((_QWORD *)this + 1) = v43 + 1;
              v50 = *(_BYTE *)(v45 + v43);
              v48 |= (unint64_t)(v50 & 0x7F) << v46;
              if ((v50 & 0x80) == 0)
                goto LABEL_524;
              v46 += 7;
              v43 = v49;
              v64 = v47++ > 8;
            }
            while (!v64);
LABEL_431:
            LODWORD(v48) = 0;
            goto LABEL_524;
          }
          v244 = 0;
          v245 = 0;
          v48 = 0;
          if (v44 <= v43)
            v44 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v44 == v43)
            {
              LODWORD(v48) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v246 = v43 + 1;
              v247 = *(_BYTE *)(v45 + v43);
              *((_QWORD *)this + 1) = v246;
              v48 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                v43 = v246;
                v64 = v245++ > 8;
                if (v64)
                  goto LABEL_431;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v48) = 0;
            }
            break;
          }
LABEL_524:
          *(_DWORD *)(a1 + 216) = v48;
          goto LABEL_706;
        case 5u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v51 >= *v13)
                {
                  v52 = (char *)*v412;
                  v53 = (v51 - (_BYTE *)*v412) >> 2;
                  v54 = v53 + 1;
                  if ((unint64_t)(v53 + 1) >> 62)
                    goto LABEL_716;
                  v55 = *v13 - (_QWORD)v52;
                  if (v55 >> 1 > v54)
                    v54 = v55 >> 1;
                  if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
                    v56 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v56 = v54;
                  if (v56)
                  {
                    v57 = (char *)sub_18F26FB8C((uint64_t)v13, v56);
                    v52 = *(char **)(a1 + 8);
                    v51 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v57 = 0;
                  }
                  v58 = &v57[4 * v53];
                  *(_DWORD *)v58 = 0;
                  v59 = v58 + 4;
                  while (v51 != v52)
                  {
                    v60 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v58 - 1) = v60;
                    v58 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v58;
                  *(_QWORD *)(a1 + 16) = v59;
                  *(_QWORD *)(a1 + 24) = &v57[4 * v56];
                  if (v52)
                    operator delete(v52);
                  v51 = v59;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 16) = v51;
                v62 = *((_QWORD *)this + 1);
                v61 = *((_QWORD *)this + 2);
                v63 = *(_QWORD *)this;
                v64 = v62 > 0xFFFFFFFFFFFFFFF5 || v62 + 10 > v61;
                if (v64)
                {
                  v65 = 0;
                  v66 = 0;
                  v72 = 0;
                  if (v61 <= v62)
                    v67 = *((_QWORD *)this + 1);
                  else
                    v67 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v67 == v62)
                      goto LABEL_409;
                    v68 = v62++;
                    v69 = *(_BYTE *)(v63 + v68);
                    *((_QWORD *)this + 1) = v62;
                    v72 |= (unint64_t)(v69 & 0x7F) << v65;
                    if ((v69 & 0x80) == 0)
                      break;
                    v65 += 7;
                    v64 = v66++ > 8;
                    if (v64)
                    {
                      LODWORD(v72) = 0;
                      goto LABEL_90;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v72) = 0;
LABEL_90:
                  v73 = v68 + 1;
                }
                else
                {
                  v70 = 0;
                  v71 = 0;
                  v72 = 0;
                  while (1)
                  {
                    v73 = v62 + 1;
                    *((_QWORD *)this + 1) = v62 + 1;
                    v74 = *(_BYTE *)(v63 + v62);
                    v72 |= (unint64_t)(v74 & 0x7F) << v70;
                    if ((v74 & 0x80) == 0)
                      break;
                    v70 += 7;
                    v62 = v73;
                    v64 = v71++ > 8;
                    if (v64)
                    {
                      LODWORD(v72) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v72;
              }
              while (v73 < v61 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v249 = *(char **)(a1 + 16);
          v248 = *(_QWORD *)(a1 + 24);
          if ((unint64_t)v249 >= v248)
          {
            v265 = (char *)*v412;
            v266 = (v249 - (_BYTE *)*v412) >> 2;
            v267 = v266 + 1;
            if ((unint64_t)(v266 + 1) >> 62)
LABEL_716:
              sub_18F26F8C0();
            v268 = v248 - (_QWORD)v265;
            if (v268 >> 1 > v267)
              v267 = v268 >> 1;
            if ((unint64_t)v268 >= 0x7FFFFFFFFFFFFFFCLL)
              v269 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v269 = v267;
            if (v269)
            {
              v270 = (char *)sub_18F26FB8C((uint64_t)v13, v269);
              v265 = *(char **)(a1 + 8);
              v249 = *(char **)(a1 + 16);
            }
            else
            {
              v270 = 0;
            }
            v313 = &v270[4 * v266];
            *(_DWORD *)v313 = 0;
            v250 = v313 + 4;
            while (v249 != v265)
            {
              v314 = *((_DWORD *)v249 - 1);
              v249 -= 4;
              *((_DWORD *)v313 - 1) = v314;
              v313 -= 4;
            }
            *(_QWORD *)(a1 + 8) = v313;
            *(_QWORD *)(a1 + 16) = v250;
            *(_QWORD *)(a1 + 24) = &v270[4 * v269];
            if (v265)
              operator delete(v265);
          }
          else
          {
            *(_DWORD *)v249 = 0;
            v250 = v249 + 4;
          }
          *(_QWORD *)(a1 + 16) = v250;
          v315 = *((_QWORD *)this + 1);
          v316 = *((_QWORD *)this + 2);
          v317 = *(_QWORD *)this;
          v318 = 0;
          v319 = 0;
          if (v315 <= 0xFFFFFFFFFFFFFFF5 && v315 + 10 <= v316)
          {
            v323 = 0;
            while (1)
            {
              v324 = v315 + 1;
              *((_QWORD *)this + 1) = v315 + 1;
              v325 = *(_BYTE *)(v317 + v315);
              v323 |= (unint64_t)(v325 & 0x7F) << v318;
              if ((v325 & 0x80) == 0)
                goto LABEL_705;
              v318 += 7;
              v315 = v324;
              v64 = v319++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v316 <= v315)
            v316 = *((_QWORD *)this + 1);
          while (v316 != v315)
          {
            v321 = v315 + 1;
            v322 = *(_BYTE *)(v317 + v315);
            *((_QWORD *)this + 1) = v321;
            v323 |= (unint64_t)(v322 & 0x7F) << v318;
            if ((v322 & 0x80) == 0)
              goto LABEL_698;
            v318 += 7;
            v315 = v321;
            v64 = v319++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 6u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v51 >= *v12)
                {
                  v75 = (char *)*v413;
                  v76 = (v51 - (_BYTE *)*v413) >> 2;
                  v77 = v76 + 1;
                  if ((unint64_t)(v76 + 1) >> 62)
                    goto LABEL_717;
                  v78 = *v12 - (_QWORD)v75;
                  if (v78 >> 1 > v77)
                    v77 = v78 >> 1;
                  if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL)
                    v79 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v79 = v77;
                  if (v79)
                  {
                    v80 = (char *)sub_18F26FB8C((uint64_t)v12, v79);
                    v75 = *(char **)(a1 + 32);
                    v51 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    v80 = 0;
                  }
                  v81 = &v80[4 * v76];
                  *(_DWORD *)v81 = 0;
                  v82 = v81 + 4;
                  while (v51 != v75)
                  {
                    v83 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v81 - 1) = v83;
                    v81 -= 4;
                  }
                  *(_QWORD *)(a1 + 32) = v81;
                  *(_QWORD *)(a1 + 40) = v82;
                  *(_QWORD *)(a1 + 48) = &v80[4 * v79];
                  if (v75)
                    operator delete(v75);
                  v51 = v82;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 40) = v51;
                v85 = *((_QWORD *)this + 1);
                v84 = *((_QWORD *)this + 2);
                v86 = *(_QWORD *)this;
                if (v85 > 0xFFFFFFFFFFFFFFF5 || v85 + 10 > v84)
                {
                  v88 = 0;
                  v89 = 0;
                  v95 = 0;
                  if (v84 <= v85)
                    v90 = *((_QWORD *)this + 1);
                  else
                    v90 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v90 == v85)
                      goto LABEL_409;
                    v91 = v85++;
                    v92 = *(_BYTE *)(v86 + v91);
                    *((_QWORD *)this + 1) = v85;
                    v95 |= (unint64_t)(v92 & 0x7F) << v88;
                    if ((v92 & 0x80) == 0)
                      break;
                    v88 += 7;
                    v64 = v89++ > 8;
                    if (v64)
                    {
                      LODWORD(v95) = 0;
                      goto LABEL_135;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v95) = 0;
LABEL_135:
                  v96 = v91 + 1;
                }
                else
                {
                  v93 = 0;
                  v94 = 0;
                  v95 = 0;
                  while (1)
                  {
                    v96 = v85 + 1;
                    *((_QWORD *)this + 1) = v85 + 1;
                    v97 = *(_BYTE *)(v86 + v85);
                    v95 |= (unint64_t)(v97 & 0x7F) << v93;
                    if ((v97 & 0x80) == 0)
                      break;
                    v93 += 7;
                    v85 = v96;
                    v64 = v94++ > 8;
                    if (v64)
                    {
                      LODWORD(v95) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v95;
              }
              while (v96 < v84 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v252 = *(char **)(a1 + 40);
          v251 = *(_QWORD *)(a1 + 48);
          if ((unint64_t)v252 >= v251)
          {
            v271 = (char *)*v413;
            v272 = (v252 - (_BYTE *)*v413) >> 2;
            v273 = v272 + 1;
            if ((unint64_t)(v272 + 1) >> 62)
LABEL_717:
              sub_18F26F8C0();
            v274 = v251 - (_QWORD)v271;
            if (v274 >> 1 > v273)
              v273 = v274 >> 1;
            if ((unint64_t)v274 >= 0x7FFFFFFFFFFFFFFCLL)
              v275 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v275 = v273;
            if (v275)
            {
              v276 = (char *)sub_18F26FB8C((uint64_t)v12, v275);
              v271 = *(char **)(a1 + 32);
              v252 = *(char **)(a1 + 40);
            }
            else
            {
              v276 = 0;
            }
            v326 = &v276[4 * v272];
            *(_DWORD *)v326 = 0;
            v250 = v326 + 4;
            while (v252 != v271)
            {
              v327 = *((_DWORD *)v252 - 1);
              v252 -= 4;
              *((_DWORD *)v326 - 1) = v327;
              v326 -= 4;
            }
            *(_QWORD *)(a1 + 32) = v326;
            *(_QWORD *)(a1 + 40) = v250;
            *(_QWORD *)(a1 + 48) = &v276[4 * v275];
            if (v271)
              operator delete(v271);
          }
          else
          {
            *(_DWORD *)v252 = 0;
            v250 = v252 + 4;
          }
          *(_QWORD *)(a1 + 40) = v250;
          v328 = *((_QWORD *)this + 1);
          v329 = *((_QWORD *)this + 2);
          v330 = *(_QWORD *)this;
          v331 = 0;
          v332 = 0;
          if (v328 <= 0xFFFFFFFFFFFFFFF5 && v328 + 10 <= v329)
          {
            v323 = 0;
            while (1)
            {
              v336 = v328 + 1;
              *((_QWORD *)this + 1) = v328 + 1;
              v337 = *(_BYTE *)(v330 + v328);
              v323 |= (unint64_t)(v337 & 0x7F) << v331;
              if ((v337 & 0x80) == 0)
                goto LABEL_705;
              v331 += 7;
              v328 = v336;
              v64 = v332++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v329 <= v328)
            v329 = *((_QWORD *)this + 1);
          while (v329 != v328)
          {
            v334 = v328 + 1;
            v335 = *(_BYTE *)(v330 + v328);
            *((_QWORD *)this + 1) = v334;
            v323 |= (unint64_t)(v335 & 0x7F) << v331;
            if ((v335 & 0x80) == 0)
              goto LABEL_698;
            v331 += 7;
            v328 = v334;
            v64 = v332++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 7u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v51 >= *v11)
                {
                  v98 = (char *)*v414;
                  v99 = (v51 - (_BYTE *)*v414) >> 2;
                  v100 = v99 + 1;
                  if ((unint64_t)(v99 + 1) >> 62)
                    goto LABEL_718;
                  v101 = *v11 - (_QWORD)v98;
                  if (v101 >> 1 > v100)
                    v100 = v101 >> 1;
                  if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFFCLL)
                    v102 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v102 = v100;
                  if (v102)
                  {
                    v103 = (char *)sub_18F26FB8C((uint64_t)v11, v102);
                    v98 = *(char **)(a1 + 56);
                    v51 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    v103 = 0;
                  }
                  v104 = &v103[4 * v99];
                  *(_DWORD *)v104 = 0;
                  v105 = v104 + 4;
                  while (v51 != v98)
                  {
                    v106 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v104 - 1) = v106;
                    v104 -= 4;
                  }
                  *(_QWORD *)(a1 + 56) = v104;
                  *(_QWORD *)(a1 + 64) = v105;
                  *(_QWORD *)(a1 + 72) = &v103[4 * v102];
                  if (v98)
                    operator delete(v98);
                  v51 = v105;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 64) = v51;
                v108 = *((_QWORD *)this + 1);
                v107 = *((_QWORD *)this + 2);
                v109 = *(_QWORD *)this;
                if (v108 > 0xFFFFFFFFFFFFFFF5 || v108 + 10 > v107)
                {
                  v111 = 0;
                  v112 = 0;
                  v118 = 0;
                  if (v107 <= v108)
                    v113 = *((_QWORD *)this + 1);
                  else
                    v113 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v113 == v108)
                      goto LABEL_409;
                    v114 = v108++;
                    v115 = *(_BYTE *)(v109 + v114);
                    *((_QWORD *)this + 1) = v108;
                    v118 |= (unint64_t)(v115 & 0x7F) << v111;
                    if ((v115 & 0x80) == 0)
                      break;
                    v111 += 7;
                    v64 = v112++ > 8;
                    if (v64)
                    {
                      LODWORD(v118) = 0;
                      goto LABEL_180;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v118) = 0;
LABEL_180:
                  v119 = v114 + 1;
                }
                else
                {
                  v116 = 0;
                  v117 = 0;
                  v118 = 0;
                  while (1)
                  {
                    v119 = v108 + 1;
                    *((_QWORD *)this + 1) = v108 + 1;
                    v120 = *(_BYTE *)(v109 + v108);
                    v118 |= (unint64_t)(v120 & 0x7F) << v116;
                    if ((v120 & 0x80) == 0)
                      break;
                    v116 += 7;
                    v108 = v119;
                    v64 = v117++ > 8;
                    if (v64)
                    {
                      LODWORD(v118) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v118;
              }
              while (v119 < v107 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v254 = *(char **)(a1 + 64);
          v253 = *(_QWORD *)(a1 + 72);
          if ((unint64_t)v254 >= v253)
          {
            v277 = (char *)*v414;
            v278 = (v254 - (_BYTE *)*v414) >> 2;
            v279 = v278 + 1;
            if ((unint64_t)(v278 + 1) >> 62)
LABEL_718:
              sub_18F26F8C0();
            v280 = v253 - (_QWORD)v277;
            if (v280 >> 1 > v279)
              v279 = v280 >> 1;
            if ((unint64_t)v280 >= 0x7FFFFFFFFFFFFFFCLL)
              v281 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v281 = v279;
            if (v281)
            {
              v282 = (char *)sub_18F26FB8C((uint64_t)v11, v281);
              v277 = *(char **)(a1 + 56);
              v254 = *(char **)(a1 + 64);
            }
            else
            {
              v282 = 0;
            }
            v338 = &v282[4 * v278];
            *(_DWORD *)v338 = 0;
            v250 = v338 + 4;
            while (v254 != v277)
            {
              v339 = *((_DWORD *)v254 - 1);
              v254 -= 4;
              *((_DWORD *)v338 - 1) = v339;
              v338 -= 4;
            }
            *(_QWORD *)(a1 + 56) = v338;
            *(_QWORD *)(a1 + 64) = v250;
            *(_QWORD *)(a1 + 72) = &v282[4 * v281];
            if (v277)
              operator delete(v277);
          }
          else
          {
            *(_DWORD *)v254 = 0;
            v250 = v254 + 4;
          }
          *(_QWORD *)(a1 + 64) = v250;
          v340 = *((_QWORD *)this + 1);
          v341 = *((_QWORD *)this + 2);
          v342 = *(_QWORD *)this;
          v343 = 0;
          v344 = 0;
          if (v340 <= 0xFFFFFFFFFFFFFFF5 && v340 + 10 <= v341)
          {
            v323 = 0;
            while (1)
            {
              v348 = v340 + 1;
              *((_QWORD *)this + 1) = v340 + 1;
              v349 = *(_BYTE *)(v342 + v340);
              v323 |= (unint64_t)(v349 & 0x7F) << v343;
              if ((v349 & 0x80) == 0)
                goto LABEL_705;
              v343 += 7;
              v340 = v348;
              v64 = v344++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v341 <= v340)
            v341 = *((_QWORD *)this + 1);
          while (v341 != v340)
          {
            v346 = v340 + 1;
            v347 = *(_BYTE *)(v342 + v340);
            *((_QWORD *)this + 1) = v346;
            v323 |= (unint64_t)(v347 & 0x7F) << v343;
            if ((v347 & 0x80) == 0)
              goto LABEL_698;
            v343 += 7;
            v340 = v346;
            v64 = v344++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 8u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v51 >= *v10)
                {
                  v121 = (char *)*v415;
                  v122 = (v51 - (_BYTE *)*v415) >> 2;
                  v123 = v122 + 1;
                  if ((unint64_t)(v122 + 1) >> 62)
                    goto LABEL_719;
                  v124 = *v10 - (_QWORD)v121;
                  if (v124 >> 1 > v123)
                    v123 = v124 >> 1;
                  if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL)
                    v125 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v125 = v123;
                  if (v125)
                  {
                    v126 = (char *)sub_18F26FB8C((uint64_t)v10, v125);
                    v121 = *(char **)(a1 + 80);
                    v51 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    v126 = 0;
                  }
                  v127 = &v126[4 * v122];
                  *(_DWORD *)v127 = 0;
                  v128 = v127 + 4;
                  while (v51 != v121)
                  {
                    v129 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v127 - 1) = v129;
                    v127 -= 4;
                  }
                  *(_QWORD *)(a1 + 80) = v127;
                  *(_QWORD *)(a1 + 88) = v128;
                  *(_QWORD *)(a1 + 96) = &v126[4 * v125];
                  if (v121)
                    operator delete(v121);
                  v51 = v128;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 88) = v51;
                v131 = *((_QWORD *)this + 1);
                v130 = *((_QWORD *)this + 2);
                v132 = *(_QWORD *)this;
                if (v131 > 0xFFFFFFFFFFFFFFF5 || v131 + 10 > v130)
                {
                  v134 = 0;
                  v135 = 0;
                  v141 = 0;
                  if (v130 <= v131)
                    v136 = *((_QWORD *)this + 1);
                  else
                    v136 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v136 == v131)
                      goto LABEL_409;
                    v137 = v131++;
                    v138 = *(_BYTE *)(v132 + v137);
                    *((_QWORD *)this + 1) = v131;
                    v141 |= (unint64_t)(v138 & 0x7F) << v134;
                    if ((v138 & 0x80) == 0)
                      break;
                    v134 += 7;
                    v64 = v135++ > 8;
                    if (v64)
                    {
                      LODWORD(v141) = 0;
                      goto LABEL_225;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v141) = 0;
LABEL_225:
                  v142 = v137 + 1;
                }
                else
                {
                  v139 = 0;
                  v140 = 0;
                  v141 = 0;
                  while (1)
                  {
                    v142 = v131 + 1;
                    *((_QWORD *)this + 1) = v131 + 1;
                    v143 = *(_BYTE *)(v132 + v131);
                    v141 |= (unint64_t)(v143 & 0x7F) << v139;
                    if ((v143 & 0x80) == 0)
                      break;
                    v139 += 7;
                    v131 = v142;
                    v64 = v140++ > 8;
                    if (v64)
                    {
                      LODWORD(v141) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v141;
              }
              while (v142 < v130 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v256 = *(char **)(a1 + 88);
          v255 = *(_QWORD *)(a1 + 96);
          if ((unint64_t)v256 >= v255)
          {
            v283 = (char *)*v415;
            v284 = (v256 - (_BYTE *)*v415) >> 2;
            v285 = v284 + 1;
            if ((unint64_t)(v284 + 1) >> 62)
LABEL_719:
              sub_18F26F8C0();
            v286 = v255 - (_QWORD)v283;
            if (v286 >> 1 > v285)
              v285 = v286 >> 1;
            if ((unint64_t)v286 >= 0x7FFFFFFFFFFFFFFCLL)
              v287 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v287 = v285;
            if (v287)
            {
              v288 = (char *)sub_18F26FB8C((uint64_t)v10, v287);
              v283 = *(char **)(a1 + 80);
              v256 = *(char **)(a1 + 88);
            }
            else
            {
              v288 = 0;
            }
            v350 = &v288[4 * v284];
            *(_DWORD *)v350 = 0;
            v250 = v350 + 4;
            while (v256 != v283)
            {
              v351 = *((_DWORD *)v256 - 1);
              v256 -= 4;
              *((_DWORD *)v350 - 1) = v351;
              v350 -= 4;
            }
            *(_QWORD *)(a1 + 80) = v350;
            *(_QWORD *)(a1 + 88) = v250;
            *(_QWORD *)(a1 + 96) = &v288[4 * v287];
            if (v283)
              operator delete(v283);
          }
          else
          {
            *(_DWORD *)v256 = 0;
            v250 = v256 + 4;
          }
          *(_QWORD *)(a1 + 88) = v250;
          v352 = *((_QWORD *)this + 1);
          v353 = *((_QWORD *)this + 2);
          v354 = *(_QWORD *)this;
          v355 = 0;
          v356 = 0;
          if (v352 <= 0xFFFFFFFFFFFFFFF5 && v352 + 10 <= v353)
          {
            v323 = 0;
            while (1)
            {
              v360 = v352 + 1;
              *((_QWORD *)this + 1) = v352 + 1;
              v361 = *(_BYTE *)(v354 + v352);
              v323 |= (unint64_t)(v361 & 0x7F) << v355;
              if ((v361 & 0x80) == 0)
                goto LABEL_705;
              v355 += 7;
              v352 = v360;
              v64 = v356++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v353 <= v352)
            v353 = *((_QWORD *)this + 1);
          while (v353 != v352)
          {
            v358 = v352 + 1;
            v359 = *(_BYTE *)(v354 + v352);
            *((_QWORD *)this + 1) = v358;
            v323 |= (unint64_t)(v359 & 0x7F) << v355;
            if ((v359 & 0x80) == 0)
              goto LABEL_698;
            v355 += 7;
            v352 = v358;
            v64 = v356++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 9u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 136);
              do
              {
                if ((unint64_t)v51 >= *v9)
                {
                  v144 = (char *)*v416;
                  v145 = (v51 - (_BYTE *)*v416) >> 2;
                  v146 = v145 + 1;
                  if ((unint64_t)(v145 + 1) >> 62)
                    goto LABEL_720;
                  v147 = *v9 - (_QWORD)v144;
                  if (v147 >> 1 > v146)
                    v146 = v147 >> 1;
                  if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
                    v148 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v148 = v146;
                  if (v148)
                  {
                    v149 = (char *)sub_18F26FB8C((uint64_t)v9, v148);
                    v144 = *(char **)(a1 + 128);
                    v51 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    v149 = 0;
                  }
                  v150 = &v149[4 * v145];
                  *(_DWORD *)v150 = 0;
                  v151 = v150 + 4;
                  while (v51 != v144)
                  {
                    v152 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v150 - 1) = v152;
                    v150 -= 4;
                  }
                  *(_QWORD *)(a1 + 128) = v150;
                  *(_QWORD *)(a1 + 136) = v151;
                  *(_QWORD *)(a1 + 144) = &v149[4 * v148];
                  if (v144)
                    operator delete(v144);
                  v51 = v151;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 136) = v51;
                v154 = *((_QWORD *)this + 1);
                v153 = *((_QWORD *)this + 2);
                v155 = *(_QWORD *)this;
                if (v154 > 0xFFFFFFFFFFFFFFF5 || v154 + 10 > v153)
                {
                  v157 = 0;
                  v158 = 0;
                  v164 = 0;
                  if (v153 <= v154)
                    v159 = *((_QWORD *)this + 1);
                  else
                    v159 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v159 == v154)
                      goto LABEL_409;
                    v160 = v154++;
                    v161 = *(_BYTE *)(v155 + v160);
                    *((_QWORD *)this + 1) = v154;
                    v164 |= (unint64_t)(v161 & 0x7F) << v157;
                    if ((v161 & 0x80) == 0)
                      break;
                    v157 += 7;
                    v64 = v158++ > 8;
                    if (v64)
                    {
                      LODWORD(v164) = 0;
                      goto LABEL_270;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v164) = 0;
LABEL_270:
                  v165 = v160 + 1;
                }
                else
                {
                  v162 = 0;
                  v163 = 0;
                  v164 = 0;
                  while (1)
                  {
                    v165 = v154 + 1;
                    *((_QWORD *)this + 1) = v154 + 1;
                    v166 = *(_BYTE *)(v155 + v154);
                    v164 |= (unint64_t)(v166 & 0x7F) << v162;
                    if ((v166 & 0x80) == 0)
                      break;
                    v162 += 7;
                    v154 = v165;
                    v64 = v163++ > 8;
                    if (v64)
                    {
                      LODWORD(v164) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v164;
              }
              while (v165 < v153 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v258 = *(char **)(a1 + 136);
          v257 = *(_QWORD *)(a1 + 144);
          if ((unint64_t)v258 >= v257)
          {
            v289 = (char *)*v416;
            v290 = (v258 - (_BYTE *)*v416) >> 2;
            v291 = v290 + 1;
            if ((unint64_t)(v290 + 1) >> 62)
LABEL_720:
              sub_18F26F8C0();
            v292 = v257 - (_QWORD)v289;
            if (v292 >> 1 > v291)
              v291 = v292 >> 1;
            if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFFCLL)
              v293 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v293 = v291;
            if (v293)
            {
              v294 = (char *)sub_18F26FB8C((uint64_t)v9, v293);
              v289 = *(char **)(a1 + 128);
              v258 = *(char **)(a1 + 136);
            }
            else
            {
              v294 = 0;
            }
            v362 = &v294[4 * v290];
            *(_DWORD *)v362 = 0;
            v250 = v362 + 4;
            while (v258 != v289)
            {
              v363 = *((_DWORD *)v258 - 1);
              v258 -= 4;
              *((_DWORD *)v362 - 1) = v363;
              v362 -= 4;
            }
            *(_QWORD *)(a1 + 128) = v362;
            *(_QWORD *)(a1 + 136) = v250;
            *(_QWORD *)(a1 + 144) = &v294[4 * v293];
            if (v289)
              operator delete(v289);
          }
          else
          {
            *(_DWORD *)v258 = 0;
            v250 = v258 + 4;
          }
          *(_QWORD *)(a1 + 136) = v250;
          v364 = *((_QWORD *)this + 1);
          v365 = *((_QWORD *)this + 2);
          v366 = *(_QWORD *)this;
          v367 = 0;
          v368 = 0;
          if (v364 <= 0xFFFFFFFFFFFFFFF5 && v364 + 10 <= v365)
          {
            v323 = 0;
            while (1)
            {
              v372 = v364 + 1;
              *((_QWORD *)this + 1) = v364 + 1;
              v373 = *(_BYTE *)(v366 + v364);
              v323 |= (unint64_t)(v373 & 0x7F) << v367;
              if ((v373 & 0x80) == 0)
                goto LABEL_705;
              v367 += 7;
              v364 = v372;
              v64 = v368++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v365 <= v364)
            v365 = *((_QWORD *)this + 1);
          while (v365 != v364)
          {
            v370 = v364 + 1;
            v371 = *(_BYTE *)(v366 + v364);
            *((_QWORD *)this + 1) = v370;
            v323 |= (unint64_t)(v371 & 0x7F) << v367;
            if ((v371 & 0x80) == 0)
              goto LABEL_698;
            v367 += 7;
            v364 = v370;
            v64 = v368++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xAu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 160);
              do
              {
                if ((unint64_t)v51 >= *v8)
                {
                  v167 = (char *)*v417;
                  v168 = (v51 - (_BYTE *)*v417) >> 2;
                  v169 = v168 + 1;
                  if ((unint64_t)(v168 + 1) >> 62)
                    goto LABEL_721;
                  v170 = *v8 - (_QWORD)v167;
                  if (v170 >> 1 > v169)
                    v169 = v170 >> 1;
                  if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL)
                    v171 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v171 = v169;
                  if (v171)
                  {
                    v172 = (char *)sub_18F26FB8C((uint64_t)v8, v171);
                    v167 = *(char **)(a1 + 152);
                    v51 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    v172 = 0;
                  }
                  v173 = &v172[4 * v168];
                  *(_DWORD *)v173 = 0;
                  v174 = v173 + 4;
                  while (v51 != v167)
                  {
                    v175 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v173 - 1) = v175;
                    v173 -= 4;
                  }
                  *(_QWORD *)(a1 + 152) = v173;
                  *(_QWORD *)(a1 + 160) = v174;
                  *(_QWORD *)(a1 + 168) = &v172[4 * v171];
                  if (v167)
                    operator delete(v167);
                  v51 = v174;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 160) = v51;
                v177 = *((_QWORD *)this + 1);
                v176 = *((_QWORD *)this + 2);
                v178 = *(_QWORD *)this;
                if (v177 > 0xFFFFFFFFFFFFFFF5 || v177 + 10 > v176)
                {
                  v180 = 0;
                  v181 = 0;
                  v187 = 0;
                  if (v176 <= v177)
                    v182 = *((_QWORD *)this + 1);
                  else
                    v182 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v182 == v177)
                      goto LABEL_409;
                    v183 = v177++;
                    v184 = *(_BYTE *)(v178 + v183);
                    *((_QWORD *)this + 1) = v177;
                    v187 |= (unint64_t)(v184 & 0x7F) << v180;
                    if ((v184 & 0x80) == 0)
                      break;
                    v180 += 7;
                    v64 = v181++ > 8;
                    if (v64)
                    {
                      LODWORD(v187) = 0;
                      goto LABEL_315;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v187) = 0;
LABEL_315:
                  v188 = v183 + 1;
                }
                else
                {
                  v185 = 0;
                  v186 = 0;
                  v187 = 0;
                  while (1)
                  {
                    v188 = v177 + 1;
                    *((_QWORD *)this + 1) = v177 + 1;
                    v189 = *(_BYTE *)(v178 + v177);
                    v187 |= (unint64_t)(v189 & 0x7F) << v185;
                    if ((v189 & 0x80) == 0)
                      break;
                    v185 += 7;
                    v177 = v188;
                    v64 = v186++ > 8;
                    if (v64)
                    {
                      LODWORD(v187) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v187;
              }
              while (v188 < v176 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v260 = *(char **)(a1 + 160);
          v259 = *(_QWORD *)(a1 + 168);
          if ((unint64_t)v260 >= v259)
          {
            v295 = (char *)*v417;
            v296 = (v260 - (_BYTE *)*v417) >> 2;
            v297 = v296 + 1;
            if ((unint64_t)(v296 + 1) >> 62)
LABEL_721:
              sub_18F26F8C0();
            v298 = v259 - (_QWORD)v295;
            if (v298 >> 1 > v297)
              v297 = v298 >> 1;
            if ((unint64_t)v298 >= 0x7FFFFFFFFFFFFFFCLL)
              v299 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v299 = v297;
            if (v299)
            {
              v300 = (char *)sub_18F26FB8C((uint64_t)v8, v299);
              v295 = *(char **)(a1 + 152);
              v260 = *(char **)(a1 + 160);
            }
            else
            {
              v300 = 0;
            }
            v374 = &v300[4 * v296];
            *(_DWORD *)v374 = 0;
            v250 = v374 + 4;
            while (v260 != v295)
            {
              v375 = *((_DWORD *)v260 - 1);
              v260 -= 4;
              *((_DWORD *)v374 - 1) = v375;
              v374 -= 4;
            }
            *(_QWORD *)(a1 + 152) = v374;
            *(_QWORD *)(a1 + 160) = v250;
            *(_QWORD *)(a1 + 168) = &v300[4 * v299];
            if (v295)
              operator delete(v295);
          }
          else
          {
            *(_DWORD *)v260 = 0;
            v250 = v260 + 4;
          }
          *(_QWORD *)(a1 + 160) = v250;
          v376 = *((_QWORD *)this + 1);
          v377 = *((_QWORD *)this + 2);
          v378 = *(_QWORD *)this;
          v379 = 0;
          v380 = 0;
          if (v376 <= 0xFFFFFFFFFFFFFFF5 && v376 + 10 <= v377)
          {
            v323 = 0;
            while (1)
            {
              v384 = v376 + 1;
              *((_QWORD *)this + 1) = v376 + 1;
              v385 = *(_BYTE *)(v378 + v376);
              v323 |= (unint64_t)(v385 & 0x7F) << v379;
              if ((v385 & 0x80) == 0)
                goto LABEL_705;
              v379 += 7;
              v376 = v384;
              v64 = v380++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v377 <= v376)
            v377 = *((_QWORD *)this + 1);
          while (v377 != v376)
          {
            v382 = v376 + 1;
            v383 = *(_BYTE *)(v378 + v376);
            *((_QWORD *)this + 1) = v382;
            v323 |= (unint64_t)(v383 & 0x7F) << v379;
            if ((v383 & 0x80) == 0)
              goto LABEL_698;
            v379 += 7;
            v376 = v382;
            v64 = v380++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xBu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 184);
              do
              {
                if ((unint64_t)v51 >= *v420)
                {
                  v190 = (char *)*v418;
                  v191 = (v51 - (_BYTE *)*v418) >> 2;
                  v192 = v191 + 1;
                  if ((unint64_t)(v191 + 1) >> 62)
                    goto LABEL_722;
                  v193 = *v420 - (_QWORD)v190;
                  if (v193 >> 1 > v192)
                    v192 = v193 >> 1;
                  if ((unint64_t)v193 >= 0x7FFFFFFFFFFFFFFCLL)
                    v194 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v194 = v192;
                  if (v194)
                  {
                    v195 = (char *)sub_18F26FB8C((uint64_t)v420, v194);
                    v190 = *(char **)(a1 + 176);
                    v51 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    v195 = 0;
                  }
                  v196 = &v195[4 * v191];
                  *(_DWORD *)v196 = 0;
                  v197 = v196 + 4;
                  while (v51 != v190)
                  {
                    v198 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v196 - 1) = v198;
                    v196 -= 4;
                  }
                  *(_QWORD *)(a1 + 176) = v196;
                  *(_QWORD *)(a1 + 184) = v197;
                  *(_QWORD *)(a1 + 192) = &v195[4 * v194];
                  if (v190)
                    operator delete(v190);
                  v51 = v197;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 184) = v51;
                v200 = *((_QWORD *)this + 1);
                v199 = *((_QWORD *)this + 2);
                v201 = *(_QWORD *)this;
                if (v200 > 0xFFFFFFFFFFFFFFF5 || v200 + 10 > v199)
                {
                  v203 = 0;
                  v204 = 0;
                  v210 = 0;
                  if (v199 <= v200)
                    v205 = *((_QWORD *)this + 1);
                  else
                    v205 = *((_QWORD *)this + 2);
                  while (1)
                  {
                    if (v205 == v200)
                      goto LABEL_409;
                    v206 = v200++;
                    v207 = *(_BYTE *)(v201 + v206);
                    *((_QWORD *)this + 1) = v200;
                    v210 |= (unint64_t)(v207 & 0x7F) << v203;
                    if ((v207 & 0x80) == 0)
                      break;
                    v203 += 7;
                    v64 = v204++ > 8;
                    if (v64)
                    {
                      LODWORD(v210) = 0;
                      goto LABEL_360;
                    }
                  }
                  if (*((_BYTE *)this + 24))
                    LODWORD(v210) = 0;
LABEL_360:
                  v211 = v206 + 1;
                }
                else
                {
                  v208 = 0;
                  v209 = 0;
                  v210 = 0;
                  while (1)
                  {
                    v211 = v200 + 1;
                    *((_QWORD *)this + 1) = v200 + 1;
                    v212 = *(_BYTE *)(v201 + v200);
                    v210 |= (unint64_t)(v212 & 0x7F) << v208;
                    if ((v212 & 0x80) == 0)
                      break;
                    v208 += 7;
                    v200 = v211;
                    v64 = v209++ > 8;
                    if (v64)
                    {
                      LODWORD(v210) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v51 - 1) = v210;
              }
              while (v211 < v199 && !*((_BYTE *)this + 24));
            }
            goto LABEL_410;
          }
          v262 = *(char **)(a1 + 184);
          v261 = *(_QWORD *)(a1 + 192);
          if ((unint64_t)v262 >= v261)
          {
            v301 = (char *)*v418;
            v302 = (v262 - (_BYTE *)*v418) >> 2;
            v303 = v302 + 1;
            if ((unint64_t)(v302 + 1) >> 62)
LABEL_722:
              sub_18F26F8C0();
            v304 = v261 - (_QWORD)v301;
            if (v304 >> 1 > v303)
              v303 = v304 >> 1;
            if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFFCLL)
              v305 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v305 = v303;
            if (v305)
            {
              v306 = (char *)sub_18F26FB8C((uint64_t)v420, v305);
              v301 = *(char **)(a1 + 176);
              v262 = *(char **)(a1 + 184);
            }
            else
            {
              v306 = 0;
            }
            v386 = &v306[4 * v302];
            *(_DWORD *)v386 = 0;
            v250 = v386 + 4;
            while (v262 != v301)
            {
              v387 = *((_DWORD *)v262 - 1);
              v262 -= 4;
              *((_DWORD *)v386 - 1) = v387;
              v386 -= 4;
            }
            *(_QWORD *)(a1 + 176) = v386;
            *(_QWORD *)(a1 + 184) = v250;
            *(_QWORD *)(a1 + 192) = &v306[4 * v305];
            if (v301)
              operator delete(v301);
          }
          else
          {
            *(_DWORD *)v262 = 0;
            v250 = v262 + 4;
          }
          *(_QWORD *)(a1 + 184) = v250;
          v388 = *((_QWORD *)this + 1);
          v389 = *((_QWORD *)this + 2);
          v390 = *(_QWORD *)this;
          v391 = 0;
          v392 = 0;
          if (v388 <= 0xFFFFFFFFFFFFFFF5 && v388 + 10 <= v389)
          {
            v323 = 0;
            while (1)
            {
              v396 = v388 + 1;
              *((_QWORD *)this + 1) = v388 + 1;
              v397 = *(_BYTE *)(v390 + v388);
              v323 |= (unint64_t)(v397 & 0x7F) << v391;
              if ((v397 & 0x80) == 0)
                goto LABEL_705;
              v391 += 7;
              v388 = v396;
              v64 = v392++ > 8;
              if (v64)
                goto LABEL_704;
            }
          }
          v323 = 0;
          if (v389 <= v388)
            v389 = *((_QWORD *)this + 1);
          while (v389 != v388)
          {
            v394 = v388 + 1;
            v395 = *(_BYTE *)(v390 + v388);
            *((_QWORD *)this + 1) = v394;
            v323 |= (unint64_t)(v395 & 0x7F) << v391;
            if ((v395 & 0x80) == 0)
              goto LABEL_698;
            v391 += 7;
            v388 = v394;
            v64 = v392++ > 8;
            if (v64)
              goto LABEL_704;
          }
          goto LABEL_697;
        case 0xCu:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v51 = *(char **)(a1 + 112);
              do
              {
                if ((unint64_t)v51 >= *v421)
                {
                  v213 = (char *)*v419;
                  v214 = (v51 - (_BYTE *)*v419) >> 2;
                  v215 = v214 + 1;
                  if ((unint64_t)(v214 + 1) >> 62)
                    goto LABEL_723;
                  v216 = *v421 - (_QWORD)v213;
                  if (v216 >> 1 > v215)
                    v215 = v216 >> 1;
                  if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL)
                    v217 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v217 = v215;
                  if (v217)
                  {
                    v218 = (char *)sub_18F26FB8C((uint64_t)v421, v217);
                    v213 = *(char **)(a1 + 104);
                    v51 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    v218 = 0;
                  }
                  v219 = &v218[4 * v214];
                  *(_DWORD *)v219 = 0;
                  v220 = v219 + 4;
                  while (v51 != v213)
                  {
                    v221 = *((_DWORD *)v51 - 1);
                    v51 -= 4;
                    *((_DWORD *)v219 - 1) = v221;
                    v219 -= 4;
                  }
                  *(_QWORD *)(a1 + 104) = v219;
                  *(_QWORD *)(a1 + 112) = v220;
                  *(_QWORD *)(a1 + 120) = &v218[4 * v217];
                  if (v213)
                    operator delete(v213);
                  v51 = v220;
                }
                else
                {
                  *(_DWORD *)v51 = 0;
                  v51 += 4;
                }
                *(_QWORD *)(a1 + 112) = v51;
                v223 = *((_QWORD *)this + 1);
                v222 = *((_QWORD *)this + 2);
                v224 = *(_QWORD *)this;
                if (v223 <= 0xFFFFFFFFFFFFFFF5 && v223 + 10 <= v222)
                {
                  v231 = 0;
                  v232 = 0;
                  v233 = 0;
                  while (1)
                  {
                    v234 = v223 + 1;
                    *((_QWORD *)this + 1) = v223 + 1;
                    v235 = *(_BYTE *)(v224 + v223);
                    v233 |= (unint64_t)(v235 & 0x7F) << v231;
                    if ((v235 & 0x80) == 0)
                      goto LABEL_406;
                    v231 += 7;
                    v223 = v234;
                    v64 = v232++ > 8;
                    if (v64)
                    {
                      LODWORD(v233) = 0;
                      goto LABEL_406;
                    }
                  }
                }
                v226 = 0;
                v227 = 0;
                v233 = 0;
                if (v222 <= v223)
                  v228 = *((_QWORD *)this + 1);
                else
                  v228 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v228 == v223)
                  {
LABEL_409:
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v51 - 1) = 0;
                    goto LABEL_410;
                  }
                  v229 = v223++;
                  v230 = *(_BYTE *)(v224 + v229);
                  *((_QWORD *)this + 1) = v223;
                  v233 |= (unint64_t)(v230 & 0x7F) << v226;
                  if ((v230 & 0x80) == 0)
                    break;
                  v226 += 7;
                  v64 = v227++ > 8;
                  if (v64)
                  {
                    LODWORD(v233) = 0;
                    goto LABEL_405;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v233) = 0;
LABEL_405:
                v234 = v229 + 1;
LABEL_406:
                *((_DWORD *)v51 - 1) = v233;
              }
              while (v234 < v222 && !*((_BYTE *)this + 24));
            }
LABEL_410:
            PB::Reader::recallMark();
          }
          else
          {
            v264 = *(char **)(a1 + 112);
            v263 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v264 >= v263)
            {
              v307 = (char *)*v419;
              v308 = (v264 - (_BYTE *)*v419) >> 2;
              v309 = v308 + 1;
              if ((unint64_t)(v308 + 1) >> 62)
LABEL_723:
                sub_18F26F8C0();
              v310 = v263 - (_QWORD)v307;
              if (v310 >> 1 > v309)
                v309 = v310 >> 1;
              if ((unint64_t)v310 >= 0x7FFFFFFFFFFFFFFCLL)
                v311 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v311 = v309;
              if (v311)
              {
                v312 = (char *)sub_18F26FB8C((uint64_t)v421, v311);
                v307 = *(char **)(a1 + 104);
                v264 = *(char **)(a1 + 112);
              }
              else
              {
                v312 = 0;
              }
              v398 = &v312[4 * v308];
              *(_DWORD *)v398 = 0;
              v250 = v398 + 4;
              while (v264 != v307)
              {
                v399 = *((_DWORD *)v264 - 1);
                v264 -= 4;
                *((_DWORD *)v398 - 1) = v399;
                v398 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v398;
              *(_QWORD *)(a1 + 112) = v250;
              *(_QWORD *)(a1 + 120) = &v312[4 * v311];
              if (v307)
                operator delete(v307);
            }
            else
            {
              *(_DWORD *)v264 = 0;
              v250 = v264 + 4;
            }
            *(_QWORD *)(a1 + 112) = v250;
            v400 = *((_QWORD *)this + 1);
            v401 = *((_QWORD *)this + 2);
            v402 = *(_QWORD *)this;
            v403 = 0;
            v404 = 0;
            if (v400 > 0xFFFFFFFFFFFFFFF5 || v400 + 10 > v401)
            {
              v323 = 0;
              if (v401 <= v400)
                v401 = *((_QWORD *)this + 1);
              while (v401 != v400)
              {
                v406 = v400 + 1;
                v407 = *(_BYTE *)(v402 + v400);
                *((_QWORD *)this + 1) = v406;
                v323 |= (unint64_t)(v407 & 0x7F) << v403;
                if ((v407 & 0x80) == 0)
                {
LABEL_698:
                  if (*((_BYTE *)this + 24))
                    LODWORD(v323) = 0;
                  goto LABEL_705;
                }
                v403 += 7;
                v400 = v406;
                v64 = v404++ > 8;
                if (v64)
                {
LABEL_704:
                  LODWORD(v323) = 0;
                  goto LABEL_705;
                }
              }
LABEL_697:
              LODWORD(v323) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v323 = 0;
              while (1)
              {
                v408 = v400 + 1;
                *((_QWORD *)this + 1) = v400 + 1;
                v409 = *(_BYTE *)(v402 + v400);
                v323 |= (unint64_t)(v409 & 0x7F) << v403;
                if ((v409 & 0x80) == 0)
                  break;
                v403 += 7;
                v400 = v408;
                v64 = v404++ > 8;
                if (v64)
                  goto LABEL_704;
              }
            }
LABEL_705:
            *(v250 - 1) = v323;
          }
LABEL_706:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_706;
      }
    }
    v20 = 0;
    v21 = 0;
    v17 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v14 + v2);
      *((_QWORD *)this + 1) = v22;
      v17 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v17 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F27AAF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result;
  v4 = *(_BYTE *)(result + 224);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 208));
    v4 = *(_BYTE *)(v3 + 224);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_33:
      result = PB::Writer::writeVarInt(this);
      if ((*(_BYTE *)(v3 + 224) & 4) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 224) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 224);
  if ((v4 & 8) != 0)
    goto LABEL_33;
LABEL_4:
  if ((v4 & 4) != 0)
LABEL_5:
    result = PB::Writer::writeVarInt(this);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  while (v5 != v6)
  {
    v5 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_QWORD *)(v3 + 40);
  while (v7 != v8)
  {
    v7 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v9 = *(_QWORD *)(v3 + 56);
  v10 = *(_QWORD *)(v3 + 64);
  while (v9 != v10)
  {
    v9 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v11 = *(_QWORD *)(v3 + 80);
  v12 = *(_QWORD *)(v3 + 88);
  while (v11 != v12)
  {
    v11 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v13 = *(_QWORD *)(v3 + 128);
  v14 = *(_QWORD *)(v3 + 136);
  while (v13 != v14)
  {
    v13 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v15 = *(_QWORD *)(v3 + 152);
  v16 = *(_QWORD *)(v3 + 160);
  while (v15 != v16)
  {
    v15 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v17 = *(_QWORD *)(v3 + 176);
  v18 = *(_QWORD *)(v3 + 184);
  while (v17 != v18)
  {
    v17 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  v20 = *(_QWORD *)(v3 + 104);
  v19 = *(_QWORD *)(v3 + 112);
  while (v20 != v19)
  {
    v20 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_18F27AC88(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D220;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_18F27ACA0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27ACC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "base", *(float *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 56);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "broken");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "location");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "peak", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "sensor");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "sensorTime");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "sequenceNumber");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
LABEL_21:
    PB::TextFormatter::format(this, "temp", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 56) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_11;
  }
LABEL_20:
  PB::TextFormatter::format(this, "status");
  v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x200) != 0)
    goto LABEL_21;
LABEL_10:
  if ((v5 & 2) != 0)
LABEL_11:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27AE34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  unint64_t v67;
  char v68;
  char v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  unint64_t v79;
  char v80;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 56) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_WORD *)(a1 + 56) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_WORD *)(a1 + 56) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_43;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_33:
              v2 = *((_QWORD *)this + 1) + 4;
              goto LABEL_122;
            case 4u:
              *(_WORD *)(a1 + 56) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  v59 = v21++;
                  v60 = *(_BYTE *)(v22 + v59);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_126:
                    v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_126;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_127;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_153;
            case 5u:
              *(_WORD *)(a1 + 56) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
LABEL_122:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_153;
            case 6u:
              *(_WORD *)(a1 + 56) |= 0x100u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v61 = 0;
                v62 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  v63 = v27++;
                  v64 = *(_BYTE *)(v28 + v63);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0)
                    break;
                  v61 += 7;
                  v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_131:
                    v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_131;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_132;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 48) = v31;
              goto LABEL_153;
            case 7u:
              *(_WORD *)(a1 + 56) |= 0x80u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v65 = 0;
                v66 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  v67 = v33++;
                  v68 = *(_BYTE *)(v34 + v67);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0)
                    break;
                  v65 += 7;
                  v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_136:
                    v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_136;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_137;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 44) = v37;
              goto LABEL_153;
            case 8u:
              *(_WORD *)(a1 + 56) |= 0x40u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v69 = 0;
                v70 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  v71 = v39++;
                  v72 = *(_BYTE *)(v40 + v71);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0)
                    break;
                  v69 += 7;
                  v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_141:
                    v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_141;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v2 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_142;
                v41 += 7;
                v39 = v2;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_142:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_153;
            case 9u:
              *(_WORD *)(a1 + 56) |= 0x10u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v73 = 0;
                v74 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  v75 = v45++;
                  v76 = *(_BYTE *)(v46 + v75);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0)
                    break;
                  v73 += 7;
                  v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_146:
                    v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_146;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v2 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_147;
                v47 += 7;
                v45 = v2;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 32) = v49;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 56) |= 1u;
              v51 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v52 = *(_QWORD *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                v77 = 0;
                v78 = 0;
                v55 = 0;
                if (v2 <= v51)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v51)
                  {
                    v55 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  v79 = v51++;
                  v80 = *(_BYTE *)(v52 + v79);
                  *((_QWORD *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0)
                    break;
                  v77 += 7;
                  v14 = v78++ > 8;
                  if (v14)
                  {
                    v55 = 0;
LABEL_151:
                    v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v55 = 0;
                goto LABEL_151;
              }
              v53 = 0;
              v54 = 0;
              v55 = 0;
              do
              {
                v2 = v51 + 1;
                *((_QWORD *)this + 1) = v51 + 1;
                v56 = *(_BYTE *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0)
                  goto LABEL_152;
                v53 += 7;
                v51 = v2;
                v14 = v54++ > 8;
              }
              while (!v14);
              v55 = 0;
LABEL_152:
              *(_QWORD *)(a1 + 8) = v55;
LABEL_153:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_153;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F27B620(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 56);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24));
    v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 56) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F27B75C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2950128;
  *(_DWORD *)(a1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  return result;
}

void sub_18F27B788(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)a1 = &off_1E2950128;
  v4 = (void **)(a1 + 56);
  sub_18F26F770(&v4);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_18F27B7F4(uint64_t a1)
{
  sub_18F27B788(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27B818(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  float *v6;
  float *v7;
  float v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  float *v13;
  float *v14;
  float v15;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 104);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "conchaDropped");
    v5 = *(_BYTE *)(a1 + 104);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(a1 + 104) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "conchaRecovered");
  v5 = *(_BYTE *)(a1 + 104);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(this, "iedState");
  if ((*(_BYTE *)(a1 + 104) & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "location");
LABEL_6:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "mean", v8);
  }
  v9 = *(uint64_t **)(a1 + 56);
  v10 = *(uint64_t **)(a1 + 64);
  while (v9 != v10)
  {
    v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v11 + 32))(v11, this, "optical");
  }
  v12 = *(_BYTE *)(a1 + 104);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "tragusDropped");
    v12 = *(_BYTE *)(a1 + 104);
  }
  if ((v12 & 0x20) != 0)
    PB::TextFormatter::format(this, "tragusRecovered");
  v13 = *(float **)(a1 + 32);
  v14 = *(float **)(a1 + 40);
  while (v13 != v14)
  {
    v15 = *v13++;
    PB::TextFormatter::format(this, "variance", v15);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F27B99C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unsigned int v83;
  uint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  char *v112;
  _DWORD *v113;
  unint64_t v114;
  char *v115;
  char v116;
  unsigned int v117;
  unint64_t v118;
  char v119;
  char v120;
  unsigned int v121;
  unint64_t v122;
  char v123;
  char v124;
  unsigned int v125;
  unint64_t v126;
  char v127;
  char v128;
  unsigned int v129;
  unint64_t v130;
  char v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  char *v144;
  int v145;
  char *v146;
  int v147;
  unint64_t v148;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    v12 = (uint64_t **)(a1 + 56);
    while (1)
    {
      v13 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      while (1)
      {
        v17 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v18 = *(_BYTE *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0)
          break;
        v14 += 7;
        v2 = v17;
        v19 = v15++ > 8;
        if (v19)
          goto LABEL_20;
      }
LABEL_21:
      v25 = v16 & 7;
      if (v25 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 104) |= 8u;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          v28 = *(_QWORD *)this;
          if (v26 <= 0xFFFFFFFFFFFFFFF5 && v26 + 10 <= v27)
          {
            v29 = 0;
            v30 = 0;
            v31 = 0;
            do
            {
              v32 = v26 + 1;
              *((_QWORD *)this + 1) = v26 + 1;
              v33 = *(_BYTE *)(v28 + v26);
              v31 |= (unint64_t)(v33 & 0x7F) << v29;
              if ((v33 & 0x80) == 0)
                goto LABEL_190;
              v29 += 7;
              v26 = v32;
              v19 = v30++ > 8;
            }
            while (!v19);
LABEL_124:
            LODWORD(v31) = 0;
            goto LABEL_190;
          }
          v103 = 0;
          v104 = 0;
          v31 = 0;
          if (v27 <= v26)
            v27 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v105 = v26 + 1;
              v106 = *(_BYTE *)(v28 + v26);
              *((_QWORD *)this + 1) = v105;
              v31 |= (unint64_t)(v106 & 0x7F) << v103;
              if (v106 < 0)
              {
                v103 += 7;
                v26 = v105;
                v19 = v104++ > 8;
                if (v19)
                  goto LABEL_124;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v31) = 0;
            }
            break;
          }
LABEL_190:
          *(_DWORD *)(a1 + 92) = v31;
          goto LABEL_224;
        case 2u:
          *(_BYTE *)(a1 + 104) |= 4u;
          v34 = *((_QWORD *)this + 1);
          v35 = *((_QWORD *)this + 2);
          v36 = *(_QWORD *)this;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            v37 = 0;
            v38 = 0;
            v39 = 0;
            do
            {
              v40 = v34 + 1;
              *((_QWORD *)this + 1) = v34 + 1;
              v41 = *(_BYTE *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0)
                goto LABEL_193;
              v37 += 7;
              v34 = v40;
              v19 = v38++ > 8;
            }
            while (!v19);
LABEL_131:
            LODWORD(v39) = 0;
            goto LABEL_193;
          }
          v107 = 0;
          v108 = 0;
          v39 = 0;
          if (v35 <= v34)
            v35 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v109 = v34 + 1;
              v110 = *(_BYTE *)(v36 + v34);
              *((_QWORD *)this + 1) = v109;
              v39 |= (unint64_t)(v110 & 0x7F) << v107;
              if (v110 < 0)
              {
                v107 += 7;
                v34 = v109;
                v19 = v108++ > 8;
                if (v19)
                  goto LABEL_131;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v39) = 0;
            }
            break;
          }
LABEL_193:
          *(_DWORD *)(a1 + 88) = v39;
          goto LABEL_224;
        case 3u:
          sub_18F2366B8(v12);
          v42 = *(_QWORD *)(*(_QWORD *)(a1 + 64) - 8);
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v42 + 16))(v42, this) & 1) == 0)
          {
            return 0;
          }
          goto LABEL_165;
        case 4u:
          if (v25 != 2)
          {
            v112 = *(char **)(a1 + 16);
            v111 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v112 >= v111)
            {
              v132 = (char *)*v10;
              v133 = (v112 - (_BYTE *)*v10) >> 2;
              v134 = v133 + 1;
              if ((unint64_t)(v133 + 1) >> 62)
LABEL_234:
                sub_18F26F8C0();
              v135 = v111 - (_QWORD)v132;
              if (v135 >> 1 > v134)
                v134 = v135 >> 1;
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                v136 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v136 = v134;
              if (v136)
              {
                v137 = (char *)sub_18F26FB8C(v11, v136);
                v132 = *(char **)(a1 + 8);
                v112 = *(char **)(a1 + 16);
              }
              else
              {
                v137 = 0;
              }
              v144 = &v137[4 * v133];
              *(_DWORD *)v144 = 0;
              v113 = v144 + 4;
              while (v112 != v132)
              {
                v145 = *((_DWORD *)v112 - 1);
                v112 -= 4;
                *((_DWORD *)v144 - 1) = v145;
                v144 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v144;
              *(_QWORD *)(a1 + 16) = v113;
              *(_QWORD *)(a1 + 24) = &v137[4 * v136];
              if (v132)
                operator delete(v132);
            }
            else
            {
              *(_DWORD *)v112 = 0;
              v113 = v112 + 4;
            }
            *(_QWORD *)(a1 + 16) = v113;
            goto LABEL_220;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v43 = *((_QWORD *)this + 1);
          v44 = *((_QWORD *)this + 2);
          while (v43 < v44 && !*((_BYTE *)this + 24))
          {
            v46 = *(char **)(a1 + 16);
            v45 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              v48 = (char *)*v10;
              v49 = (v46 - (_BYTE *)*v10) >> 2;
              v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62)
                goto LABEL_234;
              v51 = v45 - (_QWORD)v48;
              if (v51 >> 1 > v50)
                v50 = v51 >> 1;
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
                v52 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v52 = v50;
              if (v52)
              {
                v53 = (char *)sub_18F26FB8C(v11, v52);
                v48 = *(char **)(a1 + 8);
                v46 = *(char **)(a1 + 16);
              }
              else
              {
                v53 = 0;
              }
              v54 = &v53[4 * v49];
              *(_DWORD *)v54 = 0;
              v47 = v54 + 4;
              while (v46 != v48)
              {
                v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v54;
              *(_QWORD *)(a1 + 16) = v47;
              *(_QWORD *)(a1 + 24) = &v53[4 * v52];
              if (v48)
                operator delete(v48);
            }
            else
            {
              *(_DWORD *)v46 = 0;
              v47 = v46 + 4;
            }
            *(_QWORD *)(a1 + 16) = v47;
            v56 = *((_QWORD *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
              goto LABEL_164;
            *(v47 - 1) = *(_DWORD *)(*(_QWORD *)this + v56);
            v44 = *((_QWORD *)this + 2);
            v43 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v43;
          }
          goto LABEL_165;
        case 5u:
          if (v25 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v57 = *((_QWORD *)this + 1);
            v58 = *((_QWORD *)this + 2);
            while (v57 < v58 && !*((_BYTE *)this + 24))
            {
              v60 = *(char **)(a1 + 40);
              v59 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v60 >= v59)
              {
                v62 = (char *)*v8;
                v63 = (v60 - (_BYTE *)*v8) >> 2;
                v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62)
                  goto LABEL_235;
                v65 = v59 - (_QWORD)v62;
                if (v65 >> 1 > v64)
                  v64 = v65 >> 1;
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                  v66 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v66 = v64;
                if (v66)
                {
                  v67 = (char *)sub_18F26FB8C(v9, v66);
                  v62 = *(char **)(a1 + 32);
                  v60 = *(char **)(a1 + 40);
                }
                else
                {
                  v67 = 0;
                }
                v68 = &v67[4 * v63];
                *(_DWORD *)v68 = 0;
                v61 = v68 + 4;
                while (v60 != v62)
                {
                  v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v68;
                *(_QWORD *)(a1 + 40) = v61;
                *(_QWORD *)(a1 + 48) = &v67[4 * v66];
                if (v62)
                  operator delete(v62);
              }
              else
              {
                *(_DWORD *)v60 = 0;
                v61 = v60 + 4;
              }
              *(_QWORD *)(a1 + 40) = v61;
              v70 = *((_QWORD *)this + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((_QWORD *)this + 2))
              {
LABEL_164:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(_QWORD *)this + v70);
              v58 = *((_QWORD *)this + 2);
              v57 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v57;
            }
LABEL_165:
            PB::Reader::recallMark();
          }
          else
          {
            v115 = *(char **)(a1 + 40);
            v114 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v115 >= v114)
            {
              v138 = (char *)*v8;
              v139 = (v115 - (_BYTE *)*v8) >> 2;
              v140 = v139 + 1;
              if ((unint64_t)(v139 + 1) >> 62)
LABEL_235:
                sub_18F26F8C0();
              v141 = v114 - (_QWORD)v138;
              if (v141 >> 1 > v140)
                v140 = v141 >> 1;
              if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
                v142 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v142 = v140;
              if (v142)
              {
                v143 = (char *)sub_18F26FB8C(v9, v142);
                v138 = *(char **)(a1 + 32);
                v115 = *(char **)(a1 + 40);
              }
              else
              {
                v143 = 0;
              }
              v146 = &v143[4 * v139];
              *(_DWORD *)v146 = 0;
              v113 = v146 + 4;
              while (v115 != v138)
              {
                v147 = *((_DWORD *)v115 - 1);
                v115 -= 4;
                *((_DWORD *)v146 - 1) = v147;
                v146 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v146;
              *(_QWORD *)(a1 + 40) = v113;
              *(_QWORD *)(a1 + 48) = &v143[4 * v142];
              if (v138)
                operator delete(v138);
            }
            else
            {
              *(_DWORD *)v115 = 0;
              v113 = v115 + 4;
            }
            *(_QWORD *)(a1 + 40) = v113;
LABEL_220:
            v148 = *((_QWORD *)this + 1);
            if (v148 <= 0xFFFFFFFFFFFFFFFBLL && v148 + 4 <= *((_QWORD *)this + 2))
            {
              *(v113 - 1) = *(_DWORD *)(*(_QWORD *)this + v148);
              *((_QWORD *)this + 1) += 4;
            }
            else
            {
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_224:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 104) |= 1u;
          v71 = *((_QWORD *)this + 1);
          v72 = *((_QWORD *)this + 2);
          v73 = *(_QWORD *)this;
          if (v71 <= 0xFFFFFFFFFFFFFFF5 && v71 + 10 <= v72)
          {
            v74 = 0;
            v75 = 0;
            v76 = 0;
            do
            {
              v77 = v71 + 1;
              *((_QWORD *)this + 1) = v71 + 1;
              v78 = *(_BYTE *)(v73 + v71);
              v76 |= (unint64_t)(v78 & 0x7F) << v74;
              if ((v78 & 0x80) == 0)
                goto LABEL_196;
              v74 += 7;
              v71 = v77;
              v19 = v75++ > 8;
            }
            while (!v19);
LABEL_142:
            LODWORD(v76) = 0;
            goto LABEL_196;
          }
          v116 = 0;
          v117 = 0;
          v76 = 0;
          if (v72 <= v71)
            v72 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v72 == v71)
            {
              LODWORD(v76) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v118 = v71 + 1;
              v119 = *(_BYTE *)(v73 + v71);
              *((_QWORD *)this + 1) = v118;
              v76 |= (unint64_t)(v119 & 0x7F) << v116;
              if (v119 < 0)
              {
                v116 += 7;
                v71 = v118;
                v19 = v117++ > 8;
                if (v19)
                  goto LABEL_142;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v76) = 0;
            }
            break;
          }
LABEL_196:
          *(_DWORD *)(a1 + 80) = v76;
          goto LABEL_224;
        case 7u:
          *(_BYTE *)(a1 + 104) |= 0x10u;
          v79 = *((_QWORD *)this + 1);
          v80 = *((_QWORD *)this + 2);
          v81 = *(_QWORD *)this;
          if (v79 <= 0xFFFFFFFFFFFFFFF5 && v79 + 10 <= v80)
          {
            v82 = 0;
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = v79 + 1;
              *((_QWORD *)this + 1) = v79 + 1;
              v86 = *(_BYTE *)(v81 + v79);
              v84 |= (unint64_t)(v86 & 0x7F) << v82;
              if ((v86 & 0x80) == 0)
                goto LABEL_199;
              v82 += 7;
              v79 = v85;
              v19 = v83++ > 8;
            }
            while (!v19);
LABEL_149:
            LODWORD(v84) = 0;
            goto LABEL_199;
          }
          v120 = 0;
          v121 = 0;
          v84 = 0;
          if (v80 <= v79)
            v80 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v80 == v79)
            {
              LODWORD(v84) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v122 = v79 + 1;
              v123 = *(_BYTE *)(v81 + v79);
              *((_QWORD *)this + 1) = v122;
              v84 |= (unint64_t)(v123 & 0x7F) << v120;
              if (v123 < 0)
              {
                v120 += 7;
                v79 = v122;
                v19 = v121++ > 8;
                if (v19)
                  goto LABEL_149;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v84) = 0;
            }
            break;
          }
LABEL_199:
          *(_DWORD *)(a1 + 96) = v84;
          goto LABEL_224;
        case 8u:
          *(_BYTE *)(a1 + 104) |= 2u;
          v87 = *((_QWORD *)this + 1);
          v88 = *((_QWORD *)this + 2);
          v89 = *(_QWORD *)this;
          if (v87 <= 0xFFFFFFFFFFFFFFF5 && v87 + 10 <= v88)
          {
            v90 = 0;
            v91 = 0;
            v92 = 0;
            do
            {
              v93 = v87 + 1;
              *((_QWORD *)this + 1) = v87 + 1;
              v94 = *(_BYTE *)(v89 + v87);
              v92 |= (unint64_t)(v94 & 0x7F) << v90;
              if ((v94 & 0x80) == 0)
                goto LABEL_202;
              v90 += 7;
              v87 = v93;
              v19 = v91++ > 8;
            }
            while (!v19);
LABEL_156:
            LODWORD(v92) = 0;
            goto LABEL_202;
          }
          v124 = 0;
          v125 = 0;
          v92 = 0;
          if (v88 <= v87)
            v88 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v88 == v87)
            {
              LODWORD(v92) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v126 = v87 + 1;
              v127 = *(_BYTE *)(v89 + v87);
              *((_QWORD *)this + 1) = v126;
              v92 |= (unint64_t)(v127 & 0x7F) << v124;
              if (v127 < 0)
              {
                v124 += 7;
                v87 = v126;
                v19 = v125++ > 8;
                if (v19)
                  goto LABEL_156;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v92) = 0;
            }
            break;
          }
LABEL_202:
          *(_DWORD *)(a1 + 84) = v92;
          goto LABEL_224;
        case 9u:
          *(_BYTE *)(a1 + 104) |= 0x20u;
          v95 = *((_QWORD *)this + 1);
          v96 = *((_QWORD *)this + 2);
          v97 = *(_QWORD *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)this + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_205;
              v98 += 7;
              v95 = v101;
              v19 = v99++ > 8;
            }
            while (!v19);
LABEL_163:
            LODWORD(v100) = 0;
            goto LABEL_205;
          }
          v128 = 0;
          v129 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v130 = v95 + 1;
              v131 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)this + 1) = v130;
              v100 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                v95 = v130;
                v19 = v129++ > 8;
                if (v19)
                  goto LABEL_163;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_205:
          *(_DWORD *)(a1 + 100) = v100;
          goto LABEL_224;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_224;
      }
    }
    v20 = 0;
    v21 = 0;
    v16 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v22 = v2 + 1;
      v23 = *(_BYTE *)(v13 + v2);
      *((_QWORD *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0)
        goto LABEL_21;
      v20 += 7;
      v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        v16 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F27C4A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  char v14;

  v3 = result;
  v4 = *(_BYTE *)(result + 104);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 104);
  }
  if ((v4 & 4) != 0)
    result = PB::Writer::writeVarInt(this);
  v5 = *(const PB::Base ***)(v3 + 56);
  v6 = *(const PB::Base ***)(v3 + 64);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::writeSubmessage(this, v7);
  }
  v8 = *(float **)(v3 + 8);
  v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    v10 = *v8++;
    result = PB::Writer::write(this, v10);
  }
  v11 = *(float **)(v3 + 32);
  v12 = *(float **)(v3 + 40);
  while (v11 != v12)
  {
    v13 = *v11++;
    result = PB::Writer::write(this, v13);
  }
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v14 = *(_BYTE *)(v3 + 104);
    if ((v14 & 0x10) == 0)
    {
LABEL_16:
      if ((v14 & 2) == 0)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else if ((*(_BYTE *)(v3 + 104) & 0x10) == 0)
  {
    goto LABEL_16;
  }
  result = PB::Writer::writeVarInt(this);
  v14 = *(_BYTE *)(v3 + 104);
  if ((v14 & 2) == 0)
  {
LABEL_17:
    if ((v14 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_21:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 104) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F27C5D0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F670;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F27C5E8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27C60C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "conchaTemp");
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "location");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "prescalar");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "pwrState");
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
LABEL_17:
    PB::TextFormatter::format(this, "valid");
    if ((*(_BYTE *)(a1 + 44) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_9;
  }
LABEL_16:
  PB::TextFormatter::format(this, "tragusTemp");
  v5 = *(_BYTE *)(a1 + 44);
  if (v5 < 0)
    goto LABEL_17;
LABEL_8:
  if ((v5 & 0x40) != 0)
LABEL_9:
    PB::TextFormatter::format(this, "wdtPeriod");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27C73C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  unint64_t v81;
  char v82;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_146;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_120;
                  }
                  v61 = v21++;
                  v62 = *(_BYTE *)(v22 + v61);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_119:
                    v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_119;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_120;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 20) = v25;
              goto LABEL_146;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 40) = v28;
              goto LABEL_146;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_125;
                  }
                  v65 = v29++;
                  v66 = *(_BYTE *)(v30 + v65);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_124:
                    v2 = v65 + 1;
                    goto LABEL_125;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_124;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_125;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_125:
              *(_DWORD *)(a1 + 28) = v33;
              goto LABEL_146;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  v69 = v35++;
                  v70 = *(_BYTE *)(v36 + v69);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_129:
                    v2 = v69 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_129;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_130;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_130:
              *(_DWORD *)(a1 + 24) = v39;
              goto LABEL_146;
            case 6u:
              *(_BYTE *)(a1 + 44) |= 0x40u;
              v41 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v42 = *(_QWORD *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                v71 = 0;
                v72 = 0;
                v45 = 0;
                if (v2 <= v41)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  v73 = v41++;
                  v74 = *(_BYTE *)(v42 + v73);
                  *((_QWORD *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0)
                    break;
                  v71 += 7;
                  v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_134:
                    v2 = v73 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v45) = 0;
                goto LABEL_134;
              }
              v43 = 0;
              v44 = 0;
              v45 = 0;
              do
              {
                v2 = v41 + 1;
                *((_QWORD *)this + 1) = v41 + 1;
                v46 = *(_BYTE *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0)
                  goto LABEL_135;
                v43 += 7;
                v41 = v2;
                v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_135:
              *(_DWORD *)(a1 + 36) = v45;
              goto LABEL_146;
            case 7u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v47 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v48 = *(_QWORD *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                v75 = 0;
                v76 = 0;
                v51 = 0;
                if (v2 <= v47)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  v77 = v47++;
                  v78 = *(_BYTE *)(v48 + v77);
                  *((_QWORD *)this + 1) = v47;
                  v51 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0)
                    break;
                  v75 += 7;
                  v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_139:
                    v2 = v77 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v51) = 0;
                goto LABEL_139;
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              do
              {
                v2 = v47 + 1;
                *((_QWORD *)this + 1) = v47 + 1;
                v52 = *(_BYTE *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0)
                  goto LABEL_140;
                v49 += 7;
                v47 = v2;
                v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 16) = v51;
              goto LABEL_146;
            case 8u:
              *(_BYTE *)(a1 + 44) |= 0x20u;
              v53 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v54 = *(_QWORD *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                v79 = 0;
                v80 = 0;
                v57 = 0;
                if (v2 <= v53)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  v81 = v53++;
                  v82 = *(_BYTE *)(v54 + v81);
                  *((_QWORD *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0)
                    break;
                  v79 += 7;
                  v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_144:
                    v2 = v81 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v57) = 0;
                goto LABEL_144;
              }
              v55 = 0;
              v56 = 0;
              v57 = 0;
              do
              {
                v2 = v53 + 1;
                *((_QWORD *)this + 1) = v53 + 1;
                v58 = *(_BYTE *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0)
                  goto LABEL_145;
                v55 += 7;
                v53 = v2;
                v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 32) = v57;
LABEL_146:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_146;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F27CEBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0)
      goto LABEL_8;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 44) & 0x20) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F27CFC0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2950320;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  return result;
}

void sub_18F27CFE0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E2950320;
  v4 = *(_QWORD *)(a1 + 40);
  v2 = (_QWORD *)(a1 + 40);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  sub_18F26F834((void ***)(a1 + 32), 0);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v5)
    sub_18F26F7EC(a1 + 24, v5);
  sub_18F26F834((void ***)(a1 + 16), 0);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_18F27D064(uint64_t a1)
{
  sub_18F27CFE0(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27D088(_QWORD *a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = a1[1];
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "config");
  if (a1[2])
    PB::TextFormatter::format();
  if (a1[3])
    PB::TextFormatter::format();
  if (a1[4])
    PB::TextFormatter::format();
  if (a1[5])
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27D138(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t *v9;
  void ***v10;
  void ***v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void **v31;
  _QWORD *v32;
  uint64_t v33;
  void **v34;
  void **v35[2];

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 40);
    v9 = (uint64_t *)(a1 + 24);
    v10 = (void ***)(a1 + 32);
    v11 = (void ***)(a1 + 16);
    while (2)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v19 = 0;
        v20 = 0;
        v15 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v21 = v2 + 1;
          v22 = *(_BYTE *)(v12 + v2);
          *((_QWORD *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0)
            goto LABEL_21;
          v19 += 7;
          v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            v15 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v17 = *(_BYTE *)(v12 + v2);
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0)
            break;
          v13 += 7;
          v2 = v16;
          if (v14++ > 8)
            goto LABEL_20;
        }
LABEL_21:
        if ((v15 & 7) != 4)
        {
          switch((v15 >> 3))
          {
            case 1u:
              v24 = operator new();
              *(_QWORD *)v24 = &off_1E294D9C8;
              *(_QWORD *)(v24 + 8) = 0;
              *(_QWORD *)(v24 + 16) = 0;
              *(_QWORD *)(v24 + 24) = 0;
              *(_DWORD *)(v24 + 32) = 0;
              v25 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v24;
              if (v25)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                v24 = *(_QWORD *)(a1 + 8);
              }
              if (PB::Reader::placeMark()
                && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v24 + 16))(v24, this) & 1) != 0)
              {
                PB::Reader::recallMark();
                goto LABEL_41;
              }
              return 0;
            case 2u:
              v27 = operator new();
              *(_QWORD *)v27 = 0;
              *(_QWORD *)(v27 + 8) = 0;
              v35[0] = 0;
              sub_18F26F834(v11, (void **)v27);
              sub_18F26F834(v35, 0);
              goto LABEL_32;
            case 3u:
              v28 = operator new();
              *(_QWORD *)v28 = 0;
              *(_QWORD *)(v28 + 8) = 0;
              v35[0] = 0;
              sub_18F26F834(v10, (void **)v28);
              sub_18F26F834(v35, 0);
LABEL_32:
              PB::Reader::read();
              goto LABEL_41;
            case 4u:
              v29 = (_QWORD *)operator new();
              v29[1] = 0;
              v29[2] = 0;
              *v29 = 0;
              v35[0] = 0;
              v30 = *v9;
              *v9 = (uint64_t)v29;
              if (v30)
              {
                sub_18F26F7EC((uint64_t)v9, v30);
                v31 = v35[0];
                v35[0] = 0;
                if (v31)
                  sub_18F26F7EC((uint64_t)v35, (uint64_t)v31);
              }
              goto LABEL_40;
            case 5u:
              v32 = (_QWORD *)operator new();
              v32[1] = 0;
              v32[2] = 0;
              *v32 = 0;
              v35[0] = 0;
              v33 = *v8;
              *v8 = (uint64_t)v32;
              if (v33)
              {
                sub_18F26F7EC((uint64_t)v8, v33);
                v34 = v35[0];
                v35[0] = 0;
                if (v34)
                  sub_18F26F7EC((uint64_t)v35, (uint64_t)v34);
              }
LABEL_40:
              PB::Reader::read();
              goto LABEL_41;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
LABEL_41:
              v2 = *((_QWORD *)this + 1);
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F27D48C(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  const PB::Base *v4;

  v3 = (_QWORD *)result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if (v3[2])
    result = PB::Writer::write();
  if (v3[4])
    result = PB::Writer::write();
  if (v3[3])
    result = PB::Writer::write();
  if (v3[5])
    return PB::Writer::write();
  return result;
}

uint64_t sub_18F27D518(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944D30;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F27D530(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27D554(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asleep");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageConfidence");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "initialized");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "sensorTime");
    if ((*(_BYTE *)(a1 + 32) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "rawConfidence", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 8) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "sequenceNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27D644(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  int v41;
  BOOL v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_82;
                  }
                  v45 = v20++;
                  v46 = *(_BYTE *)(v21 + v45);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_81;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_81:
                v2 = v45 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_82;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_82:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_93;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 28) = v28;
              goto LABEL_93;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v47 = 0;
                v48 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_87;
                  }
                  v49 = v29++;
                  v50 = *(_BYTE *)(v30 + v49);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0)
                    break;
                  v47 += 7;
                  v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_86:
                    v2 = v49 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_86;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_87;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_93;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_93;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_92;
                  }
                  v53 = v35++;
                  v54 = *(_BYTE *)(v36 + v53);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_91:
                    v2 = v53 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_91;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_92;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 24) = v39;
LABEL_93:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 6u:
              *(_BYTE *)(a1 + 32) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v42 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v41 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v42 = v41 != 0;
              }
              *(_BYTE *)(a1 + 29) = v42;
              goto LABEL_93;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_93;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F27DB44(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_12:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 0x20) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F27DC10(uint64_t result)
{
  *(_QWORD *)result = &off_1E29449E8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F27DC28(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27DC4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "activity");
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "sensorTime");
      if ((*(_BYTE *)(a1 + 28) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidenceLevel");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "sequenceNumber");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27DCFC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  unint64_t v59;
  char v60;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  v47 = v20++;
                  v48 = *(_BYTE *)(v21 + v47);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_87:
                v3 = v47 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_88;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_88:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  v51 = v27++;
                  v52 = *(_BYTE *)(v28 + v51);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    v3 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_92;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_93;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 16) = v31;
              goto LABEL_104;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v53 = 0;
                v54 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v55 = v33++;
                  v56 = *(_BYTE *)(v34 + v55);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0)
                    break;
                  v53 += 7;
                  v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    v3 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_97;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_98;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v57 = 0;
                v58 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v59 = v39++;
                  v60 = *(_BYTE *)(v40 + v59);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0)
                    break;
                  v57 += 7;
                  v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    v3 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_102;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_103;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 24) = v43;
LABEL_104:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_104;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F27E210(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_8:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 28) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F27E2A4(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950748;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_18F27E2BC(PB::Base *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E2950748;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  PB::Base::~Base(this);
}

void sub_18F27E31C(PB::Base *a1)
{
  sub_18F27E2BC(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27E340(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 60) & 0x20) != 0)
    PB::TextFormatter::format(this, "detectedSteps");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "firstStepFeatures");
  v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 8) != 0)
  {
    PB::TextFormatter::format(this, "fsmEndState");
    v6 = *(_BYTE *)(a1 + 60);
    if ((v6 & 0x10) == 0)
    {
LABEL_7:
      if ((v6 & 1) == 0)
        goto LABEL_8;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(a1 + 60) & 0x10) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "fsmStartState");
  v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 1) == 0)
  {
LABEL_8:
    if ((v6 & 2) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "impulseEndTime", *(double *)(a1 + 16));
  v6 = *(_BYTE *)(a1 + 60);
  if ((v6 & 2) == 0)
  {
LABEL_9:
    if ((v6 & 4) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_17:
  PB::TextFormatter::format(this, "impulseStartTime", *(double *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
LABEL_10:
    PB::TextFormatter::format(this, "imuTimestamp", *(double *)(a1 + 32));
LABEL_11:
  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "stepLikelihoodFeatures");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F27E46C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  while (2)
  {
    v8 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v15 = 0;
      v16 = 0;
      v11 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v17 = v2 + 1;
        v18 = *(_BYTE *)(v8 + v2);
        *((_QWORD *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0)
          goto LABEL_20;
        v15 += 7;
        v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          v11 = 0;
          goto LABEL_20;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v9 = 0;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v13 = *(_BYTE *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0)
        break;
      v9 += 7;
      v2 = v12;
      v14 = v10++ > 8;
      if (v14)
        goto LABEL_19;
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v11 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 60) |= 4u;
        v20 = *((_QWORD *)this + 1);
        if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((_QWORD *)this + 2))
          goto LABEL_46;
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v20);
        goto LABEL_73;
      case 2u:
        *(_BYTE *)(a1 + 60) |= 0x10u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          do
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              goto LABEL_77;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
          }
          while (!v14);
LABEL_62:
          LODWORD(v27) = 0;
          goto LABEL_77;
        }
        v47 = 0;
        v48 = 0;
        v27 = 0;
        if (v23 <= v22)
          v23 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v23 == v22)
          {
            LODWORD(v27) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v49 = v22 + 1;
            v50 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v49;
            v27 |= (unint64_t)(v50 & 0x7F) << v47;
            if (v50 < 0)
            {
              v47 += 7;
              v22 = v49;
              v14 = v48++ > 8;
              if (v14)
                goto LABEL_62;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v27) = 0;
          }
          break;
        }
LABEL_77:
        *(_DWORD *)(a1 + 52) = v27;
        goto LABEL_82;
      case 3u:
        *(_BYTE *)(a1 + 60) |= 8u;
        v30 = *((_QWORD *)this + 1);
        v31 = *((_QWORD *)this + 2);
        v32 = *(_QWORD *)this;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)this + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_81;
            v33 += 7;
            v30 = v36;
            v14 = v34++ > 8;
          }
          while (!v14);
LABEL_69:
          LODWORD(v35) = 0;
          goto LABEL_81;
        }
        v51 = 0;
        v52 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v53 = v30 + 1;
            v54 = *(_BYTE *)(v32 + v30);
            *((_QWORD *)this + 1) = v53;
            v35 |= (unint64_t)(v54 & 0x7F) << v51;
            if (v54 < 0)
            {
              v51 += 7;
              v30 = v53;
              v14 = v52++ > 8;
              if (v14)
                goto LABEL_69;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v35) = 0;
          }
          break;
        }
LABEL_81:
        *(_DWORD *)(a1 + 48) = v35;
        goto LABEL_82;
      case 4u:
        *(_BYTE *)(a1 + 60) |= 2u;
        v38 = *((_QWORD *)this + 1);
        if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
          goto LABEL_46;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v38);
        goto LABEL_73;
      case 5u:
        *(_BYTE *)(a1 + 60) |= 1u;
        v39 = *((_QWORD *)this + 1);
        if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v39);
LABEL_73:
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
LABEL_46:
          *((_BYTE *)this + 24) = 1;
        }
        goto LABEL_82;
      case 6u:
        *(_BYTE *)(a1 + 60) |= 0x20u;
        v40 = *((_QWORD *)this + 1);
        if (v40 >= *((_QWORD *)this + 2))
        {
          v43 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v41 = v40 + 1;
          v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
          *((_QWORD *)this + 1) = v41;
          v43 = v42 != 0;
        }
        *(_BYTE *)(a1 + 56) = v43;
        goto LABEL_82;
      case 7u:
        v44 = operator new();
        sub_18F2D88A0(v44);
        v45 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v44;
        if (v45)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
          v44 = *(_QWORD *)(a1 + 40);
        }
        goto LABEL_53;
      case 8u:
        v44 = operator new();
        sub_18F223FAC(v44);
        v46 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v44;
        if (v46)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
          v44 = *(_QWORD *)(a1 + 8);
        }
LABEL_53:
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v44 + 16))(v44, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_82:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_82;
    }
  }
}

uint64_t sub_18F27E964(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base *v5;
  const PB::Base *v6;

  v3 = result;
  v4 = *(_BYTE *)(result + 60);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((*(_BYTE *)(result + 60) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_16:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 60) & 0x20) != 0)
LABEL_7:
    result = PB::Writer::write(this);
LABEL_8:
  v5 = *(const PB::Base **)(v3 + 40);
  if (v5)
    result = PB::Writer::writeSubmessage(this, v5);
  v6 = *(const PB::Base **)(v3 + 8);
  if (v6)
    return PB::Writer::writeSubmessage(this, v6);
  return result;
}

uint64_t sub_18F27EA5C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D258;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_18F27EA74(PB::Base *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E294D258;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  PB::Base::~Base(this);
}

void sub_18F27EAB4(PB::Base *a1)
{
  sub_18F27EA74(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27EAD8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 52);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "hostState");
    v5 = *(_BYTE *)(a1 + 52);
  }
  if ((v5 & 4) != 0)
    PB::TextFormatter::format(this, "location");
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  while (v6 != v7)
  {
    v6 += 4;
    PB::TextFormatter::format(this, "s7q8");
  }
  v8 = *(_BYTE *)(a1 + 52);
  if ((v8 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sensorState");
    v8 = *(_BYTE *)(a1 + 52);
  }
  if ((v8 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F27EBB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  unint64_t v72;
  char v73;
  char v74;
  unsigned int v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  unint64_t v80;
  char v81;
  unint64_t v82;
  char *v83;
  _DWORD *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unsigned int v97;
  unint64_t v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  char v103;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = (_QWORD *)(a1 + 24);
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v59 = v12++ > 8;
        if (v59)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 52) |= 4u;
          v21 = *((_QWORD *)this + 1);
          v22 = *((_QWORD *)this + 2);
          v23 = *(_QWORD *)this;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              v27 = v21 + 1;
              *((_QWORD *)this + 1) = v21 + 1;
              v28 = *(_BYTE *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0)
                goto LABEL_133;
              v24 += 7;
              v21 = v27;
              v59 = v25++ > 8;
            }
            while (!v59);
LABEL_100:
            LODWORD(v26) = 0;
            goto LABEL_133;
          }
          v70 = 0;
          v71 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v72 = v21 + 1;
              v73 = *(_BYTE *)(v23 + v21);
              *((_QWORD *)this + 1) = v72;
              v26 |= (unint64_t)(v73 & 0x7F) << v70;
              if (v73 < 0)
              {
                v70 += 7;
                v21 = v72;
                v59 = v71++ > 8;
                if (v59)
                  goto LABEL_100;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v26) = 0;
            }
            break;
          }
LABEL_133:
          *(_DWORD *)(a1 + 44) = v26;
          goto LABEL_166;
        case 2u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v29 = *((_QWORD *)this + 1);
          if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v29);
            *((_QWORD *)this + 1) += 8;
          }
          else
          {
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_166;
        case 3u:
          *(_BYTE *)(a1 + 52) |= 8u;
          v30 = *((_QWORD *)this + 1);
          v31 = *((_QWORD *)this + 2);
          v32 = *(_QWORD *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            v33 = 0;
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = v30 + 1;
              *((_QWORD *)this + 1) = v30 + 1;
              v37 = *(_BYTE *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0)
                goto LABEL_136;
              v33 += 7;
              v30 = v36;
              v59 = v34++ > 8;
            }
            while (!v59);
LABEL_107:
            LODWORD(v35) = 0;
            goto LABEL_136;
          }
          v74 = 0;
          v75 = 0;
          v35 = 0;
          if (v31 <= v30)
            v31 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v31 == v30)
            {
              LODWORD(v35) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v76 = v30 + 1;
              v77 = *(_BYTE *)(v32 + v30);
              *((_QWORD *)this + 1) = v76;
              v35 |= (unint64_t)(v77 & 0x7F) << v74;
              if (v77 < 0)
              {
                v74 += 7;
                v30 = v76;
                v59 = v75++ > 8;
                if (v59)
                  goto LABEL_107;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v35) = 0;
            }
            break;
          }
LABEL_136:
          *(_DWORD *)(a1 + 48) = v35;
          goto LABEL_166;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v38 = *((_QWORD *)this + 1);
          v39 = *((_QWORD *)this + 2);
          v40 = *(_QWORD *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            v41 = 0;
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v38 + 1;
              *((_QWORD *)this + 1) = v38 + 1;
              v45 = *(_BYTE *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0)
                goto LABEL_139;
              v41 += 7;
              v38 = v44;
              v59 = v42++ > 8;
            }
            while (!v59);
LABEL_114:
            LODWORD(v43) = 0;
            goto LABEL_139;
          }
          v78 = 0;
          v79 = 0;
          v43 = 0;
          if (v39 <= v38)
            v39 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v39 == v38)
            {
              LODWORD(v43) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v80 = v38 + 1;
              v81 = *(_BYTE *)(v40 + v38);
              *((_QWORD *)this + 1) = v80;
              v43 |= (unint64_t)(v81 & 0x7F) << v78;
              if (v81 < 0)
              {
                v78 += 7;
                v38 = v80;
                v59 = v79++ > 8;
                if (v59)
                  goto LABEL_114;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v43) = 0;
            }
            break;
          }
LABEL_139:
          *(_DWORD *)(a1 + 40) = v43;
          goto LABEL_166;
        case 5u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            if (*((_QWORD *)this + 1) < *((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
            {
              v46 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v46 >= *v9)
                {
                  v47 = (char *)*v8;
                  v48 = (v46 - (_BYTE *)*v8) >> 2;
                  v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62)
                    goto LABEL_176;
                  v50 = *v9 - (_QWORD)v47;
                  if (v50 >> 1 > v49)
                    v49 = v50 >> 1;
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                    v51 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v51 = v49;
                  if (v51)
                  {
                    v52 = (char *)sub_18F26FB8C((uint64_t)v9, v51);
                    v47 = *(char **)(a1 + 8);
                    v46 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    v52 = 0;
                  }
                  v53 = &v52[4 * v48];
                  *(_DWORD *)v53 = 0;
                  v54 = v53 + 4;
                  while (v46 != v47)
                  {
                    v55 = *((_DWORD *)v46 - 1);
                    v46 -= 4;
                    *((_DWORD *)v53 - 1) = v55;
                    v53 -= 4;
                  }
                  *(_QWORD *)(a1 + 8) = v53;
                  *(_QWORD *)(a1 + 16) = v54;
                  *(_QWORD *)(a1 + 24) = &v52[4 * v51];
                  if (v47)
                    operator delete(v47);
                  v46 = v54;
                }
                else
                {
                  *(_DWORD *)v46 = 0;
                  v46 += 4;
                }
                *(_QWORD *)(a1 + 16) = v46;
                v57 = *((_QWORD *)this + 1);
                v56 = *((_QWORD *)this + 2);
                v58 = *(_QWORD *)this;
                v59 = v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v56;
                if (!v59)
                {
                  v65 = 0;
                  v66 = 0;
                  v67 = 0;
                  while (1)
                  {
                    v68 = v57 + 1;
                    *((_QWORD *)this + 1) = v57 + 1;
                    v69 = *(_BYTE *)(v58 + v57);
                    v67 |= (unint64_t)(v69 & 0x7F) << v65;
                    if ((v69 & 0x80) == 0)
                      goto LABEL_91;
                    v65 += 7;
                    v57 = v68;
                    v59 = v66++ > 8;
                    if (v59)
                    {
                      LODWORD(v67) = 0;
                      goto LABEL_91;
                    }
                  }
                }
                v60 = 0;
                v61 = 0;
                v67 = 0;
                if (v56 <= v57)
                  v62 = *((_QWORD *)this + 1);
                else
                  v62 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v62 == v57)
                  {
                    *((_BYTE *)this + 24) = 1;
                    *((_DWORD *)v46 - 1) = 0;
                    goto LABEL_127;
                  }
                  v63 = v57++;
                  v64 = *(_BYTE *)(v58 + v63);
                  *((_QWORD *)this + 1) = v57;
                  v67 |= (unint64_t)(v64 & 0x7F) << v60;
                  if ((v64 & 0x80) == 0)
                    break;
                  v60 += 7;
                  v59 = v61++ > 8;
                  if (v59)
                  {
                    LODWORD(v67) = 0;
                    goto LABEL_90;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v67) = 0;
LABEL_90:
                v68 = v63 + 1;
LABEL_91:
                *((_DWORD *)v46 - 1) = v67;
              }
              while (v68 < v56 && !*((_BYTE *)this + 24));
            }
LABEL_127:
            PB::Reader::recallMark();
          }
          else
          {
            v83 = *(char **)(a1 + 16);
            v82 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v83 >= v82)
            {
              v85 = (char *)*v8;
              v86 = (v83 - (_BYTE *)*v8) >> 2;
              v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 62)
LABEL_176:
                sub_18F26F8C0();
              v88 = v82 - (_QWORD)v85;
              if (v88 >> 1 > v87)
                v87 = v88 >> 1;
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                v89 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v89 = v87;
              if (v89)
              {
                v90 = (char *)sub_18F26FB8C((uint64_t)v9, v89);
                v85 = *(char **)(a1 + 8);
                v83 = *(char **)(a1 + 16);
              }
              else
              {
                v90 = 0;
              }
              v91 = &v90[4 * v86];
              *(_DWORD *)v91 = 0;
              v84 = v91 + 4;
              while (v83 != v85)
              {
                v92 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v91 - 1) = v92;
                v91 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v91;
              *(_QWORD *)(a1 + 16) = v84;
              *(_QWORD *)(a1 + 24) = &v90[4 * v89];
              if (v85)
                operator delete(v85);
            }
            else
            {
              *(_DWORD *)v83 = 0;
              v84 = v83 + 4;
            }
            *(_QWORD *)(a1 + 16) = v84;
            v93 = *((_QWORD *)this + 1);
            v94 = *((_QWORD *)this + 2);
            v95 = *(_QWORD *)this;
            v96 = 0;
            v97 = 0;
            if (v93 > 0xFFFFFFFFFFFFFFF5 || v93 + 10 > v94)
            {
              v101 = 0;
              if (v94 <= v93)
                v94 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v94 == v93)
                {
                  LODWORD(v101) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_165;
                }
                v99 = v93 + 1;
                v100 = *(_BYTE *)(v95 + v93);
                *((_QWORD *)this + 1) = v99;
                v101 |= (unint64_t)(v100 & 0x7F) << v96;
                if ((v100 & 0x80) == 0)
                  break;
                v96 += 7;
                v93 = v99;
                v59 = v97++ > 8;
                if (v59)
                {
LABEL_161:
                  LODWORD(v101) = 0;
                  goto LABEL_165;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v101) = 0;
            }
            else
            {
              v101 = 0;
              while (1)
              {
                v102 = v93 + 1;
                *((_QWORD *)this + 1) = v93 + 1;
                v103 = *(_BYTE *)(v95 + v93);
                v101 |= (unint64_t)(v103 & 0x7F) << v96;
                if ((v103 & 0x80) == 0)
                  break;
                v96 += 7;
                v93 = v102;
                v59 = v97++ > 8;
                if (v59)
                  goto LABEL_161;
              }
            }
LABEL_165:
            *(v84 - 1) = v101;
          }
LABEL_166:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_166;
      }
    }
    v16 = 0;
    v17 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F27F37C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result;
  v4 = *(_BYTE *)(result + 52);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 52);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
LABEL_12:
      result = PB::Writer::writeVarInt(this);
      if ((*(_BYTE *)(v3 + 52) & 2) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(result + 52) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 52);
  if ((v4 & 8) != 0)
    goto LABEL_12;
LABEL_4:
  if ((v4 & 2) != 0)
LABEL_5:
    result = PB::Writer::writeVarInt(this);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 16);
  while (v6 != v5)
  {
    v6 += 4;
    result = PB::Writer::writeVarInt(this);
  }
  return result;
}

double sub_18F27F434(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294E8E0;
  *(_DWORD *)(a1 + 192) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

void sub_18F27F470(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = &off_1E294E8E0;
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
  {
    *((_QWORD *)this + 5) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 1);
  if (v7)
  {
    *((_QWORD *)this + 2) = v7;
    operator delete(v7);
  }
  PB::Base::~Base(this);
}

void sub_18F27F500(PB::Base *a1)
{
  sub_18F27F470(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F27F524(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  __int16 v14;
  float *v15;
  float *v16;
  float v17;
  __int16 v18;
  float *v19;
  float *v20;
  float v21;
  __int16 v22;
  float *v23;
  float *v24;
  float v25;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "accelDecimated", v7);
  }
  if ((*(_WORD *)(a1 + 192) & 2) != 0)
    PB::TextFormatter::format(this, "accelFrontVariance", *(float *)(a1 + 160));
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "accelMean", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "accelNormAutocorr", v13);
  }
  v14 = *(_WORD *)(a1 + 192);
  if ((v14 & 4) != 0)
  {
    PB::TextFormatter::format(this, "accelNormMean", *(float *)(a1 + 164));
    v14 = *(_WORD *)(a1 + 192);
  }
  if ((v14 & 8) != 0)
    PB::TextFormatter::format(this, "accelNormVariance", *(float *)(a1 + 168));
  v15 = *(float **)(a1 + 80);
  v16 = *(float **)(a1 + 88);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "accelVariance", v17);
  }
  v18 = *(_WORD *)(a1 + 192);
  if ((v18 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "currentAngleDelta", *(float *)(a1 + 172));
    v18 = *(_WORD *)(a1 + 192);
    if ((v18 & 0x20) == 0)
    {
LABEL_17:
      if ((v18 & 0x40) == 0)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  else if ((v18 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(this, "currentMotionState");
  if ((*(_WORD *)(a1 + 192) & 0x40) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "lagAtMaxAutocorr");
LABEL_19:
  v19 = *(float **)(a1 + 104);
  v20 = *(float **)(a1 + 112);
  while (v19 != v20)
  {
    v21 = *v19++;
    PB::TextFormatter::format(this, "lastBaseline", v21);
  }
  v22 = *(_WORD *)(a1 + 192);
  if ((v22 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "maxAutocorr", *(float *)(a1 + 184));
    v22 = *(_WORD *)(a1 + 192);
  }
  if ((v22 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  v23 = *(float **)(a1 + 128);
  v24 = *(float **)(a1 + 136);
  while (v23 != v24)
  {
    v25 = *v23++;
    PB::TextFormatter::format(this, "walkingBaseline", v25);
  }
  if ((*(_WORD *)(a1 + 192) & 0x100) != 0)
    PB::TextFormatter::format(this, "widthAtMaxAutocorr");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F27F774(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _DWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _DWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _DWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _DWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char *v114;
  _DWORD *v115;
  char *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  int v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  char *v128;
  _DWORD *v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  int v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  _DWORD *v141;
  unint64_t v142;
  char *v143;
  unint64_t v144;
  char *v145;
  unint64_t v146;
  char *v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  char *v161;
  unint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  int v201;
  char *v202;
  int v203;
  char *v204;
  int v205;
  char *v206;
  int v207;
  char *v208;
  int v209;
  char *v210;
  int v211;
  unint64_t v212;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void **v221;
  void **v222;
  void **v223;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v220 = a1 + 144;
    v222 = (void **)(a1 + 104);
    v223 = (void **)(a1 + 128);
    v221 = (void **)(a1 + 56);
    v218 = a1 + 72;
    v219 = a1 + 120;
    v8 = (void **)(a1 + 80);
    v9 = (void **)(a1 + 32);
    v216 = a1 + 48;
    v217 = a1 + 96;
    v10 = (void **)(a1 + 8);
    v215 = a1 + 24;
    while (1)
    {
      v11 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v16 = *(_BYTE *)(v11 + v2);
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          break;
        v12 += 7;
        v2 = v15;
        v17 = v13++ > 8;
        if (v17)
          goto LABEL_20;
      }
LABEL_21:
      v23 = v14 & 7;
      if (v23 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v14 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 192) |= 1u;
          v24 = *((_QWORD *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(*(_QWORD *)this + v24);
          v25 = *((_QWORD *)this + 1) + 8;
          goto LABEL_350;
        case 2u:
          if (v23 != 2)
          {
            v140 = *(char **)(a1 + 16);
            v139 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v140 >= v139)
            {
              v164 = (char *)*v10;
              v165 = (v140 - (_BYTE *)*v10) >> 2;
              v166 = v165 + 1;
              if ((unint64_t)(v165 + 1) >> 62)
LABEL_366:
                sub_18F26F8C0();
              v167 = v139 - (_QWORD)v164;
              if (v167 >> 1 > v166)
                v166 = v167 >> 1;
              if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL)
                v168 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v168 = v166;
              if (v168)
              {
                v169 = (char *)sub_18F26FB8C(v215, v168);
                v164 = *(char **)(a1 + 8);
                v140 = *(char **)(a1 + 16);
              }
              else
              {
                v169 = 0;
              }
              v200 = &v169[4 * v165];
              *(_DWORD *)v200 = 0;
              v141 = v200 + 4;
              while (v140 != v164)
              {
                v201 = *((_DWORD *)v140 - 1);
                v140 -= 4;
                *((_DWORD *)v200 - 1) = v201;
                v200 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v200;
              *(_QWORD *)(a1 + 16) = v141;
              *(_QWORD *)(a1 + 24) = &v169[4 * v168];
              if (v164)
                operator delete(v164);
            }
            else
            {
              *(_DWORD *)v140 = 0;
              v141 = v140 + 4;
            }
            *(_QWORD *)(a1 + 16) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 2;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62)
                goto LABEL_366;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 1 > v33)
                v33 = v34 >> 1;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
                v35 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_18F26FB8C(v215, v35);
                v31 = *(char **)(a1 + 8);
                v29 = *(char **)(a1 + 16);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[4 * v32];
              *(_DWORD *)v37 = 0;
              v30 = v37 + 4;
              while (v29 != v31)
              {
                v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v37;
              *(_QWORD *)(a1 + 16) = v30;
              *(_QWORD *)(a1 + 24) = &v36[4 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_DWORD *)v29 = 0;
              v30 = v29 + 4;
            }
            *(_QWORD *)(a1 + 16) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v30 - 1) = *(_DWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_209;
        case 3u:
          if (v23 != 2)
          {
            v143 = *(char **)(a1 + 40);
            v142 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v143 >= v142)
            {
              v170 = (char *)*v9;
              v171 = (v143 - (_BYTE *)*v9) >> 2;
              v172 = v171 + 1;
              if ((unint64_t)(v171 + 1) >> 62)
LABEL_361:
                sub_18F26F8C0();
              v173 = v142 - (_QWORD)v170;
              if (v173 >> 1 > v172)
                v172 = v173 >> 1;
              if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL)
                v174 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v174 = v172;
              if (v174)
              {
                v175 = (char *)sub_18F26FB8C(v216, v174);
                v170 = *(char **)(a1 + 32);
                v143 = *(char **)(a1 + 40);
              }
              else
              {
                v175 = 0;
              }
              v202 = &v175[4 * v171];
              *(_DWORD *)v202 = 0;
              v141 = v202 + 4;
              while (v143 != v170)
              {
                v203 = *((_DWORD *)v143 - 1);
                v143 -= 4;
                *((_DWORD *)v202 - 1) = v203;
                v202 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v202;
              *(_QWORD *)(a1 + 40) = v141;
              *(_QWORD *)(a1 + 48) = &v175[4 * v174];
              if (v170)
                operator delete(v170);
            }
            else
            {
              *(_DWORD *)v143 = 0;
              v141 = v143 + 4;
            }
            *(_QWORD *)(a1 + 40) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            v43 = *(char **)(a1 + 40);
            v42 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v9;
              v46 = (v43 - (_BYTE *)*v9) >> 2;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62)
                goto LABEL_361;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 1 > v47)
                v47 = v48 >> 1;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                v49 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_18F26FB8C(v216, v49);
                v45 = *(char **)(a1 + 32);
                v43 = *(char **)(a1 + 40);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[4 * v46];
              *(_DWORD *)v51 = 0;
              v44 = v51 + 4;
              while (v43 != v45)
              {
                v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v51;
              *(_QWORD *)(a1 + 40) = v44;
              *(_QWORD *)(a1 + 48) = &v50[4 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_DWORD *)v43 = 0;
              v44 = v43 + 4;
            }
            *(_QWORD *)(a1 + 40) = v44;
            v53 = *((_QWORD *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v44 - 1) = *(_DWORD *)(*(_QWORD *)this + v53);
            v41 = *((_QWORD *)this + 2);
            v40 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v40;
          }
          goto LABEL_209;
        case 4u:
          if (v23 != 2)
          {
            v145 = *(char **)(a1 + 88);
            v144 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v145 >= v144)
            {
              v176 = (char *)*v8;
              v177 = (v145 - (_BYTE *)*v8) >> 2;
              v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 62)
LABEL_362:
                sub_18F26F8C0();
              v179 = v144 - (_QWORD)v176;
              if (v179 >> 1 > v178)
                v178 = v179 >> 1;
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL)
                v180 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v180 = v178;
              if (v180)
              {
                v181 = (char *)sub_18F26FB8C(v217, v180);
                v176 = *(char **)(a1 + 80);
                v145 = *(char **)(a1 + 88);
              }
              else
              {
                v181 = 0;
              }
              v204 = &v181[4 * v177];
              *(_DWORD *)v204 = 0;
              v141 = v204 + 4;
              while (v145 != v176)
              {
                v205 = *((_DWORD *)v145 - 1);
                v145 -= 4;
                *((_DWORD *)v204 - 1) = v205;
                v204 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v204;
              *(_QWORD *)(a1 + 88) = v141;
              *(_QWORD *)(a1 + 96) = &v181[4 * v180];
              if (v176)
                operator delete(v176);
            }
            else
            {
              *(_DWORD *)v145 = 0;
              v141 = v145 + 4;
            }
            *(_QWORD *)(a1 + 88) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          while (v54 < v55 && !*((_BYTE *)this + 24))
          {
            v57 = *(char **)(a1 + 88);
            v56 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v8;
              v60 = (v57 - (_BYTE *)*v8) >> 2;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 62)
                goto LABEL_362;
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 1 > v61)
                v61 = v62 >> 1;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                v63 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_18F26FB8C(v217, v63);
                v59 = *(char **)(a1 + 80);
                v57 = *(char **)(a1 + 88);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[4 * v60];
              *(_DWORD *)v65 = 0;
              v58 = v65 + 4;
              while (v57 != v59)
              {
                v66 = *((_DWORD *)v57 - 1);
                v57 -= 4;
                *((_DWORD *)v65 - 1) = v66;
                v65 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v65;
              *(_QWORD *)(a1 + 88) = v58;
              *(_QWORD *)(a1 + 96) = &v64[4 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_DWORD *)v57 = 0;
              v58 = v57 + 4;
            }
            *(_QWORD *)(a1 + 88) = v58;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v58 - 1) = *(_DWORD *)(*(_QWORD *)this + v67);
            v55 = *((_QWORD *)this + 2);
            v54 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v54;
          }
          goto LABEL_209;
        case 5u:
          if (v23 != 2)
          {
            v147 = *(char **)(a1 + 64);
            v146 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v147 >= v146)
            {
              v182 = (char *)*v221;
              v183 = (v147 - (_BYTE *)*v221) >> 2;
              v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 62)
LABEL_363:
                sub_18F26F8C0();
              v185 = v146 - (_QWORD)v182;
              if (v185 >> 1 > v184)
                v184 = v185 >> 1;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL)
                v186 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v186 = v184;
              if (v186)
              {
                v187 = (char *)sub_18F26FB8C(v218, v186);
                v182 = *(char **)(a1 + 56);
                v147 = *(char **)(a1 + 64);
              }
              else
              {
                v187 = 0;
              }
              v206 = &v187[4 * v183];
              *(_DWORD *)v206 = 0;
              v141 = v206 + 4;
              while (v147 != v182)
              {
                v207 = *((_DWORD *)v147 - 1);
                v147 -= 4;
                *((_DWORD *)v206 - 1) = v207;
                v206 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v206;
              *(_QWORD *)(a1 + 64) = v141;
              *(_QWORD *)(a1 + 72) = &v187[4 * v186];
              if (v182)
                operator delete(v182);
            }
            else
            {
              *(_DWORD *)v147 = 0;
              v141 = v147 + 4;
            }
            *(_QWORD *)(a1 + 64) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v68 = *((_QWORD *)this + 1);
          v69 = *((_QWORD *)this + 2);
          while (v68 < v69 && !*((_BYTE *)this + 24))
          {
            v71 = *(char **)(a1 + 64);
            v70 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v71 >= v70)
            {
              v73 = (char *)*v221;
              v74 = (v71 - (_BYTE *)*v221) >> 2;
              v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62)
                goto LABEL_363;
              v76 = v70 - (_QWORD)v73;
              if (v76 >> 1 > v75)
                v75 = v76 >> 1;
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
                v77 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v77 = v75;
              if (v77)
              {
                v78 = (char *)sub_18F26FB8C(v218, v77);
                v73 = *(char **)(a1 + 56);
                v71 = *(char **)(a1 + 64);
              }
              else
              {
                v78 = 0;
              }
              v79 = &v78[4 * v74];
              *(_DWORD *)v79 = 0;
              v72 = v79 + 4;
              while (v71 != v73)
              {
                v80 = *((_DWORD *)v71 - 1);
                v71 -= 4;
                *((_DWORD *)v79 - 1) = v80;
                v79 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v79;
              *(_QWORD *)(a1 + 64) = v72;
              *(_QWORD *)(a1 + 72) = &v78[4 * v77];
              if (v73)
                operator delete(v73);
            }
            else
            {
              *(_DWORD *)v71 = 0;
              v72 = v71 + 4;
            }
            *(_QWORD *)(a1 + 64) = v72;
            v81 = *((_QWORD *)this + 1);
            if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v72 - 1) = *(_DWORD *)(*(_QWORD *)this + v81);
            v69 = *((_QWORD *)this + 2);
            v68 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v68;
          }
          goto LABEL_209;
        case 6u:
          *(_WORD *)(a1 + 192) |= 0x80u;
          v82 = *((_QWORD *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(_QWORD *)this + v82);
          goto LABEL_349;
        case 7u:
          *(_WORD *)(a1 + 192) |= 0x40u;
          v83 = *((_QWORD *)this + 1);
          v84 = *((_QWORD *)this + 2);
          v85 = *(_QWORD *)this;
          if (v83 <= 0xFFFFFFFFFFFFFFF5 && v83 + 10 <= v84)
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
            do
            {
              v89 = v83 + 1;
              *((_QWORD *)this + 1) = v83 + 1;
              v90 = *(_BYTE *)(v85 + v83);
              v88 |= (unint64_t)(v90 & 0x7F) << v86;
              if ((v90 & 0x80) == 0)
                goto LABEL_296;
              v86 += 7;
              v83 = v89;
              v17 = v87++ > 8;
            }
            while (!v17);
LABEL_224:
            LODWORD(v88) = 0;
            goto LABEL_296;
          }
          v148 = 0;
          v149 = 0;
          v88 = 0;
          if (v84 <= v83)
            v84 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v84 == v83)
            {
              LODWORD(v88) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v150 = v83 + 1;
              v151 = *(_BYTE *)(v85 + v83);
              *((_QWORD *)this + 1) = v150;
              v88 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                v83 = v150;
                v17 = v149++ > 8;
                if (v17)
                  goto LABEL_224;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v88) = 0;
            }
            break;
          }
LABEL_296:
          *(_DWORD *)(a1 + 180) = v88;
          goto LABEL_351;
        case 8u:
          *(_WORD *)(a1 + 192) |= 0x100u;
          v91 = *((_QWORD *)this + 1);
          v92 = *((_QWORD *)this + 2);
          v93 = *(_QWORD *)this;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)this + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_299;
              v94 += 7;
              v91 = v97;
              v17 = v95++ > 8;
            }
            while (!v17);
LABEL_231:
            LODWORD(v96) = 0;
            goto LABEL_299;
          }
          v152 = 0;
          v153 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v92 == v91)
            {
              LODWORD(v96) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v154 = v91 + 1;
              v155 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)this + 1) = v154;
              v96 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v91 = v154;
                v17 = v153++ > 8;
                if (v17)
                  goto LABEL_231;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v96) = 0;
            }
            break;
          }
LABEL_299:
          *(_DWORD *)(a1 + 188) = v96;
          goto LABEL_351;
        case 9u:
          *(_WORD *)(a1 + 192) |= 4u;
          v99 = *((_QWORD *)this + 1);
          if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(_QWORD *)this + v99);
          goto LABEL_349;
        case 0xAu:
          *(_WORD *)(a1 + 192) |= 8u;
          v100 = *((_QWORD *)this + 1);
          if (v100 > 0xFFFFFFFFFFFFFFFBLL || v100 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(_QWORD *)this + v100);
          goto LABEL_349;
        case 0xBu:
          *(_WORD *)(a1 + 192) |= 0x20u;
          v101 = *((_QWORD *)this + 1);
          v102 = *((_QWORD *)this + 2);
          v103 = *(_QWORD *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            v104 = 0;
            v105 = 0;
            v106 = 0;
            do
            {
              v107 = v101 + 1;
              *((_QWORD *)this + 1) = v101 + 1;
              v108 = *(_BYTE *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0)
                goto LABEL_302;
              v104 += 7;
              v101 = v107;
              v17 = v105++ > 8;
            }
            while (!v17);
LABEL_238:
            LODWORD(v106) = 0;
            goto LABEL_302;
          }
          v156 = 0;
          v157 = 0;
          v106 = 0;
          if (v102 <= v101)
            v102 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v158 = v101 + 1;
              v159 = *(_BYTE *)(v103 + v101);
              *((_QWORD *)this + 1) = v158;
              v106 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v101 = v158;
                v17 = v157++ > 8;
                if (v17)
                  goto LABEL_238;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v106) = 0;
            }
            break;
          }
LABEL_302:
          *(_DWORD *)(a1 + 176) = v106;
          goto LABEL_351;
        case 0xCu:
          *(_WORD *)(a1 + 192) |= 0x10u;
          v109 = *((_QWORD *)this + 1);
          if (v109 > 0xFFFFFFFFFFFFFFFBLL || v109 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(_QWORD *)this + v109);
          goto LABEL_349;
        case 0xDu:
          *(_WORD *)(a1 + 192) |= 2u;
          v110 = *((_QWORD *)this + 1);
          if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((_QWORD *)this + 2))
            goto LABEL_347;
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(_QWORD *)this + v110);
          goto LABEL_349;
        case 0xEu:
          if (v23 != 2)
          {
            v161 = *(char **)(a1 + 112);
            v160 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v161 >= v160)
            {
              v188 = (char *)*v222;
              v189 = (v161 - (_BYTE *)*v222) >> 2;
              v190 = v189 + 1;
              if ((unint64_t)(v189 + 1) >> 62)
LABEL_364:
                sub_18F26F8C0();
              v191 = v160 - (_QWORD)v188;
              if (v191 >> 1 > v190)
                v190 = v191 >> 1;
              if ((unint64_t)v191 >= 0x7FFFFFFFFFFFFFFCLL)
                v192 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v192 = v190;
              if (v192)
              {
                v193 = (char *)sub_18F26FB8C(v219, v192);
                v188 = *(char **)(a1 + 104);
                v161 = *(char **)(a1 + 112);
              }
              else
              {
                v193 = 0;
              }
              v208 = &v193[4 * v189];
              *(_DWORD *)v208 = 0;
              v141 = v208 + 4;
              while (v161 != v188)
              {
                v209 = *((_DWORD *)v161 - 1);
                v161 -= 4;
                *((_DWORD *)v208 - 1) = v209;
                v208 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v208;
              *(_QWORD *)(a1 + 112) = v141;
              *(_QWORD *)(a1 + 120) = &v193[4 * v192];
              if (v188)
                operator delete(v188);
            }
            else
            {
              *(_DWORD *)v161 = 0;
              v141 = v161 + 4;
            }
            *(_QWORD *)(a1 + 112) = v141;
            goto LABEL_345;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v111 = *((_QWORD *)this + 1);
          v112 = *((_QWORD *)this + 2);
          while (v111 < v112 && !*((_BYTE *)this + 24))
          {
            v114 = *(char **)(a1 + 112);
            v113 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v114 >= v113)
            {
              v116 = (char *)*v222;
              v117 = (v114 - (_BYTE *)*v222) >> 2;
              v118 = v117 + 1;
              if ((unint64_t)(v117 + 1) >> 62)
                goto LABEL_364;
              v119 = v113 - (_QWORD)v116;
              if (v119 >> 1 > v118)
                v118 = v119 >> 1;
              if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL)
                v120 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v120 = v118;
              if (v120)
              {
                v121 = (char *)sub_18F26FB8C(v219, v120);
                v116 = *(char **)(a1 + 104);
                v114 = *(char **)(a1 + 112);
              }
              else
              {
                v121 = 0;
              }
              v122 = &v121[4 * v117];
              *(_DWORD *)v122 = 0;
              v115 = v122 + 4;
              while (v114 != v116)
              {
                v123 = *((_DWORD *)v114 - 1);
                v114 -= 4;
                *((_DWORD *)v122 - 1) = v123;
                v122 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v122;
              *(_QWORD *)(a1 + 112) = v115;
              *(_QWORD *)(a1 + 120) = &v121[4 * v120];
              if (v116)
                operator delete(v116);
            }
            else
            {
              *(_DWORD *)v114 = 0;
              v115 = v114 + 4;
            }
            *(_QWORD *)(a1 + 112) = v115;
            v124 = *((_QWORD *)this + 1);
            if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((_QWORD *)this + 2))
              goto LABEL_208;
            *(v115 - 1) = *(_DWORD *)(*(_QWORD *)this + v124);
            v112 = *((_QWORD *)this + 2);
            v111 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v111;
          }
          goto LABEL_209;
        case 0xFu:
          if (v23 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v125 = *((_QWORD *)this + 1);
            v126 = *((_QWORD *)this + 2);
            while (v125 < v126 && !*((_BYTE *)this + 24))
            {
              v128 = *(char **)(a1 + 136);
              v127 = *(_QWORD *)(a1 + 144);
              if ((unint64_t)v128 >= v127)
              {
                v130 = (char *)*v223;
                v131 = (v128 - (_BYTE *)*v223) >> 2;
                v132 = v131 + 1;
                if ((unint64_t)(v131 + 1) >> 62)
                  goto LABEL_365;
                v133 = v127 - (_QWORD)v130;
                if (v133 >> 1 > v132)
                  v132 = v133 >> 1;
                if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL)
                  v134 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v134 = v132;
                if (v134)
                {
                  v135 = (char *)sub_18F26FB8C(v220, v134);
                  v130 = *(char **)(a1 + 128);
                  v128 = *(char **)(a1 + 136);
                }
                else
                {
                  v135 = 0;
                }
                v136 = &v135[4 * v131];
                *(_DWORD *)v136 = 0;
                v129 = v136 + 4;
                while (v128 != v130)
                {
                  v137 = *((_DWORD *)v128 - 1);
                  v128 -= 4;
                  *((_DWORD *)v136 - 1) = v137;
                  v136 -= 4;
                }
                *(_QWORD *)(a1 + 128) = v136;
                *(_QWORD *)(a1 + 136) = v129;
                *(_QWORD *)(a1 + 144) = &v135[4 * v134];
                if (v130)
                  operator delete(v130);
              }
              else
              {
                *(_DWORD *)v128 = 0;
                v129 = v128 + 4;
              }
              *(_QWORD *)(a1 + 136) = v129;
              v138 = *((_QWORD *)this + 1);
              if (v138 > 0xFFFFFFFFFFFFFFFBLL || v138 + 4 > *((_QWORD *)this + 2))
              {
LABEL_208:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v129 - 1) = *(_DWORD *)(*(_QWORD *)this + v138);
              v126 = *((_QWORD *)this + 2);
              v125 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v125;
            }
LABEL_209:
            PB::Reader::recallMark();
          }
          else
          {
            v163 = *(char **)(a1 + 136);
            v162 = *(_QWORD *)(a1 + 144);
            if ((unint64_t)v163 >= v162)
            {
              v194 = (char *)*v223;
              v195 = (v163 - (_BYTE *)*v223) >> 2;
              v196 = v195 + 1;
              if ((unint64_t)(v195 + 1) >> 62)
LABEL_365:
                sub_18F26F8C0();
              v197 = v162 - (_QWORD)v194;
              if (v197 >> 1 > v196)
                v196 = v197 >> 1;
              if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL)
                v198 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v198 = v196;
              if (v198)
              {
                v199 = (char *)sub_18F26FB8C(v220, v198);
                v194 = *(char **)(a1 + 128);
                v163 = *(char **)(a1 + 136);
              }
              else
              {
                v199 = 0;
              }
              v210 = &v199[4 * v195];
              *(_DWORD *)v210 = 0;
              v141 = v210 + 4;
              while (v163 != v194)
              {
                v211 = *((_DWORD *)v163 - 1);
                v163 -= 4;
                *((_DWORD *)v210 - 1) = v211;
                v210 -= 4;
              }
              *(_QWORD *)(a1 + 128) = v210;
              *(_QWORD *)(a1 + 136) = v141;
              *(_QWORD *)(a1 + 144) = &v199[4 * v198];
              if (v194)
                operator delete(v194);
            }
            else
            {
              *(_DWORD *)v163 = 0;
              v141 = v163 + 4;
            }
            *(_QWORD *)(a1 + 136) = v141;
LABEL_345:
            v212 = *((_QWORD *)this + 1);
            if (v212 <= 0xFFFFFFFFFFFFFFFBLL && v212 + 4 <= *((_QWORD *)this + 2))
            {
              *(v141 - 1) = *(_DWORD *)(*(_QWORD *)this + v212);
LABEL_349:
              v25 = *((_QWORD *)this + 1) + 4;
LABEL_350:
              *((_QWORD *)this + 1) = v25;
            }
            else
            {
LABEL_347:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_351:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_351;
      }
    }
    v18 = 0;
    v19 = 0;
    v14 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v20 = v2 + 1;
      v21 = *(_BYTE *)(v11 + v2);
      *((_QWORD *)this + 1) = v20;
      v14 |= (unint64_t)(v21 & 0x7F) << v18;
      if ((v21 & 0x80) == 0)
        goto LABEL_21;
      v18 += 7;
      v2 = v20;
      if (v19++ >= 9)
      {
LABEL_20:
        v14 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2807AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  __int16 v16;
  float *v17;
  float *v18;
  float v19;
  float *v20;
  float *v21;
  float v22;

  v3 = result;
  if ((*(_WORD *)(result + 192) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 152));
  v4 = *(float **)(v3 + 8);
  v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 32);
  v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 80);
  v11 = *(float **)(v3 + 88);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = *(float **)(v3 + 56);
  v14 = *(float **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15);
  }
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x80) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 184));
    v16 = *(_WORD *)(v3 + 192);
    if ((v16 & 0x40) == 0)
    {
LABEL_17:
      if ((v16 & 0x100) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
  }
  else if ((v16 & 0x40) == 0)
  {
    goto LABEL_17;
  }
  result = PB::Writer::writeVarInt(this);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x100) == 0)
  {
LABEL_18:
    if ((v16 & 4) == 0)
      goto LABEL_19;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::writeVarInt(this);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 4) == 0)
  {
LABEL_19:
    if ((v16 & 8) == 0)
      goto LABEL_20;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::write(this, *(float *)(v3 + 164));
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 8) == 0)
  {
LABEL_20:
    if ((v16 & 0x20) == 0)
      goto LABEL_21;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this, *(float *)(v3 + 168));
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x20) == 0)
  {
LABEL_21:
    if ((v16 & 0x10) == 0)
      goto LABEL_22;
LABEL_37:
    result = PB::Writer::write(this, *(float *)(v3 + 172));
    if ((*(_WORD *)(v3 + 192) & 2) == 0)
      goto LABEL_24;
    goto LABEL_23;
  }
LABEL_36:
  result = PB::Writer::writeVarInt(this);
  v16 = *(_WORD *)(v3 + 192);
  if ((v16 & 0x10) != 0)
    goto LABEL_37;
LABEL_22:
  if ((v16 & 2) != 0)
LABEL_23:
    result = PB::Writer::write(this, *(float *)(v3 + 160));
LABEL_24:
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19);
  }
  v21 = *(float **)(v3 + 128);
  v20 = *(float **)(v3 + 136);
  while (v21 != v20)
  {
    v22 = *v21++;
    result = PB::Writer::write(this, v22);
  }
  return result;
}

uint64_t sub_18F28098C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CAE8;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F2809A8(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2809CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "location");
    if ((*(_BYTE *)(a1 + 24) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "eventTag");
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 4) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F280A5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 20) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F280DDC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 24) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F280E54(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944E80;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_18F280E6C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F280E90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "machAbsTimestamp", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 24));
      if ((*(_BYTE *)(a1 + 40) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "pressure", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 40);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F280F40(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 40) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 2u:
          *(_BYTE *)(a1 + 40) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 3u:
          *(_BYTE *)(a1 + 40) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_35;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_37;
        case 4u:
          *(_BYTE *)(a1 + 40) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_37:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28119C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 40);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_18F281230(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CB20;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F281248(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28126C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "accelBiasZ", *(float *)(a1 + 24));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x800) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelZ", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "compensate");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "height", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "inertialCompOffset", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inertialCompPressure", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "kfPressure", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rawPressure", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "rawPressureTemperature", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0)
      goto LABEL_12;
LABEL_25:
    PB::TextFormatter::format(this, "timestamp");
    if ((*(_WORD *)(a1 + 64) & 0x400) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "rawPressureTimestamp");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
    goto LABEL_25;
LABEL_12:
  if ((v5 & 0x400) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28141C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 64) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 64) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 64) |= 2u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    v25 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_89;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    v25 = 0;
LABEL_88:
                    v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v25 = 0;
                goto LABEL_88;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_89;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              v25 = 0;
LABEL_89:
              *(_QWORD *)(a1 + 16) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 64) |= 1u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    v31 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v41 = v27++;
                  v42 = *(_BYTE *)(v28 + v41);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    v31 = 0;
LABEL_93:
                    v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v31 = 0;
                goto LABEL_93;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_94;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              v31 = 0;
LABEL_94:
              *(_QWORD *)(a1 + 8) = v31;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_64;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_84;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_84:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 60) = v34;
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2819AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 32));
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_WORD *)(result + 64) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  if ((*(_WORD *)(v3 + 64) & 0x800) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F281B20(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DF08;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F281B34(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294DF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F281B74(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294DF08;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F281BC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    PB::TextFormatter::format(this, "lastConvergenceTimestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F281C34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v22 = *((_QWORD *)this + 1);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v22);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294FCC8;
        *(_DWORD *)(v20 + 160) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        *(_OWORD *)(v20 + 136) = 0u;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

double sub_18F281E90(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294FCC8;
  *(_DWORD *)(a1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return result;
}

uint64_t sub_18F281ECC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 16));
  return result;
}

uint64_t sub_18F281F20(uint64_t result)
{
  *(_QWORD *)result = &off_1E2943A98;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F281F38(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F281F5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "dThetaNorm", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "lastCorrespondenceTimestamp", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "state");
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "lastUpdateTimestamp", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28202C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 44) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_37;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 2u:
          *(_BYTE *)(a1 + 44) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_37;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 3u:
          *(_BYTE *)(a1 + 44) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_37;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_41;
        case 4u:
          *(_BYTE *)(a1 + 44) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 >= *((_QWORD *)this + 2))
          {
            v22 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
            *((_QWORD *)this + 1) = v2;
            v22 = v21 != 0;
          }
          *(_BYTE *)(a1 + 40) = v22;
          break;
        case 5u:
          *(_BYTE *)(a1 + 44) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_41:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_37:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2822CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_10:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 44) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

_QWORD *sub_18F28237C(_QWORD *result)
{
  *result = &off_1E294E918;
  result[1] = 0;
  return result;
}

void sub_18F28238C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E918;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F2823CC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294E918;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F282420(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F282470(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294D338;
        *(_DWORD *)(v20 + 88) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_QWORD *)(v20 + 72) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28265C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

double sub_18F282678(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E2950780;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F2826A4(PB::Base *this)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E2950780;
  v2 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F28270C(PB::Base *a1)
{
  sub_18F2826A4(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F282730(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;
  float *v6;
  float *v7;
  float v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;
  uint64_t v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "activity");
    v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "arrivalTimestamp", *(float *)(a1 + 84));
  if ((*(_WORD *)(a1 + 116) & 1) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "btcTimestamp");
LABEL_5:
  v6 = *(float **)(a1 + 8);
  v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "filteredAcceleration", v8);
  }
  v9 = *(float **)(a1 + 32);
  v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "gyroBias", v11);
  }
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x400) != 0)
  {
    PB::TextFormatter::format(this, "isInEar");
    v12 = *(_WORD *)(a1 + 116);
    if ((v12 & 0x10) == 0)
    {
LABEL_11:
      if ((v12 & 0x20) == 0)
        goto LABEL_12;
      goto LABEL_27;
    }
  }
  else if ((v12 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "location");
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x20) == 0)
  {
LABEL_12:
    if ((v12 & 0x40) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "quiescentMode");
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x40) == 0)
  {
LABEL_13:
    if ((v12 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "quiescentNoise", *(float *)(a1 + 96));
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 0x80) == 0)
  {
LABEL_14:
    if ((v12 & 2) == 0)
      goto LABEL_15;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "sampleLatency", *(float *)(a1 + 100));
  v12 = *(_WORD *)(a1 + 116);
  if ((v12 & 2) == 0)
  {
LABEL_15:
    if ((v12 & 0x100) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_30:
  PB::TextFormatter::format(this, "sensorTimeUponReceival", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 116) & 0x100) != 0)
LABEL_16:
    PB::TextFormatter::format(this, "sequenceNumber");
LABEL_17:
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v13 + 32))(v13, this, "super");
  if ((*(_WORD *)(a1 + 116) & 0x200) != 0)
    PB::TextFormatter::format(this, "timeSyncStatus");
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F282944(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  _DWORD *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  unint64_t v109;
  int v110;
  BOOL v111;
  unint64_t v112;
  char *v113;
  _DWORD *v114;
  char v115;
  unsigned int v116;
  unint64_t v117;
  char v118;
  char v119;
  unsigned int v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char v131;
  unsigned int v132;
  unint64_t v133;
  char v134;
  unint64_t v135;
  char *v136;
  char v137;
  unsigned int v138;
  unint64_t v139;
  char v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  char *v153;
  int v154;
  char *v155;
  int v156;
  unint64_t v157;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          v25 = operator new();
          *(_QWORD *)v25 = &off_1E294F6A8;
          *(_DWORD *)(v25 + 152) = 0;
          *(_OWORD *)(v25 + 8) = 0u;
          *(_OWORD *)(v25 + 24) = 0u;
          *(_OWORD *)(v25 + 40) = 0u;
          *(_OWORD *)(v25 + 56) = 0u;
          *(_OWORD *)(v25 + 72) = 0u;
          *(_OWORD *)(v25 + 88) = 0u;
          *(_OWORD *)(v25 + 104) = 0u;
          *(_QWORD *)(v25 + 120) = 0;
          v26 = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 72) = v25;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v25 = *(_QWORD *)(a1 + 72);
          }
          if (!PB::Reader::placeMark()
            || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v25 + 16))(v25, this) & 1) == 0)
          {
            return 0;
          }
          goto LABEL_183;
        case 2u:
          if (v24 != 2)
          {
            v113 = *(char **)(a1 + 16);
            v112 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v113 >= v112)
            {
              v141 = (char *)*v10;
              v142 = (v113 - (_BYTE *)*v10) >> 2;
              v143 = v142 + 1;
              if ((unint64_t)(v142 + 1) >> 62)
LABEL_255:
                sub_18F26F8C0();
              v144 = v112 - (_QWORD)v141;
              if (v144 >> 1 > v143)
                v143 = v144 >> 1;
              if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
                v145 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v145 = v143;
              if (v145)
              {
                v146 = (char *)sub_18F26FB8C(v11, v145);
                v141 = *(char **)(a1 + 8);
                v113 = *(char **)(a1 + 16);
              }
              else
              {
                v146 = 0;
              }
              v153 = &v146[4 * v142];
              *(_DWORD *)v153 = 0;
              v114 = v153 + 4;
              while (v113 != v141)
              {
                v154 = *((_DWORD *)v113 - 1);
                v113 -= 4;
                *((_DWORD *)v153 - 1) = v154;
                v153 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v153;
              *(_QWORD *)(a1 + 16) = v114;
              *(_QWORD *)(a1 + 24) = &v146[4 * v145];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *(_DWORD *)v113 = 0;
              v114 = v113 + 4;
            }
            *(_QWORD *)(a1 + 16) = v114;
            goto LABEL_238;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 16);
            v29 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v10;
              v33 = (v30 - (_BYTE *)*v10) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_255;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_18F26FB8C(v11, v36);
                v32 = *(char **)(a1 + 8);
                v30 = *(char **)(a1 + 16);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v38;
              *(_QWORD *)(a1 + 16) = v31;
              *(_QWORD *)(a1 + 24) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 16) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_182;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_183;
        case 3u:
          *(_WORD *)(a1 + 116) |= 0x40u;
          v41 = *((_QWORD *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((_QWORD *)this + 2))
            goto LABEL_240;
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(_QWORD *)this + v41);
          goto LABEL_242;
        case 4u:
          *(_WORD *)(a1 + 116) |= 0x20u;
          v42 = *((_QWORD *)this + 1);
          v43 = *((_QWORD *)this + 2);
          v44 = *(_QWORD *)this;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            v45 = 0;
            v46 = 0;
            v47 = 0;
            do
            {
              v48 = v42 + 1;
              *((_QWORD *)this + 1) = v42 + 1;
              v49 = *(_BYTE *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0)
                goto LABEL_208;
              v45 += 7;
              v42 = v48;
              v18 = v46++ > 8;
            }
            while (!v18);
LABEL_142:
            LODWORD(v47) = 0;
            goto LABEL_208;
          }
          v115 = 0;
          v116 = 0;
          v47 = 0;
          if (v43 <= v42)
            v43 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v117 = v42 + 1;
              v118 = *(_BYTE *)(v44 + v42);
              *((_QWORD *)this + 1) = v117;
              v47 |= (unint64_t)(v118 & 0x7F) << v115;
              if (v118 < 0)
              {
                v115 += 7;
                v42 = v117;
                v18 = v116++ > 8;
                if (v18)
                  goto LABEL_142;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v47) = 0;
            }
            break;
          }
LABEL_208:
          *(_DWORD *)(a1 + 92) = v47;
          goto LABEL_244;
        case 5u:
          *(_WORD *)(a1 + 116) |= 0x10u;
          v50 = *((_QWORD *)this + 1);
          v51 = *((_QWORD *)this + 2);
          v52 = *(_QWORD *)this;
          if (v50 <= 0xFFFFFFFFFFFFFFF5 && v50 + 10 <= v51)
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
            do
            {
              v56 = v50 + 1;
              *((_QWORD *)this + 1) = v50 + 1;
              v57 = *(_BYTE *)(v52 + v50);
              v55 |= (unint64_t)(v57 & 0x7F) << v53;
              if ((v57 & 0x80) == 0)
                goto LABEL_211;
              v53 += 7;
              v50 = v56;
              v18 = v54++ > 8;
            }
            while (!v18);
LABEL_149:
            LODWORD(v55) = 0;
            goto LABEL_211;
          }
          v119 = 0;
          v120 = 0;
          v55 = 0;
          if (v51 <= v50)
            v51 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v51 == v50)
            {
              LODWORD(v55) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v121 = v50 + 1;
              v122 = *(_BYTE *)(v52 + v50);
              *((_QWORD *)this + 1) = v121;
              v55 |= (unint64_t)(v122 & 0x7F) << v119;
              if (v122 < 0)
              {
                v119 += 7;
                v50 = v121;
                v18 = v120++ > 8;
                if (v18)
                  goto LABEL_149;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v55) = 0;
            }
            break;
          }
LABEL_211:
          *(_DWORD *)(a1 + 88) = v55;
          goto LABEL_244;
        case 6u:
          *(_WORD *)(a1 + 116) |= 0x100u;
          v58 = *((_QWORD *)this + 1);
          v59 = *((_QWORD *)this + 2);
          v60 = *(_QWORD *)this;
          if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
          {
            v61 = 0;
            v62 = 0;
            v63 = 0;
            do
            {
              v64 = v58 + 1;
              *((_QWORD *)this + 1) = v58 + 1;
              v65 = *(_BYTE *)(v60 + v58);
              v63 |= (unint64_t)(v65 & 0x7F) << v61;
              if ((v65 & 0x80) == 0)
                goto LABEL_214;
              v61 += 7;
              v58 = v64;
              v18 = v62++ > 8;
            }
            while (!v18);
LABEL_156:
            LODWORD(v63) = 0;
            goto LABEL_214;
          }
          v123 = 0;
          v124 = 0;
          v63 = 0;
          if (v59 <= v58)
            v59 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v59 == v58)
            {
              LODWORD(v63) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v125 = v58 + 1;
              v126 = *(_BYTE *)(v60 + v58);
              *((_QWORD *)this + 1) = v125;
              v63 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                v58 = v125;
                v18 = v124++ > 8;
                if (v18)
                  goto LABEL_156;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v63) = 0;
            }
            break;
          }
LABEL_214:
          *(_DWORD *)(a1 + 104) = v63;
          goto LABEL_244;
        case 7u:
          *(_WORD *)(a1 + 116) |= 2u;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)this + 2))
            goto LABEL_240;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v66);
          v67 = *((_QWORD *)this + 1) + 8;
          goto LABEL_243;
        case 8u:
          *(_WORD *)(a1 + 116) |= 0x200u;
          v68 = *((_QWORD *)this + 1);
          v69 = *((_QWORD *)this + 2);
          v70 = *(_QWORD *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)this + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_217;
              v71 += 7;
              v68 = v74;
              v18 = v72++ > 8;
            }
            while (!v18);
LABEL_163:
            LODWORD(v73) = 0;
            goto LABEL_217;
          }
          v127 = 0;
          v128 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v129 = v68 + 1;
              v130 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)this + 1) = v129;
              v73 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v68 = v129;
                v18 = v128++ > 8;
                if (v18)
                  goto LABEL_163;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_217:
          *(_DWORD *)(a1 + 108) = v73;
          goto LABEL_244;
        case 9u:
          *(_WORD *)(a1 + 116) |= 1u;
          v76 = *((_QWORD *)this + 1);
          v77 = *((_QWORD *)this + 2);
          v78 = *(_QWORD *)this;
          if (v76 <= 0xFFFFFFFFFFFFFFF5 && v76 + 10 <= v77)
          {
            v79 = 0;
            v80 = 0;
            v81 = 0;
            do
            {
              v82 = v76 + 1;
              *((_QWORD *)this + 1) = v76 + 1;
              v83 = *(_BYTE *)(v78 + v76);
              v81 |= (unint64_t)(v83 & 0x7F) << v79;
              if ((v83 & 0x80) == 0)
                goto LABEL_220;
              v79 += 7;
              v76 = v82;
              v18 = v80++ > 8;
            }
            while (!v18);
LABEL_170:
            v81 = 0;
            goto LABEL_220;
          }
          v131 = 0;
          v132 = 0;
          v81 = 0;
          if (v77 <= v76)
            v77 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v77 == v76)
            {
              v81 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v133 = v76 + 1;
              v134 = *(_BYTE *)(v78 + v76);
              *((_QWORD *)this + 1) = v133;
              v81 |= (unint64_t)(v134 & 0x7F) << v131;
              if (v134 < 0)
              {
                v131 += 7;
                v76 = v133;
                v18 = v132++ > 8;
                if (v18)
                  goto LABEL_170;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v81 = 0;
            }
            break;
          }
LABEL_220:
          *(_QWORD *)(a1 + 56) = v81;
          goto LABEL_244;
        case 0xAu:
          *(_WORD *)(a1 + 116) |= 8u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((_QWORD *)this + 2))
            goto LABEL_240;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v84);
          goto LABEL_242;
        case 0xBu:
          *(_WORD *)(a1 + 116) |= 0x80u;
          v85 = *((_QWORD *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((_QWORD *)this + 2))
            goto LABEL_240;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v85);
          goto LABEL_242;
        case 0xCu:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v86 = *((_QWORD *)this + 1);
            v87 = *((_QWORD *)this + 2);
            while (v86 < v87 && !*((_BYTE *)this + 24))
            {
              v89 = *(char **)(a1 + 40);
              v88 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v89 >= v88)
              {
                v91 = (char *)*v8;
                v92 = (v89 - (_BYTE *)*v8) >> 2;
                v93 = v92 + 1;
                if ((unint64_t)(v92 + 1) >> 62)
                  goto LABEL_254;
                v94 = v88 - (_QWORD)v91;
                if (v94 >> 1 > v93)
                  v93 = v94 >> 1;
                if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
                  v95 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v95 = v93;
                if (v95)
                {
                  v96 = (char *)sub_18F26FB8C(v9, v95);
                  v91 = *(char **)(a1 + 32);
                  v89 = *(char **)(a1 + 40);
                }
                else
                {
                  v96 = 0;
                }
                v97 = &v96[4 * v92];
                *(_DWORD *)v97 = 0;
                v90 = v97 + 4;
                while (v89 != v91)
                {
                  v98 = *((_DWORD *)v89 - 1);
                  v89 -= 4;
                  *((_DWORD *)v97 - 1) = v98;
                  v97 -= 4;
                }
                *(_QWORD *)(a1 + 32) = v97;
                *(_QWORD *)(a1 + 40) = v90;
                *(_QWORD *)(a1 + 48) = &v96[4 * v95];
                if (v91)
                  operator delete(v91);
              }
              else
              {
                *(_DWORD *)v89 = 0;
                v90 = v89 + 4;
              }
              *(_QWORD *)(a1 + 40) = v90;
              v99 = *((_QWORD *)this + 1);
              if (v99 > 0xFFFFFFFFFFFFFFFBLL || v99 + 4 > *((_QWORD *)this + 2))
              {
LABEL_182:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v90 - 1) = *(_DWORD *)(*(_QWORD *)this + v99);
              v87 = *((_QWORD *)this + 2);
              v86 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v86;
            }
LABEL_183:
            PB::Reader::recallMark();
          }
          else
          {
            v136 = *(char **)(a1 + 40);
            v135 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v136 >= v135)
            {
              v147 = (char *)*v8;
              v148 = (v136 - (_BYTE *)*v8) >> 2;
              v149 = v148 + 1;
              if ((unint64_t)(v148 + 1) >> 62)
LABEL_254:
                sub_18F26F8C0();
              v150 = v135 - (_QWORD)v147;
              if (v150 >> 1 > v149)
                v149 = v150 >> 1;
              if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL)
                v151 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v151 = v149;
              if (v151)
              {
                v152 = (char *)sub_18F26FB8C(v9, v151);
                v147 = *(char **)(a1 + 32);
                v136 = *(char **)(a1 + 40);
              }
              else
              {
                v152 = 0;
              }
              v155 = &v152[4 * v148];
              *(_DWORD *)v155 = 0;
              v114 = v155 + 4;
              while (v136 != v147)
              {
                v156 = *((_DWORD *)v136 - 1);
                v136 -= 4;
                *((_DWORD *)v155 - 1) = v156;
                v155 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v155;
              *(_QWORD *)(a1 + 40) = v114;
              *(_QWORD *)(a1 + 48) = &v152[4 * v151];
              if (v147)
                operator delete(v147);
            }
            else
            {
              *(_DWORD *)v136 = 0;
              v114 = v136 + 4;
            }
            *(_QWORD *)(a1 + 40) = v114;
LABEL_238:
            v157 = *((_QWORD *)this + 1);
            if (v157 <= 0xFFFFFFFFFFFFFFFBLL && v157 + 4 <= *((_QWORD *)this + 2))
            {
              *(v114 - 1) = *(_DWORD *)(*(_QWORD *)this + v157);
LABEL_242:
              v67 = *((_QWORD *)this + 1) + 4;
LABEL_243:
              *((_QWORD *)this + 1) = v67;
            }
            else
            {
LABEL_240:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_244:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 0xDu:
          *(_WORD *)(a1 + 116) |= 4u;
          v100 = *((_QWORD *)this + 1);
          v101 = *((_QWORD *)this + 2);
          v102 = *(_QWORD *)this;
          if (v100 <= 0xFFFFFFFFFFFFFFF5 && v100 + 10 <= v101)
          {
            v103 = 0;
            v104 = 0;
            v105 = 0;
            do
            {
              v106 = v100 + 1;
              *((_QWORD *)this + 1) = v100 + 1;
              v107 = *(_BYTE *)(v102 + v100);
              v105 |= (unint64_t)(v107 & 0x7F) << v103;
              if ((v107 & 0x80) == 0)
                goto LABEL_223;
              v103 += 7;
              v100 = v106;
              v18 = v104++ > 8;
            }
            while (!v18);
LABEL_179:
            LODWORD(v105) = 0;
            goto LABEL_223;
          }
          v137 = 0;
          v138 = 0;
          v105 = 0;
          if (v101 <= v100)
            v101 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v101 == v100)
            {
              LODWORD(v105) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v139 = v100 + 1;
              v140 = *(_BYTE *)(v102 + v100);
              *((_QWORD *)this + 1) = v139;
              v105 |= (unint64_t)(v140 & 0x7F) << v137;
              if (v140 < 0)
              {
                v137 += 7;
                v100 = v139;
                v18 = v138++ > 8;
                if (v18)
                  goto LABEL_179;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v105) = 0;
            }
            break;
          }
LABEL_223:
          *(_DWORD *)(a1 + 80) = v105;
          goto LABEL_244;
        case 0xEu:
          *(_WORD *)(a1 + 116) |= 0x400u;
          v108 = *((_QWORD *)this + 1);
          if (v108 >= *((_QWORD *)this + 2))
          {
            v111 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v109 = v108 + 1;
            v110 = *(unsigned __int8 *)(*(_QWORD *)this + v108);
            *((_QWORD *)this + 1) = v109;
            v111 = v110 != 0;
          }
          *(_BYTE *)(a1 + 112) = v111;
          goto LABEL_244;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_244;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

double sub_18F2835B0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294F6A8;
  *(_DWORD *)(a1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_18F2835E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  float *v5;
  float *v6;
  float v7;
  __int16 v8;
  float *v9;
  float *v10;
  float v11;
  __int16 v12;

  v3 = result;
  v4 = *(const PB::Base **)(result + 72);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(float **)(v3 + 8);
  v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x40) != 0)
  {
    result = PB::Writer::write(this, *(float *)(v3 + 96));
    v8 = *(_WORD *)(v3 + 116);
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x10) == 0)
        goto LABEL_9;
      goto LABEL_25;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  result = PB::Writer::writeVarInt(this);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x10) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(double *)(v3 + 64));
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 0x200) == 0)
  {
LABEL_12:
    if ((v8 & 1) == 0)
      goto LABEL_13;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 1) == 0)
  {
LABEL_13:
    if ((v8 & 8) == 0)
      goto LABEL_14;
LABEL_30:
    result = PB::Writer::write(this, *(float *)(v3 + 84));
    if ((*(_WORD *)(v3 + 116) & 0x80) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v8 = *(_WORD *)(v3 + 116);
  if ((v8 & 8) != 0)
    goto LABEL_30;
LABEL_14:
  if ((v8 & 0x80) != 0)
LABEL_15:
    result = PB::Writer::write(this, *(float *)(v3 + 100));
LABEL_16:
  v9 = *(float **)(v3 + 32);
  v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    result = PB::Writer::write(this, v11);
  }
  v12 = *(_WORD *)(v3 + 116);
  if ((v12 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v12 = *(_WORD *)(v3 + 116);
  }
  if ((v12 & 0x400) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F28379C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if (!result[9])
  {
    v1 = result;
    v2 = operator new();
    *(_QWORD *)v2 = &off_1E294F6A8;
    *(_DWORD *)(v2 + 152) = 0;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_QWORD *)(v2 + 120) = 0;
    result = (_QWORD *)v1[9];
    v1[9] = v2;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_18F283830(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E294F6A8;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

void sub_18F2838B0(PB::Base *a1)
{
  sub_18F283830(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2838D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  float *v5;
  float *v6;
  float v7;
  float *v8;
  float *v9;
  float v10;
  float *v11;
  float *v12;
  float v13;
  float *v14;
  float *v15;
  float v16;
  char v17;
  float *v18;
  float *v19;
  float v20;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(float **)(a1 + 8);
  v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "acceleration", v7);
  }
  v8 = *(float **)(a1 + 32);
  v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "biasCovariance", v10);
  }
  v11 = *(float **)(a1 + 56);
  v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "quaternion", v13);
  }
  v14 = *(float **)(a1 + 80);
  v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "rotationRate", v16);
  }
  v17 = *(_BYTE *)(a1 + 152);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(this, "sensorTime");
    v17 = *(_BYTE *)(a1 + 152);
    if ((v17 & 4) == 0)
    {
LABEL_11:
      if ((v17 & 8) == 0)
        goto LABEL_12;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(a1 + 152) & 4) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "status");
  v17 = *(_BYTE *)(a1 + 152);
  if ((v17 & 8) == 0)
  {
LABEL_12:
    if ((v17 & 2) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_19:
  PB::TextFormatter::format(this, "statusDeprecated");
  if ((*(_BYTE *)(a1 + 152) & 2) != 0)
LABEL_13:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
LABEL_14:
  v18 = *(float **)(a1 + 104);
  v19 = *(float **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "userAcceleration", v20);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F283A70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  _DWORD *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  _DWORD *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _DWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  unint64_t v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char *v102;
  _DWORD *v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char v116;
  unsigned int v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  char *v122;
  _DWORD *v123;
  unint64_t v124;
  char *v125;
  unint64_t v126;
  char *v127;
  unint64_t v128;
  char *v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  unint64_t v136;
  char v137;
  unint64_t v138;
  char *v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  char *v174;
  int v175;
  char *v176;
  int v177;
  char *v178;
  int v179;
  char *v180;
  int v181;
  char *v182;
  int v183;
  unint64_t v184;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void **v192;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v191 = a1 + 120;
    v192 = (void **)(a1 + 104);
    v8 = (void **)(a1 + 8);
    v9 = (void **)(a1 + 32);
    v189 = a1 + 48;
    v190 = a1 + 24;
    v10 = (void **)(a1 + 80);
    v11 = (void **)(a1 + 56);
    v187 = a1 + 72;
    v188 = a1 + 96;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 152) |= 2u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_291;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v25);
          v26 = *((_QWORD *)this + 1) + 8;
          goto LABEL_293;
        case 2u:
          if (v24 != 2)
          {
            v122 = *(char **)(a1 + 64);
            v121 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v122 >= v121)
            {
              v144 = (char *)*v11;
              v145 = (v122 - (_BYTE *)*v11) >> 2;
              v146 = v145 + 1;
              if ((unint64_t)(v145 + 1) >> 62)
LABEL_304:
                sub_18F26F8C0();
              v147 = v121 - (_QWORD)v144;
              if (v147 >> 1 > v146)
                v146 = v147 >> 1;
              if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFFCLL)
                v148 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v148 = v146;
              if (v148)
              {
                v149 = (char *)sub_18F26FB8C(v187, v148);
                v144 = *(char **)(a1 + 56);
                v122 = *(char **)(a1 + 64);
              }
              else
              {
                v149 = 0;
              }
              v174 = &v149[4 * v145];
              *(_DWORD *)v174 = 0;
              v123 = v174 + 4;
              while (v122 != v144)
              {
                v175 = *((_DWORD *)v122 - 1);
                v122 -= 4;
                *((_DWORD *)v174 - 1) = v175;
                v174 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v174;
              *(_QWORD *)(a1 + 64) = v123;
              *(_QWORD *)(a1 + 72) = &v149[4 * v148];
              if (v144)
                operator delete(v144);
            }
            else
            {
              *(_DWORD *)v122 = 0;
              v123 = v122 + 4;
            }
            *(_QWORD *)(a1 + 64) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v27 = *((_QWORD *)this + 1);
          v28 = *((_QWORD *)this + 2);
          while (v27 < v28 && !*((_BYTE *)this + 24))
          {
            v30 = *(char **)(a1 + 64);
            v29 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v30 >= v29)
            {
              v32 = (char *)*v11;
              v33 = (v30 - (_BYTE *)*v11) >> 2;
              v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62)
                goto LABEL_304;
              v35 = v29 - (_QWORD)v32;
              if (v35 >> 1 > v34)
                v34 = v35 >> 1;
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
                v36 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v36 = v34;
              if (v36)
              {
                v37 = (char *)sub_18F26FB8C(v187, v36);
                v32 = *(char **)(a1 + 56);
                v30 = *(char **)(a1 + 64);
              }
              else
              {
                v37 = 0;
              }
              v38 = &v37[4 * v33];
              *(_DWORD *)v38 = 0;
              v31 = v38 + 4;
              while (v30 != v32)
              {
                v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(_QWORD *)(a1 + 56) = v38;
              *(_QWORD *)(a1 + 64) = v31;
              *(_QWORD *)(a1 + 72) = &v37[4 * v36];
              if (v32)
                operator delete(v32);
            }
            else
            {
              *(_DWORD *)v30 = 0;
              v31 = v30 + 4;
            }
            *(_QWORD *)(a1 + 64) = v31;
            v40 = *((_QWORD *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v31 - 1) = *(_DWORD *)(*(_QWORD *)this + v40);
            v28 = *((_QWORD *)this + 2);
            v27 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v27;
          }
          goto LABEL_170;
        case 3u:
          if (v24 != 2)
          {
            v125 = *(char **)(a1 + 88);
            v124 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v125 >= v124)
            {
              v150 = (char *)*v10;
              v151 = (v125 - (_BYTE *)*v10) >> 2;
              v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 62)
LABEL_305:
                sub_18F26F8C0();
              v153 = v124 - (_QWORD)v150;
              if (v153 >> 1 > v152)
                v152 = v153 >> 1;
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL)
                v154 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v154 = v152;
              if (v154)
              {
                v155 = (char *)sub_18F26FB8C(v188, v154);
                v150 = *(char **)(a1 + 80);
                v125 = *(char **)(a1 + 88);
              }
              else
              {
                v155 = 0;
              }
              v176 = &v155[4 * v151];
              *(_DWORD *)v176 = 0;
              v123 = v176 + 4;
              while (v125 != v150)
              {
                v177 = *((_DWORD *)v125 - 1);
                v125 -= 4;
                *((_DWORD *)v176 - 1) = v177;
                v176 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v176;
              *(_QWORD *)(a1 + 88) = v123;
              *(_QWORD *)(a1 + 96) = &v155[4 * v154];
              if (v150)
                operator delete(v150);
            }
            else
            {
              *(_DWORD *)v125 = 0;
              v123 = v125 + 4;
            }
            *(_QWORD *)(a1 + 88) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v41 = *((_QWORD *)this + 1);
          v42 = *((_QWORD *)this + 2);
          while (v41 < v42 && !*((_BYTE *)this + 24))
          {
            v44 = *(char **)(a1 + 88);
            v43 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v44 >= v43)
            {
              v46 = (char *)*v10;
              v47 = (v44 - (_BYTE *)*v10) >> 2;
              v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62)
                goto LABEL_305;
              v49 = v43 - (_QWORD)v46;
              if (v49 >> 1 > v48)
                v48 = v49 >> 1;
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
                v50 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v50 = v48;
              if (v50)
              {
                v51 = (char *)sub_18F26FB8C(v188, v50);
                v46 = *(char **)(a1 + 80);
                v44 = *(char **)(a1 + 88);
              }
              else
              {
                v51 = 0;
              }
              v52 = &v51[4 * v47];
              *(_DWORD *)v52 = 0;
              v45 = v52 + 4;
              while (v44 != v46)
              {
                v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(_QWORD *)(a1 + 80) = v52;
              *(_QWORD *)(a1 + 88) = v45;
              *(_QWORD *)(a1 + 96) = &v51[4 * v50];
              if (v46)
                operator delete(v46);
            }
            else
            {
              *(_DWORD *)v44 = 0;
              v45 = v44 + 4;
            }
            *(_QWORD *)(a1 + 88) = v45;
            v54 = *((_QWORD *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v45 - 1) = *(_DWORD *)(*(_QWORD *)this + v54);
            v42 = *((_QWORD *)this + 2);
            v41 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v41;
          }
          goto LABEL_170;
        case 4u:
          if (v24 != 2)
          {
            v127 = *(char **)(a1 + 40);
            v126 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v127 >= v126)
            {
              v156 = (char *)*v9;
              v157 = (v127 - (_BYTE *)*v9) >> 2;
              v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62)
LABEL_306:
                sub_18F26F8C0();
              v159 = v126 - (_QWORD)v156;
              if (v159 >> 1 > v158)
                v158 = v159 >> 1;
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL)
                v160 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v160 = v158;
              if (v160)
              {
                v161 = (char *)sub_18F26FB8C(v189, v160);
                v156 = *(char **)(a1 + 32);
                v127 = *(char **)(a1 + 40);
              }
              else
              {
                v161 = 0;
              }
              v178 = &v161[4 * v157];
              *(_DWORD *)v178 = 0;
              v123 = v178 + 4;
              while (v127 != v156)
              {
                v179 = *((_DWORD *)v127 - 1);
                v127 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v178;
              *(_QWORD *)(a1 + 40) = v123;
              *(_QWORD *)(a1 + 48) = &v161[4 * v160];
              if (v156)
                operator delete(v156);
            }
            else
            {
              *(_DWORD *)v127 = 0;
              v123 = v127 + 4;
            }
            *(_QWORD *)(a1 + 40) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v55 = *((_QWORD *)this + 1);
          v56 = *((_QWORD *)this + 2);
          while (v55 < v56 && !*((_BYTE *)this + 24))
          {
            v58 = *(char **)(a1 + 40);
            v57 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v58 >= v57)
            {
              v60 = (char *)*v9;
              v61 = (v58 - (_BYTE *)*v9) >> 2;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 62)
                goto LABEL_306;
              v63 = v57 - (_QWORD)v60;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_18F26FB8C(v189, v64);
                v60 = *(char **)(a1 + 32);
                v58 = *(char **)(a1 + 40);
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v61];
              *(_DWORD *)v66 = 0;
              v59 = v66 + 4;
              while (v58 != v60)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              *(_QWORD *)(a1 + 32) = v66;
              *(_QWORD *)(a1 + 40) = v59;
              *(_QWORD *)(a1 + 48) = &v65[4 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_DWORD *)v58 = 0;
              v59 = v58 + 4;
            }
            *(_QWORD *)(a1 + 40) = v59;
            v68 = *((_QWORD *)this + 1);
            if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v59 - 1) = *(_DWORD *)(*(_QWORD *)this + v68);
            v56 = *((_QWORD *)this + 2);
            v55 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v55;
          }
          goto LABEL_170;
        case 5u:
          if (v24 != 2)
          {
            v129 = *(char **)(a1 + 16);
            v128 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v129 >= v128)
            {
              v162 = (char *)*v8;
              v163 = (v129 - (_BYTE *)*v8) >> 2;
              v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62)
LABEL_307:
                sub_18F26F8C0();
              v165 = v128 - (_QWORD)v162;
              if (v165 >> 1 > v164)
                v164 = v165 >> 1;
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
                v166 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v166 = v164;
              if (v166)
              {
                v167 = (char *)sub_18F26FB8C(v190, v166);
                v162 = *(char **)(a1 + 8);
                v129 = *(char **)(a1 + 16);
              }
              else
              {
                v167 = 0;
              }
              v180 = &v167[4 * v163];
              *(_DWORD *)v180 = 0;
              v123 = v180 + 4;
              while (v129 != v162)
              {
                v181 = *((_DWORD *)v129 - 1);
                v129 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v180;
              *(_QWORD *)(a1 + 16) = v123;
              *(_QWORD *)(a1 + 24) = &v167[4 * v166];
              if (v162)
                operator delete(v162);
            }
            else
            {
              *(_DWORD *)v129 = 0;
              v123 = v129 + 4;
            }
            *(_QWORD *)(a1 + 16) = v123;
            goto LABEL_289;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v69 = *((_QWORD *)this + 1);
          v70 = *((_QWORD *)this + 2);
          while (v69 < v70 && !*((_BYTE *)this + 24))
          {
            v72 = *(char **)(a1 + 16);
            v71 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              v74 = (char *)*v8;
              v75 = (v72 - (_BYTE *)*v8) >> 2;
              v76 = v75 + 1;
              if ((unint64_t)(v75 + 1) >> 62)
                goto LABEL_307;
              v77 = v71 - (_QWORD)v74;
              if (v77 >> 1 > v76)
                v76 = v77 >> 1;
              if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
                v78 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v78 = v76;
              if (v78)
              {
                v79 = (char *)sub_18F26FB8C(v190, v78);
                v74 = *(char **)(a1 + 8);
                v72 = *(char **)(a1 + 16);
              }
              else
              {
                v79 = 0;
              }
              v80 = &v79[4 * v75];
              *(_DWORD *)v80 = 0;
              v73 = v80 + 4;
              while (v72 != v74)
              {
                v81 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v80 - 1) = v81;
                v80 -= 4;
              }
              *(_QWORD *)(a1 + 8) = v80;
              *(_QWORD *)(a1 + 16) = v73;
              *(_QWORD *)(a1 + 24) = &v79[4 * v78];
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_DWORD *)v72 = 0;
              v73 = v72 + 4;
            }
            *(_QWORD *)(a1 + 16) = v73;
            v82 = *((_QWORD *)this + 1);
            if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((_QWORD *)this + 2))
              goto LABEL_169;
            *(v73 - 1) = *(_DWORD *)(*(_QWORD *)this + v82);
            v70 = *((_QWORD *)this + 2);
            v69 = *((_QWORD *)this + 1) + 4;
            *((_QWORD *)this + 1) = v69;
          }
          goto LABEL_170;
        case 6u:
          *(_BYTE *)(a1 + 152) |= 8u;
          v83 = *((_QWORD *)this + 1);
          v84 = *((_QWORD *)this + 2);
          v85 = *(_QWORD *)this;
          if (v83 <= 0xFFFFFFFFFFFFFFF5 && v83 + 10 <= v84)
          {
            v86 = 0;
            v87 = 0;
            v88 = 0;
            do
            {
              v89 = v83 + 1;
              *((_QWORD *)this + 1) = v83 + 1;
              v90 = *(_BYTE *)(v85 + v83);
              v88 |= (unint64_t)(v90 & 0x7F) << v86;
              if ((v90 & 0x80) == 0)
                goto LABEL_247;
              v86 += 7;
              v83 = v89;
              v18 = v87++ > 8;
            }
            while (!v18);
LABEL_185:
            LODWORD(v88) = 0;
            goto LABEL_247;
          }
          v130 = 0;
          v131 = 0;
          v88 = 0;
          if (v84 <= v83)
            v84 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v84 == v83)
            {
              LODWORD(v88) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v132 = v83 + 1;
              v133 = *(_BYTE *)(v85 + v83);
              *((_QWORD *)this + 1) = v132;
              v88 |= (unint64_t)(v133 & 0x7F) << v130;
              if (v133 < 0)
              {
                v130 += 7;
                v83 = v132;
                v18 = v131++ > 8;
                if (v18)
                  goto LABEL_185;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v88) = 0;
            }
            break;
          }
LABEL_247:
          *(_DWORD *)(a1 + 148) = v88;
          goto LABEL_294;
        case 7u:
          *(_BYTE *)(a1 + 152) |= 1u;
          v91 = *((_QWORD *)this + 1);
          v92 = *((_QWORD *)this + 2);
          v93 = *(_QWORD *)this;
          if (v91 <= 0xFFFFFFFFFFFFFFF5 && v91 + 10 <= v92)
          {
            v94 = 0;
            v95 = 0;
            v96 = 0;
            do
            {
              v97 = v91 + 1;
              *((_QWORD *)this + 1) = v91 + 1;
              v98 = *(_BYTE *)(v93 + v91);
              v96 |= (unint64_t)(v98 & 0x7F) << v94;
              if ((v98 & 0x80) == 0)
                goto LABEL_250;
              v94 += 7;
              v91 = v97;
              v18 = v95++ > 8;
            }
            while (!v18);
LABEL_192:
            v96 = 0;
            goto LABEL_250;
          }
          v134 = 0;
          v135 = 0;
          v96 = 0;
          if (v92 <= v91)
            v92 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v92 == v91)
            {
              v96 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v136 = v91 + 1;
              v137 = *(_BYTE *)(v93 + v91);
              *((_QWORD *)this + 1) = v136;
              v96 |= (unint64_t)(v137 & 0x7F) << v134;
              if (v137 < 0)
              {
                v134 += 7;
                v91 = v136;
                v18 = v135++ > 8;
                if (v18)
                  goto LABEL_192;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v96 = 0;
            }
            break;
          }
LABEL_250:
          *(_QWORD *)(a1 + 128) = v96;
          goto LABEL_294;
        case 8u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v99 = *((_QWORD *)this + 1);
            v100 = *((_QWORD *)this + 2);
            while (v99 < v100 && !*((_BYTE *)this + 24))
            {
              v102 = *(char **)(a1 + 112);
              v101 = *(_QWORD *)(a1 + 120);
              if ((unint64_t)v102 >= v101)
              {
                v104 = (char *)*v192;
                v105 = (v102 - (_BYTE *)*v192) >> 2;
                v106 = v105 + 1;
                if ((unint64_t)(v105 + 1) >> 62)
                  goto LABEL_308;
                v107 = v101 - (_QWORD)v104;
                if (v107 >> 1 > v106)
                  v106 = v107 >> 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFFCLL)
                  v108 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v108 = v106;
                if (v108)
                {
                  v109 = (char *)sub_18F26FB8C(v191, v108);
                  v104 = *(char **)(a1 + 104);
                  v102 = *(char **)(a1 + 112);
                }
                else
                {
                  v109 = 0;
                }
                v110 = &v109[4 * v105];
                *(_DWORD *)v110 = 0;
                v103 = v110 + 4;
                while (v102 != v104)
                {
                  v111 = *((_DWORD *)v102 - 1);
                  v102 -= 4;
                  *((_DWORD *)v110 - 1) = v111;
                  v110 -= 4;
                }
                *(_QWORD *)(a1 + 104) = v110;
                *(_QWORD *)(a1 + 112) = v103;
                *(_QWORD *)(a1 + 120) = &v109[4 * v108];
                if (v104)
                  operator delete(v104);
              }
              else
              {
                *(_DWORD *)v102 = 0;
                v103 = v102 + 4;
              }
              *(_QWORD *)(a1 + 112) = v103;
              v112 = *((_QWORD *)this + 1);
              if (v112 > 0xFFFFFFFFFFFFFFFBLL || v112 + 4 > *((_QWORD *)this + 2))
              {
LABEL_169:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v103 - 1) = *(_DWORD *)(*(_QWORD *)this + v112);
              v100 = *((_QWORD *)this + 2);
              v99 = *((_QWORD *)this + 1) + 4;
              *((_QWORD *)this + 1) = v99;
            }
LABEL_170:
            PB::Reader::recallMark();
          }
          else
          {
            v139 = *(char **)(a1 + 112);
            v138 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v139 >= v138)
            {
              v168 = (char *)*v192;
              v169 = (v139 - (_BYTE *)*v192) >> 2;
              v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 62)
LABEL_308:
                sub_18F26F8C0();
              v171 = v138 - (_QWORD)v168;
              if (v171 >> 1 > v170)
                v170 = v171 >> 1;
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
                v172 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v172 = v170;
              if (v172)
              {
                v173 = (char *)sub_18F26FB8C(v191, v172);
                v168 = *(char **)(a1 + 104);
                v139 = *(char **)(a1 + 112);
              }
              else
              {
                v173 = 0;
              }
              v182 = &v173[4 * v169];
              *(_DWORD *)v182 = 0;
              v123 = v182 + 4;
              while (v139 != v168)
              {
                v183 = *((_DWORD *)v139 - 1);
                v139 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }
              *(_QWORD *)(a1 + 104) = v182;
              *(_QWORD *)(a1 + 112) = v123;
              *(_QWORD *)(a1 + 120) = &v173[4 * v172];
              if (v168)
                operator delete(v168);
            }
            else
            {
              *(_DWORD *)v139 = 0;
              v123 = v139 + 4;
            }
            *(_QWORD *)(a1 + 112) = v123;
LABEL_289:
            v184 = *((_QWORD *)this + 1);
            if (v184 <= 0xFFFFFFFFFFFFFFFBLL && v184 + 4 <= *((_QWORD *)this + 2))
            {
              *(v123 - 1) = *(_DWORD *)(*(_QWORD *)this + v184);
              v26 = *((_QWORD *)this + 1) + 4;
LABEL_293:
              *((_QWORD *)this + 1) = v26;
            }
            else
            {
LABEL_291:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_294:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 9u:
          *(_BYTE *)(a1 + 152) |= 4u;
          v113 = *((_QWORD *)this + 1);
          v114 = *((_QWORD *)this + 2);
          v115 = *(_QWORD *)this;
          if (v113 <= 0xFFFFFFFFFFFFFFF5 && v113 + 10 <= v114)
          {
            v116 = 0;
            v117 = 0;
            v118 = 0;
            do
            {
              v119 = v113 + 1;
              *((_QWORD *)this + 1) = v113 + 1;
              v120 = *(_BYTE *)(v115 + v113);
              v118 |= (unint64_t)(v120 & 0x7F) << v116;
              if ((v120 & 0x80) == 0)
                goto LABEL_253;
              v116 += 7;
              v113 = v119;
              v18 = v117++ > 8;
            }
            while (!v18);
LABEL_201:
            LODWORD(v118) = 0;
            goto LABEL_253;
          }
          v140 = 0;
          v141 = 0;
          v118 = 0;
          if (v114 <= v113)
            v114 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v114 == v113)
            {
              LODWORD(v118) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v142 = v113 + 1;
              v143 = *(_BYTE *)(v115 + v113);
              *((_QWORD *)this + 1) = v142;
              v118 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                v113 = v142;
                v18 = v141++ > 8;
                if (v18)
                  goto LABEL_201;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v118) = 0;
            }
            break;
          }
LABEL_253:
          *(_DWORD *)(a1 + 144) = v118;
          goto LABEL_294;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_294;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2847D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float *v13;
  float *v14;
  float v15;
  char v16;
  float *v17;
  float *v18;
  float v19;

  v3 = result;
  if ((*(_BYTE *)(result + 152) & 2) != 0)
    result = PB::Writer::write(this, *(double *)(result + 136));
  v4 = *(float **)(v3 + 56);
  v5 = *(float **)(v3 + 64);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(float **)(v3 + 80);
  v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(float **)(v3 + 32);
  v11 = *(float **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = *(float **)(v3 + 8);
  v14 = *(float **)(v3 + 16);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15);
  }
  v16 = *(_BYTE *)(v3 + 152);
  if ((v16 & 8) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v16 = *(_BYTE *)(v3 + 152);
  }
  if ((v16 & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  v17 = *(float **)(v3 + 104);
  v18 = *(float **)(v3 + 112);
  while (v17 != v18)
  {
    v19 = *v17++;
    result = PB::Writer::write(this, v19);
  }
  if ((*(_BYTE *)(v3 + 152) & 4) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F284908(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DA00;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F284920(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F284944(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "alsTrustedLux", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2849AC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
        v2 = *((_QWORD *)this + 1) + 8;
      }
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F284B8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_18F284BE4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CDF8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F284BFC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F284C20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "fEndTime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "fConnected");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "fStartTime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F284CB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  int v21;
  BOOL v22;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 4u;
        v2 = *((_QWORD *)this + 1);
        if (v2 >= *((_QWORD *)this + 2))
        {
          v22 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v22 = v21 != 0;
        }
        *(_BYTE *)(a1 + 24) = v22;
        goto LABEL_38;
      }
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_31;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((_DWORD)v20 != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_38;
        }
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
        {
LABEL_31:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_38;
        }
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 8;
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F284ED4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        return result;
      return PB::Writer::write(this);
    }
  }
  else if ((*(_BYTE *)(result + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 28) & 4) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F284F4C(uint64_t result)
{
  *(_DWORD *)(result + 28) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E294D728;
  return result;
}

void sub_18F284F64(PB::Base *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E294D728;
  v4 = *((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_18F26F7EC((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    sub_18F26F7EC((uint64_t)this + 8, v5);
  PB::Base::~Base(this);
}

void sub_18F284FB8(PB::Base *a1)
{
  sub_18F284F64(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F284FDC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    PB::TextFormatter::format(this, "backlightState");
  if (*(_QWORD *)(a1 + 8))
    PB::TextFormatter::format();
  if (*(_QWORD *)(a1 + 16))
    PB::TextFormatter::format();
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F285058(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;
  uint64_t v43;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t *)(a1 + 16);
    v9 = (uint64_t *)(a1 + 8);
    do
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v17 = 0;
        v18 = 0;
        v13 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v19 = v2 + 1;
          v20 = *(_BYTE *)(v10 + v2);
          *((_QWORD *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0)
            goto LABEL_21;
          v17 += 7;
          v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            v13 = 0;
            goto LABEL_21;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        v16 = v12++ > 8;
        if (v16)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        v31 = (_QWORD *)operator new();
        v31[1] = 0;
        v31[2] = 0;
        *v31 = 0;
        v43 = 0;
        v32 = *v8;
        *v8 = (uint64_t)v31;
        if (v32)
        {
          sub_18F26F7EC((uint64_t)v8, v32);
          v33 = v43;
          v43 = 0;
          if (v33)
            sub_18F26F7EC((uint64_t)&v43, v33);
        }
      }
      else
      {
        if ((_DWORD)v22 != 2)
        {
          if ((_DWORD)v22 == 1)
          {
            *(_BYTE *)(a1 + 28) |= 1u;
            v23 = *((_QWORD *)this + 1);
            v24 = *((_QWORD *)this + 2);
            v25 = *(_QWORD *)this;
            if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v24)
            {
              v38 = 0;
              v39 = 0;
              v28 = 0;
              if (v24 <= v23)
                v24 = *((_QWORD *)this + 1);
              while (1)
              {
                if (v24 == v23)
                {
                  LODWORD(v28) = 0;
                  *((_BYTE *)this + 24) = 1;
                  goto LABEL_52;
                }
                v40 = v23 + 1;
                v41 = *(_BYTE *)(v25 + v23);
                *((_QWORD *)this + 1) = v40;
                v28 |= (unint64_t)(v41 & 0x7F) << v38;
                if ((v41 & 0x80) == 0)
                  break;
                v38 += 7;
                v23 = v40;
                v16 = v39++ > 8;
                if (v16)
                {
LABEL_48:
                  LODWORD(v28) = 0;
                  goto LABEL_52;
                }
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v28) = 0;
            }
            else
            {
              v26 = 0;
              v27 = 0;
              v28 = 0;
              while (1)
              {
                v29 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v30 = *(_BYTE *)(v25 + v23);
                v28 |= (unint64_t)(v30 & 0x7F) << v26;
                if ((v30 & 0x80) == 0)
                  break;
                v26 += 7;
                v23 = v29;
                v16 = v27++ > 8;
                if (v16)
                  goto LABEL_48;
              }
            }
LABEL_52:
            *(_DWORD *)(a1 + 24) = v28;
          }
          else
          {
            result = PB::Reader::skip(this);
            if (!(_DWORD)result)
              return result;
          }
          goto LABEL_53;
        }
        v34 = (_QWORD *)operator new();
        v34[1] = 0;
        v34[2] = 0;
        *v34 = 0;
        v43 = 0;
        v35 = *v9;
        *v9 = (uint64_t)v34;
        if (v35)
        {
          sub_18F26F7EC((uint64_t)v9, v35);
          v36 = v43;
          v43 = 0;
          if (v36)
            sub_18F26F7EC((uint64_t)&v43, v36);
        }
      }
      PB::Reader::read();
LABEL_53:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && v4 == 0);
  }
  return v4 == 0;
}

uint64_t sub_18F28535C(uint64_t result, PB::Writer *this)
{
  uint64_t v2;

  v2 = result;
  if ((*(_BYTE *)(result + 28) & 1) != 0)
    result = PB::Writer::writeVarInt(this);
  if (*(_QWORD *)(v2 + 8))
    result = PB::Writer::write();
  if (*(_QWORD *)(v2 + 16))
    return PB::Writer::write();
  return result;
}

uint64_t sub_18F2853C4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294EDB0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F2853DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F285400(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "inCoex");
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "subType");
      if ((*(_BYTE *)(a1 + 28) & 1) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "reserved");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 1) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2854B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_70;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  v37 = v21++;
                  v38 = *(_BYTE *)(v22 + v37);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    v2 = v37 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_63;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_64;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 20) = v25;
              goto LABEL_70;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 24) = v28;
              goto LABEL_70;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v29 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v30 = *(_QWORD *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v33 = 0;
                if (v2 <= v29)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  v41 = v29++;
                  v42 = *(_BYTE *)(v30 + v41);
                  *((_QWORD *)this + 1) = v29;
                  v33 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_68:
                    v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v33) = 0;
                goto LABEL_68;
              }
              v31 = 0;
              v32 = 0;
              v33 = 0;
              do
              {
                v2 = v29 + 1;
                *((_QWORD *)this + 1) = v29 + 1;
                v34 = *(_BYTE *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0)
                  goto LABEL_69;
                v31 += 7;
                v29 = v2;
                v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 16) = v33;
LABEL_70:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_70;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F285880(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_8:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F285914(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951120;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F28592C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F285950(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "activeCoex");
    v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "avgTemperature", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "blackout");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "gradient", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "instTemperature", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "isSettle");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "rapidGradientChange");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
LABEL_23:
    PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 40));
    if ((*(_WORD *)(a1 + 48) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_22:
  PB::TextFormatter::format(this, "state");
  v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) != 0)
    goto LABEL_23;
LABEL_11:
  if ((v5 & 2) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F285AE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  unint64_t v37;
  char v38;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_WORD *)(a1 + 48) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_30:
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_75;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 4u:
              *(_WORD *)(a1 + 48) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 48) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 47) = v22;
              goto LABEL_81;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 45) = v24;
              goto LABEL_81;
            case 7u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 44) = v26;
              goto LABEL_81;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v35 = 0;
                v36 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_80;
                  }
                  v37 = v27++;
                  v38 = *(_BYTE *)(v28 + v37);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0)
                    break;
                  v35 += 7;
                  v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_79:
                    v2 = v37 + 1;
                    goto LABEL_80;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_79;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_80;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_80:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_81:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_55;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_74:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_75:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_81;
            case 0xBu:
              *(_WORD *)(a1 + 48) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 46) = v34;
              goto LABEL_81;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_81;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F285FB0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 48);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 16));
    v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  if ((*(_WORD *)(v3 + 48) & 0x200) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F286108(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D290;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_18F286120(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F286144(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "reserved");
    v5 = *(_BYTE *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "scaledValue");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "speedThreshold");
    if ((*(_BYTE *)(a1 + 32) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "speedRange");
  v5 = *(_BYTE *)(a1 + 32);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F286214(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  char v70;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v3 > v2)
          v2 = v3;
        while (v2 != v3)
        {
          v17 = v3 + 1;
          v18 = *(_BYTE *)(v8 + v3);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v3 + 1;
          *((_QWORD *)this + 1) = v3 + 1;
          v13 = *(_BYTE *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v3 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 32) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v51 = 0;
                v52 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  v53 = v20++;
                  v54 = *(_BYTE *)(v21 + v53);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0)
                    break;
                  v51 += 7;
                  v14 = v52++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_102;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_102:
                v3 = v53 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v3 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_103;
                  v22 += 7;
                  v20 = v3;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_103:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_124;
            case 2u:
              *(_BYTE *)(a1 + 32) |= 0x10u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v55 = 0;
                v56 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  v57 = v27++;
                  v58 = *(_BYTE *)(v28 + v57);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0)
                    break;
                  v55 += 7;
                  v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_107:
                    v3 = v57 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_107;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v3 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_108;
                v29 += 7;
                v27 = v3;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_124;
            case 3u:
              *(_BYTE *)(a1 + 32) |= 8u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v59 = 0;
                v60 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  v61 = v33++;
                  v62 = *(_BYTE *)(v34 + v61);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0)
                    break;
                  v59 += 7;
                  v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    v3 = v61 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_112;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v3 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_113;
                v35 += 7;
                v33 = v3;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_124;
            case 4u:
              *(_BYTE *)(a1 + 32) |= 4u;
              v39 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v40 = *(_QWORD *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                v63 = 0;
                v64 = 0;
                v43 = 0;
                if (v2 <= v39)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  v65 = v39++;
                  v66 = *(_BYTE *)(v40 + v65);
                  *((_QWORD *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0)
                    break;
                  v63 += 7;
                  v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    v3 = v65 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v43) = 0;
                goto LABEL_117;
              }
              v41 = 0;
              v42 = 0;
              v43 = 0;
              do
              {
                v3 = v39 + 1;
                *((_QWORD *)this + 1) = v39 + 1;
                v44 = *(_BYTE *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0)
                  goto LABEL_118;
                v41 += 7;
                v39 = v3;
                v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 20) = v43;
              goto LABEL_124;
            case 5u:
              *(_BYTE *)(a1 + 32) |= 2u;
              v45 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v46 = *(_QWORD *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                v67 = 0;
                v68 = 0;
                v49 = 0;
                if (v2 <= v45)
                  v3 = *((_QWORD *)this + 1);
                else
                  v3 = *((_QWORD *)this + 2);
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_123;
                  }
                  v69 = v45++;
                  v70 = *(_BYTE *)(v46 + v69);
                  *((_QWORD *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0)
                    break;
                  v67 += 7;
                  v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_122:
                    v3 = v69 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v49) = 0;
                goto LABEL_122;
              }
              v47 = 0;
              v48 = 0;
              v49 = 0;
              do
              {
                v3 = v45 + 1;
                *((_QWORD *)this + 1) = v45 + 1;
                v50 = *(_BYTE *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0)
                  goto LABEL_123;
                v47 += 7;
                v45 = v3;
                v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_123:
              *(_DWORD *)(a1 + 16) = v49;
LABEL_124:
              v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v3 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              goto LABEL_124;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F286814(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 32);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 32) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F2868C4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E950;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F2868DC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F286900(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "lux", *(float *)(a1 + 16));
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "minPostSUIProx", *(float *)(a1 + 20));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "resetTriggered");
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "possibleObstructed");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 1) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2869D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    v24 = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_58;
                  }
                  v33 = v20++;
                  v34 = *(_BYTE *)(v21 + v33);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    v24 = 0;
                    goto LABEL_57;
                  }
                }
                if (*((_BYTE *)this + 24))
                  v24 = 0;
LABEL_57:
                v2 = v33 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_58;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                v24 = 0;
              }
LABEL_58:
              *(_QWORD *)(a1 + 8) = v24;
              goto LABEL_59;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 25) = v28;
              goto LABEL_59;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 24) = v30;
              goto LABEL_59;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_40;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_53;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_53:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_40:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_59;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_59:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F286D30(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 16));
  }
LABEL_10:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 16));
  return result;
}

uint64_t sub_18F286DE0(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950B70;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F286DF4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950B70;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F286E34(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950B70;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F286E88(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "batchedLocationFixType");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F286EF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v22 = *((_QWORD *)this + 1);
        v23 = *((_QWORD *)this + 2);
        v24 = *(_QWORD *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          v31 = 0;
          v32 = 0;
          v27 = 0;
          if (v23 <= v22)
            v23 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v33 = v22 + 1;
            v34 = *(_BYTE *)(v24 + v22);
            *((_QWORD *)this + 1) = v33;
            v27 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0)
              break;
            v31 += 7;
            v22 = v33;
            v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v27) = 0;
              goto LABEL_47;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v27) = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          while (1)
          {
            v28 = v22 + 1;
            *((_QWORD *)this + 1) = v22 + 1;
            v29 = *(_BYTE *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
              break;
            v25 += 7;
            v22 = v28;
            v14 = v26++ > 8;
            if (v14)
              goto LABEL_43;
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F300F94(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2871AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F287200(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FBB0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F287218(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28723C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "isBatterySaverModeEnabled");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F287288(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F287414(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F287434(uint64_t result)
{
  *(_QWORD *)result = &off_1E294D2C8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F28744C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F287470(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "charged");
    v5 = *(_BYTE *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(_BYTE *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "chargerFamily");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  PB::TextFormatter::format(this, "chargerType");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0)
      goto LABEL_6;
LABEL_13:
    PB::TextFormatter::format(this, "level", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 0x20) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_7;
  }
LABEL_12:
  PB::TextFormatter::format(this, "connected");
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 0x20) != 0)
LABEL_7:
    PB::TextFormatter::format(this, "wasConnected");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F287560(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  unint64_t v45;
  char v46;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 28) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_78;
            case 2u:
              *(_BYTE *)(a1 + 28) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 24) = v22;
              goto LABEL_78;
            case 3u:
              *(_BYTE *)(a1 + 28) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 25) = v24;
              goto LABEL_78;
            case 4u:
              *(_BYTE *)(a1 + 28) |= 4u;
              v25 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v26 = *(_QWORD *)this;
              if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v2)
              {
                v39 = 0;
                v40 = 0;
                v29 = 0;
                if (v2 <= v25)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v25)
                  {
                    LODWORD(v29) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  v41 = v25++;
                  v42 = *(_BYTE *)(v26 + v41);
                  *((_QWORD *)this + 1) = v25;
                  v29 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0)
                    break;
                  v39 += 7;
                  v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v29) = 0;
LABEL_71:
                    v2 = v41 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v29) = 0;
                goto LABEL_71;
              }
              v27 = 0;
              v28 = 0;
              v29 = 0;
              do
              {
                v2 = v25 + 1;
                *((_QWORD *)this + 1) = v25 + 1;
                v30 = *(_BYTE *)(v26 + v25);
                v29 |= (unint64_t)(v30 & 0x7F) << v27;
                if ((v30 & 0x80) == 0)
                  goto LABEL_72;
                v27 += 7;
                v25 = v2;
                v14 = v28++ > 8;
              }
              while (!v14);
              LODWORD(v29) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 20) = v29;
              goto LABEL_78;
            case 5u:
              *(_BYTE *)(a1 + 28) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v32 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v32 = v31 != 0;
              }
              *(_BYTE *)(a1 + 26) = v32;
              goto LABEL_78;
            case 6u:
              *(_BYTE *)(a1 + 28) |= 2u;
              v33 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v34 = *(_QWORD *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                v43 = 0;
                v44 = 0;
                v37 = 0;
                if (v2 <= v33)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_77;
                  }
                  v45 = v33++;
                  v46 = *(_BYTE *)(v34 + v45);
                  *((_QWORD *)this + 1) = v33;
                  v37 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0)
                    break;
                  v43 += 7;
                  v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_76:
                    v2 = v45 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v37) = 0;
                goto LABEL_76;
              }
              v35 = 0;
              v36 = 0;
              v37 = 0;
              do
              {
                v2 = v33 + 1;
                *((_QWORD *)this + 1) = v33 + 1;
                v38 = *(_BYTE *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0)
                  goto LABEL_77;
                v35 += 7;
                v33 = v2;
                v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_77:
              *(_DWORD *)(a1 + 16) = v37;
LABEL_78:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_78;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2879B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 28);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_12:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 28) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

void sub_18F287A84(PB::Base *this)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = &off_1E294DA38;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F287ADC(PB::Base *a1)
{
  sub_18F287A84(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F287B00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;
  double *v6;
  double *v7;
  double v8;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    PB::TextFormatter::format(this, "bioMotionTimestamp", *(double *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "pose");
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    PB::TextFormatter::format(this, "runSmoother");
  v6 = *(double **)(a1 + 8);
  v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F287BBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  char v17;
  unsigned int v18;
  unint64_t v19;
  char v20;
  uint64_t v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 8);
    v9 = a1 + 24;
    while (1)
    {
      v10 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v15 = *(_BYTE *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0)
          break;
        v11 += 7;
        v2 = v14;
        if (v12++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          v22 = operator new();
          v23 = sub_18F31B2C8(v22);
          v24 = *(_QWORD *)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v22;
          if (v24)
          {
            (*(void (**)(uint64_t, double))(*(_QWORD *)v24 + 8))(v24, v23);
            v22 = *(_QWORD *)(a1 + 40);
          }
          if (PB::Reader::placeMark()
            && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v22 + 16))(v22, this) & 1) != 0)
          {
            goto LABEL_27;
          }
          return 0;
        case 2u:
          if ((v13 & 7) == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v25 = *((_QWORD *)this + 1);
            v26 = *((_QWORD *)this + 2);
            while (v25 < v26 && !*((_BYTE *)this + 24))
            {
              v28 = *(char **)(a1 + 16);
              v27 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                v30 = (char *)*v8;
                v31 = (v28 - (_BYTE *)*v8) >> 3;
                v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61)
                  goto LABEL_91;
                v33 = v27 - (_QWORD)v30;
                if (v33 >> 2 > v32)
                  v32 = v33 >> 2;
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                  v34 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v34 = v32;
                if (v34)
                {
                  v35 = (char *)sub_18F26F8D4(v9, v34);
                  v30 = *(char **)(a1 + 8);
                  v28 = *(char **)(a1 + 16);
                }
                else
                {
                  v35 = 0;
                }
                v36 = &v35[8 * v31];
                *(_QWORD *)v36 = 0;
                v29 = v36 + 8;
                while (v28 != v30)
                {
                  v37 = *((_QWORD *)v28 - 1);
                  v28 -= 8;
                  *((_QWORD *)v36 - 1) = v37;
                  v36 -= 8;
                }
                *(_QWORD *)(a1 + 8) = v36;
                *(_QWORD *)(a1 + 16) = v29;
                *(_QWORD *)(a1 + 24) = &v35[8 * v34];
                if (v30)
                  operator delete(v30);
              }
              else
              {
                *(_QWORD *)v28 = 0;
                v29 = v28 + 8;
              }
              *(_QWORD *)(a1 + 16) = v29;
              v38 = *((_QWORD *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
              {
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
              v26 = *((_QWORD *)this + 2);
              v25 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v25;
            }
LABEL_27:
            PB::Reader::recallMark();
          }
          else
          {
            v45 = *(char **)(a1 + 16);
            v44 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              v47 = (char *)*v8;
              v48 = (v45 - (_BYTE *)*v8) >> 3;
              v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 61)
LABEL_91:
                sub_18F26F8C0();
              v50 = v44 - (_QWORD)v47;
              if (v50 >> 2 > v49)
                v49 = v50 >> 2;
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                v51 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v51 = v49;
              if (v51)
              {
                v52 = (char *)sub_18F26F8D4(v9, v51);
                v47 = *(char **)(a1 + 8);
                v45 = *(char **)(a1 + 16);
              }
              else
              {
                v52 = 0;
              }
              v53 = &v52[8 * v48];
              *(_QWORD *)v53 = 0;
              v46 = v53 + 8;
              while (v45 != v47)
              {
                v54 = *((_QWORD *)v45 - 1);
                v45 -= 8;
                *((_QWORD *)v53 - 1) = v54;
                v53 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v53;
              *(_QWORD *)(a1 + 16) = v46;
              *(_QWORD *)(a1 + 24) = &v52[8 * v51];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              v46 = v45 + 8;
            }
            *(_QWORD *)(a1 + 16) = v46;
            v55 = *((_QWORD *)this + 1);
            if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *((_QWORD *)this + 2))
            {
              *(v46 - 1) = *(_QWORD *)(*(_QWORD *)this + v55);
LABEL_82:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_80:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_83:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 3u:
          *(_BYTE *)(a1 + 52) |= 1u;
          v39 = *((_QWORD *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
            goto LABEL_80;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v39);
          goto LABEL_82;
        case 4u:
          *(_BYTE *)(a1 + 52) |= 2u;
          v40 = *((_QWORD *)this + 1);
          if (v40 >= *((_QWORD *)this + 2))
          {
            v43 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v41 = v40 + 1;
            v42 = *(unsigned __int8 *)(*(_QWORD *)this + v40);
            *((_QWORD *)this + 1) = v41;
            v43 = v42 != 0;
          }
          *(_BYTE *)(a1 + 48) = v43;
          goto LABEL_83;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_83;
      }
    }
    v17 = 0;
    v18 = 0;
    v13 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v19 = v2 + 1;
      v20 = *(_BYTE *)(v10 + v2);
      *((_QWORD *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0)
        goto LABEL_21;
      v17 += 7;
      v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        v13 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F288034(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  double *v5;
  double *v6;
  double v7;
  char v8;

  v3 = result;
  v4 = *(const PB::Base **)(result + 40);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(double **)(v3 + 8);
  v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    result = PB::Writer::write(this, v7);
  }
  v8 = *(_BYTE *)(v3 + 52);
  if ((v8 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 32));
    v8 = *(_BYTE *)(v3 + 52);
  }
  if ((v8 & 2) != 0)
    return PB::Writer::write(this);
  return result;
}

_QWORD *sub_18F2880CC(_QWORD *result)
{
  *result = &off_1E294EDE8;
  result[1] = 0;
  return result;
}

void sub_18F2880DC(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EDE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F28811C(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294EDE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F288170(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2881C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294DA38;
        *(_QWORD *)(v20 + 8) = 0;
        *(_QWORD *)(v20 + 16) = 0;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 40) = 0;
        *(_DWORD *)(v20 + 52) = 0;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28839C(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F2883B8(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950160;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_18F2883D0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2883F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "probabilityGenericMotion", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "probabilityHeadMotion", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "probabilityTorsoMotion", *(double *)(a1 + 32));
    if ((*(_BYTE *)(a1 + 48) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "probabilityPedestrianMotion", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 48);
  if ((v5 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 0x10) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2884C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 48) |= 0x10u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 40) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 2u:
          *(_BYTE *)(a1 + 48) |= 2u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 3u:
          *(_BYTE *)(a1 + 48) |= 8u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 4u:
          *(_BYTE *)(a1 + 48) |= 4u;
          v2 = *((_QWORD *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
            goto LABEL_38;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
          goto LABEL_40;
        case 5u:
          *(_BYTE *)(a1 + 48) |= 1u;
          v2 = *((_QWORD *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
          {
            *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_40:
            v2 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((_BYTE *)this + 24) = 1;
          }
          break;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          break;
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F288758(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 48);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 40));
    v4 = *(_BYTE *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 32));
  v4 = *(_BYTE *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 8));
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  if ((*(_BYTE *)(v3 + 48) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

double sub_18F288808(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E29513C0;
  *(_DWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_18F288838(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *(_QWORD *)this = &off_1E29513C0;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 7);
  if (v3)
  {
    *((_QWORD *)this + 8) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 4);
  if (v4)
  {
    *((_QWORD *)this + 5) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 1);
  if (v5)
  {
    *((_QWORD *)this + 2) = v5;
    operator delete(v5);
  }
  PB::Base::~Base(this);
}

void sub_18F2888A8(PB::Base *a1)
{
  sub_18F288838(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2888CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  char v17;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "centerOfRotationEstVars", v7);
  }
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "centerOfRotationEsts", v10);
  }
  v11 = *(double **)(a1 + 56);
  v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "linkLengthEstVars", v13);
  }
  v14 = *(double **)(a1 + 80);
  v15 = *(double **)(a1 + 88);
  while (v14 != v15)
  {
    v16 = *v14++;
    PB::TextFormatter::format(this, "linkLengthEsts", v16);
  }
  v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 1) != 0)
  {
    PB::TextFormatter::format(this, "positionResidualNormMean", *(double *)(a1 + 104));
    v17 = *(_BYTE *)(a1 + 144);
    if ((v17 & 2) == 0)
    {
LABEL_11:
      if ((v17 & 4) == 0)
        goto LABEL_12;
      goto LABEL_18;
    }
  }
  else if ((*(_BYTE *)(a1 + 144) & 2) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "positionResidualNormVar", *(double *)(a1 + 112));
  v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 4) == 0)
  {
LABEL_12:
    if ((v17 & 8) == 0)
      goto LABEL_13;
LABEL_19:
    PB::TextFormatter::format(this, "timestampBegin", *(double *)(a1 + 128));
    if ((*(_BYTE *)(a1 + 144) & 0x10) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_14;
  }
LABEL_18:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
  v17 = *(_BYTE *)(a1 + 144);
  if ((v17 & 8) != 0)
    goto LABEL_19;
LABEL_13:
  if ((v17 & 0x10) != 0)
LABEL_14:
    PB::TextFormatter::format(this, "timestampEnd", *(double *)(a1 + 136));
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F288A5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  _QWORD *v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  char *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 8);
    v131 = a1 + 24;
    v132 = a1 + 72;
    v10 = (void **)(a1 + 80);
    v11 = (void **)(a1 + 32);
    v129 = a1 + 48;
    v130 = a1 + 96;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 144) |= 4u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_210;
        case 2u:
          if (v24 != 2)
          {
            v87 = *(char **)(a1 + 40);
            v86 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v87 >= v86)
            {
              v95 = (char *)*v11;
              v96 = (v87 - (_BYTE *)*v11) >> 3;
              v97 = v96 + 1;
              if ((unint64_t)(v96 + 1) >> 61)
LABEL_219:
                sub_18F26F8C0();
              v98 = v86 - (_QWORD)v95;
              if (v98 >> 2 > v97)
                v97 = v98 >> 2;
              if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8)
                v99 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v99 = v97;
              if (v99)
              {
                v100 = (char *)sub_18F26F8D4(v129, v99);
                v95 = *(char **)(a1 + 32);
                v87 = *(char **)(a1 + 40);
              }
              else
              {
                v100 = 0;
              }
              v119 = &v100[8 * v96];
              *(_QWORD *)v119 = 0;
              v88 = v119 + 8;
              while (v87 != v95)
              {
                v120 = *((_QWORD *)v87 - 1);
                v87 -= 8;
                *((_QWORD *)v119 - 1) = v120;
                v119 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v119;
              *(_QWORD *)(a1 + 40) = v88;
              *(_QWORD *)(a1 + 48) = &v100[8 * v99];
              if (v95)
                operator delete(v95);
            }
            else
            {
              *(_QWORD *)v87 = 0;
              v88 = v87 + 8;
            }
            *(_QWORD *)(a1 + 40) = v88;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 40);
            v28 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v11;
              v32 = (v29 - (_BYTE *)*v11) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_219;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_18F26F8D4(v129, v35);
                v31 = *(char **)(a1 + 32);
                v29 = *(char **)(a1 + 40);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v37;
              *(_QWORD *)(a1 + 40) = v30;
              *(_QWORD *)(a1 + 48) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 40) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
              goto LABEL_136;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_137;
        case 3u:
          if (v24 != 2)
          {
            v90 = *(char **)(a1 + 88);
            v89 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v90 >= v89)
            {
              v101 = (char *)*v10;
              v102 = (v90 - (_BYTE *)*v10) >> 3;
              v103 = v102 + 1;
              if ((unint64_t)(v102 + 1) >> 61)
LABEL_220:
                sub_18F26F8C0();
              v104 = v89 - (_QWORD)v101;
              if (v104 >> 2 > v103)
                v103 = v104 >> 2;
              if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF8)
                v105 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v105 = v103;
              if (v105)
              {
                v106 = (char *)sub_18F26F8D4(v130, v105);
                v101 = *(char **)(a1 + 80);
                v90 = *(char **)(a1 + 88);
              }
              else
              {
                v106 = 0;
              }
              v121 = &v106[8 * v102];
              *(_QWORD *)v121 = 0;
              v88 = v121 + 8;
              while (v90 != v101)
              {
                v122 = *((_QWORD *)v90 - 1);
                v90 -= 8;
                *((_QWORD *)v121 - 1) = v122;
                v121 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v121;
              *(_QWORD *)(a1 + 88) = v88;
              *(_QWORD *)(a1 + 96) = &v106[8 * v105];
              if (v101)
                operator delete(v101);
            }
            else
            {
              *(_QWORD *)v90 = 0;
              v88 = v90 + 8;
            }
            *(_QWORD *)(a1 + 88) = v88;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            v43 = *(char **)(a1 + 88);
            v42 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v10;
              v46 = (v43 - (_BYTE *)*v10) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                goto LABEL_220;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_18F26F8D4(v130, v49);
                v45 = *(char **)(a1 + 80);
                v43 = *(char **)(a1 + 88);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[8 * v46];
              *(_QWORD *)v51 = 0;
              v44 = v51 + 8;
              while (v43 != v45)
              {
                v52 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v51;
              *(_QWORD *)(a1 + 88) = v44;
              *(_QWORD *)(a1 + 96) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v43 = 0;
              v44 = v43 + 8;
            }
            *(_QWORD *)(a1 + 88) = v44;
            v53 = *((_QWORD *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
              goto LABEL_136;
            *(v44 - 1) = *(_QWORD *)(*(_QWORD *)this + v53);
            v41 = *((_QWORD *)this + 2);
            v40 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v40;
          }
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            v92 = *(char **)(a1 + 16);
            v91 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v92 >= v91)
            {
              v107 = (char *)*v9;
              v108 = (v92 - (_BYTE *)*v9) >> 3;
              v109 = v108 + 1;
              if ((unint64_t)(v108 + 1) >> 61)
LABEL_221:
                sub_18F26F8C0();
              v110 = v91 - (_QWORD)v107;
              if (v110 >> 2 > v109)
                v109 = v110 >> 2;
              if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
                v111 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v111 = v109;
              if (v111)
              {
                v112 = (char *)sub_18F26F8D4(v131, v111);
                v107 = *(char **)(a1 + 8);
                v92 = *(char **)(a1 + 16);
              }
              else
              {
                v112 = 0;
              }
              v123 = &v112[8 * v108];
              *(_QWORD *)v123 = 0;
              v88 = v123 + 8;
              while (v92 != v107)
              {
                v124 = *((_QWORD *)v92 - 1);
                v92 -= 8;
                *((_QWORD *)v123 - 1) = v124;
                v123 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v123;
              *(_QWORD *)(a1 + 16) = v88;
              *(_QWORD *)(a1 + 24) = &v112[8 * v111];
              if (v107)
                operator delete(v107);
            }
            else
            {
              *(_QWORD *)v92 = 0;
              v88 = v92 + 8;
            }
            *(_QWORD *)(a1 + 16) = v88;
            goto LABEL_206;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v54 = *((_QWORD *)this + 1);
          v55 = *((_QWORD *)this + 2);
          while (v54 < v55 && !*((_BYTE *)this + 24))
          {
            v57 = *(char **)(a1 + 16);
            v56 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v57 >= v56)
            {
              v59 = (char *)*v9;
              v60 = (v57 - (_BYTE *)*v9) >> 3;
              v61 = v60 + 1;
              if ((unint64_t)(v60 + 1) >> 61)
                goto LABEL_221;
              v62 = v56 - (_QWORD)v59;
              if (v62 >> 2 > v61)
                v61 = v62 >> 2;
              if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                v63 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v63 = v61;
              if (v63)
              {
                v64 = (char *)sub_18F26F8D4(v131, v63);
                v59 = *(char **)(a1 + 8);
                v57 = *(char **)(a1 + 16);
              }
              else
              {
                v64 = 0;
              }
              v65 = &v64[8 * v60];
              *(_QWORD *)v65 = 0;
              v58 = v65 + 8;
              while (v57 != v59)
              {
                v66 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *((_QWORD *)v65 - 1) = v66;
                v65 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v65;
              *(_QWORD *)(a1 + 16) = v58;
              *(_QWORD *)(a1 + 24) = &v64[8 * v63];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *(_QWORD *)v57 = 0;
              v58 = v57 + 8;
            }
            *(_QWORD *)(a1 + 16) = v58;
            v67 = *((_QWORD *)this + 1);
            if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)this + 2))
              goto LABEL_136;
            *(v58 - 1) = *(_QWORD *)(*(_QWORD *)this + v67);
            v55 = *((_QWORD *)this + 2);
            v54 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v54;
          }
          goto LABEL_137;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v68 = *((_QWORD *)this + 1);
            v69 = *((_QWORD *)this + 2);
            while (v68 < v69 && !*((_BYTE *)this + 24))
            {
              v71 = *(char **)(a1 + 64);
              v70 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v71 >= v70)
              {
                v73 = (char *)*v8;
                v74 = (v71 - (_BYTE *)*v8) >> 3;
                v75 = v74 + 1;
                if ((unint64_t)(v74 + 1) >> 61)
                  goto LABEL_222;
                v76 = v70 - (_QWORD)v73;
                if (v76 >> 2 > v75)
                  v75 = v76 >> 2;
                if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
                  v77 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v77 = v75;
                if (v77)
                {
                  v78 = (char *)sub_18F26F8D4(v132, v77);
                  v73 = *(char **)(a1 + 56);
                  v71 = *(char **)(a1 + 64);
                }
                else
                {
                  v78 = 0;
                }
                v79 = &v78[8 * v74];
                *(_QWORD *)v79 = 0;
                v72 = v79 + 8;
                while (v71 != v73)
                {
                  v80 = *((_QWORD *)v71 - 1);
                  v71 -= 8;
                  *((_QWORD *)v79 - 1) = v80;
                  v79 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v79;
                *(_QWORD *)(a1 + 64) = v72;
                *(_QWORD *)(a1 + 72) = &v78[8 * v77];
                if (v73)
                  operator delete(v73);
              }
              else
              {
                *(_QWORD *)v71 = 0;
                v72 = v71 + 8;
              }
              *(_QWORD *)(a1 + 64) = v72;
              v81 = *((_QWORD *)this + 1);
              if (v81 > 0xFFFFFFFFFFFFFFF7 || v81 + 8 > *((_QWORD *)this + 2))
              {
LABEL_136:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v72 - 1) = *(_QWORD *)(*(_QWORD *)this + v81);
              v69 = *((_QWORD *)this + 2);
              v68 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v68;
            }
LABEL_137:
            PB::Reader::recallMark();
          }
          else
          {
            v94 = *(char **)(a1 + 64);
            v93 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v94 >= v93)
            {
              v113 = (char *)*v8;
              v114 = (v94 - (_BYTE *)*v8) >> 3;
              v115 = v114 + 1;
              if ((unint64_t)(v114 + 1) >> 61)
LABEL_222:
                sub_18F26F8C0();
              v116 = v93 - (_QWORD)v113;
              if (v116 >> 2 > v115)
                v115 = v116 >> 2;
              if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8)
                v117 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v117 = v115;
              if (v117)
              {
                v118 = (char *)sub_18F26F8D4(v132, v117);
                v113 = *(char **)(a1 + 56);
                v94 = *(char **)(a1 + 64);
              }
              else
              {
                v118 = 0;
              }
              v125 = &v118[8 * v114];
              *(_QWORD *)v125 = 0;
              v88 = v125 + 8;
              while (v94 != v113)
              {
                v126 = *((_QWORD *)v94 - 1);
                v94 -= 8;
                *((_QWORD *)v125 - 1) = v126;
                v125 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v125;
              *(_QWORD *)(a1 + 64) = v88;
              *(_QWORD *)(a1 + 72) = &v118[8 * v117];
              if (v113)
                operator delete(v113);
            }
            else
            {
              *(_QWORD *)v94 = 0;
              v88 = v94 + 8;
            }
            *(_QWORD *)(a1 + 64) = v88;
LABEL_206:
            v127 = *((_QWORD *)this + 1);
            if (v127 <= 0xFFFFFFFFFFFFFFF7 && v127 + 8 <= *((_QWORD *)this + 2))
            {
              *(v88 - 1) = *(_QWORD *)(*(_QWORD *)this + v127);
LABEL_210:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_208:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_211:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 144) |= 1u;
          v82 = *((_QWORD *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 104) = *(_QWORD *)(*(_QWORD *)this + v82);
          goto LABEL_210;
        case 7u:
          *(_BYTE *)(a1 + 144) |= 2u;
          v83 = *((_QWORD *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFF7 || v83 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(*(_QWORD *)this + v83);
          goto LABEL_210;
        case 8u:
          *(_BYTE *)(a1 + 144) |= 8u;
          v84 = *((_QWORD *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFF7 || v84 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v84);
          goto LABEL_210;
        case 9u:
          *(_BYTE *)(a1 + 144) |= 0x10u;
          v85 = *((_QWORD *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFF7 || v85 + 8 > *((_QWORD *)this + 2))
            goto LABEL_208;
          *(_QWORD *)(a1 + 136) = *(_QWORD *)(*(_QWORD *)this + v85);
          goto LABEL_210;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_211;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F289424(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  char v16;

  v3 = result;
  if ((*(_BYTE *)(result + 144) & 4) != 0)
    result = PB::Writer::write(this, *(double *)(result + 120));
  v4 = *(double **)(v3 + 32);
  v5 = *(double **)(v3 + 40);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 80);
  v8 = *(double **)(v3 + 88);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(double **)(v3 + 8);
  v11 = *(double **)(v3 + 16);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = *(double **)(v3 + 56);
  v14 = *(double **)(v3 + 64);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15);
  }
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 104));
    v16 = *(_BYTE *)(v3 + 144);
    if ((v16 & 2) == 0)
    {
LABEL_17:
      if ((v16 & 8) == 0)
        goto LABEL_18;
      goto LABEL_22;
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 2) == 0)
  {
    goto LABEL_17;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 112));
  v16 = *(_BYTE *)(v3 + 144);
  if ((v16 & 8) == 0)
  {
LABEL_18:
    if ((v16 & 0x10) == 0)
      return result;
    return PB::Writer::write(this, *(double *)(v3 + 136));
  }
LABEL_22:
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  if ((*(_BYTE *)(v3 + 144) & 0x10) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 136));
  return result;
}

uint64_t sub_18F28955C(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951318;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F289574(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F289598(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "timestampEnd", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "updatedLinkLengthY");
      if ((*(_BYTE *)(a1 + 20) & 8) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "updatedLinkLengthX");
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 8) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "updatedLinkLengthZ");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F289648(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v25;
  BOOL v26;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          if (v10++ > 8)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 20) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_40;
            case 2u:
              *(_BYTE *)(a1 + 20) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 16) = v22;
              goto LABEL_40;
            case 3u:
              *(_BYTE *)(a1 + 20) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v24 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v23 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v24 = v23 != 0;
              }
              *(_BYTE *)(a1 + 17) = v24;
              goto LABEL_40;
            case 4u:
              *(_BYTE *)(a1 + 20) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v26 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v25 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v26 = v25 != 0;
              }
              *(_BYTE *)(a1 + 18) = v26;
              goto LABEL_40;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
LABEL_40:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((_BYTE *)this + 24))
                return v4 == 0;
              continue;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F2898C8(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 20);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::write(this);
  }
LABEL_8:
  result = PB::Writer::write(this);
  if ((*(_BYTE *)(v3 + 20) & 8) != 0)
    return PB::Writer::write(this);
  return result;
}

double sub_18F28995C(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294D300;
  *(_DWORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

void sub_18F289994(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = &off_1E294D300;
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 11) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4)
  {
    *((_QWORD *)this + 8) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
  PB::Base::~Base(this);
}

void sub_18F289A14(PB::Base *a1)
{
  sub_18F289994(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F289A38(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  char v11;
  double *v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  double v17;
  double *v18;
  double *v19;
  double v20;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  if ((*(_BYTE *)(a1 + 144) & 2) != 0)
    PB::TextFormatter::format(this, "modelType");
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "rotationRate", v10);
  }
  v11 = *(_BYTE *)(a1 + 144);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "status");
    v11 = *(_BYTE *)(a1 + 144);
  }
  if ((v11 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  v12 = *(double **)(a1 + 56);
  v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    v14 = *v12++;
    PB::TextFormatter::format(this, "translation", v14);
  }
  v15 = *(double **)(a1 + 80);
  v16 = *(double **)(a1 + 88);
  while (v15 != v16)
  {
    v17 = *v15++;
    PB::TextFormatter::format(this, "userAcceleration", v17);
  }
  v18 = *(double **)(a1 + 104);
  v19 = *(double **)(a1 + 112);
  while (v18 != v19)
  {
    v20 = *v18++;
    PB::TextFormatter::format(this, "velocity", v20);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F289BA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char *v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  unint64_t v112;
  char *v113;
  _QWORD *v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  unint64_t v121;
  char *v122;
  char v123;
  unsigned int v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  char v130;
  char *v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void **v179;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v178 = a1 + 120;
    v179 = (void **)(a1 + 104);
    v8 = (void **)(a1 + 80);
    v9 = (void **)(a1 + 32);
    v176 = a1 + 48;
    v177 = a1 + 96;
    v10 = (void **)(a1 + 56);
    v11 = (void **)(a1 + 8);
    v174 = a1 + 24;
    v175 = a1 + 72;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        v18 = v14++ > 8;
        if (v18)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            v113 = *(char **)(a1 + 16);
            v112 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v113 >= v112)
            {
              v131 = (char *)*v11;
              v132 = (v113 - (_BYTE *)*v11) >> 3;
              v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 61)
LABEL_286:
                sub_18F26F8C0();
              v134 = v112 - (_QWORD)v131;
              if (v134 >> 2 > v133)
                v133 = v134 >> 2;
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
                v135 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v135 = v133;
              if (v135)
              {
                v136 = (char *)sub_18F26F8D4(v174, v135);
                v131 = *(char **)(a1 + 8);
                v113 = *(char **)(a1 + 16);
              }
              else
              {
                v136 = 0;
              }
              v161 = &v136[8 * v132];
              *(_QWORD *)v161 = 0;
              v114 = v161 + 8;
              while (v113 != v131)
              {
                v162 = *((_QWORD *)v113 - 1);
                v113 -= 8;
                *((_QWORD *)v161 - 1) = v162;
                v161 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v161;
              *(_QWORD *)(a1 + 16) = v114;
              *(_QWORD *)(a1 + 24) = &v136[8 * v135];
              if (v131)
                operator delete(v131);
            }
            else
            {
              *(_QWORD *)v113 = 0;
              v114 = v113 + 8;
            }
            *(_QWORD *)(a1 + 16) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v25 = *((_QWORD *)this + 1);
          v26 = *((_QWORD *)this + 2);
          while (v25 < v26 && !*((_BYTE *)this + 24))
          {
            v28 = *(char **)(a1 + 16);
            v27 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v28 >= v27)
            {
              v30 = (char *)*v11;
              v31 = (v28 - (_BYTE *)*v11) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_286;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                v35 = (char *)sub_18F26F8D4(v174, v34);
                v30 = *(char **)(a1 + 8);
                v28 = *(char **)(a1 + 16);
              }
              else
              {
                v35 = 0;
              }
              v36 = &v35[8 * v31];
              *(_QWORD *)v36 = 0;
              v29 = v36 + 8;
              while (v28 != v30)
              {
                v37 = *((_QWORD *)v28 - 1);
                v28 -= 8;
                *((_QWORD *)v36 - 1) = v37;
                v36 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v36;
              *(_QWORD *)(a1 + 16) = v29;
              *(_QWORD *)(a1 + 24) = &v35[8 * v34];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_QWORD *)v28 = 0;
              v29 = v28 + 8;
            }
            *(_QWORD *)(a1 + 16) = v29;
            v38 = *((_QWORD *)this + 1);
            if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v29 - 1) = *(_QWORD *)(*(_QWORD *)this + v38);
            v26 = *((_QWORD *)this + 2);
            v25 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v25;
          }
          goto LABEL_163;
        case 2u:
          if (v24 != 2)
          {
            v116 = *(char **)(a1 + 64);
            v115 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v116 >= v115)
            {
              v137 = (char *)*v10;
              v138 = (v116 - (_BYTE *)*v10) >> 3;
              v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 61)
LABEL_287:
                sub_18F26F8C0();
              v140 = v115 - (_QWORD)v137;
              if (v140 >> 2 > v139)
                v139 = v140 >> 2;
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8)
                v141 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v141 = v139;
              if (v141)
              {
                v142 = (char *)sub_18F26F8D4(v175, v141);
                v137 = *(char **)(a1 + 56);
                v116 = *(char **)(a1 + 64);
              }
              else
              {
                v142 = 0;
              }
              v163 = &v142[8 * v138];
              *(_QWORD *)v163 = 0;
              v114 = v163 + 8;
              while (v116 != v137)
              {
                v164 = *((_QWORD *)v116 - 1);
                v116 -= 8;
                *((_QWORD *)v163 - 1) = v164;
                v163 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v163;
              *(_QWORD *)(a1 + 64) = v114;
              *(_QWORD *)(a1 + 72) = &v142[8 * v141];
              if (v137)
                operator delete(v137);
            }
            else
            {
              *(_QWORD *)v116 = 0;
              v114 = v116 + 8;
            }
            *(_QWORD *)(a1 + 64) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v39 = *((_QWORD *)this + 1);
          v40 = *((_QWORD *)this + 2);
          while (v39 < v40 && !*((_BYTE *)this + 24))
          {
            v42 = *(char **)(a1 + 64);
            v41 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v42 >= v41)
            {
              v44 = (char *)*v10;
              v45 = (v42 - (_BYTE *)*v10) >> 3;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61)
                goto LABEL_287;
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 2 > v46)
                v46 = v47 >> 2;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                v48 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)sub_18F26F8D4(v175, v48);
                v44 = *(char **)(a1 + 56);
                v42 = *(char **)(a1 + 64);
              }
              else
              {
                v49 = 0;
              }
              v50 = &v49[8 * v45];
              *(_QWORD *)v50 = 0;
              v43 = v50 + 8;
              while (v42 != v44)
              {
                v51 = *((_QWORD *)v42 - 1);
                v42 -= 8;
                *((_QWORD *)v50 - 1) = v51;
                v50 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v50;
              *(_QWORD *)(a1 + 64) = v43;
              *(_QWORD *)(a1 + 72) = &v49[8 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_QWORD *)v42 = 0;
              v43 = v42 + 8;
            }
            *(_QWORD *)(a1 + 64) = v43;
            v52 = *((_QWORD *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v43 - 1) = *(_QWORD *)(*(_QWORD *)this + v52);
            v40 = *((_QWORD *)this + 2);
            v39 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v39;
          }
          goto LABEL_163;
        case 3u:
          if (v24 != 2)
          {
            v118 = *(char **)(a1 + 40);
            v117 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v118 >= v117)
            {
              v143 = (char *)*v9;
              v144 = (v118 - (_BYTE *)*v9) >> 3;
              v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 61)
LABEL_288:
                sub_18F26F8C0();
              v146 = v117 - (_QWORD)v143;
              if (v146 >> 2 > v145)
                v145 = v146 >> 2;
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8)
                v147 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v147 = v145;
              if (v147)
              {
                v148 = (char *)sub_18F26F8D4(v176, v147);
                v143 = *(char **)(a1 + 32);
                v118 = *(char **)(a1 + 40);
              }
              else
              {
                v148 = 0;
              }
              v165 = &v148[8 * v144];
              *(_QWORD *)v165 = 0;
              v114 = v165 + 8;
              while (v118 != v143)
              {
                v166 = *((_QWORD *)v118 - 1);
                v118 -= 8;
                *((_QWORD *)v165 - 1) = v166;
                v165 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v165;
              *(_QWORD *)(a1 + 40) = v114;
              *(_QWORD *)(a1 + 48) = &v148[8 * v147];
              if (v143)
                operator delete(v143);
            }
            else
            {
              *(_QWORD *)v118 = 0;
              v114 = v118 + 8;
            }
            *(_QWORD *)(a1 + 40) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v53 = *((_QWORD *)this + 1);
          v54 = *((_QWORD *)this + 2);
          while (v53 < v54 && !*((_BYTE *)this + 24))
          {
            v56 = *(char **)(a1 + 40);
            v55 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v56 >= v55)
            {
              v58 = (char *)*v9;
              v59 = (v56 - (_BYTE *)*v9) >> 3;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 61)
                goto LABEL_288;
              v61 = v55 - (_QWORD)v58;
              if (v61 >> 2 > v60)
                v60 = v61 >> 2;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                v62 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)sub_18F26F8D4(v176, v62);
                v58 = *(char **)(a1 + 32);
                v56 = *(char **)(a1 + 40);
              }
              else
              {
                v63 = 0;
              }
              v64 = &v63[8 * v59];
              *(_QWORD *)v64 = 0;
              v57 = v64 + 8;
              while (v56 != v58)
              {
                v65 = *((_QWORD *)v56 - 1);
                v56 -= 8;
                *((_QWORD *)v64 - 1) = v65;
                v64 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v64;
              *(_QWORD *)(a1 + 40) = v57;
              *(_QWORD *)(a1 + 48) = &v63[8 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *(_QWORD *)v56 = 0;
              v57 = v56 + 8;
            }
            *(_QWORD *)(a1 + 40) = v57;
            v66 = *((_QWORD *)this + 1);
            if (v66 > 0xFFFFFFFFFFFFFFF7 || v66 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v57 - 1) = *(_QWORD *)(*(_QWORD *)this + v66);
            v54 = *((_QWORD *)this + 2);
            v53 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v53;
          }
          goto LABEL_163;
        case 4u:
          if (v24 != 2)
          {
            v120 = *(char **)(a1 + 88);
            v119 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v120 >= v119)
            {
              v149 = (char *)*v8;
              v150 = (v120 - (_BYTE *)*v8) >> 3;
              v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 61)
LABEL_289:
                sub_18F26F8C0();
              v152 = v119 - (_QWORD)v149;
              if (v152 >> 2 > v151)
                v151 = v152 >> 2;
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
                v153 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v153 = v151;
              if (v153)
              {
                v154 = (char *)sub_18F26F8D4(v177, v153);
                v149 = *(char **)(a1 + 80);
                v120 = *(char **)(a1 + 88);
              }
              else
              {
                v154 = 0;
              }
              v167 = &v154[8 * v150];
              *(_QWORD *)v167 = 0;
              v114 = v167 + 8;
              while (v120 != v149)
              {
                v168 = *((_QWORD *)v120 - 1);
                v120 -= 8;
                *((_QWORD *)v167 - 1) = v168;
                v167 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v167;
              *(_QWORD *)(a1 + 88) = v114;
              *(_QWORD *)(a1 + 96) = &v154[8 * v153];
              if (v149)
                operator delete(v149);
            }
            else
            {
              *(_QWORD *)v120 = 0;
              v114 = v120 + 8;
            }
            *(_QWORD *)(a1 + 88) = v114;
            goto LABEL_271;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v67 = *((_QWORD *)this + 1);
          v68 = *((_QWORD *)this + 2);
          while (v67 < v68 && !*((_BYTE *)this + 24))
          {
            v70 = *(char **)(a1 + 88);
            v69 = *(_QWORD *)(a1 + 96);
            if ((unint64_t)v70 >= v69)
            {
              v72 = (char *)*v8;
              v73 = (v70 - (_BYTE *)*v8) >> 3;
              v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 61)
                goto LABEL_289;
              v75 = v69 - (_QWORD)v72;
              if (v75 >> 2 > v74)
                v74 = v75 >> 2;
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
                v76 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v76 = v74;
              if (v76)
              {
                v77 = (char *)sub_18F26F8D4(v177, v76);
                v72 = *(char **)(a1 + 80);
                v70 = *(char **)(a1 + 88);
              }
              else
              {
                v77 = 0;
              }
              v78 = &v77[8 * v73];
              *(_QWORD *)v78 = 0;
              v71 = v78 + 8;
              while (v70 != v72)
              {
                v79 = *((_QWORD *)v70 - 1);
                v70 -= 8;
                *((_QWORD *)v78 - 1) = v79;
                v78 -= 8;
              }
              *(_QWORD *)(a1 + 80) = v78;
              *(_QWORD *)(a1 + 88) = v71;
              *(_QWORD *)(a1 + 96) = &v77[8 * v76];
              if (v72)
                operator delete(v72);
            }
            else
            {
              *(_QWORD *)v70 = 0;
              v71 = v70 + 8;
            }
            *(_QWORD *)(a1 + 88) = v71;
            v80 = *((_QWORD *)this + 1);
            if (v80 > 0xFFFFFFFFFFFFFFF7 || v80 + 8 > *((_QWORD *)this + 2))
              goto LABEL_162;
            *(v71 - 1) = *(_QWORD *)(*(_QWORD *)this + v80);
            v68 = *((_QWORD *)this + 2);
            v67 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v67;
          }
          goto LABEL_163;
        case 5u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v81 = *((_QWORD *)this + 1);
            v82 = *((_QWORD *)this + 2);
            while (v81 < v82 && !*((_BYTE *)this + 24))
            {
              v84 = *(char **)(a1 + 112);
              v83 = *(_QWORD *)(a1 + 120);
              if ((unint64_t)v84 >= v83)
              {
                v86 = (char *)*v179;
                v87 = (v84 - (_BYTE *)*v179) >> 3;
                v88 = v87 + 1;
                if ((unint64_t)(v87 + 1) >> 61)
                  goto LABEL_290;
                v89 = v83 - (_QWORD)v86;
                if (v89 >> 2 > v88)
                  v88 = v89 >> 2;
                if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8)
                  v90 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v90 = v88;
                if (v90)
                {
                  v91 = (char *)sub_18F26F8D4(v178, v90);
                  v86 = *(char **)(a1 + 104);
                  v84 = *(char **)(a1 + 112);
                }
                else
                {
                  v91 = 0;
                }
                v92 = &v91[8 * v87];
                *(_QWORD *)v92 = 0;
                v85 = v92 + 8;
                while (v84 != v86)
                {
                  v93 = *((_QWORD *)v84 - 1);
                  v84 -= 8;
                  *((_QWORD *)v92 - 1) = v93;
                  v92 -= 8;
                }
                *(_QWORD *)(a1 + 104) = v92;
                *(_QWORD *)(a1 + 112) = v85;
                *(_QWORD *)(a1 + 120) = &v91[8 * v90];
                if (v86)
                  operator delete(v86);
              }
              else
              {
                *(_QWORD *)v84 = 0;
                v85 = v84 + 8;
              }
              *(_QWORD *)(a1 + 112) = v85;
              v94 = *((_QWORD *)this + 1);
              if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((_QWORD *)this + 2))
              {
LABEL_162:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v85 - 1) = *(_QWORD *)(*(_QWORD *)this + v94);
              v82 = *((_QWORD *)this + 2);
              v81 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v81;
            }
LABEL_163:
            PB::Reader::recallMark();
          }
          else
          {
            v122 = *(char **)(a1 + 112);
            v121 = *(_QWORD *)(a1 + 120);
            if ((unint64_t)v122 >= v121)
            {
              v155 = (char *)*v179;
              v156 = (v122 - (_BYTE *)*v179) >> 3;
              v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 61)
LABEL_290:
                sub_18F26F8C0();
              v158 = v121 - (_QWORD)v155;
              if (v158 >> 2 > v157)
                v157 = v158 >> 2;
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF8)
                v159 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v159 = v157;
              if (v159)
              {
                v160 = (char *)sub_18F26F8D4(v178, v159);
                v155 = *(char **)(a1 + 104);
                v122 = *(char **)(a1 + 112);
              }
              else
              {
                v160 = 0;
              }
              v169 = &v160[8 * v156];
              *(_QWORD *)v169 = 0;
              v114 = v169 + 8;
              while (v122 != v155)
              {
                v170 = *((_QWORD *)v122 - 1);
                v122 -= 8;
                *((_QWORD *)v169 - 1) = v170;
                v169 -= 8;
              }
              *(_QWORD *)(a1 + 104) = v169;
              *(_QWORD *)(a1 + 112) = v114;
              *(_QWORD *)(a1 + 120) = &v160[8 * v159];
              if (v155)
                operator delete(v155);
            }
            else
            {
              *(_QWORD *)v122 = 0;
              v114 = v122 + 8;
            }
            *(_QWORD *)(a1 + 112) = v114;
LABEL_271:
            v171 = *((_QWORD *)this + 1);
            if (v171 <= 0xFFFFFFFFFFFFFFF7 && v171 + 8 <= *((_QWORD *)this + 2))
            {
              *(v114 - 1) = *(_QWORD *)(*(_QWORD *)this + v171);
LABEL_275:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_273:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_276:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          break;
        case 6u:
          *(_BYTE *)(a1 + 144) |= 4u;
          v95 = *((_QWORD *)this + 1);
          v96 = *((_QWORD *)this + 2);
          v97 = *(_QWORD *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)this + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_232;
              v98 += 7;
              v95 = v101;
              v18 = v99++ > 8;
            }
            while (!v18);
LABEL_180:
            LODWORD(v100) = 0;
            goto LABEL_232;
          }
          v123 = 0;
          v124 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v125 = v95 + 1;
              v126 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)this + 1) = v125;
              v100 |= (unint64_t)(v126 & 0x7F) << v123;
              if (v126 < 0)
              {
                v123 += 7;
                v95 = v125;
                v18 = v124++ > 8;
                if (v18)
                  goto LABEL_180;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_232:
          *(_DWORD *)(a1 + 140) = v100;
          goto LABEL_276;
        case 7u:
          *(_BYTE *)(a1 + 144) |= 1u;
          v103 = *((_QWORD *)this + 1);
          if (v103 > 0xFFFFFFFFFFFFFFF7 || v103 + 8 > *((_QWORD *)this + 2))
            goto LABEL_273;
          *(_QWORD *)(a1 + 128) = *(_QWORD *)(*(_QWORD *)this + v103);
          goto LABEL_275;
        case 8u:
          *(_BYTE *)(a1 + 144) |= 2u;
          v104 = *((_QWORD *)this + 1);
          v105 = *((_QWORD *)this + 2);
          v106 = *(_QWORD *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            v107 = 0;
            v108 = 0;
            v109 = 0;
            do
            {
              v110 = v104 + 1;
              *((_QWORD *)this + 1) = v104 + 1;
              v111 = *(_BYTE *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0)
                goto LABEL_235;
              v107 += 7;
              v104 = v110;
              v18 = v108++ > 8;
            }
            while (!v18);
LABEL_187:
            LODWORD(v109) = 0;
            goto LABEL_235;
          }
          v127 = 0;
          v128 = 0;
          v109 = 0;
          if (v105 <= v104)
            v105 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v129 = v104 + 1;
              v130 = *(_BYTE *)(v106 + v104);
              *((_QWORD *)this + 1) = v129;
              v109 |= (unint64_t)(v130 & 0x7F) << v127;
              if (v130 < 0)
              {
                v127 += 7;
                v104 = v129;
                v18 = v128++ > 8;
                if (v18)
                  goto LABEL_187;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v109) = 0;
            }
            break;
          }
LABEL_235:
          *(_DWORD *)(a1 + 136) = v109;
          goto LABEL_276;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_276;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28A81C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double v18;
  char v19;

  v3 = result;
  v4 = *(double **)(result + 8);
  v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 56);
  v8 = *(double **)(v3 + 64);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v10 = *(double **)(v3 + 32);
  v11 = *(double **)(v3 + 40);
  while (v10 != v11)
  {
    v12 = *v10++;
    result = PB::Writer::write(this, v12);
  }
  v13 = *(double **)(v3 + 80);
  v14 = *(double **)(v3 + 88);
  while (v13 != v14)
  {
    v15 = *v13++;
    result = PB::Writer::write(this, v15);
  }
  v16 = *(double **)(v3 + 104);
  v17 = *(double **)(v3 + 112);
  while (v16 != v17)
  {
    v18 = *v16++;
    result = PB::Writer::write(this, v18);
  }
  v19 = *(_BYTE *)(v3 + 144);
  if ((v19 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v19 = *(_BYTE *)(v3 + 144);
    if ((v19 & 1) == 0)
    {
LABEL_18:
      if ((v19 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(v3 + 144) & 1) == 0)
  {
    goto LABEL_18;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 128));
  if ((*(_BYTE *)(v3 + 144) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F28A940(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FBE8;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F28A954(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294FBE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F28A994(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294FBE8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28A9E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 28) & 2) != 0)
    PB::TextFormatter::format(this, "modelType");
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "state");
  if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28AA70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v24 = *((_QWORD *)this + 1);
        v25 = *((_QWORD *)this + 2);
        v26 = *(_QWORD *)this;
        if (v24 > 0xFFFFFFFFFFFFFFF5 || v24 + 10 > v25)
        {
          v34 = 0;
          v35 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_52;
            }
            v36 = v24 + 1;
            v37 = *(_BYTE *)(v26 + v24);
            *((_QWORD *)this + 1) = v36;
            v29 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v24 = v36;
            v14 = v35++ > 8;
            if (v14)
            {
LABEL_47:
              LODWORD(v29) = 0;
              goto LABEL_52;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v29) = 0;
        }
        else
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = v24 + 1;
            *((_QWORD *)this + 1) = v24 + 1;
            v31 = *(_BYTE *)(v26 + v24);
            v29 |= (unint64_t)(v31 & 0x7F) << v27;
            if ((v31 & 0x80) == 0)
              break;
            v27 += 7;
            v24 = v30;
            v14 = v28++ > 8;
            if (v14)
              goto LABEL_47;
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v29;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 1u;
        v32 = *((_QWORD *)this + 1);
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v32);
          *((_QWORD *)this + 1) += 8;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 1)
      {
        v21 = operator new();
        v22 = sub_18F31BA04(v21);
        v23 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v21;
        if (v23)
        {
          (*(void (**)(uint64_t, double))(*(_QWORD *)v23 + 8))(v23, v22);
          v21 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28AD7C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;
  char v5;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  v5 = *(_BYTE *)(v3 + 28);
  if ((v5 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(v3 + 16));
    v5 = *(_BYTE *)(v3 + 28);
  }
  if ((v5 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F28ADE8(_QWORD *result)
{
  *result = &off_1E2950550;
  result[1] = 0;
  return result;
}

void sub_18F28ADF8(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950550;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F28AE38(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E2950550;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28AE8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "super");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28AEDC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        sub_18F321418(v20);
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28B0A4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2)
    return PB::Writer::writeSubmessage(this, v2);
  return result;
}

uint64_t sub_18F28B0C0(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F6E0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F28B0D4(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F6E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
}

void sub_18F28B114(PB::Base *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E294F6E0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PB::Base::~Base(this);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28B168(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v5 + 32))(v5, this, "correction");
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    PB::TextFormatter::format(this, "withAnchoredStaticPose");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28B1D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  BOOL v25;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v22 = *((_QWORD *)this + 1);
        if (v22 >= *((_QWORD *)this + 2))
        {
          v25 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v23 = v22 + 1;
          v24 = *(unsigned __int8 *)(*(_QWORD *)this + v22);
          *((_QWORD *)this + 1) = v23;
          v25 = v24 != 0;
        }
        *(_BYTE *)(a1 + 16) = v25;
      }
      else if ((v11 >> 3) == 1)
      {
        v20 = operator new();
        *(_QWORD *)v20 = &off_1E294FCC8;
        *(_DWORD *)(v20 + 160) = 0;
        *(_OWORD *)(v20 + 8) = 0u;
        *(_OWORD *)(v20 + 24) = 0u;
        *(_OWORD *)(v20 + 40) = 0u;
        *(_OWORD *)(v20 + 56) = 0u;
        *(_OWORD *)(v20 + 72) = 0u;
        *(_OWORD *)(v20 + 88) = 0u;
        *(_OWORD *)(v20 + 104) = 0u;
        *(_OWORD *)(v20 + 120) = 0u;
        *(_OWORD *)(v20 + 136) = 0u;
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v20;
        if (v21)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          v20 = *(_QWORD *)(a1 + 8);
        }
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v20 + 16))(v20, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28B428(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  const PB::Base *v4;

  v3 = result;
  v4 = *(const PB::Base **)(result + 8);
  if (v4)
    result = PB::Writer::writeSubmessage(this, v4);
  if ((*(_BYTE *)(v3 + 20) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F28B47C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294CB58;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F28B494(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28B4B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "adaptiveExerciseMinuteThreshold", *(float *)(a1 + 8));
    v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "age", *(float *)(a1 + 12));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x2000) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "betaBlockerUse");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "biologicalSex");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "condition");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "gender");
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "heightM", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "hrmax", *(float *)(a1 + 32));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "hrmin", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "hronset", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "pal", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "vo2max", *(float *)(a1 + 52));
    if ((*(_WORD *)(a1 + 64) & 0x1000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "runVo2max", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x1000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "weightKG", *(float *)(a1 + 56));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28B6A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  int v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  unint64_t v51;
  char v52;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              v20 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v21 = *(_QWORD *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                v41 = 0;
                v42 = 0;
                v24 = 0;
                if (v2 <= v20)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  v43 = v20++;
                  v44 = *(_BYTE *)(v21 + v43);
                  *((_QWORD *)this + 1) = v20;
                  v24 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0)
                    break;
                  v41 += 7;
                  v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v24) = 0;
LABEL_105:
                v2 = v43 + 1;
              }
              else
              {
                v22 = 0;
                v23 = 0;
                v24 = 0;
                do
                {
                  v2 = v20 + 1;
                  *((_QWORD *)this + 1) = v20 + 1;
                  v25 = *(_BYTE *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0)
                    goto LABEL_106;
                  v22 += 7;
                  v20 = v2;
                  v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *(_DWORD *)(a1 + 24) = v24;
              goto LABEL_117;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 4u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 8u;
              v27 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v28 = *(_QWORD *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                v45 = 0;
                v46 = 0;
                v31 = 0;
                if (v2 <= v27)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  v47 = v27++;
                  v48 = *(_BYTE *)(v28 + v47);
                  *((_QWORD *)this + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0)
                    break;
                  v45 += 7;
                  v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    v2 = v47 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v31) = 0;
                goto LABEL_110;
              }
              v29 = 0;
              v30 = 0;
              v31 = 0;
              do
              {
                v2 = v27 + 1;
                *((_QWORD *)this + 1) = v27 + 1;
                v32 = *(_BYTE *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0)
                  goto LABEL_111;
                v29 += 7;
                v27 = v2;
                v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_117;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_76;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_101;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v34 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v33 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v34 = v33 != 0;
              }
              *(_BYTE *)(a1 + 60) = v34;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 4u;
              v35 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v36 = *(_QWORD *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                v49 = 0;
                v50 = 0;
                v39 = 0;
                if (v2 <= v35)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  v51 = v35++;
                  v52 = *(_BYTE *)(v36 + v51);
                  *((_QWORD *)this + 1) = v35;
                  v39 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0)
                    break;
                  v49 += 7;
                  v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_115:
                    v2 = v51 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v39) = 0;
                goto LABEL_115;
              }
              v37 = 0;
              v38 = 0;
              v39 = 0;
              do
              {
                v2 = v35 + 1;
                *((_QWORD *)this + 1) = v35 + 1;
                v40 = *(_BYTE *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0)
                  goto LABEL_116;
                v37 += 7;
                v35 = v2;
                v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 16) = v39;
LABEL_117:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 64) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_101:
                v2 = *((_QWORD *)this + 1) + 4;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_76:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_117;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_117;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F28BD5C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x10) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 12));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this);
  v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 8));
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  if ((*(_WORD *)(v3 + 64) & 1) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 8));
  return result;
}

_QWORD *sub_18F28BF08(_QWORD *result)
{
  *result = off_1E294DA70;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F28BF1C(void **a1)
{
  void **v2;

  *a1 = off_1E294DA70;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F28BF64(void **a1)
{
  void **v3;

  *a1 = off_1E294DA70;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F28BFC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "accel");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28C02C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_18F28C1CC(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28C1CC(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E2951BD8;
  *(_DWORD *)(v2 + 32) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F28C304(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F28C320(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

_QWORD *sub_18F28C368(_QWORD *result)
{
  *result = off_1E294FC20;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F28C37C(void **a1)
{
  void **v2;

  *a1 = off_1E294FC20;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F28C3C4(void **a1)
{
  void **v3;

  *a1 = off_1E294FC20;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F28C420(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "deviceMotion");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28C48C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_18F28C62C(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28C62C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E294CE30;
  *(_DWORD *)(v2 + 124) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F28C764(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F28C780(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_18F28C7C8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F718;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_18F28C7E0(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28C804(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "basalNatalies", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(_BYTE *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
LABEL_11:
    PB::TextFormatter::format(this, "session");
    if ((*(_BYTE *)(a1 + 44) & 8) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_6;
  }
LABEL_10:
  PB::TextFormatter::format(this, "natalies", *(double *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 44);
  if ((v5 & 0x10) != 0)
    goto LABEL_11;
LABEL_5:
  if ((v5 & 8) != 0)
LABEL_6:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 32));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28C8D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 44) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 2u:
              *(_BYTE *)(a1 + 44) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 3u:
              *(_BYTE *)(a1 + 44) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_35;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_51;
            case 4u:
              *(_BYTE *)(a1 + 44) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_51:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *(_BYTE *)(a1 + 44) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_55;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_56;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_57;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F28CC1C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 44);
  if ((v4 & 8) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 32));
    v4 = *(_BYTE *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(_BYTE *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  result = PB::Writer::write(this, *(double *)(v3 + 24));
  v4 = *(_BYTE *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_10:
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(_BYTE *)(v3 + 44) & 0x10) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

_QWORD *sub_18F28CCCC(_QWORD *result)
{
  *result = off_1E294F750;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_18F28CCE0(void **a1)
{
  void **v2;

  *a1 = off_1E294F750;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F28CD28(void **a1)
{
  void **v3;

  *a1 = off_1E294F750;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F28CD84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v7 + 32))(v7, this, "vo2MaxInput");
  }
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28CDF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v9 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v14 = *(_BYTE *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0)
          break;
        v10 += 7;
        v2 = v13;
        if (v11++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v12 >> 3) == 1)
      {
        sub_18F28CF90(v8);
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (!PB::Reader::placeMark()
          || ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v21 + 16))(v21, this) & 1) == 0)
        {
          return 0;
        }
        PB::Reader::recallMark();
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
      }
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v16 = 0;
    v17 = 0;
    v12 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v18 = v2 + 1;
      v19 = *(_BYTE *)(v9 + v2);
      *((_QWORD *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0)
        goto LABEL_21;
      v16 += 7;
      v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28CF90(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  sub_18F2E2954(v2);
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F28D0BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F28D0D8(uint64_t result, PB::Writer *this)
{
  const PB::Base **v2;
  const PB::Base **i;
  const PB::Base *v5;

  v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; result = PB::Writer::writeSubmessage(this, v5))
    v5 = *v2++;
  return result;
}

uint64_t sub_18F28D120(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FC58;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_18F28D138(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28D15C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "eventType");
    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "eventTime", *(double *)(a1 + 8));
  v5 = *(_BYTE *)(a1 + 24);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "workoutType");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28D1EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t result;
  char v34;
  unsigned int v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  unint64_t v40;
  char v41;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v38 = 0;
          v39 = 0;
          v31 = 0;
          if (v2 <= v27)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_67;
            }
            v40 = v27++;
            v41 = *(_BYTE *)(v28 + v40);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0)
              break;
            v38 += 7;
            v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_66:
          v2 = v40 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v2 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v2;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v34 = 0;
          v35 = 0;
          v25 = 0;
          if (v2 <= v21)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_62;
            }
            v36 = v21++;
            v37 = *(_BYTE *)(v22 + v36);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0)
              break;
            v34 += 7;
            v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_61:
          v2 = v36 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v2 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v2;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 20) = v25;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28D56C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 24);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 24);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8));
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 24) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

uint64_t sub_18F28D5E4(uint64_t result)
{
  *(_QWORD *)result = &off_1E2944438;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F28D5FC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28D620(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28D688(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              v24 = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            v24 = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_QWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28D9B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

double sub_18F28DA08(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E294E448;
  *(_DWORD *)(a1 + 72) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_18F28DA2C(PB::Base *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E294E448;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
  PB::Base::~Base(this);
}

void sub_18F28DA7C(PB::Base *a1)
{
  sub_18F28DA2C(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28DAA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  char v8;
  double *v9;
  double *v10;
  double v11;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "rotationMatrix", v7);
  }
  v8 = *(_BYTE *)(a1 + 72);
  if ((v8 & 1) != 0)
  {
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 56));
    v8 = *(_BYTE *)(a1 + 72);
  }
  if ((v8 & 2) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  v9 = *(double **)(a1 + 32);
  v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    v11 = *v9++;
    PB::TextFormatter::format(this, "translation", v11);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F28DB70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  unint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 32);
    v9 = a1 + 48;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 72) |= 2u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_117;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_119;
        case 2u:
          if (v24 != 2)
          {
            v56 = *(char **)(a1 + 16);
            v55 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v56 >= v55)
            {
              v60 = (char *)*v10;
              v61 = (v56 - (_BYTE *)*v10) >> 3;
              v62 = v61 + 1;
              if ((unint64_t)(v61 + 1) >> 61)
LABEL_129:
                sub_18F26F8C0();
              v63 = v55 - (_QWORD)v60;
              if (v63 >> 2 > v62)
                v62 = v63 >> 2;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8)
                v64 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)sub_18F26F8D4(v11, v64);
                v60 = *(char **)(a1 + 8);
                v56 = *(char **)(a1 + 16);
              }
              else
              {
                v65 = 0;
              }
              v72 = &v65[8 * v61];
              *(_QWORD *)v72 = 0;
              v57 = v72 + 8;
              while (v56 != v60)
              {
                v73 = *((_QWORD *)v56 - 1);
                v56 -= 8;
                *((_QWORD *)v72 - 1) = v73;
                v72 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v72;
              *(_QWORD *)(a1 + 16) = v57;
              *(_QWORD *)(a1 + 24) = &v65[8 * v64];
              if (v60)
                operator delete(v60);
            }
            else
            {
              *(_QWORD *)v56 = 0;
              v57 = v56 + 8;
            }
            *(_QWORD *)(a1 + 16) = v57;
            goto LABEL_115;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_129;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_18F26F8D4(v11, v35);
                v31 = *(char **)(a1 + 8);
                v29 = *(char **)(a1 + 16);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v37;
              *(_QWORD *)(a1 + 16) = v30;
              *(_QWORD *)(a1 + 24) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 16) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
              goto LABEL_83;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_84;
        case 3u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v40 = *((_QWORD *)this + 1);
            v41 = *((_QWORD *)this + 2);
            while (v40 < v41 && !*((_BYTE *)this + 24))
            {
              v43 = *(char **)(a1 + 40);
              v42 = *(_QWORD *)(a1 + 48);
              if ((unint64_t)v43 >= v42)
              {
                v45 = (char *)*v8;
                v46 = (v43 - (_BYTE *)*v8) >> 3;
                v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 61)
                  goto LABEL_128;
                v48 = v42 - (_QWORD)v45;
                if (v48 >> 2 > v47)
                  v47 = v48 >> 2;
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v47;
                if (v49)
                {
                  v50 = (char *)sub_18F26F8D4(v9, v49);
                  v45 = *(char **)(a1 + 32);
                  v43 = *(char **)(a1 + 40);
                }
                else
                {
                  v50 = 0;
                }
                v51 = &v50[8 * v46];
                *(_QWORD *)v51 = 0;
                v44 = v51 + 8;
                while (v43 != v45)
                {
                  v52 = *((_QWORD *)v43 - 1);
                  v43 -= 8;
                  *((_QWORD *)v51 - 1) = v52;
                  v51 -= 8;
                }
                *(_QWORD *)(a1 + 32) = v51;
                *(_QWORD *)(a1 + 40) = v44;
                *(_QWORD *)(a1 + 48) = &v50[8 * v49];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v43 = 0;
                v44 = v43 + 8;
              }
              *(_QWORD *)(a1 + 40) = v44;
              v53 = *((_QWORD *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
              {
LABEL_83:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_QWORD *)(*(_QWORD *)this + v53);
              v41 = *((_QWORD *)this + 2);
              v40 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v40;
            }
LABEL_84:
            PB::Reader::recallMark();
          }
          else
          {
            v59 = *(char **)(a1 + 40);
            v58 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v59 >= v58)
            {
              v66 = (char *)*v8;
              v67 = (v59 - (_BYTE *)*v8) >> 3;
              v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 61)
LABEL_128:
                sub_18F26F8C0();
              v69 = v58 - (_QWORD)v66;
              if (v69 >> 2 > v68)
                v68 = v69 >> 2;
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                v70 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v70 = v68;
              if (v70)
              {
                v71 = (char *)sub_18F26F8D4(v9, v70);
                v66 = *(char **)(a1 + 32);
                v59 = *(char **)(a1 + 40);
              }
              else
              {
                v71 = 0;
              }
              v74 = &v71[8 * v67];
              *(_QWORD *)v74 = 0;
              v57 = v74 + 8;
              while (v59 != v66)
              {
                v75 = *((_QWORD *)v59 - 1);
                v59 -= 8;
                *((_QWORD *)v74 - 1) = v75;
                v74 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v74;
              *(_QWORD *)(a1 + 40) = v57;
              *(_QWORD *)(a1 + 48) = &v71[8 * v70];
              if (v66)
                operator delete(v66);
            }
            else
            {
              *(_QWORD *)v59 = 0;
              v57 = v59 + 8;
            }
            *(_QWORD *)(a1 + 40) = v57;
LABEL_115:
            v76 = *((_QWORD *)this + 1);
            if (v76 <= 0xFFFFFFFFFFFFFFF7 && v76 + 8 <= *((_QWORD *)this + 2))
            {
              *(v57 - 1) = *(_QWORD *)(*(_QWORD *)this + v76);
LABEL_119:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_117:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_120:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        case 4u:
          *(_BYTE *)(a1 + 72) |= 1u;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((_QWORD *)this + 2))
            goto LABEL_117;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)this + v54);
          goto LABEL_119;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_120;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28E128(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;

  v3 = result;
  if ((*(_BYTE *)(result + 72) & 2) != 0)
    result = PB::Writer::write(this, *(double *)(result + 64));
  v4 = *(double **)(v3 + 8);
  v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = *(double **)(v3 + 32);
  v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 56));
  return result;
}

void sub_18F28E1CC(PB::Base *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E294D338;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
  {
    *((_QWORD *)this + 5) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
  {
    *((_QWORD *)this + 2) = v4;
    operator delete(v4);
  }
  PB::Base::~Base(this);
}

void sub_18F28E22C(PB::Base *a1)
{
  sub_18F28E1CC(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28E250(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  double *v5;
  double *v6;
  double v7;
  double *v8;
  double *v9;
  double v10;
  double *v11;
  double *v12;
  double v13;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(double **)(a1 + 8);
  v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    v7 = *v5++;
    PB::TextFormatter::format(this, "rotationMatrix", v7);
  }
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  v8 = *(double **)(a1 + 32);
  v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }
  v11 = *(double **)(a1 + 56);
  v12 = *(double **)(a1 + 64);
  while (v11 != v12)
  {
    v13 = *v11++;
    PB::TextFormatter::format(this, "velocity", v13);
  }
  return PB::TextFormatter::endObject(this);
}

BOOL sub_18F28E330(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  char v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    v8 = (void **)(a1 + 56);
    v9 = (void **)(a1 + 32);
    v101 = a1 + 48;
    v102 = a1 + 72;
    v10 = (void **)(a1 + 8);
    v11 = a1 + 24;
    while (1)
    {
      v12 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      while (1)
      {
        v16 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v17 = *(_BYTE *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0)
          break;
        v13 += 7;
        v2 = v16;
        if (v14++ > 8)
          goto LABEL_20;
      }
LABEL_21:
      v24 = v15 & 7;
      if (v24 == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 88) |= 1u;
          v25 = *((_QWORD *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((_QWORD *)this + 2))
            goto LABEL_155;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)this + v25);
          goto LABEL_157;
        case 2u:
          if (v24 != 2)
          {
            v69 = *(char **)(a1 + 16);
            v68 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v69 >= v68)
            {
              v75 = (char *)*v10;
              v76 = (v69 - (_BYTE *)*v10) >> 3;
              v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 61)
LABEL_166:
                sub_18F26F8C0();
              v78 = v68 - (_QWORD)v75;
              if (v78 >> 2 > v77)
                v77 = v78 >> 2;
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8)
                v79 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v79 = v77;
              if (v79)
              {
                v80 = (char *)sub_18F26F8D4(v11, v79);
                v75 = *(char **)(a1 + 8);
                v69 = *(char **)(a1 + 16);
              }
              else
              {
                v80 = 0;
              }
              v93 = &v80[8 * v76];
              *(_QWORD *)v93 = 0;
              v70 = v93 + 8;
              while (v69 != v75)
              {
                v94 = *((_QWORD *)v69 - 1);
                v69 -= 8;
                *((_QWORD *)v93 - 1) = v94;
                v93 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v93;
              *(_QWORD *)(a1 + 16) = v70;
              *(_QWORD *)(a1 + 24) = &v80[8 * v79];
              if (v75)
                operator delete(v75);
            }
            else
            {
              *(_QWORD *)v69 = 0;
              v70 = v69 + 8;
            }
            *(_QWORD *)(a1 + 16) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v26 = *((_QWORD *)this + 1);
          v27 = *((_QWORD *)this + 2);
          while (v26 < v27 && !*((_BYTE *)this + 24))
          {
            v29 = *(char **)(a1 + 16);
            v28 = *(_QWORD *)(a1 + 24);
            if ((unint64_t)v29 >= v28)
            {
              v31 = (char *)*v10;
              v32 = (v29 - (_BYTE *)*v10) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_166;
              v34 = v28 - (_QWORD)v31;
              if (v34 >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
              {
                v36 = (char *)sub_18F26F8D4(v11, v35);
                v31 = *(char **)(a1 + 8);
                v29 = *(char **)(a1 + 16);
              }
              else
              {
                v36 = 0;
              }
              v37 = &v36[8 * v32];
              *(_QWORD *)v37 = 0;
              v30 = v37 + 8;
              while (v29 != v31)
              {
                v38 = *((_QWORD *)v29 - 1);
                v29 -= 8;
                *((_QWORD *)v37 - 1) = v38;
                v37 -= 8;
              }
              *(_QWORD *)(a1 + 8) = v37;
              *(_QWORD *)(a1 + 16) = v30;
              *(_QWORD *)(a1 + 24) = &v36[8 * v35];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *(_QWORD *)v29 = 0;
              v30 = v29 + 8;
            }
            *(_QWORD *)(a1 + 16) = v30;
            v39 = *((_QWORD *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v30 - 1) = *(_QWORD *)(*(_QWORD *)this + v39);
            v27 = *((_QWORD *)this + 2);
            v26 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v26;
          }
          goto LABEL_107;
        case 3u:
          if (v24 != 2)
          {
            v72 = *(char **)(a1 + 40);
            v71 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v72 >= v71)
            {
              v81 = (char *)*v9;
              v82 = (v72 - (_BYTE *)*v9) >> 3;
              v83 = v82 + 1;
              if ((unint64_t)(v82 + 1) >> 61)
LABEL_167:
                sub_18F26F8C0();
              v84 = v71 - (_QWORD)v81;
              if (v84 >> 2 > v83)
                v83 = v84 >> 2;
              if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8)
                v85 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v85 = v83;
              if (v85)
              {
                v86 = (char *)sub_18F26F8D4(v101, v85);
                v81 = *(char **)(a1 + 32);
                v72 = *(char **)(a1 + 40);
              }
              else
              {
                v86 = 0;
              }
              v95 = &v86[8 * v82];
              *(_QWORD *)v95 = 0;
              v70 = v95 + 8;
              while (v72 != v81)
              {
                v96 = *((_QWORD *)v72 - 1);
                v72 -= 8;
                *((_QWORD *)v95 - 1) = v96;
                v95 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v95;
              *(_QWORD *)(a1 + 40) = v70;
              *(_QWORD *)(a1 + 48) = &v86[8 * v85];
              if (v81)
                operator delete(v81);
            }
            else
            {
              *(_QWORD *)v72 = 0;
              v70 = v72 + 8;
            }
            *(_QWORD *)(a1 + 40) = v70;
            goto LABEL_153;
          }
          if ((PB::Reader::placeMark() & 1) != 0)
            return 0;
          v40 = *((_QWORD *)this + 1);
          v41 = *((_QWORD *)this + 2);
          while (v40 < v41 && !*((_BYTE *)this + 24))
          {
            v43 = *(char **)(a1 + 40);
            v42 = *(_QWORD *)(a1 + 48);
            if ((unint64_t)v43 >= v42)
            {
              v45 = (char *)*v9;
              v46 = (v43 - (_BYTE *)*v9) >> 3;
              v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 61)
                goto LABEL_167;
              v48 = v42 - (_QWORD)v45;
              if (v48 >> 2 > v47)
                v47 = v48 >> 2;
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
                v49 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v49 = v47;
              if (v49)
              {
                v50 = (char *)sub_18F26F8D4(v101, v49);
                v45 = *(char **)(a1 + 32);
                v43 = *(char **)(a1 + 40);
              }
              else
              {
                v50 = 0;
              }
              v51 = &v50[8 * v46];
              *(_QWORD *)v51 = 0;
              v44 = v51 + 8;
              while (v43 != v45)
              {
                v52 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *((_QWORD *)v51 - 1) = v52;
                v51 -= 8;
              }
              *(_QWORD *)(a1 + 32) = v51;
              *(_QWORD *)(a1 + 40) = v44;
              *(_QWORD *)(a1 + 48) = &v50[8 * v49];
              if (v45)
                operator delete(v45);
            }
            else
            {
              *(_QWORD *)v43 = 0;
              v44 = v43 + 8;
            }
            *(_QWORD *)(a1 + 40) = v44;
            v53 = *((_QWORD *)this + 1);
            if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((_QWORD *)this + 2))
              goto LABEL_106;
            *(v44 - 1) = *(_QWORD *)(*(_QWORD *)this + v53);
            v41 = *((_QWORD *)this + 2);
            v40 = *((_QWORD *)this + 1) + 8;
            *((_QWORD *)this + 1) = v40;
          }
          goto LABEL_107;
        case 4u:
          if (v24 == 2)
          {
            if ((PB::Reader::placeMark() & 1) != 0)
              return 0;
            v54 = *((_QWORD *)this + 1);
            v55 = *((_QWORD *)this + 2);
            while (v54 < v55 && !*((_BYTE *)this + 24))
            {
              v57 = *(char **)(a1 + 64);
              v56 = *(_QWORD *)(a1 + 72);
              if ((unint64_t)v57 >= v56)
              {
                v59 = (char *)*v8;
                v60 = (v57 - (_BYTE *)*v8) >> 3;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 61)
                  goto LABEL_168;
                v62 = v56 - (_QWORD)v59;
                if (v62 >> 2 > v61)
                  v61 = v62 >> 2;
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                  v63 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v63 = v61;
                if (v63)
                {
                  v64 = (char *)sub_18F26F8D4(v102, v63);
                  v59 = *(char **)(a1 + 56);
                  v57 = *(char **)(a1 + 64);
                }
                else
                {
                  v64 = 0;
                }
                v65 = &v64[8 * v60];
                *(_QWORD *)v65 = 0;
                v58 = v65 + 8;
                while (v57 != v59)
                {
                  v66 = *((_QWORD *)v57 - 1);
                  v57 -= 8;
                  *((_QWORD *)v65 - 1) = v66;
                  v65 -= 8;
                }
                *(_QWORD *)(a1 + 56) = v65;
                *(_QWORD *)(a1 + 64) = v58;
                *(_QWORD *)(a1 + 72) = &v64[8 * v63];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *(_QWORD *)v57 = 0;
                v58 = v57 + 8;
              }
              *(_QWORD *)(a1 + 64) = v58;
              v67 = *((_QWORD *)this + 1);
              if (v67 > 0xFFFFFFFFFFFFFFF7 || v67 + 8 > *((_QWORD *)this + 2))
              {
LABEL_106:
                *((_BYTE *)this + 24) = 1;
                break;
              }
              *(v58 - 1) = *(_QWORD *)(*(_QWORD *)this + v67);
              v55 = *((_QWORD *)this + 2);
              v54 = *((_QWORD *)this + 1) + 8;
              *((_QWORD *)this + 1) = v54;
            }
LABEL_107:
            PB::Reader::recallMark();
          }
          else
          {
            v74 = *(char **)(a1 + 64);
            v73 = *(_QWORD *)(a1 + 72);
            if ((unint64_t)v74 >= v73)
            {
              v87 = (char *)*v8;
              v88 = (v74 - (_BYTE *)*v8) >> 3;
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61)
LABEL_168:
                sub_18F26F8C0();
              v90 = v73 - (_QWORD)v87;
              if (v90 >> 2 > v89)
                v89 = v90 >> 2;
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
                v91 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v91 = v89;
              if (v91)
              {
                v92 = (char *)sub_18F26F8D4(v102, v91);
                v87 = *(char **)(a1 + 56);
                v74 = *(char **)(a1 + 64);
              }
              else
              {
                v92 = 0;
              }
              v97 = &v92[8 * v88];
              *(_QWORD *)v97 = 0;
              v70 = v97 + 8;
              while (v74 != v87)
              {
                v98 = *((_QWORD *)v74 - 1);
                v74 -= 8;
                *((_QWORD *)v97 - 1) = v98;
                v97 -= 8;
              }
              *(_QWORD *)(a1 + 56) = v97;
              *(_QWORD *)(a1 + 64) = v70;
              *(_QWORD *)(a1 + 72) = &v92[8 * v91];
              if (v87)
                operator delete(v87);
            }
            else
            {
              *(_QWORD *)v74 = 0;
              v70 = v74 + 8;
            }
            *(_QWORD *)(a1 + 64) = v70;
LABEL_153:
            v99 = *((_QWORD *)this + 1);
            if (v99 <= 0xFFFFFFFFFFFFFFF7 && v99 + 8 <= *((_QWORD *)this + 2))
            {
              *(v70 - 1) = *(_QWORD *)(*(_QWORD *)this + v99);
LABEL_157:
              *((_QWORD *)this + 1) += 8;
            }
            else
            {
LABEL_155:
              *((_BYTE *)this + 24) = 1;
            }
          }
LABEL_158:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((_BYTE *)this + 24))
            return v4 == 0;
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0)
            return 0;
          goto LABEL_158;
      }
    }
    v19 = 0;
    v20 = 0;
    v15 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v21 = v2 + 1;
      v22 = *(_BYTE *)(v12 + v2);
      *((_QWORD *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
        goto LABEL_21;
      v19 += 7;
      v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        v15 = 0;
        goto LABEL_21;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F28EA64(uint64_t result, PB::Writer *this)
{
  _QWORD *v3;
  double *v4;
  double *v5;
  double v6;
  double *v7;
  double *v8;
  double v9;
  double *v10;
  double *v11;
  double v12;

  v3 = (_QWORD *)result;
  if ((*(_BYTE *)(result + 88) & 1) != 0)
    result = PB::Writer::write(this, *(double *)(result + 80));
  v4 = (double *)v3[1];
  v5 = (double *)v3[2];
  while (v4 != v5)
  {
    v6 = *v4++;
    result = PB::Writer::write(this, v6);
  }
  v7 = (double *)v3[4];
  v8 = (double *)v3[5];
  while (v7 != v8)
  {
    v9 = *v7++;
    result = PB::Writer::write(this, v9);
  }
  v11 = (double *)v3[7];
  v10 = (double *)v3[8];
  while (v11 != v10)
  {
    v12 = *v11++;
    result = PB::Writer::write(this, v12);
  }
  return result;
}

uint64_t sub_18F28EB04(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DAA8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_18F28EB1C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28EB40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    if ((*(_BYTE *)(a1 + 28) & 2) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
  v5 = *(_BYTE *)(a1 + 28);
  if ((v5 & 1) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 2) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28EBD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
        break;
      if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 28) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
          goto LABEL_32;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_36:
        v2 = *((_QWORD *)this + 1) + 8;
        goto LABEL_37;
      }
      if ((_DWORD)v20 != 1)
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        goto LABEL_38;
      }
      *(_BYTE *)(a1 + 28) |= 4u;
      v2 = *((_QWORD *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
      {
LABEL_32:
        *((_BYTE *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
      v2 = *((_QWORD *)this + 1) + 4;
LABEL_37:
      *((_QWORD *)this + 1) = v2;
LABEL_38:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    *(_BYTE *)(a1 + 28) |= 1u;
    v2 = *((_QWORD *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
      goto LABEL_32;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_18F28EDF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 28);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 24));
    v4 = *(_BYTE *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        return result;
      return PB::Writer::write(this, *(double *)(v3 + 8));
    }
  }
  else if ((*(_BYTE *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 28) & 1) != 0)
    return PB::Writer::write(this, *(double *)(v3 + 8));
  return result;
}

_QWORD *sub_18F28EE68(_QWORD *result)
{
  *result = &off_1E2950FD0;
  *(_QWORD *)((char *)result + 164) = 0;
  return result;
}

void sub_18F28EE80(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F28EEA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  uint64_t v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activity");
    v5 = *(_QWORD *)(a1 + 164);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "activityTypeWithoutOverride");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0)
      goto LABEL_5;
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "avgTruthMets", *(float *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "basalCalories");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "basalMets", *(float *)(a1 + 44));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "computeTime", *(float *)(a1 + 48));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0)
      goto LABEL_9;
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "currentPace", *(float *)(a1 + 52));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0)
      goto LABEL_10;
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 56));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0)
      goto LABEL_11;
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "distanceSource");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0)
      goto LABEL_12;
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "duration", *(float *)(a1 + 64));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0)
      goto LABEL_13;
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "elevationAscended");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0)
      goto LABEL_14;
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "gradeType");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0)
      goto LABEL_15;
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "heartRate", *(float *)(a1 + 76));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x800000000) == 0)
      goto LABEL_16;
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "heartRateConfidence", *(float *)(a1 + 80));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000000000) == 0)
      goto LABEL_17;
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "isMotionOverrideSet");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000000000) == 0)
      goto LABEL_18;
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "isStanding");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0)
      goto LABEL_19;
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "isStored");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0)
      goto LABEL_20;
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "now", *(float *)(a1 + 84));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0)
      goto LABEL_21;
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "pedDistance", *(float *)(a1 + 88));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0)
      goto LABEL_22;
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "pedRawDistance", *(float *)(a1 + 92));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0)
      goto LABEL_23;
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "pushCount");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0)
      goto LABEL_24;
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rawFMMets", *(float *)(a1 + 100));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0)
      goto LABEL_25;
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rawHRMets", *(float *)(a1 + 104));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0)
      goto LABEL_26;
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "rawTruthMets", *(float *)(a1 + 108));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0)
      goto LABEL_27;
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rawWRMets", *(float *)(a1 + 112));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0)
      goto LABEL_28;
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "recordInterval", *(double *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0)
      goto LABEL_29;
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 116));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0)
      goto LABEL_30;
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "startTime", *(float *)(a1 + 120));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0)
      goto LABEL_31;
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "stepBegin", *(float *)(a1 + 124));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0)
      goto LABEL_32;
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "stepCount");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0)
      goto LABEL_33;
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "stepDuration", *(float *)(a1 + 132));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 4) == 0)
      goto LABEL_34;
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "stepEnd", *(float *)(a1 + 136));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_34:
    if ((v5 & 0x40000000) == 0)
      goto LABEL_35;
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "totalCalories");
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "userMets", *(float *)(a1 + 140));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x100000000) == 0)
      goto LABEL_37;
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "vectorMag", *(float *)(a1 + 144));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x200000000) == 0)
      goto LABEL_38;
LABEL_77:
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 152));
    if ((*(_QWORD *)(a1 + 164) & 0x400000000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_39;
  }
LABEL_76:
  PB::TextFormatter::format(this, "vectorMagCmSimOnly", *(float *)(a1 + 148));
  v5 = *(_QWORD *)(a1 + 164);
  if ((v5 & 0x200000000) != 0)
    goto LABEL_77;
LABEL_38:
  if ((v5 & 0x400000000) != 0)
LABEL_39:
    PB::TextFormatter::format(this, "wrMets", *(float *)(a1 + 156));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F28F394(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t result;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  BOOL v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  BOOL v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  unint64_t v130;
  unint64_t v131;
  char v132;
  unsigned int v133;
  unint64_t v134;
  char v135;
  char v136;
  unsigned int v137;
  unint64_t v138;
  char v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  char v143;
  char v144;
  unsigned int v145;
  unint64_t v146;
  char v147;
  char v148;
  unsigned int v149;
  unint64_t v150;
  char v151;
  char v152;
  unsigned int v153;
  unint64_t v154;
  char v155;
  char v156;
  unsigned int v157;
  unint64_t v158;
  char v159;
  char v160;
  unsigned int v161;
  unint64_t v162;
  char v163;
  char v164;
  unsigned int v165;
  unint64_t v166;
  char v167;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_QWORD *)(a1 + 164) |= 0x2000000uLL;
          v20 = *((_QWORD *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFFBLL || v20 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(_QWORD *)this + v20);
          goto LABEL_241;
        case 2u:
          *(_QWORD *)(a1 + 164) |= 0x80uLL;
          v22 = *((_QWORD *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFFBLL || v22 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v22);
          goto LABEL_241;
        case 3u:
          *(_QWORD *)(a1 + 164) |= 0x10000uLL;
          v23 = *((_QWORD *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(_QWORD *)this + v23);
          goto LABEL_241;
        case 4u:
          *(_QWORD *)(a1 + 164) |= 8uLL;
          v24 = *((_QWORD *)this + 1);
          v25 = *((_QWORD *)this + 2);
          v26 = *(_QWORD *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              v30 = v24 + 1;
              *((_QWORD *)this + 1) = v24 + 1;
              v31 = *(_BYTE *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0)
                goto LABEL_251;
              v27 += 7;
              v24 = v30;
              v14 = v28++ > 8;
            }
            while (!v14);
LABEL_177:
            LODWORD(v29) = 0;
            goto LABEL_251;
          }
          v132 = 0;
          v133 = 0;
          v29 = 0;
          if (v25 <= v24)
            v25 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v134 = v24 + 1;
              v135 = *(_BYTE *)(v26 + v24);
              *((_QWORD *)this + 1) = v134;
              v29 |= (unint64_t)(v135 & 0x7F) << v132;
              if (v135 < 0)
              {
                v132 += 7;
                v24 = v134;
                v14 = v133++ > 8;
                if (v14)
                  goto LABEL_177;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v29) = 0;
            }
            break;
          }
LABEL_251:
          *(_DWORD *)(a1 + 32) = v29;
          goto LABEL_243;
        case 5u:
          *(_QWORD *)(a1 + 164) |= 0x40000000uLL;
          v32 = *((_QWORD *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(_QWORD *)this + v32);
          goto LABEL_241;
        case 6u:
          *(_QWORD *)(a1 + 164) |= 0x400000000uLL;
          v33 = *((_QWORD *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(_QWORD *)this + v33);
          goto LABEL_241;
        case 7u:
          *(_QWORD *)(a1 + 164) |= 0x400000uLL;
          v34 = *((_QWORD *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(_QWORD *)this + v34);
          goto LABEL_241;
        case 8u:
          *(_QWORD *)(a1 + 164) |= 0x20uLL;
          v35 = *((_QWORD *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v35);
          goto LABEL_241;
        case 9u:
          *(_QWORD *)(a1 + 164) |= 0x40uLL;
          v36 = *((_QWORD *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v36);
          goto LABEL_241;
        case 0xAu:
          *(_QWORD *)(a1 + 164) |= 2uLL;
          v37 = *((_QWORD *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v37);
          v38 = *((_QWORD *)this + 1) + 8;
          goto LABEL_242;
        case 0xBu:
          *(_QWORD *)(a1 + 164) |= 0x2000000000uLL;
          v39 = *((_QWORD *)this + 1);
          if (v39 >= *((_QWORD *)this + 2))
          {
            v42 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v40 = v39 + 1;
            v41 = *(unsigned __int8 *)(*(_QWORD *)this + v39);
            *((_QWORD *)this + 1) = v40;
            v42 = v41 != 0;
          }
          *(_BYTE *)(a1 + 162) = v42;
          goto LABEL_243;
        case 0xCu:
          *(_QWORD *)(a1 + 164) |= 0x800uLL;
          v43 = *((_QWORD *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v43);
          goto LABEL_241;
        case 0xDu:
          *(_QWORD *)(a1 + 164) |= 0x10000000uLL;
          v44 = *((_QWORD *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(_QWORD *)this + v44);
          goto LABEL_241;
        case 0xEu:
          *(_QWORD *)(a1 + 164) |= 0x8000000uLL;
          v45 = *((_QWORD *)this + 1);
          v46 = *((_QWORD *)this + 2);
          v47 = *(_QWORD *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            v48 = 0;
            v49 = 0;
            v50 = 0;
            do
            {
              v51 = v45 + 1;
              *((_QWORD *)this + 1) = v45 + 1;
              v52 = *(_BYTE *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0)
                goto LABEL_255;
              v48 += 7;
              v45 = v51;
              v14 = v49++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v50) = 0;
            goto LABEL_255;
          }
          v136 = 0;
          v137 = 0;
          v50 = 0;
          if (v46 <= v45)
            v46 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v138 = v45 + 1;
              v139 = *(_BYTE *)(v47 + v45);
              *((_QWORD *)this + 1) = v138;
              v50 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                v45 = v138;
                v14 = v137++ > 8;
                if (v14)
                  goto LABEL_186;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v50) = 0;
            }
            break;
          }
LABEL_255:
          *(_DWORD *)(a1 + 128) = v50;
          goto LABEL_243;
        case 0xFu:
          *(_QWORD *)(a1 + 164) |= 0x4000000uLL;
          v53 = *((_QWORD *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(_QWORD *)this + v53);
          goto LABEL_241;
        case 0x10u:
          *(_QWORD *)(a1 + 164) |= 0x20000000uLL;
          v54 = *((_QWORD *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(_QWORD *)this + v54);
          goto LABEL_241;
        case 0x11u:
          *(_QWORD *)(a1 + 164) |= 0x200uLL;
          v55 = *((_QWORD *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v55);
          goto LABEL_241;
        case 0x12u:
          *(_QWORD *)(a1 + 164) |= 0x1000000uLL;
          v56 = *((_QWORD *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(_QWORD *)this + v56);
          goto LABEL_241;
        case 0x13u:
          *(_QWORD *)(a1 + 164) |= 0x2000uLL;
          v57 = *((_QWORD *)this + 1);
          v58 = *((_QWORD *)this + 2);
          v59 = *(_QWORD *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
            do
            {
              v63 = v57 + 1;
              *((_QWORD *)this + 1) = v57 + 1;
              v64 = *(_BYTE *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0)
                goto LABEL_259;
              v60 += 7;
              v57 = v63;
              v14 = v61++ > 8;
            }
            while (!v14);
LABEL_193:
            LODWORD(v62) = 0;
            goto LABEL_259;
          }
          v140 = 0;
          v141 = 0;
          v62 = 0;
          if (v58 <= v57)
            v58 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v142 = v57 + 1;
              v143 = *(_BYTE *)(v59 + v57);
              *((_QWORD *)this + 1) = v142;
              v62 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                v57 = v142;
                v14 = v141++ > 8;
                if (v14)
                  goto LABEL_193;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v62) = 0;
            }
            break;
          }
LABEL_259:
          *(_DWORD *)(a1 + 72) = v62;
          goto LABEL_243;
        case 0x14u:
          *(_QWORD *)(a1 + 164) |= 0x200000000uLL;
          v65 = *((_QWORD *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(_QWORD *)this + v65);
          goto LABEL_241;
        case 0x15u:
          *(_QWORD *)(a1 + 164) |= 0x4000uLL;
          v66 = *((_QWORD *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(_QWORD *)this + v66);
          goto LABEL_241;
        case 0x16u:
          *(_QWORD *)(a1 + 164) |= 0x8000uLL;
          v67 = *((_QWORD *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(_QWORD *)this + v67);
          goto LABEL_241;
        case 0x17u:
          *(_QWORD *)(a1 + 164) |= 0x1000uLL;
          v68 = *((_QWORD *)this + 1);
          v69 = *((_QWORD *)this + 2);
          v70 = *(_QWORD *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            v71 = 0;
            v72 = 0;
            v73 = 0;
            do
            {
              v74 = v68 + 1;
              *((_QWORD *)this + 1) = v68 + 1;
              v75 = *(_BYTE *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0)
                goto LABEL_263;
              v71 += 7;
              v68 = v74;
              v14 = v72++ > 8;
            }
            while (!v14);
LABEL_200:
            LODWORD(v73) = 0;
            goto LABEL_263;
          }
          v144 = 0;
          v145 = 0;
          v73 = 0;
          if (v69 <= v68)
            v69 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v146 = v68 + 1;
              v147 = *(_BYTE *)(v70 + v68);
              *((_QWORD *)this + 1) = v146;
              v73 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                v68 = v146;
                v14 = v145++ > 8;
                if (v14)
                  goto LABEL_200;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v73) = 0;
            }
            break;
          }
LABEL_263:
          *(_DWORD *)(a1 + 68) = v73;
          goto LABEL_243;
        case 0x18u:
          *(_QWORD *)(a1 + 164) |= 0x200000uLL;
          v76 = *((_QWORD *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)this + v76);
          goto LABEL_241;
        case 0x19u:
          *(_QWORD *)(a1 + 164) |= 0x100000uLL;
          v77 = *((_QWORD *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(_QWORD *)this + v77);
          goto LABEL_241;
        case 0x1Au:
          *(_QWORD *)(a1 + 164) |= 4uLL;
          v78 = *((_QWORD *)this + 1);
          v79 = *((_QWORD *)this + 2);
          v80 = *(_QWORD *)this;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            v81 = 0;
            v82 = 0;
            v83 = 0;
            do
            {
              v84 = v78 + 1;
              *((_QWORD *)this + 1) = v78 + 1;
              v85 = *(_BYTE *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0)
                goto LABEL_267;
              v81 += 7;
              v78 = v84;
              v14 = v82++ > 8;
            }
            while (!v14);
LABEL_207:
            v83 = 0;
            goto LABEL_267;
          }
          v148 = 0;
          v149 = 0;
          v83 = 0;
          if (v79 <= v78)
            v79 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v79 == v78)
            {
              v83 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v150 = v78 + 1;
              v151 = *(_BYTE *)(v80 + v78);
              *((_QWORD *)this + 1) = v150;
              v83 |= (unint64_t)(v151 & 0x7F) << v148;
              if (v151 < 0)
              {
                v148 += 7;
                v78 = v150;
                v14 = v149++ > 8;
                if (v14)
                  goto LABEL_207;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v83 = 0;
            }
            break;
          }
LABEL_267:
          *(_QWORD *)(a1 + 24) = v83;
          goto LABEL_243;
        case 0x1Bu:
          *(_QWORD *)(a1 + 164) |= 1uLL;
          v86 = *((_QWORD *)this + 1);
          v87 = *((_QWORD *)this + 2);
          v88 = *(_QWORD *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            v89 = 0;
            v90 = 0;
            v91 = 0;
            do
            {
              v92 = v86 + 1;
              *((_QWORD *)this + 1) = v86 + 1;
              v93 = *(_BYTE *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0)
                goto LABEL_271;
              v89 += 7;
              v86 = v92;
              v14 = v90++ > 8;
            }
            while (!v14);
LABEL_214:
            v91 = 0;
            goto LABEL_271;
          }
          v152 = 0;
          v153 = 0;
          v91 = 0;
          if (v87 <= v86)
            v87 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v87 == v86)
            {
              v91 = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v154 = v86 + 1;
              v155 = *(_BYTE *)(v88 + v86);
              *((_QWORD *)this + 1) = v154;
              v91 |= (unint64_t)(v155 & 0x7F) << v152;
              if (v155 < 0)
              {
                v152 += 7;
                v86 = v154;
                v14 = v153++ > 8;
                if (v14)
                  goto LABEL_214;
                continue;
              }
              if (*((_BYTE *)this + 24))
                v91 = 0;
            }
            break;
          }
LABEL_271:
          *(_QWORD *)(a1 + 8) = v91;
          goto LABEL_243;
        case 0x1Cu:
          *(_QWORD *)(a1 + 164) |= 0x80000000uLL;
          v94 = *((_QWORD *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(_QWORD *)this + v94);
          goto LABEL_241;
        case 0x1Du:
          *(_QWORD *)(a1 + 164) |= 0x80000uLL;
          v95 = *((_QWORD *)this + 1);
          v96 = *((_QWORD *)this + 2);
          v97 = *(_QWORD *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            v98 = 0;
            v99 = 0;
            v100 = 0;
            do
            {
              v101 = v95 + 1;
              *((_QWORD *)this + 1) = v95 + 1;
              v102 = *(_BYTE *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0)
                goto LABEL_275;
              v98 += 7;
              v95 = v101;
              v14 = v99++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v100) = 0;
            goto LABEL_275;
          }
          v156 = 0;
          v157 = 0;
          v100 = 0;
          if (v96 <= v95)
            v96 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v158 = v95 + 1;
              v159 = *(_BYTE *)(v97 + v95);
              *((_QWORD *)this + 1) = v158;
              v100 |= (unint64_t)(v159 & 0x7F) << v156;
              if (v159 < 0)
              {
                v156 += 7;
                v95 = v158;
                v14 = v157++ > 8;
                if (v14)
                  goto LABEL_221;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v100) = 0;
            }
            break;
          }
LABEL_275:
          *(_DWORD *)(a1 + 96) = v100;
          goto LABEL_243;
        case 0x1Eu:
          *(_QWORD *)(a1 + 164) |= 0x10uLL;
          v103 = *((_QWORD *)this + 1);
          v104 = *((_QWORD *)this + 2);
          v105 = *(_QWORD *)this;
          if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
          {
            v106 = 0;
            v107 = 0;
            v108 = 0;
            do
            {
              v109 = v103 + 1;
              *((_QWORD *)this + 1) = v103 + 1;
              v110 = *(_BYTE *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0)
                goto LABEL_279;
              v106 += 7;
              v103 = v109;
              v14 = v107++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v108) = 0;
            goto LABEL_279;
          }
          v160 = 0;
          v161 = 0;
          v108 = 0;
          if (v104 <= v103)
            v104 = *((_QWORD *)this + 1);
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v108) = 0;
              *((_BYTE *)this + 24) = 1;
            }
            else
            {
              v162 = v103 + 1;
              v163 = *(_BYTE *)(v105 + v103);
              *((_QWORD *)this + 1) = v162;
              v108 |= (unint64_t)(v163 & 0x7F) << v160;
              if (v163 < 0)
              {
                v160 += 7;
                v103 = v162;
                v14 = v161++ > 8;
                if (v14)
                  goto LABEL_228;
                continue;
              }
              if (*((_BYTE *)this + 24))
                LODWORD(v108) = 0;
            }
            break;
          }
LABEL_279:
          *(_DWORD *)(a1 + 36) = v108;
          goto LABEL_243;
        case 0x1Fu:
          *(_QWORD *)(a1 + 164) |= 0x1000000000uLL;
          v111 = *((_QWORD *)this + 1);
          if (v111 >= *((_QWORD *)this + 2))
          {
            v114 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v112 = v111 + 1;
            v113 = *(unsigned __int8 *)(*(_QWORD *)this + v111);
            *((_QWORD *)this + 1) = v112;
            v114 = v113 != 0;
          }
          *(_BYTE *)(a1 + 161) = v114;
          goto LABEL_243;
        case 0x20u:
          *(_QWORD *)(a1 + 164) |= 0x800000000uLL;
          v115 = *((_QWORD *)this + 1);
          if (v115 >= *((_QWORD *)this + 2))
          {
            v118 = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v116 = v115 + 1;
            v117 = *(unsigned __int8 *)(*(_QWORD *)this + v115);
            *((_QWORD *)this + 1) = v116;
            v118 = v117 != 0;
          }
          *(_BYTE *)(a1 + 160) = v118;
          goto LABEL_243;
        case 0x21u:
          *(_QWORD *)(a1 + 164) |= 0x800000uLL;
          v119 = *((_QWORD *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(_QWORD *)this + v119);
          goto LABEL_241;
        case 0x22u:
          *(_QWORD *)(a1 + 164) |= 0x20000uLL;
          v120 = *((_QWORD *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(_QWORD *)this + v120);
          goto LABEL_241;
        case 0x23u:
          *(_QWORD *)(a1 + 164) |= 0x40000uLL;
          v121 = *((_QWORD *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(_QWORD *)this + v121);
          goto LABEL_241;
        case 0x24u:
          *(_QWORD *)(a1 + 164) |= 0x400uLL;
          v122 = *((_QWORD *)this + 1);
          v123 = *((_QWORD *)this + 2);
          v124 = *(_QWORD *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            v125 = 0;
            v126 = 0;
            v127 = 0;
            do
            {
              v128 = v122 + 1;
              *((_QWORD *)this + 1) = v122 + 1;
              v129 = *(_BYTE *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0)
                goto LABEL_283;
              v125 += 7;
              v122 = v128;
              v14 = v126++ > 8;
            }
            while (!v14);
LABEL_239:
            LODWORD(v127) = 0;
            goto LABEL_283;
          }
          v164 = 0;
          v165 = 0;
          v127 = 0;
          if (v123 <= v122)
            v123 = *((_QWORD *)this + 1);
          break;
        case 0x25u:
          *(_QWORD *)(a1 + 164) |= 0x100uLL;
          v130 = *((_QWORD *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((_QWORD *)this + 2))
            goto LABEL_170;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v130);
          goto LABEL_241;
        case 0x26u:
          *(_QWORD *)(a1 + 164) |= 0x100000000uLL;
          v131 = *((_QWORD *)this + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((_QWORD *)this + 2))
          {
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(_QWORD *)this + v131);
LABEL_241:
            v38 = *((_QWORD *)this + 1) + 4;
LABEL_242:
            *((_QWORD *)this + 1) = v38;
          }
          else
          {
LABEL_170:
            *((_BYTE *)this + 24) = 1;
          }
          goto LABEL_243;
        default:
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          goto LABEL_243;
      }
      while (1)
      {
        if (v123 == v122)
        {
          LODWORD(v127) = 0;
          *((_BYTE *)this + 24) = 1;
          goto LABEL_283;
        }
        v166 = v122 + 1;
        v167 = *(_BYTE *)(v124 + v122);
        *((_QWORD *)this + 1) = v166;
        v127 |= (unint64_t)(v167 & 0x7F) << v164;
        if ((v167 & 0x80) == 0)
          break;
        v164 += 7;
        v122 = v166;
        v14 = v165++ > 8;
        if (v14)
          goto LABEL_239;
      }
      if (*((_BYTE *)this + 24))
        LODWORD(v127) = 0;
LABEL_283:
      *(_DWORD *)(a1 + 60) = v127;
LABEL_243:
      v2 = *((_QWORD *)this + 1);
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2903C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  uint64_t v4;

  v3 = result;
  v4 = *(_QWORD *)(result + 164);
  if ((v4 & 0x2000000) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 120));
    v4 = *(_QWORD *)(v3 + 164);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0)
        goto LABEL_4;
      goto LABEL_42;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_43;
  }
LABEL_42:
  result = PB::Writer::write(this, *(float *)(v3 + 84));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0)
      goto LABEL_6;
    goto LABEL_44;
  }
LABEL_43:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000000) == 0)
      goto LABEL_7;
    goto LABEL_45;
  }
LABEL_44:
  result = PB::Writer::write(this, *(float *)(v3 + 140));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000) == 0)
      goto LABEL_8;
    goto LABEL_46;
  }
LABEL_45:
  result = PB::Writer::write(this, *(float *)(v3 + 156));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0)
      goto LABEL_9;
    goto LABEL_47;
  }
LABEL_46:
  result = PB::Writer::write(this, *(float *)(v3 + 108));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_48;
  }
LABEL_47:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0)
      goto LABEL_11;
    goto LABEL_49;
  }
LABEL_48:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000000) == 0)
      goto LABEL_12;
    goto LABEL_50;
  }
LABEL_49:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_51;
  }
LABEL_50:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0)
      goto LABEL_14;
    goto LABEL_52;
  }
LABEL_51:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0)
      goto LABEL_15;
    goto LABEL_53;
  }
LABEL_52:
  result = PB::Writer::write(this, *(float *)(v3 + 132));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0)
      goto LABEL_16;
    goto LABEL_54;
  }
LABEL_53:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0)
      goto LABEL_17;
    goto LABEL_55;
  }
LABEL_54:
  result = PB::Writer::write(this, *(float *)(v3 + 124));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0)
      goto LABEL_18;
    goto LABEL_56;
  }
LABEL_55:
  result = PB::Writer::write(this, *(float *)(v3 + 136));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000000) == 0)
      goto LABEL_19;
    goto LABEL_57;
  }
LABEL_56:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0)
      goto LABEL_20;
    goto LABEL_58;
  }
LABEL_57:
  result = PB::Writer::write(this, *(float *)(v3 + 116));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x200000000) == 0)
      goto LABEL_21;
    goto LABEL_59;
  }
LABEL_58:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0)
      goto LABEL_22;
    goto LABEL_60;
  }
LABEL_59:
  result = PB::Writer::write(this, *(float *)(v3 + 152));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0)
      goto LABEL_23;
    goto LABEL_61;
  }
LABEL_60:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000) == 0)
      goto LABEL_24;
    goto LABEL_62;
  }
LABEL_61:
  result = PB::Writer::write(this, *(float *)(v3 + 80));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0)
      goto LABEL_25;
    goto LABEL_63;
  }
LABEL_62:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0)
      goto LABEL_26;
    goto LABEL_64;
  }
LABEL_63:
  result = PB::Writer::write(this, *(float *)(v3 + 104));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0)
      goto LABEL_27;
    goto LABEL_65;
  }
LABEL_64:
  result = PB::Writer::write(this, *(float *)(v3 + 100));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_27:
    if ((v4 & 1) == 0)
      goto LABEL_28;
    goto LABEL_66;
  }
LABEL_65:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
LABEL_66:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x80000) == 0)
      goto LABEL_30;
    goto LABEL_68;
  }
LABEL_67:
  result = PB::Writer::write(this, *(float *)(v3 + 144));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_30:
    if ((v4 & 0x10) == 0)
      goto LABEL_31;
    goto LABEL_69;
  }
LABEL_68:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x10) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000000) == 0)
      goto LABEL_32;
    goto LABEL_70;
  }
LABEL_69:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800000000) == 0)
      goto LABEL_33;
    goto LABEL_71;
  }
LABEL_70:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000) == 0)
      goto LABEL_34;
    goto LABEL_72;
  }
LABEL_71:
  result = PB::Writer::write(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_34:
    if ((v4 & 0x20000) == 0)
      goto LABEL_35;
    goto LABEL_73;
  }
LABEL_72:
  result = PB::Writer::write(this, *(float *)(v3 + 112));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0)
      goto LABEL_36;
    goto LABEL_74;
  }
LABEL_73:
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x400) == 0)
      goto LABEL_37;
    goto LABEL_75;
  }
LABEL_74:
  result = PB::Writer::write(this, *(float *)(v3 + 92));
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_37:
    if ((v4 & 0x100) == 0)
      goto LABEL_38;
    goto LABEL_76;
  }
LABEL_75:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_QWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_38:
    if ((v4 & 0x100000000) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 148));
  }
LABEL_76:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  if ((*(_QWORD *)(v3 + 164) & 0x100000000) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 148));
  return result;
}

uint64_t sub_18F290810(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F788;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_18F290828(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F29084C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
    PB::TextFormatter::format(this, "pause");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F290898(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  int v20;
  BOOL v21;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
        if (v2 >= v3)
        {
          v21 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v20 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
          *((_QWORD *)this + 1) = v2;
          v21 = v20 != 0;
        }
        *(_BYTE *)(a1 + 8) = v21;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
        v3 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F290A24(uint64_t result, PB::Writer *this)
{
  if ((*(_BYTE *)(result + 12) & 1) != 0)
    return PB::Writer::write(this);
  return result;
}

uint64_t sub_18F290A44(uint64_t result)
{
  *(_QWORD *)result = &off_1E294FC90;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_18F290A5C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F290A80(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 36);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0)
        goto LABEL_4;
LABEL_9:
      PB::TextFormatter::format(this, "hr", *(double *)(a1 + 16));
      if ((*(_BYTE *)(a1 + 36) & 4) == 0)
        return PB::TextFormatter::endObject(this);
      goto LABEL_5;
    }
  }
  else if ((*(_BYTE *)(a1 + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hkType");
  v5 = *(_BYTE *)(a1 + 36);
  if ((v5 & 2) != 0)
    goto LABEL_9;
LABEL_4:
  if ((v5 & 4) != 0)
LABEL_5:
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F290B30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_BYTE *)(a1 + 36) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 2u:
              *(_BYTE *)(a1 + 36) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_32;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              goto LABEL_48;
            case 3u:
              *(_BYTE *)(a1 + 36) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
              {
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)this + v2);
LABEL_48:
                v2 = *((_QWORD *)this + 1) + 8;
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_54;
            case 4u:
              *(_BYTE *)(a1 + 36) |= 8u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_53;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_52:
                    v2 = v29 + 1;
                    goto LABEL_53;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_52;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_53;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_53:
              *(_DWORD *)(a1 + 32) = v25;
LABEL_54:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_54;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F290E40(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 36);
  if ((v4 & 4) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 24));
    v4 = *(_BYTE *)(v3 + 36);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(_BYTE *)(result + 36) & 1) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(double *)(v3 + 8));
  v4 = *(_BYTE *)(v3 + 36);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      return result;
    return PB::Writer::writeVarInt(this);
  }
LABEL_8:
  result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_BYTE *)(v3 + 36) & 8) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F290ED4(uint64_t result)
{
  *(_QWORD *)result = off_1E294DAE0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_18F290EEC(void **a1)
{
  void **v2;

  *a1 = off_1E294DAE0;
  v2 = a1 + 1;
  sub_18F26F770(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_18F290F34(void **a1)
{
  void **v3;

  *a1 = off_1E294DAE0;
  v3 = a1 + 1;
  sub_18F26F770(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x194001438]();
}

uint64_t sub_18F290F90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 64);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "gain");
    v5 = *(_BYTE *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "location");
  if ((*(_BYTE *)(a1 + 64) & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "offset");
LABEL_5:
  v6 = *(uint64_t **)(a1 + 8);
  v7 = *(uint64_t **)(a1 + 16);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(_QWORD *)v8 + 32))(v8, this, "point");
  }
  v9 = *(_BYTE *)(a1 + 64);
  if ((v9 & 8) != 0)
  {
    PB::TextFormatter::format(this, "sensor");
    v9 = *(_BYTE *)(a1 + 64);
    if ((v9 & 0x10) == 0)
    {
LABEL_9:
      if ((v9 & 0x20) == 0)
        goto LABEL_10;
      goto LABEL_19;
    }
  }
  else if ((*(_BYTE *)(a1 + 64) & 0x10) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "tempCalA");
  v9 = *(_BYTE *)(a1 + 64);
  if ((v9 & 0x20) == 0)
  {
LABEL_10:
    if ((v9 & 0x80) == 0)
      goto LABEL_11;
LABEL_20:
    PB::TextFormatter::format(this, "tempCalEnabled");
    if ((*(_BYTE *)(a1 + 64) & 0x40) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_12;
  }
LABEL_19:
  PB::TextFormatter::format(this, "tempCalB");
  v9 = *(_BYTE *)(a1 + 64);
  if (v9 < 0)
    goto LABEL_20;
LABEL_11:
  if ((v9 & 0x40) != 0)
LABEL_12:
    PB::TextFormatter::format(this, "tempCalT0");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F291104(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t **v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  unint64_t v85;
  char v86;
  char v87;
  unsigned int v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  char v94;
  char v95;
  unsigned int v96;
  unint64_t v97;
  char v98;
  char v99;
  unsigned int v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  unint64_t v105;
  char v106;
  char v107;
  unsigned int v108;
  unint64_t v109;
  char v110;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0)
    return v4 == 0;
  v8 = (uint64_t **)(a1 + 8);
  while (2)
  {
    v9 = *(_QWORD *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      v16 = 0;
      v17 = 0;
      v12 = 0;
      if (v2 > v3)
        v3 = v2;
      while (v3 != v2)
      {
        v18 = v2 + 1;
        v19 = *(_BYTE *)(v9 + v2);
        *((_QWORD *)this + 1) = v18;
        v12 |= (unint64_t)(v19 & 0x7F) << v16;
        if ((v19 & 0x80) == 0)
          goto LABEL_21;
        v16 += 7;
        v2 = v18;
        if (v17++ >= 9)
        {
LABEL_20:
          v12 = 0;
          goto LABEL_21;
        }
      }
      v4 = 1;
      *((_BYTE *)this + 24) = 1;
      return v4 == 0;
    }
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v2 + 1;
      *((_QWORD *)this + 1) = v2 + 1;
      v14 = *(_BYTE *)(v9 + v2);
      v12 |= (unint64_t)(v14 & 0x7F) << v10;
      if ((v14 & 0x80) == 0)
        break;
      v10 += 7;
      v2 = v13;
      v15 = v11++ > 8;
      if (v15)
        goto LABEL_20;
    }
LABEL_21:
    if ((v12 & 7) == 4)
    {
      v4 = 0;
      return v4 == 0;
    }
    switch((v12 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 64) |= 2u;
        v21 = *((_QWORD *)this + 1);
        v22 = *((_QWORD *)this + 2);
        v23 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          v83 = 0;
          v84 = 0;
          v26 = 0;
          if (v22 <= v21)
            v22 = *((_QWORD *)this + 1);
          do
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_139;
            }
            v85 = v21 + 1;
            v86 = *(_BYTE *)(v23 + v21);
            *((_QWORD *)this + 1) = v85;
            v26 |= (unint64_t)(v86 & 0x7F) << v83;
            if ((v86 & 0x80) == 0)
            {
              if (*((_BYTE *)this + 24))
                LODWORD(v26) = 0;
              goto LABEL_139;
            }
            v83 += 7;
            v21 = v85;
            v15 = v84++ > 8;
          }
          while (!v15);
LABEL_85:
          LODWORD(v26) = 0;
        }
        else
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (1)
          {
            v27 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v28 = *(_BYTE *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0)
              break;
            v24 += 7;
            v21 = v27;
            v15 = v25++ > 8;
            if (v15)
              goto LABEL_85;
          }
        }
LABEL_139:
        *(_DWORD *)(a1 + 36) = v26;
        goto LABEL_158;
      case 2u:
        *(_BYTE *)(a1 + 64) |= 8u;
        v30 = *((_QWORD *)this + 1);
        v31 = *((_QWORD *)this + 2);
        v32 = *(_QWORD *)this;
        if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
        {
          v33 = 0;
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v30 + 1;
            *((_QWORD *)this + 1) = v30 + 1;
            v37 = *(_BYTE *)(v32 + v30);
            v35 |= (unint64_t)(v37 & 0x7F) << v33;
            if ((v37 & 0x80) == 0)
              goto LABEL_142;
            v33 += 7;
            v30 = v36;
            v15 = v34++ > 8;
          }
          while (!v15);
LABEL_92:
          LODWORD(v35) = 0;
          goto LABEL_142;
        }
        v87 = 0;
        v88 = 0;
        v35 = 0;
        if (v31 <= v30)
          v31 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v31 == v30)
          {
            LODWORD(v35) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v89 = v30 + 1;
            v90 = *(_BYTE *)(v32 + v30);
            *((_QWORD *)this + 1) = v89;
            v35 |= (unint64_t)(v90 & 0x7F) << v87;
            if (v90 < 0)
            {
              v87 += 7;
              v30 = v89;
              v15 = v88++ > 8;
              if (v15)
                goto LABEL_92;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v35) = 0;
          }
          break;
        }
LABEL_142:
        *(_DWORD *)(a1 + 44) = v35;
        goto LABEL_158;
      case 3u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v38 = *((_QWORD *)this + 1);
        v39 = *((_QWORD *)this + 2);
        v40 = *(_QWORD *)this;
        if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
        {
          v41 = 0;
          v42 = 0;
          v43 = 0;
          do
          {
            v44 = v38 + 1;
            *((_QWORD *)this + 1) = v38 + 1;
            v45 = *(_BYTE *)(v40 + v38);
            v43 |= (unint64_t)(v45 & 0x7F) << v41;
            if ((v45 & 0x80) == 0)
              goto LABEL_145;
            v41 += 7;
            v38 = v44;
            v15 = v42++ > 8;
          }
          while (!v15);
LABEL_99:
          LODWORD(v43) = 0;
          goto LABEL_145;
        }
        v91 = 0;
        v92 = 0;
        v43 = 0;
        if (v39 <= v38)
          v39 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v39 == v38)
          {
            LODWORD(v43) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v93 = v38 + 1;
            v94 = *(_BYTE *)(v40 + v38);
            *((_QWORD *)this + 1) = v93;
            v43 |= (unint64_t)(v94 & 0x7F) << v91;
            if (v94 < 0)
            {
              v91 += 7;
              v38 = v93;
              v15 = v92++ > 8;
              if (v15)
                goto LABEL_99;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v43) = 0;
          }
          break;
        }
LABEL_145:
        *(_DWORD *)(a1 + 32) = v43;
        goto LABEL_158;
      case 4u:
        *(_BYTE *)(a1 + 64) |= 4u;
        v46 = *((_QWORD *)this + 1);
        v47 = *((_QWORD *)this + 2);
        v48 = *(_QWORD *)this;
        if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
        {
          v49 = 0;
          v50 = 0;
          v51 = 0;
          do
          {
            v52 = v46 + 1;
            *((_QWORD *)this + 1) = v46 + 1;
            v53 = *(_BYTE *)(v48 + v46);
            v51 |= (unint64_t)(v53 & 0x7F) << v49;
            if ((v53 & 0x80) == 0)
              goto LABEL_148;
            v49 += 7;
            v46 = v52;
            v15 = v50++ > 8;
          }
          while (!v15);
LABEL_106:
          LODWORD(v51) = 0;
          goto LABEL_148;
        }
        v95 = 0;
        v96 = 0;
        v51 = 0;
        if (v47 <= v46)
          v47 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v47 == v46)
          {
            LODWORD(v51) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v97 = v46 + 1;
            v98 = *(_BYTE *)(v48 + v46);
            *((_QWORD *)this + 1) = v97;
            v51 |= (unint64_t)(v98 & 0x7F) << v95;
            if (v98 < 0)
            {
              v95 += 7;
              v46 = v97;
              v15 = v96++ > 8;
              if (v15)
                goto LABEL_106;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v51) = 0;
          }
          break;
        }
LABEL_148:
        *(_DWORD *)(a1 + 40) = v51;
        goto LABEL_158;
      case 5u:
        *(_BYTE *)(a1 + 64) |= 0x80u;
        v54 = *((_QWORD *)this + 1);
        if (v54 >= *((_QWORD *)this + 2))
        {
          v57 = 0;
          *((_BYTE *)this + 24) = 1;
        }
        else
        {
          v55 = v54 + 1;
          v56 = *(unsigned __int8 *)(*(_QWORD *)this + v54);
          *((_QWORD *)this + 1) = v55;
          v57 = v56 != 0;
        }
        *(_BYTE *)(a1 + 60) = v57;
        goto LABEL_158;
      case 6u:
        *(_BYTE *)(a1 + 64) |= 0x10u;
        v58 = *((_QWORD *)this + 1);
        v59 = *((_QWORD *)this + 2);
        v60 = *(_QWORD *)this;
        if (v58 <= 0xFFFFFFFFFFFFFFF5 && v58 + 10 <= v59)
        {
          v61 = 0;
          v62 = 0;
          v63 = 0;
          do
          {
            v64 = v58 + 1;
            *((_QWORD *)this + 1) = v58 + 1;
            v65 = *(_BYTE *)(v60 + v58);
            v63 |= (unint64_t)(v65 & 0x7F) << v61;
            if ((v65 & 0x80) == 0)
              goto LABEL_151;
            v61 += 7;
            v58 = v64;
            v15 = v62++ > 8;
          }
          while (!v15);
LABEL_115:
          LODWORD(v63) = 0;
          goto LABEL_151;
        }
        v99 = 0;
        v100 = 0;
        v63 = 0;
        if (v59 <= v58)
          v59 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v59 == v58)
          {
            LODWORD(v63) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v101 = v58 + 1;
            v102 = *(_BYTE *)(v60 + v58);
            *((_QWORD *)this + 1) = v101;
            v63 |= (unint64_t)(v102 & 0x7F) << v99;
            if (v102 < 0)
            {
              v99 += 7;
              v58 = v101;
              v15 = v100++ > 8;
              if (v15)
                goto LABEL_115;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v63) = 0;
          }
          break;
        }
LABEL_151:
        *(_DWORD *)(a1 + 48) = v63;
        goto LABEL_158;
      case 7u:
        *(_BYTE *)(a1 + 64) |= 0x20u;
        v66 = *((_QWORD *)this + 1);
        v67 = *((_QWORD *)this + 2);
        v68 = *(_QWORD *)this;
        if (v66 <= 0xFFFFFFFFFFFFFFF5 && v66 + 10 <= v67)
        {
          v69 = 0;
          v70 = 0;
          v71 = 0;
          do
          {
            v72 = v66 + 1;
            *((_QWORD *)this + 1) = v66 + 1;
            v73 = *(_BYTE *)(v68 + v66);
            v71 |= (unint64_t)(v73 & 0x7F) << v69;
            if ((v73 & 0x80) == 0)
              goto LABEL_154;
            v69 += 7;
            v66 = v72;
            v15 = v70++ > 8;
          }
          while (!v15);
LABEL_122:
          LODWORD(v71) = 0;
          goto LABEL_154;
        }
        v103 = 0;
        v104 = 0;
        v71 = 0;
        if (v67 <= v66)
          v67 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v67 == v66)
          {
            LODWORD(v71) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v105 = v66 + 1;
            v106 = *(_BYTE *)(v68 + v66);
            *((_QWORD *)this + 1) = v105;
            v71 |= (unint64_t)(v106 & 0x7F) << v103;
            if (v106 < 0)
            {
              v103 += 7;
              v66 = v105;
              v15 = v104++ > 8;
              if (v15)
                goto LABEL_122;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v71) = 0;
          }
          break;
        }
LABEL_154:
        *(_DWORD *)(a1 + 52) = v71;
        goto LABEL_158;
      case 8u:
        *(_BYTE *)(a1 + 64) |= 0x40u;
        v74 = *((_QWORD *)this + 1);
        v75 = *((_QWORD *)this + 2);
        v76 = *(_QWORD *)this;
        if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
        {
          v77 = 0;
          v78 = 0;
          v79 = 0;
          do
          {
            v80 = v74 + 1;
            *((_QWORD *)this + 1) = v74 + 1;
            v81 = *(_BYTE *)(v76 + v74);
            v79 |= (unint64_t)(v81 & 0x7F) << v77;
            if ((v81 & 0x80) == 0)
              goto LABEL_157;
            v77 += 7;
            v74 = v80;
            v15 = v78++ > 8;
          }
          while (!v15);
LABEL_129:
          LODWORD(v79) = 0;
          goto LABEL_157;
        }
        v107 = 0;
        v108 = 0;
        v79 = 0;
        if (v75 <= v74)
          v75 = *((_QWORD *)this + 1);
        while (2)
        {
          if (v75 == v74)
          {
            LODWORD(v79) = 0;
            *((_BYTE *)this + 24) = 1;
          }
          else
          {
            v109 = v74 + 1;
            v110 = *(_BYTE *)(v76 + v74);
            *((_QWORD *)this + 1) = v109;
            v79 |= (unint64_t)(v110 & 0x7F) << v107;
            if (v110 < 0)
            {
              v107 += 7;
              v74 = v109;
              v15 = v108++ > 8;
              if (v15)
                goto LABEL_129;
              continue;
            }
            if (*((_BYTE *)this + 24))
              LODWORD(v79) = 0;
          }
          break;
        }
LABEL_157:
        *(_DWORD *)(a1 + 56) = v79;
        goto LABEL_158;
      case 9u:
        sub_18F29194C(v8);
        v82 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8);
        if (PB::Reader::placeMark()
          && ((*(uint64_t (**)(uint64_t, PB::Reader *))(*(_QWORD *)v82 + 16))(v82, this) & 1) != 0)
        {
          PB::Reader::recallMark();
LABEL_158:
          v2 = *((_QWORD *)this + 1);
          v3 = *((_QWORD *)this + 2);
          v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0)
            return v4 == 0;
          continue;
        }
        return 0;
      default:
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        goto LABEL_158;
    }
  }
}

uint64_t sub_18F29194C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E294F280;
  *(_DWORD *)(v2 + 20) = 0;
  result = (uint64_t)(a1 + 2);
  v4 = (unint64_t)a1[2];
  v5 = a1[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = v5 - *a1;
    if ((unint64_t)(v7 + 1) >> 61)
      sub_18F26F8C0();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v22 = a1 + 2;
    if (v10)
      v11 = (char *)sub_18F26F8D4(result, v10);
    else
      v11 = 0;
    v12 = (uint64_t *)&v11[8 * v7];
    v13 = &v11[8 * v10];
    v21 = v13;
    *v12 = v2;
    v6 = v12 + 1;
    v20.i64[1] = (uint64_t)(v12 + 1);
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *(int64x2_t *)a1;
      v6 = (uint64_t *)v20.i64[1];
      v13 = v21;
    }
    *a1 = v12;
    a1[1] = v6;
    v20 = v17;
    v18 = a1[2];
    a1[2] = (uint64_t *)v13;
    v21 = (char *)v18;
    v19 = v17.i64[0];
    result = sub_18F26FBC0((uint64_t)&v19);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
  return result;
}

void sub_18F291A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18F291AA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;
  const PB::Base **v5;
  const PB::Base **v6;
  const PB::Base *v7;

  v3 = result;
  v4 = *(_BYTE *)(result + 64);
  if ((v4 & 2) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*(_BYTE *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x80) == 0)
      goto LABEL_6;
    goto LABEL_18;
  }
LABEL_17:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
LABEL_20:
    result = PB::Writer::writeVarInt(this);
    if ((*(_BYTE *)(v3 + 64) & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_19:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_BYTE *)(v3 + 64);
  if ((v4 & 0x20) != 0)
    goto LABEL_20;
LABEL_8:
  if ((v4 & 0x40) != 0)
LABEL_9:
    result = PB::Writer::writeVarInt(this);
LABEL_10:
  v6 = *(const PB::Base ***)(v3 + 8);
  v5 = *(const PB::Base ***)(v3 + 16);
  while (v6 != v5)
  {
    v7 = *v6++;
    result = PB::Writer::writeSubmessage(this, v7);
  }
  return result;
}

void sub_18F291BCC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F291BF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    PB::TextFormatter::format(this, "distance");
    if ((*(_BYTE *)(a1 + 20) & 4) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_4;
  }
  PB::TextFormatter::format(this, "base");
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v5 & 4) != 0)
LABEL_4:
    PB::TextFormatter::format(this, "peak");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F291C80(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t result;
  char v40;
  unsigned int v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  unint64_t v50;
  char v51;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v27 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v28 = *(_QWORD *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          v44 = 0;
          v45 = 0;
          v31 = 0;
          if (v2 <= v27)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_80;
            }
            v46 = v27++;
            v47 = *(_BYTE *)(v28 + v46);
            *((_QWORD *)this + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0)
              break;
            v44 += 7;
            v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v31) = 0;
LABEL_79:
          v3 = v46 + 1;
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v3 = v27 + 1;
            *((_QWORD *)this + 1) = v27 + 1;
            v32 = *(_BYTE *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0)
              break;
            v29 += 7;
            v27 = v3;
            v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *(_DWORD *)(a1 + 12) = v31;
      }
      else if ((_DWORD)v20 == 2)
      {
        *(_BYTE *)(a1 + 20) |= 4u;
        v33 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v34 = *(_QWORD *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          v48 = 0;
          v49 = 0;
          v37 = 0;
          if (v2 <= v33)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_85;
            }
            v50 = v33++;
            v51 = *(_BYTE *)(v34 + v50);
            *((_QWORD *)this + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0)
              break;
            v48 += 7;
            v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v37) = 0;
LABEL_84:
          v3 = v50 + 1;
        }
        else
        {
          v35 = 0;
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v3 = v33 + 1;
            *((_QWORD *)this + 1) = v33 + 1;
            v38 = *(_BYTE *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0)
              break;
            v35 += 7;
            v33 = v3;
            v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *(_DWORD *)(a1 + 16) = v37;
      }
      else if ((_DWORD)v20 == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v21 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v22 = *(_QWORD *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          v40 = 0;
          v41 = 0;
          v25 = 0;
          if (v2 <= v21)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v21)
            {
              LODWORD(v25) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_75;
            }
            v42 = v21++;
            v43 = *(_BYTE *)(v22 + v42);
            *((_QWORD *)this + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0)
              break;
            v40 += 7;
            v14 = v41++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_74;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v25) = 0;
LABEL_74:
          v3 = v42 + 1;
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v3 = v21 + 1;
            *((_QWORD *)this + 1) = v21 + 1;
            v26 = *(_BYTE *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0)
              break;
            v23 += 7;
            v21 = v3;
            v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_75:
        *(_DWORD *)(a1 + 8) = v25;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F29209C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 20);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0)
        return result;
      return PB::Writer::writeVarInt(this);
    }
  }
  else if ((*(_BYTE *)(result + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::writeVarInt(this);
  if ((*(_BYTE *)(v3 + 20) & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F292114(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DB18;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_18F29212C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F292150(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "concha", *(float *)(a1 + 8));
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "tragus", *(float *)(a1 + 12));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2921B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
        return v4 == 0;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        if (v10++ > 8)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
          goto LABEL_28;
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          result = PB::Reader::skip(this);
          if (!(_DWORD)result)
            return result;
          v2 = *((_QWORD *)this + 1);
          goto LABEL_33;
        }
        *(_BYTE *)(a1 + 16) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
        {
LABEL_28:
          *((_BYTE *)this + 24) = 1;
          goto LABEL_33;
        }
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(_QWORD *)this + v2);
      }
      v2 = *((_QWORD *)this + 1) + 4;
      *((_QWORD *)this + 1) = v2;
LABEL_33:
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((_BYTE *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_18F292390(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(float *)(result + 8));
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 12));
  return result;
}

uint64_t sub_18F2923E8(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DB50;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_18F292400(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F292424(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 16);
  if ((v5 & 1) != 0)
  {
    PB::TextFormatter::format(this, "conchaTemp");
    v5 = *(_BYTE *)(a1 + 16);
  }
  if ((v5 & 2) != 0)
    PB::TextFormatter::format(this, "tragusTemp");
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F29248C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char v33;
  unsigned int v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unint64_t v39;
  char v40;

  v3 = *((_QWORD *)this + 1);
  v2 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v3 + 1;
        *((_QWORD *)this + 1) = v3 + 1;
        v13 = *(_BYTE *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v3 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v26 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v27 = *(_QWORD *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          v37 = 0;
          v38 = 0;
          v30 = 0;
          if (v2 <= v26)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_64;
            }
            v39 = v26++;
            v40 = *(_BYTE *)(v27 + v39);
            *((_QWORD *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0)
              break;
            v37 += 7;
            v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v30) = 0;
LABEL_63:
          v3 = v39 + 1;
        }
        else
        {
          v28 = 0;
          v29 = 0;
          v30 = 0;
          while (1)
          {
            v3 = v26 + 1;
            *((_QWORD *)this + 1) = v26 + 1;
            v31 = *(_BYTE *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0)
              break;
            v28 += 7;
            v26 = v3;
            v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 12) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v33 = 0;
          v34 = 0;
          v24 = 0;
          if (v2 <= v20)
            v3 = *((_QWORD *)this + 1);
          else
            v3 = *((_QWORD *)this + 2);
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_60;
            }
            v35 = v20++;
            v36 = *(_BYTE *)(v21 + v35);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0)
              break;
            v33 += 7;
            v14 = v34++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_59;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_59:
          v3 = v35 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v3 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v3;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v3 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
      }
      v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((_BYTE *)this + 24))
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v3 > v2)
      v2 = v3;
    while (v2 != v3)
    {
      v17 = v3 + 1;
      v18 = *(_BYTE *)(v8 + v3);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2927B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 16);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_BYTE *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F29280C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294F7C0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F292824(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F292848(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "elevationAscended");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2928B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F292B3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F292B94(uint64_t result)
{
  *(_QWORD *)result = &off_1E2951D30;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_18F292BAC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F292BD0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  __int16 v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 16));
    v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 20));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 24));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 28));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "calibrationLevel");
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 36));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 40));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0)
      goto LABEL_10;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 44));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0)
      goto LABEL_11;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 48));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0)
      goto LABEL_12;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 52));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 56));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0)
      goto LABEL_14;
LABEL_29:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_WORD *)(a1 + 68) & 0x2000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_15;
  }
LABEL_28:
  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 60));
  v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) != 0)
    goto LABEL_29;
LABEL_14:
  if ((v5 & 0x2000) != 0)
LABEL_15:
    PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 64));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F292DC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_79;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v27 = 0;
                v28 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  v29 = v21++;
                  v30 = *(_BYTE *)(v22 + v29);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0)
                    break;
                  v27 += 7;
                  v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_83:
                    v2 = v29 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_83;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_84;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 32) = v25;
LABEL_85:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_69;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_78;
            case 0xEu:
              *(_WORD *)(a1 + 68) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_78:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_79:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_69:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_85;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_85;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F293308(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  __int16 v4;

  v3 = result;
  v4 = *(_WORD *)(result + 68);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x2000) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x2000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  result = PB::Writer::write(this, *(float *)(v3 + 44));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 36));
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  if ((*(_WORD *)(v3 + 68) & 0x40) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 36));
  return result;
}

uint64_t sub_18F2934B4(uint64_t result)
{
  *(_QWORD *)result = &off_1E294DF40;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_18F2934CC(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F2934F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  char v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_BYTE *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "compassJustAlignedToStableField");
    v5 = *(_BYTE *)(a1 + 20);
  }
  if ((v5 & 1) != 0)
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F293558(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t result;
  char v27;
  unsigned int v28;
  unint64_t v29;
  char v30;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = v2 + 1;
        *((_QWORD *)this + 1) = v2 + 1;
        v13 = *(_BYTE *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0)
          break;
        v9 += 7;
        v2 = v12;
        v14 = v10++ > 8;
        if (v14)
          goto LABEL_19;
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 20) |= 2u;
        v20 = *((_QWORD *)this + 1);
        v2 = *((_QWORD *)this + 2);
        v21 = *(_QWORD *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          v27 = 0;
          v28 = 0;
          v24 = 0;
          if (v2 <= v20)
            v2 = *((_QWORD *)this + 1);
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((_BYTE *)this + 24) = 1;
              goto LABEL_47;
            }
            v29 = v20++;
            v30 = *(_BYTE *)(v21 + v29);
            *((_QWORD *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0)
              break;
            v27 += 7;
            v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((_BYTE *)this + 24))
            LODWORD(v24) = 0;
LABEL_46:
          v2 = v29 + 1;
        }
        else
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          while (1)
          {
            v2 = v20 + 1;
            *((_QWORD *)this + 1) = v20 + 1;
            v25 = *(_BYTE *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0)
              break;
            v22 += 7;
            v20 = v2;
            v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 20) |= 1u;
        v2 = *((_QWORD *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((_QWORD *)this + 2))
        {
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
          v2 = *((_QWORD *)this + 1) + 8;
          *((_QWORD *)this + 1) = v2;
        }
        else
        {
          *((_BYTE *)this + 24) = 1;
        }
      }
      else
      {
        result = PB::Reader::skip(this);
        if (!(_DWORD)result)
          return result;
        v2 = *((_QWORD *)this + 1);
      }
      v3 = *((_QWORD *)this + 2);
      v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0)
        return v4 == 0;
    }
    v15 = 0;
    v16 = 0;
    v11 = 0;
    if (v2 > v3)
      v3 = v2;
    while (v3 != v2)
    {
      v17 = v2 + 1;
      v18 = *(_BYTE *)(v8 + v2);
      *((_QWORD *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0)
        goto LABEL_20;
      v15 += 7;
      v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        v11 = 0;
        goto LABEL_20;
      }
    }
    v4 = 1;
    *((_BYTE *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_18F2937E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  char v4;

  v3 = result;
  v4 = *(_BYTE *)(result + 20);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_BYTE *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
    return PB::Writer::writeVarInt(this);
  return result;
}

uint64_t sub_18F29383C(uint64_t result)
{
  *(_QWORD *)result = &off_1E294E988;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_18F293854(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F293878(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "apAwake");
    v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "calibrationLevel");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "coverage", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0)
      goto LABEL_10;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hasConsistency");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0)
      goto LABEL_12;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 44));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0)
      goto LABEL_13;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "poseX", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "poseY", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "poseZ", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0)
      goto LABEL_16;
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0)
      goto LABEL_17;
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0)
      goto LABEL_18;
LABEL_37:
    PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 72));
    if ((*(_DWORD *)(a1 + 80) & 1) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_19;
  }
LABEL_36:
  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x8000) != 0)
    goto LABEL_37;
LABEL_18:
  if ((v5 & 1) != 0)
LABEL_19:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F293AE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  char v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  char v34;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_93;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_79;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_92;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              v21 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v22 = *(_QWORD *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                v31 = 0;
                v32 = 0;
                v25 = 0;
                if (v2 <= v21)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  v33 = v21++;
                  v34 = *(_BYTE *)(v22 + v33);
                  *((_QWORD *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0)
                    break;
                  v31 += 7;
                  v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    v2 = v33 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v25) = 0;
                goto LABEL_97;
              }
              v23 = 0;
              v24 = 0;
              v25 = 0;
              do
              {
                v2 = v21 + 1;
                *((_QWORD *)this + 1) = v21 + 1;
                v26 = *(_BYTE *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0)
                  goto LABEL_98;
                v23 += 7;
                v21 = v2;
                v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_99:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x20000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v28 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v27 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v28 = v27 != 0;
              }
              *(_BYTE *)(a1 + 77) = v28;
              goto LABEL_99;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v30 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v29 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v30 = v29 != 0;
              }
              *(_BYTE *)(a1 + 76) = v30;
              goto LABEL_99;
            case 0x12u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_92:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_93:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_79:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_99;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_99;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_18F294128(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;

  v3 = result;
  v4 = *(_DWORD *)(result + 80);
  if ((v4 & 1) != 0)
  {
    result = PB::Writer::write(this, *(double *)(result + 8));
    v4 = *(_DWORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x2000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  result = PB::Writer::write(this, *(float *)(v3 + 24));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x8000) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x8000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::write(this, *(float *)(v3 + 32));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::write(this, *(float *)(v3 + 36));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::write(this, *(float *)(v3 + 40));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::write(this, *(float *)(v3 + 48));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 52));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 56));
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0)
      goto LABEL_17;
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0)
      goto LABEL_18;
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::write(this);
  v4 = *(_DWORD *)(v3 + 80);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0)
      return result;
    return PB::Writer::write(this, *(float *)(v3 + 44));
  }
LABEL_36:
  result = PB::Writer::write(this);
  if ((*(_DWORD *)(v3 + 80) & 0x100) != 0)
    return PB::Writer::write(this, *(float *)(v3 + 44));
  return result;
}

uint64_t sub_18F294344(uint64_t result)
{
  *(_QWORD *)result = &off_1E2950588;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_18F29435C(PB::Base *a1)
{
  PB::Base::~Base(a1);
  JUMPOUT(0x194001438);
}

uint64_t sub_18F294380(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  int v5;

  PB::TextFormatter::beginObject(this, a3);
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 16));
    v5 = *(_DWORD *)(a1 + 80);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 20));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 24));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "cost", *(float *)(a1 + 28));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "coverage2d", *(float *)(a1 + 32));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "coverage3d", *(float *)(a1 + 36));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "earthDiffRatio", *(float *)(a1 + 40));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isPlanar");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "numberOfSamples");
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "planarity", *(float *)(a1 + 48));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "quality", *(float *)(a1 + 52));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "scaleX", *(float *)(a1 + 56));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "scaleY", *(float *)(a1 + 60));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0)
      goto LABEL_16;
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "scaleZ", *(float *)(a1 + 64));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 1) == 0)
      goto LABEL_17;
LABEL_35:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(_DWORD *)(a1 + 80) & 0x8000) == 0)
      return PB::TextFormatter::endObject(this);
    goto LABEL_18;
  }
LABEL_34:
  PB::TextFormatter::format(this, "timeSpan", *(float *)(a1 + 68));
  v5 = *(_DWORD *)(a1 + 80);
  if ((v5 & 1) != 0)
    goto LABEL_35;
LABEL_17:
  if ((v5 & 0x8000) != 0)
LABEL_18:
    PB::TextFormatter::format(this, "unitDistance", *(float *)(a1 + 72));
  return PB::TextFormatter::endObject(this);
}

uint64_t sub_18F2945D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  char v15;
  unsigned int v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  int v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  unint64_t v31;
  char v32;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      v8 = *(_QWORD *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        v15 = 0;
        v16 = 0;
        v11 = 0;
        if (v2 > v3)
          v3 = v2;
        while (v3 != v2)
        {
          v17 = v2 + 1;
          v18 = *(_BYTE *)(v8 + v2);
          *((_QWORD *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0)
            goto LABEL_20;
          v15 += 7;
          v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            v11 = 0;
            goto LABEL_20;
          }
        }
        v4 = 1;
        *((_BYTE *)this + 24) = 1;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = v2 + 1;
          *((_QWORD *)this + 1) = v2 + 1;
          v13 = *(_BYTE *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0)
            break;
          v9 += 7;
          v2 = v12;
          v14 = v10++ > 8;
          if (v14)
            goto LABEL_19;
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 80) |= 1u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_QWORD *)(a1 + 8) = *(_QWORD *)(*(_QWORD *)this + v2);
              v2 = *((_QWORD *)this + 1) + 8;
              goto LABEL_89;
            case 2u:
              *(_DWORD *)(a1 + 80) |= 2u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 80) |= 4u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 80) |= 8u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 80) |= 0x800u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 80) |= 0x1000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 80) |= 0x2000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 80) |= 0x400u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 80) |= 0x10u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 80) |= 0x8000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 80) |= 0x10000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 >= *((_QWORD *)this + 2))
              {
                v22 = 0;
                *((_BYTE *)this + 24) = 1;
              }
              else
              {
                v21 = *(unsigned __int8 *)(*(_QWORD *)this + v2++);
                *((_QWORD *)this + 1) = v2;
                v22 = v21 != 0;
              }
              *(_BYTE *)(a1 + 76) = v22;
              goto LABEL_95;
            case 0xCu:
              *(_DWORD *)(a1 + 80) |= 0x20u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 80) |= 0x40u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 80) |= 0x80u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0xFu:
              *(_DWORD *)(a1 + 80) |= 0x4000u;
              v2 = *((_QWORD *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((_QWORD *)this + 2))
                goto LABEL_77;
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(_QWORD *)this + v2);
              goto LABEL_88;
            case 0x10u:
              *(_DWORD *)(a1 + 80) |= 0x100u;
              v23 = *((_QWORD *)this + 1);
              v2 = *((_QWORD *)this + 2);
              v24 = *(_QWORD *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                v29 = 0;
                v30 = 0;
                v27 = 0;
                if (v2 <= v23)
                  v2 = *((_QWORD *)this + 1);
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((_BYTE *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  v31 = v23++;
                  v32 = *(_BYTE *)(v24 + v31);
                  *((_QWORD *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0)
                    break;
                  v29 += 7;
                  v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_93:
                    v2 = v31 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((_BYTE *)this + 24))
                  LODWORD(v27) = 0;
                goto LABEL_93;
              }
              v25 = 0;
              v26 = 0;
              v27 = 0;
              do
              {
                v2 = v23 + 1;
                *((_QWORD *)this + 1) = v23 + 1;
                v28 = *(_BYTE *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0)
                  goto LABEL_94;
                v25 += 7;
                v23 = v2;
                v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 44) = v27;
LABEL_95:
              v3 = *((_QWORD *)this + 2);
              v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0)
                return v4 == 0;
              continue;
            case 0x11u:
              *(_DWORD *)(a1 + 80) |= 0x200u;
              v2 = *((_QWORD *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((_QWORD *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(_QWORD *)this + v2);
LABEL_88:
                v2 = *((_QWORD *)this + 1) + 4;
LABEL_89:
                *((_QWORD *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((_BYTE *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              result = PB::Reader::skip(this);
              if (!(_DWORD)result)
                return result;
              v2 = *((_QWORD *)this + 1);
              goto LABEL_95;
          }
        }
        v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

